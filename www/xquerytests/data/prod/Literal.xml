<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="prod-Literal">
   <description>Tests for the Literal production</description>
   <link type="spec" document="http://www.w3.org/TR/xquery-30/"
         idref="doc-xquery30-Literal"/>
   <link type="spec" document="XQuery" section-number="3.1.1" idref="id-literals"/>

   <test-case name="Literals001">
      <description> Simple use case for string literals </description>
      <created by="Mike Rorke" on="2004-11-23"/>
      <test>"test"</test>
      <result>
         <assert-string-value>test</assert-string-value>
      </result>
   </test-case>

   <test-case name="Literals002">
      <description> Simple use case for string literals </description>
      <created by="Mike Rorke" on="2004-11-23"/>
      <test>'test'</test>
      <result>
         <assert-string-value>test</assert-string-value>
      </result>
   </test-case>

   <test-case name="Literals003">
      <description> Test case where string literal contains a new line </description>
      <created by="Mike Rorke" on="2004-11-23"/>
      <test>"line1
line2"</test>
      <result>
         <assert-string-value>line1
line2</assert-string-value>
      </result>
   </test-case>

   <test-case name="Literals004">
      <description> Test case where string literal contains a new line </description>
      <created by="Mike Rorke" on="2004-11-23"/>
      <test>'line1
line2'</test>
      <result>
         <assert-string-value>line1
line2</assert-string-value>
      </result>
   </test-case>

   <test-case name="Literals005">
      <description> Test case for a sequence of string literals </description>
      <created by="Mike Rorke" on="2004-11-23"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<result>{ ("test1", "test2") }</result>]]></test>
      <result>
         <assert-xml><![CDATA[<result>test1 test2</result>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="Literals006">
      <description> Unterminated string literal </description>
      <created by="Mike Rorke" on="2004-11-23"/>
      <test>"test</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="Literals007">
      <description> Unterminated string literal </description>
      <created by="Mike Rorke" on="2004-11-23"/>
      <test>'test</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="Literals008">
      <description> Incorrectly terminated string literal </description>
      <created by="Mike Rorke" on="2004-11-23"/>
      <test>'test"</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="Literals009">
      <description> Incorrectly terminated string literal </description>
      <created by="Mike Rorke" on="2004-11-23"/>
      <test>"test'</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="Literals010">
      <description> Test for valid integer literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>65535032</test>
      <result>
         <assert-eq>65535032</assert-eq>
      </result>
   </test-case>

   <test-case name="Literals011">
      <description> Test for valid integer literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>-65535032</test>
      <result>
         <assert-eq>-65535032</assert-eq>
      </result>
   </test-case>

   <test-case name="Literals012">
      <description> Test for valid decimal literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>65535032.0023</test>
      <result>
         <assert-string-value>65535032.0023</assert-string-value>
      </result>
   </test-case>

   <test-case name="Literals013">
      <description> Test for valid decimal literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>.65535032</test>
      <result>
         <assert-string-value>0.65535032</assert-string-value>
      </result>
   </test-case>

   <test-case name="Literals014">
      <description> Test for valid decimal literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>-.65535032</test>
      <result>
         <assert-string-value>-0.65535032</assert-string-value>
      </result>
   </test-case>

   <test-case name="Literals015">
      <description> Test for valid decimal literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>+.65535032</test>
      <result>
         <assert-string-value>0.65535032</assert-string-value>
      </result>
   </test-case>

   <test-case name="Literals016">
      <description> Test for valid double literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>65535032e2</test>
      <result>
         <assert-string-value>6.5535032E9</assert-string-value>
      </result>
   </test-case>

   <test-case name="Literals017">
      <description> Test for valid double literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>65535.032e2</test>
      <result>
         <assert-string-value>6.5535032E6</assert-string-value>
      </result>
   </test-case>

   <test-case name="Literals018">
      <description> Test for valid double literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>.65535032e2</test>
      <result>
         <assert-string-value>65.535032</assert-string-value>
      </result>
   </test-case>

   <test-case name="Literals019">
      <description> Test for valid double literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>-.65535032e2</test>
      <result>
         <assert-string-value>-65.535032</assert-string-value>
      </result>
   </test-case>

   <test-case name="Literals020">
      <description> Test for valid double literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>+.65535032e2</test>
      <result>
         <assert-string-value>65.535032</assert-string-value>
      </result>
   </test-case>

   <test-case name="Literals021">
      <description> Test for valid double literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>65535.032e-2</test>
      <result>
         <assert-string-value>655.35032</assert-string-value>
      </result>
   </test-case>

   <test-case name="Literals022">
      <description> Test for valid double literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>.65535032e-2</test>
      <result>
         <assert-string-value>0.0065535032</assert-string-value>
      </result>
   </test-case>

   <test-case name="Literals023">
      <description> Test for valid double literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>-.65535032e-2</test>
      <result>
         <assert-string-value>-0.0065535032</assert-string-value>
      </result>
   </test-case>

   <test-case name="Literals024">
      <description> Test for valid double literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>+.65535032e-2</test>
      <result>
         <assert-string-value>0.0065535032</assert-string-value>
      </result>
   </test-case>

   <test-case name="Literals025">
      <description> Test for valid double literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>-65535.032e2</test>
      <result>
         <assert-string-value>-6.5535032E6</assert-string-value>
      </result>
   </test-case>

   <test-case name="Literals026">
      <description> Test for valid double literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>-65535.032e-2</test>
      <result>
         <assert-string-value>-655.35032</assert-string-value>
      </result>
   </test-case>

   <test-case name="Literals027">
      <description> Test for valid double literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>65535032E2</test>
      <result>
         <assert-string-value>6.5535032E9</assert-string-value>
      </result>
   </test-case>

   <test-case name="Literals028">
      <description> Test for valid double literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>65535.032E2</test>
      <result>
         <assert-string-value>6.5535032E6</assert-string-value>
      </result>
   </test-case>

   <test-case name="Literals029">
      <description> Test for valid double literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>.65535032E2</test>
      <result>
         <assert-string-value>65.535032</assert-string-value>
      </result>
   </test-case>

   <test-case name="Literals030">
      <description> Test for valid double literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>-.65535032E2</test>
      <result>
         <assert-string-value>-65.535032</assert-string-value>
      </result>
   </test-case>

   <test-case name="Literals031">
      <description> Test for valid double literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>+.65535032E2</test>
      <result>
         <assert-string-value>65.535032</assert-string-value>
      </result>
   </test-case>

   <test-case name="Literals032">
      <description> Test for valid double literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>65535.032E-2</test>
      <result>
         <assert-string-value>655.35032</assert-string-value>
      </result>
   </test-case>

   <test-case name="Literals033">
      <description> Test for valid double literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>.65535032E-2</test>
      <result>
         <assert-string-value>0.0065535032</assert-string-value>
      </result>
   </test-case>

   <test-case name="Literals034">
      <description> Test for valid double literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>-.65535032E-2</test>
      <result>
         <assert-string-value>-0.0065535032</assert-string-value>
      </result>
   </test-case>

   <test-case name="Literals035">
      <description> Test for valid double literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>+.65535032E-2</test>
      <result>
         <assert-string-value>0.0065535032</assert-string-value>
      </result>
   </test-case>

   <test-case name="Literals036">
      <description> Test for invalid decimal literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>65535032.001.01</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="Literals037">
      <description> Test for invalid decimal literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>..01</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="Literals038">
      <description> Test for invalid decimal literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>.0.1</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="Literals039">
      <description> Test for invalid decimal literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>-.0.1</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="Literals040">
      <description> Test for invalid decimal literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>+.0.1</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="Literals041">
      <description> Test for invalid double literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>1e 2</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="Literals042">
      <description> Test for invalid double literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>1E 2</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="Literals043">
      <description> Test for invalid double literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>1 e2</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="Literals044">
      <description> Test for invalid double literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>1 E2</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="Literals045">
      <description> Test for invalid double literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>1 e 2</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="Literals046">
      <description> Test for invalid double literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>1 E 2</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="Literals047">
      <description> Test for invalid double literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>1e2.1.1</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="Literals048">
      <description> Test for invalid double literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>1E2.1.1</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="Literals049">
      <description> Test for invalid double literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>1.1.1e2</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="Literals050">
      <description> Test for invalid double literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>1.1.1.E2</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="Literals051">
      <description> Test for invalid double literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>1ee2</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="Literals052">
      <description> Test for invalid double literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>1EE2</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="Literals053">
      <description> Test for invalid double literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>1eE2</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="Literals054">
      <description> Test for invalid double literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>1e2e3</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="Literals055">
      <description> Test for invalid double literal </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>1e-2.1.1</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="Literals056">
      <description> Test for string literal containing the predefined entity reference '&amp;amp;' (XQuery-only)</description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA["&amp;"]]></test>
      <result>
         <assert-string-value>&amp;</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="Literals056a">
      <description> Test for string literal containing the predefined entity reference '&amp;amp;' (XPath-only)</description>
      <created by="Michael Kay" on="2011-07-06"/>
      <dependency type="spec" value="XP20+"/>
      <test><![CDATA["&amp;"]]></test>
      <result>
         <assert-string-value>&amp;amp;</assert-string-value>
      </result>
   </test-case>

   <test-case name="Literals057">
      <description> Test for string literal containing the predefined entity reference '&amp;quot;' (XQuery-only)</description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA["&quot;"]]></test>
      <result>
         <assert-string-value>"</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="Literals057a">
      <description> Test for string literal containing the predefined entity reference '&amp;quot;' (XPath-only)</description>
      <created by="Michael Kay" on="2011-07-06"/>
      <dependency type="spec" value="XP20+"/>
      <test><![CDATA["&quot;"]]></test>
      <result>
         <assert-string-value>&amp;quot;</assert-string-value>
      </result>
   </test-case>

   <test-case name="Literals058">
      <description> Test for string literal containing the predefined entity reference '&amp;apos;' (XQuery-only)</description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA["&apos;"]]></test>
      <result>
         <assert-string-value>'</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="Literals058a">
      <description> Test for string literal containing the predefined entity reference '&amp;apos;' (XPath-only)</description>
      <created by="Michael Kay" on="2011-07-06"/>
      <dependency type="spec" value="XP20+"/>
      <test><![CDATA["&apos;"]]></test>
      <result>
         <assert-string-value>&amp;apos;</assert-string-value>
      </result>
   </test-case>

   <test-case name="Literals059">
      <description> Test for string literal containing the predefined entity reference '&amp;lt;' (XQuery-only)</description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA["&lt;"]]></test>
      <result>
         <assert-string-value>&lt;</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="Literals059a">
      <description> Test for string literal containing the predefined entity reference '&amp;lt;' (XPath-only)</description>
      <created by="Michael Kay" on="2011-07-06"/>
      <dependency type="spec" value="XP20+"/>
      <test><![CDATA["&lt;"]]></test>
      <result>
         <assert-string-value>&amp;lt;</assert-string-value>
      </result>
   </test-case>

   <test-case name="Literals060">
      <description> Test for string literal containing the predefined entity reference '&amp;gt;' (XQuery-only)</description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA["&gt;"]]></test>
      <result>
         <assert-string-value>&gt;</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="Literals060a">
      <description> Test for string literal containing the predefined entity reference '&amp;gt;' (XPath-only)</description>
      <created by="Michael Kay" on="2011-07-06"/>
      <dependency type="spec" value="XP20+"/>
      <test><![CDATA["&gt;"]]></test>
      <result>
         <assert-string-value>&amp;gt;</assert-string-value>
      </result>
   </test-case>

   <test-case name="Literals061">
      <description> Test for string literal containing the character reference '&amp;#8364;' which transaltes into the 'Euro' currency symbol (XQuery-only)</description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA["&#8364;"]]></test>
      <result>
         <assert-string-value>&#8364;</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="Literals061a">
      <description> Test for string literal containing the character reference '&amp;#8364;' which transaltes into the 'Euro' currency symbol (XPath-only)</description>
      <created by="Michael Kay" on="2011-07-06"/>
      <dependency type="spec" value="XP20+"/>
      <test><![CDATA["&#8364;"]]></test>
      <result>
         <assert-string-value>&amp;#8364;</assert-string-value>
      </result>
   </test-case>

   <test-case name="Literals062">
      <description> Test the escaping of the " (quotation) character in XPath/XQuery. </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>""""</test>
      <result>
            <assert-string-value>"</assert-string-value>
      </result>
   </test-case>

   <test-case name="Literals063">
      <description> Test the escaping of the ' (quotation) character in XPath/XQuery. </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>''''</test>
      <result>
            <assert-string-value>'</assert-string-value>
      </result>
   </test-case>

   <test-case name="Literals064">
      <description> Test the escaping of the ' (apostrophe) and " (quotation) characters in XPath/XQuery </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>"He said, ""I don't like it."""</test>
      <result>
            <assert-string-value>He said, "I don't like it."</assert-string-value>
      </result>
   </test-case>

   <test-case name="Literals065">
      <description> Test the escaping of the ' (apostrophe) and " (quotation) characters in XPath/XQuery </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <test>'He said, "I don''t like it."'</test>
      <result>
            <assert-string-value>He said, "I don't like it."</assert-string-value>
      </result>
   </test-case>

   <test-case name="Literals066">
      <description> Test the escaping of the ' (apostrophe) and " (quotation) characters as part of an XML element constructor </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<test>{ 'He said, "I don''t like it."' }</test>]]></test>
      <result>
         <assert-xml><![CDATA[<test>He said, "I don't like it."</test>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="Literals067">
      <description> Test the escaping of the ' (apostrophe) and " (quotation) characters as part of an XML attribute constructor. 
        Notice that the &amp;quot; (quote) characters need to be entitized in the attribute content for XML validity </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<test check='He said, "I don''t like it."' />]]></test>
      <result>
         <assert-xml><![CDATA[<test check="He said, &quot;I don't like it.&quot;"/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="Literals068">
      <description> Test the escaping of the &amp;apos; (apostrophe) and &amp;quot; (quotation) characters as part of an XML text node constructor </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <dependency type="spec" value="XQ10+"/>
      <test>text{ 'He said, "I don''t like it."' }</test>
      <result>
            <assert-string-value>He said, "I don't like it."</assert-string-value>
      </result>
   </test-case>

   <test-case name="Literals069">
      <description> Test the escaping of the &amp;apos; (apostrophe) and &amp;quot; (quotation) characters as part of an XML text node constructor </description>
      <created by="Mike Rorke" on="2005-02-03"/>
      <dependency type="spec" value="XQ10+"/>
      <test>text{ "He said, ""I don't like it.""" }</test>
      <result>
            <assert-string-value>He said, "I don't like it."</assert-string-value>
      </result>
   </test-case>

   <test-case name="K-Literals-1">
      <description> A test whose essence is: `'fo''o' eq 'fo''o'`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>'fo''o' eq 'fo''o'</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-Literals-2">
      <description> A test whose essence is: `'foo' eq "foo"`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>'foo' eq "foo"</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-Literals-3">
      <description> A test whose essence is: `'f'oo'`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>'f'oo'</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-Literals-4">
      <description> '""""' is a valid string literal. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>"""" eq '"'</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-Literals-5">
      <description> '''''' is a valid string literal. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>'''' eq "'"</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-Literals-6">
      <description> '"fo""""' is a valid string literal. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>"fo""o" eq concat("fo", """", "o")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-Literals-7">
      <description> '"f"oo"' is an invalid string literal. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>"f"oo"</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-Literals-8">
      <description> '3.' is a valid number literal. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>3. eq 3.</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-Literals-9">
      <description> '.3' is a valid number literal. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>.3 eq .3</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-Literals-10">
      <description> A test whose essence is: `1.3e-3 instance of xs:double`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>1.3e-3 instance of xs:double</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-Literals-11">
      <description> A test whose essence is: `1.e+3 instance of xs:double`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>1.e+3 instance of xs:double</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-Literals-12">
      <description> A test whose essence is: `1.e3 instance of xs:double`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>1.e3 instance of xs:double</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-Literals-13">
      <description> A test whose essence is: `1231.123e3 instance of xs:double`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>1231.123e3 instance of xs:double</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-Literals-14">
      <description> A test whose essence is: `1.E3 instance of xs:double`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>1.E3 instance of xs:double</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-Literals-15">
      <description> A test whose essence is: `-1231.123e3 instance of xs:double`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>-1231.123e3 instance of xs:double</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-Literals-16">
      <description> A test whose essence is: `3 instance of xs:integer`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>3 instance of xs:integer</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-Literals-17">
      <description> A test whose essence is: `3.3 instance of xs:decimal`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>3.3 instance of xs:decimal</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-Literals-18">
      <description> A test whose essence is: `3.3e1 instance of xs:double`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>3.3e1 instance of xs:double</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-Literals-19">
      <description> A test whose essence is: `"a xs:string" instance of xs:string`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>"a xs:string" instance of xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-Literals-20">
      <description> A test whose essence is: `not(xs:double("NaN"))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not(xs:double("NaN"))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-Literals-21">
      <description> A test whose essence is: `not(xs:float("NaN"))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not(xs:float("NaN"))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-Literals-22">
      <description> A test whose essence is: `xs:float("NaN") instance of xs:float`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:float("NaN") instance of xs:float</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-Literals-23">
      <description> '3 &gt;E 2' is a syntatically invalid expression. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>3 &gt;E 2</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-Literals-24">
      <description> A syntactically invalid query, reminding of somekind of literal. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>33"</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-Literals-25">
      <description> A syntactically invalid query. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>2 + 3!#</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-Literals-26">
      <description> '432f542' is a syntactically invalid expression. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>432f542</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-Literals-27">
      <description> '.54.45' is a syntactically invalid expression. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>.54.45</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-Literals-28">
      <description> '.3' is a valid literal. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>0.3 eq .3</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-Literals-29">
      <description> An empty string is not a valid XPath/XQuery expression. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test/>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-Literals-30">
      <description> '{1}' is a syntactically invalid XQuery expression. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>{1}</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-Literals-31">
      <description> An invalid character reference. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA["a string &;"]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>
   
   <test-case name="K-Literals-31a">
      <description> An invalid character reference is not invalid in XPath. </description>
      <created by="Michael Kay" on="2011-07-06"/>
      <modified by="O'Neil Delpratt" on="2011-10-12" change="Removed quotes from expected result. See bug #14435" />
      <dependency type="spec" value="XP20+"/>
      <test><![CDATA["a string &;"]]></test>
      <result>
         <assert-string-value><![CDATA[a string &;]]></assert-string-value>
      </result>
   </test-case>

   <test-case name="K-Literals-32">
      <description> An invalid decimal character reference. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA["a string &#;"]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-Literals-33">
      <description> An invalid decimal character reference. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA["a string &#;"]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-Literals-34">
      <description> An invalid decimal character reference. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA["a string &#1233a98;"]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-Literals-35">
      <description> An invalid decimal character reference. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA["a string &#1233.98;"]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-Literals-36">
      <description> An invalid decimal character reference, they cannot contain whitespace. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA["a string &#1233 98;"]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-Literals-37">
      <description> Simple test of a decimal character reference. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>"t" eq "t"</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-Literals-38">
      <description> An invalid hexa-decimal character reference. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA["a string &#x;"]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-Literals-39">
      <description> An invalid hexa-decimal character reference. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA["a string &#x543.3;"]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-Literals-40">
      <description> An invalid hexa-decimal character reference. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA["a string &#x543g3;"]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-Literals-41">
      <description> An invalid hexa-decimal character reference, they cannot contain whitespace. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA["a string &#x543 3;"]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-Literals-42">
      <description> 'LT' is not a predefined character reference. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA["a string &LT;"]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-Literals-43">
      <description> 'lte' is not a predefined character reference. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA["a string &lte;"]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-Literals-44">
      <description> '&amp;' must be escaped. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA["a string &"]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-Literals-45">
      <description> An invalid hexa-decimal character reference. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA["a string &#x;"]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-Literals-46">
      <description> Test containing all predefined character references and one hexa and decimal character reference. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA["&lt; &gt; &amp; &quot; &apos; &#x48; &#48;" eq "< > &amp; "" ' &#x48; &#48;"]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-Literals-47">
      <description> Simple test of a hexa decimal character reference. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA["t" eq "&#x74;"]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="K-Literals-47a">
      <description> Simple test of a hexa decimal character reference: not recognized in XPath </description>
      <created by="Michael Kay" on="2011-07-06"/>
      <dependency type="spec" value="XP20+"/>
      <test><![CDATA["t" eq "&#x74;"]]></test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="K-Literals-48">
      <description> The 'x' in a hexa decimal character reference must be lower case. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA["&#X4A;"]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-Literals-49">
      <description> An '&amp;' character reference embedded in other text. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA["I love brownies&amp;cookies." eq "I love brownies&amp;cookies."]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-Literals-50">
      <description> Character references are only allowed inside string literals. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test><![CDATA[1 &lt;= 3]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-Literals-1">
      <description> An invalid character reference. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA["&#x00;"]]></test>
      <result>
         <error code="XQST0090"/>
      </result>
   </test-case>

   <test-case name="K2-Literals-2">
      <description> An invalid character reference. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA["&"]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-Literals-3">
      <description> Preceeding zeros are allowed in character references. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA["&#0000045;"]]></test>
      <result>
         <assert-string-value>-</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-Literals-4">
      <description> Use a relatively large xs:integer literal. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999</test>
      <result>
         <any-of>
            <assert-eq>999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999</assert-eq>
            <error code="FOAR0002"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-Literals-5">
      <description> Use a relatively small xs:integer literal. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>-999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999</test>
      <result>
         <any-of>
            <assert-eq>-999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999</assert-eq>
            <error code="FOAR0002"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-Literals-6">
      <description> Use a relatively large xs:decimal literal. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.1</test>
      <result>
         <any-of>
            <assert-string-value>999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.1</assert-string-value>
            <assert-eq>1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</assert-eq>
            <error code="FOAR0002"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-Literals-7">
      <description> Use a relatively small xs:decimal literal, that might result in an underflow. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001</test>
      <result>
         <any-of>
            <assert-eq>0</assert-eq>
            <assert-string-value>0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001</assert-string-value>
            <error code="FOCA0006"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-Literals-8">
      <description> An xs:double literal with a large significand. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999E100000000000000000000000000000000000000000000000000000000</test>
      <result>
        <any-of>
            <assert-string-value>INF</assert-string-value>
            <error code="FOAR0002"/>
            <!-- largest finite xs:double is also permissible -->
        </any-of>
      </result>
   </test-case>

   <test-case name="K2-Literals-9">
      <description> An xs:double literal with a small significand. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>-999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999E100000000000000000000000000000000000000000000000000000000</test>
      <result>
        <any-of>
            <assert-string-value>-INF</assert-string-value>
            <error code="FOAR0002"/>
            <!-- largest negative finite xs:double is also permissible -->
        </any-of>
      </result>
   </test-case>

   <test-case name="K2-Literals-10">
      <description> Attempt to trigger underflow in an xs:double literal. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <teste10</test>
      <result>
        <any-of>
            <assert-string-value>0</assert-string-value>
            <error code="FOAR0002"/>
            <!-- smallest (closest to zero) finite xs:double is also permissible -->
        </any-of>
      </result>
   </test-case>

   <test-case name="K2-Literals-11">
      <description> Negative zero, as a double. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>-0e0</test>
      <result>
        <all-of>
          <assert-eq>-0</assert-eq>
          <assert-string-value>-0</assert-string-value>
        </all-of>
      </result>
   </test-case>

   <test-case name="K2-Literals-12">
      <description> Zero, as a double. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>0e0</test>
      <result>
         <all-of>
          <assert-eq>0</assert-eq>
          <assert-string-value>0</assert-string-value>
        </all-of>
      </result>
   </test-case>

   <test-case name="K2-Literals-13">
      <description> Negative zero, as a decimal. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>-0.0</test>
      <result>
         <all-of>
          <assert-eq>0</assert-eq>
          <assert-string-value>0</assert-string-value>
        </all-of>
      </result>
   </test-case>

   <test-case name="K2-Literals-14">
      <description> Zero, as a decimal. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>0.0</test>
      <result>
         <all-of>
          <assert-eq>0</assert-eq>
          <assert-string-value>0</assert-string-value>
        </all-of>
      </result>
   </test-case>

   <test-case name="K2-Literals-15">
      <description> A literal looking like a negative zero integer. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>-0</test>
      <result>
         <all-of>
          <assert-eq>0</assert-eq>
          <assert-string-value>0</assert-string-value>
        </all-of>
      </result>
   </test-case>

   <test-case name="K2-Literals-16">
      <description> Use a character reference that is a decimal 32 bit overflow. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<p>FA&#xFF000000F6;IL</p>]]></test>
      <result>
         <error code="XQST0090"/>
      </result>
   </test-case>

   <test-case name="K2-Literals-17">
      <description> Use a character reference that is a hexa decimal 32 bit overflow. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<p>FA&#4294967542;IL</p>]]></test>
      <result>
         <error code="XQST0090"/>
      </result>
   </test-case>

   <test-case name="K2-Literals-18">
      <description> Use a character reference that is a decimal 64 bit overflow. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<p>FA&#xFFFFFFFF000000F6;IL</p>]]></test>
      <result>
         <error code="XQST0090"/>
      </result>
   </test-case>

   <test-case name="K2-Literals-19">
      <description> Use a character reference that is a hexa decimal 64 bit overflow. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<p>FA&#18446744073709551862;IL</p>]]></test>
      <result>
         <error code="XQST0090"/>
      </result>
   </test-case>

   <test-case name="K2-Literals-20">
      <description> Expressions can't be separated by semi-colons. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>1 ; 1</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-Literals-21">
      <description> XQuery doesn't have a syntax for expressing hexa decimals. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>0x20</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-Literals-22">
      <description> A minus sign is not allowed in hexa character references. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA["&#x-20;"]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-Literals-23">
      <description> A minus sign is not allowed in decimal character references. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA["&#-20;"]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-Literals-24">
      <description> A plus sign is not allowed in hexa character references. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA["&#x+20;"]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-Literals-25">
      <description> A plus sign is not allowed in decimal character references. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA["&#+20;"]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-Literals-26">
      <description> Only digits are allowed in decimal character references. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA["&#2A0;"]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-Literals-27">
      <description> 'W' is an invalid character in a hexa character reference. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA["&#xW20;"]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-Literals-28">
      <description> Ensure that EOLs are normalized in string literals. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <modified by="O'Neil Delpratt" on="2011-09-06" change="code point values to match the query"/>
      <dependency type="spec" value="XQ10+"/>
      <test file="Literal/K2-Literals-28.xq"/>
      <result>
         <assert>deep-equal(string-to-codepoints($result), 
            (97, 10, 10, 10, 32, 10, 115, 116, 114, 105, 110, 103, 32, 108, 105, 116, 101, 114, 97, 108, 32, 10))</assert>
      </result>
   </test-case>

   <test-case name="K2-Literals-29">
      <description> A syntactically invalid character reference. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA["&#0xA;"]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-Literals-30">
      <description> Check EBNF 142. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>.5</test>
      <result>
         <assert-string-value>0.5</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-Literals-31">
      <description> Check EBNF 142(#2). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>. 5</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-Literals-32">
      <description> Numeric literals can end with a dot. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>465.</test>
      <result>
         <assert-eq>465</assert-eq>
      </result>
   </test-case>

   <test-case name="K2-Literals-33">
      <description> Two subsequent right curlies. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>} }</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-Literals-34">
      <description> A main module without query body. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>declare namespace prefix = "http://example.com/";</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-Literals-35">
      <description> Attempt to evaluate a library module. The specification does not specify what an implementation 
        should do, so we allow any output and any error code. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>module namespace prefix = "http://example.com"; declare function prefix:myFunction() { 1 };</test>
      <result>
         <any-of>
            <assert>true()</assert>
            <error code="*"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-Literals-36">
      <description> Attempt to evaluate a library module. The specification does not specify what an implementation 
        should do, so we allow any output and any error code. This is a simpler version of the previous query. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>module namespace prefix = "http://www.example.com/";</test>
      <result>
         <any-of>
            <assert>true()</assert>
            <error code="*"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-Literals-37">
      <description> Ensure 'import' is properly parsed as a keyword. </description>
      <created by="Frans Englich" on="2008-01-03"/>
      <test>import gt import</test>
      <result>
         <error code="XPDY0002"/>
      </result>
   </test-case>

   <test-case name="K2-Literals-38">
      <description> Ensure 'schema' is properly parsed as a keyword. </description>
      <created by="Frans Englich" on="2008-01-03"/>
      <test>schema gt schema</test>
      <result>
         <error code="XPDY0002"/>
      </result>
   </test-case>

   <test-case name="K2-Literals-39">
      <description> Ensure that EOLs are normalized in string literals, using single quotes. </description>
      <created by="Frans Englich" on="2008-01-23"/>
      <modified by="O'Neil Delpratt" on="2011-09-08" change="Test-case now references the original XQTS test-case. Corrected expected result"/>
      <dependency type="spec" value="XQ10+"/>
       <test file="Literal/K2-Literals-39.xq"/>
      <result>
         <assert-string-value>a &#xA;&#xA;&#xA; &#xA;string literal &#xA;</assert-string-value>
      </result>
   </test-case>
   
   
   <test-case name="cbcl-literals-001">
      <description> test invalid character in hex character reference </description>
      <created by="Tim Mills" on="2008-08-13"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA['&#x100000000x']]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>
   

   <test-case name="cbcl-literals-002">
      <description> test missing ; in hex character reference </description>
      <created by="Tim Mills" on="2008-08-13"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA['&#x100000000']]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>
   

   <test-case name="cbcl-literals-003">
      <description> test missing digits in hex character reference </description>
      <created by="Tim Mills" on="2008-08-13"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA['&#x;']]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>
   

   <test-case name="cbcl-literals-004">
      <description> test invalid hex character reference </description>
      <created by="Tim Mills" on="2008-08-13"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA['&#x0;']]></test>
      <result>
         <error code="XQST0090"/>
      </result>
   </test-case>
   

   <test-case name="cbcl-literals-005">
      <description> test invalid character in decimal character reference </description>
      <created by="Tim Mills" on="2008-08-13"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA['&#100000000x']]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>
   

   <test-case name="cbcl-literals-006">
      <description> test missing ; in decimal character reference </description>
      <created by="Tim Mills" on="2008-08-13"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA['&#100000000']]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>
   

   <test-case name="cbcl-literals-007">
      <description> test missing digits in decimal character reference </description>
      <created by="Tim Mills" on="2008-08-13"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA['&#;']]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>
   

   <test-case name="cbcl-literals-008">
      <description> test invalid decimal character reference </description>
      <created by="Tim Mills" on="2008-08-13"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA['&#x0;']]></test>
      <result>
         <error code="XQST0090"/>
      </result>
   </test-case>
</test-set>
