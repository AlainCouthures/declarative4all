<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="prod-Comment">
   <description>Tests for the Comment production</description>
   <link type="spec" document="http://www.w3.org/TR/xquery-30/"
         idref="doc-xquery30-Comment"/>
   <link type="spec" document="XQuery" section-number="2.6" idref="comments"/>
   
   <environment name="fsx_NS">
      <source role="." file="ForClause/fsx_NS.xml">
         <description>Data about a filesystem represented in XMLwith namespace-qualified names .</description>
         <created by="Mike Rorke" on="2003-03-25"/>
      </source>
      <namespace prefix="fs" uri="http://www.example.com/filesystem"/>    
   </environment>
   
   <environment name="TreeEmpty">
      <source role="." file="AxisStep/TreeEmpty.xml">
         <description>A "compass" tree that has just one "south" element at the top, bearing one "mark" attribute.</description>
         <created by="David Marston" on="2003-03-25"/> 
      </source>
   </environment>   

   <test-case name="XQueryComment001">
      <description> Simple use case for XQuery comments This is a comment </description>
      <created by="Mike Rorke" on="2005-04-14"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[(: Name: XQueryComment001 :)
(: Description: Simple use case for XQuery comments :)


(: This is a comment :)
<result/>

]]></test>
      <result>
         <assert-xml><![CDATA[<result/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="XQueryComment002">
      <description> Simple use case for XQuery comments This is a comment </description>
      <created by="Mike Rorke" on="2005-04-14"/>
      <environment ref="fsx_NS"/>
      <test>(: Name: XQueryComment002 :)
(: Description: Simple use case for XQuery comments :)




(: This is a comment :)
(//fs:Folder)[1]/fs:File[1]/fs:FileName
</test>
      <result>
         <assert-xml><![CDATA[<fs:FileName xmlns:fs="http://www.example.com/filesystem">File00000000000</fs:FileName>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="XQueryComment003">
      <description> Simple use case for XQuery comment containing '-' This is a comment- </description>
      <created by="Mike Rorke" on="2005-04-14"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[(: Name: XQueryComment003 :)
(: Description: Simple use case for XQuery comment containing '-' :)


(:This is a comment-:)
<result/>
]]></test>
      <result>
         <assert-xml><![CDATA[<result/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="XQueryComment004">
      <description> Empty comment </description>
      <created by="Mike Rorke" on="2005-04-14"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[(: Name: XQueryComment004 :)
(: Description: Empty comment :)


(::)
<result/>
]]></test>
      <result>
         <assert-xml><![CDATA[<result/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="XQueryComment005">
      <description> Comment containing only '-' - </description>
      <created by="Mike Rorke" on="2005-04-14"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[(: Name: XQueryComment004 :)
(: Description: Comment containing only '-' :)


(:-:)
<result/>
]]></test>
      <result>
         <assert-xml><![CDATA[<result/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="XQueryComment006">
      <description> Comment containing ':' this is a comment : </description>
      <created by="Mike Rorke" on="2005-04-14"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[(: Name: XQueryComment006 :)
(: Description: Comment containing ':' :)


(: this is a comment ::)
<result/>
]]></test>
      <result>
         <assert-xml><![CDATA[<result/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="XQueryComment007">
      <description> Comment containing ')' this is a comment ) </description>
      <created by="Mike Rorke" on="2005-04-14"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[(: Name: XQueryComment007 :)
(: Description: Comment containing ')' :)


(: this is a comment ):)
<result/>
]]></test>
      <result>
         <assert-xml><![CDATA[<result/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="XQueryComment008">
      <description> Simple example of embedded comments this is a comment (: this is an embedded comment </description>
      <created by="Mike Rorke" on="2005-04-14"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[(: Name: XQueryComment008 :)
(: Description: Simple example of embedded comments :)


(: this is a comment (: this is an embedded comment :):)
<result/>
]]></test>
      <result>
         <assert-xml><![CDATA[<result/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="XQueryComment009">
      <description> Comments inside a conditional expression test (: yada (: neato yada yada yada </description>
      <created by="Mike Rorke" on="2005-04-14"/>
      <environment ref="fsx_NS"/>
      <test>(: Name: XQueryComment009 :)
(: Description: Comments inside a conditional expression :)



if (:test (: yada (: neato :) :) :) (/fs:MyComputer) 
	then (: yada :) "true"
	else "false"
</test>
      <result>
         <assert-string-value>true</assert-string-value>
      </result>
   </test-case>

   <test-case name="XQueryComment010">
      <description> Comments inside a conditional expression comment this is the then case this is the else case </description>
      <created by="Mike Rorke" on="2003-02-10"/>
      <environment ref="fsx_NS"/>
      <test><![CDATA[
(: Name: XQueryComment010 :)
(: Description: Comments inside a conditional expression :)
if (: comment :) 
  ( //fs:Folder[1]/fs:FolderName/text() = "Folder00000000000" ) 
then (: this is the then case :) ( true() )
else (: this is the else case :) ( false() )

]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="XQueryComment011">
      <description> Comments inside a conditional expression test t2 t3 </description>
      <created by="Mike Rorke" on="2005-04-14"/>
      <environment ref="fsx_NS"/>
      <test>(: Name: XQueryComment011 :)
(: Description: Comments inside a conditional expression :)



if (:test:)(:t2:)(:t3:) (/fs:MyComputer) 
	then "true"
	else "false"

</test>
      <result>
         <assert-string-value>true</assert-string-value>
      </result>
   </test-case>

   <test-case name="XQueryComment012">
      <description> Comments that looks like a function call test </description>
      <created by="Mike Rorke" on="2005-04-14"/>
      <environment ref="TreeEmpty"/>
      <test>(: Name: XQueryComment012 :)
(: Description: Comments that looks like a function call :)


/south(: test :)

</test>
      <result>
         <assert-xml><![CDATA[<south mark="s0" />]]></assert-xml>
      </result>
   </test-case>

   <test-case name="XQueryComment013">
      <description> Comments inside a sequence expression comment </description>
      <created by="Mike Rorke" on="2005-04-14"/>
      <test>(: Name: XQueryComment013 :)
(: Description: Comments inside a sequence expression :)


(1, 2, (: comment :) 3, 4)

</test>
      <result>
         <assert-string-value>1 2 3 4</assert-string-value>
      </result>
   </test-case>

   <test-case name="XQueryComment014">
      <description> Comments inside a cast expression type comment </description>
      <created by="Mike Rorke" on="2005-04-14"/>
      <test>(: Name: XQueryComment014 :)
(: Description: Comments inside a cast expression :)


"10" cast as (: type comment :) xs:integer ?

</test>
      <result>
         <assert-eq>10</assert-eq>
      </result>
   </test-case>

   <test-case name="XQueryComment015">
      <description> Incorrect comment syntax </description>
      <created by="Mike Rorke" on="2005-04-14"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[(: Name: XQueryComment015 :)
(: Description: Incorrect comment syntax :)


(! Wrong syntax :)
<empty/>]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="XQueryComment016">
      <description> Invalid comment </description>
      <created by="Mike Rorke" on="2005-04-14"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[(: Name: XQueryComment016 :)
(: Description: Invalid comment :)


(:)
<empty/>]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="XQueryComment017">
      <description> Invalid comment </description>
      <created by="Mike Rorke" on="2005-04-14"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[(: Name: XQueryComment017 :)
(: Description: Invalid comment :)


(:: )
<empty/>]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="XQueryComment018">
      <description> Invalid comment </description>
      <created by="Mike Rorke" on="2005-04-14"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[(: Name: XQueryComment018 :)
(: Description: Invalid comment :)


-- Wrong comment format
<empty/>]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="XQueryComment019">
      <description> Old style comment syntax </description>
      <created by="Mike Rorke" on="2005-04-14"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[(: Name: XQueryComment019 :)
(: Description: Old style comment syntax :)


{-- Wrong comment format --}
<empty/>]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="XQueryComment020">
      <description> Comment containing an enclosed expression { "comment" } </description>
      <created by="Mike Rorke" on="2005-04-14"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[(: Name: XQueryComment020 :)
(: Description: Comment containing an enclosed expression :)


(: { "comment" } :)
<result/>]]></test>
      <result>
         <assert-xml><![CDATA[<result/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="K-XQueryComment-1">
      <description> A test whose essence is: `(3(: comment inbetween comment inbetween </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>(:*******************************************************:)
(: Test: K-XQueryComment-1                               :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: A test whose essence is: `(3(: comment inbetween :)- 1) eq 2`. :)
(:*******************************************************:)
(3(: comment inbetween :)- 1) eq 2</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-XQueryComment-2">
      <description> A test whose essence is: `1 (: a (: nested a (: nested </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>(:*******************************************************:)
(: Test: K-XQueryComment-2                               :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: A test whose essence is: `1 (: a (: nested :) comment :) eq 1`. :)
(:*******************************************************:)
1 (: a (: nested :) comment :) eq 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-XQueryComment-3">
      <description> A test whose essence is: `1 (: comment (: inside comment (: inside </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>(:*******************************************************:)
(: Test: K-XQueryComment-3                               :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: A test whose essence is: `1 (: comment (: inside :) comment :) eq 1`. :)
(:*******************************************************:)
1 (: comment (: inside :) comment :) eq 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-XQueryComment-4">
      <description> Comparison of two string literals, whose content reminds of comments. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>(:*******************************************************:)
(: Test: K-XQueryComment-4                               :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: Comparison of two string literals, whose content reminds of comments. :)
(:*******************************************************:)
"reminds of a comment :)" eq
		    "reminds of a comment :)"</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-XQueryComment-5">
      <description> A test whose essence is: `5 instance (: strange place for a comment strange place for a comment </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>(:*******************************************************:)
(: Test: K-XQueryComment-5                               :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: A test whose essence is: `5 instance (: strange place for a comment :) of item()`. :)
(:*******************************************************:)
5 instance (: strange place for a comment :) of item()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-XQueryComment-6">
      <description> A test whose essence is: `1 (: simple comment simple comment </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>(:*******************************************************:)
(: Test: K-XQueryComment-6                               :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: A test whose essence is: `1 (: simple comment :) eq 1`. :)
(:*******************************************************:)
1 (: simple comment :) eq 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-XQueryComment-7">
      <description> A test whose essence is: `1 (: comment (: inside comment (: inside </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>(:*******************************************************:)
(: Test: K-XQueryComment-7                               :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: A test whose essence is: `1 (: comment (: inside :) NEW LINE comment :) eq 1`. :)
(:*******************************************************:)
1 (: comment (: inside :)
				NEW LINE comment :) eq 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-XQueryComment-8">
      <description> A test whose essence is: `(: "recursive comments must be balanced, this one is not "recursive comments must be balanced, this one is not </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>(:*******************************************************:)
(: Test: K-XQueryComment-8                               :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: A test whose essence is: `(: "recursive comments must be balanced, this one is not :)" :)`. :)
(:*******************************************************:)
(: "recursive comments must be 
	balanced, this one is not :)" :)</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-XQueryComment-9">
      <description> An empty comment inbetween the 'eq' operator and a number literal. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>(:*******************************************************:)
(: Test: K-XQueryComment-9                               :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: An empty comment inbetween the 'eq' operator and a number literal. :)
(:*******************************************************:)
1 eq (::)1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-XQueryComment-10">
      <description> An empty comment at the very beginning of an expression. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>(:*******************************************************:)
(: Test: K-XQueryComment-10                              :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: An empty comment at the very beginning of an expression. :)
(:*******************************************************:)
(::) 1 eq 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-XQueryComment-11">
      <description> An empty comment after a function's paranteses. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>(:*******************************************************:)
(: Test: K-XQueryComment-11                              :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: An empty comment after a function's paranteses. :)
(:*******************************************************:)
true()(::)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-XQueryComment-12">
      <description> A for loop with a comment inbetween. set up loop </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>(:*******************************************************:)
(: Test: K-XQueryComment-12                              :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: A for loop with a comment inbetween.         :)
(:*******************************************************:)
for (: set up loop :) $i in 3 return $i eq 3</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-XQueryComment-13">
      <description> A test whose essence is: `if((: comment inbetween comment inbetween </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>(:*******************************************************:)
(: Test: K-XQueryComment-13                              :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: A test whose essence is: `if((: comment inbetween :)) then 1 else 1`. :)
(:*******************************************************:)
if((: comment inbetween :)) then 1 else 1</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-XQueryComment-14">
      <description> A syntactically invalid comment that never ends. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>(:*******************************************************:)
(: Test: K-XQueryComment-14                              :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: A syntactically invalid comment that never ends. :)
(:*******************************************************:)
1(: this comment does not end:</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-XQueryComment-15">
      <description> A comment inside a comment that isn't terminated. content (: this comment does not end </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>(:*******************************************************:)
(: Test: K-XQueryComment-15                              :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: A comment inside a comment that isn't terminated. :)
(:*******************************************************:)
1(: content (: this comment does not end :)</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-XQueryComment-16">
      <description> A comment inside a comment that does not start properly. content this comment does not start properly </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>(:*******************************************************:)
(: Test: K-XQueryComment-16                              :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: A comment inside a comment that does not start properly. :)
(:*******************************************************:)
1(: content this comment does not start properly :) :)</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-XQueryComment-17">
      <description> Colons and paranteses appearing freely in comment content. ((( : )) ))ladl: :(): ()()(dahsi ()()( dad: ) </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>(:*******************************************************:)
(: Test: K-XQueryComment-17                              :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: Colons and paranteses appearing freely in comment content. :)
(:*******************************************************:)
1(: ((( : )) ))ladl:  :(): ()()(dahsi ()()( dad: ) :) eq 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-XQueryComment-18">
      <description> Three comments appearing serially inside a comment. (:one comment another comment a third </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>(:*******************************************************:)
(: Test: K-XQueryComment-18                              :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: Three comments appearing serially inside a comment. :)
(:*******************************************************:)
1(: (:one comment:) content (:another comment:) content (:a third:):)
			   eq 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-XQueryComment-19">
      <description> A test stressing many nested comments. (:(:(:(:(:(:(: </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>(:*******************************************************:)
(: Test: K-XQueryComment-19                              :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: A test stressing many nested comments.       :)
(:*******************************************************:)
1(:(:(:(:(:(:(:(::):):):):):):):) eq 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-XQueryComment-20">
      <description> A syntactically invalid comment that doesn't properly start. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>(:*******************************************************:)
(: Test: K-XQueryComment-20                              :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:22+01:00                       :)
(: Purpose: A syntactically invalid comment that doesn't properly start. :)
(:*******************************************************:)
: :) 1</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-XQueryComment-1">
      <description> An invalid comment after a name test. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[(:*******************************************************:)
(: Test: K2-XQueryComment-1                              :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:21+01:00                       :)
(: Purpose: An invalid comment after a name test.        :)
(:*******************************************************:)
let $i := <e>
                                            <b/>
                                            <b/>
                                            <b/>
                                        </e>
                              return $i/b(:  ]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-XQueryComment-2">
      <description> An invalid comment after a name test(#2). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[(:*******************************************************:)
(: Test: K2-XQueryComment-2                              :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:21+01:00                       :)
(: Purpose: An invalid comment after a name test(#2).    :)
(:*******************************************************:)
let $i := <e>
                                            <b/>
                                            <b/>
                                            <b/>
                                        </e>
                              return $i/b(: some : content (:some content  ]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-XQueryComment-3">
      <description> Have a computed comment constructor as a last step. some : content (:some content </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[(:*******************************************************:)
(: Test: K2-XQueryComment-3                              :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:21+01:00                       :)
(: Purpose: Have a computed comment constructor as a last step. :)
(:*******************************************************:)
let $i := <e>
                                            <b/>
                                            <b/>
                                            <b/>
                                        </e>
                                        return $i/b/comment(: some : content (:some content:):){"content"}  ]]></test>
      <result>
         <assert-xml><![CDATA[<!--content--><!--content--><!--content-->]]></assert-xml>
      </result>
   </test-case>

   <test-case name="K2-XQueryComment-4">
      <description> Have a direct comment constructor as a last step. some : content (:some content </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[(:*******************************************************:)
(: Test: K2-XQueryComment-4                              :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:21+01:00                       :)
(: Purpose: Have a direct comment constructor as a last step. :)
(:*******************************************************:)
let $i := <e>
                                            <b/>
                                            <b/>
                                            <b/>
                                        </e>
                                        return $i/(: some : content (:some content:):)<!--content-->  ]]></test>
      <result>
         <assert-xml><![CDATA[<!--content-->]]></assert-xml>
      </result>
   </test-case>

   <test-case name="K2-XQueryComment-5">
      <description> Have a direct comment constructor as a last step(#2). some : content (:some content </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[(:*******************************************************:)
(: Test: K2-XQueryComment-5                              :)
(: Written by: Frans Englich                             :)
(: Date: 2007-11-22T11:31:21+01:00                       :)
(: Purpose: Have a direct comment constructor as a last step(#2). :)
(:*******************************************************:)
let $i := <e>
                                            <b/>
                                            <b/>
                                            <b/>
                                        </e>
                                        return $i/b/(: some : content (:some content:):)<!--content-->  ]]></test>
      <result>
         <assert-xml><![CDATA[<!--content--><!--content--><!--content-->]]></assert-xml>
      </result>
   </test-case>
</test-set>