<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="prod-SwitchExpr" covers="switch version-decl-30">
   <description>Tests for the SwitchExpr production</description>
   <link type="spec" document="http://www.w3.org/TR/xquery-30/"
         idref="doc-xquery30-SwitchExpr"/>
   <link type="spec" document="FuncOps" section-number="3.11" idref="id-switch"/>
   
   <dependency type="spec" value="XQ30+"/>   

   <test-case name="switch-001">
      <description> basic switch example </description>
      <created by="Michael Kay" on="2010-03-16"/>
      <test><![CDATA[xquery version "3.0"; 
        declare variable $animal as xs:string := "Cat"; 
        <out>{ switch ($animal) 
            case "Cow" return "Moo" 
            case "Cat" return "Meow" 
            case "Duck" return "Quack" 
            default return "What's that odd noise?" }</out>]]></test>
      <result>
         <assert-xml><![CDATA[<out>Meow</out>]]></assert-xml>            
      </result>
   </test-case>

   <test-case name="switch-002">
      <description> basic switch example, matches default clause </description>
      <created by="Michael Kay" on="2010-03-16"/>
      <test><![CDATA[xquery version "3.0"; 
        declare variable $animal as xs:string := "Dog"; 
        <out>{ switch ($animal) 
            case "Cow" return "Moo"
            case "Cat" return "Meow" 
            case "Duck" return "Quack" 
            default return "What's that odd noise?" }</out>]]></test>
      <result>
         <assert-xml><![CDATA[<out>What's that odd noise?</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="switch-003">
      <description> switch test, non-constant case clause </description>
      <created by="Michael Kay" on="2010-03-16"/>
      <test><![CDATA[xquery version "3.0"; 
        declare variable $animal as xs:string := "!?!?"; 
        <out>{ switch (upper-case($animal)) 
            case "COW" return "Moo"
            case "CAT" return "Meow" 
            case "DUCK" return "Quack" 
            case lower-case($animal) return "Oink" 
            default return "What's that odd noise?" }</out>]]></test>
      <result>
         <assert-xml><![CDATA[<out>Oink</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="switch-004">
      <description> switch test, multiple case clauses </description>
      <created by="Michael Kay" on="2010-03-16"/>
      <test><![CDATA[xquery version "3.0"; 
        declare variable $animal as xs:string := "goose"; 
        <out>{ switch (upper-case($animal)) 
            case "COW" return "Moo" 
            case "CAT" return "Meow" 
            case "DUCK" case "GOOSE" return "Quack" 
            case "PIG" case "SWINE" return "Oink" 
            default return "What's that odd noise?" }</out>]]></test>
      <result>
         <assert-xml><![CDATA[<out>Quack</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="switch-005">
      <description> switch test, multiple case clauses </description>
      <created by="Michael Kay" on="2010-03-16"/>
      <test><![CDATA[xquery version "3.0"; 
        declare variable $animal as xs:string := "duck"; 
        <out>{ switch (upper-case($animal)) 
            case "COW" return "Moo" 
            case "CAT" return "Meow" 
            case "DUCK" case "GOOSE" return "Quack" 
            case "PIG" case "SWINE" return "Oink" 
            default return "What's that odd noise?" }</out>]]></test>
      <result>
         <assert-xml><![CDATA[<out>Quack</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="switch-006">
      <description> switch test, numeric case clauses, no type error </description>
      <created by="Michael Kay" on="2010-03-16"/>
      <test><![CDATA[xquery version "3.0"; 
        declare variable $number as xs:decimal := 42; 
        <out>{ switch ($number) case 21 return "Moo" 
            case current-time() return "Meow" 
            case 42 return "Quack" 
            default return 3.14159 }</out>]]></test>
      <result>
         <assert-xml><![CDATA[<out>Quack</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="switch-007">
      <description> switch test, untypedAtomic is converted to string </description>
      <created by="Michael Kay" on="2010-03-16"/>
      <test><![CDATA[xquery version "3.0"; 
        declare variable $in := <a>42</a>; 
        <out>{ switch ($in) 
            case 42 return "Moo" 
            case "42" return "Meow" 
            case 42e0 return "Quack" 
            case "42e0" return "Oink" 
            default return "Expletive deleted" }</out>]]></test>
      <result>
         <assert-xml><![CDATA[<out>Meow</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="switch-008">
      <description> switch test, untypedAtomic is converted to string </description>
      <created by="Michael Kay" on="2010-03-16"/>
      <test><![CDATA[xquery version "3.0"; 
        declare variable $in := "42"; 
        <out>{ switch ($in) 
            case 42 return "Moo" 
            case <a>42</a> return "Meow" 
            case 42e0 return "Quack" 
            case "42e0" return "Oink" 
            default return "Expletive deleted" }</out>]]></test>
      <result>
         <assert-xml><![CDATA[<out>Meow</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="switch-009">
      <description> switch test, empty matches empty </description>
      <created by="Michael Kay" on="2010-03-16"/>
      <test><![CDATA[xquery version "3.0"; 
        declare variable $in := (); 
        <out>{ switch ($in) 
            case 42 return "Moo" 
            case <a>42</a> return "Meow" 
            case 42e0 return "Quack" 
            case "42e0" return "Oink" 
            case () return "Woof" 
            default return "Expletive deleted" }</out>]]></test>
      <result>
         <assert-xml><![CDATA[<out>Woof</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="switch-010">
      <description> switch test, non-matching empty </description>
      <created by="Michael Kay" on="2010-03-16"/>
      <test><![CDATA[xquery version "3.0"; 
        declare variable $in := 21; 
        <out>{ switch ($in) 
            case 42 return "Moo" 
            case <a>42</a> return "Meow" 
            case 42e0 return "Quack" 
            case "42e0" return "Oink" 
            case () return "Woof" 
            default return "Expletive deleted" }</out>]]></test>
      <result>
         <assert-xml><![CDATA[<out>Expletive deleted</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="switch-011">
      <description> switch test, NaN matches NaN </description>
      <created by="Michael Kay" on="2010-03-16"/>
      <test><![CDATA[xquery version "3.0"; 
        declare variable $in := xs:double('NaN'); 
        <out>{ switch ($in) 
            case 42 return "Moo" 
            case <a>42</a> return "Meow" 
            case 42e0 return "Quack" 
            case "42e0" return "Oink" 
            case xs:float('NaN') return "Woof" 
            default return "Expletive deleted" }</out>]]></test>
      <result>
         <assert-xml><![CDATA[<out>Woof</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="switch-012">
      <description> switch test, no dynamic errors </description>
      <created by="Michael Kay" on="2010-03-16"/>
      <test><![CDATA[xquery version "3.0"; 
        declare variable $in := 25; 
        declare variable $zero := 0; 
        <out>{ switch ($in) 
            case 42 return $in div $zero 
            case 25 return "Baa" 
            case 39 return $in div $zero 
            default return "Woof" }</out>]]></test>
      <result>
         <assert-xml><![CDATA[<out>Baa</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="switch-013">
      <description> switch test, no dynamic errors </description>
      <created by="Michael Kay" on="2010-03-16"/>
      <test><![CDATA[xquery version "3.0"; 
        declare variable $in := 25; 
        declare variable $zero := 0; 
        <out>{ switch ($in) 
            case 42 return "Quack" 
            case 25 return "Baa" 
            case $in div $zero return "Neigh" 
            default return "Woof" }</out>]]></test>
      <result>
         <assert-xml><![CDATA[<out>Baa</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="switch-901">
      <description> switch, type error, switch operand &gt;1 item </description>
      <created by="Michael Kay" on="2010-03-16"/>
      <test><![CDATA[xquery version "3.0"; 
        declare variable $in := 2; 
        <out>{ switch (1 to $in) 
            case 1 return "Moo" 
            case 2 return "Meow" 
            case 3 return "Quack" 
            case 4 return "Oink" 
            default return "Baa" }</out>]]></test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="switch-902">
      <description> switch, type error, case operand &gt;1 item </description>
      <created by="Michael Kay" on="2010-03-16"/>
      <test><![CDATA[xquery version "3.0"; 
        declare variable $in := 2; 
        <out>{ switch ($in) 
            case 1 return "Moo" 
            case 5 return "Meow" 
            case 3 return "Quack" 
            case ($in to 4) return "Oink" 
            default return "Baa" }</out>]]></test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="switch-903">
      <description> switch, static error, no cases </description>
      <created by="Michael Kay" on="2010-03-16"/>
      <test><![CDATA[xquery version "3.0"; 
        declare variable $in := 2; 
        <out>{ switch ($in) default return "Baa" }</out>]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="switch-904">
      <description> switch, static error, no default </description>
      <created by="Michael Kay" on="2010-03-16"/>
      <test><![CDATA[xquery version "3.0"; 
        declare variable $in := 2; 
        <out>{ switch ($in) 
            case 1 return "Moo" 
            case 5 return "Meow" 
            case 3 return "Quack" 
            case ($in to 4) return "Oink" }</out>]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="switch-905">
      <description> switch, static error, empty case list </description>
      <created by="Michael Kay" on="2010-03-16"/>
      <test><![CDATA[xquery version "3.0"; 
        declare variable $in := 2; 
        <out>{ switch ($in) 
            case 1 return "Moo" 
            case 5 return "Meow" return "Quack" 
            case ($in to 4) return "Oink" 
            default return "Baa" }</out>]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="switch-906">
      <description> switch, static error, not an ExprSingle </description>
      <created by="Michael Kay" on="2010-03-16"/>
      <test><![CDATA[xquery version "3.0"; 
        declare variable $in := 2; 
        <out>{ switch ($in) 
            case 1 return "Moo", "Boo" 
            case 5 return "Meow" 
            case 7 return "Quack" 
            case 4 return "Oink" 
            default return "Baa" }</out>]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="switch-907">
      <description> switch, static error, params required </description>
      <created by="Michael Kay" on="2010-03-16"/>
      <test><![CDATA[xquery version "3.0"; 
        declare variable $in := 2; 
        <out>{ switch $in 
            case 1 return "Moo", "Boo" 
            case 5 return "Meow" 
            case 7 return "Quack" 
            case 4 return "Oink" 
            default return "Baa" }</out>]]></test>
      <result>
         <any-of>
            <error code="XPST0003"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="switch-908">
      <description> switch, static error, curlies not allowed </description>
      <created by="Michael Kay" on="2010-03-16"/>
      <test><![CDATA[xquery version "3.0"; 
        declare variable $in := 2; 
        <out>{ switch ($in) { 
            case 1 return "Moo", "Boo" 
            case 5 return "Meow" 
            case 7 return "Quack" 
            case 4 return "Oink" 
            default return "Baa" } }</out>]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="switch-909">
      <description> switch, static error, colons not allowed </description>
      <created by="Michael Kay" on="2010-03-16"/>
      <test><![CDATA[xquery version "3.0"; 
        declare variable $in := 2; 
        <out>{ switch ($in) 
            case 1: return "Moo", "Boo" 
            case 5: return "Meow" 
            case 7: return "Quack" 
            case 4: return "Oink" 
            default: return "Baa" }</out>]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>
</test-set>