<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="prod-CastableExpr">
   <description>Tests for the CastableExpr production</description>
   <link type="spec" document="http://www.w3.org/TR/xquery-30/"
         idref="doc-xquery30-CastableExpr"/>
   <link type="spec" document="FuncOps" section-number="17.1.2"
         idref="casting-to-string"/>

   <environment name="union-List-defined-Types" >
     <schema uri="http://www.w3.org/XQueryTest/unionListDefined" file="SchemaImport/unionListDefined.xsd">
       <description>A Schema of union and list defined types</description>
       <created by="O'Neil Delpratt" on="2011-10-27"/>
     </schema>
   </environment>
         
   <environment name="acme_corp">
      <source role="." file="../op/union/acme_corp.xml">
         <description>Source document for Function Declaration tests</description>
         <created by="Ravindranath Chennoju" on="2000-01-01"/>
      </source>
   </environment>
   
   <environment name="derived">
     <schema uri="http://www.w3.org/XQueryTest/derivedTypes" file="CastExpr/derived.xsd">
       <description>Some restrictions of built-in derived types</description> 
       <created by="Tim Mills" on="2008-01-01"/>
     </schema>
   </environment>  
         

   <test-case name="CastableAs001">
      <description>Try xs:untypedAtomic(INF) castable as xs:untypedAtomic </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("INF") castable as xs:untypedAtomic</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs002">
      <description>Try xs:untypedAtomic(0.0E0) castable as xs:untypedAtomic </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("0.0E0") castable as xs:untypedAtomic</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs003">
      <description>Try xs:untypedAtomic(true) castable as xs:untypedAtomic </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("true") castable as xs:untypedAtomic</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs004">
      <description>Try xs:untypedAtomic(INF) castable as xs:string </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("INF") castable as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs005">
      <description>Try xs:untypedAtomic(0.0E0) castable as xs:string </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("0.0E0") castable as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs006">
      <description>Try xs:untypedAtomic(true) castable as xs:string </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("true") castable as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs007">
      <description>Try xs:untypedAtomic(-0.0E0) castable as xs:float </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("-0.0E0") castable as xs:float</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs008">
      <description>Try xs:untypedAtomic(NaN) castable as xs:float </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("NaN") castable as xs:float</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs009">
      <description>Try xs:untypedAtomic(1e-5) castable as xs:float </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("1e-5") castable as xs:float</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs010">
      <description>Try xs:untypedAtomic(-10000000) castable as xs:float </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("-10000000") castable as xs:float</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs011">
      <description>Try xs:untypedAtomic(true) castable as xs:float </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("true") castable as xs:float</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs012">
      <description>Try xs:untypedAtomic(-0.0E0) castable as xs:double </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("-0.0E0") castable as xs:double</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs013">
      <description>Try xs:untypedAtomic(NaN) castable as xs:double </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("NaN") castable as xs:double</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs014">
      <description>Try xs:untypedAtomic(1e-5) castable as xs:double </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("1e-5") castable as xs:double</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs015">
      <description>Try xs:untypedAtomic(-10000000) castable as xs:double </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("-10000000") castable as xs:double</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs016">
      <description>Try xs:untypedAtomic(true) castable as xs:double </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("true") castable as xs:double</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs017">
      <description>Try xs:untypedAtomic(-0.0E0) castable as xs:decimal </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("-0.0E0") castable as xs:decimal</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs018">
      <description>Try xs:untypedAtomic(NaN) castable as xs:decimal </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("NaN") castable as xs:decimal</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs019">
      <description>Try xs:untypedAtomic(1e-5) castable as xs:decimal </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("1e-5") castable as xs:decimal</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs020">
      <description>Try xs:untypedAtomic(5.5432) castable as xs:decimal </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("5.5432") castable as xs:decimal</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs021">
      <description>Try xs:untypedAtomic(true) castable as xs:decimal </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("true") castable as xs:decimal</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs022">
      <description>Try xs:untypedAtomic(-0.0E0) castable as xs:integer </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("-0.0E0") castable as xs:integer</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs023">
      <description>Try xs:untypedAtomic(NaN) castable as xs:integer </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("NaN") castable as xs:integer</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs024">
      <description>Try xs:untypedAtomic(1e-5) castable as xs:integer </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("1e-5") castable as xs:integer</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs025">
      <description>Try xs:untypedAtomic(-1.1234) castable as xs:integer </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("-1.1234") castable as xs:integer</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs026">
      <description>Try xs:untypedAtomic(true) castable as xs:integer </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("true") castable as xs:integer</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs027">
      <description>Try xs:untypedAtomic(P1Y2M3DT10H30M23S) castable as xs:duration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("P1Y2M3DT10H30M23S") castable as xs:duration</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs028">
      <description>Try xs:untypedAtomic(-P1Y1M1DT1H1M1.123S) castable as xs:duration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("-P1Y1M1DT1H1M1.123S") castable as xs:duration</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs029">
      <description>Try xs:untypedAtomic(true) castable as xs:duration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("true") castable as xs:duration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs030">
      <description>Try xs:untypedAtomic(-P1Y1M1DT1H1M1.123S) castable as xs:yearMonthDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("-P1Y1M1DT1H1M1.123S") castable as xs:yearMonthDuration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs031">
      <description>Try xs:untypedAtomic(P24M) castable as xs:yearMonthDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("P24M") castable as xs:yearMonthDuration</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs032">
      <description>Try xs:untypedAtomic(-P21M) castable as xs:yearMonthDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("-P21M") castable as xs:yearMonthDuration</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs033">
      <description>Try xs:untypedAtomic(true) castable as xs:yearMonthDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("true") castable as xs:yearMonthDuration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs034">
      <description>Try xs:untypedAtomic(-P1Y1M1DT1H1M1.123S) castable as xs:dayTimeDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("-P1Y1M1DT1H1M1.123S") castable as xs:dayTimeDuration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs035">
      <description>Try xs:untypedAtomic(P3DT10H30M) castable as xs:dayTimeDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("P3DT10H30M") castable as xs:dayTimeDuration</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs036">
      <description>Try xs:untypedAtomic(-PT100M) castable as xs:dayTimeDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("-PT100M") castable as xs:dayTimeDuration</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs037">
      <description>Try xs:untypedAtomic(true) castable as xs:dayTimeDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("true") castable as xs:dayTimeDuration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs038">
      <description>Try xs:untypedAtomic(1999-05-31T13:20:00) castable as xs:dateTime </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("1999-05-31T13:20:00") castable as xs:dateTime</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs039">
      <description>Try xs:untypedAtomic(-1999-05-31T13:20:00+14:00) castable as xs:dateTime </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("-1999-05-31T13:20:00+14:00") castable as xs:dateTime</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs040">
      <description>Try xs:untypedAtomic(2000-01-16T00:00:00Z) castable as xs:dateTime </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("2000-01-16T00:00:00Z") castable as xs:dateTime</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs041">
      <description>Try xs:untypedAtomic(true) castable as xs:dateTime </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("true") castable as xs:dateTime</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs042">
      <description>Try xs:untypedAtomic(13:20:00-05:00) castable as xs:time </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("13:20:00-05:00") castable as xs:time</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs043">
      <description>Try xs:untypedAtomic(13:20:02.123) castable as xs:time </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("13:20:02.123") castable as xs:time</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs044">
      <description>Try xs:untypedAtomic(13:20:00Z) castable as xs:time </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("13:20:00Z") castable as xs:time</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs045">
      <description>Try xs:untypedAtomic(true) castable as xs:time </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("true") castable as xs:time</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs046">
      <description>Try xs:untypedAtomic(1999-05-31) castable as xs:date </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("1999-05-31") castable as xs:date</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs047">
      <description>Try xs:untypedAtomic(-0012-12-03-05:00) castable as xs:date </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("-0012-12-03-05:00") castable as xs:date</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs048">
      <description>Try xs:untypedAtomic(1999-05-31Z) castable as xs:date </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("1999-05-31Z") castable as xs:date</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs049">
      <description>Try xs:untypedAtomic(true) castable as xs:date </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("true") castable as xs:date</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs050">
      <description>Try xs:untypedAtomic(1999-05) castable as xs:gYearMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("1999-05") castable as xs:gYearMonth</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs051">
      <description>Try xs:untypedAtomic(-0012-12-05:00) castable as xs:gYearMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("-0012-12-05:00") castable as xs:gYearMonth</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs052">
      <description>Try xs:untypedAtomic(1999-05Z) castable as xs:gYearMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("1999-05Z") castable as xs:gYearMonth</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs053">
      <description>Try xs:untypedAtomic(true) castable as xs:gYearMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("true") castable as xs:gYearMonth</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs054">
      <description>Try xs:untypedAtomic(1999) castable as xs:gYear </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("1999") castable as xs:gYear</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs055">
      <description>Try xs:untypedAtomic(-0012-05:00) castable as xs:gYear </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("-0012-05:00") castable as xs:gYear</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs056">
      <description>Try xs:untypedAtomic(1999Z) castable as xs:gYear </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("1999Z") castable as xs:gYear</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs057">
      <description>Try xs:untypedAtomic(true) castable as xs:gYear </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("true") castable as xs:gYear</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs058">
      <description>Try xs:untypedAtomic(--05-31) castable as xs:gMonthDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("--05-31") castable as xs:gMonthDay</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs059">
      <description>Try xs:untypedAtomic(--05-31+14:00) castable as xs:gMonthDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("--05-31+14:00") castable as xs:gMonthDay</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs060">
      <description>Try xs:untypedAtomic(--05-31Z) castable as xs:gMonthDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("--05-31Z") castable as xs:gMonthDay</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs061">
      <description>Try xs:untypedAtomic(true) castable as xs:gMonthDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("true") castable as xs:gMonthDay</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs062">
      <description>Try xs:untypedAtomic(---31) castable as xs:gDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("---31") castable as xs:gDay</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs063">
      <description>Try xs:untypedAtomic(---03-05:00) castable as xs:gDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("---03-05:00") castable as xs:gDay</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs064">
      <description>Try xs:untypedAtomic(---31Z) castable as xs:gDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("---31Z") castable as xs:gDay</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs065">
      <description>Try xs:untypedAtomic(true) castable as xs:gDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("true") castable as xs:gDay</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs066">
      <description>Try xs:untypedAtomic(--05) castable as xs:gMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("--05") castable as xs:gMonth</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs067">
      <description>Try xs:untypedAtomic(--12-05:00) castable as xs:gMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("--12-05:00") castable as xs:gMonth</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs068">
      <description>Try xs:untypedAtomic(--05Z) castable as xs:gMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("--05Z") castable as xs:gMonth</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs069">
      <description>Try xs:untypedAtomic(true) castable as xs:gMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("true") castable as xs:gMonth</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs070">
      <description>Try xs:untypedAtomic(0.0) castable as xs:boolean </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("0.0") castable as xs:boolean</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs071">
      <description>Try xs:untypedAtomic(0) castable as xs:boolean </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("0") castable as xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs072">
      <description>Try xs:untypedAtomic(true) castable as xs:boolean </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("true") castable as xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs073">
      <description>Try xs:untypedAtomic(true) castable as xs:base64Binary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("true") castable as xs:base64Binary</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs074">
      <description>Try xs:untypedAtomic(00000000) castable as xs:base64Binary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("00000000") castable as xs:base64Binary</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs075">
      <description>Try xs:untypedAtomic(D74D35D35D35) castable as xs:base64Binary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("D74D35D35D35") castable as xs:base64Binary</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs076">
      <description>Try xs:untypedAtomic(true) castable as xs:hexBinary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("true") castable as xs:hexBinary</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs077">
      <description>Try xs:untypedAtomic(010010101) castable as xs:hexBinary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("010010101") castable as xs:hexBinary</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs078">
      <description>Try xs:untypedAtomic(0fb7) castable as xs:hexBinary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("0fb7") castable as xs:hexBinary</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs079">
      <description>Try xs:untypedAtomic(D74D35D35D35) castable as xs:hexBinary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("D74D35D35D35") castable as xs:hexBinary</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs080">
      <description>Try xs:untypedAtomic(-0012-05:00) castable as xs:anyURI </description>
      <created by="Joanne Tong" on="2006-01-27"/>
      <test>xs:untypedAtomic("http://www.example.com/~b%C3%A9b%C3%A9") castable as xs:anyURI</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs081">
      <description>Try xs:untypedAtomic(true) castable as xs:anyURI </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("true") castable as xs:anyURI</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs082">
      <description>Try xs:untypedAtomic(http://www.ietf.org/rfc/rfc2396.txt) castable as xs:anyURI </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:untypedAtomic("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:anyURI</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs083">
      <description>Try xs:string(INF) castable as xs:untypedAtomic </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("INF") castable as xs:untypedAtomic</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs084">
      <description>Try xs:string(0.0E0) castable as xs:untypedAtomic </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("0.0E0") castable as xs:untypedAtomic</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs085">
      <description>Try xs:string(true) castable as xs:untypedAtomic </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("true") castable as xs:untypedAtomic</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs086">
      <description>Try xs:string(INF) castable as xs:string </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("INF") castable as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs087">
      <description>Try xs:string(0.0E0) castable as xs:string </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("0.0E0") castable as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs088">
      <description>Try xs:string(true) castable as xs:string </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("true") castable as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs089">
      <description>Try xs:string(-0.0E0) castable as xs:float </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("-0.0E0") castable as xs:float</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs090">
      <description>Try xs:string(NaN) castable as xs:float </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("NaN") castable as xs:float</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs091">
      <description>Try xs:string(1e-5) castable as xs:float </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("1e-5") castable as xs:float</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs092">
      <description>Try xs:string(-10000000) castable as xs:float </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("-10000000") castable as xs:float</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs093">
      <description>Try xs:string(true) castable as xs:float </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("true") castable as xs:float</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs094">
      <description>Try xs:string(-0.0E0) castable as xs:double </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("-0.0E0") castable as xs:double</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs095">
      <description>Try xs:string(NaN) castable as xs:double </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("NaN") castable as xs:double</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs096">
      <description>Try xs:string(1e-5) castable as xs:double </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("1e-5") castable as xs:double</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs097">
      <description>Try xs:string(-10000000) castable as xs:double </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("-10000000") castable as xs:double</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs098">
      <description>Try xs:string(true) castable as xs:double </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("true") castable as xs:double</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs099">
      <description>Try xs:string(-0.0E0) castable as xs:decimal </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("-0.0E0") castable as xs:decimal</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs100">
      <description>Try xs:string(NaN) castable as xs:decimal </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("NaN") castable as xs:decimal</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs101">
      <description>Try xs:string(1e-5) castable as xs:decimal </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("1e-5") castable as xs:decimal</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs102">
      <description>Try xs:string(5.5432) castable as xs:decimal </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("5.5432") castable as xs:decimal</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs103">
      <description>Try xs:string(true) castable as xs:decimal </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("true") castable as xs:decimal</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs104">
      <description>Try xs:string(-0.0E0) castable as xs:integer </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("-0.0E0") castable as xs:integer</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs105">
      <description>Try xs:string(NaN) castable as xs:integer </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("NaN") castable as xs:integer</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs106">
      <description>Try xs:string(1e-5) castable as xs:integer </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("1e-5") castable as xs:integer</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs107">
      <description>Try xs:string(-1.1234) castable as xs:integer </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("-1.1234") castable as xs:integer</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs108">
      <description>Try xs:string(true) castable as xs:integer </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("true") castable as xs:integer</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs109">
      <description>Try xs:string(P1Y2M3DT10H30M23S) castable as xs:duration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("P1Y2M3DT10H30M23S") castable as xs:duration</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs110">
      <description>Try xs:string(-P1Y1M1DT1H1M1.123S) castable as xs:duration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("-P1Y1M1DT1H1M1.123S") castable as xs:duration</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs111">
      <description>Try xs:string(true) castable as xs:duration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("true") castable as xs:duration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs112">
      <description>Try xs:string(-P1Y1M1DT1H1M1.123S) castable as xs:yearMonthDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("-P1Y1M1DT1H1M1.123S") castable as xs:yearMonthDuration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs113">
      <description>Try xs:string(P24M) castable as xs:yearMonthDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("P24M") castable as xs:yearMonthDuration</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs114">
      <description>Try xs:string(-P21M) castable as xs:yearMonthDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("-P21M") castable as xs:yearMonthDuration</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs115">
      <description>Try xs:string(true) castable as xs:yearMonthDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("true") castable as xs:yearMonthDuration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs116">
      <description>Try xs:string(-P1Y1M1DT1H1M1.123S) castable as xs:dayTimeDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("-P1Y1M1DT1H1M1.123S") castable as xs:dayTimeDuration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs117">
      <description>Try xs:string(P3DT10H30M) castable as xs:dayTimeDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("P3DT10H30M") castable as xs:dayTimeDuration</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs118">
      <description>Try xs:string(-PT100M) castable as xs:dayTimeDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("-PT100M") castable as xs:dayTimeDuration</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs119">
      <description>Try xs:string(true) castable as xs:dayTimeDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("true") castable as xs:dayTimeDuration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs120">
      <description>Try xs:string(1999-05-31T13:20:00) castable as xs:dateTime </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("1999-05-31T13:20:00") castable as xs:dateTime</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs121">
      <description>Try xs:string(-1999-05-31T13:20:00+14:00) castable as xs:dateTime </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("-1999-05-31T13:20:00+14:00") castable as xs:dateTime</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs122">
      <description>Try xs:string(2000-01-16T00:00:00Z) castable as xs:dateTime </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("2000-01-16T00:00:00Z") castable as xs:dateTime</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs123">
      <description>Try xs:string(true) castable as xs:dateTime </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("true") castable as xs:dateTime</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs124">
      <description>Try xs:string(13:20:00-05:00) castable as xs:time </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("13:20:00-05:00") castable as xs:time</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs125">
      <description>Try xs:string(13:20:02.123) castable as xs:time </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("13:20:02.123") castable as xs:time</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs126">
      <description>Try xs:string(13:20:00Z) castable as xs:time </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("13:20:00Z") castable as xs:time</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs127">
      <description>Try xs:string(true) castable as xs:time </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("true") castable as xs:time</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs128">
      <description>Try xs:string(1999-05-31) castable as xs:date </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("1999-05-31") castable as xs:date</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs129">
      <description>Try xs:string(-0012-12-03-05:00) castable as xs:date </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("-0012-12-03-05:00") castable as xs:date</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs130">
      <description>Try xs:string(1999-05-31Z) castable as xs:date </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("1999-05-31Z") castable as xs:date</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs131">
      <description>Try xs:string(true) castable as xs:date </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("true") castable as xs:date</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs132">
      <description>Try xs:string(1999-05) castable as xs:gYearMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("1999-05") castable as xs:gYearMonth</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs133">
      <description>Try xs:string(-0012-12-05:00) castable as xs:gYearMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("-0012-12-05:00") castable as xs:gYearMonth</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs134">
      <description>Try xs:string(1999-05Z) castable as xs:gYearMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("1999-05Z") castable as xs:gYearMonth</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs135">
      <description>Try xs:string(true) castable as xs:gYearMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("true") castable as xs:gYearMonth</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs136">
      <description>Try xs:string(1999) castable as xs:gYear </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("1999") castable as xs:gYear</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs137">
      <description>Try xs:string(-0012-05:00) castable as xs:gYear </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("-0012-05:00") castable as xs:gYear</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs138">
      <description>Try xs:string(1999Z) castable as xs:gYear </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("1999Z") castable as xs:gYear</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs139">
      <description>Try xs:string(true) castable as xs:gYear </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("true") castable as xs:gYear</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs140">
      <description>Try xs:string(--05-31) castable as xs:gMonthDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("--05-31") castable as xs:gMonthDay</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs141">
      <description>Try xs:string(--05-31+14:00) castable as xs:gMonthDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("--05-31+14:00") castable as xs:gMonthDay</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs142">
      <description>Try xs:string(--05-31Z) castable as xs:gMonthDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("--05-31Z") castable as xs:gMonthDay</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs143">
      <description>Try xs:string(true) castable as xs:gMonthDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("true") castable as xs:gMonthDay</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs144">
      <description>Try xs:string(---31) castable as xs:gDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("---31") castable as xs:gDay</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs145">
      <description>Try xs:string(---03-05:00) castable as xs:gDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("---03-05:00") castable as xs:gDay</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs146">
      <description>Try xs:string(---31Z) castable as xs:gDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("---31Z") castable as xs:gDay</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs147">
      <description>Try xs:string(true) castable as xs:gDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("true") castable as xs:gDay</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs148">
      <description>Try xs:string(--05) castable as xs:gMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("--05") castable as xs:gMonth</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs149">
      <description>Try xs:string(--12-05:00) castable as xs:gMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("--12-05:00") castable as xs:gMonth</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs150">
      <description>Try xs:string(--05Z) castable as xs:gMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("--05Z") castable as xs:gMonth</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs151">
      <description>Try xs:string(true) castable as xs:gMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("true") castable as xs:gMonth</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs152">
      <description>Try xs:string(0.0) castable as xs:boolean </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("0.0") castable as xs:boolean</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs153">
      <description>Try xs:string(0) castable as xs:boolean </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("0") castable as xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs154">
      <description>Try xs:string(true) castable as xs:boolean </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("true") castable as xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs155">
      <description>Try xs:string(true) castable as xs:base64Binary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("true") castable as xs:base64Binary</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs156">
      <description>Try xs:string(00000000) castable as xs:base64Binary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("00000000") castable as xs:base64Binary</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs157">
      <description>Try xs:string(D74D35D35D35) castable as xs:base64Binary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("D74D35D35D35") castable as xs:base64Binary</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs158">
      <description>Try xs:string(true) castable as xs:hexBinary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("true") castable as xs:hexBinary</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs159">
      <description>Try xs:string(010010101) castable as xs:hexBinary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("010010101") castable as xs:hexBinary</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs160">
      <description>Try xs:string(0fb7) castable as xs:hexBinary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("0fb7") castable as xs:hexBinary</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs161">
      <description>Try xs:string(D74D35D35D35) castable as xs:hexBinary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("D74D35D35D35") castable as xs:hexBinary</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs162">
      <description>Try xs:string(-0012-05:00) castable as xs:anyURI </description>
      <created by="Joanne Tong" on="2006-01-27"/>
      <test>xs:string("http://www.example.com/~b%C3%A9b%C3%A9") castable as xs:anyURI</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs163">
      <description>Try xs:string(true) castable as xs:anyURI </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("true") castable as xs:anyURI</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs164">
      <description>Try xs:string(http://www.ietf.org/rfc/rfc2396.txt) castable as xs:anyURI </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:string("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:anyURI</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs165">
      <description>Try xs:float(1e5) castable as xs:untypedAtomic </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:float("1e5") castable as xs:untypedAtomic</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs166">
      <description>Try xs:float(-INF) castable as xs:untypedAtomic </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:float("-INF") castable as xs:untypedAtomic</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs167">
      <description>Try xs:float(-0.0E0) castable as xs:string </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:float("-0.0E0") castable as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs168">
      <description>Try xs:float(NaN) castable as xs:string </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:float("NaN") castable as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs169">
      <description>Try xs:float(5.4321E-100) castable as xs:float </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:float("5.4321E-100") castable as xs:float</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs170">
      <description>Try xs:float(-1.75e-3) castable as xs:float </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:float("-1.75e-3") castable as xs:float</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs171">
      <description>Try xs:float(INF) castable as xs:float </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:float("INF") castable as xs:float</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs172">
      <description>Try xs:float(-0.0E0) castable as xs:double </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:float("-0.0E0") castable as xs:double</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs173">
      <description>Try xs:float(-INF) castable as xs:double </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:float("-INF") castable as xs:double</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs174">
      <description>Try xs:float(-0.0E0) castable as xs:decimal </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:float("-0.0E0") castable as xs:decimal</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs175">
      <description>Try xs:float(5.4321E-100) castable as xs:decimal </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:float("5.4321E-100") castable as xs:decimal</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs176">
      <description>Try xs:float(1e5) castable as xs:decimal </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:float("1e5") castable as xs:decimal</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs177">
      <description>Try xs:float(-1.75e-3) castable as xs:decimal </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:float("-1.75e-3") castable as xs:decimal</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs178">
      <description>Try xs:float(-0.0E0) castable as xs:integer </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:float("-0.0E0") castable as xs:integer</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs179">
      <description>Try xs:float(1e5) castable as xs:integer </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:float("1e5") castable as xs:integer</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs180">
      <description>Try xs:float(INF) castable as xs:integer </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:float("INF") castable as xs:integer</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs181">
      <description>Try xs:float(-1.75e-3) castable as xs:duration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:float("-1.75e-3") castable as xs:duration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs182">
      <description>Try xs:float(5.4321E-100) castable as xs:yearMonthDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:float("5.4321E-100") castable as xs:yearMonthDuration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs183">
      <description>Try xs:float(5.4321E-100) castable as xs:dayTimeDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:float("5.4321E-100") castable as xs:dayTimeDuration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs184">
      <description>Try xs:float(5.4321E-100) castable as xs:dateTime </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:float("5.4321E-100") castable as xs:dateTime</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs185">
      <description>Try xs:float(5.4321E-100) castable as xs:time </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:float("5.4321E-100") castable as xs:time</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs186">
      <description>Try xs:float(5.4321E-100) castable as xs:date </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:float("5.4321E-100") castable as xs:date</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs187">
      <description>Try xs:float(5.4321E-100) castable as xs:gYearMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:float("5.4321E-100") castable as xs:gYearMonth</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs188">
      <description>Try xs:float(5.4321E-100) castable as xs:gYear </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:float("5.4321E-100") castable as xs:gYear</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs189">
      <description>Try xs:float(5.4321E-100) castable as xs:gMonthDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:float("5.4321E-100") castable as xs:gMonthDay</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs190">
      <description>Try xs:float(5.4321E-100) castable as xs:gDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:float("5.4321E-100") castable as xs:gDay</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs191">
      <description>Try xs:float(5.4321E-100) castable as xs:gMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:float("5.4321E-100") castable as xs:gMonth</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs192">
      <description>Try xs:float(-0.0E0) castable as xs:boolean </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:float("-0.0E0") castable as xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs193">
      <description>Try xs:float(1e5) castable as xs:boolean </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:float("1e5") castable as xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs194">
      <description>Try xs:float(-INF) castable as xs:boolean </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:float("-INF") castable as xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs195">
      <description>Try xs:float(NaN) castable as xs:boolean </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:float("NaN") castable as xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs196">
      <description>Try xs:float(5.4321E-100) castable as xs:base64Binary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:float("5.4321E-100") castable as xs:base64Binary</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs197">
      <description>Try xs:float(5.4321E-100) castable as xs:hexBinary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:float("5.4321E-100") castable as xs:hexBinary</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs198">
      <description>Try xs:float(5.4321E-100) castable as xs:anyURI </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:float("5.4321E-100") castable as xs:anyURI</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs199">
      <description>Try xs:double(1e5) castable as xs:untypedAtomic </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:double("1e5") castable as xs:untypedAtomic</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs200">
      <description>Try xs:double(INF) castable as xs:untypedAtomic </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:double("INF") castable as xs:untypedAtomic</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs201">
      <description>Try xs:double(1e8) castable as xs:string </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:double("1e8") castable as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs202">
      <description>Try xs:double(INF) castable as xs:string </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:double("INF") castable as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs203">
      <description>Try xs:double(-0.0E0) castable as xs:float </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:double("-0.0E0") castable as xs:float</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs204">
      <description>Try xs:double(5.4321E-1001) castable as xs:float </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:double("5.4321E-1001") castable as xs:float</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs205">
      <description>Try xs:double(1e5) castable as xs:float </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:double("1e5") castable as xs:float</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs206">
      <description>Try xs:double(-1.75e-3) castable as xs:float </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:double("-1.75e-3") castable as xs:float</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs207">
      <description>Try xs:double(NaN) castable as xs:float </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:double("NaN") castable as xs:float</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs208">
      <description>Try xs:double(1e5) castable as xs:double </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:double("1e5") castable as xs:double</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs209">
      <description>Try xs:double(INF) castable as xs:double </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:double("INF") castable as xs:double</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs210">
      <description>Try xs:double(-0.0E0) castable as xs:decimal </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:double("-0.0E0") castable as xs:decimal</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs211">
      <description>Try xs:double(5.4321E-1001) castable as xs:decimal </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:double("5.4321E-1001") castable as xs:decimal</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs212">
      <description>Try xs:double(-1.75e-3) castable as xs:decimal </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:double("-1.75e-3") castable as xs:decimal</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs213">
      <description>Try xs:double(INF) castable as xs:decimal </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:double("INF") castable as xs:decimal</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs214">
      <description>Try xs:double(-0.0E0) castable as xs:integer </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:double("-0.0E0") castable as xs:integer</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs215">
      <description>Try xs:double(1e5) castable as xs:integer </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:double("1e5") castable as xs:integer</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs216">
      <description>Try xs:double(-1.75e-3) castable as xs:integer </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:double("-1.75e-3") castable as xs:integer</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs217">
      <description>Try xs:double(INF) castable as xs:integer </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:double("INF") castable as xs:integer</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs218">
      <description>Try xs:double(NaN) castable as xs:integer </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:double("NaN") castable as xs:integer</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs219">
      <description>Try xs:double(1e5) castable as xs:duration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:double("1e5") castable as xs:duration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs220">
      <description>Try xs:double(1e5) castable as xs:yearMonthDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:double("1e5") castable as xs:yearMonthDuration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs221">
      <description>Try xs:double(1e5) castable as xs:dayTimeDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:double("1e5") castable as xs:dayTimeDuration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs222">
      <description>Try xs:double(1e5) castable as xs:dateTime </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:double("1e5") castable as xs:dateTime</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs223">
      <description>Try xs:double(1e5) castable as xs:time </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:double("1e5") castable as xs:time</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs224">
      <description>Try xs:double(1e5) castable as xs:date </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:double("1e5") castable as xs:date</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs225">
      <description>Try xs:double(1e5) castable as xs:gYearMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:double("1e5") castable as xs:gYearMonth</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs226">
      <description>Try xs:double(1e5) castable as xs:gYear </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:double("1e5") castable as xs:gYear</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs227">
      <description>Try xs:double(1e5) castable as xs:gMonthDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:double("1e5") castable as xs:gMonthDay</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs228">
      <description>Try xs:double(1e5) castable as xs:gDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:double("1e5") castable as xs:gDay</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs229">
      <description>Try xs:double(1e5) castable as xs:gMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:double("1e5") castable as xs:gMonth</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs230">
      <description>Try xs:double(1e5) castable as xs:boolean </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:double("1e5") castable as xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs231">
      <description>Try xs:double(1e5) castable as xs:base64Binary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:double("1e5") castable as xs:base64Binary</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs232">
      <description>Try xs:double(1e5) castable as xs:hexBinary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:double("1e5") castable as xs:hexBinary</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs233">
      <description>Try xs:double(1e5) castable as xs:anyURI </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:double("1e5") castable as xs:anyURI</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs234">
      <description>Try xs:decimal(-1.1234) castable as xs:untypedAtomic </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:decimal("-1.1234") castable as xs:untypedAtomic</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs235">
      <description>Try xs:decimal(-1.1234) castable as xs:string </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:decimal("-1.1234") castable as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs236">
      <description>Try xs:decimal(-1.1234) castable as xs:float </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:decimal("-1.1234") castable as xs:float</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs237">
      <description>Try xs:decimal(-1.1234) castable as xs:double </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:decimal("-1.1234") castable as xs:double</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs238">
      <description>Try xs:decimal(-1.1234) castable as xs:decimal </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:decimal("-1.1234") castable as xs:decimal</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs239">
      <description>Try xs:decimal(-1.1234) castable as xs:integer </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:decimal("-1.1234") castable as xs:integer</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs240">
      <description>Try xs:decimal(5.5432) castable as xs:integer </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:decimal("5.5432") castable as xs:integer</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs241">
      <description>Try xs:decimal(-1.1234) castable as xs:duration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:decimal("-1.1234") castable as xs:duration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs242">
      <description>Try xs:decimal(-1.1234) castable as xs:yearMonthDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:decimal("-1.1234") castable as xs:yearMonthDuration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs243">
      <description>Try xs:decimal(-1.1234) castable as xs:dayTimeDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:decimal("-1.1234") castable as xs:dayTimeDuration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs244">
      <description>Try xs:decimal(-1.1234) castable as xs:dateTime </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:decimal("-1.1234") castable as xs:dateTime</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs245">
      <description>Try xs:decimal(-1.1234) castable as xs:time </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:decimal("-1.1234") castable as xs:time</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs246">
      <description>Try xs:decimal(-1.1234) castable as xs:date </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:decimal("-1.1234") castable as xs:date</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs247">
      <description>Try xs:decimal(-1.1234) castable as xs:gYearMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:decimal("-1.1234") castable as xs:gYearMonth</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs248">
      <description>Try xs:decimal(-1.1234) castable as xs:gYear </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:decimal("-1.1234") castable as xs:gYear</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs249">
      <description>Try xs:decimal(-1.1234) castable as xs:gMonthDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:decimal("-1.1234") castable as xs:gMonthDay</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs250">
      <description>Try xs:decimal(-1.1234) castable as xs:gDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:decimal("-1.1234") castable as xs:gDay</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs251">
      <description>Try xs:decimal(-1.1234) castable as xs:gMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:decimal("-1.1234") castable as xs:gMonth</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs252">
      <description>Try xs:decimal(-1.1234) castable as xs:boolean </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:decimal("-1.1234") castable as xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs253">
      <description>Try xs:decimal(-1.1234) castable as xs:base64Binary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:decimal("-1.1234") castable as xs:base64Binary</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs254">
      <description>Try xs:decimal(-1.1234) castable as xs:hexBinary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:decimal("-1.1234") castable as xs:hexBinary</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs255">
      <description>Try xs:decimal(-1.1234) castable as xs:anyURI </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:decimal("-1.1234") castable as xs:anyURI</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs256">
      <description>Try xs:integer(1) castable as xs:untypedAtomic </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:integer("1") castable as xs:untypedAtomic</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs257">
      <description>Try xs:integer(-100) castable as xs:string </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:integer("-100") castable as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs258">
      <description>Try xs:integer(-100) castable as xs:float </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:integer("-100") castable as xs:float</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs259">
      <description>Try xs:integer(-100) castable as xs:double </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:integer("-100") castable as xs:double</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs260">
      <description>Try xs:integer(-100) castable as xs:decimal </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:integer("-100") castable as xs:decimal</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs261">
      <description>Try xs:integer(-100) castable as xs:integer </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:integer("-100") castable as xs:integer</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs262">
      <description>Try xs:integer(-100) castable as xs:duration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:integer("-100") castable as xs:duration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs263">
      <description>Try xs:integer(-100) castable as xs:yearMonthDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:integer("-100") castable as xs:yearMonthDuration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs264">
      <description>Try xs:integer(-100) castable as xs:dayTimeDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:integer("-100") castable as xs:dayTimeDuration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs265">
      <description>Try xs:integer(-100) castable as xs:dateTime </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:integer("-100") castable as xs:dateTime</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs266">
      <description>Try xs:integer(-100) castable as xs:time </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:integer("-100") castable as xs:time</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs267">
      <description>Try xs:integer(-100) castable as xs:date </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:integer("-100") castable as xs:date</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs268">
      <description>Try xs:integer(-100) castable as xs:gYearMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:integer("-100") castable as xs:gYearMonth</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs269">
      <description>Try xs:integer(-100) castable as xs:gYear </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:integer("-100") castable as xs:gYear</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs270">
      <description>Try xs:integer(-100) castable as xs:gMonthDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:integer("-100") castable as xs:gMonthDay</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs271">
      <description>Try xs:integer(-100) castable as xs:gDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:integer("-100") castable as xs:gDay</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs272">
      <description>Try xs:integer(-100) castable as xs:gMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:integer("-100") castable as xs:gMonth</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs273">
      <description>Try xs:integer(-100) castable as xs:boolean </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:integer("-100") castable as xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs274">
      <description>Try xs:integer(-100) castable as xs:base64Binary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:integer("-100") castable as xs:base64Binary</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs275">
      <description>Try xs:integer(-100) castable as xs:hexBinary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:integer("-100") castable as xs:hexBinary</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs276">
      <description>Try xs:integer(-100) castable as xs:anyURI </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:integer("-100") castable as xs:anyURI</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs277">
      <description>Try xs:duration(P1Y2M3DT10H30M23S) castable as xs:untypedAtomic </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:duration("P1Y2M3DT10H30M23S") castable as xs:untypedAtomic</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs278">
      <description>Try xs:duration(P1Y2M3DT10H30M23S) castable as xs:string </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:duration("P1Y2M3DT10H30M23S") castable as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs279">
      <description>Try xs:duration(P1Y2M3DT10H30M23S) castable as xs:float </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:duration("P1Y2M3DT10H30M23S") castable as xs:float</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs280">
      <description>Try xs:duration(P1Y2M3DT10H30M23S) castable as xs:double </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:duration("P1Y2M3DT10H30M23S") castable as xs:double</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs281">
      <description>Try xs:duration(P1Y2M3DT10H30M23S) castable as xs:decimal </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:duration("P1Y2M3DT10H30M23S") castable as xs:decimal</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs282">
      <description>Try xs:duration(P1Y2M3DT10H30M23S) castable as xs:integer </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:duration("P1Y2M3DT10H30M23S") castable as xs:integer</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs283">
      <description>Try xs:duration(P1Y2M3DT10H30M23S) castable as xs:duration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:duration("P1Y2M3DT10H30M23S") castable as xs:duration</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs284">
      <description>Try xs:duration(PT10H) castable as xs:duration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:duration("PT10H") castable as xs:duration</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs285">
      <description>Try xs:duration(P1Y2M3DT10H30M23S) castable as xs:yearMonthDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:duration("P1Y2M3DT10H30M23S") castable as xs:yearMonthDuration</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs286">
      <description>Try xs:duration(PT10H) castable as xs:yearMonthDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:duration("PT10H") castable as xs:yearMonthDuration</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs287">
      <description>Try xs:duration(P24M) castable as xs:yearMonthDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:duration("P24M") castable as xs:yearMonthDuration</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs288">
      <description>Try xs:duration(P1Y2M3DT10H30M23S) castable as xs:dayTimeDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:duration("P1Y2M3DT10H30M23S") castable as xs:dayTimeDuration</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs289">
      <description>Try xs:duration(PT10H) castable as xs:dayTimeDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:duration("PT10H") castable as xs:dayTimeDuration</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs290">
      <description>Try xs:duration(P24M) castable as xs:dayTimeDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:duration("P24M") castable as xs:dayTimeDuration</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs291">
      <description>Try xs:duration(P1Y2M3DT10H30M23S) castable as xs:dateTime </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:duration("P1Y2M3DT10H30M23S") castable as xs:dateTime</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs292">
      <description>Try xs:duration(P1Y2M3DT10H30M23S) castable as xs:time </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:duration("P1Y2M3DT10H30M23S") castable as xs:time</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs293">
      <description>Try xs:duration(P1Y2M3DT10H30M23S) castable as xs:date </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:duration("P1Y2M3DT10H30M23S") castable as xs:date</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs294">
      <description>Try xs:duration(P1Y2M3DT10H30M23S) castable as xs:gYearMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:duration("P1Y2M3DT10H30M23S") castable as xs:gYearMonth</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs295">
      <description>Try xs:duration(P1Y2M3DT10H30M23S) castable as xs:gYear </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:duration("P1Y2M3DT10H30M23S") castable as xs:gYear</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs296">
      <description>Try xs:duration(P1Y2M3DT10H30M23S) castable as xs:gMonthDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:duration("P1Y2M3DT10H30M23S") castable as xs:gMonthDay</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs297">
      <description>Try xs:duration(P1Y2M3DT10H30M23S) castable as xs:gDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:duration("P1Y2M3DT10H30M23S") castable as xs:gDay</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs298">
      <description>Try xs:duration(P1Y2M3DT10H30M23S) castable as xs:gMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:duration("P1Y2M3DT10H30M23S") castable as xs:gMonth</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs299">
      <description>Try xs:duration(P1Y2M3DT10H30M23S) castable as xs:boolean </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:duration("P1Y2M3DT10H30M23S") castable as xs:boolean</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs300">
      <description>Try xs:duration(P1Y2M3DT10H30M23S) castable as xs:base64Binary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:duration("P1Y2M3DT10H30M23S") castable as xs:base64Binary</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs301">
      <description>Try xs:duration(P1Y2M3DT10H30M23S) castable as xs:hexBinary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:duration("P1Y2M3DT10H30M23S") castable as xs:hexBinary</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs302">
      <description>Try xs:duration(P1Y2M3DT10H30M23S) castable as xs:anyURI </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:duration("P1Y2M3DT10H30M23S") castable as xs:anyURI</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs303">
      <description>Try xs:yearMonthDuration(P1Y2M) castable as xs:untypedAtomic </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:yearMonthDuration("P1Y2M") castable as xs:untypedAtomic</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs304">
      <description>Try xs:yearMonthDuration(P1Y2M) castable as xs:string </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:yearMonthDuration("P1Y2M") castable as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs305">
      <description>Try xs:yearMonthDuration(P1Y2M) castable as xs:float </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:yearMonthDuration("P1Y2M") castable as xs:float</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs306">
      <description>Try xs:yearMonthDuration(P1Y2M) castable as xs:double </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:yearMonthDuration("P1Y2M") castable as xs:double</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs307">
      <description>Try xs:yearMonthDuration(P1Y2M) castable as xs:decimal </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:yearMonthDuration("P1Y2M") castable as xs:decimal</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs308">
      <description>Try xs:yearMonthDuration(P1Y2M) castable as xs:integer </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:yearMonthDuration("P1Y2M") castable as xs:integer</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs309">
      <description>Try xs:yearMonthDuration(P1Y2M) castable as xs:duration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:yearMonthDuration("P1Y2M") castable as xs:duration</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs310">
      <description>Try xs:yearMonthDuration(P1Y2M) castable as xs:yearMonthDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:yearMonthDuration("P1Y2M") castable as xs:yearMonthDuration</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs311">
      <description>Try xs:yearMonthDuration(-P21M) castable as xs:yearMonthDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:yearMonthDuration("-P21M") castable as xs:yearMonthDuration</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs312">
      <description>Try xs:yearMonthDuration(P1Y2M) castable as xs:dayTimeDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:yearMonthDuration("P1Y2M") castable as xs:dayTimeDuration</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs313">
      <description>Try xs:yearMonthDuration(P1Y2M) castable as xs:dateTime </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:yearMonthDuration("P1Y2M") castable as xs:dateTime</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs314">
      <description>Try xs:yearMonthDuration(P1Y2M) castable as xs:time </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:yearMonthDuration("P1Y2M") castable as xs:time</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs315">
      <description>Try xs:yearMonthDuration(P1Y2M) castable as xs:date </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:yearMonthDuration("P1Y2M") castable as xs:date</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs316">
      <description>Try xs:yearMonthDuration(P1Y2M) castable as xs:gYearMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:yearMonthDuration("P1Y2M") castable as xs:gYearMonth</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs317">
      <description>Try xs:yearMonthDuration(P1Y2M) castable as xs:gYear </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:yearMonthDuration("P1Y2M") castable as xs:gYear</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs318">
      <description>Try xs:yearMonthDuration(P1Y2M) castable as xs:gMonthDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:yearMonthDuration("P1Y2M") castable as xs:gMonthDay</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs319">
      <description>Try xs:yearMonthDuration(P1Y2M) castable as xs:gDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:yearMonthDuration("P1Y2M") castable as xs:gDay</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs320">
      <description>Try xs:yearMonthDuration(P1Y2M) castable as xs:gMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:yearMonthDuration("P1Y2M") castable as xs:gMonth</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs321">
      <description>Try xs:yearMonthDuration(P1Y2M) castable as xs:boolean </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:yearMonthDuration("P1Y2M") castable as xs:boolean</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs322">
      <description>Try xs:yearMonthDuration(P1Y2M) castable as xs:base64Binary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:yearMonthDuration("P1Y2M") castable as xs:base64Binary</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs323">
      <description>Try xs:yearMonthDuration(P1Y2M) castable as xs:hexBinary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:yearMonthDuration("P1Y2M") castable as xs:hexBinary</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs324">
      <description>Try xs:yearMonthDuration(P1Y2M) castable as xs:anyURI </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:yearMonthDuration("P1Y2M") castable as xs:anyURI</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs325">
      <description>Try xs:dayTimeDuration(P3DT10H30M) castable as xs:untypedAtomic </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dayTimeDuration("P3DT10H30M") castable as xs:untypedAtomic</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs326">
      <description>Try xs:dayTimeDuration(-PT100M) castable as xs:untypedAtomic </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dayTimeDuration("-PT100M") castable as xs:untypedAtomic</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs327">
      <description>Try xs:dayTimeDuration(P3DT10H30M) castable as xs:string </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dayTimeDuration("P3DT10H30M") castable as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs328">
      <description>Try xs:dayTimeDuration(-PT100M) castable as xs:string </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dayTimeDuration("-PT100M") castable as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs329">
      <description>Try xs:dayTimeDuration(P3DT10H30M) castable as xs:float </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dayTimeDuration("P3DT10H30M") castable as xs:float</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs330">
      <description>Try xs:dayTimeDuration(P3DT10H30M) castable as xs:double </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dayTimeDuration("P3DT10H30M") castable as xs:double</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs331">
      <description>Try xs:dayTimeDuration(P3DT10H30M) castable as xs:decimal </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dayTimeDuration("P3DT10H30M") castable as xs:decimal</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs332">
      <description>Try xs:dayTimeDuration(P3DT10H30M) castable as xs:integer </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dayTimeDuration("P3DT10H30M") castable as xs:integer</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs333">
      <description>Try xs:dayTimeDuration(P3DT10H30M) castable as xs:duration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dayTimeDuration("P3DT10H30M") castable as xs:duration</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs334">
      <description>Try xs:dayTimeDuration(PT24H) castable as xs:duration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dayTimeDuration("PT24H") castable as xs:duration</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs335">
      <description>Try xs:dayTimeDuration(-PT100M) castable as xs:duration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dayTimeDuration("-PT100M") castable as xs:duration</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs336">
      <description>Try xs:dayTimeDuration(P3DT10H30M) castable as xs:yearMonthDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dayTimeDuration("P3DT10H30M") castable as xs:yearMonthDuration</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs337">
      <description>Try xs:dayTimeDuration(P3DT10H30M) castable as xs:dayTimeDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dayTimeDuration("P3DT10H30M") castable as xs:dayTimeDuration</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs338">
      <description>Try xs:dayTimeDuration(P14D) castable as xs:dayTimeDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dayTimeDuration("P14D") castable as xs:dayTimeDuration</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs339">
      <description>Try xs:dayTimeDuration(-PT100M) castable as xs:dayTimeDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dayTimeDuration("-PT100M") castable as xs:dayTimeDuration</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs340">
      <description>Try xs:dayTimeDuration(P3DT10H30M) castable as xs:dateTime </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dayTimeDuration("P3DT10H30M") castable as xs:dateTime</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs341">
      <description>Try xs:dayTimeDuration(P3DT10H30M) castable as xs:time </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dayTimeDuration("P3DT10H30M") castable as xs:time</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs342">
      <description>Try xs:dayTimeDuration(P3DT10H30M) castable as xs:date </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dayTimeDuration("P3DT10H30M") castable as xs:date</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs343">
      <description>Try xs:dayTimeDuration(P3DT10H30M) castable as xs:gYearMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dayTimeDuration("P3DT10H30M") castable as xs:gYearMonth</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs344">
      <description>Try xs:dayTimeDuration(P3DT10H30M) castable as xs:gYear </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dayTimeDuration("P3DT10H30M") castable as xs:gYear</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs345">
      <description>Try xs:dayTimeDuration(P3DT10H30M) castable as xs:gMonthDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dayTimeDuration("P3DT10H30M") castable as xs:gMonthDay</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs346">
      <description>Try xs:dayTimeDuration(P3DT10H30M) castable as xs:gDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dayTimeDuration("P3DT10H30M") castable as xs:gDay</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs347">
      <description>Try xs:dayTimeDuration(P3DT10H30M) castable as xs:gMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dayTimeDuration("P3DT10H30M") castable as xs:gMonth</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs348">
      <description>Try xs:dayTimeDuration(P3DT10H30M) castable as xs:boolean </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dayTimeDuration("P3DT10H30M") castable as xs:boolean</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs349">
      <description>Try xs:dayTimeDuration(P3DT10H30M) castable as xs:base64Binary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dayTimeDuration("P3DT10H30M") castable as xs:base64Binary</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs350">
      <description>Try xs:dayTimeDuration(P3DT10H30M) castable as xs:hexBinary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dayTimeDuration("P3DT10H30M") castable as xs:hexBinary</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs351">
      <description>Try xs:dayTimeDuration(P3DT10H30M) castable as xs:anyURI </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dayTimeDuration("P3DT10H30M") castable as xs:anyURI</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs352">
      <description>Try xs:dateTime(1999-05-31T13:20:00) castable as xs:untypedAtomic </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dateTime("1999-05-31T13:20:00") castable as xs:untypedAtomic</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs353">
      <description>Try xs:dateTime(-1999-05-31T13:20:00+14:00) castable as xs:untypedAtomic </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dateTime("-1999-05-31T13:20:00+14:00") castable as xs:untypedAtomic</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs354">
      <description>Try xs:dateTime(1999-05-31T13:20:00) castable as xs:string </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dateTime("1999-05-31T13:20:00") castable as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs355">
      <description>Try xs:dateTime(-1999-05-31T13:20:00+14:00) castable as xs:string </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dateTime("-1999-05-31T13:20:00+14:00") castable as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs356">
      <description>Try xs:dateTime(1999-05-31T13:20:00) castable as xs:float </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dateTime("1999-05-31T13:20:00") castable as xs:float</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs357">
      <description>Try xs:dateTime(2000-01-16T00:00:00Z) castable as xs:float </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dateTime("2000-01-16T00:00:00Z") castable as xs:float</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs358">
      <description>Try xs:dateTime(1999-05-31T13:20:00) castable as xs:decimal </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dateTime("1999-05-31T13:20:00") castable as xs:decimal</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs359">
      <description>Try xs:dateTime(1999-05-31T13:20:00) castable as xs:integer </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dateTime("1999-05-31T13:20:00") castable as xs:integer</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs360">
      <description>Try xs:dateTime(1999-05-31T13:20:00) castable as xs:duration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dateTime("1999-05-31T13:20:00") castable as xs:duration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs361">
      <description>Try xs:dateTime(1999-05-31T13:20:00) castable as xs:yearMonthDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dateTime("1999-05-31T13:20:00") castable as xs:yearMonthDuration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs362">
      <description>Try xs:dateTime(1999-05-31T13:20:00) castable as xs:dayTimeDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dateTime("1999-05-31T13:20:00") castable as xs:dayTimeDuration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs363">
      <description>Try xs:dateTime(1999-05-31T13:20:00) castable as xs:dateTime </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dateTime("1999-05-31T13:20:00") castable as xs:dateTime</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs364">
      <description>Try xs:dateTime(1999-05-31T13:20:00) castable as xs:time </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dateTime("1999-05-31T13:20:00") castable as xs:time</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs365">
      <description>Try xs:dateTime(-1999-05-31T13:20:00+14:00) castable as xs:time </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dateTime("-1999-05-31T13:20:00+14:00") castable as xs:time</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs366">
      <description>Try xs:dateTime(1999-05-31T13:20:00) castable as xs:date </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dateTime("1999-05-31T13:20:00") castable as xs:date</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs367">
      <description>Try xs:dateTime(-1999-05-31T13:20:00+14:00) castable as xs:date </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dateTime("-1999-05-31T13:20:00+14:00") castable as xs:date</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs368">
      <description>Try xs:dateTime(1999-05-31T13:20:00) castable as xs:gYearMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dateTime("1999-05-31T13:20:00") castable as xs:gYearMonth</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs369">
      <description>Try xs:dateTime(-1999-05-31T13:20:00+14:00) castable as xs:gYearMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dateTime("-1999-05-31T13:20:00+14:00") castable as xs:gYearMonth</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs370">
      <description>Try xs:dateTime(1999-05-31T13:20:00) castable as xs:gYear </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dateTime("1999-05-31T13:20:00") castable as xs:gYear</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs371">
      <description>Try xs:dateTime(-1999-05-31T13:20:00+14:00) castable as xs:gYear </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dateTime("-1999-05-31T13:20:00+14:00") castable as xs:gYear</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs372">
      <description>Try xs:dateTime(1999-05-31T13:20:00) castable as xs:gMonthDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dateTime("1999-05-31T13:20:00") castable as xs:gMonthDay</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs373">
      <description>Try xs:dateTime(-1999-05-31T13:20:00+14:00) castable as xs:gMonthDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dateTime("-1999-05-31T13:20:00+14:00") castable as xs:gMonthDay</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs374">
      <description>Try xs:dateTime(1999-05-31T13:20:00) castable as xs:gDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dateTime("1999-05-31T13:20:00") castable as xs:gDay</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs375">
      <description>Try xs:dateTime(-1999-05-31T13:20:00+14:00) castable as xs:gDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dateTime("-1999-05-31T13:20:00+14:00") castable as xs:gDay</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs376">
      <description>Try xs:dateTime(1999-05-31T13:20:00) castable as xs:gMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dateTime("1999-05-31T13:20:00") castable as xs:gMonth</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs377">
      <description>Try xs:dateTime(-1999-05-31T13:20:00+14:00) castable as xs:gMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dateTime("-1999-05-31T13:20:00+14:00") castable as xs:gMonth</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs378">
      <description>Try xs:dateTime(1999-05-31T13:20:00) castable as xs:boolean </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dateTime("1999-05-31T13:20:00") castable as xs:boolean</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs379">
      <description>Try xs:dateTime(1999-05-31T13:20:00) castable as xs:base64Binary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dateTime("1999-05-31T13:20:00") castable as xs:base64Binary</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs380">
      <description>Try xs:dateTime(1999-05-31T13:20:00) castable as xs:hexBinary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dateTime("1999-05-31T13:20:00") castable as xs:hexBinary</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs381">
      <description>Try xs:dateTime(1999-05-31T13:20:00) castable as xs:anyURI </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:dateTime("1999-05-31T13:20:00") castable as xs:anyURI</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs382">
      <description>Try xs:time(13:20:00-05:00) castable as xs:untypedAtomic </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:time("13:20:00-05:00") castable as xs:untypedAtomic</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs383">
      <description>Try xs:time(13:20:00-05:00) castable as xs:string </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:time("13:20:00-05:00") castable as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs384">
      <description>Try xs:time(13:20:00-05:00) castable as xs:float </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:time("13:20:00-05:00") castable as xs:float</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs385">
      <description>Try xs:time(13:20:00-05:00) castable as xs:double </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:time("13:20:00-05:00") castable as xs:double</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs386">
      <description>Try xs:time(13:20:00-05:00) castable as xs:decimal </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:time("13:20:00-05:00") castable as xs:decimal</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs387">
      <description>Try xs:time(13:20:00-05:00) castable as xs:integer </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:time("13:20:00-05:00") castable as xs:integer</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs388">
      <description>Try xs:time(13:20:00-05:00) castable as xs:duration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:time("13:20:00-05:00") castable as xs:duration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs389">
      <description>Try xs:time(13:20:00-05:00) castable as xs:yearMonthDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:time("13:20:00-05:00") castable as xs:yearMonthDuration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs390">
      <description>Try xs:time(13:20:00-05:00) castable as xs:dayTimeDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:time("13:20:00-05:00") castable as xs:dayTimeDuration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs391">
      <description>Try xs:time(13:20:00-05:00) castable as xs:dateTime </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:time("13:20:00-05:00") castable as xs:dateTime</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs392">
      <description>Try xs:time(13:20:00-05:00) castable as xs:time </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:time("13:20:00-05:00") castable as xs:time</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs393">
      <description>Try xs:time(13:20:02.123) castable as xs:time </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:time("13:20:02.123") castable as xs:time</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs394">
      <description>Try xs:time(13:20:00Z) castable as xs:time </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:time("13:20:00Z") castable as xs:time</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs395">
      <description>Try xs:time(13:20:00-05:00) castable as xs:date </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:time("13:20:00-05:00") castable as xs:date</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs396">
      <description>Try xs:time(13:20:00-05:00) castable as xs:gYearMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:time("13:20:00-05:00") castable as xs:gYearMonth</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs397">
      <description>Try xs:time(13:20:00-05:00) castable as xs:gYear </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:time("13:20:00-05:00") castable as xs:gYear</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs398">
      <description>Try xs:time(13:20:00-05:00) castable as xs:gMonthDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:time("13:20:00-05:00") castable as xs:gMonthDay</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs399">
      <description>Try xs:time(13:20:00-05:00) castable as xs:gDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:time("13:20:00-05:00") castable as xs:gDay</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs400">
      <description>Try xs:time(13:20:00-05:00) castable as xs:gMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:time("13:20:00-05:00") castable as xs:gMonth</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs401">
      <description>Try xs:time(13:20:00-05:00) castable as xs:boolean </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:time("13:20:00-05:00") castable as xs:boolean</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs402">
      <description>Try xs:time(13:20:00-05:00) castable as xs:base64Binary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:time("13:20:00-05:00") castable as xs:base64Binary</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs403">
      <description>Try xs:time(13:20:00-05:00) castable as xs:hexBinary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:time("13:20:00-05:00") castable as xs:hexBinary</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs404">
      <description>Try xs:time(13:20:00-05:00) castable as xs:anyURI </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:time("13:20:00-05:00") castable as xs:anyURI</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs405">
      <description>Try xs:date(1999-05-31) castable as xs:untypedAtomic </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:date("1999-05-31") castable as xs:untypedAtomic</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs406">
      <description>Try xs:date(-0012-12-03-05:00) castable as xs:untypedAtomic </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:date("-0012-12-03-05:00") castable as xs:untypedAtomic</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs407">
      <description>Try xs:date(1999-05-31) castable as xs:string </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:date("1999-05-31") castable as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs408">
      <description>Try xs:date(-0012-12-03-05:00) castable as xs:string </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:date("-0012-12-03-05:00") castable as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs409">
      <description>Try xs:date(1999-05-31) castable as xs:float </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:date("1999-05-31") castable as xs:float</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs410">
      <description>Try xs:date(1999-05-31) castable as xs:double </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:date("1999-05-31") castable as xs:double</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs411">
      <description>Try xs:date(1999-05-31Z) castable as xs:double </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:date("1999-05-31Z") castable as xs:double</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs412">
      <description>Try xs:date(1999-05-31) castable as xs:integer </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:date("1999-05-31") castable as xs:integer</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs413">
      <description>Try xs:date(1999-05-31) castable as xs:duration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:date("1999-05-31") castable as xs:duration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs414">
      <description>Try xs:date(1999-05-31) castable as xs:yearMonthDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:date("1999-05-31") castable as xs:yearMonthDuration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs415">
      <description>Try xs:date(1999-05-31) castable as xs:dayTimeDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:date("1999-05-31") castable as xs:dayTimeDuration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs416">
      <description>Try xs:date(1999-05-31) castable as xs:dateTime </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:date("1999-05-31") castable as xs:dateTime</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs417">
      <description>Try xs:date(1999-05-31) castable as xs:time </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:date("1999-05-31") castable as xs:time</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs418">
      <description>Try xs:date(1999-05-31) castable as xs:date </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:date("1999-05-31") castable as xs:date</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs419">
      <description>Try xs:date(-0012-12-03-05:00) castable as xs:date </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:date("-0012-12-03-05:00") castable as xs:date</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs420">
      <description>Try xs:date(1999-05-31Z) castable as xs:date </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:date("1999-05-31Z") castable as xs:date</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs421">
      <description>Try xs:date(1999-05-31) castable as xs:gYearMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:date("1999-05-31") castable as xs:gYearMonth</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs422">
      <description>Try xs:date(1999-05-31) castable as xs:gYear </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:date("1999-05-31") castable as xs:gYear</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs423">
      <description>Try xs:date(-0012-12-03-05:00) castable as xs:gYear </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:date("-0012-12-03-05:00") castable as xs:gYear</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs424">
      <description>Try xs:date(1999-05-31Z) castable as xs:gYear </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:date("1999-05-31Z") castable as xs:gYear</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs425">
      <description>Try xs:date(1999-05-31) castable as xs:gMonthDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:date("1999-05-31") castable as xs:gMonthDay</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs426">
      <description>Try xs:date(-0012-12-03-05:00) castable as xs:gMonthDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:date("-0012-12-03-05:00") castable as xs:gMonthDay</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs427">
      <description>Try xs:date(1999-05-31Z) castable as xs:gMonthDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:date("1999-05-31Z") castable as xs:gMonthDay</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs428">
      <description>Try xs:date(1999-05-31Z) castable as xs:gDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:date("1999-05-31Z") castable as xs:gDay</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs429">
      <description>Try xs:date(-0012-12-03-05:00) castable as xs:gMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:date("-0012-12-03-05:00") castable as xs:gMonth</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs430">
      <description>Try xs:date(1999-05-31Z) castable as xs:gMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:date("1999-05-31Z") castable as xs:gMonth</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs431">
      <description>Try xs:date(1999-05-31) castable as xs:boolean </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:date("1999-05-31") castable as xs:boolean</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs432">
      <description>Try xs:date(1999-05-31) castable as xs:base64Binary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:date("1999-05-31") castable as xs:base64Binary</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs433">
      <description>Try xs:date(1999-05-31) castable as xs:hexBinary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:date("1999-05-31") castable as xs:hexBinary</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs434">
      <description>Try xs:date(1999-05-31) castable as xs:anyURI </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:date("1999-05-31") castable as xs:anyURI</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs435">
      <description>Try xs:gYearMonth(1999-05) castable as xs:untypedAtomic </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYearMonth("1999-05") castable as xs:untypedAtomic</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs436">
      <description>Try xs:gYearMonth(1999-05) castable as xs:string </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYearMonth("1999-05") castable as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs437">
      <description>Try xs:gYearMonth(1999-05) castable as xs:float </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYearMonth("1999-05") castable as xs:float</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs438">
      <description>Try xs:gYearMonth(1999-05) castable as xs:double </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYearMonth("1999-05") castable as xs:double</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs439">
      <description>Try xs:gYearMonth(1999-05Z) castable as xs:double </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYearMonth("1999-05Z") castable as xs:double</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs440">
      <description>Try xs:gYearMonth(1999-05Z) castable as xs:decimal </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYearMonth("1999-05Z") castable as xs:decimal</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs441">
      <description>Try xs:gYearMonth(1999-05Z) castable as xs:integer </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYearMonth("1999-05Z") castable as xs:integer</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs442">
      <description>Try xs:gYearMonth(1999-05Z) castable as xs:duration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYearMonth("1999-05Z") castable as xs:duration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs443">
      <description>Try xs:gYearMonth(1999-05Z) castable as xs:yearMonthDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYearMonth("1999-05Z") castable as xs:yearMonthDuration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs444">
      <description>Try xs:gYearMonth(1999-05Z) castable as xs:dayTimeDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYearMonth("1999-05Z") castable as xs:dayTimeDuration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs445">
      <description>Try xs:gYearMonth(1999-05Z) castable as xs:dateTime </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYearMonth("1999-05Z") castable as xs:dateTime</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs446">
      <description>Try xs:gYearMonth(1999-05Z) castable as xs:time </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYearMonth("1999-05Z") castable as xs:time</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs447">
      <description>Try xs:gYearMonth(1999-05Z) castable as xs:date </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYearMonth("1999-05Z") castable as xs:date</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs448">
      <description>Try xs:gYearMonth(1999-05) castable as xs:gYearMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYearMonth("1999-05") castable as xs:gYearMonth</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs449">
      <description>Try xs:gYearMonth(-0012-12-05:00) castable as xs:gYearMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYearMonth("-0012-12-05:00") castable as xs:gYearMonth</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs450">
      <description>Try xs:gYearMonth(1999-05Z) castable as xs:gYearMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYearMonth("1999-05Z") castable as xs:gYearMonth</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs451">
      <description>Try xs:gYearMonth(1999-05Z) castable as xs:gYear </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYearMonth("1999-05Z") castable as xs:gYear</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs452">
      <description>Try xs:gYearMonth(1999-05Z) castable as xs:gMonthDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYearMonth("1999-05Z") castable as xs:gMonthDay</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs453">
      <description>Try xs:gYearMonth(1999-05Z) castable as xs:gDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYearMonth("1999-05Z") castable as xs:gDay</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs454">
      <description>Try xs:gYearMonth(1999-05Z) castable as xs:gMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYearMonth("1999-05Z") castable as xs:gMonth</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs455">
      <description>Try xs:gYearMonth(1999-05Z) castable as xs:boolean </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYearMonth("1999-05Z") castable as xs:boolean</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs456">
      <description>Try xs:gYearMonth(1999-05Z) castable as xs:base64Binary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYearMonth("1999-05Z") castable as xs:base64Binary</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs457">
      <description>Try xs:gYearMonth(1999-05Z) castable as xs:hexBinary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYearMonth("1999-05Z") castable as xs:hexBinary</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs458">
      <description>Try xs:gYearMonth(1999-05Z) castable as xs:anyURI </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYearMonth("1999-05Z") castable as xs:anyURI</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs459">
      <description>Try xs:gYear(1999) castable as xs:untypedAtomic </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYear("1999") castable as xs:untypedAtomic</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs460">
      <description>Try xs:gYear(1999) castable as xs:string </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYear("1999") castable as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs461">
      <description>Try xs:gYear(1999) castable as xs:float </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYear("1999") castable as xs:float</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs462">
      <description>Try xs:gYear(1999) castable as xs:double </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYear("1999") castable as xs:double</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs463">
      <description>Try xs:gYear(1999) castable as xs:decimal </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYear("1999") castable as xs:decimal</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs464">
      <description>Try xs:gYear(1999) castable as xs:integer </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYear("1999") castable as xs:integer</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs465">
      <description>Try xs:gYear(1999) castable as xs:duration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYear("1999") castable as xs:duration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs466">
      <description>Try xs:gYear(1999) castable as xs:yearMonthDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYear("1999") castable as xs:yearMonthDuration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs467">
      <description>Try xs:gYear(1999) castable as xs:dateTime </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYear("1999") castable as xs:dateTime</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs468">
      <description>Try xs:gYear(1999) castable as xs:time </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYear("1999") castable as xs:time</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs469">
      <description>Try xs:gYear(1999) castable as xs:date </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYear("1999") castable as xs:date</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs470">
      <description>Try xs:gYear(1999) castable as xs:gYearMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYear("1999") castable as xs:gYearMonth</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs471">
      <description>Try xs:gYear(1999) castable as xs:gYear </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYear("1999") castable as xs:gYear</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs472">
      <description>Try xs:gYear(-0012-05:00) castable as xs:gYear </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYear("-0012-05:00") castable as xs:gYear</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs473">
      <description>Try xs:gYear(1999Z) castable as xs:gYear </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYear("1999Z") castable as xs:gYear</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs474">
      <description>Try xs:gYear(1999) castable as xs:gMonthDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYear("1999") castable as xs:gMonthDay</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs475">
      <description>Try xs:gYear(1999) castable as xs:gDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYear("1999") castable as xs:gDay</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs476">
      <description>Try xs:gYear(1999) castable as xs:gMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYear("1999") castable as xs:gMonth</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs477">
      <description>Try xs:gYear(1999) castable as xs:boolean </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYear("1999") castable as xs:boolean</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs478">
      <description>Try xs:gYear(1999) castable as xs:base64Binary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYear("1999") castable as xs:base64Binary</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs479">
      <description>Try xs:gYear(1999) castable as xs:hexBinary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYear("1999") castable as xs:hexBinary</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs480">
      <description>Try xs:gYear(1999) castable as xs:anyURI </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gYear("1999") castable as xs:anyURI</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs481">
      <description>Try xs:gMonthDay(--05-31) castable as xs:untypedAtomic </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonthDay("--05-31") castable as xs:untypedAtomic</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs482">
      <description>Try xs:gMonthDay(--05-31) castable as xs:string </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonthDay("--05-31") castable as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs483">
      <description>Try xs:gMonthDay(--05-31) castable as xs:float </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonthDay("--05-31") castable as xs:float</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs484">
      <description>Try xs:gMonthDay(--05-31) castable as xs:double </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonthDay("--05-31") castable as xs:double</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs485">
      <description>Try xs:gMonthDay(--05-31) castable as xs:decimal </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonthDay("--05-31") castable as xs:decimal</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs486">
      <description>Try xs:gMonthDay(--05-31) castable as xs:integer </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonthDay("--05-31") castable as xs:integer</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs487">
      <description>Try xs:gMonthDay(--05-31) castable as xs:duration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonthDay("--05-31") castable as xs:duration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs488">
      <description>Try xs:gMonthDay(--05-31) castable as xs:yearMonthDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonthDay("--05-31") castable as xs:yearMonthDuration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs489">
      <description>Try xs:gMonthDay(--05-31) castable as xs:dayTimeDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonthDay("--05-31") castable as xs:dayTimeDuration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs490">
      <description>Try xs:gMonthDay(--05-31) castable as xs:dateTime </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonthDay("--05-31") castable as xs:dateTime</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs491">
      <description>Try xs:gMonthDay(--05-31) castable as xs:time </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonthDay("--05-31") castable as xs:time</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs492">
      <description>Try xs:gMonthDay(--05-31) castable as xs:date </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonthDay("--05-31") castable as xs:date</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs493">
      <description>Try xs:gMonthDay(--05-31) castable as xs:gYearMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonthDay("--05-31") castable as xs:gYearMonth</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs494">
      <description>Try xs:gMonthDay(--05-31) castable as xs:gYear </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonthDay("--05-31") castable as xs:gYear</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs495">
      <description>Try xs:gMonthDay(--05-31) castable as xs:gMonthDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonthDay("--05-31") castable as xs:gMonthDay</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs496">
      <description>Try xs:gMonthDay(--12-03-05:00) castable as xs:gMonthDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonthDay("--12-03-05:00") castable as xs:gMonthDay</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs497">
      <description>Try xs:gMonthDay(--05-31Z) castable as xs:gMonthDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonthDay("--05-31Z") castable as xs:gMonthDay</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs498">
      <description>Try xs:gMonthDay(--05-31) castable as xs:gDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonthDay("--05-31") castable as xs:gDay</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs499">
      <description>Try xs:gMonthDay(--05-31) castable as xs:gMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonthDay("--05-31") castable as xs:gMonth</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs500">
      <description>Try xs:gMonthDay(--05-31) castable as xs:boolean </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonthDay("--05-31") castable as xs:boolean</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs501">
      <description>Try xs:gMonthDay(--05-31) castable as xs:base64Binary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonthDay("--05-31") castable as xs:base64Binary</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs502">
      <description>Try xs:gMonthDay(--05-31) castable as xs:hexBinary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonthDay("--05-31") castable as xs:hexBinary</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs503">
      <description>Try xs:gMonthDay(--05-31) castable as xs:anyURI </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonthDay("--05-31") castable as xs:anyURI</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs504">
      <description>Try xs:gDay(---31) castable as xs:untypedAtomic </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gDay("---31") castable as xs:untypedAtomic</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs505">
      <description>Try xs:gDay(---31) castable as xs:string </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gDay("---31") castable as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs506">
      <description>Try xs:gDay(---31) castable as xs:float </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gDay("---31") castable as xs:float</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs507">
      <description>Try xs:gDay(---31) castable as xs:double </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gDay("---31") castable as xs:double</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs508">
      <description>Try xs:gDay(---31) castable as xs:decimal </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gDay("---31") castable as xs:decimal</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs509">
      <description>Try xs:gDay(---31) castable as xs:integer </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gDay("---31") castable as xs:integer</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs510">
      <description>Try xs:gDay(---31) castable as xs:duration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gDay("---31") castable as xs:duration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs511">
      <description>Try xs:gDay(---31) castable as xs:yearMonthDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gDay("---31") castable as xs:yearMonthDuration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs512">
      <description>Try xs:gDay(---31) castable as xs:dayTimeDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gDay("---31") castable as xs:dayTimeDuration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs513">
      <description>Try xs:gDay(---31) castable as xs:dateTime </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gDay("---31") castable as xs:dateTime</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs514">
      <description>Try xs:gDay(---31) castable as xs:time </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gDay("---31") castable as xs:time</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs515">
      <description>Try xs:gDay(---31) castable as xs:date </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gDay("---31") castable as xs:date</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs516">
      <description>Try xs:gDay(---31) castable as xs:gYearMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gDay("---31") castable as xs:gYearMonth</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs517">
      <description>Try xs:gDay(---31) castable as xs:gYear </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gDay("---31") castable as xs:gYear</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs518">
      <description>Try xs:gDay(---31) castable as xs:gMonthDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gDay("---31") castable as xs:gMonthDay</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs519">
      <description>Try xs:gDay(---31) castable as xs:gDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gDay("---31") castable as xs:gDay</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs520">
      <description>Try xs:gDay(---03-05:00) castable as xs:gDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gDay("---03-05:00") castable as xs:gDay</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs521">
      <description>Try xs:gDay(---31Z) castable as xs:gDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gDay("---31Z") castable as xs:gDay</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs522">
      <description>Try xs:gDay(---31) castable as xs:gMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gDay("---31") castable as xs:gMonth</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs523">
      <description>Try xs:gDay(---31) castable as xs:boolean </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gDay("---31") castable as xs:boolean</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs524">
      <description>Try xs:gDay(---31) castable as xs:base64Binary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gDay("---31") castable as xs:base64Binary</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs525">
      <description>Try xs:gDay(---31) castable as xs:hexBinary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gDay("---31") castable as xs:hexBinary</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs526">
      <description>Try xs:gDay(---31) castable as xs:anyURI </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gDay("---31") castable as xs:anyURI</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs527">
      <description>Try xs:gMonth(--05) castable as xs:untypedAtomic </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonth("--05") castable as xs:untypedAtomic</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs528">
      <description>Try xs:gMonth(--05) castable as xs:string </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonth("--05") castable as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs529">
      <description>Try xs:gMonth(--05) castable as xs:float </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonth("--05") castable as xs:float</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs530">
      <description>Try xs:gMonth(--05) castable as xs:double </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonth("--05") castable as xs:double</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs531">
      <description>Try xs:gMonth(--05) castable as xs:decimal </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonth("--05") castable as xs:decimal</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs532">
      <description>Try xs:gMonth(--05) castable as xs:integer </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonth("--05") castable as xs:integer</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs533">
      <description>Try xs:gMonth(--05) castable as xs:duration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonth("--05") castable as xs:duration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs534">
      <description>Try xs:gMonth(--05) castable as xs:yearMonthDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonth("--05") castable as xs:yearMonthDuration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs535">
      <description>Try xs:gMonth(--05) castable as xs:dayTimeDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonth("--05") castable as xs:dayTimeDuration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs536">
      <description>Try xs:gMonth(--05) castable as xs:dateTime </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonth("--05") castable as xs:dateTime</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs537">
      <description>Try xs:gMonth(--05) castable as xs:time </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonth("--05") castable as xs:time</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs538">
      <description>Try xs:gMonth(--05) castable as xs:date </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonth("--05") castable as xs:date</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs539">
      <description>Try xs:gMonth(--05) castable as xs:gYearMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonth("--05") castable as xs:gYearMonth</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs540">
      <description>Try xs:gMonth(--05) castable as xs:gYear </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonth("--05") castable as xs:gYear</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs541">
      <description>Try xs:gMonth(--05) castable as xs:gMonthDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonth("--05") castable as xs:gMonthDay</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs542">
      <description>Try xs:gMonth(--05) castable as xs:gDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonth("--05") castable as xs:gDay</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs543">
      <description>Try xs:gMonth(--05) castable as xs:gMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonth("--05") castable as xs:gMonth</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs544">
      <description>Try xs:gMonth(--12-05:00) castable as xs:gMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonth("--12-05:00") castable as xs:gMonth</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs545">
      <description>Try xs:gMonth(--05Z) castable as xs:gMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonth("--05Z") castable as xs:gMonth</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs546">
      <description>Try xs:gMonth(--05) castable as xs:boolean </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonth("--05") castable as xs:boolean</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs547">
      <description>Try xs:gMonth(--05) castable as xs:base64Binary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonth("--05") castable as xs:base64Binary</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs548">
      <description>Try xs:gMonth(--05) castable as xs:hexBinary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonth("--05") castable as xs:hexBinary</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs549">
      <description>Try xs:gMonth(--05) castable as xs:anyURI </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:gMonth("--05") castable as xs:anyURI</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs550">
      <description>Try xs:boolean(true) castable as xs:untypedAtomic </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:boolean("true") castable as xs:untypedAtomic</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs551">
      <description>Try xs:boolean(true) castable as xs:string </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:boolean("true") castable as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs552">
      <description>Try xs:boolean(true) castable as xs:float </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:boolean("true") castable as xs:float</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs553">
      <description>Try xs:boolean(false) castable as xs:float </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:boolean("false") castable as xs:float</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs554">
      <description>Try xs:boolean(true) castable as xs:double </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:boolean("true") castable as xs:double</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs555">
      <description>Try xs:boolean(false) castable as xs:double </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:boolean("false") castable as xs:double</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs556">
      <description>Try xs:boolean(true) castable as xs:decimal </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:boolean("true") castable as xs:decimal</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs557">
      <description>Try xs:boolean(false) castable as xs:decimal </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:boolean("false") castable as xs:decimal</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs558">
      <description>Try xs:boolean(true) castable as xs:integer </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:boolean("true") castable as xs:integer</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs559">
      <description>Try xs:boolean(false) castable as xs:integer </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:boolean("false") castable as xs:integer</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs560">
      <description>Try xs:boolean(true) castable as xs:duration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:boolean("true") castable as xs:duration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs561">
      <description>Try xs:boolean(true) castable as xs:yearMonthDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:boolean("true") castable as xs:yearMonthDuration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs562">
      <description>Try xs:boolean(true) castable as xs:dayTimeDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:boolean("true") castable as xs:dayTimeDuration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs563">
      <description>Try xs:boolean(true) castable as xs:dateTime </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:boolean("true") castable as xs:dateTime</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs564">
      <description>Try xs:boolean(true) castable as xs:time </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:boolean("true") castable as xs:time</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs565">
      <description>Try xs:boolean(true) castable as xs:date </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:boolean("true") castable as xs:date</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs566">
      <description>Try xs:boolean(true) castable as xs:gYearMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:boolean("true") castable as xs:gYearMonth</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs567">
      <description>Try xs:boolean(true) castable as xs:gYear </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:boolean("true") castable as xs:gYear</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs568">
      <description>Try xs:boolean(true) castable as xs:gMonthDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:boolean("true") castable as xs:gMonthDay</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs569">
      <description>Try xs:boolean(true) castable as xs:gDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:boolean("true") castable as xs:gDay</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs570">
      <description>Try xs:boolean(true) castable as xs:gMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:boolean("true") castable as xs:gMonth</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs571">
      <description>Try xs:boolean(true) castable as xs:boolean </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:boolean("true") castable as xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs572">
      <description>Try xs:boolean(false) castable as xs:boolean </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:boolean("false") castable as xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs573">
      <description>Try xs:boolean(true) castable as xs:base64Binary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:boolean("true") castable as xs:base64Binary</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs574">
      <description>Try xs:boolean(true) castable as xs:hexBinary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:boolean("true") castable as xs:hexBinary</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs575">
      <description>Try xs:boolean(true) castable as xs:anyURI </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:boolean("true") castable as xs:anyURI</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs576">
      <description>Try xs:base64Binary(01001010) castable as xs:untypedAtomic </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:base64Binary("01001010") castable as xs:untypedAtomic</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs577">
      <description>Try xs:base64Binary(0FB7) castable as xs:untypedAtomic </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:base64Binary("0FB7") castable as xs:untypedAtomic</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs578">
      <description>Try xs:base64Binary(01001010) castable as xs:string </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:base64Binary("01001010") castable as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs579">
      <description>Try xs:base64Binary(0FB7) castable as xs:string </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:base64Binary("0FB7") castable as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs580">
      <description>Try xs:base64Binary(10010101) castable as xs:float </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:base64Binary("10010101") castable as xs:float</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs581">
      <description>Try xs:base64Binary(10010101) castable as xs:double </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:base64Binary("10010101") castable as xs:double</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs582">
      <description>Try xs:base64Binary(10010101) castable as xs:decimal </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:base64Binary("10010101") castable as xs:decimal</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs583">
      <description>Try xs:base64Binary(10010101) castable as xs:integer </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:base64Binary("10010101") castable as xs:integer</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs584">
      <description>Try xs:base64Binary(10010101) castable as xs:duration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:base64Binary("10010101") castable as xs:duration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs585">
      <description>Try xs:base64Binary(10010101) castable as xs:yearMonthDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:base64Binary("10010101") castable as xs:yearMonthDuration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs586">
      <description>Try xs:base64Binary(10010101) castable as xs:dayTimeDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:base64Binary("10010101") castable as xs:dayTimeDuration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs587">
      <description>Try xs:base64Binary(10010101) castable as xs:dateTime </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:base64Binary("10010101") castable as xs:dateTime</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs588">
      <description>Try xs:base64Binary(10010101) castable as xs:time </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:base64Binary("10010101") castable as xs:time</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs589">
      <description>Try xs:base64Binary(10010101) castable as xs:date </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:base64Binary("10010101") castable as xs:date</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs590">
      <description>Try xs:base64Binary(10010101) castable as xs:gYearMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:base64Binary("10010101") castable as xs:gYearMonth</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs591">
      <description>Try xs:base64Binary(10010101) castable as xs:gYear </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:base64Binary("10010101") castable as xs:gYear</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs592">
      <description>Try xs:base64Binary(10010101) castable as xs:gMonthDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:base64Binary("10010101") castable as xs:gMonthDay</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs593">
      <description>Try xs:base64Binary(10010101) castable as xs:gDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:base64Binary("10010101") castable as xs:gDay</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs594">
      <description>Try xs:base64Binary(10010101) castable as xs:gMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:base64Binary("10010101") castable as xs:gMonth</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs595">
      <description>Try xs:base64Binary(10010101) castable as xs:boolean </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:base64Binary("10010101") castable as xs:boolean</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs596">
      <description>Try xs:base64Binary(01001010) castable as xs:base64Binary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:base64Binary("01001010") castable as xs:base64Binary</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs597">
      <description>Try xs:base64Binary(0FB7) castable as xs:base64Binary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:base64Binary("0FB7") castable as xs:base64Binary</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs598">
      <description>Try xs:base64Binary(00000000) castable as xs:hexBinary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:base64Binary("00000000") castable as xs:hexBinary</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs599">
      <description>Try xs:base64Binary(10010101) castable as xs:hexBinary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:base64Binary("10010101") castable as xs:hexBinary</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs600">
      <description>Try xs:base64Binary(aA+zZ/09) castable as xs:hexBinary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:base64Binary("aA+zZ/09") castable as xs:hexBinary</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs601">
      <description>Try xs:base64Binary(0FB7) castable as xs:hexBinary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:base64Binary("0FB7") castable as xs:hexBinary</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs602">
      <description>Try xs:base64Binary(10010101) castable as xs:anyURI </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:base64Binary("10010101") castable as xs:anyURI</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs603">
      <description>Try xs:hexBinary(D74D35D35D35) castable as xs:untypedAtomic </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:hexBinary("D74D35D35D35") castable as xs:untypedAtomic</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs604">
      <description>Try xs:hexBinary(D74D35D35D35) castable as xs:string </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:hexBinary("D74D35D35D35") castable as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs605">
      <description>Try xs:hexBinary(D74D35D35D35) castable as xs:float </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:hexBinary("D74D35D35D35") castable as xs:float</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs606">
      <description>Try xs:hexBinary(D74D35D35D35) castable as xs:double </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:hexBinary("D74D35D35D35") castable as xs:double</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs607">
      <description>Try xs:hexBinary(D74D35D35D35) castable as xs:decimal </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:hexBinary("D74D35D35D35") castable as xs:decimal</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs608">
      <description>Try xs:hexBinary(D74D35D35D35) castable as xs:integer </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:hexBinary("D74D35D35D35") castable as xs:integer</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs609">
      <description>Try xs:hexBinary(D74D35D35D35) castable as xs:duration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:hexBinary("D74D35D35D35") castable as xs:duration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs610">
      <description>Try xs:hexBinary(D74D35D35D35) castable as xs:yearMonthDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:hexBinary("D74D35D35D35") castable as xs:yearMonthDuration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs611">
      <description>Try xs:hexBinary(D74D35D35D35) castable as xs:dayTimeDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:hexBinary("D74D35D35D35") castable as xs:dayTimeDuration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs612">
      <description>Try xs:hexBinary(D74D35D35D35) castable as xs:dateTime </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:hexBinary("D74D35D35D35") castable as xs:dateTime</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs613">
      <description>Try xs:hexBinary(D74D35D35D35) castable as xs:time </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:hexBinary("D74D35D35D35") castable as xs:time</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs614">
      <description>Try xs:hexBinary(D74D35D35D35) castable as xs:date </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:hexBinary("D74D35D35D35") castable as xs:date</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs615">
      <description>Try xs:hexBinary(D74D35D35D35) castable as xs:gYearMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:hexBinary("D74D35D35D35") castable as xs:gYearMonth</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs616">
      <description>Try xs:hexBinary(D74D35D35D35) castable as xs:gYear </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:hexBinary("D74D35D35D35") castable as xs:gYear</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs617">
      <description>Try xs:hexBinary(D74D35D35D35) castable as xs:gMonthDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:hexBinary("D74D35D35D35") castable as xs:gMonthDay</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs618">
      <description>Try xs:hexBinary(D74D35D35D35) castable as xs:gDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:hexBinary("D74D35D35D35") castable as xs:gDay</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs619">
      <description>Try xs:hexBinary(D74D35D35D35) castable as xs:gMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:hexBinary("D74D35D35D35") castable as xs:gMonth</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs620">
      <description>Try xs:hexBinary(D74D35D35D35) castable as xs:boolean </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:hexBinary("D74D35D35D35") castable as xs:boolean</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs621">
      <description>Try xs:hexBinary(D74D35D35D35) castable as xs:base64Binary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:hexBinary("D74D35D35D35") castable as xs:base64Binary</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs622">
      <description>Try xs:hexBinary(0fb7) castable as xs:base64Binary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:hexBinary("0fb7") castable as xs:base64Binary</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs623">
      <description>Try xs:hexBinary(D74D35D35D35) castable as xs:hexBinary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:hexBinary("D74D35D35D35") castable as xs:hexBinary</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs624">
      <description>Try xs:hexBinary(d74d35d35d35) castable as xs:hexBinary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:hexBinary("d74d35d35d35") castable as xs:hexBinary</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs625">
      <description>Try xs:hexBinary(D74D35D35D35) castable as xs:anyURI </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:hexBinary("D74D35D35D35") castable as xs:anyURI</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs626">
      <description>Try xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) castable as xs:untypedAtomic </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:untypedAtomic</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs627">
      <description>Try xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) castable as xs:string </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs628">
      <description>Try xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) castable as xs:float </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:float</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs629">
      <description>Try xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) castable as xs:double </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:double</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs630">
      <description>Try xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) castable as xs:decimal </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:decimal</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs631">
      <description>Try xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) castable as xs:integer </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:integer</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs632">
      <description>Try xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) castable as xs:duration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:duration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs633">
      <description>Try xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) castable as xs:yearMonthDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:yearMonthDuration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs634">
      <description>Try xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) castable as xs:dayTimeDuration </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:dayTimeDuration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs635">
      <description>Try xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) castable as xs:dateTime </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:dateTime</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs636">
      <description>Try xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) castable as xs:time </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:time</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs637">
      <description>Try xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) castable as xs:date </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:date</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs638">
      <description>Try xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) castable as xs:gYearMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:gYearMonth</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs639">
      <description>Try xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) castable as xs:gYear </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:gYear</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs640">
      <description>Try xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) castable as xs:gMonthDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:gMonthDay</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs641">
      <description>Try xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) castable as xs:gDay </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:gDay</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs642">
      <description>Try xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) castable as xs:gMonth </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:gMonth</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs643">
      <description>Try xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) castable as xs:boolean </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:boolean</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs644">
      <description>Try xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) castable as xs:base64Binary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:base64Binary</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs645">
      <description>Try xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) castable as xs:hexBinary </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:hexBinary</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="CastableAs646">
      <description>Try xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) castable as xs:anyURI </description>
      <created by="Joanne Tong" on="2005-07-21"/>
      <test>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") castable as xs:anyURI</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs647">
      <description>Try string literal castable as xs:QName </description>
      <created by="Carmelo Montanez" on="2006-06-08"/>
      <test>"ABC" castable as xs:QName</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs648">
      <description>Try variable castable as xs:QName </description>
      <created by="Carmelo Montanez" on="2006-06-08"/>
      <dependency type="spec" value="XP20 XQ10"/>
      <test>for $var in "ABC" return $var castable as xs:QName</test>
      <result>
            <assert-false/>
      </result>
   </test-case>
   
   <test-case name="CastableAs648a" covers="cast-to-qname">
      <description>Try variable castable as xs:QName </description>
      <created by="Carmelo Montanez" on="2006-06-08"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>let $var := "ABC" return $var castable as xs:QName</test>
      <result>
            <assert-true/>
      </result>
   </test-case>

   <test-case name="CastableAs649">
      <description>Reordering the predicates should not cause the expression to raise an error </description>
      <created by="Nicolae Brinza" on="2009-04-01"/>
      <environment ref="acme_corp"/>
      <test>count(//employee[salary castable as xs:integer][xs:integer(salary) gt 65000])</test>
      <result>
         <assert-eq>3</assert-eq>
      </result>
   </test-case>

   <test-case name="CastableAs650">
      <description>The expression should not raise a dynamic error </description>
      <created by="Nicolae Brinza" on="2009-04-01"/>
      <environment ref="acme_corp"/>
      <test>count(//employee[if (salary castable as xs:integer) then xs:integer(salary) gt 65000 else false()])</test>
      <result>
         <assert-eq>3</assert-eq>
      </result>
   </test-case>
   
   <test-case name="CastableAs651">
      <description>Pattern must match canonical representation (not the result of string())</description>
      <created by="Michael Kay" on="2013-04-08"/>
      <environment ref="derived"/>
      <dependency type="spec" value="XQ10+"/>
      <dependency type="feature" value="schemaImport"/>
      <test>
        import schema namespace d="http://www.w3.org/XQueryTest/derivedTypes";
        93.7 castable as d:canonicalDecimal
      </test>
      <result>
        <assert-true/>
      </result>
   </test-case>
   
   <test-case name="CastableAs652">
      <description>Pattern must match canonical representation (not the result of string())</description>
      <created by="Michael Kay" on="2013-04-08"/>
      <environment ref="derived"/>
      <dependency type="spec" value="XQ10+"/>
      <dependency type="feature" value="schemaImport"/>
      <test>
        import schema namespace d="http://www.w3.org/XQueryTest/derivedTypes";
        -93.7 castable as d:canonicalDecimal
      </test>
      <result>
        <assert-true/>
      </result>
   </test-case>
   
   <test-case name="CastableAs653">
      <description>Pattern must match canonical representation (not the result of string())</description>
      <created by="Michael Kay" on="2013-04-08"/>
      <environment ref="derived"/>
      <dependency type="spec" value="XQ10+"/>
      <dependency type="feature" value="schemaImport"/>
      <test>
        import schema namespace d="http://www.w3.org/XQueryTest/derivedTypes";
        12 castable as d:canonicalDecimal
      </test>
      <result>
        <assert-true/>
      </result>
   </test-case>
   
   <test-case name="CastableAs654">
      <description>Pattern must match canonical representation (not the result of string())</description>
      <created by="Michael Kay" on="2013-04-08"/>
      <environment ref="derived"/>
      <dependency type="spec" value="XQ10+"/>
      <dependency type="feature" value="schemaImport"/>
      <test>
        import schema namespace d="http://www.w3.org/XQueryTest/derivedTypes";
        -12 castable as d:canonicalDecimal
      </test>
      <result>
        <assert-true/>
      </result>
   </test-case>
   
   <test-case name="CastableAs655">
      <description>Pattern must match canonical representation (not the result of string())</description>
      <created by="Michael Kay" on="2013-04-08"/>
      <environment ref="derived"/>
      <dependency type="spec" value="XQ10+"/>
      <dependency type="feature" value="schemaImport"/>
      <test>
        import schema namespace d="http://www.w3.org/XQueryTest/derivedTypes";
        93.7 castable as d:canonicalDouble
      </test>
      <result>
        <assert-true/>
      </result>
   </test-case> 
   
   <test-case name="CastableAs656">
      <description>Pattern must match canonical representation (not the result of string())</description>
      <created by="Michael Kay" on="2013-04-08"/>
      <environment ref="derived"/>
      <dependency type="spec" value="XQ10+"/>
      <dependency type="feature" value="schemaImport"/>
      <test>
        import schema namespace d="http://www.w3.org/XQueryTest/derivedTypes";
        -93.7 castable as d:canonicalDouble
      </test>
      <result>
        <assert-true/>
      </result>
   </test-case>
   
   <test-case name="CastableAs657">
      <description>Pattern must match canonical representation (not the result of string())</description>
      <created by="Michael Kay" on="2013-04-08"/>
      <environment ref="derived"/>
      <dependency type="spec" value="XQ10+"/>
      <dependency type="feature" value="schemaImport"/>
      <test>
        import schema namespace d="http://www.w3.org/XQueryTest/derivedTypes";
        0.0e0 castable as d:canonicalDouble
      </test>
      <result>
        <assert-true/>
      </result>
   </test-case> 
   
   <test-case name="CastableAs658">
      <description>Pattern must match canonical representation (not the result of string())</description>
      <created by="Michael Kay" on="2013-04-08"/>
      <environment ref="derived"/>
      <dependency type="spec" value="XQ10+"/>
      <dependency type="feature" value="schemaImport"/>
      <test>
        import schema namespace d="http://www.w3.org/XQueryTest/derivedTypes";
        -0.0e0 castable as d:canonicalDouble
      </test>
      <result>
        <assert-true/>
      </result>
   </test-case>
   
   <test-case name="CastableAs659">
      <description>Pattern must match canonical representation (not the result of string())</description>
      <created by="Michael Kay" on="2013-04-08"/>
      <environment ref="derived"/>
      <dependency type="spec" value="XQ10+"/>
      <dependency type="feature" value="schemaImport"/>
      <test>
        import schema namespace d="http://www.w3.org/XQueryTest/derivedTypes";
        1e7 castable as d:canonicalDouble
      </test>
      <result>
        <assert-true/>
      </result>
   </test-case> 
   
   <test-case name="CastableAs660">
      <description>Pattern must match canonical representation (not the result of string())</description>
      <created by="Michael Kay" on="2013-04-08"/>
      <environment ref="derived"/>
      <dependency type="spec" value="XQ10+"/>
      <dependency type="feature" value="schemaImport"/>
      <test>
        import schema namespace d="http://www.w3.org/XQueryTest/derivedTypes";
        -1e7 castable as d:canonicalDouble
      </test>
      <result>
        <assert-true/>
      </result>
   </test-case> 
   
   <test-case name="CastableAs661">
      <description>Pattern must match canonical representation (not the result of string())</description>
      <created by="Michael Kay" on="2013-04-08"/>
      <environment ref="derived"/>
      <dependency type="spec" value="XQ10+"/>
      <dependency type="feature" value="schemaImport"/>
      <test>
        import schema namespace d="http://www.w3.org/XQueryTest/derivedTypes";
        1e-7 castable as d:canonicalDouble
      </test>
      <result>
        <assert-true/>
      </result>
   </test-case> 
   
   <test-case name="CastableAs662">
      <description>Pattern must match canonical representation (not the result of string())</description>
      <created by="Michael Kay" on="2013-04-08"/>
      <environment ref="derived"/>
      <dependency type="spec" value="XQ10+"/>
      <dependency type="feature" value="schemaImport"/>
      <test>
        import schema namespace d="http://www.w3.org/XQueryTest/derivedTypes";
        -1e-7 castable as d:canonicalDouble
      </test>
      <result>
        <assert-true/>
      </result>
   </test-case>     
        

   <test-case name="K-SeqExprCastable-1">
      <description> '+' nor '?' is allowed as a cardinality specifier in 'castable as'. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>'string' castable as xs:string*</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-SeqExprCastable-2">
      <description> '+' nor '?' is allowed as a cardinality specifier in 'castable as'. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>'string' castable as xs:string+</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-SeqExprCastable-3">
      <description> '+' nor '?' is allowed as a cardinality specifier in 'castable as'. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>("one", "two") castable as xs:string+</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-SeqExprCastable-4">
      <description> '+' nor '?' is allowed as a cardinality specifier in 'castable as'. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <modified by="O'Neil Delpratt" on="2012-09-25" change="Added test case depends on XQ10" />
      <dependency type="spec" value="XQ10"/>
      <test>'string' castable as xs:anyType*</test>
      <result>
         <any-of>
            <error code="XPST0003"/>
            <error code="XPST0051"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K-SeqExprCastable-4a" covers="cast-to-qname-errors">
      <description> '+' nor '?' is allowed as a cardinality specifier in 'castable as'. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <modified by="O'Neil Delpratt" on="2012-09-25" change="new test case variant, which depends on XQ30 and different error code" />
      <dependency type="spec" value="XQ30+"/>
      <test>'string' castable as xs:anyType*</test>
      <result>
         <any-of>
            <error code="XPST0003"/>
            <error code="XQST0052"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K-SeqExprCastable-5">
      <description> An invalid type for 'castable as' is specified. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <modified by="O'Neil Delpratt" on="2012-09-25" change="Added test case depends on XQ10" />
      <dependency type="spec" value="XQ10"/>
      <test>'string' castable as xs:anySimpleType</test>
      <result>
         <error code="XPST0051"/>
      </result>
   </test-case>

   <test-case name="K-SeqExprCastable-5a" covers="cast-to-qname-errors">
      <description> An invalid type for 'castable as' is specified. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <modified by="O'Neil Delpratt" on="2012-09-25" change="new test case variant, which depends on XQ30 and different error code" />
      <modified by="O'Neil Delpratt" on="2012-10-10" change="Change error code according to bug issues #17462 and #19090" />
      <dependency type="spec" value="XQ30+"/>
      <test>'string' castable as xs:anySimpleType</test>
      <result>
            <error code="XPST0080"/>
      </result>
   </test-case>

   <test-case name="K-SeqExprCastable-6">
      <description> An invalid type for 'castable as' is specified. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <modified by="O'Neil Delpratt" on="2012-09-25" change="Added test case depends on XQ10" />
      <dependency type="spec" value="XQ10"/>
      <test>'string' castable as xs:untyped</test>
      <result>
         <error code="XPST0051"/>
      </result>
   </test-case>

   <test-case name="K-SeqExprCastable-6a" covers="cast-to-qname-errors">
      <description> An invalid type for 'castable as' is specified. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <modified by="O'Neil Delpratt" on="2012-09-25" change="new test case variant, which depends on XQ30 and different error code" />
      <dependency type="spec" value="XQ30+"/>
      <test>'string' castable as xs:untyped</test>
      <result>
          <error code="XQST0052"/>
      </result>
   </test-case>

   <test-case name="K-SeqExprCastable-7">
      <description> An invalid type for 'castable as' is specified. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>'string' castable as xs:anyAtomicType</test>
      <result>
         <error code="XPST0080"/>
      </result>
   </test-case>

   <test-case name="K-SeqExprCastable-8">
      <description> An invalid type for 'castable as' is specified. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>"notation is abstract" castable as xs:NOTATION?</test>
      <result>
         <error code="XPST0080"/>
      </result>
   </test-case>

   <test-case name="K-SeqExprCastable-9">
      <description> An invalid type for 'castable as' is specified. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>() castable as xs:NOTATION?</test>
      <result>
         <error code="XPST0080"/>
      </result>
   </test-case>

   <test-case name="K-SeqExprCastable-10">
      <description> An invalid type for 'castable as' is specified. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>"notation is abstract" castable as xs:NOTATION</test>
      <result>
         <error code="XPST0080"/>
      </result>
   </test-case>

   <test-case name="K-SeqExprCastable-11">
      <description> An invalid type for 'castable as' is specified. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>() castable as xs:NOTATION</test>
      <result>
         <error code="XPST0080"/>
      </result>
   </test-case>

   <test-case name="K-SeqExprCastable-12">
      <description> An invalid type for 'castable as' is specified. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <modified by="O'Neil Delpratt" on="2012-09-25" change="Added test case depends on XQ10" />
      <dependency type="spec" value="XQ10"/>
      <test>(xs:double(1), xs:double(2), xs:double(3)) castable as xs:double*</test>
      <result>
         <any-of>
            <error code="XPST0003"/>
            <error code="XQST0052"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K-SeqExprCastable-12a" covers="cast-to-qname-errors">
      <description> An invalid type for 'castable as' is specified. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <modified by="O'Neil Delpratt" on="2012-09-25" change="new test case variant, which depends on XQ30 and different error code" />
      <dependency type="spec" value="XQ30+"/>
      <test>(xs:double(1), xs:double(2), xs:double(3)) castable as xs:double*</test>
      <result>
         <any-of>
            <error code="XPST0003"/>
            <error code="XPST0051"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K-SeqExprCastable-13">
      <description> An invalid type for 'castable as' is specified, leading to a syntax error. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <modified by="O'Neil Delpratt" on="2012-09-25" change="Added test case depends on XQ10" />
      <dependency type="spec" value="XQ10"/>
      <test>'string' castable as item()</test>
      <result>
         <any-of>
            <error code="XPST0003"/>
            <error code="XPST0051"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K-SeqExprCastable-13a" covers="cast-to-qname-errors">
      <description> An invalid type for 'castable as' is specified, leading to a syntax error. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <modified by="O'Neil Delpratt" on="2012-09-25" change="new test case variant, which depends on XQ30 and different error code" />
      <dependency type="spec" value="XQ30+"/>
      <test>'string' castable as item()</test>
      <result>
         <any-of>
            <error code="XPST0003"/>
            <error code="XQST0052"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K-SeqExprCastable-14">
      <description> An invalid type for 'castable as' is specified, leading to a syntax error. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>'string' castable as node()</test>
      <result>
         <any-of>
            <error code="XPST0003"/>
            <error code="XPST0051"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K-SeqExprCastable-15">
      <description> An invalid type for 'castable as' is specified, leading to a syntax error. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>'string' castable as attribute()</test>
      <result>
         <any-of>
            <error code="XPST0003"/>
            <error code="XPST0051"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K-SeqExprCastable-16">
      <description> An invalid type for 'castable as' is specified, leading to a syntax error. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>'string' castable as empty-sequence()</test>
      <result>
         <any-of>
            <error code="XPST0003"/>
            <error code="XPST0051"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K-SeqExprCastable-17">
      <description> A test whose essence is: `not(QName("", "lname") castable as xs:integer)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not(QName("", "lname") castable as xs:integer)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqExprCastable-18">
      <description> When casting to xs:QName the source value can be a xs:QName value. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>QName("", "lname") castable as xs:QName</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqExprCastable-19">
      <description> Casting an xs:string to xs:QName works. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>"ncname" castable as xs:QName</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqExprCastable-20">
      <description> Casting an empty sequence to xs:QName does not work. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not(() castable as xs:QName)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqExprCastable-21">
      <description> Casting an empty sequence to xs:QName? works. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>() castable as xs:QName?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqExprCastable-22">
      <description> Casting an xs:untypedAtomic to xs:QName does not work. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not(xs:untypedAtomic("ncname") castable as xs:QName)</test>
      <result>
         <any-of>
            <assert-true/>
            <assert-false/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K-SeqExprCastable-23">
      <description> A test whose essence is: `not(("one", "two") castable as xs:string?)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not(("one", "two") castable as xs:string?)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqExprCastable-24">
      <description> A test whose essence is: `not('string' castable as xs:boolean)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not('string' castable as xs:boolean)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqExprCastable-25">
      <description> A test whose essence is: `'true' castable as xs:boolean`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>'true' castable as xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqExprCastable-26">
      <description> A test whose essence is: `xs:float(1) castable as xs:float`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:float(1) castable as xs:float</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqExprCastable-27">
      <description> A test whose essence is: `xs:float(1) castable as xs:untypedAtomic`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:float(1) castable as xs:untypedAtomic</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqExprCastable-28">
      <description> A test whose essence is: `xs:float(1) castable as xs:string`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:float(1) castable as xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqExprCastable-29">
      <description> A test whose essence is: `not(xs:anyURI("example.com/") castable as xs:integer)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not(xs:anyURI("example.com/") castable as xs:integer)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqExprCastable-30">
      <description> A test whose essence is: `not("three" castable as xs:float)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not("three" castable as xs:float)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqExprCastable-31">
      <description> A test whose essence is: `not("three" castable as xs:integer)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not("three" castable as xs:integer)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqExprCastable-32">
      <description> A test whose essence is: `not("three" castable as xs:decimal)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not("three" castable as xs:decimal)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqExprCastable-33">
      <description> A test whose essence is: `not("three" castable as xs:double)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not("three" castable as xs:double)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqExprCastable-34">
      <description> A test whose essence is: `not((1, 2, 3) castable as xs:integer)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not((1, 2, 3) castable as xs:integer)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqExprCastable-35">
      <description> A test whose essence is: `not(() castable as xs:integer)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not(() castable as xs:integer)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqExprCastable-36">
      <description> A test whose essence is: `() castable as xs:integer?`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>() castable as xs:integer?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqExprCastable-37">
      <description> A test whose essence is: `(1) castable as xs:integer?`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>(1) castable as xs:integer?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqExprCastable-38">
      <description> A test whose essence is: `not(("one", "two") castable as xs:string?)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not(("one", "two") castable as xs:string?)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-SeqExprCastable-1">
      <description> Testing castability to xs:QName where the cardinality is wrong. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>(QName("http://example.com/ANamespace", "ncname"), QName("http://example.com/ANamespace", "ncname2"), QName("http://example.com/ANamespace", "ncname3")) castable as xs:QName</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="K2-SeqExprCastable-2">
      <description> Testing castability to xs:QName where the cardinality is wrong(#2). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>(QName("http://example.com/ANamespace", "ncname"), QName("http://example.com/ANamespace", "ncname2"), QName("http://example.com/ANamespace", "ncname3")) castable as xs:QName?</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="K2-SeqExprCastable-3">
      <description> Combine operator div with castable as. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>(1 div 0) castable as xs:string</test>
      <result>
          <any-of>
            <assert-true/><!-- permitted by errors-and-optimization -->
            <error code="FOAR0001"/>
          </any-of>
      </result>
   </test-case>

   <test-case name="K2-SeqExprCastable-4">
      <description> Combine operator div with castable as(#2). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>concat("2007-01-3", 1 div 0) castable as xs:date</test>
      <result>
         <error code="FOAR0001"/>
      </result>
   </test-case>

   <test-case name="K2-SeqExprCastable-5">
      <description> Check casting an xs:positiveInteger value to xs:double. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:positiveInteger("52") castable as xs:double</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-SeqExprCastable-6">
      <description> Check that an invalid xs:anyURI gets flagged as not being castable. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>"%" castable as xs:anyURI</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="K2-SeqExprCastable-7">
      <description> Check that an invalid xs:anyURI gets flagged as not being castable. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:untypedAtomic("%") castable as xs:anyURI</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="K2-SeqExprCastable-8">
      <description> Check castability of an invalid xs:anyURI. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>("http:\\invalid&gt;URI\someURI") castable as xs:anyURI</test>
      <result>
         <any-of>
            <assert-false/>
            <assert-true/>
         </any-of>
      </result>
   </test-case>

   <test-case name="Castable-UnionType-1" covers="cast-to-union">
       <description>Test the union type that should return an xs:integer value</description>
       <created by="O'Neil Delpratt" on="2011-10-27"/>
       <environment ref="union-List-defined-Types"/>
       <dependency type="spec" value="XQ30+"/>
       <dependency type="feature" value="schemaImport"/>
       <test><![CDATA[
       xquery version "3.0";
       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";
      "123" castable as s:myUnionType1]]>
       </test>
       <result><assert-true /></result>
   </test-case>

   <test-case name="Castable-ListType-2" covers="cast-to-list">
       <description>Cast the expression to the defined list type. The test should fail as the base type for the list is decimal</description>
       <created by="O'Neil Delpratt" on="2011-10-27"/>
       <environment ref="union-List-defined-Types"/>
       <dependency type="spec" value="XQ30+"/>
       <dependency type="feature" value="schemaImport"/>
       <test><![CDATA[
       xquery version "3.0";
       import schema namespace s="http://www.w3.org/XQueryTest/unionListDefined";
        "1.1 2.1 3.1" castable as s:intListType1]]>
       </test>
       <result><assert-false /></result>
   </test-case>
   
   <test-case name="cbcl-castable-byte-001">
      <description> test castable to xs:byte of out-of-range value </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>128 castable as xs:byte</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-byte-002">
      <description> test castable to xs:byte of out-of-range value </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>-129 castable as xs:byte</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-byte-003">
      <description> test castable to xs:byte of out-of-range value </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>"128" castable as xs:byte</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-byte-004">
      <description> test castable to xs:byte of out-of-range value </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>"-129" castable as xs:byte</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-date-001">
      <description> test castable to xs:date with overflow </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>"-25252734927766555-06-06" castable as xs:date</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-date-002">
      <description> test castable to xs:date with overflow </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>"25252734927766555-07-29" castable as xs:date</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-dateTime-001">
      <description> test castable to xs:dateTime with overflow </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>"-25252734927766555-06-06T00:00:00Z" castable as xs:dateTime</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-dateTime-002">
      <description> test castable to xs:dateTime with overflow </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>"25252734927766555-07-29T00:00:00Z" castable as xs:dateTime</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-dayTimeDuration-001">
      <description> test castable to xs:dayTimeDuration with overflow </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>"P11768614336404564651D" castable as xs:dayTimeDuration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-dayTimeDuration-002">
      <description> test castable to xs:dayTimeDuration with overflow </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>"-P11768614336404564651D" castable as xs:duration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-decimal-001">
      <description> test castability of xs:float('NaN') as xs:decimal </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>xs:float('NaN') castable as xs:decimal</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-decimal-002">
      <description> test castability of xs:float('-INF') as xs:decimal </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>xs:float('-INF') castable as xs:decimal</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-decimal-003">
      <description> test castability of xs:float('INF') as xs:decimal </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>xs:float('INF') castable as xs:decimal</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-decimal-004">
      <description> test castability of xs:double('NaN') as xs:double </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>xs:double('NaN') castable as xs:decimal</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-decimal-005">
      <description> test castability of xs:double('-INF') as xs:decimal </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>xs:double('-INF') castable as xs:decimal</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-decimal-006">
      <description> test castability of xs:double('INF') as xs:decimal </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>xs:double('INF') castable as xs:decimal</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-decimal-007">
      <description> test castable as xs:decimal of large double value </description>
      <created by="Oliver Hallam" on="2008-05-01"/>
      <modified by="Michael Kay" on="2012-12-09" change="allow true result: depends on implementation-defined limits on xs:decimal"/>
      <test>1.7976931348623157E+308 castable as xs:decimal</test>
      <result>
         <any-of>
            <assert-false/>
            <assert-true/>
         </any-of>   
      </result>
   </test-case>

   <test-case name="cbcl-castable-decimal-008">
      <description> test castable as xs:decimal of large negative double value </description>
      <created by="Oliver Hallam" on="2008-05-01"/>
      <modified by="Michael Kay" on="2012-12-09" change="allow true result: depends on implementation-defined limits on xs:decimal"/>
      <test>-1.7976931348623157E+308 castable as xs:decimal</test>
      <result>
         <any-of>
            <assert-false/>
            <assert-true/>
         </any-of> 
      </result>
   </test-case>

   <test-case name="cbcl-castable-decimal-009">
      <description> test castable as xs:decimal of large float value </description>
      <created by="Oliver Hallam" on="2008-05-01"/>
      <modified by="Michael Kay" on="2012-12-09" change="allow true result: depends on implementation-defined limits on xs:decimal"/>
      <test>xs:float('3.402823e38') castable as xs:decimal</test>
      <result>
         <any-of>
            <assert-false/>
            <assert-true/>
         </any-of> 
      </result>
   </test-case>

   <test-case name="cbcl-castable-decimal-010">
      <description> test castable to xs:decimal of large negative float value </description>
      <created by="Oliver Hallam" on="2008-05-01"/>
      <modified by="Michael Kay" on="2012-12-09" change="allow true result: depends on implementation-defined limits on xs:decimal"/>
      <test>xs:float('-3.402823e38') castable as xs:decimal</test>
      <result>
         <any-of>
            <assert-false/>
            <assert-true/>
         </any-of> 
      </result>
   </test-case>

   <test-case name="cbcl-castable-duration-001">
      <description> test castable to xs:duration with overflow </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>"-P768614336404564651Y" castable as xs:duration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-duration-002">
      <description> test castable to xs:duration with overflow </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>"P768614336404564651Y" castable as xs:duration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-int-001">
      <description> test castable to xs:int of out-of-range value </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>2147483648 castable as xs:int</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-int-002">
      <description> test castable to xs:int of out-of-range value </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>-2147483649 castable as xs:int</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-int-003">
      <description> test castable to xs:int of out-of-range value </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>"2147483648" castable as xs:int</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-int-004">
      <description> test castable to xs:int of out-of-range value </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>"-2147483649" castable as xs:int</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-integer-001">
      <description> test castable as xs:integer of large double value </description>
      <created by="Tim Mills" on="2008-04-30"/>
      <modified by="Michael Kay" on="2012-12-09" change="allow true result: depends on implementation-defined limits on xs:integer"/>
      <test>1.7976931348623157E+308 castable as xs:integer</test>
      <result>
         <any-of>
            <assert-false/>
            <assert-true/>
         </any-of>
      </result>
   </test-case>

   <test-case name="cbcl-castable-integer-002">
      <description> test castable as xs:integer of large negative double value </description>
      <created by="Tim Mills" on="2008-04-30"/>
      <modified by="Michael Kay" on="2012-12-09" change="allow true result: depends on implementation-defined limits on xs:integer"/>
      <test>-1.7976931348623157E+308 castable as xs:integer</test>
      <result>
         <any-of>
            <assert-false/>
            <assert-true/>
         </any-of>
      </result>
   </test-case>

   <test-case name="cbcl-castable-integer-003">
      <description> test castable as xs:integer of large float value </description>
      <created by="Tim Mills" on="2008-04-30"/>
      <modified by="Michael Kay" on="2012-12-09" change="allow true result: depends on implementation-defined limits on xs:integer"/>
      <test>xs:float('3.402823e38') castable as xs:integer</test>
      <result>
         <any-of>
            <assert-false/>
            <assert-true/>
         </any-of>
      </result>
   </test-case>

   <test-case name="cbcl-castable-integer-004">
      <description> test castable to xs:integer of large negative float value </description>
      <created by="Tim Mills" on="2008-04-30"/>
      <modified by="Michael Kay" on="2012-12-09" change="allow true result: depends on implementation-defined limits on xs:integer"/>
      <test>xs:float('-3.402823e38') castable as xs:integer</test>
      <result>
         <any-of>
            <assert-false/>
            <assert-true/>
         </any-of>
      </result>
   </test-case>

   <test-case name="cbcl-castable-language-001">
      <description> test castable to xs:language </description>
      <created by="Tim Mills" on="2008-04-28"/>
      <test>xs:language('en-gb') castable as xs:language</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-language-002">
      <description> test castable to xs:language from a type which can only fail </description>
      <created by="Tim Mills" on="2008-04-28"/>
      <test>1.0 castable as xs:language</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-language-003">
      <description> test castable to xs:language </description>
      <created by="Tim Mills" on="2008-04-28"/>
      <test>'en-gb' castable as xs:language</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-language-004">
      <description> test castable to xs:language </description>
      <created by="Tim Mills" on="2008-04-28"/>
      <test>"gobbledygook" castable as xs:language</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-long-001">
      <description> test castable to xs:long of out-of-range value </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>9223372036854775808 castable as xs:long</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-long-002">
      <description> test castable to xs:long of out-of-range value </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>-9223372036854775809 castable as xs:long</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-long-003">
      <description> test castable to xs:long of out-of-range value </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>"9223372036854775808" castable as xs:long</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-long-004">
      <description> test castable to xs:long of out-of-range value </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>"-9223372036854775809" castable as xs:long</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-name-001">
      <description> test castable as xs:Name from a subtype of xs:Name </description>
      <created by="Tim Mills" on="2008-04-28"/>
      <test>xs:NCName('NCName') castable as xs:Name</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-name-002">
      <description> test castable as xs:Name from a type which will always fail </description>
      <created by="Tim Mills" on="2008-04-28"/>
      <test>fn:current-time() castable as xs:Name</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-name-003">
      <description> test castable as xs:Name </description>
      <created by="Tim Mills" on="2008-04-28"/>
      <test>'NCName' castable as xs:Name</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-name-004">
      <description> test castable as xs:Name </description>
      <created by="Tim Mills" on="2008-04-28"/>
      <test>'N A M E' castable as xs:Name</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-ncname-001">
      <description> test castable as xs:NCName from a subtype of xs:NCName </description>
      <created by="Tim Mills" on="2008-04-28"/>
      <test>xs:ID('id') castable as xs:NCName</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-ncname-002">
      <description> test castable as xs:NCName from a type which will always fail </description>
      <created by="Tim Mills" on="2008-04-28"/>
      <test>fn:current-time() castable as xs:NCName</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-ncname-003">
      <description> test castable as xs:NCName </description>
      <created by="Tim Mills" on="2008-04-28"/>
      <test>'NCName' castable as xs:NCName</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-ncname-004">
      <description> test castable as xs:NCName </description>
      <created by="Tim Mills" on="2008-04-28"/>
      <test>'NC:Name' castable as xs:NCName</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-negativeInteger-001">
      <description> test castable to xs:negativeInteger of out-of-range value </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>0 castable as xs:negativeInteger</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-negativeInteger-002">
      <description> test castable to xs:negativeInteger of out-of-range value </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>"0" castable as xs:negativeInteger</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-nmtoken-001">
      <description> test castable as xs:NMTOKEN from a subtype of xs:NMTOKEN </description>
      <created by="Tim Mills" on="2008-04-28"/>
      <test>xs:NMTOKEN('NMTOKEN') castable as xs:NMTOKEN</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-nmtoken-002">
      <description> test cast to xs:NMTOKEN </description>
      <created by="Tim Mills" on="2008-04-28"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        "&#xD;&#xA;&#x9; foobar &#xA;&#xD;&#x9;" castable as xs:NMTOKEN]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-nmtoken-002b">
      <description> test cast to xs:NMTOKEN </description>
      <created by="Tim Mills" on="2008-04-28"/>
      <dependency type="spec" value="XP10+"/>
      <test>"&#xD;&#xA;&#x9; foobar &#xA;&#xD;&#x9;" castable as xs:NMTOKEN</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-nonNegativeInteger-001">
      <description> test castable to xs:nonNegativeInteger of out-of-range value </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>-1 castable as xs:nonNegativeInteger</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-nonNegativeInteger-002">
      <description> test castable to xs:nonNegativeInteger of out-of-range value </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>"-1" castable as xs:nonNegativeInteger</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-nonPositiveInteger-001">
      <description> test castable to xs:nonPositiveInteger of out-of-range value </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>1 castable as xs:nonPositiveInteger</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-nonPositiveInteger-002">
      <description> test castable to xs:nonPositiveInteger of out-of-range value </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>"1" castable as xs:nonPositiveInteger</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-positiveInteger-001">
      <description> test castable to xs:positiveInteger of out-of-range value </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>0 castable as xs:positiveInteger</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-positiveInteger-002">
      <description> test castable to xs:positiveInteger of out-of-range value </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>"0" castable as xs:positiveInteger</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-short-001">
      <description> test castable to xs:short of out-of-range value </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>32768 castable as xs:short</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-short-002">
      <description> test castable to xs:short of out-of-range value </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>-32769 castable as xs:short</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-short-003">
      <description> test castable to xs:short of out-of-range value </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>"32769" castable as xs:short</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-short-004">
      <description> test castable to xs:short of out-of-range value </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>"-32769" castable as xs:short</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-unsignedByte-001">
      <description> test castable to xs:unsignedByte of out-of-range value </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>256 castable as xs:unsignedByte</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-unsignedByte-002">
      <description> test castable to xs:unsignedByte of out-of-range value </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>-1 castable as xs:unsignedByte</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-unsignedByte-003">
      <description> test castable to xs:unsignedByte of out-of-range value </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>"256" castable as xs:unsignedByte</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-unsignedByte-004">
      <description> test castable to xs:unsignedByte of out-of-range value </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>"-1" castable as xs:unsignedByte</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-unsignedInt-001">
      <description> test castable to xs:unsignedInt of out-of-range value </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>4294967296 castable as xs:unsignedInt</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-unsignedInt-002">
      <description> test castable to xs:unsignedInt of out-of-range value </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>-1 castable as xs:unsignedInt</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-unsignedInt-003">
      <description> test castable to xs:unsignedInt of out-of-range value </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>"4294967296" castable as xs:unsignedInt</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-unsignedInt-004">
      <description> test castable to xs:unsignedInt of out-of-range value </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>"-1" castable as xs:unsignedInt</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-unsignedLong-001">
      <description> test castable to xs:unsignedLong of out-of-range value </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>18446744073709551616 castable as xs:unsignedLong</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-unsignedLong-002">
      <description> test castable to xs:unsignedLong of out-of-range value </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>-1 castable as xs:unsignedLong</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-unsignedLong-003">
      <description> test castable to xs:unsignedLong of out-of-range value </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>"18446744073709551616" castable as xs:unsignedLong</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-unsignedLong-004">
      <description> test castable to xs:unsignedLong of out-of-range value </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>"-1" castable as xs:unsignedLong</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-unsignedShort-001">
      <description> test castable to xs:unsignedShort of out-of-range value </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>65536 castable as xs:unsignedShort</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-unsignedShort-002">
      <description> test castable to xs:unsignedShort of out-of-range value </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>-1 castable as xs:unsignedShort</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-unsignedShort-003">
      <description> test castable to xs:unsignedShort of out-of-range value </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>"65536" castable as xs:unsignedShort</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-unsignedShort-004">
      <description> test castable to xs:unsignedShort of out-of-range value </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>"-1" castable as xs:unsignedShort</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-yearMonthDuration-001">
      <description> test castable to xs:yearMonthDuration with overflow </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>"-P768614336404564651Y" castable as xs:yearMonthDuration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-yearMonthDuration-002">
      <description> test castable to xs:yearMonthDuration with overflow </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>"P768614336404564651Y" castable as xs:yearMonthDuration</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-nonNegativeInteger-003">
      <description> Ensure that "-00" is a valid lexical value for xs:nonNegativeInteger </description>
      <created by="Oliver Hallam" on="2008-05-20"/>
      <test>"-00" castable as xs:nonNegativeInteger</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-nonPositiveInteger-003">
      <description> Ensure that "+00" is a valid lexical value for xs:nonPositiveInteger </description>
      <created by="Oliver Hallam" on="2008-05-20"/>
      <test>"+00" castable as xs:nonPositiveInteger</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-unsignedByte-005">
      <description> Ensure that "-00" is a valid lexical value for xs:unsignedByte </description>
      <created by="Oliver Hallam" on="2008-05-20"/>
      <test>"-00" castable as xs:unsignedByte</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-unsignedInt-005">
      <description> Ensure that "-00" is a valid lexical value for xs:unsignedInt </description>
      <created by="Oliver Hallam" on="2008-05-20"/>
      <test>"-00" castable as xs:unsignedInt</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-unsignedLong-005">
      <description> Ensure that "-00" is a valid lexical value for xs:unsignedLong </description>
      <created by="Oliver Hallam" on="2008-05-20"/>
      <test>"-00" castable as xs:unsignedLong</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-unsignedShort-005">
      <description> Ensure that "-00" is a valid lexical value for xs:unsignedShort </description>
      <created by="Oliver Hallam" on="2008-05-20"/>
      <test>"-00" castable as xs:unsignedShort</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-gYear-001">
      <description> test cast to xs:gYear with overflow </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>"99999999999999999999999999999" castable as xs:gYear</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-gYearMonth-001">
      <description> test cast to xs:gYearMonth with overflow </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>"99999999999999999999999999999-01" castable as xs:gYearMonth</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-gYearMonth-002">
      <description> test cast to xs:gYearMonth with overflow </description>
      <created by="Tim Mills" on="2008-04-25"/>
      <test>"99999999999999999999999999999-XX" castable as xs:gYearMonth</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-gYear-002">
      <description> test casting 0000 to xs:gYear </description>
      <created by="Oliver Hallam" on="2008-05-22"/>
      <test>"0000" castable as xs:gYear</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-gYear-003">
      <description> test casting -0000 to xs:gYear </description>
      <created by="Oliver Hallam" on="2008-05-22"/>
      <test>"-0000" castable as xs:gYear</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-gYearMonth-003">
      <description> test cast year 0000 xs:gYearMonth </description>
      <created by="Oliver Hallam" on="2008-05-22"/>
      <test>"0000-05" castable as xs:gYearMonth</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-castable-gYearMonth-004">
      <description> test cast year 0000 xs:gYearMonth </description>
      <created by="Oliver Hallam" on="2008-05-22"/>
      <test>"-0000-05" castable as xs:gYearMonth</test>
      <result>
         <assert-false/>
      </result>
   </test-case>
</test-set>
