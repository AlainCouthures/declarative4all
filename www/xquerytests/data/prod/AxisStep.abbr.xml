<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="prod-AxisStep.abbr">
   <description>Abbreviated axes: tests for the AxisStep production</description>
   <link type="spec" document="http://www.w3.org/TR/xquery-30/" idref="doc-XQuery30-AxisStep"/>

   <test-case name="abbreviatedSyntax-1">
      <description> Evaluates "hours". Selects the "hours" element children of the context node.</description>
      <created by="Carmelo Montanez" on="2005-07-08"/>
      <environment ref="works-mod"/>
      <test>for $h in (/works/employee[4]) return $h/hours/string()</test>
      <result>
         <assert-string-value>20 40</assert-string-value>
      </result>
   </test-case>

   <test-case name="abbreviatedSyntax-2">
      <description> Evaluates "text()". Selects all text node children of the context node.</description>
      <created by="Carmelo Montanez" on="2005-07-08"/>
      <environment ref="works-mod"/>
      <test>for $h in (/works/employee[2]) return $h/text()</test>
      <result>
         <assert-string-value normalize-space="true">Text data from Employee[2]</assert-string-value>
      </result>
   </test-case>

   <test-case name="abbreviatedSyntax-3">
      <description> Evaluates "@name". Selects the name attribute of the context node.</description>
      <created by="Carmelo Montanez" on="2005-07-08"/>
      <environment ref="works-mod"/>
      <test>for $h in (/works/employee[10]) return $h/@name</test>
      <result>
         <assert-string-value>John Doe 10</assert-string-value>
      </result>
   </test-case>

   <test-case name="abbreviatedSyntax-5">
      <description> Evaluates "employee[1]". Selects the first employee child of the context node.</description>
      <created by="Carmelo Montanez" on="2005-07-08"/>
      <environment ref="works-mod"/>
      <test>for $h in (/works) return $h/employee[1]/@name</test>
      <result>
         <assert-string-value>Jane Doe 1</assert-string-value>
      </result>
   </test-case>

   <test-case name="abbreviatedSyntax-6">
      <description> Evaluates "para[fn:last()]". Selects the last employee child of the context node.</description>
      <created by="Carmelo Montanez" on="2005-07-08"/>
      <environment ref="works-mod"/>
      <test>for $h in (/works) return $h/employee[fn:last()]/@name</test>
      <result>
         <assert-string-value>Jane Doe 13</assert-string-value>
      </result>
   </test-case>

   <test-case name="abbreviatedSyntax-7">
      <description> Evaluates "*/hours". Selects all hours grandchildren of the context node.</description>
      <created by="Carmelo Montanez" on="2005-07-08"/>
      <environment ref="works-mod"/>
      <test>for $h in (/works) return $h/*/hours/string()</test>
      <result>
         <assert-string-value>40 70 20 80 20 40 20 30 12 40 80 20 20 20 40 80</assert-string-value>
      </result>
   </test-case>

   <test-case name="abbreviatedSyntax-8">
      <description> Evaluates "/works/employee[5]/hours[2]" selects the second hours of the fifth employee of the book whose parent is the document node that contains the context node.</description>
      <created by="Carmelo Montanez" on="2005-07-08"/>
      <modified by="Michael Kay" on="2011-07-05" change="change the test to do what the description says it does"/>
      <environment ref="works-mod"/>
      <test>/works/employee[5]/hours[2]</test>
      <result>
         <assert-string-value>30</assert-string-value>
      </result>
   </test-case>

   <test-case name="abbreviatedSyntax-9">
      <description> Evaluates "employee//hours". Selects the hours element descendants of the employee element children of the context node.</description>
      <created by="Carmelo Montanez" on="2005-07-08"/>
      <environment ref="works-mod"/>
      <test>for $h in (/works) return $h/employee//hours/string()</test>
      <result>
         <assert-string-value>40 70 20 80 20 40 20 30 12 40 80 20 20 20 40 80</assert-string-value>
      </result>
   </test-case>

   <test-case name="abbreviatedSyntax-10">
      <description> Evaluates "//hours". Selects all the hours descendants of the root document node and thus selects all hours elements in the same document as the context node.</description>
      <created by="Carmelo Montanez" on="2005-07-08"/>
      <environment ref="works-mod"/>
      <test>for $h in (/works) return $h//hours/string()</test>
      <result>
         <assert-string-value>40 70 20 80 20 40 20 30 12 40 80 20 20 20 40 80</assert-string-value>
      </result>
   </test-case>

   <test-case name="abbreviatedSyntax-12">
      <description> Evaluates "//overtime/day". Selects all the day elements in the same document as the context node that have an overtime parent.</description>
      <created by="Carmelo Montanez" on="2005-07-08"/>
      <environment ref="works-mod"/>
      <test>for $h in (/works) return $h//overtime/day/string()</test>
      <result>
         <assert-string-value>Monday Tuesday</assert-string-value>
      </result>
   </test-case>

   <test-case name="abbreviatedSyntax-13">
      <description> Evaluates ".//day". Selects the day element descendants of the context node.</description>
      <created by="Carmelo Montanez" on="2005-07-08"/>
      <environment ref="works-mod"/>
      <test>for $h in (/works) return $h/.//day/string()</test>
      <result>
         <assert-string-value>Monday Tuesday</assert-string-value>
      </result>
   </test-case>

   <test-case name="abbreviatedSyntax-14">
      <description> Evaluates "..". Selects the parent of the context node.</description>
      <created by="Carmelo Montanez" on="2005-07-08"/>
      <environment ref="works-mod"/>
      <test>for $h in (/works/employee[12]/overtime) return $h/../@name</test>
      <result>
         <assert-string-value>John Doe 12</assert-string-value>
      </result>
   </test-case>

   <test-case name="abbreviatedSyntax-16">
      <description> Evaluates "employee[@name="Jane Doe 11"]". Selects all employee children of the context node that have a name attribute with a value "Jane Doe 11".</description>
      <created by="Carmelo Montanez" on="2005-07-08"/>
      <environment ref="works-mod"/>
      <test>for $h in (/works) return $h/employee[@name="Jane Doe 11"]/@name</test>
      <result>
         <assert-string-value>Jane Doe 11</assert-string-value>
      </result>
   </test-case>

   <test-case name="abbreviatedSyntax-17">
      <description> Evaluates "employee[@gender="female"][5]". Selects the fifth element child of the context node that has a gender attribute with value "female".</description>
      <created by="Carmelo Montanez" on="2005-07-08"/>
      <environment ref="works-mod"/>
      <test>for $h in (/works) return $h/employee[@gender="female"][5]/@name</test>
      <result>
         <assert-string-value>Jane Doe 9</assert-string-value>
      </result>
   </test-case>

   <test-case name="abbreviatedSyntax-18">
      <description> Evaluates "employee[5][@gender="female"]". Selects the fifth employee child of the context node if that child has a gender attribute with value "female".</description>
      <created by="Carmelo Montanez" on="2005-07-08"/>
      <environment ref="works-mod"/>
      <test>for $h in (/works) return $h/employee[5][@gender="female"]/@name</test>
      <result>
         <assert-string-value>Jane Doe 5</assert-string-value>
      </result>
   </test-case>

   <test-case name="abbreviatedSyntax-19">
      <description> Evaluates "employee[status="active"]". Selects the employee children of the context node that have one or more status children whose typed value is equal to the string "active".</description>
      <created by="Carmelo Montanez" on="2005-07-08"/>
      <environment ref="works-mod"/>
      <test>for $h in (/works) return $h/employee[status="active"]/@name</test>
      <result>
         <assert-string-value>Jane Doe 13</assert-string-value>
      </result>
   </test-case>

   <test-case name="abbreviatedSyntax-20">
      <description> Evaluates "employee[overtime]". Selects the employee children of the context node that have one or more overtime children.</description>
      <created by="Carmelo Montanez" on="2005-07-08"/>
      <environment ref="works-mod"/>
      <test>for $h in (/works) return $h/employee[overtime]/@name</test>
      <result>
         <assert-string-value>John Doe 12</assert-string-value>
      </result>
   </test-case>

   <test-case name="abbreviatedSyntax-21">
      <description> Evaluates "employee[@name and @type]". Selects all the employee children of the context node that have both a name attribute and a type attribute.</description>
      <created by="Carmelo Montanez" on="2005-07-08"/>
      <environment ref="works-mod"/>
      <test>for $h in (/works) return $h/employee[@name and @type]/@name</test>
      <result>
         <assert-string-value>Jane Doe 13</assert-string-value>
      </result>
   </test-case>

   <test-case name="abbreviatedSyntax-22">
      <description> Evaluates "employee/(status|overtime)/day". Selects every day element that has a parent that is either a status or an overime element, that in turn is a child of an employee element that is a child of the context node.</description>
      <created by="Carmelo Montanez" on="2005-07-08"/>
      <environment ref="works-mod"/>
      <test>for $h in (/works) return $h/employee/(status|overtime)/day/string()</test>
      <result>
         <assert-string-value>Monday Tuesday</assert-string-value>
      </result>
   </test-case>

   <test-case name="abbreviatedSyntax-24">
      <description> Evaluates "employee/(status|overtime)/day". 
      Selects every day element that has a parent that is either a status or an overime element, 
      that in turn is a child of an employee element that is a child of the context node. 
      Uses "union" Operator</description>
      <created by="Carmelo Montanez" on="2005-07-08"/>
      <environment ref="works-mod"/>
      <test>for $h in (/works) return $h/employee/(status union overtime)/day/string()</test>
      <result>
         <assert-string-value>Monday Tuesday</assert-string-value>
      </result>
   </test-case>

   <test-case name="abbreviatedSyntax-25">
      <description> Evaluates "employee[@name = condition @type=condition]". 
      Selects all the employee children of the context node that have both a name attribute and a type attribute. 
      Uses "or" operator.</description>
      <created by="Carmelo Montanez" on="2005-07-08"/>
      <environment ref="works-mod"/>
      <test>for $h in (/works) return $h/employee[@name = "Jane Doe 13" or @type="FT"]/@name</test>
      <result>
         <assert-string-value>Jane Doe 13</assert-string-value>
      </result>
   </test-case>

   <test-case name="abbreviatedSyntax-26">
      <description> Use an expression that returns atomic values after "//"</description>
      <created by="Michael Kay" on="2011-01-24"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $in := <a><b>ABC</b><b>XYZ</b></a> return $in//string-to-codepoints(.)]]></test>
      <result>
         <assert-string-value>65 66 67 88 89 90 65 66 67 65 66 67 88 89 90 88 89 90</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-AbbrAxes-1">
      <description> Focus is undefined inside user functions; '..' axis.</description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>declare function local:myFunc() { .. }; local:myFunc()</test>
      <result>
         <error code="XPDY0002"/>
      </result>
   </test-case>
</test-set>