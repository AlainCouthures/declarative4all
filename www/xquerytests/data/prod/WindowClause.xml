<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="prod-WindowClause" covers="windows">
    <description>Tests for the Window Clause production</description>
    <link type="spec" document="http://www.w3.org/TR/xquery-30/" idref="doc-xquery30-WindowClause"/>
    <link type="spec" document="XQuery" section-number="3.9.4" idref="id-windows"/>
    <dependency type="spec" value="XQ30+"/>
    
   <environment name="WindowingUseCases01">
      <source role="." file="WindowClause/arrange_rows.xml">
         <description> arrange_rows.xml from the XQuery 3.0 Use Cases </description>
         <created by="Matthias Brantner" on="2011-07-28"/>
      </source>    
   </environment>

   <environment name="WindowingUseCases01S">
      <schema file="WindowClause/arrange_rows.xsd">
          <description> arrange_rows.xsd schema from the the XQuery 3.0 Use Cases</description>
          <created by="Matthias Brantner" on="2012-03-12"/>
      </schema>
      <source role="." file="WindowClause/arrange_rows.xml" validation="strict">
         <description> arrange_rows.xml from the XQuery 3.0 Use Cases </description>
         <created by="Matthias Brantner" on="2011-07-28"/>
      </source>    
   </environment>

   <environment name="WindowingUseCases02">
      <source role="." file="WindowClause/head_para.xml">
         <description> head_para.xml from the XQuery 3.0 Use Cases </description>
         <created by="Matthias Brantner" on="2011-07-28"/>
      </source>    
   </environment>

   <environment name="WindowingUseCases02S">
      <schema file="WindowClause/head_para.xsd">
          <description> head_para.xsd schema from the the XQuery 3.0 Use Cases</description>
          <created by="Matthias Brantner" on="2012-03-12"/>
      </schema>
      <source role="." file="WindowClause/head_para.xml" validation="strict">
         <description> head_para.xml from the XQuery 3.0 Use Cases </description>
         <created by="Matthias Brantner" on="2011-07-28"/>
      </source>    
   </environment>

   <environment name="WindowingUseCases03">
      <source role="." file="WindowClause/term_def_list.xml">
         <description> term_def_list.xml from the XQuery 3.0 Use Cases </description>
         <created by="Matthias Brantner" on="2011-07-28"/>
      </source>    
   </environment>

   <environment name="WindowingUseCases03S">
      <schema file="WindowClause/term_def_list.xsd">
          <description> term_def_list.xsd schema from the the XQuery 3.0 Use Cases</description>
          <created by="Matthias Brantner" on="2012-03-12"/>
      </schema>
      <source role="." file="WindowClause/term_def_list.xml" validation="strict">
         <description> term_def_list.xml from the XQuery 3.0 Use Cases </description>
         <created by="Matthias Brantner" on="2011-07-28"/>
      </source>    
   </environment>

   <environment name="WindowingUseCases04">
      <source role="." file="WindowClause/temp_events.xml">
         <description> temp_events.xml from the XQuery 3.0 Use Cases </description>
         <created by="Matthias Brantner" on="2011-07-28"/>
      </source>    
   </environment>

   <environment name="WindowingUseCases04S">
      <schema file="WindowClause/temp_events.xsd">
          <description> temp_events.xsd schema from the the XQuery 3.0 Use Cases</description>
          <created by="Matthias Brantner" on="2012-03-12"/>
      </schema>
      <source role="." file="WindowClause/temp_events.xml" validation="strict">
         <description> temp_events.xml from the XQuery 3.0 Use Cases </description>
         <created by="Matthias Brantner" on="2011-07-28"/>
      </source>    
   </environment>

   <environment name="WindowingUseCases05">
      <source role="." file="WindowClause/person_events.xml">
         <description> person_events.xml from the XQuery 3.0 Use Cases </description>
         <created by="Matthias Brantner" on="2011-07-28"/>
      </source>    
   </environment>

   <environment name="WindowingUseCases05S">
      <schema file="WindowClause/person_events.xsd">
          <description> person_events.xsd schema from the the XQuery 3.0 Use Cases</description>
          <created by="Matthias Brantner" on="2012-03-12"/>
      </schema>
      <source role="." file="WindowClause/person_events.xml" validation="strict">
         <description> person_events.xml from the XQuery 3.0 Use Cases </description>
         <created by="Matthias Brantner" on="2011-07-28"/>
      </source>    
   </environment>

   <environment name="WindowingUseCases06">
      <source role="." file="WindowClause/rss.xml">
         <description> rss.xml from the XQuery 3.0 Use Cases </description>
         <created by="Matthias Brantner" on="2011-07-28"/>
      </source>    
   </environment>

   <environment name="WindowingUseCases06S">
      <schema file="WindowClause/rss.xsd">
          <description> rss.xsd schema from the the XQuery 3.0 Use Cases</description>
          <created by="Matthias Brantner" on="2012-03-12"/>
      </schema>
      <source role="." file="WindowClause/rss.xml" validation="strict">
         <description> rss.xml from the XQuery 3.0 Use Cases </description>
         <created by="Matthias Brantner" on="2011-07-28"/>
      </source>    
   </environment>

   <environment name="WindowingUseCases07">
      <source role="." file="WindowClause/cxml.xml">
         <description> cxml.xml from the XQuery 3.0 Use Cases </description>
         <created by="Matthias Brantner" on="2011-07-28"/>
      </source>    
   </environment>

   <environment name="WindowingUseCases07S">
      <schema file="WindowClause/cxml.xsd">
          <description> cxml.xsd schema from the the XQuery 3.0 Use Cases</description>
          <created by="Matthias Brantner" on="2012-03-12"/>
      </schema>
      <source role="." file="WindowClause/cxml.xml" validation="strict">
         <description> cxml.xml from the XQuery 3.0 Use Cases </description>
         <created by="Matthias Brantner" on="2011-07-28"/>
      </source>    
   </environment>
   
	
	<test-case name="SlidingWindowExpr501">
		<description>Sliding Window Clause, using variables : window, start item position, end item position</description>
		<created by="Benjamin Nguyen" on="2011-07-28"/>
		<dependency type="spec" value="XQ30+"/>
		<test>for sliding window $w in (1, 2, 3, 4) 
      start at $s when fn:true()
      end at $e when $e - $s eq 1
      return $w</test>
        <result>
            <assert-deep-eq>(1, 2, 2, 3, 3, 4, 4)</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="SlidingWindowExpr502">
        <description>Sliding Window Clause, using only keyword, using variables : window, start item position, end item position</description>
        <created by="Benjamin Nguyen" on="2011-07-28"/>
        <dependency type="spec" value="XQ30+"/>
        <test>for sliding window $w in (1, 2, 3, 4) 
      start at $s when fn:true()
      only end at $e when $e - $s eq 1
      return $w</test>
        <result>
            <assert-deep-eq>(1, 2, 2, 3, 3, 4)</assert-deep-eq>
        </result>
    </test-case>

    <test-case name="SlidingWindowExpr503">
        <description>Sliding Window Clause, with errors due to having similar variable names : http://www.w3.org/TR/xquery-30/#ERRXQST0089 or http://www.w3.org/TR/xquery-30/#ERR</description>
        <created by="Benjamin Nguyen" on="2011-07-28"/>
        <modified by="Michael Kay" on="2011-12-30" change="change error code from XPST0103 to XQST0103"/>
        <dependency type="spec" value="XQ30+"/>
        <test>for sliding window $w in (1, 2, 3, 4) 
      start $s at $s previous $s when fn:true()
      only end $s at $s previous $s when $s - $s eq 1
      return $w</test>
        <result>
            <any-of>
                <error code="XQST0089"/>
                <error code="XQST0103"/>
            </any-of>
        </result>
    </test-case>
    
    <test-case name="TumblingWindowExpr503">
      <description>Sliding Window Clause, with errors due to having similar variable names : http://www.w3.org/TR/xquery-30/#ERRXQST0089 or http://www.w3.org/TR/xquery-30/#ERR</description>
        <created by="Benjamin Nguyen" on="2011-07-28"/>
        <modified by="Michael Kay" on="2011-12-30" change="change error code from XPST0103 to XQST0103"/>
        <dependency type="spec" value="XQ30+"/>
        <test>for tumbling window $w in (1, 2, 3, 4) 
      start $s at $s previous $s when fn:true()
      only end $s at $s previous $s when $s - $s eq 1
      return $w</test>
		<result>
			<error code="XQST0103"/>
		</result>
	</test-case>

   <test-case name="WindowingUseCase01">
      <description> use case 1: Arrange a sequence of items as a table with three columns (using as many rows as necessary). </description>
      <created by="Matthias Brantner" on="2011-07-28"/>
      <environment ref="WindowingUseCases01"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
<table>{
  for tumbling window $w in ./doc/*
    start at $x when fn:true()
    end at $y when $y - $x = 2
  return
    <tr>{
      for $i in $w
      return
        <td>{data($i)}</td>
    }</tr>
}</table>
      ]]></test>
      <result>
        <assert-xml><![CDATA[<table><tr><td>Green</td><td>Pink</td><td>Lilac</td></tr><tr><td>Turquoise</td><td>Peach</td><td>Opal</td></tr><tr><td>Champagne</td></tr></table>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WindowingUseCase01S">
      <description> use case 1: Arrange a sequence of items as a table with three columns (using as many rows as necessary). </description>
      <created by="Matthias Brantner" on="2011-07-28"/>
      <environment ref="WindowingUseCases01S"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
<table>{
  for tumbling window $w in ./doc/*
    start at $x when fn:true()
    end at $y when $y - $x = 2
  return
    <tr>{
      for $i in $w
      return
        <td>{data($i)}</td>
    }</tr>
}</table>
      ]]></test>
      <result>
        <assert-xml><![CDATA[<table><tr><td>Green</td><td>Pink</td><td>Lilac</td></tr><tr><td>Turquoise</td><td>Peach</td><td>Opal</td></tr><tr><td>Champagne</td></tr></table>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WindowingUseCase02">
      <description> use case 2: Convert a structure with implicit sections to a structure with explicit sections. </description>
      <created by="Matthias Brantner" on="2011-07-28"/>
      <environment ref="WindowingUseCases02"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
<chapter>{
  for tumbling window $w in ./body/*
    start previous $s when $s[self::h2]
    end next $e when $e[self::h2]
  return
    <section title="{data($s)}">{
       for $x in $w
       return
         <para>{data($x)}</para>
  }</section>
}</chapter>
      ]]></test>
      <result>
        <assert-xml><![CDATA[<chapter><section title="heading1"><para>para1</para><para>para2</para></section><section title="heading2"><para>para3</para><para>para4</para><para>para5</para></section></chapter>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WindowingUseCase02S">
      <description> use case 2: Convert a structure with implicit sections to a structure with explicit sections. </description>
      <created by="Matthias Brantner" on="2011-07-28"/>
      <environment ref="WindowingUseCases02S"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
<chapter>{
  for tumbling window $w in ./body/*
    start previous $s when $s[self::h2]
    end next $e when $e[self::h2]
  return
    <section title="{data($s)}">{
       for $x in $w
       return
         <para>{data($x)}</para>
  }</section>
}</chapter>
      ]]></test>
      <result>
        <assert-xml><![CDATA[<chapter><section title="heading1"><para>para1</para><para>para2</para></section><section title="heading2"><para>para3</para><para>para4</para><para>para5</para></section></chapter>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WindowingUseCase03">
      <description> use case 3: Within a glossary in HTML, a defined term &lt;dt> can be followed by a definition &lt;dd>. The task is to group these together within a &lt;term> element, where a group can consist of one or more &lt;dt> elements followed by one or more &lt;dd> elements. </description>
      <created by="Matthias Brantner" on="2011-07-28"/>
      <environment ref="WindowingUseCases03"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
<doc>{
for tumbling window $w in ./doc/*
  start $x when $x[self::dt]
  end $y next $z when $y[self::dd] and $z[self::dt]
return
  <term>{
    $w
  }</term>
}</doc>
      ]]></test>
      <result>
        <assert-xml><![CDATA[<doc><term><dt>XML</dt><dd>Extensible Markup Language</dd></term><term><dt>XSLT</dt><dt>XSL Transformations</dt><dd>A language for transforming XML</dd><dd>A specification produced by W3C</dd></term></doc>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WindowingUseCase03S">
      <description> use case 3: Within a glossary in HTML, a defined term &lt;dt> can be followed by a definition &lt;dd>. The task is to group these together within a &lt;term> element, where a group can consist of one or more &lt;dt> elements followed by one or more &lt;dd> elements. </description>
      <created by="Matthias Brantner" on="2011-07-28"/>
      <environment ref="WindowingUseCases03S"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
<doc>{
for tumbling window $w in ./doc/*
  start $x when $x[self::dt]
  end $y next $z when $y[self::dd] and $z[self::dt]
return
  <term>{
    $w
  }</term>
}</doc>
      ]]></test>
      <result>
        <assert-xml><![CDATA[<doc><term><dt>XML</dt><dd>Extensible Markup Language</dd></term><term><dt>XSLT</dt><dt>XSL Transformations</dt><dd>A language for transforming XML</dd><dd>A specification produced by W3C</dd></term></doc>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WindowingUseCase04">
      <description> use case 4: Calculate the moving average of temperature values for the 3 last seconds. </description>
      <created by="Matthias Brantner" on="2011-07-28"/>
      <environment ref="WindowingUseCases04"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
let $MAX_DIFF := 2

for sliding window $w in ./stream/event
  start  $s_curr at $s_pos previous $s_prev
    when ($s_curr/@time ne $s_prev/@time) or (empty($s_prev))
  only end next $e_next
    when $e_next/@time - $s_curr/@time gt $MAX_DIFF
return
  avg( $w/@temp )
      ]]></test>
      <result>
         <assert-xml><![CDATA[8 9 17 18]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WindowingUseCase04S">
      <description> use case 4: Calculate the moving average of temperature values for the 3 last seconds. </description>
      <created by="Matthias Brantner" on="2011-07-28"/>
      <environment ref="WindowingUseCases04S"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
let $MAX_DIFF := 2

for sliding window $w in ./stream/event
  start  $s_curr at $s_pos previous $s_prev
    when ($s_curr/@time ne $s_prev/@time) or (empty($s_prev))
  only end next $e_next
    when $e_next/@time - $s_curr/@time gt $MAX_DIFF
return
  avg( $w/@temp )
      ]]></test>
      <result>
         <assert-xml><![CDATA[8 9 17 18]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WindowingUseCase05">
      <description> use case 5: Single exponential smoothing (3 last values and smoothing factor 0.2) </description>
      <created by="Matthias Brantner" on="2011-07-28"/>
      <environment ref="WindowingUseCases04"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
let $SMOOTH_CONST := 0.2

for sliding window $w in ./stream/event
  start at $s_pos when true()
  only end at $e_pos when $e_pos - $s_pos eq 2
return
  round-half-to-even($SMOOTH_CONST * data($w[3]/@temp) + (1 - $SMOOTH_CONST) *
    ( $SMOOTH_CONST * data($w[2]/@temp) +
      (1 - $SMOOTH_CONST) * data($w[1]/@temp) ), 2)
      ]]></test>
      <result>
        <assert-xml><![CDATA[8.88 8.68 12.32 15.24 23.92]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WindowingUseCase05S">
      <description> use case 5: Single exponential smoothing (3 last values and smoothing factor 0.2) </description>
      <created by="Matthias Brantner" on="2011-07-28"/>
      <environment ref="WindowingUseCases04S"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
let $SMOOTH_CONST := 0.2

for sliding window $w in ./stream/event
  start at $s_pos when true()
  only end at $e_pos when $e_pos - $s_pos eq 2
return
  round-half-to-even($SMOOTH_CONST * data($w[3]/@temp) + (1 - $SMOOTH_CONST) *
    ( $SMOOTH_CONST * data($w[2]/@temp) +
      (1 - $SMOOTH_CONST) * data($w[1]/@temp) ), 2)
      ]]></test>
      <result>
        <assert-xml><![CDATA[8.88 8.68 12.32 15.24 23.92]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WindowingUseCase06">
      <description> use case 6: Detect outliers (current value is two times higher (lower) than the average of the previous three values) in a sequence of temp values.  </description>
      <created by="Matthias Brantner" on="2011-07-28"/>
      <environment ref="WindowingUseCases04"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
for sliding window $w in ./stream/event
  start  $s_curr when fn:true()
  only end next $next when $next/@time > $s_curr/@time + 3
return
  let $avg := fn:avg($w/@temp)
  where $avg * 2 lt xs:double($next/@temp) or $avg div 2 gt xs:double($next/@temp)
  return <alarm>Outlier detected. Event id:{data($next/@time)}</alarm>
      ]]></test>
      <result>
        <assert-xml><![CDATA[<alarm>Outlier detected. Event id:5</alarm>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WindowingUseCase06S">
      <description> use case 6: Detect outliers (current value is two times higher (lower) than the average of the previous three values) in a sequence of temp values.  </description>
      <created by="Matthias Brantner" on="2011-07-28"/>
      <environment ref="WindowingUseCases04S"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
for sliding window $w in ./stream/event
  start  $s_curr when fn:true()
  only end next $next when $next/@time > $s_curr/@time + 3
return
  let $avg := fn:avg($w/@temp)
  where $avg * 2 lt xs:double($next/@temp) or $avg div 2 gt xs:double($next/@temp)
  return <alarm>Outlier detected. Event id:{data($next/@time)}</alarm>
      ]]></test>
      <result>
        <assert-xml><![CDATA[<alarm>Outlier detected. Event id:5</alarm>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WindowingUseCase07">
      <description> use case 7: Notify when Barbara enters the building within 1 hour after Anton </description>
      <created by="Matthias Brantner" on="2011-07-28"/>
      <environment ref="WindowingUseCases05"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
<result>{
  for tumbling window $w in ./stream/event
    start  $s when $s/person eq "Anton" and $s/direction eq "in"
    only end $e next $n when  xs:dateTime($n/@time) - xs:dateTime($s/@time) gt
      xs:dayTimeDuration("PT1H")
      or  ($e/person eq "Barbara" and $e/direction eq "in")
      or ($e/person eq "Anton" and $e/direction eq "out")
  where $e/person eq "Barbara" and $e/direction eq "in"
  return
    <warning time="{ $e/@time }">Barbara: Anton arrived 1h ago</warning>
}</result>
      ]]></test>
      <result>
        <assert-xml><![CDATA[<result><warning time="2006-01-01T11:00:00-00:00">Barbara: Anton arrived 1h ago</warning></result>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WindowingUseCase07S">
      <description> use case 7: Notify when Barbara enters the building within 1 hour after Anton </description>
      <created by="Matthias Brantner" on="2011-07-28"/>
      <modified by="O'Neil Delpratt" on="2013-06-05" change="Added schemeImport dependency. See bug issue #21238" />
      <environment ref="WindowingUseCases05S"/>
      <dependency type="spec" value="XQ30+"/>
      <dependency type="feature" value="schemaImport"/>
      <test><![CDATA[
<result>{
  for tumbling window $w in ./stream/event
    start  $s when $s/person eq "Anton" and $s/direction eq "in"
    only end $e next $n when  xs:dateTime($n/@time) - xs:dateTime($s/@time) gt
      xs:dayTimeDuration("PT1H")
      or  ($e/person eq "Barbara" and $e/direction eq "in")
      or ($e/person eq "Anton" and $e/direction eq "out")
  where $e/person eq "Barbara" and $e/direction eq "in"
  return
    <warning time="{ $e/@time }">Barbara: Anton arrived 1h ago</warning>
}</result>
      ]]></test>
      <result>
        <assert-xml><![CDATA[<result><warning time="2006-01-01T11:00:00Z">Barbara: Anton arrived 1h ago</warning></result>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WindowingUseCase08">
      <description> use case 8: Measure the working time of each person </description>
      <created by="Matthias Brantner" on="2011-07-28"/>
      <environment ref="WindowingUseCases05"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
<result>{
for sliding window $w in ./stream/event
  start  $s when $s/direction eq "in"
  only end  $e when $s/person eq $e/person and
    $e/direction eq "out"
return
  <working-time>
      {$s/person}
      <time>{ xs:dateTime($e/@time) - xs:dateTime($s/@time)}</time>
  </working-time>
}</result>
      ]]></test>
      <result>
        <assert-xml><![CDATA[<result><working-time><person>Anton</person><time>PT4H30M</time></working-time><working-time><person>Barbara</person><time>PT3H</time></working-time><working-time><person>Clara</person><time>PT1H</time></working-time><working-time><person>Anton</person><time>PT5H</time></working-time><working-time><person>Clara</person><time>PT10M</time></working-time><working-time><person>Clara</person><time>PT5M</time></working-time><working-time><person>Clara</person><time>PT15M</time></working-time><working-time><person>Clara</person><time>PT2H15M</time></working-time></result>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WindowingUseCase08S">
      <description> use case 8: Measure the working time of each person </description>
      <created by="Matthias Brantner" on="2011-07-28"/>
      <environment ref="WindowingUseCases05S"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
<result>{
for sliding window $w in ./stream/event
  start  $s when $s/direction eq "in"
  only end  $e when $s/person eq $e/person and
    $e/direction eq "out"
return
  <working-time>
      {$s/person}
      <time>{ xs:dateTime($e/@time) - xs:dateTime($s/@time)}</time>
  </working-time>
}</result>
      ]]></test>
      <result>
        <assert-xml><![CDATA[<result><working-time><person>Anton</person><time>PT4H30M</time></working-time><working-time><person>Barbara</person><time>PT3H</time></working-time><working-time><person>Clara</person><time>PT1H</time></working-time><working-time><person>Anton</person><time>PT5H</time></working-time><working-time><person>Clara</person><time>PT10M</time></working-time><working-time><person>Clara</person><time>PT5M</time></working-time><working-time><person>Clara</person><time>PT15M</time></working-time><working-time><person>Clara</person><time>PT2H15M</time></working-time></result>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WindowingUseCase09">
      <description> use case 9: Measure the overall working time for each person. </description>
      <created by="Matthias Brantner" on="2011-07-28"/>
      <environment ref="WindowingUseCases05"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
<result>{
for sliding window $w in ./stream/event
  start  $s when $s/direction eq "in"
  only end  $e when $s/person eq $e/person and
    $e/direction eq "out"
let $person := $s/person
let $workingTime := xs:dateTime($e/@time) - xs:dateTime($s/@time)
group by $person
order by $person
return
  <working-time>
    <person>{ $person }</person>
    <time>{ sum($workingTime) }</time>
  </working-time>
}</result>
      ]]></test>
      <result>
        <assert-xml><![CDATA[<result><working-time><person>Anton</person><time>PT9H30M</time></working-time><working-time><person>Barbara</person><time>PT3H</time></working-time><working-time><person>Clara</person><time>PT3H45M</time></working-time></result>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WindowingUseCase09S">
      <description> use case 9: Measure the overall working time for each person. </description>
      <created by="Matthias Brantner" on="2011-07-28"/>
      <environment ref="WindowingUseCases05S"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
<result>{
for sliding window $w in ./stream/event
  start  $s when $s/direction eq "in"
  only end  $e when $s/person eq $e/person and
    $e/direction eq "out"
let $person := $s/person
let $workingTime := xs:dateTime($e/@time) - xs:dateTime($s/@time)
group by $person
order by $person
return
  <working-time>
    <person>{ $person }</person>
    <time>{ sum($workingTime) }</time>
  </working-time>
}</result>
      ]]></test>
      <result>
        <assert-xml><![CDATA[<result><working-time><person>Anton</person><time>PT9H30M</time></working-time><working-time><person>Barbara</person><time>PT3H</time></working-time><working-time><person>Clara</person><time>PT3H45M</time></working-time></result>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WindowingUseCase10">
      <description> use case 10: Display a warning if Barbara does not come to work. </description>
      <created by="Matthias Brantner" on="2011-07-28"/>
      <environment ref="WindowingUseCases05"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
<result>{
  for tumbling window $w in ./stream/event[direction eq "in"]
    start  $s when fn:true()
    end next $e when xs:date( xs:dateTime($s/@time) ) ne xs:date( xs:dateTime($e/@time) )
  let $date := xs:date(xs:dateTime($s/@time))
  where not($w[person eq "Barbara"])
  return <alert date="{ $date }">Barbara did not come to work</alert>
}</result>
      ]]></test>
      <result>
        <assert-xml><![CDATA[<result><alert date="2006-01-02Z">Barbara did not come to work</alert></result>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WindowingUseCase10S">
      <description> use case 10: Display a warning if Barbara does not come to work. </description>
      <created by="Matthias Brantner" on="2011-07-28"/>
      <environment ref="WindowingUseCases05S"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
<result>{
  for tumbling window $w in ./stream/event[direction eq "in"]
    start  $s when fn:true()
    end next $e when xs:date( xs:dateTime($s/@time) ) ne xs:date( xs:dateTime($e/@time) )
  let $date := xs:date(xs:dateTime($s/@time))
  where not($w[person eq "Barbara"])
  return <alert date="{ $date }">Barbara did not come to work</alert>
}</result>
      ]]></test>
      <result>
        <assert-xml><![CDATA[<result><alert date="2006-01-02Z">Barbara did not come to work</alert></result>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WindowingUseCase11">
      <description> use case 11: Identify every person who enters the building before Clara withing a 15 minute timeframe (Clara's arrival time - 15 minutes). </description>
      <created by="Matthias Brantner" on="2011-07-28"/>
      <environment ref="WindowingUseCases05"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
<results>{
  for tumbling window $w in ./stream/event[direction eq "in"]
    start when true()
    only end next $x when  $x/person eq "Clara"
  return
    <result time="{ $x/@time }">{
      distinct-values(for $y in $w
        where (xs:dateTime($y/@time) + xs:dayTimeDuration("PT15M") ) ge xs:dateTime($x/@time)
        return $y/person)
    }</result>
}</results>
      ]]></test>
      <result>
        <assert-xml><![CDATA[<results><result time="2006-01-01T11:15:00-00:00">Barbara</result><result time="2006-01-02T12:00:00-00:00"/><result time="2006-01-02T12:15:00-00:00">Clara</result><result time="2006-01-02T12:25:00-00:00">Clara</result><result time="2006-01-02T14:00:00-00:00"/></results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WindowingUseCase11S">
      <description> use case 11: Identify every person who enters the building before Clara withing a 15 minute timeframe (Clara's arrival time - 15 minutes). </description>
      <created by="Matthias Brantner" on="2011-07-28"/>
      <modified by="O'Neil Delpratt" on="2013-06-05" change="Added schemeImport dependency. See bug issue #21238" />
      <environment ref="WindowingUseCases05S"/>
      <dependency type="spec" value="XQ30+"/>
      <dependency type="feature" value="schemaImport"/>
      <test><![CDATA[
<results>{
  for tumbling window $w in ./stream/event[direction eq "in"]
    start when true()
    only end next $x when  $x/person eq "Clara"
  return
    <result time="{ $x/@time }">{
      distinct-values(for $y in $w
        where (xs:dateTime($y/@time) + xs:dayTimeDuration("PT15M") ) ge xs:dateTime($x/@time)
        return $y/person)
    }</result>
}</results>
      ]]></test>
      <result>
        <assert-xml><![CDATA[<results><result time="2006-01-01T11:15:00Z">Barbara</result><result time="2006-01-02T12:00:00Z"/><result time="2006-01-02T12:15:00Z">Clara</result><result time="2006-01-02T12:25:00Z">Clara</result><result time="2006-01-02T14:00:00Z"/></results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WindowingUseCase12">
      <description> use case 12: Notify when both Anton and Barbara enter the office within 30 minutes of one another.</description>
      <created by="Matthias Brantner" on="2011-07-28"/>
      <environment ref="WindowingUseCases05"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
<result>{
        for tumbling window $w in ./stream/event[direction eq "in"]
                start  $x when $x/person = ("Barbara", "Anton")
                end next $y when xs:dateTime($y/@time) - xs:dateTime($x/@time) gt xs:dayTimeDuration("PT30M")
        where $w[person eq "Anton"] and $w[person eq "Barbara"]
        return
                <alert time="{ xs:dateTime($y/@time) }">Anton and Barbara just arrived</alert>
}</result>
      ]]></test>
      <result>
        <assert-xml><![CDATA[<result><alert time="2006-01-01T11:15:00Z">Anton and Barbara just arrived</alert></result>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WindowingUseCase12S">
      <description> use case 12: Notify when both Anton and Barbara enter the office within 30 minutes of one another.</description>
      <created by="Matthias Brantner" on="2011-07-28"/>
      <environment ref="WindowingUseCases05S"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
<result>{
        for tumbling window $w in ./stream/event[direction eq "in"]
                start  $x when $x/person = ("Barbara", "Anton")
                end next $y when xs:dateTime($y/@time) - xs:dateTime($x/@time) gt xs:dayTimeDuration("PT30M")
        where $w[person eq "Anton"] and $w[person eq "Barbara"]
        return
                <alert time="{ xs:dateTime($y/@time) }">Anton and Barbara just arrived</alert>
}</result>
      ]]></test>
      <result>
        <assert-xml><![CDATA[<result><alert time="2006-01-01T11:15:00Z">Anton and Barbara just arrived</alert></result>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WindowingUseCase13">
      <description> use case 13: Inform when a person enters the building at least 3 times within 1 hour </description>
      <created by="Matthias Brantner" on="2011-07-28"/>
      <environment ref="WindowingUseCases05"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
<result>{
  for sliding window $w in ./stream/event
    start  $s when true()
    end next $e when xs:dateTime($e/@time) - xs:dateTime($s/@time) gt
      xs:dayTimeDuration("PT1H")
  where count($w[person eq $s/person and direction eq "in"]) ge 3
  return
    <alert time="{ $e/@time }">{fn:data($s/person)} is suspicious</alert>
}</result>
      ]]></test>
      <result>
        <assert-xml><![CDATA[<result><alert time="2006-01-02T14:00:00-00:00">Clara is suspicious</alert></result>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WindowingUseCase13S">
      <description> use case 13: Inform when a person enters the building at least 3 times within 1 hour </description>
      <created by="Matthias Brantner" on="2011-07-28"/>
      <modified by="O'Neil Delpratt" on="2013-06-05" change="Added schemeImport dependency. See bug issue #21238" />
      <environment ref="WindowingUseCases05S"/>
      <dependency type="spec" value="XQ30+"/>
      <dependency type="feature" value="schemaImport"/>
      <test><![CDATA[
<result>{
  for sliding window $w in ./stream/event
    start  $s when true()
    end next $e when xs:dateTime($e/@time) - xs:dateTime($s/@time) gt
      xs:dayTimeDuration("PT1H")
  where count($w[person eq $s/person and direction eq "in"]) ge 3
  return
    <alert time="{ $e/@time }">{fn:data($s/person)} is suspicious</alert>
}</result>
      ]]></test>
      <result>
        <assert-xml><![CDATA[<result><alert time="2006-01-02T14:00:00Z">Clara is suspicious</alert></result>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WindowingUseCase14">
      <description> use case 14: Find all annoying authors who have posted three consecutive items in the RSS feed. </description>
      <created by="Matthias Brantner" on="2011-07-28"/>
      <environment ref="WindowingUseCases06"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
<result>{
  for tumbling window $w in ./rss/channel/item
    start  $first when fn:true()
    end next $lookAhead when $first/author ne $lookAhead/author
  where count($w) ge 3
  return <annoying-author>{
      $w[1]/author
    }</annoying-author>
}</result>
      ]]></test>
      <result>
        <assert-xml><![CDATA[<result><annoying-author><author>rokas@e-mail.de</author></annoying-author></result>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WindowingUseCase14S">
      <description> use case 14: Find all annoying authors who have posted three consecutive items in the RSS feed. </description>
      <created by="Matthias Brantner" on="2011-07-28"/>
      <environment ref="WindowingUseCases06S"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
<result>{
  for tumbling window $w in ./rss/channel/item
    start  $first when fn:true()
    end next $lookAhead when $first/author ne $lookAhead/author
  where count($w) ge 3
  return <annoying-author>{
      $w[1]/author
    }</annoying-author>
}</result>
      ]]></test>
      <result>
        <assert-xml><![CDATA[<result><annoying-author><author>rokas@e-mail.de</author></annoying-author></result>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WindowingUseCase15">
      <description> use case 15: Every day, provide a list of interesting topics in the RSS feed. In our example, interesting means that the title of the item contains the specific word XQuery. </description>
      <created by="Matthias Brantner" on="2011-07-28"/>
      <environment ref="WindowingUseCases06"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
<result>{
  for tumbling window $w in ./rss/channel/item
    start  $s_curr when true()
    end next $e_next when
      fn:day-from-dateTime(xs:dateTime($e_next/pubDate)) ne
      fn:day-from-dateTime(xs:dateTime($s_curr/pubDate))
  return
    <item>
        <date>{xs:date(xs:dateTime($s_curr/pubDate))}</date>
        {  for $item in $w
                   where fn:contains( xs:string($item/title), 'XQuery')
                   return $item/title   }
      </item>
}</result>
      ]]></test>
      <result>
        <assert-xml><![CDATA[<result><item><date>2003-06-03</date><title>Extending XQuery with Window Functions</title><title>XQueryP: A new programming language is born</title></item><item><date>2003-06-04</date></item></result>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WindowingUseCase15S">
      <description> use case 15: Every day, provide a list of interesting topics in the RSS feed. In our example, interesting means that the title of the item contains the specific word XQuery. </description>
      <created by="Matthias Brantner" on="2011-07-28"/>
      <environment ref="WindowingUseCases06S"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
<result>{
  for tumbling window $w in ./rss/channel/item
    start  $s_curr when true()
    end next $e_next when
      fn:day-from-dateTime(xs:dateTime($e_next/pubDate)) ne
      fn:day-from-dateTime(xs:dateTime($s_curr/pubDate))
  return
    <item>
        <date>{xs:date(xs:dateTime($s_curr/pubDate))}</date>
        {  for $item in $w
                   where fn:contains( xs:string($item/title), 'XQuery')
                   return $item/title   }
      </item>
}</result>
      ]]></test>
      <result>
        <assert-xml><![CDATA[<result><item><date>2003-06-03</date><title>Extending XQuery with Window Functions</title><title>XQueryP: A new programming language is born</title></item><item><date>2003-06-04</date></item></result>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WindowingUseCase16">
      <description> use case 16: Every day, provide a summary of the RSS feed grouped by author. </description>
      <created by="Matthias Brantner" on="2011-07-28"/>
      <environment ref="WindowingUseCases06"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
<result>{
  for tumbling window $w in ./rss/channel/item
    start  $s_curr when true()
    end next $e_next when
      fn:day-from-dateTime(xs:dateTime($e_next/pubDate)) ne
      fn:day-from-dateTime(xs:dateTime($s_curr/pubDate))
  return
    <item>
      <date>{xs:date(xs:dateTime($s_curr/pubDate))}</date>
       {  for $a in fn:distinct-values($w/author)
           return
             <author name="{$a}">
               <titles>
                 { $w[author eq $a]/title }
               </titles>
             </author>
            }
          </item>
}</result>
      ]]></test>
      <result>
        <assert-xml><![CDATA[<result><item><date>2003-06-03</date><author name="rokas@e-mail.de"><titles><title>Why use cases are important Part 1.</title><title>Why use cases are important Part 2.</title><title>Why use cases are important Part 3.</title></titles></author><author name="tim@e-mail.de"><titles><title>Extending XQuery with Window Functions</title></titles></author><author name="david@e-mail.de"><titles><title>XQueryP: A new programming language is born</title></titles></author></item><item><date>2003-06-04</date><author name="rokas@e-mail.de"><titles><title>Why use cases are annoying to write.</title></titles></author></item></result>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WindowingUseCase16S">
      <description> use case 16: Every day, provide a summary of the RSS feed grouped by author. </description>
      <created by="Matthias Brantner" on="2011-07-28"/>
      <environment ref="WindowingUseCases06S"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
<result>{
  for tumbling window $w in ./rss/channel/item
    start  $s_curr when true()
    end next $e_next when
      fn:day-from-dateTime(xs:dateTime($e_next/pubDate)) ne
      fn:day-from-dateTime(xs:dateTime($s_curr/pubDate))
  return
    <item>
      <date>{xs:date(xs:dateTime($s_curr/pubDate))}</date>
       {  for $a in fn:distinct-values($w/author)
           return
             <author name="{$a}">
               <titles>
                 { $w[author eq $a]/title }
               </titles>
              </author>
            }
          </item>
}</result>
      ]]></test>
      <result>
        <assert-xml><![CDATA[<result><item><date>2003-06-03</date><author name="rokas@e-mail.de"><titles><title>Why use cases are important Part 1.</title><title>Why use cases are important Part 2.</title><title>Why use cases are important Part 3.</title></titles></author><author name="tim@e-mail.de"><titles><title>Extending XQuery with Window Functions</title></titles></author><author name="david@e-mail.de"><titles><title>XQueryP: A new programming language is born</title></titles></author></item><item><date>2003-06-04</date><author name="rokas@e-mail.de"><titles><title>Why use cases are annoying to write.</title></titles></author></item></result>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WindowingUseCase17">
      <description> use case 17: At the end of a day, list the most valuable customers. </description>
      <created by="Matthias Brantner" on="2011-07-28"/>
      <environment ref="WindowingUseCases07"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
<result>{
for sliding window $w in ./sequence/*
  start  $cur previous $prev
   when day-from-dateTime($cur/@date) ne day-from-dateTime($prev/@date) or empty($prev)
  end $end next $next
   when day-from-dateTime(xs:dateTime($end/@date)) ne
day-from-dateTime(xs:dateTime($next/@date))
return
  <mostValuableCustomer endOfDay="{xs:dateTime($cur/@date)}">{
    let $companies :=   for $x in distinct-values($w/@billTo )
                        return <amount company="{$x}">{sum($w[@billTo eq $x]/@total)}</amount>
    let $max := max($companies)
    for $company in $companies
    where $company eq xs:untypedAtomic($max)
    return $company
  }</mostValuableCustomer>
}</result>
      ]]></test>
      <result>
        <assert-xml><![CDATA[<result><mostValuableCustomer endOfDay="2006-01-01T00:00:00Z"><amount company="ACME1">1100</amount></mostValuableCustomer><mostValuableCustomer endOfDay="2006-01-02T00:00:00Z"><amount company="ACME1">10000</amount></mostValuableCustomer><mostValuableCustomer endOfDay="2006-01-03T00:00:00Z"/><mostValuableCustomer endOfDay="2006-01-04T00:00:00Z"/><mostValuableCustomer endOfDay="2006-01-05T00:00:00Z"/><mostValuableCustomer endOfDay="2006-01-06T00:00:00Z"><amount company="ACME2">100</amount></mostValuableCustomer><mostValuableCustomer endOfDay="2006-01-07T00:00:00Z"/></result>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WindowingUseCase17S">
      <description> use case 17: At the end of a day, list the most valuable customers. </description>
      <created by="Matthias Brantner" on="2011-07-28"/>
      <environment ref="WindowingUseCases07S"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
<result>{
for sliding window $w in ./sequence/*
  start  $cur previous $prev
   when day-from-dateTime($cur/@date) ne day-from-dateTime($prev/@date) or empty($prev)
  end $end next $next
   when day-from-dateTime(xs:dateTime($end/@date)) ne
day-from-dateTime(xs:dateTime($next/@date))
return
  <mostValuableCustomer endOfDay="{xs:dateTime($cur/@date)}">{
    let $companies :=   for $x in distinct-values($w/@billTo )
                        return <amount company="{$x}">{sum($w[@billTo eq $x]/@total)}</amount>
    let $max := max($companies)
    for $company in $companies
    where $company eq xs:untypedAtomic($max)
    return $company
  }</mostValuableCustomer>
}</result>
      ]]></test>
      <result>
        <assert-xml><![CDATA[<result><mostValuableCustomer endOfDay="2006-01-01T00:00:00Z"><amount company="ACME1">1100</amount></mostValuableCustomer><mostValuableCustomer endOfDay="2006-01-02T00:00:00Z"><amount company="ACME1">10000</amount></mostValuableCustomer><mostValuableCustomer endOfDay="2006-01-03T00:00:00Z"/><mostValuableCustomer endOfDay="2006-01-04T00:00:00Z"/><mostValuableCustomer endOfDay="2006-01-05T00:00:00Z"/><mostValuableCustomer endOfDay="2006-01-06T00:00:00Z"><amount company="ACME2">100</amount></mostValuableCustomer><mostValuableCustomer endOfDay="2006-01-07T00:00:00Z"/></result>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WindowingUseCase18">
      <description> use case 18: Calculate the time needed to process an order from the request up to the shipping. </description>
      <created by="Matthias Brantner" on="2011-07-28"/>
      <environment ref="WindowingUseCases07"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
<result>{
  for sliding window $w in ./sequence/*
    start $s when $s[self::OrderRequest]
    end   $e when $e/@orderID eq  $s/@orderID
             and ($e[self::ConfirmationRequest] and $e/@status eq "reject"
                  or $e[self::ShipNotice])
  where $e[self::ShipNotice]
  return
    <timeToShip orderID="{ $s/@orderID}">{xs:dateTime($e/@date) - xs:dateTime($s/@date) }</timeToShip>
}</result>
      ]]></test>
      <result>
        <assert-xml><![CDATA[<result><timeToShip orderID="OID01">P3DT22H</timeToShip><timeToShip orderID="OID03">P2DT19H</timeToShip></result>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WindowingUseCase18S">
      <description> use case 18: Calculate the time needed to process an order from the request up to the shipping. </description>
      <created by="Matthias Brantner" on="2011-07-28"/>
      <environment ref="WindowingUseCases07S"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
<result>{
  for sliding window $w in ./sequence/*
    start $s when $s[self::OrderRequest]
    end   $e when $e/@orderID eq  $s/@orderID
             and ($e[self::ConfirmationRequest] and $e/@status eq "reject"
                  or $e[self::ShipNotice])
  where $e[self::ShipNotice]
  return
    <timeToShip orderID="{ $s/@orderID}">{xs:dateTime($e/@date) - xs:dateTime($s/@date) }</timeToShip>
}</result>
      ]]></test>
      <result>
        <assert-xml><![CDATA[<result><timeToShip orderID="OID01">P3DT22H</timeToShip><timeToShip orderID="OID03">P2DT19H</timeToShip></result>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WindowingUseCase19">
      <description> use case 19: At the moment of the shipping notification, calculate if an open request exists that can be shipped to the same address. </description>
      <created by="Matthias Brantner" on="2011-07-28"/>
      <modified by="O'Neil Delpratt, Saxonica" on="2012-09-26" change="Added whitespace in expected result"/>
      <environment ref="WindowingUseCases07"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
<result>{
  for sliding window $w in ./sequence/*
    start previous $wSPrev when $wSPrev[self::OrderRequest]
    end next $wENext when $wENext/@orderID eq  $wSPrev/@orderID
        and ($wENext[self::ConfirmationRequest] and $wENext/@status eq "reject"
                 or $wENext[self::ShipNotice])
  where $wENext[self::ShipNotice]
  return
    <bundleWith orderId="{$wSPrev/@orderID}">{
        for sliding window $bundle in $w
          start  $bSCur
            when $bSCur[self::OrderRequest] and $bSCur/@shipTo eq $wSPrev/@shipTo
          end  $bECur next $bENext
            when $bECur/@orderID eq  $bSCur/@orderID
             and ($bECur[self::ConfirmationRequest] and $bECur/@status eq "reject"
              or $bECur[self::ShipNotice])
          where empty($bENext)
          return $bSCur
    }</bundleWith>
}</result>
      ]]></test>
      <result>
        <assert-xml><![CDATA[<result><bundleWith orderId="OID01"><OrderRequest billTo="ACME1" date="2006-01-02T14:00:00-00:00" orderID="OID03" shipTo="ACME1" total="10000" type="new">
    <Item partID="ID3" quantity="100" unitPrice="100"/>
  </OrderRequest></bundleWith><bundleWith orderId="OID03"/></result>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="WindowingUseCase19S">
      <description> use case 19: At the moment of the shipping notification, calculate if an open request exists that can be shipped to the same address. </description>
      <created by="Matthias Brantner" on="2011-07-28"/>
      <modified by="O'Neil Delpratt" on="2012-09-26" change="Added whitespace in expected result - see bug 18991"/>
      <modified by="Michael Kay" on="2013-01-21" change="Avoid assert-xml to get rid of whitespace issues - see bug 20662"/>
      <environment ref="WindowingUseCases07S"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
<result>{
  for sliding window $w in ./sequence/*
    start previous $wSPrev when $wSPrev[self::OrderRequest]
    end next $wENext when $wENext/@orderID eq  $wSPrev/@orderID
        and ($wENext[self::ConfirmationRequest] and $wENext/@status eq "reject"
                 or $wENext[self::ShipNotice])
  where $wENext[self::ShipNotice]
  return
    <bundleWith orderId="{$wSPrev/@orderID}">{
        for sliding window $bundle in $w
          start  $bSCur
            when $bSCur[self::OrderRequest] and $bSCur/@shipTo eq $wSPrev/@shipTo
          end  $bECur next $bENext
            when $bECur/@orderID eq  $bSCur/@orderID
             and ($bECur[self::ConfirmationRequest] and $bECur/@status eq "reject"
              or $bECur[self::ShipNotice])
          where empty($bENext)
          return $bSCur
    }</bundleWith>
}</result>
      ]]></test>
      <result>
        <all-of>
          <assert>$result[self::result/bundleWith[1]/@orderId="OID01"]</assert>
          <assert>$result[self::result/bundleWith[2]/@orderId="OID03"]</assert>
          <assert>empty($result[self::result/bundleWith[3]])</assert>
        </all-of>  
      </result>
   </test-case>
	
    <test-case name="TumblingWindowExpr504">
        <description>Tumbling Window Clause, with errors due to having similar variable names : http://www.w3.org/TR/xquery-30/#ERRXQST0103</description>
        <created by="Benjamin Nguyen" on="2011-07-28"/>
        <modified by="Michael Kay" on="2011-12-30" change="change error code from XPST0103 to XQST0103"/>
        <dependency type="spec" value="XQ30+"/>
        <test>for tumbling window $w in (1, 2, 3, 4) 
      start $s at $ps previous $pps when fn:true()
      only end $s at $ps previous $pps when $ps - $ps eq 1
      return $w</test>
        <result>
                <error code="XQST0103"/>
        </result>
    </test-case>
    
    <test-case name="SlidingWindowExpr504">
        <description>Sliding Window Clause, with errors due to having similar variable names : http://www.w3.org/TR/xquery-30/#ERRXQST0103</description>
        <created by="Benjamin Nguyen" on="2011-07-28"/>
        <modified by="Michael Kay" on="2011-12-30" change="change error code from XPST0103 to XQST0103"/>
        <dependency type="spec" value="XQ30+"/>
        <test>for sliding window $w in (1, 2, 3, 4) 
      start $s at $ps previous $pps when fn:true()
      only end $s at $ps previous $pps when $ps - $ps eq 1
      return $w</test>
        <result>
                <error code="XQST0103"/>
        </result>
    </test-case>
    
    <test-case name="SlidingWindowExpr505">
        <description>Sliding Window Clause, positional variable is integer : http://www.w3.org/TR/xquery-30/#dt-positional-variable</description>
        <created by="Benjamin Nguyen" on="2011-07-28"/>
        <dependency type="spec" value="XQ30+"/>
        <test>for sliding window $w in (1, 2, 3, 4) 
      start at $s when fn:true()
      end at $e  when $s - $e eq 1
      return $s</test>
        <result>
            <assert>$result[1] instance of xs:integer</assert>
        </result>
    </test-case>
    
    <test-case name="TumblingWindowExpr505">
        <description>Sliding Window Clause, positional variable is integer : http://www.w3.org/TR/xquery-30/#dt-positional-variable</description>
        <created by="Benjamin Nguyen" on="2011-07-28"/>
        <dependency type="spec" value="XQ30+"/>
        <test>for tumbling window $w in (1, 2, 3, 4) 
      start at $s when fn:true()
      end at $e  when $s - $e eq 1
      return $s</test>
        <result>
            <assert>$result[1] instance of xs:integer</assert>
        </result>
    </test-case>
    
    <test-case name="SlidingWindowExpr506">
        <description>Sliding Window Clause, windows must be delivered in order of start position</description>
        <created by="Michael Kay" on="2011-08-08"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for sliding window $w in (1, 2, 3, 4, 14, 13, 12, 11) 
          start $s when fn:true()
          only end $e when $e eq $s + 10
          return string-join($w!string(), ' ')
        ]]></test>
        <result>
            <assert-deep-eq>"1 2 3 4 14 13 12 11", "2 3 4 14 13 12", "3 4 14 13", "4 14"</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="SlidingWindowExpr507">
        <description>Sliding Window Clause, effect of type declaration: success case</description>
        <created by="Michael Kay" on="2011-08-08"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for sliding window $w as xs:integer+ in (1, 2, "london", 3, 4, "paris")
          start $start when $start instance of xs:integer
          only end next $beyond when $beyond instance of xs:string
          return string-join($w!string(), ' ')
        ]]></test>
        <result>
            <assert-deep-eq>"1 2", "2", "3 4", "4"</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="TumblingWindowExpr507">
        <description>Tumbling Window Clause, effect of type declaration: success case</description>
        <created by="Michael Kay" on="2011-08-08"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for tumbling window $w as xs:integer+ in (1, 2, "london", 3, 4, "paris")
          start $start when $start instance of xs:integer
          only end next $beyond when $beyond instance of xs:string
          return string-join($w!string(), ' ')
        ]]></test>
        <result>
            <assert-deep-eq>"1 2", "3 4"</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="SlidingWindowExpr508">
        <description>Sliding Window Clause, effect of type declaration: failure case</description>
        <created by="Michael Kay" on="2011-08-08"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for sliding window $w as xs:integer+ in (1, 2, "london", 3, 4.1, "paris")
          start $start when $start instance of xs:integer
          only end next $beyond when $beyond instance of xs:string
          return string-join($w!string(), ' ')
        ]]></test>
        <result>
            <error code="XPTY0004"/>
        </result>
    </test-case>
    
    <test-case name="TumblingWindowExpr508">
        <description>Tumbling Window Clause, effect of type declaration: failure case</description>
        <created by="Michael Kay" on="2011-08-08"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for tumbling window $w as xs:integer+ in (1, 2, "london", 3, 4.1, "paris")
          start $start when $start instance of xs:integer
          only end next $beyond when $beyond instance of xs:string
          return string-join($w!string(), ' ')
        ]]></test>
        <result>
            <error code="XPTY0004"/>
        </result>
    </test-case>
    
    <test-case name="SlidingWindowExpr509">
        <description>Sliding Window Clause, average window size</description>
        <created by="Michael Kay" on="2011-08-08"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
            avg(
              for sliding window $w in (1, 2, "london", 3, 4, "paris")
              start $start when $start instance of xs:integer
              only end next $beyond when $beyond instance of xs:string
              return count($w)
            )
        ]]></test>
        <result>
            <assert-eq>1.5</assert-eq>
        </result>
    </test-case>
    
    <test-case name="TumblingWindowExpr509">
        <description>Tumbling Window Clause, average window size</description>
        <created by="Michael Kay" on="2011-08-08"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          avg(
              for tumbling window $w in (1, 2, "london", 3, 4, "paris")
              start $start when $start instance of xs:integer
              only end next $beyond when $beyond instance of xs:string
              return count($w)
            )
        ]]></test>
        <result>
            <assert-eq>2</assert-eq>
        </result>
    </test-case>
    
    <test-case name="TumblingWindowExpr510">
        <description>Tumbling Window Clause, start end end condition always true</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for tumbling window $w in (1 to 10)
          start $s when true()
          end $e when true()
          return <window>{$w}</window>
        ]]></test>
        <result>
          <assert-xml><![CDATA[<window>1</window><window>2</window><window>3</window><window>4</window><window>5</window><window>6</window><window>7</window><window>8</window><window>9</window><window>10</window>]]></assert-xml>
        </result>
    </test-case>

    <test-case name="SlidingWindowExpr510">
        <description>Sliding Window Clause, start end end condition always true</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for sliding window $w in (1 to 10)
          start $s when true()
          end $e when true()
          return <window>{$w}</window>
        ]]></test>
        <result>
          <assert-xml><![CDATA[<window>1</window><window>2</window><window>3</window><window>4</window><window>5</window><window>6</window><window>7</window><window>8</window><window>9</window><window>10</window>]]></assert-xml>
        </result>
    </test-case>

    <test-case name="TumblingWindowExpr511">
        <description>Tumbling Window Clause, start condition always true, fixed sized ends </description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for tumbling window $w in (1 to 10)
          start $s when true()
          end $e when $e - $s eq 2
          return <window>{$w}</window>
        ]]></test>
        <result>
          <assert-xml><![CDATA[<window>1 2 3</window><window>4 5 6</window><window>7 8 9</window><window>10</window>]]></assert-xml>
        </result>
    </test-case>

    <test-case name="SlidingWindowExpr511">
        <description>Sliding Window Clause, start condition always true, fixed sized ends </description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for sliding window $w in (1 to 10)
          start $s when true()
          end $e when $e - $s eq 2
          return <window>{$w}</window>
        ]]></test>
        <result>
          <assert-xml><![CDATA[<window>1 2 3</window><window>2 3 4</window><window>3 4 5</window><window>4 5 6</window><window>5 6 7</window><window>6 7 8</window><window>7 8 9</window><window>8 9 10</window><window>9 10</window><window>10</window>]]></assert-xml>
        </result>
    </test-case>

    <test-case name="TumblingWindowExpr512">
        <description>Tumbling Window Clause, positional start and end conditions</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for tumbling window $w in (1 to 10)
          start $s at $x when true()
          end $e at $y when $y - $x eq 2
          return <window>{$w}</window>
        ]]></test>
        <result>
          <assert-xml><![CDATA[<window>1 2 3</window><window>4 5 6</window><window>7 8 9</window><window>10</window>]]></assert-xml>
        </result>
    </test-case>

    <test-case name="SlidingWindowExpr512">
        <description>Sliding Window Clause, positional start and end conditions</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for sliding window $w in (1 to 10)
          start $s at $x when true()
          end $e at $y when $y - $x eq 2
          return <window>{$w}</window>
        ]]></test>
        <result>
          <assert-xml><![CDATA[<window>1 2 3</window><window>2 3 4</window><window>3 4 5</window><window>4 5 6</window><window>5 6 7</window><window>6 7 8</window><window>7 8 9</window><window>8 9 10</window><window>9 10</window><window>10</window>]]></assert-xml>
        </result>
    </test-case>

    <test-case name="TumblingWindowExpr513">
        <description>Tumbling Window Clause, positional start and end conditions with only-end clause</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for tumbling window $w in (1 to 10)
          start $s at $x when true()
          only end $e at $y when $y - $x eq 2
          return <window>{$w}</window>
        ]]></test>
        <result>
          <assert-xml><![CDATA[<window>1 2 3</window><window>4 5 6</window><window>7 8 9</window>]]></assert-xml>
        </result>
    </test-case>

    <test-case name="SlidingWindowExpr513">
        <description>Sliding Window Clause, positional start and end conditions with only-end clause</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for sliding window $w in (1 to 10)
          start $s at $x when true()
          only end $e at $y when $y - $x eq 2
          return <window>{$w}</window>
        ]]></test>
        <result>
          <assert-xml><![CDATA[<window>1 2 3</window><window>2 3 4</window><window>3 4 5</window><window>4 5 6</window><window>5 6 7</window><window>6 7 8</window><window>7 8 9</window><window>8 9 10</window>]]></assert-xml>
        </result>
    </test-case>

    <test-case name="TumblingWindowExpr514">
        <description>Tumbling Window Clause, end condition always false with only-end clause</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for tumbling window $w in (1 to 10)
          start $s when true()
          only end $e when false() 
          return <window>{$w}</window>
        ]]></test>
        <result>
          <assert-empty/>
        </result>
    </test-case>

    <test-case name="SlidingWindowExpr514">
        <description>Sliding Window Clause, end condition always false with only-end clause</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for sliding window $w in (1 to 10)
          start $s when true()
          only end $e when false() 
          return <window>{$w}</window>
        ]]></test>
        <result>
          <assert-empty/>
        </result>
    </test-case>

    <test-case name="TumblingWindowExpr515">
        <description>Tumbling Window Clause, end condition always false without only-end clause</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for tumbling window $w in (1 to 10)
          start $s when true()
          end $e when false() 
          return <window>{$w}</window>
        ]]></test>
        <result>
          <assert-xml><![CDATA[<window>1 2 3 4 5 6 7 8 9 10</window>]]></assert-xml>
        </result>
    </test-case>

    <test-case name="SlidingWindowExpr515">
        <description>Sliding Window Clause, end condition always false without only-end clause</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for sliding window $w in (1 to 10)
          start $s when true()
          end $e when false() 
          return <window>{$w}</window>
        ]]></test>
        <result>
          <assert-xml><![CDATA[<window>1 2 3 4 5 6 7 8 9 10</window><window>2 3 4 5 6 7 8 9 10</window><window>3 4 5 6 7 8 9 10</window><window>4 5 6 7 8 9 10</window><window>5 6 7 8 9 10</window><window>6 7 8 9 10</window><window>7 8 9 10</window><window>8 9 10</window><window>9 10</window><window>10</window>]]></assert-xml>
        </result>
    </test-case>

    <test-case name="TumblingWindowExpr516">
        <description>Tumbling Window Clause, prefixed window variable</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          declare namespace window = "foo:bar";
          
          for tumbling window $window:w in (1 to 10)
          start $s when true()
          end $e when false() 
          return <window>{$window:w}</window>
        ]]></test>
        <result>
          <assert-xml><![CDATA[<window>1 2 3 4 5 6 7 8 9 10</window>]]></assert-xml>
        </result>
    </test-case>

    <test-case name="TumblingWindowExpr517">
        <description>Tumbling Window Clause, EQNamed window variable</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
	<modified by="Michael Dyck" on="2012-03-11" change="Revised URIQualifiedName syntax as per bug 15399"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          declare namespace window = "foo:bar";
          
          for tumbling window $Q{foo:bar}w in (1 to 10)
          start $s when true()
          end $e when false() 
          return <window>{$window:w}</window>
        ]]></test>
        <result>
          <assert-xml><![CDATA[<window>1 2 3 4 5 6 7 8 9 10</window>]]></assert-xml>
        </result>
    </test-case>

    <test-case name="SlidingWindowExpr517">
        <description>Sliding Window Clause, EQNamed window variable</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
	<modified by="Michael Dyck" on="2012-03-11" change="Revised URIQualifiedName syntax as per bug 15399"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          declare namespace window = "foo:bar";
          
          for sliding window $Q{foo:bar}w in (1 to 10)
          start $s when true()
          end $e when false() 
          return <window>{$window:w}</window>
        ]]></test>
        <result>
          <assert-xml><![CDATA[<window>1 2 3 4 5 6 7 8 9 10</window><window>2 3 4 5 6 7 8 9 10</window><window>3 4 5 6 7 8 9 10</window><window>4 5 6 7 8 9 10</window><window>5 6 7 8 9 10</window><window>6 7 8 9 10</window><window>7 8 9 10</window><window>8 9 10</window><window>9 10</window><window>10</window>]]></assert-xml>
        </result>
    </test-case>

    <test-case name="TumblingWindowExpr518">
        <description>Tumbling Window Clause, all window variables names are given as EQNames but refered to using QNames</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
	<modified by="Michael Dyck" on="2012-03-11" change="Revised URIQualifiedName syntax as per bug 15399"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          declare namespace w = "foo:bar";
          
          for tumbling window $Q{foo:bar}w in (1 to 10)
          start $Q{foo:bar}s at $Q{foo:bar}x previous $Q{foo:bar}sp next $Q{foo:bar}sn when true()
          end $Q{foo:bar}e at $Q{foo:bar}y previous $Q{foo:bar}ep next $Q{foo:bar}en when false() 
          return <window>{
            string-join (
              for $w:w in ($w:w, $w:s, $w:x, $w:sp, $w:sn, $w:e, $w:y, $w:ep, $w:en)
              return string($w:w), " "
            )}</window>
        ]]></test>
        <result>
          <assert-xml><![CDATA[<window>1 2 3 4 5 6 7 8 9 10 1 1 2 10 10 9</window>]]></assert-xml>
        </result>
    </test-case>
    
    <test-case name="TumblingWindowExpr518a">
        <description>Variant of TumblingWindow518 to run inside an element constructor.
        Tumbling Window Clause, all window variables names are given as EQNames but refered to using QNames</description>
        <created by="Michael Kay" on="2011-12-30"/>
	<modified by="Michael Dyck" on="2012-03-11" change="Revised URIQualifiedName syntax as per bug 15399"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          declare namespace w = "foo:bar";
          <window>{
          	for tumbling window $Q{foo:bar}w in (1 to 10)
          	start $Q{foo:bar}s at $Q{foo:bar}x previous $Q{foo:bar}sp next $Q{foo:bar}sn when true()
          	end $Q{foo:bar}e at $Q{foo:bar}y previous $Q{foo:bar}ep next $Q{foo:bar}en when false() 
          	return 
            	string-join (
              		for $w:w in ($w:w, $w:s, $w:x, $w:sp, $w:sn, $w:e, $w:y, $w:ep, $w:en)
              		return string($w:w), " "
            )
          }</window>
        ]]></test>
        <result>
          <assert-xml><![CDATA[<window>1 2 3 4 5 6 7 8 9 10 1 1 2 10 10 9</window>]]></assert-xml>
        </result>
    </test-case>

    <test-case name="SlidingWindowExpr518">
        <description>Sliding Window Clause, all window variables names are given as EQNames but refered to using QNames</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
	<modified by="Michael Dyck" on="2012-03-11" change="Revised URIQualifiedName syntax as per bug 15399"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          declare namespace w = "foo:bar";
          
          for sliding window $Q{foo:bar}w in (1 to 10)
          start $Q{foo:bar}s at $Q{foo:bar}x previous $Q{foo:bar}sp next $Q{foo:bar}sn when true()
          end $Q{foo:bar}e at $Q{foo:bar}y previous $Q{foo:bar}ep next $Q{foo:bar}en when false() 
          return <window>{
            string-join (
              for $w:w in ($w:w, $w:s, $w:x, $w:sp, $w:sn, $w:e, $w:y, $w:ep, $w:en)
              return string($w:w), " "
            )}</window>
        ]]></test>
        <result>
          <assert-xml><![CDATA[<window>1 2 3 4 5 6 7 8 9 10 1 1 2 10 10 9</window><window>2 3 4 5 6 7 8 9 10 2 2 1 3 10 10 9</window><window>3 4 5 6 7 8 9 10 3 3 2 4 10 10 9</window><window>4 5 6 7 8 9 10 4 4 3 5 10 10 9</window><window>5 6 7 8 9 10 5 5 4 6 10 10 9</window><window>6 7 8 9 10 6 6 5 7 10 10 9</window><window>7 8 9 10 7 7 6 8 10 10 9</window><window>8 9 10 8 8 7 9 10 10 9</window><window>9 10 9 9 8 10 10 10 9</window><window>10 10 10 9 10 10 9</window>]]></assert-xml>
        </result>
    </test-case>

    <test-case name="TumblingWindowExpr519">
        <description>Tumbling Window Clause, window variable not bound in end's when clause</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for tumbling window $w in (1 to 10)
          start $s when true()
          end $e when $e - $w eq 2
          return <window>{$w}</window>
        ]]></test>
        <result>
          <error code="XPST0008"/>
        </result>
    </test-case>

    <test-case name="SlidingWindowExpr519">
        <description>Sliding Window Clause, window variable not bound in end's when clause</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for sliding window $w in (1 to 10)
          start $s when true()
          end $e when $e - $w eq 2
          return <window>{$w}</window>
        ]]></test>
        <result>
          <error code="XPST0008"/>
        </result>
    </test-case>

    <test-case name="TumblingWindowExpr520">
        <description>Tumbling Window Clause, distinct variable name for start variable</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <modified by="Michael Kay" on="2011-12-30" change="change error code from XPST0103 to XQST0103"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for tumbling window $w in (1 to 10)
          start $w when true()
          end $e when false() 
          return <window>{$w}</window>
        ]]></test>
        <result>
          <error code="XQST0103"/>
        </result>
    </test-case>

    <test-case name="TumblingWindowExpr521">
        <description>Tumbling Window Clause, distinc variable name for end variable</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <modified by="Michael Kay" on="2011-12-30" change="change error code from XPST0103 to XQST0103"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for tumbling window $w in (1 to 10)
          start $s when true()
          end $w when false() 
          return <window>{$w}</window>
        ]]></test>
        <result>
          <error code="XQST0103"/>
        </result>
    </test-case>

    <test-case name="TumblingWindowExpr522">
        <description>Tumbling Window Clause, distinct variable name for position start variable</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <modified by="Michael Kay" on="2011-12-30" change="change error code from XPST0103 to XQST0103"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for tumbling window $w in (1 to 10)
          start $s at $w when true()
          end $e when false() 
          return <window>{$w}</window>
        ]]></test>
        <result>
          <error code="XQST0103"/>
        </result>
    </test-case>

    <test-case name="TumblingWindowExpr523">
        <description>Tumbling Window Clause, distinct variable name for position end variable</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <modified by="Michael Kay" on="2011-12-30" change="change error code from XPST0103 to XQST0103"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for tumbling window $w in (1 to 10)
          start $s when true()
          end $e at $w when false() 
          return <window>{$w}</window>
        ]]></test>
        <result>
          <error code="XQST0103"/>
        </result>
    </test-case>

    <test-case name="TumblingWindowExpr524">
        <description>Tumbling Window Clause, distinct variable name for previous start variable</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <modified by="Michael Kay" on="2011-12-30" change="change error code from XPST0103 to XQST0103"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for tumbling window $w in (1 to 10)
          start $s previous $w when true()
          end $e when false() 
          return <window>{$w}</window>
        ]]></test>
        <result>
          <error code="XQST0103"/>
        </result>
    </test-case>

    <test-case name="TumblingWindowExpr525">
        <description>Tumbling Window Clause, distinct variable name for next start variable</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <modified by="Michael Kay" on="2011-12-30" change="change error code from XPST0103 to XQST0103"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for tumbling window $w in (1 to 10)
          start $s next $w when true()
          end $e when false() 
          return <window>{$w}</window>
        ]]></test>
        <result>
          <error code="XQST0103"/>
        </result>
    </test-case>

    <test-case name="TumblingWindowExpr526">
        <description>Tumbling Window Clause, distinct variable name for previous end variable</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <modified by="Michael Kay" on="2011-12-30" change="change error code from XPST0103 to XQST0103"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for tumbling window $w in (1 to 10)
          start $s when true()
          end $e previous $w when false() 
          return <window>{$w}</window>
        ]]></test>
        <result>
          <error code="XQST0103"/>
        </result>
    </test-case>

    <test-case name="TumblingWindowExpr527">
        <description>Tumbling Window Clause, distinct variable name for next end variable</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <modified by="Michael Kay" on="2011-12-30" change="change error code from XPST0103 to XQST0103"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for tumbling window $w in (1 to 10)
          start $s when true()
          end $e next $w when false() 
          return <window>{$w}</window>
        ]]></test>
        <result>
          <error code="XQST0103"/>
        </result>
    </test-case>

    <test-case name="TumblingWindowExpr528">
        <description>Tumbling Window Clause, distinct start and end variables</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <modified by="Michael Kay" on="2011-12-30" change="change error code from XPST0103 to XQST0103"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for tumbling window $w in (1 to 10)
          start $s when true()
          end $s when false() 
          return <window>{$w}</window>
        ]]></test>
        <result>
          <error code="XQST0103"/>
        </result>
    </test-case>

    <test-case name="TumblingWindowExpr529">
        <description>Tumbling Window Clause, all variables are in scope in the following where clause (and have the correct value)</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for tumbling window $w in (1 to 10)
          start $s at $x previous $sp next $sn when true()
          end $e at $y previous $ep next $en when false() 
          where count($w) eq 10 and $x eq 1 and empty($sp) and $sn eq 2 and $e eq 10 and $y eq 10 and $ep eq 9 and empty($en)
          return true()
        ]]></test>
        <result>
          <assert-true/>
        </result>
    </test-case>

    <test-case name="SlidingWindowExpr529">
        <description>Sliding Window Clause, all variables are in scope in the following where clause (and have the correct value)</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for sliding window $w in (1 to 10)
          start $s at $x previous $sp next $sn when true()
          end $e at $y previous $ep next $en when false() 
          where count($w) eq 10 and $x eq 1 and empty($sp) and $sn eq 2 and $e eq 10 and $y eq 10 and $ep eq 9 and empty($en)
          return true()
        ]]></test>
        <result>
          <assert-true/>
        </result>
    </test-case>

    <test-case name="TumblingWindowExpr530">
        <description>Tumbling Window Clause, all variables are in scope in the return clause (and have the correct values which could be the empty sequence)</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for tumbling window $w in ()
          start $s at $x previous $sp next $sn when true()
          end $e at $y previous $ep next $en when false() 
          return ($w, $s, $x, $sp, $sn, $e, $y, $ep, $en)
        ]]></test>
        <result>
          <assert-empty/>
        </result>
    </test-case>

    <test-case name="TumblingWindowExpr531">
        <description>Tumbling Window Clause, start variable in scope in the start when clause</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for tumbling window $w in (2, 4, 6, 8, 10, 12, 14)
          start $first when $first mod 3 = 0
          return <window>{ $w }</window>
        ]]></test>
        <result>
          <assert-xml><![CDATA[<window>6 8 10</window><window>12 14</window>]]></assert-xml>
        </result>
    </test-case>
    
    <test-case name="TumblingWindowExpr531a">
        <description>Variant of TumblingWindowExpr531 in an element constructor.
        Tumbling Window Clause, start variable in scope in the start when clause</description>
        <created by="Michael Kay" on="2011-12-30"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
        <o>{
          for tumbling window $w in (2, 4, 6, 8, 10, 12, 14)
          start $first when $first mod 3 = 0
          return <window>{ $w }</window>
        }</o>  
        ]]></test>
        <result>
          <assert-xml><![CDATA[<o><window>6 8 10</window><window>12 14</window></o>]]></assert-xml>
        </result>
    </test-case>


    <test-case name="TumblingWindowExpr532">
        <description>Tumbling Window Clause, overwriting the window variable</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for $w in (1 to 2)
          for tumbling window $w in (2, 4, 6, 8, 10, 12, 14)
          start $first when $first mod 3 = 0
          return <window>{ $w }</window>
        ]]></test>
        <result>
          <assert-xml><![CDATA[<window>6 8 10</window><window>12 14</window><window>6 8 10</window><window>12 14</window>]]></assert-xml>
        </result>
    </test-case>

    <test-case name="TumblingWindowExpr533">
        <description>Tumbling Window Clause, refer to positional variable of preceding for clause</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for $w at $y in (1 to 2)
          for tumbling window $w in (2, 4, 6, 8, 10, 12, 14)
          start $first when $first mod $y = 0
          return <window>{ $y }</window>
        ]]></test>
        <result>
          <assert-xml><![CDATA[<window>1</window><window>1</window><window>1</window><window>1</window><window>1</window><window>1</window><window>1</window><window>2</window><window>2</window><window>2</window><window>2</window><window>2</window><window>2</window><window>2</window>]]></assert-xml>
        </result>
    </test-case>

    <test-case name="TumblingWindowExpr534">
        <description>Tumbling Window Clause, overwrite all variables of preceding for clauses</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for $x1 in 11
          for $x2 in 12
          for $x3 in 13
          for $x4 in 14
          for $x5 in 15
          for $x6 in 16
          for $x7 in 17
          for $x8 in 18
          for $x9 in 19
          for tumbling window $x1 in (1 to 10)
          start $x2 at $x3 previous $x4 next $x5 when true()
          end $x6 at $x7 previous $x8 next $x9 when false()
          return 
            string-join(
              for $i in ($x1, $x2, $x3, $x4, $x5, $x6, $x7, $x8, $x9)
              return string($i), " "
            )
        ]]></test>
        <result>
          <assert-xml><![CDATA[1 2 3 4 5 6 7 8 9 10 1 1 2 10 10 9]]></assert-xml>
        </result>
    </test-case>

    <test-case name="SlidingWindowExpr534">
        <description>Sliding Window Clause, overwrite all variables of preceding for clauses</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for $x1 in 11
          for $x2 in 12
          for $x3 in 13
          for $x4 in 14
          for $x5 in 15
          for $x6 in 16
          for $x7 in 17
          for $x8 in 18
          for $x9 in 19
          for sliding window $x1 in (1 to 10)
          start $x2 at $x3 previous $x4 next $x5 when true()
          end $x6 at $x7 previous $x8 next $x9 when false()
          return 
            string-join(
              for $i in ($x1, $x2, $x3, $x4, $x5, $x6, $x7, $x8, $x9)
              return string($i), " "
            )
        ]]></test>
        <result>
          <assert-xml><![CDATA[1 2 3 4 5 6 7 8 9 10 1 1 2 10 10 9 2 3 4 5 6 7 8 9 10 2 2 1 3 10 10 9 3 4 5 6 7 8 9 10 3 3 2 4 10 10 9 4 5 6 7 8 9 10 4 4 3 5 10 10 9 5 6 7 8 9 10 5 5 4 6 10 10 9 6 7 8 9 10 6 6 5 7 10 10 9 7 8 9 10 7 7 6 8 10 10 9 8 9 10 8 8 7 9 10 10 9 9 10 9 9 8 10 10 10 9 10 10 10 9 10 10 9]]></assert-xml>
        </result>
    </test-case>

    <test-case name="TumblingWindowExpr535a">
        <description>Tumbling Window Clause, invalid order of previous and next bindings in start condition</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for tumbling window $w in (1 to 10)
          start $s next $sn previous $pn when true()
          return <window>{$w}</window>
        ]]></test>
        <result>
          <error code="XPST0003"/>
        </result>
    </test-case>

    <test-case name="TumblingWindowExpr535b">
        <description>Tumbling Window Clause, invalid order of previous and next bindings in end condition</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for tumbling window $w in (1 to 10)
          end $e next $en previous $en when true()
          return <window>{$w}</window>
        ]]></test>
        <result>
          <error code="XPST0003"/>
        </result>
    </test-case>

    <test-case name="TumblingWindowExpr536">
        <description>Tumbling Window Clause, simple example from the spec</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          let $stock :=
            <stock>
              <closing> <date>2008-01-01</date> <price>105</price> </closing>
              <closing> <date>2008-01-02</date> <price>101</price> </closing>
              <closing> <date>2008-01-03</date> <price>102</price> </closing>
              <closing> <date>2008-01-04</date> <price>103</price> </closing>
              <closing> <date>2008-01-05</date> <price>102</price> </closing>
              <closing> <date>2008-01-06</date> <price>104</price> </closing>
            </stock>
          for tumbling window $w in $stock//closing
             start $first next $second when $first/price < $second/price
             end $last next $beyond when $last/price > $beyond/price
          return
             <run-up>
                <start-date>{fn:data($first/date)}</start-date>
                <start-price>{fn:data($first/price)}</start-price>
                <end-date>{fn:data($last/date)}</end-date>
                <end-price>{fn:data($last/price)}</end-price>
             </run-up>
        ]]></test>
        <result>
          <assert-xml><![CDATA[<run-up><start-date>2008-01-02</start-date><start-price>101</start-price><end-date>2008-01-04</end-date><end-price>103</end-price></run-up><run-up><start-date>2008-01-05</start-date><start-price>102</start-price><end-date>2008-01-06</end-date><end-price>104</end-price></run-up>]]></assert-xml>
        </result>
    </test-case>

    <test-case name="TumblingWindowExpr537">
        <description>Tumbling Window Clause, enumerate windows using count clause</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for tumbling window $w in (1 to 10)
          start $s when true()
          end $e when $e - $s eq 2
          count $r
          return <window num="{$r}">{$w}</window>
        ]]></test>
        <result>
          <assert-xml><![CDATA[<window num="1">1 2 3</window><window num="2">4 5 6</window><window num="3">7 8 9</window><window num="4">10</window>]]></assert-xml>
        </result>
    </test-case>

    <test-case name="TumblingWindowExpr538">
        <description>Tumbling Window Clause, enumerate windows using count clause and filter</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for tumbling window $w in (1 to 10)
          start $s when true()
          end $e when $e - $s eq 2
          count $r
          where $r le 2
          return <window num="{$r}">{$w}</window>
        ]]></test>
        <result>
          <assert-xml><![CDATA[<window num="1">1 2 3</window><window num="2">4 5 6</window>]]></assert-xml>
        </result>
    </test-case>

    <test-case name="SlidingWindowExpr538">
        <description>Sliding Window Clause, enumerate windows using count clause and filter</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for sliding window $w in (1 to 10)
          start $s when true()
          end $e when $e - $s eq 2
          count $r
          where $r le 2
          return <window num="{$r}">{$w}</window>
        ]]></test>
        <result>
          <assert-xml><![CDATA[<window num="1">1 2 3</window><window num="2">2 3 4</window>]]></assert-xml>
        </result>
    </test-case>

    <test-case name="TumblingWindowExpr539">
        <description>Tumbling Window Clause, count clause preceding window clause</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for $i in 1 to 3
          count $r
          for tumbling window $w in (1 to 10)
          start $s when true()
          end $e when $e - $s eq 2
          where $w = $r + 1
          return <window num="{$r}">{$w}</window>
        ]]></test>
        <result>
          <assert-xml><![CDATA[<window num="1">1 2 3</window><window num="2">1 2 3</window><window num="3">4 5 6</window>]]></assert-xml>
        </result>
    </test-case>

    <test-case name="SlidingWindowExpr539">
        <description>Sliding Window Clause, count clause preceding window clause</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for $i in 1 to 3
          count $r
          for sliding window $w in (1 to 10)
          start $s when true()
          end $e when $e - $s eq 2
          where $w = $r + 1
          return <window num="{$r}">{$w}</window>
        ]]></test>
        <result>
          <assert-xml><![CDATA[<window num="1">1 2 3</window><window num="1">2 3 4</window><window num="2">1 2 3</window><window num="2">2 3 4</window><window num="2">3 4 5</window><window num="3">2 3 4</window><window num="3">3 4 5</window><window num="3">4 5 6</window>]]></assert-xml>
        </result>
    </test-case>

    <test-case name="TumblingWindowExpr540">
        <description>Tumbling Window Clause, order by second item in each window</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for tumbling window $w in (1 to 10)
          start $s when true()
          only end $e when $e - $s eq 2
          order by $w[2] descending
          return <window>{$w}</window>
        ]]></test>
        <result>
          <assert-xml><![CDATA[<window>7 8 9</window><window>4 5 6</window><window>1 2 3</window>]]></assert-xml>
        </result>
    </test-case>

    <test-case name="SlidingWindowExpr540">
        <description>Sliding Window Clause, order by second item in each window</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for sliding window $w in (1 to 10)
          start $s when true()
          only end $e when $e - $s eq 2
          order by $w[2] descending
          return <window>{$w}</window>
        ]]></test>
        <result>
          <assert-xml><![CDATA[<window>8 9 10</window><window>7 8 9</window><window>6 7 8</window><window>5 6 7</window><window>4 5 6</window><window>3 4 5</window><window>2 3 4</window><window>1 2 3</window>]]></assert-xml>
        </result>
    </test-case>

    <test-case name="TumblingWindowExpr541">
        <description>Tumbling Window Clause, undeclared window variable because of nested window clause</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for tumbling window $w1 in
            for tumbling window $w2 in (1 to 10)
            start $s when true()
            only end $e when $e - $s eq 2
            return $w2
          start $s when true()
          end $e when $e - $s eq 2
          return <window>{$w2}</window>
        ]]></test>
        <result>
          <error code="XPST0008"/>
        </result>
    </test-case>

    <test-case name="TumblingWindowExpr542">
        <description>Tumbling Window Clause, nested window clause</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for tumbling window $w1 in
            for tumbling window $w2 in (1 to 10)
            start $s when true()
            only end $e when $e - $s eq 2
            return $w2
          start $s when true()
          end $e when $e - $s eq 2
          return <window>{$w1}</window>
        ]]></test>
        <result>
          <assert-xml><![CDATA[<window>1 2 3</window><window>4 5 6</window><window>7 8 9</window>]]></assert-xml>
        </result>
    </test-case>

    <test-case name="TumblingWindowExpr544">
        <description>Tumbling Window Clause, consume each window and order by its components</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for tumbling window $w in (1 to 10)
          start $s when true()
          only end $e when $e - $s eq 2
          count $r
          return
            <window num="{$r}">{
              for $i in $w
              order by $i descending
              return $i
            }</window>
        ]]></test>
        <result>
          <assert-xml><![CDATA[<window num="1">3 2 1</window><window num="2">6 5 4</window><window num="3">9 8 7</window>]]></assert-xml>
        </result>
    </test-case>

    <test-case name="SlidingWindowExpr544">
        <description>Sliding Window Clause, consume each window and order by its components</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for sliding window $w in (1 to 10)
          start $s when true()
          only end $e when $e - $s eq 2
          count $r
          return
            <window num="{$r}">{
              for $i in $w
              order by $i descending
              return $i
            }</window>
        ]]></test>
        <result>
          <assert-xml><![CDATA[<window num="1">3 2 1</window><window num="2">4 3 2</window><window num="3">5 4 3</window><window num="4">6 5 4</window><window num="5">7 6 5</window><window num="6">8 7 6</window><window num="7">9 8 7</window><window num="8">10 9 8</window>]]></assert-xml>
        </result>
    </test-case>

    <test-case name="TumblingWindowExpr545">
        <description>Tumbling Window Clause, window clause after group by (query contained in the spec)</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <modified by="Michael Kay" on="2011-12-30" change="Added alternative result, since order of groups is implementation-dependent"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          let $s := <stocks>
            <closing> <symbol>ABC</symbol> <date>2008-01-01</date> <price>105</price> </closing>
            <closing> <symbol>DEF</symbol> <date>2008-01-01</date> <price>057</price> </closing>
            <closing> <symbol>ABC</symbol> <date>2008-01-02</date> <price>101</price> </closing>
            <closing> <symbol>DEF</symbol> <date>2008-01-02</date> <price>054</price> </closing>
            <closing> <symbol>ABC</symbol> <date>2008-01-03</date> <price>102</price> </closing>
            <closing> <symbol>DEF</symbol> <date>2008-01-03</date> <price>056</price> </closing>
            <closing> <symbol>ABC</symbol> <date>2008-01-04</date> <price>103</price> </closing>
            <closing> <symbol>DEF</symbol> <date>2008-01-04</date> <price>052</price> </closing>
            <closing> <symbol>ABC</symbol> <date>2008-01-05</date> <price>101</price> </closing>
            <closing> <symbol>DEF</symbol> <date>2008-01-05</date> <price>055</price> </closing>
            <closing> <symbol>ABC</symbol> <date>2008-01-06</date> <price>104</price> </closing>
            <closing> <symbol>DEF</symbol> <date>2008-01-06</date> <price>059</price> </closing>
          </stocks>
          for $closings in $s//closing
          let $symbol := $closings/symbol
          group by $symbol
          for tumbling window $w in $closings
             start $first next $second when $first/price < $second/price
             end $last next $beyond when $last/price > $beyond/price
          return
             <run-up symbol="{$symbol}">
                <start-date>{fn:data($first/date)}</start-date>
                <start-price>{fn:data($first/price)}</start-price>
                <end-date>{fn:data($last/date)}</end-date>
                <end-price>{fn:data($last/price)}</end-price>
             </run-up>
        ]]></test>
        <result>
          <any-of>
            <assert-xml><![CDATA[<run-up symbol="ABC"><start-date>2008-01-02</start-date><start-price>101</start-price><end-date>2008-01-04</end-date><end-price>103</end-price></run-up><run-up symbol="ABC"><start-date>2008-01-05</start-date><start-price>101</start-price><end-date>2008-01-06</end-date><end-price>104</end-price></run-up><run-up symbol="DEF"><start-date>2008-01-02</start-date><start-price>054</start-price><end-date>2008-01-03</end-date><end-price>056</end-price></run-up><run-up symbol="DEF"><start-date>2008-01-04</start-date><start-price>052</start-price><end-date>2008-01-06</end-date><end-price>059</end-price></run-up>]]></assert-xml>
            <assert-xml><![CDATA[<run-up symbol="DEF"><start-date>2008-01-02</start-date><start-price>054</start-price><end-date>2008-01-03</end-date><end-price>056</end-price></run-up><run-up symbol="DEF"><start-date>2008-01-04</start-date><start-price>052</start-price><end-date>2008-01-06</end-date><end-price>059</end-price></run-up><run-up symbol="ABC"><start-date>2008-01-02</start-date><start-price>101</start-price><end-date>2008-01-04</end-date><end-price>103</end-price></run-up><run-up symbol="ABC"><start-date>2008-01-05</start-date><start-price>101</start-price><end-date>2008-01-06</end-date><end-price>104</end-price></run-up>]]></assert-xml>          
          </any-of>
        </result>
    </test-case>

    <test-case name="TumblingWindowExpr546">
        <description>Tumbling Window Clause, windowing flwor used in function called window</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          declare function local:window()
          {
            for tumbling window $w in (1 to 10)
            start $s when true()
            end $e when $e - $s eq 3
            return <window>{$w}</window>
          };
          
          local:window()
        ]]></test>
        <result>
          <assert-xml><![CDATA[<window>1 2 3 4</window><window>5 6 7 8</window><window>9 10</window>]]></assert-xml>
        </result>
    </test-case>

    <test-case name="TumblingWindowExpr547">
        <description>Tumbling Window Clause, forbidden TypeDeclaration for positional start variable</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for tumbling window $w in (1 to 10)
          start $s at $x as xs:integer when true()
          end $e when $e - $s eq 3
          return <window>{$w}</window>
        ]]></test>
        <result>
          <error code="XPST0003"/>
        </result>
    </test-case>

    <test-case name="TumblingWindowExpr549">
        <description>Tumbling Window Clause, forbidden type declaration for next variable declaration</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for tumbling window $w in (1 to 10)
          start $s next $sn as xs:integer when true()
          end $e when $e - $s eq 3
          return <window>{$w}</window>
        ]]></test>
        <result>
          <error code="XPST0003"/>
        </result>
    </test-case>

    <test-case name="TumblingWindowExpr550">
        <description>Tumbling Window Clause, wrongly typed window variable</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for tumbling window $w in (1 to 3)
          start when true()
          end when false()
          return <window>{$w}</window>
        ]]></test>
        <result>
          <assert-xml><![CDATA[<window>1 2 3</window>]]></assert-xml>
        </result>
    </test-case>

    <test-case name="SlidingWindowExpr550">
        <description>Sliding Window Clause, wrongly typed window variable</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for sliding window $w in (1 to 3)
          start when true()
          end when false()
          return <window>{$w}</window>
        ]]></test>
        <result>
          <assert-xml><![CDATA[<window>1 2 3</window><window>2 3</window><window>3</window>]]></assert-xml>
        </result>
    </test-case>

    <test-case name="TumblingWindowExpr551">
        <description>Tumbling Window Clause, checking sequence type of value of each window</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for tumbling window $w in (1 to 10)
          start $s when true()
          end $e when $e - $s
          return $w instance of xs:integer
        ]]></test>
        <result>
          <assert-xml><![CDATA[false false false false false]]></assert-xml>
        </result>
    </test-case>

    <test-case name="TumblingWindowExpr552">
        <description>Tumbling Window Clause, binding sequence coming from a parameter</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          declare function local:window($seq)
          {
            for tumbling window $w in $seq
            start $s when true()
            end $e when $e - $s eq 3
            return
            <window>{
              if ($w instance of xs:integer)
              then
                $w
              else
                $s
            }</window>
          };
          
          local:window(1 to 10)
        ]]></test>
        <result>
          <assert-xml><![CDATA[<window>1</window><window>5</window><window>9</window>]]></assert-xml>
        </result>
    </test-case>

    <test-case name="TumblingWindowExpr553">
        <description>Tumbling Window Clause, binding sequence coming from a module global variable</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          declare variable $local:foo as xs:integer* := 1 to 10;
          
          declare function local:window()
          {
            for tumbling window $w in $local:foo
            start $s when true()
            end $e when $e - $s eq 3
            return
            <window>{
              if ($w instance of xs:integer)
              then
                $w
              else
                $s
            }</window>
          };
          
          local:window()
        ]]></test>
        <result>
          <assert-xml><![CDATA[<window>1</window><window>5</window><window>9</window>]]></assert-xml>
        </result>
    </test-case>

    <test-case name="TumblingWindowExpr554">
        <description>Tumbling Window Clause, window over the sequence of a window but both windows used in return</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          declare variable $local:foo as xs:integer* := 1 to 5;
          
          declare function local:window()
          {
            for tumbling window $w1 in $local:foo
            start $s when true()
            end $e when $e - $s eq 3
            for tumbling window $w2 in $w1
            start $s when true()
            end $e when true()
            return
            <window>{
              fn:distinct-values($w1[.=$w2])
            }</window>
          };
          
          local:window()
        ]]></test>
        <result>
          <assert-xml><![CDATA[<window>1</window><window>2</window><window>3</window><window>4</window><window>5</window>]]></assert-xml>
        </result>
    </test-case>

    <test-case name="TumblingWindowExpr555">
        <description>Tumbling Window Clause, false start and end condition</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          declare variable $local:foo as xs:integer* := 1 to 10;
          
          declare function local:window()
          {
            for tumbling window $w in $local:foo
            start $s when false()
            end $e when false()
            return
              <window>{$w}</window>
          };
          
          local:window()
        ]]></test>
        <result>
          <assert-empty/>
        </result>
    </test-case>

    <test-case name="WindowExpr500">
        <description>Window Clause, missing sliding or tumbling</description>
        <created by="Matthias Brantner" on="2011-12-02"/>
        <dependency type="spec" value="XQ30+"/>
        <test><![CDATA[
          for window $w in (1 to 10)
          start $s when true()
          end $e when false() 
          return <window>{$w}</window>
        ]]></test>
        <result>
          <error code="XPST0003"/>
        </result>
    </test-case>

</test-set>
