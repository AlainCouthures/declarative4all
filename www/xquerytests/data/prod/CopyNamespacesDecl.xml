<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="prod-CopyNamespacesDecl">
   <description>Tests for the CopyNamespacesDecl production</description>
   <link type="spec" document="http://www.w3.org/TR/xquery-30/"
         idref="doc-xquery30-CopyNamespacesDecl"/>
   <link type="spec" document="XQuery" section-number="4.9"
         idref="id-copy-namespaces-decl"/>
         
   <dependency type="spec" value="XQ10+"/>         

   <test-case name="copynamespace-1">
      <description> Evaluation of a prolog with more than one copy-namespace declaration. </description>
      <created by="Carmelo Montanez" on="2006-02-06"/>
      <test>declare copy-namespaces preserve, no-inherit; declare copy-namespaces no-preserve, no-inherit; declare variable $input-context1 external; "aaa"</test>
      <result>
         <error code="XQST0055"/>
      </result>
   </test-case>

   <test-case name="copynamespace-2">
      <description> Evaluates that default namespace is overriden by local namespace. </description>
      <created by="Carmelo Montanez" on="2006-03-30"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare copy-namespaces preserve,no-inherit; declare default element namespace "http://example.org/names"; declare variable $input-context1 external; let $new := <newElement xmlns = "http://www.example.com/mynamespace">{element original {"Original Content"}}</newElement> return $new//*]]></test>
      <result>
         <assert-xml><![CDATA[<original xmlns="http://www.example.com/mynamespace">Original Content</original>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="copynamespace-3">
      <description> Evaluates copy namespace declaration with value set to "preserve no-inherit". </description>
      <created by="Carmelo Montanez" on="2006-03-30"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare namespace foo = "http://example.org"; 
        declare copy-namespaces preserve,no-inherit; 
        let $existingElement := <existingElement xmlns="http://www.existingnamespace.com">{"Existing Content"}</existingElement> 
        let $new := <foo:newElement xmlns = "http://www.mynamespace.com">{$existingElement}</foo:newElement> 
        return in-scope-prefixes(exactly-one($new/child::node()))
      ]]></test>
      <result>
         <assert-permutation>"", "xml"</assert-permutation>
      </result>
   </test-case>

   <test-case name="copynamespace-4">
      <description> Evaluates copy namespace declaration with value set to "preserve inherit". </description>
      <created by="Carmelo Montanez" on="2006-03-30"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace foo = "http://example.org"; declare copy-namespaces preserve,inherit; declare variable $input-context1 external; let $existingElement := <existingElement xmlns="http://www.existingnamespace.com">{"Existing Content"}</existingElement> let $new := <foo:newElement xmlns = "http://www.mynamespace.com">{$existingElement}</foo:newElement> for $var in (in-scope-prefixes($new//child::*)) order by exactly-one($var) ascending return $var]]></test>
      <result>
         <assert-string-value> foo xml</assert-string-value>
      </result>
   </test-case>

   <test-case name="copynamespace-5">
      <description> Evaluates copy namespace declaration with value set to "preserve no-inherit" . The copies element use the same prefix. </description>
      <created by="Carmelo Montanez" on="2006-03-30"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace foo = "http://example.org"; declare copy-namespaces preserve,no-inherit; declare variable $input-context1 external; let $existingElement := <foo:existingElement xmlns="http://www.existingnamespace.com">{"Existing Content"}</foo:existingElement> let $new := <foo:newElement xmlns = "http://www.mynamespace.com">{$existingElement}</foo:newElement> for $var in (in-scope-prefixes($new//child::*)) order by exactly-one($var) ascending return $var]]></test>
      <result>
         <assert-string-value> foo xml</assert-string-value>
      </result>
   </test-case>

   <test-case name="copynamespace-6">
      <description> Evaluates copy namespace declaration with value set to "preserve inherit" . The copies element use the same prefix. </description>
      <created by="Carmelo Montanez" on="2006-03-30"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace foo = "http://example.org"; declare copy-namespaces preserve,inherit; declare variable $input-context1 external; let $existingElement := <foo:existingElement xmlns="http://www.existingnamespace.com">{"Existing Content"}</foo:existingElement> let $new := <foo:newElement xmlns = "http://www.mynamespace.com">{$existingElement}</foo:newElement> for $var in (in-scope-prefixes($new//child::*)) order by exactly-one($var) ascending return $var]]></test>
      <result>
         <assert-string-value> foo xml</assert-string-value>
      </result>
   </test-case>

   <test-case name="copynamespace-7">
      <description> Evaluates copy namespace declaration with value set to "no-preserve no-inherit" . Use global variables and namespaces with prefixes. </description>
      <created by="Carmelo Montanez" on="2006-03-30"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare copy-namespaces no-preserve,no-inherit; declare variable $existingElement := <existingElement xmlns:existingNamespace="http://www.existingnamespace.com">{"Existing Content"}</existingElement>; declare variable $new := <newElement xmlns = "http://www.mynamespace.com">{$existingElement}</newElement>; declare variable $input-context1 external; for $var in (in-scope-prefixes($new/existingElement)) order by exactly-one($var )ascending return $var]]></test>
      <result>
         <assert-string-value>xml</assert-string-value>
      </result>
   </test-case>

   <test-case name="copynamespace-8">
      <description> Evaluates copy namespace declaration with value set to "preserve no-inherit" . Use global variables and namespaces with prefixes. </description>
      <created by="Carmelo Montanez" on="2006-03-30"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare copy-namespaces preserve,no-inherit; declare variable $existingElement := <existingElement xmlns:existingNamespace="http://www.existingnamespace.com">{"Existing Content"}</existingElement>; declare variable $new := <newElement xmlns = "http://www.mynamespace.com">{$existingElement}</newElement>; declare variable $input-context1 external; for $var in (in-scope-prefixes($new/existingElement)) order by exactly-one($var) ascending return $var]]></test>
      <result>
         <assert-string-value>existingNamespace xml</assert-string-value>
      </result>
   </test-case>

   <test-case name="copynamespace-9">
      <description> Evaluates copy namespace declaration with value set to "no-preserve inherit" . Use global variables and namespaces with prefixes. </description>
      <created by="Carmelo Montanez" on="2006-03-30"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare copy-namespaces no-preserve,inherit; declare variable $existingElement := <existingElement xmlns:existingNamespace="http://www.existingnamespace.com">{"Existing Content"}</existingElement>; declare variable $new := <newElement xmlns:newNamespace = "http://www.mynamespace.com">{$existingElement}</newElement>; declare variable $input-context1 external; for $var in (in-scope-prefixes($new/existingElement)) order by exactly-one($var) ascending return $var]]></test>
      <result>
         <assert-string-value>newNamespace xml</assert-string-value>
      </result>
   </test-case>

   <test-case name="copynamespace-10">
      <description> Evaluates copy namespace declaration with value set to "preserve inherit" . Use global variables and namespaces with prefixes. </description>
      <created by="Carmelo Montanez" on="2006-03-30"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare copy-namespaces preserve,inherit; declare variable $existingElement := <existingElement xmlns:existingNamespace="http://www.existingnamespace.com">{"Existing Content"}</existingElement>; declare variable $new := <newElement xmlns:newNamespace = "http://www.mynamespace.com">{$existingElement}</newElement>; declare variable $input-context1 external; for $var in (in-scope-prefixes($new/existingElement)) order by exactly-one($var) ascending return $var]]></test>
      <result>
         <assert-string-value>existingNamespace newNamespace xml</assert-string-value>
      </result>
   </test-case>

   <test-case name="copynamespace-11">
      <description> Evaluates copy namespace declaration with value set to "preserve inherit" . Use global variables and namespaces with prefixes. Same prefix different namespace URI. </description>
      <created by="Carmelo Montanez" on="2006-03-30"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare copy-namespaces preserve,inherit; declare variable $existingElement := <existingElement xmlns:existingNamespace="http://www.existingnamespace.com">{"Existing Content"}</existingElement>; declare variable $new := <newElement xmlns:existingNamespace = "http://www.mynamespace.com">{$existingElement}</newElement>; declare variable $input-context1 external; for $var in (in-scope-prefixes($new/existingElement)) order by exactly-one($var) ascending return $var]]></test>
      <result>
         <assert-string-value>existingNamespace xml</assert-string-value>
      </result>
   </test-case>

   <test-case name="copynamespace-12">
      <description> Evaluates copy namespace declaration with value set to "preserve inherit" . Use global variables and namespaces with prefixes. diferent prefix same namespace URI. </description>
      <created by="Carmelo Montanez" on="2006-03-30"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare copy-namespaces preserve,inherit; declare variable $existingElement := <existingElement xmlns:existingNamespace="http://www.existingnamespace.com">{"Existing Content"}</existingElement>; declare variable $new := <newElement xmlns:newNamespace = "http://www.existingnamespace.com">{$existingElement}</newElement>; declare variable $input-context1 external; for $var in (in-scope-prefixes($new/existingElement)) order by exactly-one($var) ascending return $var]]></test>
      <result>
         <assert-string-value>existingNamespace newNamespace xml</assert-string-value>
      </result>
   </test-case>

   <test-case name="copynamespace-13">
      <description> Evaluates copy namespace declaration with value set to "preserve inherit" . Use global variables. only the XML prefix is used. </description>
      <created by="Carmelo Montanez" on="2006-03-31"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare copy-namespaces preserve,inherit; declare variable $existingElement := <existingElement>{"Existing Content"}</existingElement>; declare variable $new := <newElement>{$existingElement}</newElement>; declare variable $input-context1 external; for $var in (in-scope-prefixes(exactly-one($new/existingElement))) return $var]]></test>
      <result>
         <assert-string-value>xml</assert-string-value>
      </result>
   </test-case>

   <test-case name="copynamespace-14">
      <description> Evaluates copy namespace declaration with value set to "preserve inherit" . Use global variables where prefix differes in case. </description>
      <created by="Carmelo Montanez" on="2006-03-31"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare copy-namespaces preserve,inherit; declare variable $existingElement := <existingElement xmlns:somespace="http://www.existingnamespace.com">{"Existing Content"}</existingElement>; declare variable $new := <newElement xmlns:SOMESPACE="http://www.another.com">{$existingElement}</newElement>; declare variable $input-context1 external; for $var in (in-scope-prefixes($new/existingElement)) order by exactly-one($var) ascending return $var]]></test>
      <result>
         <assert-string-value>SOMESPACE somespace xml</assert-string-value>
      </result>
   </test-case>

   <test-case name="copynamespace-15">
      <description> Evaluates copy namespace declaration with value set to "preserve inherit" . with multiple inclusions. Examines last element in subtree. </description>
      <created by="Carmelo Montanez" on="2006-03-31"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare copy-namespaces preserve,inherit; declare variable $element1 := <element1 xmlns:namespace1="http://www.namespace1.com"></element1>; declare variable $element2 := <element2 xmlns:namespace2="http://www.namespace2.com">{$element1}</element2>; declare variable $element3 := <element3 xmlns:namespace3="http://www.namespace3.com">{$element2}</element3>; declare variable $input-context1 external; for $var in (in-scope-prefixes($element3/element2/element1)) order by exactly-one($var) ascending return $var]]></test>
      <result>
         <assert-string-value>namespace1 namespace2 namespace3 xml</assert-string-value>
      </result>
   </test-case>

   <test-case name="copynamespace-16">
      <description> Evaluates copy namespace declaration with value set to "no-preserve inherit" . with multiple inclusions. Examines last element in subtree. </description>
      <created by="Carmelo Montanez" on="2006-03-31"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare copy-namespaces no-preserve,inherit; declare variable $element1 := <element1 xmlns:namespace1="http://www.namespace1.com"></element1>; declare variable $element2 := <element2 xmlns:namespace2="http://www.namespace2.com">{$element1}</element2>; declare variable $element3 := <element3 xmlns:namespace3="http://www.namespace3.com">{$element2}</element3>; declare variable $input-context1 external; for $var in (in-scope-prefixes($element3/element2/element1)) order by exactly-one($var) ascending return $var]]></test>
      <result>
         <assert-string-value>namespace3 xml</assert-string-value>
      </result>
   </test-case>

   <test-case name="copynamespace-17">
      <description> Evaluates copy namespace declaration with value set to "no-preserve no-inherit" . with multiple inclusions. Examines last element in subtree. </description>
      <created by="Carmelo Montanez" on="2006-03-31"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare copy-namespaces no-preserve,no-inherit; declare variable $element1 := <element1 xmlns:namespace1="http://www.namespace1.com"></element1>; declare variable $element2 := <element2 xmlns:namespace2="http://www.namespace2.com">{$element1}</element2>; declare variable $element3 := <element3 xmlns:namespace3="http://www.namespace3.com">{$element2}</element3>; declare variable $input-context1 external; for $var in (in-scope-prefixes($element3/element2/element1)) order by exactly-one($var) ascending return $var]]></test>
      <result>
         <assert-string-value>xml</assert-string-value>
      </result>
   </test-case>

   <test-case name="copynamespace-18">
      <description> Evaluates copy namespace declaration with value set to "preserve no-inherit" . with multiple inclusions. Examines last element in subtree. </description>
      <created by="Carmelo Montanez" on="2006-03-31"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare copy-namespaces preserve,no-inherit; declare variable $element1 := <element1 xmlns:namespace1="http://www.namespace1.com"></element1>; declare variable $element2 := <element2 xmlns:namespace2="http://www.namespace2.com">{$element1}</element2>; declare variable $element3 := <element3 xmlns:namespace3="http://www.namespace3.com">{$element2}</element3>; declare variable $input-context1 external; for $var in (in-scope-prefixes($element3/element2/element1)) order by exactly-one($var) ascending return $var]]></test>
      <result>
         <assert-string-value>namespace1 xml</assert-string-value>
      </result>
   </test-case>

   <test-case name="copynamespace-19">
      <description> Evaluates copy namespace declaration with value set to "preserve inherit" . with multiple inclusions. Examines mid element in subtree. </description>
      <created by="Carmelo Montanez" on="2006-03-31"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare copy-namespaces preserve,inherit; declare variable $element1 := <element1 xmlns:namespace1="http://www.namespace1.com"></element1>; declare variable $element2 := <element2 xmlns:namespace2="http://www.namespace2.com">{$element1}</element2>; declare variable $element3 := <element3 xmlns:namespace3="http://www.namespace3.com">{$element2}</element3>; declare variable $input-context1 external; for $var in (in-scope-prefixes($element3/element2)) order by exactly-one($var) ascending return $var]]></test>
      <result>
         <assert-string-value>namespace2 namespace3 xml</assert-string-value>
      </result>
   </test-case>

   <test-case name="copynamespace-20">
      <description> Evaluates copy namespace declaration with value set to "no-preserve inherit" . with multiple inclusions. Examines mid element in subtree. </description>
      <created by="Carmelo Montanez" on="2006-03-31"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare copy-namespaces no-preserve,inherit; declare variable $element1 := <element1 xmlns:namespace1="http://www.namespace1.com"></element1>; declare variable $element2 := <element2 xmlns:namespace2="http://www.namespace2.com">{$element1}</element2>; declare variable $element3 := <element3 xmlns:namespace3="http://www.namespace3.com">{$element2}</element3>; declare variable $input-context1 external; for $var in (in-scope-prefixes($element3/element2)) order by exactly-one($var) ascending return $var]]></test>
      <result>
         <assert-string-value>namespace3 xml</assert-string-value>
      </result>
   </test-case>

   <test-case name="copynamespace-21">
      <description> Evaluates copy namespace declaration with value set to "no-preserve no-inherit" . with multiple inclusions. Examines mid element in subtree. </description>
      <created by="Carmelo Montanez" on="2006-03-31"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare copy-namespaces no-preserve,no-inherit; declare variable $element1 := <element1 xmlns:namespace1="http://www.namespace1.com"></element1>; declare variable $element2 := <element2 xmlns:namespace2="http://www.namespace2.com">{$element1}</element2>; declare variable $element3 := <element3 xmlns:namespace3="http://www.namespace3.com">{$element2}</element3>; declare variable $input-context1 external; for $var in (in-scope-prefixes($element3/element2)) order by exactly-one($var) ascending return $var]]></test>
      <result>
         <assert-string-value>xml</assert-string-value>
      </result>
   </test-case>

   <test-case name="copynamespace-22">
      <description> Evaluates copy namespace declaration with value set to "preserve no-inherit" . with multiple inclusions. Examines mid element in subtree. </description>
      <created by="Carmelo Montanez" on="2006-03-31"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare copy-namespaces preserve,no-inherit; declare variable $element1 := <element1 xmlns:namespace1="http://www.namespace1.com"></element1>; declare variable $element2 := <element2 xmlns:namespace2="http://www.namespace2.com">{$element1}</element2>; declare variable $element3 := <element3 xmlns:namespace3="http://www.namespace3.com">{$element2}</element3>; declare variable $input-context1 external; for $var in (in-scope-prefixes($element3/element2)) order by exactly-one($var) ascending return $var]]></test>
      <result>
         <assert-string-value>namespace2 xml</assert-string-value>
      </result>
   </test-case>

   <test-case name="K-CopyNamespacesProlog-1">
      <description> A prolog may not contain two copy-namespaces declarations. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare copy-namespaces preserve, no-inherit; declare copy-namespaces no-preserve, no-inherit; 1 eq 1</test>
      <result>
         <error code="XQST0055"/>
      </result>
   </test-case>

   <test-case name="K-CopyNamespacesProlog-2">
      <description> A 'declare copy-namespaces' declaration specifying no-preserve and no-inherit. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare copy-namespaces no-preserve, no-inherit; 1 eq 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-CopyNamespacesProlog-3">
      <description> A 'declare copy-namespaces' declaration specifying no-preserve and no-inherit. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare copy-namespaces preserve, inherit; 1 eq 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-CopyNamespacesProlog-4">
      <description> A 'declare copy-namespaces' declaration specifying no-preserve and no-inherit in a wrong order . </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare copy-namespaces no-inherit, no-preserve; 1 eq 1</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-CopyNamespacesProlog-5">
      <description> A 'declare copy-namespaces' declaration specifying preserve and inherit in a wrong order . </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare copy-namespaces inherit, preserve; 1 eq 1</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-CopyNamespacesProlog-1">
      <description> Use no-preserve, inherit with the default namespace. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare copy-namespaces no-preserve, inherit; <doc> <a>{<b xmlns:p="http://example.com/"/>}</a> <a><b xmlns:p="http://example.com/"/></a> </doc>]]></test>
      <result>
         <assert-xml><![CDATA[<doc><a><b/></a><a><b xmlns:p="http://example.com/"/></a></doc>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="K2-CopyNamespacesProlog-2">
      <description> Ensure the 'copy-namespaces' keyword is parsed correctly. </description>
      <created by="Frans Englich" on="2008-01-03"/>
      <test>copy-namespaces lt copy-namespaces</test>
      <result>
         <error code="XPDY0002"/>
      </result>
   </test-case>

   <test-case name="K2-CopyNamespacesProlog-3">
      <description> Ensure the 'namespace' keyword is parsed correctly. </description>
      <created by="Frans Englich" on="2008-01-03"/>
      <test>namespace lt namespace</test>
      <result>
         <error code="XPDY0002"/>
      </result>
   </test-case>

   <test-case name="K2-CopyNamespacesProlog-4">
      <description> Verify that the default element namespace is not touched when using no-inherit. </description>
      <created by="Frans Englich" on="2008-01-07"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare copy-namespaces preserve, no-inherit; <e xmlns="http://example.com/"> { <b/> } </e>]]></test>
      <result>
         <assert-xml><![CDATA[<e xmlns="http://example.com/"><b/></e>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="K2-CopyNamespacesProlog-5">
      <description> Have a namespace which is used further down. </description>
      <created by="Frans Englich" on="2008-01-07"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare copy-namespaces no-preserve, no-inherit; <e xmlns:appearsUnused="http://example.com/"> { <b> <appearsUnused:c/> </b> } </e>]]></test>
      <result>
         <assert-xml><![CDATA[<e xmlns:appearsUnused="http://example.com/"><b><appearsUnused:c xmlns:appearsUnused="http://example.com/"/></b></e>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="K2-CopyNamespacesProlog-6">
      <description> Check in-scope bindings of constructed nodes. </description>
      <created by="Frans Englich" on="2008-01-07"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace ns = "http://example.com/"; <e xmlns:appearsUnused="http://example.com/"> { <b> <appearsUnused:c/> </b> } </e>/(for $n in (., b, b/ns:c), $i in in-scope-prefixes($n) order by $i return ($i, '|'))]]></test>
      <result>
         <assert-string-value>appearsUnused | appearsUnused | appearsUnused | xml | xml | xml |</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-CopyNamespacesProlog-7">
      <description> Have an unused prefix further down the hierarchy. </description>
      <created by="Frans Englich" on="2008-01-07"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare copy-namespaces no-preserve, no-inherit; <e> { <b> <c xmlns:unused="http://example.com"/> </b> } </e>]]></test>
      <result>
         <assert-xml><![CDATA[<e><b><c/></b></e>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="K2-CopyNamespacesProlog-8">
      <description> Copy an element with no children. </description>
      <created by="Frans Englich" on="2008-01-07"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare copy-namespaces no-preserve,inherit; <a> { <b>{()}</b> } </a>]]></test>
      <result>
         <assert-xml><![CDATA[<a><b/></a>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="K2-CopyNamespacesProlog-9">
      <description> Use direct element constructors inside enclosed expressions. </description>
      <created by="Frans Englich" on="2008-01-08"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare copy-namespaces preserve, no-inherit; declare variable $e1 := <e1 xmlns:namespace1="http://www.namespace1.com"/>; declare variable $e2 := <e2 xmlns:namespace2="http://www.namespace2.com">{$e1}</e2>; for $n in <e3 xmlns:namespace3="http://www.namespace3.com">{$e2}</e3>/e2/e1, $ps in in-scope-prefixes($n) order by $ps return $ps, '|', for $n in <e3 xmlns:namespace3="http://www.namespace3.com">{<e2 xmlns:namespace2="http://www.namespace2.com">{<e1 xmlns:namespace1="http://www.namespace1.com"/>}</e2>}</e3>/e2/e1, $ps in in-scope-prefixes($n) order by $ps return $ps]]></test>
      <result>
         <assert-string-value>namespace1 xml | namespace1 namespace2 namespace3 xml</assert-string-value>
      </result>
   </test-case>
</test-set>