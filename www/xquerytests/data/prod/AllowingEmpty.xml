<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="prod-AllowingEmpty" covers="allowing-empty">
   <description>Tests for the "outer for" clause - "for $x allowing empty"</description>
   <link type="spec" document="http://www.w3.org/TR/xpath-functions-30/"
         idref="func-prod-AllowingEmpty"/>
   <link type="spec" document="XQuery 1.1" section-number="3.8.2"
         idref="id-xquery-for-clause"/>
         
   <dependency type="spec" value="XQ30+"/>      

   <test-case name="outer-001">
      <description>outer for clause </description>
      <created by="Michael Kay" on="2008-12-10"/>
      <test><![CDATA[
        declare variable $n as xs:integer external := 10; 
        <out>{ for $x allowing empty in 1 to $n return <a>{$x}</a> }</out>
      ]]></test>
      <result>
         <assert-xml><![CDATA[<out><a>1</a><a>2</a><a>3</a><a>4</a><a>5</a><a>6</a><a>7</a><a>8</a><a>9</a><a>10</a></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="outer-002">
      <description>outer for clause </description>
      <created by="Michael Kay" on="2008-12-10"/>
      <test><![CDATA[
        declare variable $n as xs:integer external := 0; 
        <out>{ for $x allowing empty in 1 to $n return <a>{$x}</a> }</out>
      ]]></test>
      <result>
         <assert-xml><![CDATA[<out><a/></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="outer-003">
      <description>outer for clause with position variable </description>
      <created by="Michael Kay" on="2008-12-10"/>
      <test><![CDATA[
        declare variable $n as xs:integer external := 10; 
        <out>{ for $x allowing empty at $p in 1 to $n return <a position="{$p}">{$x}</a> }</out>
      ]]></test>
      <result>
         <assert-xml><![CDATA[<out><a position="1">1</a><a position="2">2</a><a position="3">3</a><a position="4">4</a><a 
         position="5">5</a><a position="6">6</a><a position="7">7</a><a position="8">8</a><a position="9">9</a><a position="10">10</a></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="outer-004">
      <description>outer for clause with position variable </description>
      <created by="Michael Kay" on="2008-12-10"/>
      <test><![CDATA[
        declare variable $n as xs:integer external := 0; 
        <out>{ for $x allowing empty at $p in 1 to $n return <a position="{$p}">{$x}</a> }</out>
      ]]></test>
      <result>
         <assert-xml><![CDATA[<out><a position="0"/></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="outer-005">
      <description>outer for clause, pull mode </description>
      <created by="Michael Kay" on="2008-12-10"/>
      <test><![CDATA[
        declare variable $n as xs:integer external := 10;
        <out>{ string-join(for $x allowing empty in 1 to $n return concat('[',$x,']'), '|') }</out>]]></test>
      <result>
         <assert-xml><![CDATA[<out>[1]|[2]|[3]|[4]|[5]|[6]|[7]|[8]|[9]|[10]</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="outer-006">
      <description>outer for clause, pull mode </description>
      <created by="Michael Kay" on="2008-12-10"/>
      <test><![CDATA[
        declare variable $n as xs:integer external := 0; 
        <out>{ string-join(for $x allowing empty in 1 to $n return concat('[',$x,']'), '|') }</out>
      ]]></test>
      <result>
         <assert-xml><![CDATA[<out>[]</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="outer-007">
      <description>outer for clause, nested </description>
      <created by="Michael Kay" on="2008-12-10"/>
      <test><![CDATA[
        declare variable $m as xs:integer external := 5; 
        declare variable $n as xs:integer external := 5;
         <out>{ for $x allowing empty at $p in 1 to $m, $y at $q in 1 to $n return <a p="{$p}" q="{$q}">{$x},{$y}</a> }</out>
      ]]></test>
      <result>
         <assert-xml><![CDATA[<out><a p="1" q="1">1,1</a><a p="1" q="2">1,2</a><a p="1" q="3">1,3</a><a p="1" q="4">1,4</a><a p="1" q="5">1,5</a><a 
         p="2" q="1">2,1</a><a p="2" q="2">2,2</a><a p="2" q="3">2,3</a><a p="2" q="4">2,4</a><a p="2" q="5">2,5</a><a 
         p="3" q="1">3,1</a><a p="3" q="2">3,2</a><a p="3" q="3">3,3</a><a p="3" q="4">3,4</a><a p="3" q="5">3,5</a><a 
         p="4" q="1">4,1</a><a p="4" q="2">4,2</a><a p="4" q="3">4,3</a><a p="4" q="4">4,4</a><a p="4" q="5">4,5</a><a 
         p="5" q="1">5,1</a><a p="5" q="2">5,2</a><a p="5" q="3">5,3</a><a p="5" q="4">5,4</a><a p="5" q="5">5,5</a></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="outer-008">
      <description>outer for clause, nested </description>
      <created by="Michael Kay" on="2008-12-10"/>
      <test><![CDATA[
        declare variable $m as xs:integer external := 5; 
        declare variable $n as xs:integer external := 0; 
        <out>{ for $x allowing empty at $p in 1 to $m, $y allowing empty at $q in 1 to $n return <a p="{$p}" q="{$q}">{$x},{$y}</a> }</out>
      ]]></test>
      <result>
         <assert-xml><![CDATA[<out><a p="1" q="0">1,</a><a p="2" q="0">2,</a><a p="3" q="0">3,</a><a p="4" q="0">4,</a><a p="5" q="0">5,</a></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="outer-009">
      <description>outer for clause, nested </description>
      <created by="Michael Kay" on="2008-12-10"/>
      <test><![CDATA[
        declare variable $m as xs:integer external := 0; 
        declare variable $n as xs:integer external := 5; 
        <out>{ for $x allowing empty at $p in 1 to $m, $y at $q in 1 to $n return <a p="{$p}" q="{$q}">{$x},{$y}</a> }</out>]]></test>
      <result>
         <assert-xml><![CDATA[<out><a p="0" q="1">,1</a><a p="0" q="2">,2</a><a p="0" q="3">,3</a><a p="0" q="4">,4</a><a p="0" q="5">,5</a></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="outer-010">
      <description>outer for clause, nested </description>
      <created by="Michael Kay" on="2008-12-10"/>
      <test><![CDATA[
        declare variable $m as xs:integer external := 0; 
        declare variable $n as xs:integer external := 0; 
        <out>{ for $x allowing empty at $p in 1 to $m, 
                   $y allowing empty at $q in 1 to $n return <a p="{$p}" q="{$q}">{$x},{$y}</a> }</out>
      ]]></test>
      <result>
         <assert-xml><![CDATA[<out><a p="0" q="0">,</a></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="outer-011">
      <description>outer for clause, nested, one loop depends on the other </description>
      <created by="Michael Kay" on="2008-12-10"/>
      <test><![CDATA[
        declare variable $n as xs:integer external := 5; 
        <out>{ for $x allowing empty at $p in 1 to $n, $y allowing empty at $q in ($x+1) to $n return <a p="{$p}" q="{$q}">{$x},{$y}</a> }</out>
      ]]></test>
      <result>
         <assert-xml><![CDATA[<out><a p="1" q="1">1,2</a><a p="1" q="2">1,3</a><a p="1" q="3">1,4</a><a p="1" q="4">1,5</a><a 
         p="2" q="1">2,3</a><a p="2" q="2">2,4</a><a p="2" q="3">2,5</a><a p="3" q="1">3,4</a><a p="3" q="2">3,5</a><a p="4" q="1">4,5</a><a p="5" q="0">5,</a></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="outer-012">
      <description>outer for clause, nested, one loop depends on the other </description>
      <created by="Michael Kay" on="2008-12-10"/>
      <test><![CDATA[
        declare variable $n as xs:integer external := 5; 
        <out>{ 
            for $x as xs:integer allowing empty at $p in 1 to $n, 
                $y as xs:integer? allowing empty at $q in ($x+1) to $n 
            return <a p="{$p}" q="{$q}">{$x},{$y}</a> }</out>
      ]]></test>
      <result>
         <assert-xml><![CDATA[<out><a p="1" q="1">1,2</a><a p="1" q="2">1,3</a><a p="1" q="3">1,4</a><a p="1" q="4">1,5</a><a 
         p="2" q="1">2,3</a><a p="2" q="2">2,4</a><a p="2" q="3">2,5</a><a p="3" q="1">3,4</a><a p="3" q="2">3,5</a><a p="4" q="1">4,5</a><a p="5" q="0">5,</a></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="outer-013">
      <description>outer for clause, nested, one loop depends on the other.
         Type error because $y does not allow an empty sequence </description>
      <created by="Michael Kay" on="2008-12-10"/>
      <test><![CDATA[
        declare variable $n as xs:integer external := 5; 
        <out>{ for $x as xs:integer allowing empty at $p in 1 to $n, 
                   $y as xs:integer allowing empty at $q in ($x+1) to $n 
               return <a p="{$p}" q="{$q}">{$x},{$y}</a> }</out>
      ]]></test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="outer-014">
      <description>outer for clause, nested, mixed with "non-outer" for </description>
      <created by="Michael Kay" on="2008-12-10"/>
      <test><![CDATA[
        declare variable $n as xs:integer external := 5; 
        <out>{ for $x as xs:integer at $p in 1 to $n 
               for $y as xs:integer? allowing empty at $q in ($x+1) to $n 
               return <a p="{$p}" q="{$q}">{$x},{$y}</a> }</out>
      ]]></test>
      <result>
         <assert-xml><![CDATA[<out><a p="1" q="1">1,2</a><a p="1" q="2">1,3</a><a p="1" q="3">1,4</a><a p="1" q="4">1,5</a><a 
         p="2" q="1">2,3</a><a p="2" q="2">2,4</a><a p="2" q="3">2,5</a><a p="3" q="1">3,4</a><a p="3" q="2">3,5</a><a p="4" q="1">4,5</a><a p="5" q="0">5,</a></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="outer-015">
      <description>outer for clause, nested, mixed with "non-outer" for </description>
      <created by="Michael Kay" on="2008-12-10"/>
      <test><![CDATA[
        declare variable $n as xs:integer external := 5; 
        <out>{ for $x as xs:integer? allowing empty at $p in 1 to $n 
               for $y as xs:integer at $q in (if (empty($x)) then 0 else (1 to $x)) 
               return <a p="{$p}" q="{$q}">{$x},{$y}</a> }</out>
      ]]></test>
      <result>
         <assert-xml><![CDATA[<out><a p="1" q="1">1,1</a><a p="2" q="1">2,1</a><a p="2" q="2">2,2</a><a 
         p="3" q="1">3,1</a><a p="3" q="2">3,2</a><a p="3" q="3">3,3</a><a 
         p="4" q="1">4,1</a><a p="4" q="2">4,2</a><a p="4" q="3">4,3</a><a p="4" q="4">4,4</a><a 
         p="5" q="1">5,1</a><a p="5" q="2">5,2</a><a p="5" q="3">5,3</a><a p="5" q="4">5,4</a><a p="5" q="5">5,5</a></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="outer-016">
      <description>outer for clause, nested, mixed with "non-outer" for </description>
      <created by="Michael Kay" on="2008-12-10"/>
      <test><![CDATA[
        declare variable $n as xs:integer external := 0; 
        <out>{ for $x as xs:integer? allowing empty at $p in 1 to $n 
               for $y as xs:integer at $q in (if (empty($x)) then 0 else (1 to $x)) 
               return <a p="{$p}" q="{$q}">{$x},{$y}</a> }</out>
      ]]></test>
      <result>
         <assert-xml><![CDATA[<out><a p="0" q="1">,0</a></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="outer-017">
      <description>outer for clause, nested, with where clause </description>
      <created by="Michael Kay" on="2008-12-10"/>
      <test><![CDATA[
        declare variable $n as xs:integer external := 5; 
        <out>{ for $x as xs:integer? allowing empty at $p in 1 to $n 
               for $y as xs:integer? allowing empty at $q in (if (empty($x)) then () else (1 to $x)) 
               where deep-equal($x,$y) 
               return <a p="{$p}" q="{$q}">{$x},{$y}</a> }</out>
      ]]></test>
      <result>
         <assert-xml><![CDATA[<out><a p="1" q="1">1,1</a><a p="2" q="2">2,2</a><a p="3" q="3">3,3</a><a p="4" q="4">4,4</a><a p="5" q="5">5,5</a></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="outer-018">
      <description>outer for clause, nested, with where clause </description>
      <created by="Michael Kay" on="2008-12-10"/>
      <test><![CDATA[
        declare variable $n as xs:integer external := 0; 
        <out>{ for $x as xs:integer? allowing empty at $p in 1 to $n 
               for $y as xs:integer? allowing empty at $q in (if (empty($x)) then () else (1 to $x)) 
               where deep-equal($x,$y) return <a p="{$p}" q="{$q}">{$x},{$y}</a> }</out>
      ]]></test>
      <result>
         <assert-xml><![CDATA[<out><a p="0" q="0">,</a></out>]]></assert-xml>
      </result>
   </test-case>
</test-set>