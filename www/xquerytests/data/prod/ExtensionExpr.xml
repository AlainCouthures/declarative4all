<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="prod-ExtensionExpr">
   <description>Tests for the ExtensionExpr production</description>
   <link type="spec" document="http://www.w3.org/TR/xquery-30/"
         idref="doc-xquery30-ExtensionExpr"/>
   <link type="spec" document="XQuery" section-number="3.14"
         idref="id-extension-expressions"/>
         
   <dependency type="spec" value="XQ10+"/>      

   <test-case name="extexpr-1">
      <description> A simple call to an extension expression, that should not be recognized (and thus ignored) </description>
      <created by="Carmelo Montanez" on="2005-12-21"/>
      <environment ref="works-mod"/>
      <test>declare namespace ns1 = "http://example.org/someweirdnamespace"; (# ns1:you-do-not-know-me-as-index #) { /works/employee[12]/overtime }</test>
      <result>
         <assert-xml><![CDATA[<overtime>
     <day>Monday</day>
     <day>Tuesday</day>
   </overtime>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="extexpr-2">
      <description> An extension expression with no expression </description>
      <created by="Carmelo Montanez" on="2005-12-21"/>
      <test>declare namespace ns1 = "http://example.org/someweirdnamespace"; (# ns1:you-do-not-know-me-as-index #) {}</test>
      <result>
         <error code="XQST0079"/>
      </result>
   </test-case>

   <test-case name="extexpr-3">
      <description> An pragma content containing the "#" symbol, which is ignored in an extension expression </description>
      <created by="Carmelo Montanez" on="2005-12-21"/>
      <environment ref="works-mod"/>
      <test>declare namespace ns1 = "http://example.org/someweirdnamespace"; (# ns1:you-do-not-know-me-as-index "ABC#" #) {/works/employee[12]/overtime}</test>
      <result>
         <assert-xml><![CDATA[<overtime>
     <day>Monday</day>
     <day>Tuesday</day>
   </overtime>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="extexpr-4">
      <description> An extension expression, for which its QName can not be resolved to a namespace URI. </description>
      <created by="Carmelo Montanez" on="2005-12-21"/>
      <test>declare namespace ns1 = "http://example.org/someweirdnamespace"; (# ns2:you-do-not-know-me-as-index #) {/works/employee[12]/overtime}</test>
      <result>
         <error code="XPST0081"/>
      </result>
   </test-case>

   <test-case name="extexpr-5">
      <description> An extension expression that contains more than one pragma, both of wihc are ignored </description>
      <created by="Carmelo Montanez" on="2005-12-21"/>
      <environment ref="works-mod"/>
      <test>declare namespace ns1 = "http://example.org/someweirdnamespace"; (# ns1:you-do-not-know-me-as-index #) (# ns1:you-should-not-know-me-either #) {/works/employee[12]/overtime}</test>
      <result>
         <assert-xml><![CDATA[<overtime>
     <day>Monday</day>
     <day>Tuesday</day>
   </overtime>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="extexpr-6">
      <description> A FLOWR expression that uses the same pragma twice and both times should be ignored. </description>
      <created by="Carmelo Montanez" on="2005-12-21"/>
      <environment ref="works-mod"/>
      <test>declare namespace ns1 = "http://example.org/someweirdnamespace"; for $x in (# ns1:you-do-not-know-me-as-index #) {/works/employee[12]/overtime} return (# ns1:you-do-not-know-me-as-index #) {/works/employee[12]/overtime}</test>
      <result>
         <assert-xml><![CDATA[<overtime>
     <day>Monday</day>
     <day>Tuesday</day>
   </overtime>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="extexpr-7">
      <description> An extension expression for which the pragma is ignored and default expression is a quantified expression ("every" operator). </description>
      <created by="Carmelo Montanez" on="2005-12-21"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace ns1 = "http://example.org/someweirdnamespace"; (# ns1:you-do-not-know-me-as-index #) {(every $x in (1,2,3) satisfies $x < 4)}]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="extexpr-8">
      <description> An extension expression for which the pragma is ignored and default expression is a quantified expression ("every" operator). </description>
      <created by="Carmelo Montanez" on="2005-12-21"/>
      <test>declare namespace ns1 = "http://example.org/someweirdnamespace"; (# ns1:you-do-not-know-me-as-index #) {(some $x in (1,2,3) satisfies $x = 2)}</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="extexpr-9">
      <description> An extension expression for which the pragma is ignored and default expression is a call to fn:true() </description>
      <created by="Carmelo Montanez" on="2005-12-21"/>
      <test>declare namespace ns1 = "http://example.org/someweirdnamespace"; (# ns1:you-do-not-know-me-as-index #) {(fn:true())}</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="extexpr-10">
      <description> An extension expression for which the pragma is ignored and default expression is a call to fn:false() </description>
      <created by="Carmelo Montanez" on="2005-12-21"/>
      <test>declare namespace ns1 = "http://example.org/someweirdnamespace"; (# ns1:you-do-not-know-me-as-index #) {(fn:false())}</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="extexpr-11">
      <description> An extension expression for which the pragma is ignored and default expression is an "or" true expression ("or" operator) </description>
      <created by="Carmelo Montanez" on="2005-12-21"/>
      <test>declare namespace ns1 = "http://example.org/someweirdnamespace"; (# ns1:you-do-not-know-me-as-index #) {(fn:false() or fn:true())}</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="extexpr-12">
      <description> An extension expression for which the pragma is ignored and default expression is an "or" false expression ("or" operator) </description>
      <created by="Carmelo Montanez" on="2005-12-21"/>
      <test>declare namespace ns1 = "http://example.org/someweirdnamespace"; (# ns1:you-do-not-know-me-as-index #) {(fn:false() or fn:false())}</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="extexpr-13">
      <description> An extension expression for which the pragma is ignored and default expression is an "or" true expression ("and" operator) </description>
      <created by="Carmelo Montanez" on="2005-12-21"/>
      <test>declare namespace ns1 = "http://example.org/someweirdnamespace"; (# ns1:you-do-not-know-me-as-index #) {(fn:true() and fn:true())}</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="extexpr-14">
      <description> An extension expression for which the pragma is ignored and default expression is an "or" false expression ("and" operator) </description>
      <created by="Carmelo Montanez" on="2005-12-21"/>
      <test>declare namespace ns1 = "http://example.org/someweirdnamespace"; (# ns1:you-do-not-know-me-as-index #) {(fn:true() and fn:false())}</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="extexpr-15">
      <description> An extension expression for which the pragma is ignored and default expression is an "if" true expression </description>
      <created by="Carmelo Montanez" on="2005-12-21"/>
      <test>declare namespace ns1 = "http://example.org/someweirdnamespace"; (# ns1:you-do-not-know-me-as-index #) {if(fn:true()) then "passed" else "failed"}</test>
      <result>
         <assert-string-value>passed</assert-string-value>
      </result>
   </test-case>

   <test-case name="extexpr-16">
      <description> An extension expression for which the pragma is ignored and default expression is an "if" false expression (returns "else" part of expression) </description>
      <created by="Carmelo Montanez" on="2005-12-21"/>
      <test>declare namespace ns1 = "http://example.org/someweirdnamespace"; (# ns1:you-do-not-know-me-as-index #) {if(fn:false()) then "failed" else "passed"}</test>
      <result>
         <assert-string-value>passed</assert-string-value>
      </result>
   </test-case>

   <test-case name="extexpr-17">
      <description> An extension expression for which the pragma is ignored and default expression is a "typeswitch" expression </description>
      <created by="Carmelo Montanez" on="2005-12-21"/>
      <test>declare namespace ns1 = "http://example.org/someweirdnamespace"; (# ns1:you-do-not-know-me-as-index #) {typeswitch ("A String") case $i as xs:decimal return "test failed" case $i as xs:integer return "test failed" case $i as xs:string return "test passed" default return "test failed" }</test>
      <result>
         <assert-string-value>test passed</assert-string-value>
      </result>
   </test-case>

   <test-case name="extexpr-18">
      <description> An extension expression for which the pragma is ignored and default expression uses the fn:not function. </description>
      <created by="Carmelo Montanez" on="2005-12-21"/>
      <test>declare namespace ns1 = "http://example.org/someweirdnamespace"; (# ns1:you-do-not-know-me-as-index #) {(fn:not(fn:true()))}</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="extexpr-19">
      <description> An extension expression for which the pragma is ignored and default expression uses the fn:string-length function. </description>
      <created by="Carmelo Montanez" on="2005-12-21"/>
      <test>declare namespace ns1 = "http://example.org/someweirdnamespace"; (# ns1:you-do-not-know-me-as-index #) {fn:string-length("abc")}</test>
      <result>
         <assert-eq>3</assert-eq>
      </result>
   </test-case>

   <test-case name="extexpr-20">
      <description> An extension expression for which the pragma is ignored and default expression uses the fn:count function. </description>
      <created by="Carmelo Montanez" on="2005-12-21"/>
      <test>declare namespace ns1 = "http://example.org/someweirdnamespace"; (# ns1:you-do-not-know-me-as-index #) {fn:count((1,2,3))}</test>
      <result>
         <assert-eq>3</assert-eq>
      </result>
   </test-case>

   <test-case name="extexpr-21">
      <description> An extension expression for which the pragma is ignored and default expression is an addition operation. </description>
      <created by="Carmelo Montanez" on="2005-12-21"/>
      <test>declare namespace ns1 = "http://example.org/someweirdnamespace"; (# ns1:you-do-not-know-me-as-index #) {3+2}</test>
      <result>
         <assert-eq>5</assert-eq>
      </result>
   </test-case>

   <test-case name="extexpr-22">
      <description> An extension expression for which the pragma is ignored and default expression is a subtraction operation. </description>
      <created by="Carmelo Montanez" on="2005-12-21"/>
      <test>declare namespace ns1 = "http://example.org/someweirdnamespace"; (# ns1:you-do-not-know-me-as-index #) {10 - 5}</test>
      <result>
         <assert-eq>5</assert-eq>
      </result>
   </test-case>

   <test-case name="extexpr-23">
      <description> An extension expression for which the pragma is ignored and default expression is a multiplication operation. </description>
      <created by="Carmelo Montanez" on="2005-12-21"/>
      <test>declare namespace ns1 = "http://example.org/someweirdnamespace"; (# ns1:you-do-not-know-me-as-index #) {10 * 2}</test>
      <result>
         <assert-eq>20</assert-eq>
      </result>
   </test-case>

   <test-case name="extexpr-24">
      <description> An extension expression for which the pragma is ignored and default expression is a division operation (div operator). </description>
      <created by="Carmelo Montanez" on="2005-12-21"/>
      <test>declare namespace ns1 = "http://example.org/someweirdnamespace"; (# ns1:you-do-not-know-me-as-index #) {10 div 2}</test>
      <result>
         <assert-eq>5</assert-eq>
      </result>
   </test-case>

   <test-case name="extexpr-25">
      <description> An extension expression for which the pragma is ignored and default expression is a division operation (idiv operator). </description>
      <created by="Carmelo Montanez" on="2005-12-21"/>
      <test>declare namespace ns1 = "http://example.org/someweirdnamespace"; (# ns1:you-do-not-know-me-as-index #) {10 idiv 2}</test>
      <result>
         <assert-eq>5</assert-eq>
      </result>
   </test-case>

   <test-case name="extexpr-26">
      <description> Extension expression for missing space after pragma name. </description>
      <created by="Carmelo Montanez" on="2006-03-14"/>
      <test>declare namespace ns1 = "http://example.org/someweirdnamespace"; (# ns1:you-do-not-know-me-as-index#){fn:count((1,2,3))}</test>
      <result>
         <assert-eq>3</assert-eq>
      </result>
   </test-case>

   <test-case name="K-ExtensionExpression-1">
      <description> A pragma expression that never ends is syntactically invalid. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>(#local:pr content # {1}</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-ExtensionExpression-2">
      <description> A pragma expression that never starts is syntactically invalid. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>local:pr content #) {1}</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-ExtensionExpression-3">
      <description> A simple pragma expression. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare namespace prefix = "http://example.com/NotRecognized"; (#prefix:pr content #) {1 eq 1}</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-ExtensionExpression-4">
      <description> A pragma expression cannot be in the empty namespace. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>(#name content #) {1}</test>
      <result>
         <error code="XPST0081"/>
      </result>
   </test-case>

   <test-case name="K-ExtensionExpression-5">
      <description> A pragma expression cannot be in the empty namespace even though a prefix is used. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare namespace prefix = ""; (# prefix:notRecognized #){1}</test>
      <result>
         <error code="XPST0081"/>
      </result>
   </test-case>

   <test-case name="K-ExtensionExpression-6">
      <description> A pragma expression containing complex content. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare namespace prefix = "http://example.com/NotRecognized"; 1 eq (#prefix:notRecognized ##cont## # # ( "# ) # )# )#ent #) {1}</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-ExtensionExpression-7">
      <description> A fallback expression must be present when no supported pragmas are specified. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare namespace prefix = "http://example.com/NotRecognized"; (#prefix:PragmaNotSupported content #) {}</test>
      <result>
         <error code="XQST0079"/>
      </result>
   </test-case>

   <test-case name="K-ExtensionExpression-8">
      <description> A pragma expression containing many comments. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare namespace prefix = "http://example.com/NotRecognized";
(::)1(::)eq(::)(#prefix:name ##cont## # # ( "# ) #
		)# )#ent #)(::){(::)1(::)}(::)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-ExtensionExpression-1">
      <description> An extension expression cannot be in an undeclared namespace. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare namespace xs = ""; (#xs:name content #) {1}</test>
      <result>
         <error code="XPST0081"/>
      </result>
   </test-case>

   <test-case name="K2-ExtensionExpression-2">
      <description> Whitespace isn't required if there is no pragma content. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare namespace ex = "http://example.com/"; (#ex:myExtensionExpression#) {true()}</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-ExtensionExpression-3">
      <description> Whitespace is allowed but not required if there is no pragma content. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare namespace ex = "http://example.com/"; (#ex:myExtensionExpression #) {true()}</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-ExtensionExpression-4">
      <description> Content looking like comments are not recognized as so in pragma content. asdad </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare namespace ex = "http://example.com/"; (#ex:myExtensionExpression content#) {true()}</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-ExtensionExpression-5">
      <description> Content looking like comments are not recognized as so in pragma content. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare namespace ex = "http://example.com/"; (#ex:myExtensionExpression (:(:(:(:(: content #) {true()}</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-ExtensionExpression-6">
      <description> A single whitespace must separate pragma name and content. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare namespace ex = "http://example.com/"; (#ex:myExtensionExpression(content)#) {true()}</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-ExtensionExpression-7">
      <description> A single whitespace must separate pragma name and content. content </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare namespace ex = "http://example.com/";
(#ex:myExtensionExpression(:content:)#) {true()}</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-ExtensionExpression-8">
      <description> A single whitespace must separate pragma name and content. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare namespace ex = "http://example.com/"; (#ex:myExtensionExpression:)#) {true()}</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-ExtensionExpression-9">
      <description> Whitespace between pragma-start and name cannot contain comments. a comment </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare namespace ex = "http://example.com/"; (#ex:myExtensionExpression:)#) {true()}</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-ExtensionExpression-10">
      <description> Whitespace between pragma-start and name cannot contain comments. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare namespace ex = "http://example.com/"; (#ex:myExtensionExpression:)#) {true()}</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-ExtensionExpression-11">
      <description> A single whitespace must separate pragma name and content. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare namespace ex = "http://example.com/"; (#ex:myExtensionExpression :)#) {true()}</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-ExtensionExpression-12">
      <description> No whitespace is required between pragma content and name if the content is empty. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare namespace ex = "http://example.com/"; (#ex:myExtensionExpression#) {true()}</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-ExtensionExpression-13">
      <description> A pragma expression that hasn't even specified a name, but has trailing whitespace. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare namespace ex = "http://example.com/"; (#</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-ExtensionExpression-14">
      <description> A pragma expression that hasn't even specified a name. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare namespace ex = "http://example.com/"; (#</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-ExtensionExpression-15">
      <description> A pragma expression with name and trailing whitespace, but without content and end. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare namespace ex = "http://example.com/"; (# ex:name</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-ExtensionExpression-16">
      <description> A pragma expression with name but without content and end. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare namespace ex = "http://example.com/"; (# ex:name</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-ExtensionExpression-17">
      <description> Use four nested pragma expressions. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>(#xs:a#)(#xs:a#)(#local:a#){-5}</test>
      <result>
         <assert-eq>-5</assert-eq>
      </result>
   </test-case>
</test-set>