<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="prod-VarDecl.external">
   <description>Tests for the VarDecl.external production</description>
   <link type="spec" document="http://www.w3.org/TR/xquery-30/"
         idref="doc-xquery30-VarDecl.external"/>
   <link type="spec" document="XQuery" section-number="4.14"
         idref="id-variable-declarations"/>
         
   <environment name="TopMany">
      <source role="." file="AxisStep/TopMany.xml">
         <description>Like TreeCompass, but with comments and PIs off the root. PI targets vary.
            All text nodes must have non-whitespace characters.</description>
         <created by="David Marston" on="2003-03-25"/>   
      </source>
   </environment>
   
   <environment name="CPPGlobals">
      <source role="." file="AxisStep/CPPGlobals.xml">
         <description>The declarations of a C++ file described in XML.</description>
         <created by="Frans Englich" on="2007-06-27"/>
      </source>
   </environment>      
         
   <dependency type="spec" value="XQ10+"/>      

   <test-case name="extvardeclwithouttype-1">
      <description> Evaluates an external variable declaration without type </description>
      <created by="Carmelo Montanez" on="2006-02-10"/>
      <environment>
         <param name="x"
                select="'abc'"
                declared="true"/>
      </environment>
      <test>declare variable $x external; fn:string($x)</test>
      <result>
         <any-of>
            <assert-string-value>abc</assert-string-value>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="extvardeclwithouttype-2">
      <description> Evaluates an external variable declaration without type </description>
      <created by="Carmelo Montanez" on="2006-02-10"/>
      <environment>
         <param name="x"
                select="'2006-02-07+05:00'"
                declared="true"/>
      </environment>
      <test>declare variable $x external; $x</test>
      <result>
         <any-of>
            <assert-string-value>2006-02-07+05:00</assert-string-value>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="extvardeclwithouttype-3">
      <description> Evaluates an external variable declaration without type Use type xs:integer. </description>
      <created by="Carmelo Montanez" on="2006-02-10"/>
      <environment>
         <param name="x"
                select="2"
                declared="true"/>
      </environment>
      <test>declare variable $x external; xs:integer($x)</test>
      <result>
         <any-of>
            <assert-eq>2</assert-eq>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="extvardeclwithouttype-4">
      <description> Evaluates an external variable declaration without type </description>
      <created by="Carmelo Montanez" on="2006-02-10"/>
      <environment>
         <param name="x"
                select="1.2E2"
                declared="true"/>
      </environment>
      <test>declare variable $x external; $x</test>
      <result>
         <any-of>
            <assert-eq>120</assert-eq>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="extvardeclwithouttype-5">
      <description> Evaluates an external variable declaration without type </description>
      <created by="Carmelo Montanez" on="2006-02-10"/>
      <environment>
         <param name="x"
                select="let $var := 1 return $var"
                declared="true"/>
      </environment>
      <test>declare variable $x external; $x</test>
      <result>
         <any-of>
            <assert-eq>1</assert-eq>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="extvardeclwithouttype-6">
      <description> Evaluates an external variable declaration without type Use type xs:float. </description>
      <created by="Carmelo Montanez" on="2006-02-10"/>
      <environment>
         <param name="x"
                select="12.5E10"
                declared="true"/>
      </environment>
      <test>declare variable $x external; xs:float($x)</test>
      <result>
         <any-of>
            <assert-string-value>1.25E11</assert-string-value>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="extvardeclwithouttype-7">
      <description> Evaluates an external variable declaration without type </description>
      <created by="Carmelo Montanez" on="2006-02-10"/>
      <environment>
         <param name="x"
                select="12678967.543233"
                declared="true"/>
      </environment>
      <test>declare variable $x external; $x</test>
      <result>
         <any-of>
            <assert-string-value>12678967.543233</assert-string-value>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="extvardeclwithouttype-8">
      <description> Evaluates an external variable that adds two integers Both queries perform the operation </description>
      <created by="Carmelo Montanez" on="2006-02-10"/>
      <modified by="Michael Kay" on="2013-01-17" change="simplify the param, see bug 20694"/>
      <environment>
         <param name="x"
                select="1 + 1"
                declared="true"/>
      </environment>
      <test>declare variable $x external; $x + $x</test>
      <result>
         <any-of>
            <assert-eq>4</assert-eq>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="extvardeclwithouttype-9">
      <description> Evaluates an external variable that adds two values This query does NOT performs the operation </description>
      <created by="Carmelo Montanez" on="2006-02-10"/>
      <modified by="Michael Kay" on="2013-01-17" change="simplify the param, see bug 20694"/>
      <environment>
         <param name="x"
                select="1 + 1"
                declared="true"/>
      </environment>
      <test>declare variable $x external; $x</test>
      <result>
         <any-of>
            <assert-eq>2</assert-eq>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="extvardeclwithouttype-10">
      <description> Evaluates an external variable that adds two values Only THIS query performs the operation. </description>
      <created by="Carmelo Montanez" on="2006-02-10"/>
      <modified by="Michael Kay" on="2013-01-17" change="simplify the param, see bug 20694"/>
      <environment>
         <param name="x"
                select="1"
                declared="true"/>
      </environment>
      <test>declare variable $x external; $x + $x</test>
      <result>
         <any-of>
            <assert-eq>2</assert-eq>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="extvardeclwithouttype-11">
      <description> Evaluates an external variable that multiply two values Both queries perform the operation. </description>
      <created by="Carmelo Montanez" on="2006-02-10"/>
      <modified by="Michael Kay" on="2013-01-17" change="simplify the param, see bug 20694"/>
      <environment>
         <param name="x"
                select="2 * 2"
                declared="true"/>
      </environment>
      <test>declare variable $x external; $x * $x</test>
      <result>
         <any-of>
            <assert-eq>16</assert-eq>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="extvardeclwithouttype-12">
      <description> Evaluates an external variable that subtract two values Both queries perform the operation. </description>
      <created by="Carmelo Montanez" on="2006-02-10"/>
      <modified by="Michael Kay" on="2013-01-17" change="simplify the param, see bug 20694"/>
      <environment>
         <param name="x"
                select="4 - 1"
                declared="true"/>
      </environment>
      <test>declare variable $x external; $x - 1</test>
      <result>
         <any-of>
            <assert-eq>2</assert-eq>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="extvardeclwithouttype-13">
      <description> Evaluates an external variable that divides two values Both queries perform the operation. </description>
      <created by="Carmelo Montanez" on="2006-02-10"/>
      <modified by="Michael Kay" on="2013-01-17" change="simplify the param, see bug 20694"/>
      <environment>
         <param name="x"
                select="20 idiv 2"
                declared="true"/>
      </environment>
      <test>declare variable $x external; $x idiv 2</test>
      <result>
         <any-of>
            <assert-eq>5</assert-eq>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="extvardeclwithouttype-14">
      <description> Evaluates an external variable that divides (div operator) two values Both queries perform the operation. </description>
      <created by="Carmelo Montanez" on="2006-02-10"/>
      <modified by="Michael Kay" on="2013-01-17" change="simplify the param, see bug 20694"/>
      <environment>
         <param name="x"
                select="40 div 2"
                declared="true"/>
      </environment>
      <test>declare variable $x external; $x div 10</test>
      <result>
         <any-of>
            <assert-eq>2</assert-eq>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="extvardeclwithouttype-15">
      <description> Evaluates an external variable that perform modulus operation on two values Both queries perform the operation. </description>
      <created by="Carmelo Montanez" on="2006-02-10"/>
      <modified by="Michael Kay" on="2013-01-17" change="simplify the param, see bug 20694"/>
      <environment>
         <param name="x"
                select="55 mod 3"
                declared="true"/>
      </environment>
      <test>declare variable $x external; $x mod 2</test>
      <result>
         <any-of>
            <assert-eq>1</assert-eq>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="extvardeclwithouttype-16">
      <description> Evaluates an external variable that evaluates a boolean expression Both queries perform the operation. </description>
      <created by="Carmelo Montanez" on="2006-02-10"/>
      <modified by="Michael Kay" on="2013-01-17" change="simplify the param, see bug 20694"/>
      <environment>
         <param name="x"
                select="true() and true()"
                declared="true"/>
      </environment>
      <test>declare variable $x external; $x and fn:false()</test>
      <result>
         <any-of>
            <assert-false/>
            <error code="FORG0006"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="extvardeclwithouttype-17">
      <description> Evaluates an external variable that evaluates a boolean expression Both queries perform the operation. </description>
      <created by="Carmelo Montanez" on="2006-02-10"/>
      <modified by="Michael Kay" on="2013-01-17" change="simplify the param, see bug 20694"/>
      <environment>
         <param name="x"
                select="true() or true()"
                declared="true"/>
      </environment>
      <test>declare variable $x external; $x or fn:false()</test>
      <result>
         <any-of>
            <assert-true/>
            <error code="FORG0006"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="extvardeclwithouttype-18">
      <description> Evaluates an external variable that evaluates avg function. </description>
      <created by="Carmelo Montanez" on="2006-02-10"/>
      <modified by="Michael Kay" on="2013-01-17" change="simplify the param, see bug 20694"/>
      <environment>
         <param name="x"
                select="avg((1,2,4))"
                declared="true"/>
      </environment>
      <test>declare variable $x external; $x</test>
      <result>
         <any-of>
            <assert-string-value>2.333333333333333333</assert-string-value>
            <assert-string-value>2.333333333333</assert-string-value>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="extvardeclwithouttype-19">
      <description> Evaluates an external variable that attempts to cast an incompatible value. </description>
      <created by="Carmelo Montanez" on="2006-02-10"/>
      <modified by="Michael Kay" on="2013-01-17" change="simplify the param, see bug 20694"/>
      <environment>
         <param name="x"
                select="avg((1,2,4))"
                declared="true"/>
      </environment>
      <test>declare variable $x external; xs:dateTime($x)</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="extvardeclwithouttype-20">
      <description> Evaluates an external variable whose case is changed. </description>
      <created by="Carmelo Montanez" on="2006-02-10"/>
      <modified by="Michael Kay" on="2013-01-17" change="simplify the param, see bug 20694"/>
      <environment>
         <param name="x"
                select="lower-case('This String should be all in upper case')"
                declared="true"/>
      </environment>
      <test>declare variable $x external; fn:upper-case($x)</test>
      <result>
         <any-of>
            <assert-string-value>THIS STRING SHOULD BE ALL IN UPPER CASE</assert-string-value>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="extvardeclwithouttype-21">
      <description> Evaluates an external variable whose case is changed. </description>
      <created by="Carmelo Montanez" on="2006-02-10"/>
      <modified by="Michael Kay" on="2013-01-17" change="simplify the param, see bug 20694"/>
      <environment>
         <param name="x"
                select="upper-case('THIS STRING SHOULD ALL BE IN LOWER CASE')"
                declared="true"/>
      </environment>
      <test>declare variable $x external; fn:lower-case($x)</test>
      <result>
         <any-of>
            <assert-string-value>this string should all be in lower case</assert-string-value>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="extvardeclwithouttype-22">
      <description> Evaluates an external variable with no type whose value is succesfully casted. </description>
      <created by="Carmelo Montanez" on="2006-02-10"/>
      <modified by="Michael Kay" on="2013-01-17" change="simplify the param, see bug 20694"/>
      <environment>
         <param name="x"
                select="0 + 1"
                declared="true"/>
      </environment>
      <test>declare variable $x external; fn:not($x)</test>
      <result>
         <any-of>
            <assert-false/>
            <error code="FORG0006"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="extvardeclwithouttype-23">
      <description> Evaluates an external variable reference, with no assigned value. </description>
      <created by="Carmelo Montanez" on="2006-09-25"/>
      <test>declare variable $x external; $x</test>
      <result>
         <error code="XPDY0002"/>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWithout-1">
      <description> Two external variables with the same name. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare variable $input-context external; declare variable $input-context external; 1</test>
      <result>
         <error code="XQST0049"/>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWithout-2">
      <description> Two external variables with the same name and where the variable is used. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare variable $input-context external; declare variable $input-context external; $input-context</test>
      <result>
         <error code="XQST0049"/>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWithout-3">
      <description> An external variable using an undeclared prefix. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>
        declare default element namespace ""; 
        declare namespace prefix = ""; 
        declare variable $prefix:input-context external; 1</test>
      <result>
         <error code="XPST0081"/>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWithout-4">
      <description> If the value for an external variable can't be supplied, XPDY0002 must be raised. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>
        
        declare variable $exampleComThisVarIsNotRecognized external; $exampleComThisVarIsNotRecognized</test>
      <result>
         <error code="XPDY0002"/>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWithout-5">
      <description> If the value for an external variable can't be supplied, XPDY0002 must be raised(#2). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>
        declare namespace e = "http://example.com/ANamespace"; 
        declare variable $e:exampleComThisVarIsNotRecognized external; 
        $e:exampleComThisVarIsNotRecognized</test>
      <result>
         <error code="XPDY0002"/>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWithout-6">
      <description> An implementation may raise XPDY0002 on a declared external variable, although not necessary since it isn't used. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare variable $exampleComThisVarIsNotRecognized external; 1</test>
      <result>
         <any-of>
            <assert-eq>1</assert-eq>
            <error code="XPDY0002"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWithout-7">
      <description> An implementation may raise XPDY0002 on a declared external variable, although not necessary since it isn't used(#2). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare namespace e = "http://example.com/ANamespace"; declare variable $e:exampleComThisVarIsNotRecognized external; 1</test>
      <result>
         <any-of>
            <assert-eq>1</assert-eq>
            <error code="XPDY0002"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWithout-8">
      <description> It is ok to have space between '$' and the name in variable names. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare variable $ name := 3; $ name</test>
      <result>
         <assert-eq>3</assert-eq>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWithout-9">
      <description> Ensure a variable declaration doesn't violate stability rules. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare variable $e := current-time(); let $i := ($e, 1 to 50000, $e) return $i[1] = $i[last()]</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWithout-10">
      <description> Ensure node identity is handled through several variables. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare variable $e := <e> <a/> </e>; declare variable $f := $e; <r> { $e is $e, $f is $e, $e, $f } </r>]]></test>
      <result>
         <assert-xml><![CDATA[<r>true true<e><a/></e><e><a/></e></r>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWithout-11">
      <description> Description ensure node identity is handled through variables that has cardinality zero or more. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare variable $a as attribute()* := (attribute name1 {()}, attribute name2 {()}, attribute name3 {()}); declare variable $b as attribute()* := (attribute name1 {()}, attribute name2 {()}, attribute name3 {()}); $a/(let $p := position() return . is $b[$p])</test>
      <result>
         <assert-string-value>false false false</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWithout-12">
      <description> Reference a variable from two different node constructors. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare variable $a as attribute()* := (attribute name1 {()}, attribute name2 {()}, attribute name3 {()}); <r> <e> { $a } </e> <e> { $a } </e> </r>]]></test>
      <result>
         <assert-xml><![CDATA[<r><e name1="" name2="" name3=""/><e name1="" name2="" name3=""/></r>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWithout-13">
      <description> Evaluate the boolean value of a variable. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare variable $e := <e>{current-time()}</e>/(string-length(.) > 0); $e, if($e) then "SUCCESS" else "FAILURE"]]></test>
      <result>
         <assert-string-value>true SUCCESS</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWithout-14">
      <description> Double colon in assignment is syntactically invalid. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare variable $v ::= 1; 1</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWithout-15">
      <description> Space in assignment is syntactically invalid. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare variable $v : = 1; 1</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWithout-16">
      <description> Ensure that a start looking like a declaration, isn't treated as so. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare ne gt</test>
      <result>
         <error code="XPDY0002"/>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWithout-17">
      <description> Ensure the 'variable' keyword is parsed correctly. </description>
      <created by="Frans Englich" on="2008-01-03"/>
      <test>variable lt variable</test>
      <result>
         <error code="XPDY0002"/>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWithout-18">
      <description> XQuery 1.0 doesn't allow externals to have a default value. </description>
      <created by="Frans Englich" on="2008-11-13"/>
      <modified by="Michael Dyck" on="2011-09-05" change="Split off the XQuery 3.0 expectation (to K2-ExternalVariablesWithout-18b)"/>
      <dependency type="spec" value="XQ10"/>
      <test>declare variable $var external := 1; 1</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWithout-18b" covers="default-external-var">
      <description> XQuery 3.0 does allow externals to have a default value. </description>
      <created by="Frans Englich" on="2008-11-13"/>
      <modified by="Michael Dyck" on="2011-09-05" change="Split off the XQuery 3.0 expectation (from K2-ExternalVariablesWithout-18)"/>
      <dependency type="spec" value="XQ30+"/>
      <test>declare variable $var external := 1; 1</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWithout-19">
      <description> Ensure XPDY0002 is raised for global variables if there's no focus defined. </description>
      <created by="Frans Englich" on="2008-11-18"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare variable $global := count(*); <e/>/$global]]></test>
      <result>
         <error code="XPDY0002"/>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWithout-20">
      <description> Ensure XPDY0002 is raised for global variables if there's no focus defined. Reference the variable twice. </description>
      <created by="Frans Englich" on="2008-11-18"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare variable $global := count(*); 
        <e/>/($global, $global)]]></test>
      <result>
         <error code="XPDY0002"/>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWithout-21">
      <description> Use the global focus in various ways three references. </description>
      <created by="Frans Englich" on="2008-11-18"/>
      <environment ref="works-mod"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare variable $global := count(*); $global, <wrongFocus> <e1/> <e2/> </wrongFocus>/$global, $global]]></test>
      <result>
         <assert-string-value>1 1 1</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWithout-22">
      <description> Use the global focus in various ways three references. </description>
      <created by="Frans Englich" on="2008-11-18"/>
      <environment ref="works-mod"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare variable $global := count(*); <wrongFocus> <e1/> <e2/> </wrongFocus>/$global]]></test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>
   
      <test-case name="extvardeclwithtype-1">
      <description> Evaluates an external variable declaration with type Use type xs:string. </description>
      <created by="Carmelo Montanez" on="2006-02-09"/>
      <environment>
         <param name="x"
                select="(: Name: extvardeclwithtypetobind-1 :) (: Description: Binding a string value for extvardeclwithtype-1.:) &#34;abc&#34;"
                declared="true"/>
      </environment>
      <test>declare variable $x as xs:string external; $x</test>
      <result>
         <assert-string-value>abc</assert-string-value>
      </result>
   </test-case>

   <test-case name="extvardeclwithtype-2">
      <description> Evaluates an external variable declaration with type Use type xs:date. </description>
      <created by="Carmelo Montanez" on="2006-02-09"/>
      <environment>
         <param name="x"
                select="(: Name: extvardeclwithtypetobind-2 :) (: Description: Binding a date value for extvardeclwithtype-2.:) xs:date(&#34;2000-01-01+05:00&#34;)"
                declared="true"/>
      </environment>
      <test>declare variable $x as xs:date external; fn:string($x)</test>
      <result>
         <assert-string-value>2000-01-01+05:00</assert-string-value>
      </result>
   </test-case>

   <test-case name="extvardeclwithtype-3">
      <description> Evaluates an external variable declaration with type Use type xs:ineteger. </description>
      <created by="Carmelo Montanez" on="2006-02-09"/>
      <environment>
         <param name="x"
                select="(: Name: extvardeclwithtypetobind-3 :) (: Description: Binding an integer value for extvardeclwithtype-3.:) xs:integer(2)"
                declared="true"/>
      </environment>
      <test>declare variable $x as xs:integer external; $x</test>
      <result>
         <assert-eq>2</assert-eq>
      </result>
   </test-case>

   <test-case name="extvardeclwithtype-4">
      <description> Evaluates an external variable declaration with type Use type xs:double. </description>
      <created by="Carmelo Montanez" on="2006-02-09"/>
      <environment>
         <param name="x"
                select="xs:double(1.2E2)"
                declared="true"/>
      </environment>
      <test>declare variable $x as xs:double external; $x</test>
      <result>
         <assert-eq>120</assert-eq>
      </result>
   </test-case>

   <test-case name="extvardeclwithtype-5">
      <description> Evaluates an external variable declaration with type Use type xs:boolean. </description>
      <created by="Carmelo Montanez" on="2006-02-09"/>
      <environment>
         <param name="x"
                select="true()"
                declared="true"/>
      </environment>
      <test>declare variable $x as xs:boolean external; fn:string($x)</test>
      <result>
         <assert-string-value>true</assert-string-value>
      </result>
   </test-case>

   <test-case name="extvardeclwithtype-6">
      <description> Evaluates an external variable declaration with type Use type xs:float. </description>
      <created by="Carmelo Montanez" on="2006-02-09"/>
      <environment>
         <param name="x"
                select="xs:float(1267.43233E12)"
                declared="true"/>
      </environment>
      <test>declare variable $x as xs:float external; $x</test>
      <result>
         <any-of>
            <assert-string-value>1.2674323E15</assert-string-value>
            <assert-string-value>1.2674324E15</assert-string-value>
         </any-of>
      </result>
   </test-case>

   <test-case name="extvardeclwithtype-7">
      <description> Evaluates an external variable declaration with type Use type xs:decimal. </description>
      <created by="Carmelo Montanez" on="2006-02-09"/>
      <environment>
         <param name="x"
                select="xs:decimal(12678967.543233)"
                declared="true"/>
      </environment>
      <test>declare variable $x as xs:decimal external; $x</test>
      <result>
         <assert-string-value>12678967.543233</assert-string-value>
      </result>
   </test-case>

   <test-case name="extvardeclwithtype-8">
      <description> Evaluates an external variable that adds two integers Both queries perform the operation </description>
      <created by="Carmelo Montanez" on="2006-02-09"/>
      <environment>
         <param name="x"
                select="let $var := 1 + 1 return $var"
                declared="true"/>
      </environment>
      <test>declare variable $x as xs:integer external; $x + $x</test>
      <result>
         <assert-eq>4</assert-eq>
      </result>
   </test-case>

   <test-case name="extvardeclwithtype-9">
      <description> Evaluates an external variable that adds two integers This query does NOT performs the operation </description>
      <created by="Carmelo Montanez" on="2006-02-09"/>
      <environment>
         <param name="x"
                select="let $var := 1 + 1 return $var"
                declared="true"/>
      </environment>
      <test>declare variable $x as xs:integer external; $x</test>
      <result>
         <assert-eq>2</assert-eq>
      </result>
   </test-case>

   <test-case name="extvardeclwithtype-10">
      <description> Evaluates an external variable that adds two integers Only THIS query performs the operation. </description>
      <created by="Carmelo Montanez" on="2006-02-09"/>
      <environment>
         <param name="x"
                select="let $var := 1 return $var"
                declared="true"/>
      </environment>
      <test>declare variable $x as xs:integer external; $x + $x</test>
      <result>
         <assert-eq>2</assert-eq>
      </result>
   </test-case>

   <test-case name="extvardeclwithtype-11">
      <description> Evaluates an external variable that multiply two integers Both queries perform the operation. </description>
      <created by="Carmelo Montanez" on="2006-02-09"/>
      <environment>
         <param name="x"
                select="let $var := 2 * 2 return $var"
                declared="true"/>
      </environment>
      <test>declare variable $x as xs:integer external; $x * $x</test>
      <result>
         <assert-eq>16</assert-eq>
      </result>
   </test-case>

   <test-case name="extvardeclwithtype-12">
      <description> Evaluates an external variable that subtract two integers Both queries perform the operation. </description>
      <created by="Carmelo Montanez" on="2006-02-09"/>
      <environment>
         <param name="x"
                select="let $var := 5 - 2 return $var"
                declared="true"/>
      </environment>
      <test>declare variable $x as xs:integer external; $x - xs:integer(1)</test>
      <result>
         <assert-eq>2</assert-eq>
      </result>
   </test-case>

   <test-case name="extvardeclwithtype-13">
      <description> Evaluates an external variable that divides two integers Both queries perform the operation. </description>
      <created by="Carmelo Montanez" on="2006-02-09"/>
      <environment>
         <param name="x"
                select="let $var := 20 idiv 2 return $var"
                declared="true"/>
      </environment>
      <test>declare variable $x as xs:integer external; $x idiv xs:integer(2)</test>
      <result>
         <assert-eq>5</assert-eq>
      </result>
   </test-case>

   <test-case name="extvardeclwithtype-14">
      <description> Evaluates an external variable that divides (div operator) two integers Both queries perform the operation. </description>
      <created by="Carmelo Montanez" on="2006-02-09"/>
      <environment>
         <param name="x"
                select="let $var := 40 div 2 return xs:integer($var)"
                declared="true"/>
      </environment>
      <test>declare variable $x as xs:integer external; $x div xs:integer(10)</test>
      <result>
         <assert-eq>2</assert-eq>
      </result>
   </test-case>

   <test-case name="extvardeclwithtype-15">
      <description> Evaluates an external variable that perform modulus operation on two integers Both queries perform the operation. </description>
      <created by="Carmelo Montanez" on="2006-02-09"/>
      <environment>
         <param name="x"
                select="let $var := 55 mod 3 return $var"
                declared="true"/>
      </environment>
      <test>declare variable $x as xs:integer external; $x mod xs:integer(2)</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="extvardeclwithtype-16">
      <description> Evaluates an external variable that evaluates a boolean expression Both queries perform the operation. </description>
      <created by="Carmelo Montanez" on="2006-02-09"/>
      <environment>
         <param name="x"
                select="let $var := true() and true() return $var"
                declared="true"/>
      </environment>
      <test>declare variable $x as xs:boolean external; $x and fn:false()</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="extvardeclwithtype-17">
      <description> Evaluates an external variable that evaluates a boolean expression Both queries perform the operation. </description>
      <created by="Carmelo Montanez" on="2006-02-09"/>
      <environment>
         <param name="x"
                select="let $var := true() or true() return $var"
                declared="true"/>
      </environment>
      <test>declare variable $x as xs:boolean external; $x or fn:false()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="extvardeclwithtype-18">
      <description> Evaluates an external variable that evaluates avg function. </description>
      <created by="Carmelo Montanez" on="2006-02-09"/>
      <environment>
         <param name="x"
                select="let $var := avg((1,2,4)) return xs:float($var)"
                declared="true"/>
      </environment>
      <test>declare variable $x as xs:float external; $x</test>
      <result>
         <any-of>
            <assert-string-value>2.3333333</assert-string-value>
            <assert-string-value>2.33333</assert-string-value>
         </any-of>
      </result>
   </test-case>

   <test-case name="extvardeclwithtype-19">
      <description> Evaluates an external variable that attempts too cast an incompatible value. </description>
      <created by="Carmelo Montanez" on="2006-02-09"/>
      <environment>
         <param name="x"
                select="let $var := avg((1,2,4)) return $var"
                declared="true"/>
      </environment>
      <test>declare variable $x as xs:dateTime external; $x</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="extvardeclwithtype-20">
      <description> Evaluates an external variable whose case is changed. </description>
      <created by="Carmelo Montanez" on="2006-02-09"/>
      <environment>
         <param name="x"
                select="let $var := lower-case(&#34;This String should be all in upper case&#34;) return $var"
                declared="true"/>
      </environment>
      <test>declare variable $x as xs:string external; fn:upper-case($x)</test>
      <result>
         <assert-string-value>THIS STRING SHOULD BE ALL IN UPPER CASE</assert-string-value>
      </result>
   </test-case>

   <test-case name="extvardeclwithtype-21">
      <description> Evaluates an external variable whose case is changed. </description>
      <created by="Carmelo Montanez" on="2006-02-09"/>
      <environment>
         <param name="x"
                select="let $var := upper-case(&#34;THIS STRING SHOULD ALL BE IN LOWER CASE&#34;) return $var"
                declared="true"/>
      </environment>
      <test>declare variable $x as xs:string external; fn:lower-case($x)</test>
      <result>
         <assert-string-value>this string should all be in lower case</assert-string-value>
      </result>
   </test-case>

   <test-case name="extvardeclwithtype-22">
      <description> Evaluates an external variable whose value is succesfully casted. </description>
      <created by="Carmelo Montanez" on="2006-02-09"/>
      <environment>
         <param name="x"
                select="let $var := xs:integer(0) + xs:integer(1) return xs:boolean($var)"
                declared="true"/>
      </environment>
      <test>declare variable $x as xs:boolean external; fn:not($x)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="extvardeclwithtype-23">
      <description>This query opens a C++ GCC-XML output file, and outputs a report describing the use of globals variables. </description>
      <created by="Frans Englich" on="2007-06-27"/>
      <environment ref="CPPGlobals"/>
      <dependency type="spec" value="XQ10+"/>
      <test file="VarDecl.external/extvardeclwithtype-23.xq"/>
      <result>
         <assert-xml file="VarDecl.external/extvardeclwithtype-23.out"/>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWith-1">
      <description> Two external variables with the same name where the first has a type declaration. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare variable $input-context as item()* external; declare variable $input-context external; 1</test>
      <result>
         <error code="XQST0049"/>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWith-2">
      <description> Two external variables with the same name where the last has a type declaration. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare variable $input-context external; declare variable $input-context as item()* external; 1</test>
      <result>
         <error code="XQST0049"/>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWith-3">
      <description> Two external variables with the same name where both have a type declaration. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare variable $input-context as item()* external ; declare variable $input-context as item()*external ; 1</test>
      <result>
         <error code="XQST0049"/>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWith-4">
      <description> Two external variables with the same name where both have a type declaration and the variable is used. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare variable $input-context as item()* external ; declare variable $input-context as item()*external ; $input-context</test>
      <result>
         <error code="XQST0049"/>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWith-5">
      <description> Two external variables with the same name where both have a type declaration. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare variable $input-context as item()* external; declare variable $input-context as item()*external; 1</test>
      <result>
         <error code="XQST0049"/>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWith-6">
      <description> Two external variables with the same name where both have a type declaration which are different. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare variable $input-context as xs:string* external; declare variable $input-context as item()*external; 1</test>
      <result>
         <error code="XQST0049"/>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWith-7">
      <description> If the value for an external variable can't be supplied, XPDY0002 must be raised. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare variable $exampleComThisVarIsNotRecognized as xs:string *external; $exampleComThisVarIsNotRecognized</test>
      <result>
         <error code="XPDY0002"/>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWith-8">
      <description> If the value for an external variable can't be supplied, XPDY0002 must be raised(#2). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare namespace e = "http://example.com/ANamespace"; declare variable $e:exampleComThisVarIsNotRecognized as comment() *external; $e:exampleComThisVarIsNotRecognized</test>
      <result>
         <error code="XPDY0002"/>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWith-9">
      <description> An implementation may raise XPDY0002 on a declared external variable, although not necessary since it isn't used. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare variable $exampleComThisVarIsNotRecognized as processing-instruction()? external; 1</test>
      <result>
         <any-of>
            <assert-eq>1</assert-eq>
            <error code="XPDY0002"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWith-10">
      <description> An implementation may raise XPDY0002 on a declared external variable, although not necessary since it isn't used(#2). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare namespace e = "http://example.com/ANamespace"; declare variable $e:exampleComThisVarIsNotRecognized as element(*) external; 1</test>
      <result>
         <any-of>
            <assert-eq>1</assert-eq>
            <error code="XPDY0002"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWith-11">
      <description> The assignment expression is ExprSingle, not Expr. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare variable $i := 1, 1; 1</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWith-12">
      <description> Variable declarations doesn't cause type conversion. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare variable $i as xs:integer := xs:untypedAtomic("1"); $i</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWith-13">
      <description> variable declarations doesn't cause numeric promotion. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare variable $i as xs:float := 1.1 ; $i</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWith-14">
      <description> variable declarations doesn't cause numeric promotion(#2). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare variable $i as xs:double := 1.1 ; $i</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWith-15">
      <description> variable declarations doesn't cause numeric promotion(#3). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare variable $i as xs:float := 1 ; $i</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWith-16">
      <description> variable declarations doesn't cause numeric promotion(#4). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare variable $i as xs:double := 1 ; $i</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWith-17">
      <description> variable declarations doesn't cause numeric promotion(#5). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare variable $i as xs:double := xs:float(3) ; $i</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWith-18">
      <description> variable declarations doesn't cause string promotion conversion. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare variable $i as xs:string := xs:untypedAtomic("a string") ; $i</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWith-19">
      <description> variable declarations doesn't cause URI promotion conversion. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare variable $i as xs:string := xs:anyURI("http://www.example.com/") ; $i</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWith-20">
      <description> The name of an external variable clashing with the name of a variable declared in the query. </description>
      <created by="Frans Englich" on="2008-02-22"/>
      <environment ref="TopMany"/>
      <test>declare variable $input-context1 external; declare variable $input-context1 := 1; 1</test>
      <result>
         <error code="XQST0049"/>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWith-21">
      <description> The name of an external variable clashing with the name of a variable declared in the query(reversed order). </description>
      <created by="Frans Englich" on="2008-02-22"/>
      <environment ref="TopMany"/>
      <test>declare variable $input-context1 external; declare variable $input-context1 := 1; 1</test>
      <result>
         <error code="XQST0049"/>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWith-22">
      <description> A complex type declaration. </description>
      <created by="Frans Englich" on="2009-01-08"/>
      <modified by="O'Neil Delpratt" on="2013-06-07" change="Expected result now an error. Relates to bug issue #21960" />
      <modified by="Michael Kay" on="2013-06-07" change="Split test into two. Relates to bug issue #21960" />      
      <dependency type="spec" value="XQ30+"/>
      <dependency type="feature" value="typedData" satisfied="true"/>
      <test><![CDATA[declare variable $v as element(*, xs:untyped?)+ := <e/>; exists($v/*)]]></test>
      <result>
         <error code="XPTY0004" />
      </result>
   </test-case>
   
   <test-case name="K2-ExternalVariablesWith-22a">
      <description> A complex type declaration. </description>
      <created by="Frans Englich" on="2009-01-08"/>
      <modified by="O'Neil Delpratt" on="2013-06-07" change="Expected result now an error. Relates to bug issue #21960" />
      <modified by="Michael Kay" on="2013-06-07" change="Split test into two. Relates to bug issue #21960" />      
      <dependency type="spec" value="XQ30+"/>
      <dependency type="feature" value="typedData" satisfied="false"/>
      <test><![CDATA[declare variable $v as element(*, xs:untyped?)+ := <e/>; exists($v/*)]]></test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWith-23">
      <description> A complex type declaration. </description>
      <created by="Frans Englich" on="2009-01-08"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare variable $v as element(elementName, xs:anyType?)+ := <elementName/>; 1]]></test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWith-24">
      <description> '+' is not allowed for the atomic type in element(). </description>
      <created by="Frans Englich" on="2009-01-08"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare variable $v as element(*, xs:untyped+)+ := <e/>; 1]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWith-25">
      <description> '*' is not allowed for the atomic type in element(). </description>
      <created by="Frans Englich" on="2009-01-08"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare variable $v as element(*, xs:untyped*)+ := <e/>; 1]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWith-26">
      <description> '+' is not allowed for the atomic type in element(). </description>
      <created by="Frans Englich" on="2009-01-08"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare variable $v as element(notWildcard, xs:untyped+)+ := <e/>; 1]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-ExternalVariablesWith-27">
      <description> '*' is not allowed for the atomic type in element(). </description>
      <created by="Frans Englich" on="2009-01-08"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare variable $v as element(notWildcard, xs:untyped*)+ := <e/>; 1]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>
</test-set>
