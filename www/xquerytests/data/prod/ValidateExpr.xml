<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="prod-ValidateExpr">
   <description>Tests for the ValidateExpr production</description>
   <link type="spec" document="http://www.w3.org/TR/xquery-30/"
         idref="doc-xquery30-ValidateExpr"/>
   <link type="spec" document="XQuery" section-number="3.13" idref="id-validate"/>
   
   <environment name="orderData">
      <source role="." file="OrderByClause/orderData.xml" validation="strict">
         <description>A Schema validated xml file, that contains values for some of the order by tests generated by NIST.</description>
         <created by="Carmelo Montanez" on="2005-06-01"/>
      </source>
      <schema uri="http://www.w3.org/XQueryTestOrderBy" file="OrderByClause/orderData.xsd">
         <description>A Schema for orderData.xml</description>
         <created by="Carmelo Montanez" on="2005-06-01"/>
      </schema>
   </environment> 
   
   <environment name="ListUnionTypes">
      <schema uri="http://www.w3.org/XQueryTest/ListUnionTypes" file="ValidateExpr/listunion.xsd">
         <description>A schema defining a list of unions.</description>
         <created by="Anonymous" on="2006-06-07"/>
      </schema>
   </environment> 
   
   <environment name="simplexsd">
      <schema uri="http://www.w3.org/XQueryTest/simple" file="ValidateExpr/simple.xsd">
         <description>A schema for simple context tests.</description>
         <created by="Anonymous" on="2005-12-07"/>
      </schema>
   </environment>

    <environment name="xq-e18xsd">
      <schema uri="http://www.example.com/ns/test/xq-e18" file="ValidateExpr/xq-e18.xsd">
         <description>A schema for simple context tests.</description>
         <created by="Anonymous" on="2005-12-07"/>
      </schema>
   </environment>
   
   <environment name="constraints">
      <schema uri="http://www.w3.org/constraints" file="ValidateExpr/constraints.xsd">
         <description>Schema with unique/id/idref constraints.</description>
         <created by="Anonymous" on="2010-06-10"/>
      </schema>
   </environment>
   
   <environment name="complexSimple">
      <schema uri="http://www.w3.org/query-test/complexSimple" file="ValidateExpr/simpleContent.xsd">
         <description>Schema for complex types with simple content</description>
         <created by="Anonymous" on="2009-11-20"/>
      </schema>
   </environment>
   
   <environment name="hats" >
        <schema uri="http://www.w3.org/XQueryTest/hats" file="SchemaImport/hats.xsd">
            <description>A schema defining a motley collection of types.</description>
            <created by="Michael Kay" on="2006-11-14"/>
        </schema>
   </environment>
   
   <environment name="complexData">
      <source role="." file="../fn/data/complexData.xml" validation="strict">
         <description>Document containing some nasty cases for fn:data.</description>
         <created by="Oliver Hallam" on="2009-02-27"/>
      </source>
      <schema uri="http://www.cbcl.co.uk/XQueryTest/complexData" file="../fn/data/complexData.xsd">
		  <description>Schema containing some nasty cases for fn:data.</description>
		  <created by="Oliver Hallam" on="2009-02-27"/>
	  </schema>
   </environment>        
 
   <environment name="validate">
      <schema uri="http://www.w3.org/XQueryTest/testcases" file="../fn/nilled/validate.xsd">
          <description>A Schema with some nillable elements</description>
          <created by="Tim Mills" on="2008-01-01"/>
      </schema>
      <source role="." file="../fn/nilled/validate.xml" validation="strict">
          <description>An instance with some nilled elements</description>
          <created by="Tim Mills" on="2008-01-01"/>
      </source>
      <!--<namespace prefix="" uri="http://www.w3.org/XQueryTest/testcases"/>-->
   </environment>
   
   <environment name="user-defined-types">
      <schema uri="http://www.w3.org/XQueryTest/userDefinedTypes" file="../docs/userdefined.xsd">
         <description>A schema user defined types and constructor tests</description>
         <created by="Anonymous" on="2006-04-03"/>
      </schema>   
   </environment>
   
   <dependency type="spec" value="XQ10+"/>
   <dependency type="feature" value="schemaImport"/>
   <dependency type="feature" value="schemaValidation"/>

   <test-case name="validateexpr-1">
      <description> Evaluation of a validate expression with improper operand for operation. </description>
      <created by="Carmelo Montanez" on="2005-12-19"/>
      <environment ref="orderData"/>
      <test>
          declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
          import schema "http://www.w3.org/XQueryTestOrderBy"; 
          validate {/DataValues/Strings union /DataValues/PositiveNumbers}
      </test>
      <result>
         <error code="XQTY0030"/>
      </result>
   </test-case>

   <test-case name="validateexpr-2">
      <description> Evaluation of a validate expression with newly constructed Element node and strict validation. </description>
      <created by="Carmelo Montanez" on="2005-12-19"/>
      <environment ref="orderData"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        import schema "http://www.w3.org/XQueryTestOrderBy"; 
        let $var := <Strings><orderData>one string</orderData></Strings> 
        return validate strict {$var}
      ]]></test>
      <result>
         <assert-xml><![CDATA[<Strings xmlns="http://www.w3.org/XQueryTestOrderBy"><orderData>one string</orderData></Strings>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="validateexpr-3">
      <description> Evaluation of a validate expression with newly constructed Element node and lax validation. </description>
      <created by="Carmelo Montanez" on="2005-12-19"/>
      <environment ref="orderData"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        import schema "http://www.w3.org/XQueryTestOrderBy"; 
        let $var := <Strings><orderData>one string</orderData></Strings> 
        return validate lax {$var}
      ]]></test>
      <result>
         <assert-xml><![CDATA[<Strings xmlns="http://www.w3.org/XQueryTestOrderBy"><orderData>one string</orderData></Strings>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="validateexpr-4">
      <description> Evaluation of a validate expression that results on a comment node with imnplicit strict mode. </description>
      <created by="Carmelo Montanez" on="2005-12-19"/>
      <environment ref="orderData"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        import schema "http://www.w3.org/XQueryTestOrderBy"; 
        validate {<!-- A Comment Node -->}
      ]]></test>
      <result>
         <error code="XQTY0030"/>
      </result>
   </test-case>

   <test-case name="validateexpr-5">
      <description> Evaluation of a validate expression that results on a comment node with lax mode. </description>
      <created by="Carmelo Montanez" on="2005-12-19"/>
      <environment ref="orderData"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        import schema "http://www.w3.org/XQueryTestOrderBy"; 
        validate {<!-- A Comment Node -->}
      ]]></test>
      <result>
         <error code="XQTY0030"/>
      </result>
   </test-case>

   <test-case name="validateexpr-6">
      <description> Evaluation of a validate expression that results on a PI node with strict mode. </description>
      <created by="Carmelo Montanez" on="2005-12-20"/>
      <environment ref="orderData"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        import schema "http://www.w3.org/XQueryTestOrderBy"; 
        validate strict {<?format role="output" ?>}
      ]]></test>
      <result>
         <error code="XQTY0030"/>
      </result>
   </test-case>

   <test-case name="validateexpr-7">
      <description> Evaluation of a validate expression that results on a PI node with lax mode. </description>
      <created by="Carmelo Montanez" on="2005-12-20"/>
      <environment ref="orderData"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        import schema "http://www.w3.org/XQueryTestOrderBy"; 
        validate lax {<?format role="output" ?>}
      ]]></test>
      <result>
         <error code="XQTY0030"/>
      </result>
   </test-case>

   <test-case name="validateexpr-8">
      <description> Evaluation of a validate expression that results on a text node with strict mode. </description>
      <created by="Carmelo Montanez" on="2005-12-20"/>
      <environment ref="orderData"/>
      <test>
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        import schema "http://www.w3.org/XQueryTestOrderBy"; 
        validate strict {text {"A Text Node"}}
      </test>
      <result>
         <error code="XQTY0030"/>
      </result>
   </test-case>

   <test-case name="validateexpr-9">
      <description> Evaluation of a validate expression that results on a text node with lax mode. </description>
      <created by="Carmelo Montanez" on="2005-12-20"/>
      <environment ref="orderData"/>
      <test>
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        import schema "http://www.w3.org/XQueryTestOrderBy"; 
        validate lax {text {"A Text Node"}}
      </test>
      <result>
         <error code="XQTY0030"/>
      </result>
   </test-case>

   <test-case name="validateexpr-10">
      <description> Evaluation of a validate expression that a newly strict validated node does not have a parent (read from a file). </description>
      <created by="Carmelo Montanez" on="2005-12-20"/>
      <environment ref="orderData"/>
      <test>
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        import schema "http://www.w3.org/XQueryTestOrderBy"; 
        let $var := validate strict {exactly-one(/DataValues/Strings)} 
        return fn:count($var/parent::node())
      </test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="validateexpr-11">
      <description> Evaluation of a validate expression that a newly lax validated node does not have a parent (read from a file). Use fn:count to avoid empty file. </description>
      <created by="Carmelo Montanez" on="2005-12-20"/>
      <environment ref="orderData"/>
      <test>
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        import schema "http://www.w3.org/XQueryTestOrderBy"; 
        let $var := validate lax {exactly-one(/DataValues/Strings)} 
        return fn:count($var/parent::node())
      </test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="validateexpr-12">
      <description> Evaluation of a validate expression that a newly created strict validated node does not have a parent (read from a file). Use fn:count to avoid empty file. </description>
      <created by="Carmelo Montanez" on="2005-12-20"/>
      <environment ref="orderData"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        import schema "http://www.w3.org/XQueryTestOrderBy"; 
        let $var := validate strict {<Strings><orderData>A String</orderData></Strings>} 
        return fn:count($var/parent::node())]]></test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="validateexpr-13">
      <description> Evaluation of a validate expression that a newly created lax validated node does not have a parent (read from a file). Use fn:count to avoid empty file. </description>
      <created by="Carmelo Montanez" on="2005-12-20"/>
      <environment ref="orderData"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        import schema "http://www.w3.org/XQueryTestOrderBy"; 
        let $var := validate lax {<Strings><orderData>A String</orderData></Strings>} 
        return fn:count($var/parent::node())
      ]]></test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="validateexpr-14">
      <description> Evaluation of a validate expression that a newly created strict element node used with an "if" expression. </description>
      <created by="Carmelo Montanez" on="2005-12-20"/>
      <environment ref="orderData"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy";
        import schema "http://www.w3.org/XQueryTestOrderBy";
        validate strict {if (fn:true()) then <Strings><orderData>A String</orderData></Strings> else <Failed>This test failed</Failed>}
      ]]></test>
      <result>
         <assert-xml><![CDATA[<Strings xmlns="http://www.w3.org/XQueryTestOrderBy"><orderData>A String</orderData></Strings>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="validateexpr-15">
      <description> Evaluation of a validate expression that a newly created lax element node used with an "if" expression. </description>
      <created by="Carmelo Montanez" on="2005-12-20"/>
      <environment ref="orderData"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy";
        import schema "http://www.w3.org/XQueryTestOrderBy";
        validate lax {if (fn:true()) then <Strings><orderData>A String</orderData></Strings> else <Failed>This test failed</Failed>}
      ]]></test>
      <result>
         <assert-xml><![CDATA[<Strings xmlns="http://www.w3.org/XQueryTestOrderBy"><orderData>A String</orderData></Strings>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="validateexpr-16">
      <description> Evaluation of a validate expression that a newly created lax element node used with an "if" expression (uses else part). </description>
      <created by="Carmelo Montanez" on="2005-12-20"/>
      <environment ref="orderData"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy";
        import schema "http://www.w3.org/XQueryTestOrderBy";
        validate lax {if (fn:false()) then <Failed>This test failed</Failed> else <Strings><orderData>A String</orderData></Strings>}
      ]]></test>
      <result>
         <assert-xml><![CDATA[<Strings xmlns="http://www.w3.org/XQueryTestOrderBy"><orderData>A String</orderData></Strings>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="validateexpr-17">
      <description> Evaluation of a validate expression that a newly created lax element node used with an "or" expression </description>
      <created by="Carmelo Montanez" on="2005-12-20"/>
      <environment ref="orderData"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy";
        import schema "http://www.w3.org/XQueryTestOrderBy";
        validate lax {if (fn:true() or fn:true()) then <Strings><orderData>A String</orderData></Strings> else <Failed>This test failed</Failed> }
      ]]></test>
      <result>
         <assert-xml><![CDATA[<Strings xmlns="http://www.w3.org/XQueryTestOrderBy"><orderData>A String</orderData></Strings>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="validateexpr-18">
      <description> Evaluation of a validate expression that a newly created lax element node used with a quantified expression ("every" operand). </description>
      <created by="Carmelo Montanez" on="2005-12-20"/>
      <environment ref="orderData"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy";
        import schema "http://www.w3.org/XQueryTestOrderBy";
        validate lax {if (every $x in (1,2,3) satisfies $x < 5) then <Strings><orderData>A String</orderData></Strings> else <Failed>This test failed</Failed> }
      ]]></test>
      <result>
         <assert-xml><![CDATA[<Strings xmlns="http://www.w3.org/XQueryTestOrderBy"><orderData>A String</orderData></Strings>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="validateexpr-19">
      <description> Evaluation of a validate expression that a newly created lax element node used with a quantified expression ("every" operand). </description>
      <created by="Carmelo Montanez" on="2005-12-20"/>
      <environment ref="orderData"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy";
        import schema "http://www.w3.org/XQueryTestOrderBy";
        validate lax {if (some $x in (1,2,3) satisfies $x = 2) then <Strings><orderData>A String</orderData></Strings> else <Failed>This test failed</Failed> }
      ]]></test>
      <result>
         <assert-xml><![CDATA[<Strings xmlns="http://www.w3.org/XQueryTestOrderBy"><orderData>A String</orderData></Strings>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="validateexpr-20">
      <description> Evaluation of a validate expression that a newly created lax element node used with a typeswitch expression. </description>
      <created by="Carmelo Montanez" on="2005-12-20"/>
      <environment ref="orderData"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        import schema "http://www.w3.org/XQueryTestOrderBy";
        validate lax {typeswitch ("A String") 
                      case $i as xs:decimal return <wrap>test failed</wrap> 
                      case $i as xs:string return <Strings><orderData>A String</orderData></Strings> 
                      default return <Failed>This test failed</Failed> }
      ]]></test>
      <result>
         <assert-xml><![CDATA[<Strings xmlns="http://www.w3.org/XQueryTestOrderBy"><orderData>A String</orderData></Strings>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="validateexpr-21">
      <description> Evaluation of a validate expression that a newly created lax element node used with a FLWOR expression. </description>
      <created by="Carmelo Montanez" on="2005-12-20"/>
      <environment ref="orderData"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy";
        import schema "http://www.w3.org/XQueryTestOrderBy";
        validate lax {let $var := <Strings><orderData>A String</orderData></Strings> return $var }
      ]]></test>
      <result>
         <assert-xml><![CDATA[<Strings xmlns="http://www.w3.org/XQueryTestOrderBy"><orderData>A String</orderData></Strings>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="validateexpr-23">
      <description> Evaluation of a validate expression, whose operand node is a newly constructed
         top element node for which there is no declaration. </description>
      <created by="Carmelo Montanez" on="2006-04-11"/>
      <environment ref="orderData"/>
      <test>
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        import schema "http://www.w3.org/XQueryTestOrderBy";
        let $var := validate strict { element DataValues1 {element Strings {"data"}}}
         return $var
      </test>
      <result>
         <error code="XQDY0084"/>
      </result>
   </test-case>

   <test-case name="validateexpr-24">
      <description> Test for the correct typed value when a list of union types is used. </description>
      <created by="Andrew Eisenberg" on="2006-06-07"/>
      <environment ref="ListUnionTypes"/>
      <test><![CDATA[
        declare namespace lu = 'http://www.w3.org/XQueryTest/ListUnionTypes' ;
        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";
        let $v := validate { <lu:e>1 1.0e0</lu:e> } let $dv := data($v) 
        return ($dv[1] instance of xs:integer, $dv[2] instance of xs:float)
      ]]></test>
      <result>
         <assert-string-value>true true</assert-string-value>
      </result>
   </test-case>

   <test-case name="validateexpr-25">
      <description> Test for Error condition XQDY0027. Dynamic error during validation. </description>
      <created by="Carmelo Montanez" on="2006-07-13"/>
      <environment ref="simplexsd"/>
      <test><![CDATA[
        import schema namespace simple="http://www.w3.org/XQueryTest/simple";
        validate strict {<simple:duration>sorry, no duration here</simple:duration>}
      ]]></test>
      <result>
         <error code="XQDY0027"/>
      </result>
   </test-case>

   <test-case name="validateexpr-26">
      <description> Test For error condition XQDY0061 using a document node. </description>
      <created by="Carmelo Montanez" on="2006-07-13"/>
      <modified by="Michael Kay" on="2012-05-17" change="see bug 14267"/>
      <test><![CDATA[
        validate { document { <a/>, <b/> } }
      ]]></test>
      <result>
         <any-of>
            <error code="XQDY0061"/>
            <error code="XQDY0084"/>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="validateexpr-27">
      <description>name: validateexpr-27 description: Test Bug 4519, [DM] Definition of is-id property </description>
      <created by="Norm Walsh" on="2010-03-10"/>
      <environment>
        <source role="." file="ValidateExpr/dm-e005.xml" validation="strict"/>
        <schema uri="http://www.example.com/ns/test" file="ValidateExpr/dm-e005.xsd"/>
      </environment>
      <dependency type="spec" value="XQ10+"/>
      <dependency type="feature" value="schemaImport"/>
      <test><![CDATA[
        import schema namespace t="http://www.example.com/ns/test";
        declare variable $input-context := (/);
        let $doc := validate strict { $input-context } 
        let $anid := id("anid", $doc) 
        return <results> 
                    <para1 idcount="{count(id('anid', $doc))}"/> 
                    <para2 idcount="{count(id('anid2', $doc))}"/> 
                    <para2 idcount="{count(id('34', $doc))}"/> 
                    <para3 idcount="{count(id('anid3', $doc))}"/> 
                    <para3 idcount="{count(id('anid4 anid5', $doc))}"/> 
               </results>
      ]]></test>
      <result>
         <assert-xml><![CDATA[<results><para1 idcount="1"/><para2 idcount="1"/><para2 idcount="0"/><para3 idcount="1"/><para3 idcount="0"/></results>]]></assert-xml>
      </result>
   </test-case>
   
   <test-case name="validateexpr-28">
      <description>name: validateexpr-28 description: Test Bug 5223, [XPath] Casting rules in 3.5.2 General Comparisons (editorial) </description>
      <created by="Norm Walsh" on="2010-03-11"/>
      <modified by="O'Neil Delpratt" on="2011-09-07" change="Referenced the schema in environment. Removed unused variable input-context1"/>
      <modified by="O'Neil Delpratt" on="2011-10-14" change="Environment tag moved before dependency. Bug #14461"/>
      <environment ref="xq-e18xsd" />
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        import schema namespace t="http://www.example.com/ns/test/xq-e18";
        let $doc := validate strict { document { <doc xmlns="http://www.example.com/ns/test/xq-e18"> <para1>PT3H21M</para1> <para2>P3M</para2> </doc> } } let $p1 := data($doc/t:doc/t:para1) let $p2 := data($doc/t:doc/t:para2) let $t1 := xs:dayTimeDuration("PT3H21M") let $t2 := xs:yearMonthDuration("P3M") return <results> <case1>{if ($p1 = $t1) then "pass" else "fail"}</case1> <case2>{if ($p2 = $t2) then "pass" else "fail"}</case2> </results>
      ]]></test>
      <result>
         <any-of>
            <assert-xml><![CDATA[<results><case1>pass</case1><case2>pass</case2></results>]]></assert-xml>
            <error code="XQST0012"/>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="validateexpr-29">
      <description>Name : validateexpr-29  Test For error condition XQDY0061 using a document node. </description>
      <created by="Tim Mills" on="2010-03-15"/>
      <environment ref="orderData"/>
      <test><![CDATA[
        import schema namespace ns="http://www.w3.org/XQueryTestOrderBy";
        validate { document { <ns:Strings/>, <ns:Strings/> } }
      ]]></test>
      <result>
         <error code="XQDY0061"/>
      </result>
   </test-case>
   
   <test-case name="validateexpr-30">
      <description>Name : validateexpr-30  Test that validating a document node 
         (with processing instructions and comments) does not throw a type error in 
         static typing implementations when used as an expression of type document(). </description>
      <created by="Oliver Hallam" on="2010-03-15"/>
      <environment ref="orderData"/>
      <test><![CDATA[
        import schema default element namespace "http://www.w3.org/XQueryTestOrderBy";
        let $document as document-node(element(Strings)) := document { 
            ( <!--comment-->, <Strings><orderData>one string</orderData></Strings>, <?processing instruction?> ) 
        } 
        let $validated as document-node(schema-element(Strings)) := validate { $document } 
        return count($validated/node())
      ]]></test>
      <result>
         <assert-eq>3</assert-eq>
      </result>
   </test-case>
   
   <test-case name="validateexpr-31">
      <description>Name : validateexpr-31  Test that validating a union of element nodes
         does not raise a type error. </description>
      <created by="Oliver Hallam" on="2010-03-15"/>
      <environment ref="orderData"/>
      <test><![CDATA[
        import schema default element namespace "http://www.w3.org/XQueryTestOrderBy";
        declare function local:numbers($positive) { 
            if ($positive) 
            then <PositiveNumbers><orderData>1</orderData></PositiveNumbers> 
            else <NegativeNumbers><orderData>-1</orderData></NegativeNumbers> };
        let $positive as element(orderData, xs:decimal) := (validate { local:numbers(true()) })/orderData 
        let $negative as element(orderData, xs:decimal) := (validate { local:numbers(false()) })/orderData 
        return $positive + $negative
      ]]></test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>
   
   <test-case name="validateexpr-32">
      <description>Name : validateexpr-32  Test that validating a union of document nodes
         does not raise a type error. </description>
      <created by="Oliver Hallam" on="2010-03-15"/>
      <environment ref="orderData"/>
      <test><![CDATA[
        import schema default element namespace "http://www.w3.org/XQueryTestOrderBy";
        declare function local:numbers($positive) { 
            if ($positive) 
            then <PositiveNumbers><orderData>1</orderData></PositiveNumbers> 
            else <NegativeNumbers><orderData>-1</orderData></NegativeNumbers> };
        let $positive as element(orderData, xs:decimal) := (validate { document { local:numbers(true()) } })//orderData 
        let $negative as element(orderData, xs:decimal) := (validate { document { local:numbers(false()) } })//orderData 
        return $positive + $negative
      ]]></test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>
   
   <test-case name="validateexpr-33">
      <description>Name : validateexpr-33  Test that validating a union of element and 
         document nodes does not raise a type error. </description>
      <created by="Oliver Hallam" on="2010-03-15"/>
      <environment ref="orderData"/>
      <test><![CDATA[
        import schema default element namespace "http://www.w3.org/XQueryTestOrderBy";
        declare function local:numbers($positive) { 
            if ($positive) 
            then <PositiveNumbers><orderData>1</orderData></PositiveNumbers> 
            else document { <NegativeNumbers><orderData>-1</orderData></NegativeNumbers> } };
        let $positive as element(orderData, xs:decimal) := (validate { local:numbers(true()) })//orderData 
        let $negative as element(orderData, xs:decimal) := (validate { local:numbers(false()) })//orderData 
        return $positive + $negative
      ]]></test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>
   
   <test-case name="validateexpr-34">
      <description> namespace not declared: see bug 17040 (cezar.andrei@gmail.com). Also tests lax validation using xsi:type </description>
      <created by="Michael Kay" on="2012-05-29"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        validate lax { <a xsi:type='xs:integer'>42</a> }
      ]]></test>
      <result>
         <error code="XQDY0027"/>
      </result>
   </test-case>
   
   <test-case name="validateexpr-35">
      <description> Lax validation using xsi:type </description>
      <created by="Michael Kay" on="2012-05-29"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        validate lax { <a xsi:type='xs:integer' xmlns:xs="http://www.w3.org/2001/XMLSchema">42</a> }
      ]]></test>
      <result>
         <assert-xml><![CDATA[<a xsi:type='xs:integer' 
           xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">42</a>]]></assert-xml>
      </result>
   </test-case> 
   
   <test-case name="validateexpr-36" covers="validation-notation">
      <description> Validation using xs:NOTATION </description>
      <created by="Michael Kay" on="2013-01-06"/>
      <environment ref="user-defined-types"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
        import schema namespace udt = "http://www.w3.org/XQueryTest/userDefinedTypes";
        string( validate lax { <a xsi:type='udt:NOTATIONBased'
                                xmlns:udt="http://www.w3.org/XQueryTest/userDefinedTypes">udt:value1</a> } )
      ]]></test>
      <result>
         <assert-eq>"udt:value1"</assert-eq>
      </result>
   </test-case> 
   
   <test-case name="validateexpr-37" covers="validation-notation">
      <description> Validation using xs:NOTATION </description>
      <created by="Michael Kay" on="2013-01-06"/>
      <environment ref="user-defined-types"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
        import schema namespace udt = "http://www.w3.org/XQueryTest/userDefinedTypes";
        string( validate lax { <a xsi:type='udt:NOTATIONBased' 
                                  xmlns:udt="http://www.w3.org/XQueryTest/userDefinedTypes">udt:value3</a> } )
      ]]></test>
      <result>
         <error code="XQDY0027"/>
      </result>
   </test-case>
   
   <test-case name="validateexpr-38" covers="validation-notation">
      <description> Validation using xs:NOTATION </description>
      <created by="Michael Kay" on="2013-01-06"/>
      <environment ref="user-defined-types"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
        import schema namespace udt = "http://www.w3.org/XQueryTest/userDefinedTypes";
        string( validate type udt:NOTATIONBased { <a xmlns:udt="http://www.w3.org/XQueryTest/userDefinedTypes">udt:value1</a> } )
      ]]></test>
      <result>
         <assert-eq>"udt:value1"</assert-eq>
      </result>
   </test-case>
   
   <test-case name="validateexpr-39" covers="validation-notation">
      <description> Validation using xs:NOTATION </description>
      <created by="Michael Kay" on="2013-01-06"/>
      <environment ref="user-defined-types"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
        import schema namespace udt = "http://www.w3.org/XQueryTest/userDefinedTypes";
        string( validate type udt:NOTATIONBased { <a xmlns:udt="http://www.w3.org/XQueryTest/userDefinedTypes">udt:value3</a> } )
      ]]></test>
      <result>
         <error code="XQDY0027"/>
      </result>
   </test-case>
   
   <test-case name="validateexpr-40" covers="validation-notation">
      <description> Validation using xs:NOTATION </description>
      <created by="Michael Kay" on="2013-01-06"/>
      <environment ref="user-defined-types"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
        import schema namespace udt = "http://www.w3.org/XQueryTest/userDefinedTypes";
        string( validate type udt:NOTATIONBased { <a>value1</a> } )
      ]]></test>
      <result>
         <error code="XQDY0027"/>
      </result>
   </test-case>
   
   <test-case name="validateexpr-41" covers="validation-notation">
      <description> Validation using xs:NOTATION </description>
      <created by="Michael Kay" on="2013-01-06"/>
      <environment ref="user-defined-types"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
        import schema namespace udt = "http://www.w3.org/XQueryTest/userDefinedTypes";
        string( validate strict { <notatio xmlns="http://www.w3.org/XQueryTest/userDefinedTypes">value1</notatio> } )
      ]]></test>
      <result>
         <assert-eq>"value1"</assert-eq>
      </result>
   </test-case>
   
   <test-case name="validateexpr-42" covers="validation-notation">
      <description> Validation using xs:NOTATION </description>
      <created by="Michael Kay" on="2013-01-06"/>
      <environment ref="user-defined-types"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
        import schema namespace udt = "http://www.w3.org/XQueryTest/userDefinedTypes";
        string( validate strict { <notatio xmlns="http://www.w3.org/XQueryTest/userDefinedTypes">value3</notatio> } )
      ]]></test>
      <result>
         <error code="XQDY0027"/>
      </result>
   </test-case>   

   <test-case name="K2-ValidateExpression-1">
      <description> Ensure the validate keyword is parsed correctly. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>validate gt validate</test>
      <result>
         <error code="XPDY0002"/>
      </result>
   </test-case>

   <test-case name="validate-constraints-1">
      <description> Test validation of elements with unique/id/idref schema constraints </description>
      <created by="Nicolae Brinza" on="2009-04-01"/>
      <environment ref="constraints"/>
      <test><![CDATA[
        import schema namespace constraints = "http://www.w3.org/constraints";
        declare variable $test := element test { <constraints:a> <b id="x"/> <b id="y"/> <b id="y"/> </constraints:a> };
        validate { $test/*:a }
      ]]></test>
      <result>
         <error code="XQDY0027"/>
      </result>
   </test-case>

   <test-case name="validate-constraints-2">
      <description> Test validation of elements with unique/id/idref schema constraints </description>
      <created by="Nicolae Brinza" on="2009-04-01"/>
      <environment ref="constraints"/>
      <test><![CDATA[
        import schema namespace constraints = "http://www.w3.org/constraints";
        declare variable $test := element test { <constraints:a2> <b2 id="x"/> <b2 id="y"/> <b2/> </constraints:a2> };
        validate { $test/*:a2 }
      ]]></test>
      <result>
         <error code="XQDY0027"/>
      </result>
   </test-case>

   <test-case name="validate-constraints-3">
      <description> Test validation of elements with unique/id/idref schema constraints </description>
      <created by="Nicolae Brinza" on="2009-04-01"/>
      <environment ref="constraints"/>
      <test><![CDATA[
        import schema namespace constraints = "http://www.w3.org/constraints";
        declare variable $test := element test { <constraints:a2> <b2 id="x"/> <b2 id="y"/> <b2 id="z"/> <b2ref> <c idref="x"/> <c idref="y"/> <c idref="q"/> </b2ref> </constraints:a2> };
        validate { $test/*:a2 }
      ]]></test>
      <result>
         <error code="XQDY0027"/>
      </result>
   </test-case>

   <test-case name="validate-constraints-4">
      <description> Test validation of elements with unique/id/idref schema constraints </description>
      <created by="Andrew Eisenberg" on="2009-12-24"/>
      <environment ref="constraints"/>
      <test><![CDATA[
        import schema namespace constraints = "http://www.w3.org/constraints";
        declare variable $test := element test { <constraints:a> <b id="x"/> <b id="y"/> </constraints:a> };
        validate { $test/*:a }
      ]]></test>
      <result>
         <assert-xml><![CDATA[<constraints:a xmlns:constraints="http://www.w3.org/constraints"><b id="x"/><b id="y"/></constraints:a>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="validate-sc-1">
      <description/>
      <created by="Mary Holstege" on="2009-11-20"/>
      <environment ref="complexSimple"/>
      <test><![CDATA[
        import schema namespace ss="http://www.w3.org/query-test/complexSimple";
        let $v := validate { <ss:complexExtendsSimple>1</ss:complexExtendsSimple> } 
        let $dv := fn:data($v) 
        return ($dv instance of xs:integer)
        ]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="validateexpr-sc-2">
      <description/>
      <created by="Mary Holstege" on="2009-11-20"/>
      <environment ref="complexSimple"/>
      <test><![CDATA[
        import schema namespace ss="http://www.w3.org/query-test/complexSimple";
        let $v := validate { <ss:emptyMixed>1</ss:emptyMixed> } 
        let $dv := fn:data($v) 
        return fn:not($dv instance of xs:integer)
      ]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="validateexpr-sc-4">
      <description/>
      <created by="Mary Holstege" on="2009-11-20"/>
      <environment ref="complexSimple"/>
      <test><![CDATA[
        import schema namespace ss="http://www.w3.org/query-test/complexSimple";
        let $v := validate { <ss:unionBase>1</ss:unionBase> } 
        let $dv := fn:data($v) 
        return fn:not($dv instance of xs:integer)
      ]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="validateexpr-sc-5">
      <description/>
      <created by="Mary Holstege" on="2009-11-20"/>
      <environment ref="complexSimple"/>
      <test><![CDATA[
        import schema namespace ss="http://www.w3.org/query-test/complexSimple";
        let $v := validate { <ss:unionBase>2</ss:unionBase> } 
        let $dv := fn:data($v) return ($dv instance of xs:integer)
      ]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="validateexpr-sc-6">
      <description/>
      <created by="Mary Holstege" on="2009-11-20"/>
      <environment ref="complexSimple"/>
      <test><![CDATA[
        import schema namespace ss="http://www.w3.org/query-test/complexSimple";
        let $v := validate { <ss:complexExtendsUnion>1</ss:complexExtendsUnion> } 
        let $dv := fn:data($v) return fn:not($dv instance of xs:integer)
      ]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="validateexpr-sc-7">
      <description/>
      <created by="Mary Holstege" on="2009-11-20"/>
      <environment ref="complexSimple"/>
      <test><![CDATA[
        import schema namespace ss="http://www.w3.org/query-test/complexSimple";
        let $v := validate { <ss:complexExtendsUnion>2</ss:complexExtendsUnion> } 
        let $dv := fn:data($v) return ($dv instance of xs:integer)
      ]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="validateexpr-sc-8">
      <description/>
      <created by="Mary Holstege" on="2009-11-20"/>
      <environment ref="complexSimple"/>
      <test><![CDATA[
        import schema namespace ss="http://www.w3.org/query-test/complexSimple";
        let $v := validate { <ss:listBase>1</ss:listBase> } 
        let $dv := fn:data($v) return ($dv instance of xs:integer)
      ]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="validateexpr-sc-9">
      <description/>
      <created by="Mary Holstege" on="2009-11-20"/>
      <environment ref="complexSimple"/>
      <test><![CDATA[
        import schema namespace ss="http://www.w3.org/query-test/complexSimple";
        let $v := validate { <ss:complexExtendsList>1</ss:complexExtendsList> } 
        let $dv := fn:data($v) return ($dv instance of xs:integer)
      ]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="validate-as-101" covers="validate-by-type">
      <description/>
      <created by="Michael Kay" on="2008-12-01"/>
      <environment ref="hats"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
        import schema namespace hat = "http://www.w3.org/XQueryTest/hats"(:  at "qischema001.xsd" :); 
        validate type hat:hatsize { <hut>8</hut> }
      ]]></test>
      <result>
         <assert-xml><![CDATA[<hut>8</hut>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="validate-as-102" covers="validate-by-type">
      <description/>
      <created by="Michael Kay" on="2008-12-01"/>
      <environment ref="hats"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
        import schema namespace hat = "http://www.w3.org/XQueryTest/hats"(:  at "qischema001.xsd" :); 
        declare function local:run() as element(hat:hat, hat:hatsize) { 
            validate type hat:hatsize { <hat:hat>8</hat:hat> } 
        }; 
        local:run()
      ]]></test>
      <result>
         <assert-xml><![CDATA[<hat:hat xmlns:hat="http://www.w3.org/XQueryTest/hats">8</hat:hat>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="validate-as-103" covers="validate-by-type">
      <description>Validate an attribute node against a type</description>
      <created by="Michael Kay" on="2008-12-01"/>
      <environment ref="hats"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
        import schema namespace hat = "http://www.w3.org/XQueryTest/hats" at "../../../TestSources/hats.xsd"; 
        declare function local:run() as attribute(size, hat:hatsize) { validate type hat:hatsize { attribute size {8} } }; 
        <e>{local:run()}</e>
      ]]></test>
      <result>
         <error code="XQTY0030"/>
      </result>
   </test-case>

   <test-case name="validate-as-104" covers="validate-by-type">
      <description/>
      <created by="Michael Kay" on="2008-12-01"/>
      <environment ref="hats"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
        import schema namespace hat = "http://www.w3.org/XQueryTest/hats"(:  at "qischema001.xsd" :); 
        declare variable $in := <hat>8</hat>; 
        declare function local:run() as element(hat, hat:hatsize) { validate type hat:hatsize { $in } }; 
        local:run()
      ]]></test>
      <result>
         <assert-xml><![CDATA[<hat>8</hat>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="validate-as-105" covers="validate-by-type">
      <description>Ignored pragma before validate expression</description>
      <created by="Michael Kay" on="2008-12-01"/>
      <environment ref="hats"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
        declare namespace other="http://ns.other.com/"; 
        import schema namespace hat = "http://www.w3.org/XQueryTest/hats"(:  at "qischema001.xsd" :); 
        declare variable $in := <hat>8</hat>; 
        declare function local:run() as element(hat, hat:hatsize) { 
            (#other:validate (hat:hatsize)#) { validate type hat:hatsize { $in }} 
        }; 
        local:run()
      ]]></test>
      <result>
         <assert-xml><![CDATA[<hat>8</hat>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="validate-as-106" covers="validate-by-type">
      <description>Nested validate expressions</description>
      <created by="Michael Kay" on="2008-12-01"/>
      <environment ref="hats"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
        declare namespace other="http://ns.other.com/"; 
        import schema namespace hat = "http://www.w3.org/XQueryTest/hats"; 
        declare variable $in := <hat>8</hat>; 
        declare function local:run() as element(hat, hat:hatsize) { 
            validate type hat:hatsize { 
                validate type xs:integer { $in } } 
        }; 
        local:run()
      ]]></test>
      <result>
         <assert-xml><![CDATA[<hat>8</hat>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="validate-as-91011" covers="validate-by-type">
      <description>Unknown type name</description>
      <created by="Michael Kay" on="2008-12-01"/>
      <modified by="Michael Kay" on="2011-09-05" change="change expected error code"/>
      <environment ref="hats"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
        import schema namespace hat = "http://www.w3.org/XQueryTest/hats"(:  at "qischema001.xsd" :); 
        validate type hat:brimsize { <hat>8</hat> }
      ]]></test>
      <result>
         <error code="XQST0104"/>
      </result>
   </test-case>

   <test-case name="validate-as-91012" covers="validate-by-type">
      <description>Two type names</description>
      <created by="Michael Kay" on="2008-12-01"/>
      <modified by="Michael Kay" on="2011-09-05" change="change expected error code"/>
      <environment ref="hats"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
        import schema namespace hat = "http://www.w3.org/XQueryTest/hats"(:  at "qischema001.xsd" :); 
        validate type hat:hatsize hat:brimsize { <hat>8</hat> }
      ]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="validate-as-91013" covers="validate-by-type">
      <description>Test that "validate type" syntax is rejected by an XQuery 1.0 processor</description>
      <created by="Michael Kay" on="2008-12-01"/>
      <environment ref="hats"/>
      <dependency type="spec" value="XQ10"/>
      <test><![CDATA[
        import schema namespace hat = "http://www.w3.org/XQueryTest/hats"(:  at "qischema001.xsd" :); 
        validate type hat:hatsize(12) { <hat>8</hat> }
      ]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="validate-as-91014" covers="validate-by-type">
      <description>Validation applies to a single node</description>
      <created by="Michael Kay" on="2008-12-01"/>
      <modified by="Michael Kay" on="2011-09-05" change="change expected error code"/>
      <environment ref="hats"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
        import schema namespace hat = "http://www.w3.org/XQueryTest/hats"(:  at "qischema001.xsd" :); 
        validate type hat:hatsize { 8, <hat>8</hat> }
      ]]></test>
      <result>
         <error code="XQTY0030"/>
      </result>
   </test-case>

   <test-case name="validate-as-91015" covers="validate-by-type">
      <description>Undeclared namespace prefix in type name</description>
      <created by="Michael Kay" on="2008-12-01"/>
      <environment ref="hats"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
        import schema namespace hat = "http://www.w3.org/XQueryTest/hats"(:  at "qischema001.xsd" :); 
        validate type boot:hatsize { <hat>8</hat> }
      ]]></test>
      <result>
         <error code="XPST0081"/>
      </result>
   </test-case>

   <test-case name="validate-as-91016" covers="validate-by-type">
      <description/>
      <created by="Michael Kay" on="2008-12-01"/>
      <modified by="Michael Kay" on="2012-05-23" change="see bug 15644"/>
       <modified by="O'Neil Delpratt" on="2012-05-31" change="see bug 15644"/>
      <environment ref="hats"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
        import schema namespace hat = "http://www.w3.org/XQueryTest/hats"(:  at "qischema001.xsd" :); 
        validate type hat:hatsize { <hat>banana</hat> }
      ]]></test>
      <result>
         <error code="XQDY0027"/>
      </result>
   </test-case>
   
   <test-case name="validate-as-91017" covers="validate-by-type">
      <description>A Working draft used the syntax "validate as": check that this is not accepted</description>
      <created by="Michael Kay" on="2011-07-27"/>
      <environment ref="hats"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        import schema namespace hat = "http://www.w3.org/XQueryTest/hats"(:  at "qischema001.xsd" :); 
        validate as hat:hatsize { <hut>8</hut> }
      ]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>
   
   
   <test-case name="cbcl-validateexpr-1">
      <description> Evaluation of a validate expression, with lax validation and a type sepcified by xsi:type </description>
      <created by="Nick Jones" on="2007-11-01"/>
      <environment ref="validate"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTest/testcases";
        import schema "http://www.w3.org/XQueryTest/testcases";
        let $var := validate lax { <Unknown xsi:type="tc:choice" xmlns:tc="http://www.w3.org/XQueryTest/testcases"> {element a {element z {"12.345"}}}</Unknown>} return $var]]></test>
      <result>
         <error code="XQDY0027"/>
      </result>
   </test-case>

   <test-case name="cbcl-validateexpr-2">
      <description> Evaluation of a validate expression, with lax validation and a type sepcified by xsi:type </description>
      <created by="Nick Jones" on="2007-11-01"/>
      <environment ref="validate"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTest/testcases";
        import schema "http://www.w3.org/XQueryTest/testcases";
        let $var := validate lax { <Unknown xsi:type="choice"> {element a {"12.345"}}</Unknown>} return $var]]></test>
      <result>
         <assert-xml><![CDATA[<Unknown xmlns="http://www.w3.org/XQueryTest/testcases" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="choice"><a>12.345</a></Unknown>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="cbcl-validateexpr-3">
      <description> Evaluation of a validate expression, with lax validation and a type sepcified by xsi:type </description>
      <created by="Nick Jones" on="2007-11-01"/>
      <environment ref="validate"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTest/testcases";
        import schema "http://www.w3.org/XQueryTest/testcases";
        let $var := validate lax { <Unknown xsi:type="tc:choice" xmlns:tc="http://www.w3.org/XQueryTest/testcases"> {element z {"12.345"}}</Unknown>} return $var]]></test>
      <result>
         <error code="XQDY0027"/>
      </result>
   </test-case>

   <test-case name="cbcl-validateexpr-4">
      <description> Evaluation of a validate expression, with lax validation and a type sepcified by xsi:type </description>
      <created by="Nick Jones" on="2007-11-01"/>
      <environment ref="validate"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTest/testcases";
        import schema "http://www.w3.org/XQueryTest/testcases";
        let $var := validate lax { <Unknown> {element z {"12.345"}}</Unknown>} return $var]]></test>
      <result>
         <assert-xml><![CDATA[<Unknown xmlns="http://www.w3.org/XQueryTest/testcases"><z>12.345</z></Unknown>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="cbcl-validateexpr-5">
      <description> Evaluation of a validate expression, with lax validation and a type sepcified by xsi:type </description>
      <created by="Nick Jones" on="2007-11-01"/>
      <environment ref="validate"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTest/testcases";
        import schema "http://www.w3.org/XQueryTest/testcases";
        let $var := validate strict { <Unknown xsi:type="tc:choice" xmlns:tc="http://www.w3.org/XQueryTest/testcases"> {element a {element z {"12.345"}}}</Unknown>} return $var]]></test>
      <result>
         <error code="XQDY0084"/>
      </result>
   </test-case>

   <test-case name="cbcl-validateexpr-6">
      <description> Evaluation of a validate expression, with lax validation and a type sepcified by xsi:type </description>
      <created by="Nick Jones" on="2007-11-01"/>
      <environment ref="validate"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTest/testcases";
        import schema "http://www.w3.org/XQueryTest/testcases";
        let $var := validate strict { <Unknown xsi:type="tc:choice" xmlns:tc="http://www.w3.org/XQueryTest/testcases"> {element a {"12.345"}}</Unknown>} return $var]]></test>
      <result>
         <error code="XQDY0084"/>
      </result>
   </test-case>

   <test-case name="cbcl-validateexpr-7">
      <description> Evaluation of a validate expression, with lax validation and a type sepcified by xsi:type </description>
      <created by="Nick Jones" on="2007-11-01"/>
      <environment ref="validate"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTest/testcases";
        import schema "http://www.w3.org/XQueryTest/testcases";
        let $var := validate strict { <Unknown xsi:type="tc:choice" xmlns:tc="http://www.w3.org/XQueryTest/testcases"> {element z {"12.345"}}</Unknown>} return $var]]></test>
      <result>
         <error code="XQDY0084"/>
      </result>
   </test-case>

   <test-case name="cbcl-validateexpr-8">
      <description> Evaluation of a validate expression, with lax validation and a type sepcified by xsi:type </description>
      <created by="Nick Jones" on="2007-11-01"/>
      <environment ref="validate"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTest/testcases";
        import schema "http://www.w3.org/XQueryTest/testcases";
        let $var := validate strict { <Unknown> {element z {"12.345"}}</Unknown>} return $var]]></test>
      <result>
         <error code="XQDY0084"/>
      </result>
   </test-case>

   <test-case name="cbcl-validateexpr-9">
      <description> Evaluation of a validate expression, with lax validation and a type sepcified by xsi:type </description>
      <created by="Nick Jones" on="2007-11-01"/>
      <environment ref="validate"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTest/testcases";
        import schema "http://www.w3.org/XQueryTest/testcases";
        let $var := validate lax { <Unknown> {element a {element z {"12.345"}}}</Unknown>} return $var]]></test>
      <result>
         <error code="XQDY0027"/>
      </result>
   </test-case>

   <test-case name="cbcl-validateexpr-10">
      <description> Evaluation of a validate expression, with lax validation and a type sepcified by xsi:type </description>
      <created by="Nick Jones" on="2007-11-01"/>
      <environment ref="validate"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTest/testcases";
        import schema "http://www.w3.org/XQueryTest/testcases";
        let $var := validate strict { <Unknown> {element a {element z {"12.345"}}}</Unknown>} return $var]]></test>
      <result>
         <error code="XQDY0084"/>
      </result>
   </test-case>

   <test-case name="cbcl-validateexpr-11">
      <description> Test validation on a document with a single element with extra nodes </description>
      <created by="Oliver Hallam" on="2008-12-09"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[validate { document { (<e/>, "text") } }]]></test>
      <result>
         <error code="XQDY0084"/>
      </result>
   </test-case>

   <test-case name="cbcl-validateexpr-12">
      <description> Test validation on a document with no element nodes. </description>
      <created by="Oliver Hallam" on="2008-12-09"/>
      <test>validate{ document { "text" } }</test>
      <result>
         <error code="XQDY0061"/>
      </result>
   </test-case>

   <test-case name="cbcl-validateexpr-13">
      <description> Test validation on a document with more than one element nodes. </description>
      <created by="Oliver Hallam" on="2008-12-09"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[validate lax { document { (<a/>, <b/>) } }]]></test>
      <result>
         <error code="XQDY0061"/>
      </result>
   </test-case>

   <test-case name="cbcl-validateexpr-14">
      <description>Description : name test against an element with schema validity not known. </description>
      <created by="Oliver Hallam" on="2009-02-24"/>
      <environment ref="validate"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTest/testcases";
        import schema "http://www.w3.org/XQueryTest/testcases";
        declare namespace tc="http://www.w3.org/XQueryTest/testcases";
        let $var := validate lax { <Unknown> {element z {"12.345"}}</Unknown>} return count($var/element(*, xs:decimal))]]></test>
      <result>
         <assert-string-value>0</assert-string-value>
      </result>
   </test-case>

   <test-case name="cbcl-validateexpr-15">
      <description> Test against schema base type. </description>
      <created by="Oliver Hallam" on="2009-02-24"/>
      <environment ref="complexData"/>
      <dependency type="spec" value="XQ10+"/>
      <test>
        import schema namespace cd="http://www.cbcl.co.uk/XQueryTest/complexData";
        declare function local:f($x) as element(cd:complexTypeWithSimpleContent, cd:shortString)* { $x//cd:complexTypeWithSimpleContent };
        let $x := validate strict {/} return (count(local:f($x)/@value))</test>
      <result>
         <assert-string-value>1</assert-string-value>
      </result>
   </test-case>

   <test-case name="cbcl-validateexpr-16">
      <description> Test validation of a global schema attribute </description>
      <created by="Oliver Hallam" on="2009-12-18"/>
      <environment ref="validate"/>
      <test>
        import schema namespace tc="http://www.w3.org/XQueryTest/testcases";
        validate { attribute { xs:QName("tc:a") } { "value" } }</test>
      <result>
         <error code="XQTY0030"/>
      </result>
   </test-case>

   <test-case name="cbcl-validateexpr-17">
      <description> Evaluation of a validate expression, with lax validation and a type sepcified by xsi:type where the prefix is only passively in scope </description>
      <created by="Oliver Hallam" on="2010-07-01"/>
      <environment ref="validate"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTest/testcases";
        import schema "http://www.w3.org/XQueryTest/testcases";
        declare namespace tc="http://www.w3.org/XQueryTest/testcases";
        let $var := validate lax { <Unknown xsi:type="tc:choice"> {element a {"foo"}}</Unknown>} return $var]]></test>
      <result>
         <error code="XQDY0027"/>
      </result>
   </test-case>
 
</test-set>
