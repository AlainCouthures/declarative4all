<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="prod-QuantifiedExpr">
   <description>Tests for the QuantifiedExpr production</description>
   <link type="spec" document="http://www.w3.org/TR/xquery-30/"
         idref="doc-xquery30-QuantifiedExpr"/>
   <link type="spec" document="XQuery" section-number="3.11"
         idref="id-quantified-expressions"/>
         
   <test-case name="quantExpr-1">
      <description> Simple quantified expression using "some" keyword and addition expression. Returns false </description>
      <created by="Carmelo Montanez" on="2005-08-18"/>
      <test>some $x in (1, 2) satisfies $x + $x = 3</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="quantExpr-2">
      <description> Simple quantified expression using "some" keyword and addition expression. Returns true </description>
      <created by="Carmelo Montanez" on="2005-08-18"/>
      <test>some $x in (1, 2) satisfies $x + $x = 2</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="quantExpr-3">
      <description> Simple quantified expression using "some" keyword and a subtraction expression. Returns false </description>
      <created by="Carmelo Montanez" on="2005-08-18"/>
      <test>some $x in (1, 2) satisfies $x - 2 = 2</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="quantExpr-4">
      <description> Simple quantified expression using "some" keyword and a subtraction expression. Returns true </description>
      <created by="Carmelo Montanez" on="2005-08-18"/>
      <test>some $x in (1, 2) satisfies $x - 2 = 0</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="quantExpr-5">
      <description> Simple quantified expression using "some" keyword and a multiplication expression. </description>
      <created by="Carmelo Montanez" on="2005-08-18"/>
      <test>some $x in (1, 2) satisfies $x * 2 = 4</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="quantExpr-6">
      <description> Simple quantified expression using "some" keyword and a division expression. </description>
      <created by="Carmelo Montanez" on="2005-08-18"/>
      <test>some $x in (1, 2) satisfies $x div 2 = 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="quantExpr-7">
      <description> Simple quantified expression using "some" keyword and a division (idiv) expression. </description>
      <created by="Carmelo Montanez" on="2005-08-18"/>
      <test>some $x in (1, 2) satisfies $x idiv 2 = 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="quantExpr-8">
      <description> Simple quantified expression using "some" keyword and usage of avg function expression. </description>
      <created by="Carmelo Montanez" on="2005-08-18"/>
      <test>some $x in (1, 2) satisfies fn:avg(($x, 1)) = 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="quantExpr-9">
      <description> Simple quantified expression using "some" keyword and usage of string function expression. </description>
      <created by="Carmelo Montanez" on="2005-08-18"/>
      <test>some $x in (1, 2) satisfies fn:string($x) = "1"</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="quantExpr-10">
      <description> Simple quantified expression using "some" keyword and usage of string-length function expression. </description>
      <created by="Carmelo Montanez" on="2005-08-18"/>
      <test>some $x in (1, 2) satisfies fn:string-length(xs:string($x)) = 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="quantExpr-11">
      <description> Simple quantified expression using "some" keyword and usage of "fn:count" function expression. </description>
      <created by="Carmelo Montanez" on="2005-08-18"/>
      <test>some $x in (1, 2) satisfies fn:count(($x)) = 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="quantExpr-12">
      <description> Simple quantified expression using "some" keyword and usage of "fn:true" function expression. </description>
      <created by="Carmelo Montanez" on="2005-08-18"/>
      <test>some $x in (1, 2) satisfies fn:true()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="quantExpr-13">
      <description> Simple quantified expression using "some" keyword and usage of "fn:false" function expression. </description>
      <created by="Carmelo Montanez" on="2005-08-18"/>
      <test>some $x in (1, 2) satisfies fn:false()</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="quantExpr-14">
      <description> Simple quantified expression using "some" keyword and usage of "fn:not" function expression. </description>
      <created by="Carmelo Montanez" on="2005-08-18"/>
      <test>some $x in (1, 2) satisfies fn:not($x)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="quantExpr-15">
      <description> Simple quantified expression using "some" keyword and use of lofical expression (or). </description>
      <created by="Carmelo Montanez" on="2005-08-18"/>
      <test>some $x in (1, 2) satisfies $x = 1 or $x = 2</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="quantExpr-16">
      <description> Simple quantified expression using "some" keyword and use of lofical expression (and). </description>
      <created by="Carmelo Montanez" on="2005-08-19"/>
      <test>some $x in (1, 2) satisfies $x = 1 and ($x +1) = 2</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="quantExpr-17">
      <description> Simple quantified expression using "some" keyword and and use of string data. </description>
      <created by="Carmelo Montanez" on="2005-08-19"/>
      <test>some $x in ("A","B","C") satisfies $x = "A"</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="quantExpr-18">
      <description> Simple quantified expression using "some" keyword with multiple variables and addition expression </description>
      <created by="Carmelo Montanez" on="2005-08-19"/>
      <test>some $x in (1,2,3), $y in (4,5,6) satisfies $x + $y = 5</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="quantexpr-19">
      <description> Simple quantified expression using "some" keyword with multiple variables and subtraction expression </description>
      <created by="Carmelo Montanez" on="2005-08-19"/>
      <test>some $x in (1,2,3), $y in (4,5,6) satisfies $x - $y = 5</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="quantExpr-20">
      <description> Simple quantified expression using "some" keyword with multiple variables and multiplication expression </description>
      <created by="Carmelo Montanez" on="2005-08-19"/>
      <test>some $x in (1,2,3), $y in (4,5,6) satisfies $x * $y = 10</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="quantExpr-21">
      <description> Simple quantified expression using "some" keyword with multiple variables and division (div) operation. </description>
      <created by="Carmelo Montanez" on="2005-08-19"/>
      <test>some $x in (1,2,3), $y in (4,5,6) satisfies $x div $y = 2</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="quantExpr-22">
      <description> Simple quantified expression using "some" keyword with multiple variables and division (idiv) operation. </description>
      <created by="Carmelo Montanez" on="2005-08-19"/>
      <test>some $x in (1,2,3), $y in (4,5,6) satisfies $x idiv $y = 2</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="quantExpr-23">
      <description> Simple quantified expression using "some" keyword with multiple variables, and string function. </description>
      <created by="Carmelo Montanez" on="2005-08-19"/>
      <test>some $x in (1,2,3), $y in (4,5,6) satisfies fn:string($x) = fn:string($y)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="quantExpr-24">
      <description> Simple quantified expression using "some" keyword, use of multiple variable and the xs:integer type </description>
      <created by="Carmelo Montanez" on="2005-08-19"/>
      <test>some $x in (1,2,3), $y in (4,5,6) satisfies xs:integer($x) = xs:integer($y)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="quantExpr-25">
      <description> Simple quantified expression using "some" keyword, use of multiple variable and the xs:decimal type </description>
      <created by="Carmelo Montanez" on="2005-08-19"/>
      <test>some $x in (1,2,3), $y in (4,5,6) satisfies xs:decimal($x) = xs:decimal($y)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="quantExpr-26">
      <description> Simple quantified expression using "some" keyword, use of multiple variable and the xs:float type </description>
      <created by="Carmelo Montanez" on="2005-08-19"/>
      <test>some $x in (1,2,3), $y in (4,5,6) satisfies xs:float($x) = xs:float($y)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="quantExpr-27">
      <description> Simple quantified expression using "some" keyword, use of multiple variable and the xs:double type </description>
      <created by="Carmelo Montanez" on="2005-08-19"/>
      <test>some $x in (1,2,3), $y in (4,5,6) satisfies xs:double($x) = xs:double($y)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="quantExpr-28">
      <description> Simple quantified expression using "some" keyword, use of multiple variable and the xs:boolean type </description>
      <created by="Carmelo Montanez" on="2005-08-19"/>
      <test>some $x in ("true", "false"), $y in ("false","true") satisfies xs:boolean($x) = xs:boolean($y)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="quantExpr-29">
      <description> Simple quantified expression using "some" keyword, use of multiple variable and the xs:dateTime type </description>
      <created by="Carmelo Montanez" on="2005-08-22"/>
      <test>some $x in ("1980-05-05T13:13:13Z", "1980-05-05T13:13:13Z"), $y in ("1980-05-05T13:13:13Z","1980-05-05T13:13:13Z") satisfies xs:dateTime($x) = xs:dateTime($y)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="quantExpr-30">
      <description> Simple quantified expression using "some" keyword, use of multiple variable and the xs:date type </description>
      <created by="Carmelo Montanez" on="2005-08-22"/>
      <test>some $x in ("1985-07-05Z", "1985-07-05Z"), $y in ("1985-07-05Z","1985-07-05Z") satisfies xs:date($x) = xs:date($y)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="quantexpr-31">
      <description> Simple quantified expression using "every" keyword and addition expression. Returns false </description>
      <created by="Carmelo Montanez" on="2005-08-18"/>
      <test>every $x in (1, 2) satisfies $x + $x = 3</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="quantexpr-32">
      <description> Simple quantified expression using "every" keyword and addition expression. Returns true </description>
      <created by="Carmelo Montanez" on="2005-08-18"/>
      <test>every $x in (1, 1) satisfies $x + $x = 2</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="quantExpr-33">
      <description> Simple quantified expression using "every" keyword and a subtraction expression. Returns false </description>
      <created by="Carmelo Montanez" on="2005-08-18"/>
      <test>every $x in (1, 2) satisfies $x - 2 = 2</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="quantexpr-34">
      <description> Simple quantified expression using "every" keyword and a subtraction expression. Returns true </description>
      <created by="Carmelo Montanez" on="2005-08-18"/>
      <test>every $x in (2, 2) satisfies $x - 2 = 0</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="quantexpr-35">
      <description> Simple quantified expression using "every" keyword and a multiplication expression. </description>
      <created by="Carmelo Montanez" on="2005-08-18"/>
      <test>every $x in (1, 2) satisfies $x * 2 = 4</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="quantexpr-36">
      <description> Simple quantified expression using "every" keyword and a division expression. </description>
      <created by="Carmelo Montanez" on="2005-08-18"/>
      <test>every $x in (1, 2) satisfies $x div 2 = 1</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="quantexpr-37">
      <description> Simple quantified expression using "every" keyword and a division (idiv) expression. </description>
      <created by="Carmelo Montanez" on="2005-08-18"/>
      <test>every $x in (1, 2) satisfies $x idiv 2 = 1</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="quantexpr-38">
      <description> Simple quantified expression using "every" keyword and usage of avg function expression. </description>
      <created by="Carmelo Montanez" on="2005-08-18"/>
      <test>every $x in (1, 2) satisfies fn:avg(($x, 1)) = 1</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="quantexpr-39">
      <description> Simple quantified expression using "every" keyword and usage of string function expression. </description>
      <created by="Carmelo Montanez" on="2005-08-18"/>
      <test>every $x in (1, 2) satisfies fn:string($x) = "1"</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="quantexpr-40">
      <description> Simple quantified expression using "every" keyword and usage of string-length function expression. </description>
      <created by="Carmelo Montanez" on="2005-08-18"/>
      <test>every $x in (1, 2) satisfies fn:string-length(xs:string($x)) = 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="quantexpr-41">
      <description> Simple quantified expression using "every" keyword and usage of "fn:count" function expression. </description>
      <created by="Carmelo Montanez" on="2005-08-18"/>
      <test>every $x in (1, 2) satisfies fn:count(($x)) = 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="quantexpr-42">
      <description> Simple quantified expression using "every" keyword and usage of "fn:true" function expression. </description>
      <created by="Carmelo Montanez" on="2005-08-18"/>
      <test>every $x in (1, 2) satisfies fn:true()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="quantexpr-43">
      <description> Simple quantified expression using "some" keyword and usage of "fn:false" function expression. </description>
      <created by="Carmelo Montanez" on="2005-08-18"/>
      <test>some $x in (1, 2) satisfies fn:false()</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="quantexpr-44">
      <description> Simple quantified expression using "every" keyword and usage of "fn:not" function expression. </description>
      <created by="Carmelo Montanez" on="2005-08-18"/>
      <test>every $x in (1, 2) satisfies fn:not($x)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="quantexpr-45">
      <description> Simple quantified expression using "every" keyword and use of lofical expression (or). </description>
      <created by="Carmelo Montanez" on="2005-08-18"/>
      <test>every $x in (1, 2) satisfies $x = 1 or $x = 2</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="quantexpr-46">
      <description> Simple quantified expression using "every" keyword and use of lofical expression (and). </description>
      <created by="Carmelo Montanez" on="2005-08-19"/>
      <test>every $x in (1, 2) satisfies $x = 1 and ($x +1) = 2</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="quantexpr-47">
      <description> Simple quantified expression using "every" keyword and and use of string data. </description>
      <created by="Carmelo Montanez" on="2005-08-19"/>
      <test>every $x in ("A","B","C") satisfies $x = "A"</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="quantexpr-48">
      <description> Simple quantified expression using "every" keyword with multiple variables and addition expression </description>
      <created by="Carmelo Montanez" on="2005-08-19"/>
      <test>every $x in (1,2,3), $y in (4,5,6) satisfies $x + $y = 5</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="quantexpr-49">
      <description> Simple quantified expression using "every" keyword with multiple variables and subtraction expression </description>
      <created by="Carmelo Montanez" on="2005-08-19"/>
      <test>every $x in (1,2,3), $y in (4,5,6) satisfies $x - $y = 5</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="quantexpr-50">
      <description> Simple quantified expression using "every" keyword with multiple variables and multiplication expression </description>
      <created by="Carmelo Montanez" on="2005-08-19"/>
      <test>every $x in (1,2,3), $y in (4,5,6) satisfies $x * $y = 10</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="quantexpr-51">
      <description> Simple quantified expression using "every" keyword with multiple variables and division (div) operation. </description>
      <created by="Carmelo Montanez" on="2005-08-19"/>
      <test>every $x in (1,2,3), $y in (4,5,6) satisfies $x div $y = 2</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="quantexpr-52">
      <description> Simple quantified expression using "every" keyword with multiple variables and division (idiv) operation. </description>
      <created by="Carmelo Montanez" on="2005-08-19"/>
      <test>every $x in (1,2,3), $y in (4,5,6) satisfies $x idiv $y = 2</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="quantexpr-53">
      <description> Simple quantified expression using "every" keyword with multiple variables, and string function. </description>
      <created by="Carmelo Montanez" on="2005-08-19"/>
      <test>every $x in (1,2,3), $y in (4,5,6) satisfies fn:string($x) = fn:string($y)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="quantexpr-54">
      <description> Simple quantified expression using "every" keyword, use of multiple variable and the xs:integer type </description>
      <created by="Carmelo Montanez" on="2005-08-19"/>
      <test>every $x in (1,2,3), $y in (4,5,6) satisfies xs:integer($x) = xs:integer($y)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="quantexpr-55">
      <description> Simple quantified expression using "every" keyword, use of multiple variable and the xs:decimal type </description>
      <created by="Carmelo Montanez" on="2005-08-19"/>
      <test>every $x in (1,2,3), $y in (4,5,6) satisfies xs:decimal($x) = xs:decimal($y)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="quantexpr-56">
      <description> Simple quantified expression using "every" keyword, use of multiple variable and the xs:float type </description>
      <created by="Carmelo Montanez" on="2005-08-19"/>
      <test>every $x in (1,2,3), $y in (4,5,6) satisfies xs:float($x) = xs:float($y)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="quantexpr-57">
      <description> Simple quantified expression using "every" keyword, use of multiple variable and the xs:double type </description>
      <created by="Carmelo Montanez" on="2005-08-19"/>
      <test>every $x in (1,2,3), $y in (4,5,6) satisfies xs:double($x) = xs:double($y)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="quantexpr-58">
      <description> Simple quantified expression using "every" keyword, use of multiple variable and the xs:boolean type </description>
      <created by="Carmelo Montanez" on="2005-08-19"/>
      <test>every $x in ("true", "false"), $y in ("false","true") satisfies xs:boolean($x) = xs:boolean($y)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="quantexpr-59">
      <description> Simple quantified expression using "every" keyword, use of multiple variable and the xs:dateTime type </description>
      <created by="Carmelo Montanez" on="2005-08-22"/>
      <test>every $x in ("1980-05-05T13:13:13Z", "1980-05-05T13:13:13Z"), $y in ("1980-05-05T13:13:13Z","1980-05-05T13:13:13Z") satisfies xs:dateTime($x) = xs:dateTime($y)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>         

   <test-case name="quantExpr-60">
      <description> Simple quantified expression using "every" keyword, use of multiple variable and the xs:date type </description>
      <created by="Carmelo Montanez" on="2005-08-22"/>
      <test>every $x in ("1985-07-05Z", "1985-07-05Z"), $y in ("1985-07-05Z","1985-07-05Z") satisfies xs:date($x) = xs:date($y)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="quantexpr-61">
      <description> Simple quantified expression using "some" keyword that binds the declared variables to an xs:integer type. </description>
      <created by="Carmelo Montanez" on="2006-05-23"/>
      <dependency type="spec" value="XQ10+"/>
      <test>some $x as xs:integer in (1, 2, 3) , $y as xs:integer in (2, 3, 4) satisfies $x + $y = 4</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="quantexpr-62">
      <description> Simple quantified expression using "some" keyword that binds the declared variable to an xs:string type. </description>
      <created by="Carmelo Montanez" on="2006-05-23"/>
      <dependency type="spec" value="XQ10+"/>
      <test>some $x as xs:string in ("cat","dog","rat") satisfies fn:string-length($x) = 3</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="quantexpr-63">
      <description> Simple quantified expression using "every" keyword that binds the declared variable to an xs:string type. </description>
      <created by="Carmelo Montanez" on="2006-05-23"/>
      <dependency type="spec" value="XQ10+"/>
      <test>every $x as xs:string in ("cat","dog","rat") satisfies fn:string-length($x) = 3</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="quantexpr-64">
      <description> Simple quantified expression using "every" keyword that binds the declared variable to an xs:string and xs:integer type respectively. </description>
      <created by="Carmelo Montanez" on="2006-05-23"/>
      <dependency type="spec" value="XQ10+"/>
      <test>every $x as xs:string in ("cat","dog","rat"), $y as xs:integer in (3, 3, 3) satisfies fn:string-length($x) = $y</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="quantexpr-65">
      <description> Simple quantified expression using "some" keyword that binds the declared variable to an xs:integer and xs:float type respectively. </description>
      <created by="Carmelo Montanez" on="2006-05-23"/>
      <dependency type="spec" value="XQ10+"/>
      <test>some $x as xs:integer in (1, 2, 3), $y as xs:float in (xs:float(2), xs:float(3)) satisfies $x + $y = 5</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="K-QuantExprWithout-1">
      <description> 'every': EBV can't be extracted from xs:QName. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>some $foo in 1 satisfies QName("example.com/", "ncname")</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-2">
      <description> 'some': EBV can't be extracted from xs:QName. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>every $foo in 1 satisfies QName("example.com/", "ncname")</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-3">
      <description> $foo has static type xs:integer; which cannot be compared to xs:string. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>some $foo in 1 satisfies $foo eq "1"</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-4">
      <description> $foo has static type xs:integer; which cannot be compared to xs:string. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>every $foo in 1 satisfies $foo eq "1"</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-5">
      <description> A some-quantification applied on fn:count(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>some $i in (0, 2, 3) satisfies count($i)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-6">
      <description> A some-quantification applied on fn:count(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>every $i in (1, 2, 3) satisfies count($i)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-7">
      <description> some-quantification combined with fn:boolean(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>some $i in subsequence((0, 1, 2, current-time()), 1, 3) satisfies boolean($i treat as xs:integer)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-8">
      <description> every-quantification combined with fn:boolean(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>every $i in subsequence((1, 2, 3, current-time()), 1, 3) satisfies boolean($i treat as xs:integer)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-9">
      <description> every-quantification combined with empty variable binding. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>every $i in () satisfies $i</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-10">
      <description> some-quantification combined with empty variable binding. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not(some $i in () satisfies $i)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-11">
      <description> A test whose essence is: `some $foo in 1 satisfies true()`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>some $foo in 1 satisfies true()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-12">
      <description> A test whose essence is: `every $foo in 1 satisfies true()`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>every $foo in 1 satisfies true()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-13">
      <description> A test whose essence is: `not(some $foo in 1 satisfies false())`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not(some $foo in 1 satisfies false())</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-14">
      <description> A test whose essence is: `not(every $foo in 1 satisfies false())`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not(every $foo in 1 satisfies false())</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-15">
      <description> A test whose essence is: `some $foo in 1 satisfies 1`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>some $foo in 1 satisfies 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-16">
      <description> A test whose essence is: `every $foo in 1 satisfies 1`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>every $foo in 1 satisfies 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-17">
      <description> A test whose essence is: `some $foo in 1 satisfies "a string"`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>some $foo in 1 satisfies "a string"</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-18">
      <description> A test whose essence is: `every $foo in 1 satisfies "a string"`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>every $foo in 1 satisfies "a string"</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-19">
      <description> A test whose essence is: `every $var in (true(), true(), true()) satisfies $var`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>every $var in (true(), true(), true()) satisfies $var</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-20">
      <description> A test whose essence is: `not(every $var in (true(), false(), true()) satisfies $var)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not(every $var in (true(), false(), true()) satisfies $var)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-21">
      <description> A test whose essence is: `not(every $var in (false(), true(), true()) satisfies $var)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not(every $var in (false(), true(), true()) satisfies $var)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-22">
      <description> A test whose essence is: `not(every $var in (true(), true(), false()) satisfies $var)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not(every $var in (true(), true(), false()) satisfies $var)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-23">
      <description> A test whose essence is: `some $var in (true(), true(), true()) satisfies $var`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>some $var in (true(), true(), true()) satisfies $var</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-24">
      <description> A test whose essence is: `some $var in (true(), false(), true()) satisfies $var`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>some $var in (true(), false(), true()) satisfies $var</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-25">
      <description> A test whose essence is: `some $var in (false(), true(), true()) satisfies $var`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>some $var in (false(), true(), true()) satisfies $var</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-26">
      <description> A test whose essence is: `some $var in (true(), true(), false()) satisfies $var`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>some $var in (true(), true(), false()) satisfies $var</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-27">
      <description> A test whose essence is: `not(some $var in (false(), false(), false()) satisfies $var)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not(some $var in (false(), false(), false()) satisfies $var)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-28">
      <description> EBV cannot be extracted fro xs:hexBinary. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>every $var in (xs:hexBinary("FF"), true(), true()) satisfies $var</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-29">
      <description> EBV cannot be extracted fro xs:hexBinary. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>every $var in (true(), xs:hexBinary("FF"), true()) satisfies $var</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-30">
      <description> EBV cannot be extracted fro xs:hexBinary. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>every $var in (true(), true(), xs:hexBinary("FF")) satisfies $var</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-31">
      <description> EBV cannot be extracted fro xs:hexBinary. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>some $var in (xs:hexBinary("FF"), false(), true()) satisfies $var</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-32">
      <description> EBV cannot be extracted fro xs:hexBinary. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>some $var in (false(), xs:hexBinary("FF"), true()) satisfies $var</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-33">
      <description> Since EBV cannot be extracted from xs:hexBinary, FORG0006 is allowed. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>some $var in (true(), true(), xs:hexBinary("FF")) satisfies $var</test>
      <result>
         <any-of>
            <assert-true/>
            <error code="FORG0006"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-34">
      <description> A test whose essence is: `not(every $var in (false(), true(), true()) satisfies $var)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not(every $var in (false(), true(), true()) satisfies $var)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-35">
      <description> A test whose essence is: `not(every $var in (true(), false(), true()) satisfies $var)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not(every $var in (true(), false(), true()) satisfies $var)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-36">
      <description> A test whose essence is: `not(every $var in (true(), true(), false()) satisfies $var)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not(every $var in (true(), true(), false()) satisfies $var)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-37">
      <description> A test whose essence is: `some $var in (true(), true(), true()) satisfies $var`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>some $var in (true(), true(), true()) satisfies $var</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-38">
      <description> A test whose essence is: `some $var in (true(), false(), true()) satisfies $var`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>some $var in (true(), false(), true()) satisfies $var</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-39">
      <description> A test whose essence is: `some $var in (false(), true(), true()) satisfies $var`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>some $var in (false(), true(), true()) satisfies $var</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-40">
      <description> A test whose essence is: `some $var in (true(), true(), false()) satisfies $var`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>some $var in (true(), true(), false()) satisfies $var</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-41">
      <description> A test whose essence is: `not(some $var in (false(), false(), false()) satisfies $var)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not(some $var in (false(), false(), false()) satisfies $var)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-42">
      <description> A binding in a 'some' quantification shadows global variables. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>
        declare variable $i := false(); 
        some $i in (true(), true(), true()) satisfies $i</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-43">
      <description> A binding in a 'some' quantification shadows global variables. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>
        declare variable $i := false(); 
        declare variable $t := false(); 
        some $i in (true(), true()), $t in (true(), true()) satisfies $i eq $t</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-44">
      <description> A binding in a 'every' quantification shadows global variables. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>
        declare variable $i := false(); 
        declare variable $t := false(); 
        some $i in (true(), true()), $t in (true(), true()) satisfies ($i eq $t)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-45">
      <description> A binding in a 'every' quantification shadows global variables. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>
        declare variable $i := false(); 
        every $i in (true(), true()) satisfies $i</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-46">
      <description> A test whose essence is: `some $var in (1, 2, 3) satisfies $var eq 3`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>some $var in (1, 2, 3) satisfies $var eq 3</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-47">
      <description> A test whose essence is: `not(every $var in (1, 2, 3) satisfies $var eq 3)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not(every $var in (1, 2, 3) satisfies $var eq 3)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-48">
      <description> A test whose essence is: `every $var in (1, 2, 3) satisfies $var eq 1 or $var eq 2 or $var eq 3`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>every $var in (1, 2, 3) satisfies $var eq 1 or $var eq 2 or $var eq 3</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-49">
      <description> A test whose essence is: `some $var in (1, 2, 3) satisfies $var eq 1 or $var eq 2 or $var eq 3`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>some $var in (1, 2, 3) satisfies $var eq 1 or $var eq 2 or $var eq 3</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-50">
      <description> A test whose essence is: `some $aaa in (1, 2, 3), $bbb in (3, 2, 1) satisfies $aaa + $bbb eq 4`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>some $aaa in (1, 2, 3), $bbb in (3, 2, 1) satisfies $aaa + $bbb eq 4</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-51">
      <description> A test whose essence is: `every $aaa in (3, 3, 3), $bbb in (3, 3, 3) satisfies $aaa + $bbb eq 6`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>every $aaa in (3, 3, 3), $bbb in (3, 3, 3) satisfies $aaa + $bbb eq 6</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-52">
      <description> A test whose essence is: `not(every $var in (1, 2, 3) satisfies $var eq 3)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not(every $var in (1, 2, 3) satisfies $var eq 3)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-53">
      <description> A test whose essence is: `some $var in (1, 2, 3) satisfies $var eq 3`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>some $var in (1, 2, 3) satisfies $var eq 3</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-54">
      <description> A test whose essence is: `true() eq (some $a in 1 satisfies $a)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>true() eq (some $a in 1 satisfies $a)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-55">
      <description> A test whose essence is: `true() eq (every $a in 1 satisfies $a)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>true() eq (every $a in 1 satisfies $a)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-56">
      <description> A test whose essence is: `true() eq (some $fn:name in (1, 2) satisfies $fn:name)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>true() eq (some $fn:name in (1, 2) satisfies $fn:name)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-57">
      <description> A test whose essence is: `true() eq (some $xs:name in (1, 2) satisfies $xs:name)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>true() eq (some $xs:name in (1, 2) satisfies $xs:name)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-58">
      <description> A test whose essence is: `true() eq (every $fn:name in (1, 2) satisfies $fn:name)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>true() eq (every $fn:name in (1, 2) satisfies $fn:name)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-59">
      <description> A test whose essence is: `true() eq (every $xs:name in (1, 2) satisfies $xs:name)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>true() eq (every $xs:name in (1, 2) satisfies $xs:name)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-60">
      <description> Variable which is not in scope. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>some $foo in 1 satisfies $NOTEXIST</test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-61">
      <description> Variable which is not in scope. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>every $foo in 1 satisfies $NOTEXIST</test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-62">
      <description> Variable which is not in scope. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>some $foo in (1, $foo) satisfies 1</test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-63">
      <description> Variable which is not in scope. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>every $foo in (1, $foo) satisfies 1</test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-64">
      <description> Variable which is not in scope. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>some $foo in 1 satisfies $bar + (some $bar in 2 satisfies $bar)</test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-65">
      <description> Variable which is not in scope. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>every $foo in 1 satisfies $bar + (some $bar in 2 satisfies $bar)</test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-66">
      <description> Variable which is not in scope. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>every $foo in 1 satisfies $bar + (every $bar in 2 satisfies $bar)</test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-67">
      <description> Variable which is not in scope. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>some $foo in 1 satisfies $bar + (every $bar in 2 satisfies $bar)</test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-68">
      <description> Variable which is not in scope. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>some $a in (1, 2), $b in (1, 2), $c in (1, 2) satisfies 1, $a</test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-69">
      <description> Variable which is not in scope. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>some $a in (1, 2), $b in (1, 2), $c in (1, 2) satisfies 1, $b</test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-70">
      <description> Variable which is not in scope. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>some $a in (1, 2), $b in (1, 2), $c in (1, 2) satisfies 1, $c</test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-71">
      <description> Variable which is not in scope. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>every $a in (1, 2), $b in (1, 2), $c in (1, 2) satisfies 1, $a</test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-72">
      <description> Variable which is not in scope. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>every $a in (1, 2), $b in (1, 2), $c in (1, 2) satisfies 1, $b</test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-73">
      <description> Variable which is not in scope. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>every $a in (1, 2), $b in (1, 2), $c in (1, 2) satisfies 1, $c</test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-74">
      <description> The 'return' keyword is not valid in a 'some' expression, it must be 'satisfies'. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>some $foo in (1, $2) return 1</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-75">
      <description> The 'return' keyword is not valid in an 'every' expression, it must be 'satisfies'. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>every $foo in (1, $2) return 1</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-76">
      <description> Variable which is not in scope. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>some $foo in (1, 2, $foo) satisfies 1</test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-77">
      <description> Variable which is not in scope. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>some $foo in (1, $foo, 3) satisfies 1</test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-78">
      <description> Variable which is not in scope. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>some $foo in ($foo, 2, 3) satisfies 1</test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-79">
      <description> Variable which is not in scope. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>some $foo in $foo satisfies 1</test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-80">
      <description> Variable which is not in scope. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>every $foo in (1, 2, $foo) satisfies 1</test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-81">
      <description> Variable which is not in scope. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>every $foo in (1, $foo, 3) satisfies 1</test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-82">
      <description> Variable which is not in scope. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>every $foo in ($foo, 2, 3) satisfies 1</test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-83">
      <description> Variable which is not in scope. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>every $foo in $foo satisfies 1</test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-84">
      <description> Variable which is not in scope. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>every $a in 1, $b in $b satisfies 1</test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-85">
      <description> Variable which is not in scope. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>some $a in (1, 2, 3), $b in (1, 2, 3, $b) satisfies $a eq $b</test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-86">
      <description> Variable which is not in scope. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>every $a in (1, 2, 3), $b in (1, 2, 3, $b) satisfies ($a eq $b)</test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-87">
      <description> Variable which is not in scope. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>every $a in (1, 2), $b in (1, 2) satisfies 1, $b</test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-88">
      <description> Variable which is not in scope. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>some $a in (1, 2), $b in (1, 2) satisfies 1, $b</test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-89">
      <description> Nested variable bindings can reference each other. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>every $a in (1, 2, 3), $b in ($a, 4) satisfies $b gt 0</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-90">
      <description> Nested variable bindings can reference each other. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>some $a in (1, 2, 3), $b in ($a, 4) satisfies $b gt 0</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-91">
      <description> Nested variable bindings can reference each other. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>every $a in (1, 2), $b in $a satisfies $b</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-92">
      <description> Nested variable bindings can reference each other. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>some $a in (1, 2), $b in $a satisfies $b</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-93">
      <description> Nested variable bindings can reference each other. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>deep-equal((for $a in 1, $b in $a, $c in $a, $d in $c return ($a, $b, $c, $d)), (1, 1, 1, 1))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-94">
      <description> It is a type error to try to extract the EBV value of two integers. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>every $i in (1, 2, 3) satisfies ($i, $i)</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-95">
      <description> It is a type error to try to extract the EBV value of two integers. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>some $i in (1, 2, 3) satisfies ($i, $i)</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-96">
      <description> It is a type error to try to extract the EBV value of two integers. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>every $i in (1, 2, 3) satisfies ($i, $i)</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-97">
      <description> It is a type error to try to extract the EBV value of two integers. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>some $i in (1, 2, 3) satisfies ($i, $i)</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-98">
      <description> No 'at' declaration is allowed in 'some'-quantification. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>some $a at $p in (1, 2) satisfies $a</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWithout-99">
      <description> No 'at' declaration is allowed in 'every'-quantification. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>every $a at $p in (1, 2) satisfies $a</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-QuantExprWithout-1">
      <description> Keywords are case sensitive. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>SOME $i in (1, 2, 3) satisfies $i</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-QuantExprWithout-2">
      <description> Keywords are case sensitive. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>EVERY $i in (1, 2, 3) satisfies $i</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-QuantExprWithout-3">
      <description> Ensure the focus is defined. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<people id=""/>/(some $id in @id satisfies true())]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-QuantExprWithout-4">
      <description> Ensure use of the undefined focus gets flagged. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>some $id in attribute::id satisfies $id</test>
      <result>
         <error code="XPDY0002"/>
      </result>
   </test-case>

   <test-case name="K2-QuantExprWithout-5">
      <description> Use the focus from within a some-expression. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<e/>/(some $v in self::node() satisfies $v)]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-QuantExprWithout-6">
      <description> Use the focus from within a every-expression. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<e/>/(every $v in self::node() satisfies $v)]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-QuantExprWithout-7">
      <description> Use the focus from within a every-expression's tail. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<e/>/(every $b in 1, $v in self::node() satisfies $v)]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-QuantExprWithout-8">
      <description> Use the focus from within a some-expression's tail. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<e/>/(some $b in 1, $v in self::node() satisfies $v)]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-QuantExprWithout-9">
      <description> Combine some with fn:deep-equal(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $firstSeq := (<a/>, <b/>, <e><c/></e>) let $secondSeq := (<a attr=""/>, <b>text</b>, <e><c/></e>) return some $i in $firstSeq satisfies $secondSeq[deep-equal(.,$i)]]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>   

   <test-case name="K-QuantExprWith-1">
      <description> Every-quantification carrying type declarations(cardinalities have no impact). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>every $a as item()* in (1, 2), $b as item()* in $a satisfies $b</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWith-2">
      <description> Every-quantification carrying type declarations(cardinalities have no impact). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>some $a as item()* in (1, 2), $b as item()* in $a satisfies $b</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWith-3">
      <description> Every-quantification carrying type declarations(cardinalities have no impact). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>every $a as item()? in (1, 2), $b as item()? in $a satisfies $b</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWith-4">
      <description> Every-quantification carrying type declarations(cardinalities have no impact). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>some $a as item()? in (1, 2), $b as item()? in $a satisfies $b</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWith-5">
      <description> Every-quantification carrying type declarations(cardinalities have no impact). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>every $a as item()+ in (1, 2), $b as item()+ in $a satisfies $b</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWith-6">
      <description> Every-quantification carrying type declarations(cardinalities have no impact). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>some $a as item()+ in (1, 2), $b as item()+ in $a satisfies $b</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWith-7">
      <description> Every-quantification; the empty-sequence() cannot have an occurrence indicator. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>every $a as empty-sequence()? in (1, 2) satisfies $a</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWith-8">
      <description> Every-quantification; the empty-sequence() cannot have an occurrence indicator. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>some $a as empty-sequence()? in (1, 2) satisfies $a</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWith-9">
      <description> Some-quantification carrying invalid type declarations. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>some $a as xs:anyURI in 1 satisfies count($a)</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWith-10">
      <description> Some-quantification carrying invalid type declarations. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>every $a as xs:anyURI in 1 satisfies count($a)</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWith-11">
      <description> Every-quantification carrying invalid type declarations. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>every $a as empty-sequence() in (1, 2), $b as xs:integer in $a satisfies $b</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWith-12">
      <description> Every-quantification carrying invalid type declarations. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>some $a as empty-sequence() in (1, 2), $b as xs:integer in $a satisfies $b</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWith-13">
      <description> Every-quantification carrying invalid type declarations. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>every $a as xs:integer+ in (1, 2), $b as xs:string* in $a satisfies $b</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWith-14">
      <description> Some-quantification carrying invalid type declarations. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>some $a as xs:integer+ in (1, 2), $b as xs:string* in $a satisfies $b</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWith-15">
      <description> Some-quantification carrying invalid type declarations. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>some $a as item()* in (1, 2), $b as xs:string in $a satisfies $b</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWith-16">
      <description> Some-quantification carrying invalid type declarations. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>every $a as item()* in (1, 2), $b as xs:string in $a satisfies $b</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWith-17">
      <description> Every-quantification carrying invalid type declarations. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>every $a as xs:integer+ in (1, 2), $b as xs:integer in $a satisfies $b</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWith-18">
      <description> Every-quantification carrying invalid type declarations. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>every $a as item()* in (1, 2), $b as xs:integer in $a satisfies $b</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWith-19">
      <description> No 'at' declaration is allowed in 'some'-quantification. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>some $a as item() at $p in (1, 2) satisfies $a</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWith-20">
      <description> No 'at' declaration is allowed in 'every'-quantification. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>every $a as item() at $p in (1, 2) satisfies $a</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWith-21">
      <description> Every-quantification with type-declaration. An implementation supporting the static typing feature may raise XPTY0004. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>every $a as empty-sequence() in (), $b as xs:integer in $a satisfies $b</test>
      <result>
         <any-of>
            <assert-true/>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K-QuantExprWith-22">
      <description> Every-quantification with type-declaration. An implementation supporting the static typing feature may raise XPTY0004. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>not(some $a as empty-sequence() in (), $b as xs:integer in $a satisfies $b)</test>
      <result>
         <any-of>
            <assert-true/>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K-QuantExprWith-23">
      <description> Every-quantification with type-declaration. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>every $a as xs:integer in (1, 2), $b as xs:integer in $a satisfies $b</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-QuantExprWith-24">
      <description> Every-quantification with type-declaration. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>some $a as xs:integer in (1, 2), $b as xs:integer in $a satisfies $b</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
      
   <test-case name="cbcl-every-001">
      <description> Test optimization when the domain may be empty and return type is a value </description>
      <created by="Nick Jones" on="2008-06-05"/>
      <test>every $x in (1 to 10)[. div 2 = 11] satisfies false()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="cbcl-some-001">
      <description> Test optimization where the domain may be empty and the return type a value </description>
      <created by="Nick Jones" on="2008-06-05"/>
      <test>some $x in (1 to 10)[. div 2 = 11] satisfies true()</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-every-002">
      <description> Tests optimization of every $x in .... satisfies true() </description>
      <created by="Nick Jones" on="2008-06-20"/>
      <test>every $x in (1 to 10)[. mod 2 = 0] satisfies true()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
</test-set>