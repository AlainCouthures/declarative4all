<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="prod-AxisStep.ancestor-or-self">
   <description>Tests for the AxisStep production</description>
   <link type="spec" document="http://www.w3.org/TR/xquery-30/"
         idref="doc-xquery30-AxisStep"/>
   <link type="spec" document="" section-number="3.2.1.1" idref="axes"/>

   <test-case name="ancestorself-1">
      <description> Evaluation of the ancestor-or-self axis for which the context node is not a node. </description>
      <created by="Carmelo Montanez" on="2005-12-13"/>
      <test>(200)/ancestor-or-self::*</test>
      <result>
         <error code="XPTY0019"/>
      </result>
   </test-case>

   <test-case name="ancestorself-2">
      <description> Evaluation of the ancestor-or-self axis for which the given node does not exists. Uses fn:count to avoid empty file. </description>
      <created by="Carmelo Montanez" on="2005-12-13"/>
      <environment ref="works-mod"/>
      <test>fn:count(/works/employee[1]/ancestor-or-self::noSuchNode)</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="ancestorself-3">
      <description> Evaluation of the ancestor-or-self axis that is part of an "is" expression (return true). </description>
      <created by="Carmelo Montanez" on="2005-12-13"/>
      <environment ref="works-mod"/>
      <test>exactly-one(/works/employee[1]/ancestor-or-self::works) is exactly-one(/works)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="ancestorself-4">
      <description> Evaluation of the ancestor-or-self axis that is part of an "is" expression (return false). </description>
      <created by="Carmelo Montanez" on="2005-12-13"/>
      <environment ref="works-mod"/>
      <test>exactly-one(/works/employee[1]/ancestor-or-self::works) is exactly-one(/works/employee[1])</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="ancestorself-5">
      <description> Evaluation of the ancestor-or-self axis that is part of an "node before" expression (return true). </description>
      <created by="Carmelo Montanez" on="2005-12-13"/>
      <environment ref="works-mod"/>
      <test><![CDATA[exactly-one(/works/employee[1]/ancestor-or-self::works) << exactly-one(/works/employee[1])]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="ancestorself-6">
      <description> Evaluation of the ancestor-or-self axis that is part of an "node before" expression and both operands are the same (return false). </description>
      <created by="Carmelo Montanez" on="2005-12-13"/>
      <environment ref="works-mod"/>
      <test><![CDATA[exactly-one(/works/employee[1]/ancestor-or-self::works) << exactly-one(/works/employee[1]/ancestor-or-self::works)]]></test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="ancestorself-7">
      <description> Evaluation of the ancestor-or-self axis that is part of an "node before" expression both operands are differents (return false). </description>
      <created by="Carmelo Montanez" on="2005-12-13"/>
      <environment ref="works-mod"/>
      <test><![CDATA[exactly-one(/works/employee[1]/ancestor-or-self::works) << exactly-one(/works/employee[1])]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="ancestorself-8">
      <description> Evaluation of the ancestor-or-self axis that is part of an "node after" expression (returns true). </description>
      <created by="Carmelo Montanez" on="2005-12-13"/>
      <environment ref="works-mod"/>
      <test>exactly-one(/works/employee[1]) >> exactly-one(/works/employee[1]/ancestor-or-self::works)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="ancestorself-9">
      <description> Evaluation of the ancestor-or-self axis that is part of an "node after" expression with both operands the same (returns false). </description>
      <created by="Carmelo Montanez" on="2005-12-13"/>
      <environment ref="works-mod"/>
      <test>exactly-one(/works/employee[1]/ancestor-or-self::works) >> exactly-one(/works/employee[1]/ancestor-or-self::works)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="ancestorself-10">
      <description> Evaluation of the ancestor-or-self axis that is part of an "node after" expression with both operands the same (returns false). </description>
      <created by="Carmelo Montanez" on="2005-12-13"/>
      <environment ref="works-mod"/>
      <test>exactly-one(/works/employee[1]/ancestor-or-self::works) >> exactly-one(/works/employee[1]/hours)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="ancestorself-11">
      <description> Evaluation of the ancestor-or-self axis that is part of an "union " operation. Both operands are the same. </description>
      <created by="Carmelo Montanez" on="2005-12-13"/>
      <environment ref="works-mod"/>
      <test>((/works/employee[12]/*/day/ancestor-or-self::overtime) | (/works/employee[12]/*/day/ancestor-or-self::overtime))/count(*)</test>
      <result>
         <assert-string-value>2</assert-string-value>
      </result>
   </test-case>

   <test-case name="ancestorself-12">
      <description> Evaluation of the ancestor-or-self axis that is part of an "union" operation. Both operands are different </description>
      <created by="Carmelo Montanez" on="2005-12-13"/>
      <environment ref="works-mod"/>
      <test>((/works/employee[12]/*/day[1]/ancestor-or-self::overtime) | (/works/employee[12]/*/day[2]/ancestor-or-self::overtime))/count(*)</test>
      <result>
         <assert-string-value>2</assert-string-value>
      </result>
   </test-case>

   <test-case name="ancestorself-13">
      <description> Evaluation of the ancestor-or-self axis that is part of an "intersect" operation. Both operands are the same. </description>
      <created by="Carmelo Montanez" on="2005-12-13"/>
      <environment ref="works-mod"/>
      <test>((/works/employee[12]/overtime/day/ancestor-or-self::employee) intersect (/works/employee[12]/overtime/day/ancestor-or-self::employee))/@name</test>
      <result>
         <assert-string-value>John Doe 12</assert-string-value>
      </result>
   </test-case>

   <test-case name="ancestorself-14">
      <description> Evaluation of the ancestor-self axis that is part of an "except" operation. Both operands are the same. Uses fn:count to avoid empty file </description>
      <created by="Carmelo Montanez" on="2005-12-13"/>
      <environment ref="works-mod"/>
      <test>fn:count((/works/employee[12]/overtime/day[ancestor-or-self::overtime]) except (/works/employee[12]/overtime/day[ancestor-or-self::overtime]))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="ancestorself-15">
      <description> Evaluation of the ancestor-or-self axis that is part of an "except" operation. Both operands are different. </description>
      <created by="Carmelo Montanez" on="2005-12-13"/>
      <environment ref="works-mod"/>
      <test>(/works/employee[12]/overtime/day[ancestor-or-self::overtime]) except (/works/employee[12]/overtime/day[1])</test>
      <result>
         <assert-string-value>Tuesday</assert-string-value>
      </result>
   </test-case>

   <test-case name="ancestorself-16">
      <description> Evaluation of the ancestor-or-self axis that is part of a boolean expression ("and" and fn:true(). </description>
      <created by="Carmelo Montanez" on="2005-12-13"/>
      <environment ref="works-mod"/>
      <test>(/works/employee[12]/overtime/day[ancestor-or-self::overtime]) and fn:true()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="ancestorself-17">
      <description> Evaluation of the ancestor-or-self axis that is part of a boolean expression ("and" and fn:false()). </description>
      <created by="Carmelo Montanez" on="2005-12-13"/>
      <environment ref="works-mod"/>
      <test>(/works/employee[12]/overtime/day[ancestor-or-self::overtime]) and fn:false()</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="ancestorself-18">
      <description> Evaluation of the ancestor-or-self axis that is part of a boolean expression ("or" and fn:true()). </description>
      <created by="Carmelo Montanez" on="2005-12-13"/>
      <environment ref="works-mod"/>
      <test>(/works/employee[12]/overtime/day[ancestor-or-self::overtime]) or fn:true()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="ancestorself-19">
      <description> Evaluation of the ancestor-or-self axis that is part of a boolean expression ("or" and fn:false()). </description>
      <created by="Carmelo Montanez" on="2005-12-13"/>
      <environment ref="works-mod"/>
      <test>(/works/employee[12]/overtime/day[ancestor-or-self::overtime]) or fn:false()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="ancestorself-20">
      <description> Evaluation of the ancestor-or-self axis that used as part of the deep-equal-function. </description>
      <created by="Carmelo Montanez" on="2005-12-13"/>
      <environment ref="works-mod"/>
      <test>fn:deep-equal(/works/employee[12]/overtime/ancestor-or-self::works,/works/employee[12]/overtime/ancestor-or-self::works)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="ancestorself-21">
      <description> Evaluation of the ancestor-or-self axis used together with a newly constructed element. </description>
      <created by="Carmelo Montanez" on="2005-12-13"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $var := <anElement>Some Content</anElement> return $var/ancestor-or-self::*]]></test>
      <result>
         <assert-xml><![CDATA[<anElement>Some Content</anElement>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="unabbreviatedSyntax-11">
      <description> Evaluate selecting an ancestor or self (ancestor-or-self::employee)- Select the "employee" ancestors of the context node and if the context is "employee" select it as well. </description>
      <created by="Carmelo Montanez" on="2005-07-11"/>
      <environment ref="works-mod"/>
      <test>(for $h in (/works/employee[1]/hours) return $h/ancestor-or-self::employee)/@name</test>
      <result>
         <assert-string-value>Jane Doe 1</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-ancestor-or-selfAxis-1">
      <description> Apply axis ancestor on a single element. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[1, <element/>/ancestor-or-self::node(), 1]]></test>
      <result>
         <assert-xml><![CDATA[1<element/>1]]></assert-xml>
      </result>
   </test-case>

   <test-case name="K2-ancestor-or-selfAxis-2">
      <description> Apply axis ancestor to a single processing instruction. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[1, <?target data?>/ancestor-or-self::node(), 1]]></test>
      <result>
         <assert-xml><![CDATA[1<?target data?>1]]></assert-xml>
      </result>
   </test-case>

   <test-case name="K2-ancestor-or-selfAxis-3">
      <description> Apply axis ancestor to a single attribute. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>1, (attribute name {"content"}/ancestor-or-self::node() instance of attribute(name)), 1</test>
      <result>
         <assert-deep-eq>1, true(), 1</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="K2-ancestor-or-selfAxis-4">
      <description> Apply axis ancestor to a single comment. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[1, <!-- content -->/ancestor-or-self::node(), 1]]></test>
      <result>
         <assert-xml><![CDATA[1<!-- content -->1]]></assert-xml>
      </result>
   </test-case>

   <test-case name="K2-ancestor-or-selfAxis-5">
      <description> Apply axis ancestor-or-self to a single document node. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>1, document {()}/ancestor-or-self::node(), 1</test>
      <result>
         <assert-xml>11</assert-xml>
      </result>
   </test-case>

   <test-case name="K2-ancestor-or-selfAxis-6">
      <description> Apply axis ancestor to a single text node. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>1, text {""}/ancestor-or-self::node(), 1</test>
      <result>
         <assert-xml>11</assert-xml>
      </result>
   </test-case>

   <test-case name="K2-ancestor-or-selfAxis-7">
      <description> Apply fn:count() to the result of axis ancestor-or-self. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[count(<a> <b c=""> <c/> </b> <d/> </a>/b/c/(ancestor-or-self::*))]]></test>
      <result>
         <assert-eq>3</assert-eq>
      </result>
   </test-case>

   <test-case name="K2-ancestor-or-selfAxis-8">
      <description> Apply fn:count() to the result of axis ancestor-or-self(#2). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<a> <b c=""> <c/> </b> <d/> </a>//count(ancestor-or-self::*)]]></test>
      <result>
         <assert-string-value>1 2 3 2</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-ancestor-or-selfAxis-9">
      <description> Use positional predicates. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<r> <a> <b> <c/> </b> </a> </r>/a/b/c/(ancestor-or-self::*[1], ancestor-or-self::*[2], ancestor-or-self::*[last()], ancestor-or-self::*[10])]]></test>
      <result>
         <assert-xml><![CDATA[<r><a><b><c/></b></a></r><b><c/></b><c/>]]></assert-xml>
      </result>
   </test-case>
</test-set>
