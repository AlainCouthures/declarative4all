<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="prod-ReturnClause">
   <description>Tests for the ReturnClause production</description>
   <link type="spec" document="http://www.w3.org/TR/xquery-30/"
         idref="doc-xquery30-ReturnClause"/>
   <link type="spec" document="XQuery" section-number="3.8.3" idref="id-orderby-return"/>
   
   <environment name="fsx">
      <source role="." file="ForClause/fsx.xml">
         <description>Data about a filesystem represented in XML.</description>
         <created by="Mike Rorke" on="2003-03-25"/>
      </source>    
   </environment>

   <test-case name="ReturnExpr001">
      <description> For+Return - use element's text to construct new element </description>
      <created by="Jinghao Liu" on="2003-02-10"/>
      <environment ref="fsx"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[for $folder in /MyComputer/Drive2//Folder return <newFolder>{ $folder/FolderName/text() }</newFolder>]]></test>
      <result>
         <assert-xml><![CDATA[<newFolder>Folder00000000001</newFolder><newFolder>Folder00000000002</newFolder><newFolder>Folder00000000003</newFolder><newFolder>Folder00000000004</newFolder><newFolder>Folder00000000005</newFolder><newFolder>Folder00000000006</newFolder><newFolder>Folder00000000007</newFolder><newFolder>Folder00000000008</newFolder><newFolder>Folder00000000009</newFolder><newFolder>Folder00000000010</newFolder><newFolder>Folder00000000011</newFolder><newFolder>Folder00000000012</newFolder><newFolder>Folder00000000013</newFolder><newFolder>Folder00000000014</newFolder><newFolder>Folder00000000015</newFolder><newFolder>Folder00000000016</newFolder>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="ReturnExpr002">
      <description> For+Return - use existing attribute to generate new attribute for new element </description>
      <created by="Jinghao Liu" on="2003-02-10"/>
      <environment ref="fsx"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[for $folder in /MyComputer/Drive2//Folder return <newFolder>{ $folder/@name, $folder/FolderName/text() }</newFolder>]]></test>
      <result>
         <assert-xml><![CDATA[<newFolder name="Folder00000000001">Folder00000000001</newFolder><newFolder name="Folder00000000002">Folder00000000002</newFolder><newFolder name="Folder00000000003">Folder00000000003</newFolder><newFolder name="Folder00000000004">Folder00000000004</newFolder><newFolder name="Folder00000000005">Folder00000000005</newFolder><newFolder name="Folder00000000006">Folder00000000006</newFolder><newFolder name="Folder00000000007">Folder00000000007</newFolder><newFolder name="Folder00000000008">Folder00000000008</newFolder><newFolder name="Folder00000000009">Folder00000000009</newFolder><newFolder name="Folder00000000010">Folder00000000010</newFolder><newFolder name="Folder00000000011">Folder00000000011</newFolder><newFolder name="Folder00000000012">Folder00000000012</newFolder><newFolder name="Folder00000000013">Folder00000000013</newFolder><newFolder name="Folder00000000014">Folder00000000014</newFolder><newFolder name="Folder00000000015">Folder00000000015</newFolder><newFolder name="Folder00000000016">Folder00000000016</newFolder>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="ReturnExpr003">
      <description> For+Return - one For+Return expr contains another one For+Return expr </description>
      <created by="Jinghao Liu" on="2003-02-10"/>
      <environment ref="fsx"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        for $folder in /MyComputer/Drive1/Folder[1] 
        return <folder1> {$folder/FolderName} <files> { 
                    for $file in ($folder/File)[position() < 6] 
                    return <f>{$file/FileName/substring(.,13)}</f> } </files> 
               </folder1>
      ]]></test>
      <result>
         <assert-xml><![CDATA[<folder1><FolderName>Folder00000000000</FolderName><files><f>000</f><f>001</f><f>002</f><f>003</f><f>004</f></files></folder1>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="ReturnExpr004">
      <description> For+Where+Return - filters in 'Where' expr and in 'Return' expr using predicate </description>
      <created by="Jinghao Liu" on="2003-02-10"/>
      <environment ref="fsx"/>
      <dependency type="spec" value="XQ10+"/>
      <test>for $f in /MyComputer//File where $f/@creation_date="08/06/00" return $f/SecurityObject/Denies/Deny[security/right]/user/string()</test>
      <result>
         <assert-xml>system\Toshiko</assert-xml>
      </result>
   </test-case>

   <test-case name="ReturnExpr005">
      <description> FLWOR expression returns selected element nodes </description>
      <created by="Mike Rorke" on="2005-06-24"/>
      <environment ref="fsx"/>
      <test>for $file in (//Folder)[1]/File return $file/FileName</test>
      <result>
         <assert-xml><![CDATA[<FileName>File00000000000</FileName><FileName>File00000000001</FileName><FileName>File00000000002</FileName><FileName>File00000000003</FileName><FileName>File00000000004</FileName><FileName>File00000000005</FileName><FileName>File00000000006</FileName><FileName>File00000000007</FileName><FileName>File00000000008</FileName><FileName>File00000000009</FileName><FileName>File00000000010</FileName><FileName>File00000000011</FileName><FileName>File00000000012</FileName><FileName>File00000000013</FileName><FileName>File00000000014</FileName><FileName>File00000000015</FileName><FileName>File00000000016</FileName><FileName>File00000000017</FileName><FileName>File00000000018</FileName><FileName>File00000000019</FileName><FileName>File00000000020</FileName><FileName>File00000000021</FileName><FileName>File00000000022</FileName><FileName>File00000000023</FileName><FileName>File00000000024</FileName><FileName>File00000000025</FileName><FileName>File00000000026</FileName><FileName>File00000000027</FileName><FileName>File00000000028</FileName><FileName>File00000000029</FileName><FileName>File00000000030</FileName>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="ReturnExpr006">
      <description> FLWOR expression returns selected values </description>
      <created by="Mike Rorke" on="2005-06-24"/>
      <environment ref="fsx"/>
      <test>for $file in (//Folder)[1]/File return data( $file/FileName )</test>
      <result>
         <assert-string-value>File00000000000 File00000000001 File00000000002 File00000000003 File00000000004 File00000000005 File00000000006 File00000000007 File00000000008 File00000000009 File00000000010 File00000000011 File00000000012 File00000000013 File00000000014 File00000000015 File00000000016 File00000000017 File00000000018 File00000000019 File00000000020 File00000000021 File00000000022 File00000000023 File00000000024 File00000000025 File00000000026 File00000000027 File00000000028 File00000000029 File00000000030</assert-string-value>
      </result>
   </test-case>

   <test-case name="ReturnExpr007">
      <description> FLWOR expression return parent of select nodes </description>
      <created by="Mike Rorke" on="2005-06-24"/>
      <environment ref="fsx"/>
      <test>for $file in (//Folder)[1]/File return $file/parent::Folder/FolderName</test>
      <result>
         <assert-xml><![CDATA[<FolderName>Folder00000000000</FolderName><FolderName>Folder00000000000</FolderName><FolderName>Folder00000000000</FolderName><FolderName>Folder00000000000</FolderName><FolderName>Folder00000000000</FolderName><FolderName>Folder00000000000</FolderName><FolderName>Folder00000000000</FolderName><FolderName>Folder00000000000</FolderName><FolderName>Folder00000000000</FolderName><FolderName>Folder00000000000</FolderName><FolderName>Folder00000000000</FolderName><FolderName>Folder00000000000</FolderName><FolderName>Folder00000000000</FolderName><FolderName>Folder00000000000</FolderName><FolderName>Folder00000000000</FolderName><FolderName>Folder00000000000</FolderName><FolderName>Folder00000000000</FolderName><FolderName>Folder00000000000</FolderName><FolderName>Folder00000000000</FolderName><FolderName>Folder00000000000</FolderName><FolderName>Folder00000000000</FolderName><FolderName>Folder00000000000</FolderName><FolderName>Folder00000000000</FolderName><FolderName>Folder00000000000</FolderName><FolderName>Folder00000000000</FolderName><FolderName>Folder00000000000</FolderName><FolderName>Folder00000000000</FolderName><FolderName>Folder00000000000</FolderName><FolderName>Folder00000000000</FolderName><FolderName>Folder00000000000</FolderName><FolderName>Folder00000000000</FolderName>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="ReturnExpr008">
      <description> FLWOR expression returns constant value, independent of input bindings </description>
      <created by="Mike Rorke" on="2005-06-24"/>
      <environment ref="fsx"/>
      <test>for $file in (//Folder)[1]/File return 1</test>
      <result>
         <assert-string-value>1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1</assert-string-value>
      </result>
   </test-case>

   <test-case name="ReturnExpr009">
      <description> FLWOR expression returns node from document, independent of input bindings </description>
      <created by="Mike Rorke" on="2005-06-24"/>
      <environment ref="fsx"/>
      <test>for $file in (//Folder)[1]/File return (//FileName)[1]</test>
      <result>
         <assert-xml><![CDATA[<FileName>File00000000000</FileName><FileName>File00000000000</FileName><FileName>File00000000000</FileName><FileName>File00000000000</FileName><FileName>File00000000000</FileName><FileName>File00000000000</FileName><FileName>File00000000000</FileName><FileName>File00000000000</FileName><FileName>File00000000000</FileName><FileName>File00000000000</FileName><FileName>File00000000000</FileName><FileName>File00000000000</FileName><FileName>File00000000000</FileName><FileName>File00000000000</FileName><FileName>File00000000000</FileName><FileName>File00000000000</FileName><FileName>File00000000000</FileName><FileName>File00000000000</FileName><FileName>File00000000000</FileName><FileName>File00000000000</FileName><FileName>File00000000000</FileName><FileName>File00000000000</FileName><FileName>File00000000000</FileName><FileName>File00000000000</FileName><FileName>File00000000000</FileName><FileName>File00000000000</FileName><FileName>File00000000000</FileName><FileName>File00000000000</FileName><FileName>File00000000000</FileName><FileName>File00000000000</FileName><FileName>File00000000000</FileName>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="ReturnExpr010">
      <description> FLWOR expression returns empty sequence literal </description>
      <created by="Mike Rorke" on="2005-06-24"/>
      <environment ref="fsx"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<empty> { for $file in (//Folder)[1]/File return () } </empty>]]></test>
      <result>
         <any-of>
            <assert-xml><![CDATA[<empty />]]></assert-xml>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="ReturnExpr011">
      <description> FLWOR expression returns a constructed sequence </description>
      <created by="Mike Rorke" on="2005-06-24"/>
      <environment ref="fsx"/>
      <test>for $folder in //Folder, $file in $folder/File return ( $folder/FolderName, $file/FileName )</test>
      <result>
         <assert-xml><![CDATA[<FolderName>Folder00000000000</FolderName><FileName>File00000000000</FileName><FolderName>Folder00000000000</FolderName><FileName>File00000000001</FileName><FolderName>Folder00000000000</FolderName><FileName>File00000000002</FileName><FolderName>Folder00000000000</FolderName><FileName>File00000000003</FileName><FolderName>Folder00000000000</FolderName><FileName>File00000000004</FileName><FolderName>Folder00000000000</FolderName><FileName>File00000000005</FileName><FolderName>Folder00000000000</FolderName><FileName>File00000000006</FileName><FolderName>Folder00000000000</FolderName><FileName>File00000000007</FileName><FolderName>Folder00000000000</FolderName><FileName>File00000000008</FileName><FolderName>Folder00000000000</FolderName><FileName>File00000000009</FileName><FolderName>Folder00000000000</FolderName><FileName>File00000000010</FileName><FolderName>Folder00000000000</FolderName><FileName>File00000000011</FileName><FolderName>Folder00000000000</FolderName><FileName>File00000000012</FileName><FolderName>Folder00000000000</FolderName><FileName>File00000000013</FileName><FolderName>Folder00000000000</FolderName><FileName>File00000000014</FileName><FolderName>Folder00000000000</FolderName><FileName>File00000000015</FileName><FolderName>Folder00000000000</FolderName><FileName>File00000000016</FileName><FolderName>Folder00000000000</FolderName><FileName>File00000000017</FileName><FolderName>Folder00000000000</FolderName><FileName>File00000000018</FileName><FolderName>Folder00000000000</FolderName><FileName>File00000000019</FileName><FolderName>Folder00000000000</FolderName><FileName>File00000000020</FileName><FolderName>Folder00000000000</FolderName><FileName>File00000000021</FileName><FolderName>Folder00000000000</FolderName><FileName>File00000000022</FileName><FolderName>Folder00000000000</FolderName><FileName>File00000000023</FileName><FolderName>Folder00000000000</FolderName><FileName>File00000000024</FileName><FolderName>Folder00000000000</FolderName><FileName>File00000000025</FileName><FolderName>Folder00000000000</FolderName><FileName>File00000000026</FileName><FolderName>Folder00000000000</FolderName><FileName>File00000000027</FileName><FolderName>Folder00000000000</FolderName><FileName>File00000000028</FileName><FolderName>Folder00000000000</FolderName><FileName>File00000000029</FileName><FolderName>Folder00000000000</FolderName><FileName>File00000000030</FileName><FolderName>Folder00000000001</FolderName><FileName>File00000000031</FileName><FolderName>Folder00000000002</FolderName><FileName>File00000000032</FileName><FolderName>Folder00000000003</FolderName><FileName>File00000000033</FileName><FolderName>Folder00000000004</FolderName><FileName>File00000000034</FileName><FolderName>Folder00000000005</FolderName><FileName>File00000000035</FileName><FolderName>Folder00000000006</FolderName><FileName>File00000000036</FileName><FolderName>Folder00000000007</FolderName><FileName>File00000000037</FileName><FolderName>Folder00000000008</FolderName><FileName>File00000000038</FileName><FolderName>Folder00000000009</FolderName><FileName>File00000000039</FileName><FolderName>Folder00000000010</FolderName><FileName>File00000000040</FileName><FolderName>Folder00000000011</FolderName><FileName>File00000000041</FileName><FolderName>Folder00000000012</FolderName><FileName>File00000000042</FileName><FolderName>Folder00000000013</FolderName><FileName>File00000000043</FileName><FolderName>Folder00000000014</FolderName><FileName>File00000000044</FileName><FolderName>Folder00000000015</FolderName><FileName>File00000000045</FileName><FolderName>Folder00000000016</FolderName><FileName>File00000000046</FileName><FolderName>Folder00000000017</FolderName><FileName>File00000000047</FileName><FolderName>Folder00000000018</FolderName><FileName>File00000000048</FileName><FolderName>Folder00000000019</FolderName><FileName>File00000000049</FileName><FolderName>Folder00000000020</FolderName><FileName>File00000000050</FileName><FolderName>Folder00000000021</FolderName><FileName>File00000000051</FileName><FolderName>Folder00000000022</FolderName><FileName>File00000000052</FileName><FolderName>Folder00000000023</FolderName><FileName>File00000000053</FileName><FolderName>Folder00000000024</FolderName><FileName>File00000000054</FileName><FolderName>Folder00000000025</FolderName><FileName>File00000000055</FileName><FolderName>Folder00000000026</FolderName><FileName>File00000000056</FileName><FolderName>Folder00000000027</FolderName><FileName>File00000000057</FileName><FolderName>Folder00000000028</FolderName><FileName>File00000000058</FileName><FolderName>Folder00000000029</FolderName><FileName>File00000000059</FileName><FolderName>Folder00000000030</FolderName><FileName>File00000000060</FileName><FolderName>Folder00000000031</FolderName><FileName>File00000000061</FileName><FolderName>Folder00000000032</FolderName><FileName>File00000000062</FileName><FolderName>Folder00000000033</FolderName><FileName>File00000000063</FileName><FolderName>Folder00000000034</FolderName><FileName>File00000000064</FileName><FolderName>Folder00000000035</FolderName><FileName>File00000000065</FileName><FolderName>Folder00000000036</FolderName><FileName>File00000000066</FileName><FolderName>Folder00000000037</FolderName><FileName>File00000000067</FileName><FolderName>Folder00000000038</FolderName><FileName>File00000000068</FileName><FolderName>Folder00000000039</FolderName><FileName>File00000000069</FileName><FolderName>Folder00000000040</FolderName><FileName>File00000000070</FileName><FolderName>Folder00000000041</FolderName><FileName>File00000000071</FileName><FolderName>Folder00000000042</FolderName><FileName>File00000000072</FileName><FolderName>Folder00000000043</FolderName><FileName>File00000000073</FileName><FolderName>Folder00000000044</FolderName><FileName>File00000000074</FileName><FolderName>Folder00000000045</FolderName><FileName>File00000000075</FileName><FolderName>Folder00000000046</FolderName><FileName>File00000000076</FileName><FolderName>Folder00000000048</FolderName><FileName>File00000000077</FileName><FolderName>Folder00000000048</FolderName><FileName>File00000000078</FileName><FolderName>Folder00000000048</FolderName><FileName>File00000000079</FileName><FolderName>Folder00000000048</FolderName><FileName>File00000000080</FileName><FolderName>Folder00000000048</FolderName><FileName>File00000000081</FileName><FolderName>Folder00000000049</FolderName><FileName>File00000000082</FileName><FolderName>Folder00000000049</FolderName><FileName>File00000000083</FileName><FolderName>Folder00000000049</FolderName><FileName>File00000000084</FileName><FolderName>Folder00000000049</FolderName><FileName>File00000000085</FileName><FolderName>Folder00000000049</FolderName><FileName>File00000000086</FileName><FolderName>Folder00000000050</FolderName><FileName>File00000000087</FileName><FolderName>Folder00000000050</FolderName><FileName>File00000000088</FileName><FolderName>Folder00000000051</FolderName><FileName>File00000000089</FileName><FolderName>Folder00000000051</FolderName><FileName>File00000000090</FileName><FolderName>Folder00000000051</FolderName><FileName>File00000000091</FileName><FolderName>Folder00000000051</FolderName><FileName>File00000000092</FileName><FolderName>Folder00000000051</FolderName><FileName>File00000000093</FileName><FolderName>Folder00000000051</FolderName><FileName>File00000000094</FileName><FolderName>Folder00000000052</FolderName><FileName>File00000000095</FileName><FolderName>Folder00000000052</FolderName><FileName>File00000000096</FileName><FolderName>Folder00000000053</FolderName><FileName>File00000000097</FileName><FolderName>Folder00000000053</FolderName><FileName>File00000000098</FileName><FolderName>Folder00000000053</FolderName><FileName>File00000000099</FileName><FolderName>Folder00000000054</FolderName><FileName>File00000000100</FileName>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="ReturnExpr012">
      <description> Multiple return statements </description>
      <created by="Mike Rorke" on="2005-06-24"/>
      <environment ref="fsx"/>
      <test>for $file in (//Folder)[1]/File return $file return $file</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="ReturnExpr013">
      <description> Missing 'return' statement in FLWOR expression </description>
      <created by="Mike Rorke" on="2005-06-24"/>
      <environment ref="fsx"/>
      <test>for $file in (//Folder)[1]/File</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="ReturnExpr014">
      <description> FLWOR expression return statement depends on undefined variable </description>
      <created by="Mike Rorke" on="2005-06-24"/>
      <environment ref="fsx"/>
      <test>for $file in (//Folder)[1]/File return $undefined</test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="ReturnExpr015">
      <description> Variable bound to value from return statement </description>
      <created by="Mike Rorke" on="2005-06-24"/>
      <environment ref="fsx"/>
      <test>for $file in for $folder in (//Folder)[1] return $folder/File return $file/FileName</test>
      <result>
         <assert-xml><![CDATA[<FileName>File00000000000</FileName><FileName>File00000000001</FileName><FileName>File00000000002</FileName><FileName>File00000000003</FileName><FileName>File00000000004</FileName><FileName>File00000000005</FileName><FileName>File00000000006</FileName><FileName>File00000000007</FileName><FileName>File00000000008</FileName><FileName>File00000000009</FileName><FileName>File00000000010</FileName><FileName>File00000000011</FileName><FileName>File00000000012</FileName><FileName>File00000000013</FileName><FileName>File00000000014</FileName><FileName>File00000000015</FileName><FileName>File00000000016</FileName><FileName>File00000000017</FileName><FileName>File00000000018</FileName><FileName>File00000000019</FileName><FileName>File00000000020</FileName><FileName>File00000000021</FileName><FileName>File00000000022</FileName><FileName>File00000000023</FileName><FileName>File00000000024</FileName><FileName>File00000000025</FileName><FileName>File00000000026</FileName><FileName>File00000000027</FileName><FileName>File00000000028</FileName><FileName>File00000000029</FileName><FileName>File00000000030</FileName>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="ReturnExpr016">
      <description> Return value of positional variable </description>
      <created by="Mike Rorke" on="2005-06-24"/>
      <environment ref="fsx"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[for $file at $offset in (//Folder)[1]/File return <File>{ $file/@name }{ attribute offset{ $offset }}</File>]]></test>
      <result>
         <assert-xml><![CDATA[<File name="File00000000000" offset="1" /><File name="File00000000001" offset="2" /><File name="File00000000002" offset="3" /><File name="File00000000003" offset="4" /><File name="File00000000004" offset="5" /><File name="File00000000005" offset="6" /><File name="File00000000006" offset="7" /><File name="File00000000007" offset="8" /><File name="File00000000008" offset="9" /><File name="File00000000009" offset="10" /><File name="File00000000010" offset="11" /><File name="File00000000011" offset="12" /><File name="File00000000012" offset="13" /><File name="File00000000013" offset="14" /><File name="File00000000014" offset="15" /><File name="File00000000015" offset="16" /><File name="File00000000016" offset="17" /><File name="File00000000017" offset="18" /><File name="File00000000018" offset="19" /><File name="File00000000019" offset="20" /><File name="File00000000020" offset="21" /><File name="File00000000021" offset="22" /><File name="File00000000022" offset="23" /><File name="File00000000023" offset="24" /><File name="File00000000024" offset="25" /><File name="File00000000025" offset="26" /><File name="File00000000026" offset="27" /><File name="File00000000027" offset="28" /><File name="File00000000028" offset="29" /><File name="File00000000029" offset="30" /><File name="File00000000030" offset="31" />]]></assert-xml>
      </result>
   </test-case>

   <test-case name="ReturnExpr017">
      <description> Apply arithmetic operator inside 'return' statement </description>
      <created by="Mike Rorke" on="2005-06-24"/>
      <environment ref="fsx"/>
      <test>for $file in (//Folder)[1]/File return ($file/Stream/StreamSize)[1] + 1</test>
      <result>
         <assert-string-value>1002.33 1003.33 1004.33 1005.33 1006.33 1007.33 1008.33 1009.33 1010.33 1011.33 1012.33 1013.33 1014.33 1015.33 1016.33 1017.33 1018.33 1019.33 1020.33 1021.33 1022.33 1023.33 1024.33 1025.33 1026.33 1027.33 1028.33 1029.33 1030.33 1031.33 1032.33</assert-string-value>
      </result>
   </test-case>

   <test-case name="ReturnExpr018">
      <description> Apply comparison operator inside 'return' statement </description>
      <created by="Mike Rorke" on="2005-06-24"/>
      <environment ref="fsx"/>
      <test>for $file in (//Folder)[1]/File return ($file/Stream/StreamSize)[1] &gt; 1004</test>
      <result>
         <assert-string-value>false false false true true true true true true true true true true true true true true true true true true true true true true true true true true true true</assert-string-value>
      </result>
   </test-case>

   <test-case name="ReturnExpr019">
      <description> Multiple 'return' statements </description>
      <created by="Mike Rorke" on="2005-06-24"/>
      <environment ref="fsx"/>
      <test>for $file in (//Folder)[1]/File return return $file/FileName</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="ReturnExpr020">
      <description> 'return' expression containing a typed value constructor function </description>
      <created by="Mike Rorke" on="2005-06-24"/>
      <environment ref="fsx"/>
      <test>for $file in (//Folder)[1]/File return xs:string( data( $file/FileName[1] ))</test>
      <result>
         <assert-string-value>File00000000000 File00000000001 File00000000002 File00000000003 File00000000004 File00000000005 File00000000006 File00000000007 File00000000008 File00000000009 File00000000010 File00000000011 File00000000012 File00000000013 File00000000014 File00000000015 File00000000016 File00000000017 File00000000018 File00000000019 File00000000020 File00000000021 File00000000022 File00000000023 File00000000024 File00000000025 File00000000026 File00000000027 File00000000028 File00000000029 File00000000030</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-ReturnExpr-1">
      <description> Only a return clause is syntactically invalid. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>return 1</test>
      <result>
         <any-of>
            <error code="XPST0003"/>
            <error code="XPDY0002"/>
         </any-of>
      </result>
   </test-case>
</test-set>