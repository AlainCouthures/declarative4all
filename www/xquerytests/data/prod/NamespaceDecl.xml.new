<?xml version="1.0" encoding="UTF-8"?>
<test-set name="prod-NamespaceDecl" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">
  <description>Tests for the NamespaceDecl production</description>
  <link document="http://www.w3.org/TR/xquery-30/" idref="doc-xquery30-NamespaceDecl" type="spec"/>
  <link document="XQuery" idref="id-namespace-declaration" section-number="4.12" type="spec"/>
  <dependency type="spec" value="XQ10+"/>
  <test-case name="namespaceDecl-1">
    <description> Evaluation of multiple namespace declarations with same prefix. Should raise static error. </description>
    <created by="Carmelo Montanez" on="2005-11-18"/>
    <test>declare namespace foo = &quot;http://www.example.com/examples&quot;; declare namespace foo = &quot;http://www.example.com/examples&quot;; a</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQST0033&quot;))</result-string>
    <result>
      <error code="XQST0033"/>
    </result>
  </test-case>
  <test-case name="namespaceDecl-2">
    <description> Evaluation of usage of prefix with no declaration. Should raise static error. </description>
    <created by="Carmelo Montanez" on="2005-11-18"/>
    <test>element foo:anElement {&quot;Element content&quot;}</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0081&quot;))</result-string>
    <result>
      <error code="XPST0081"/>
    </result>
  </test-case>
  <test-case name="namespaceDecl-3">
    <description> Evaluation of usage of predefined namespace xml = &quot;http://www.w3.org/XML/1998/namespace&quot; </description>
    <created by="Carmelo Montanez" on="2005-11-18"/>
    <test>declare namespace xml = &quot;http://www.w3.org/XML/1998/namespace&quot;; &quot;a&quot;</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQST0070&quot;))</result-string>
    <result>
      <error code="XQST0070"/>
    </result>
  </test-case>
  <test-case name="namespaceDecl-4">
    <description> Evaluation of redefinition of namespace associated with xml. </description>
    <created by="Carmelo Montanez" on="2005-11-18"/>
    <test>declare namespace foo = &quot;http://www.w3.org/XML/1998/namespace&quot;; &quot;a&quot;</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQST0070&quot;))</result-string>
    <result>
      <error code="XQST0070"/>
    </result>
  </test-case>
  <test-case name="namespaceDecl-5">
    <description> Evaluation of redefinition xmls prefix. </description>
    <created by="Carmelo Montanez" on="2005-11-18"/>
    <test>declare namespace xmlns = &quot;http://example.com/examples&quot;; &quot;a&quot;</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQST0070&quot;))</result-string>
    <result>
      <error code="XQST0070"/>
    </result>
  </test-case>
  <test-case name="namespaceDecl-6">
    <description> Evaluation of typical usage of namespace declaration as per example 1 in section 4.7 of the query specs. </description>
    <created by="Carmelo Montanez" on="2005-11-18"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace foo = "http://example.org"; <foo:bar> Lentils </foo:bar>]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<foo:bar xmlns:foo="http://example.org"> Lentils </foo:bar>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="namespaceDecl-7">
    <description> Evaluation usage of namespace declaration, different prefix bounded to same namespace uri and use of same local name (example 2 of this section from the query specs. </description>
    <created by="Carmelo Montanez" on="2005-11-18"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace xx = "http://example.org"; let $i := <foo:bar xmlns:foo = "http://example.org"> <foo:bing> Lentils </foo:bing> </foo:bar> return $i/xx:bing]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<foo:bing xmlns:foo="http://example.org"> Lentils </foo:bing>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="namespaceDecl-8">
    <description> Evaluates that at a namespace delcaration the prefix name is an NCName. from the query specs. </description>
    <created by="Carmelo Montanez" on="2005-11-18"/>
    <test>declare namespace foo:bar = &quot;http://www.example.com/examples&quot;; &quot;aa&quot;</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0003&quot;))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="namespaceDecl-9">
    <description> verify that the &quot;xs&quot; prefix can be redefined and used. </description>
    <created by="Carmelo Montanez" on="2005-11-18"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace xs = "http://www.example.com/examples"; let $var := <xs:someElement>some context</xs:someElement> return $var]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<xs:someElement xmlns:xs="http://www.example.com/examples">some context</xs:someElement>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="namespaceDecl-10">
    <description> verify that the &quot;xsi&quot; prefix can be redefined and used. </description>
    <created by="Carmelo Montanez" on="2005-11-18"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace xsi = "http://www.example.com/examples"; let $var := <xsi:someElement>some context</xsi:someElement> return $var]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<xsi:someElement xmlns:xsi="http://www.example.com/examples">some context</xsi:someElement>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="namespaceDecl-11">
    <description> verify that the &quot;fn&quot; prefix can be redefined and used. </description>
    <created by="Carmelo Montanez" on="2005-11-18"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace fn = "http://www.example.com/examples"; let $var := <fn:someElement>some context</fn:someElement> return $var]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<fn:someElement xmlns:fn="http://www.example.com/examples">some context</fn:someElement>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="namespaceDecl-12">
    <description> verify that the &quot;xdt&quot; prefix can be redefined and used. </description>
    <created by="Carmelo Montanez" on="2005-11-18"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace xdt = "http://www.example.com/examples"; let $var := <xdt:someElement>some context</xdt:someElement> return $var]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<xdt:someElement xmlns:xdt="http://www.example.com/examples">some context</xdt:someElement>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="namespaceDecl-13">
    <description> verify that the &quot;local&quot; prefix can be redefined and used. </description>
    <created by="Carmelo Montanez" on="2005-11-18"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace local = "http://www.example.com/examples"; let $var := <local:someElement>some context</local:someElement> return $var]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<local:someElement xmlns:local="http://www.example.com/examples">some context</local:someElement>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="namespaceDecl-14">
    <description> verify that upper case &quot;XML&quot; is different from lower case &quot;xml&quot;. </description>
    <created by="Carmelo Montanez" on="2005-11-18"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace XML = "http://www.example.com/examples"; let $var := <XML:someElement>some context</XML:someElement> return $var]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<XML:someElement xmlns:XML="http://www.example.com/examples">some context</XML:someElement>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="namespaceDecl-15">
    <description> verify that upper case &quot;XMLNS&quot; is different from lower case &quot;xmlns&quot;. </description>
    <created by="Carmelo Montanez" on="2005-11-18"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace XMLNS = "http://www.example.com/examples"; let $var := <XMLNS:someElement>some context</XMLNS:someElement> return $var]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<XMLNS:someElement xmlns:XMLNS="http://www.example.com/examples">some context</XMLNS:someElement>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="namespaceDecl-16">
    <description> verify that a local namespace declaration overrides a querywide declaration. </description>
    <created by="Carmelo Montanez" on="2005-11-18"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace px = "http://www.example.com/examples"; let $var := <px:someElement xmlns:px = "http://www.examples.com/localexamples">some context</px:someElement> return $var]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<px:someElement xmlns:px="http://www.examples.com/localexamples">some context</px:someElement>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="namespaceDecl-17">
    <description> Verify that &quot;abc&quot; is a valid namespace declaration Test was modified on 07/06/06 in order to avoid serialization of relative URI's as part of the result. </description>
    <created by="Carmelo Montanez" on="2005-11-18"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace px = "http://www.example.com/abc"; let $var := <px:someElement>some context</px:someElement> return namespace-uri-from-QName(node-name($var)) eq xs:anyURI("http://www.example.com/abc")]]>
    </test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="namespaceDecl-18">
    <description> Verify that &quot;ftp://ftp.is.co.za/rfc/somefile.txt&quot; is a vaild namespace declaration </description>
    <created by="Carmelo Montanez" on="2005-11-18"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace px = "ftp://ftp.is.co.za/rfc/somefile.txt"; let $var := <px:someElement>some context</px:someElement> return $var]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<px:someElement xmlns:px="ftp://ftp.is.co.za/rfc/somefile.txt">some context</px:someElement>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="namespaceDecl-19">
    <description> Verify that the same namespace URI can be bound to different prefixes. </description>
    <created by="Carmelo Montanez" on="2005-11-18"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace px1 = "http://www.example.com/examples"; declare namespace px2 = "http://www.example.com/examples"; let $var := <px1:someElement>some context</px1:someElement> return $var]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<px1:someElement xmlns:px1="http://www.example.com/examples">some context</px1:someElement>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="namespaceDecl-20">
    <description> Verify that namespace URI may contain a number. Test was modified on 07/06/06 in order to avoid serialization of relative URI's as part of the result. </description>
    <created by="Carmelo Montanez" on="2005-11-18"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace xx = "http://www.example.com/abc123"; let $var := <xx:someElement>some content</xx:someElement> return namespace-uri-from-QName(node-name($var)) eq xs:anyURI("http://www.example.com/abc123")]]>
    </test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="namespaceDecl-21">
    <description> Verify that namespace URI and prefix can contain the same value. Test was modified on 07/06/06 in order to avoid serialization of relative URI's as part of the result. </description>
    <created by="Carmelo Montanez" on="2005-11-18"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace abc = "http://www.example.com/abc"; let $var := <abc:someElement>some content</abc:someElement> return namespace-uri-from-QName(node-name($var)) eq xs:anyURI("http://www.example.com/abc")]]>
    </test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="namespaceDecl-22">
    <description> Verify that &quot;gopher://spinaltap.micro.umn.edu/00/Weather/California/somefile&quot; is a valid namespace URI during namespace declaration. </description>
    <created by="Carmelo Montanez" on="2005-11-18"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace abc = "gopher://spinaltap.micro.umn.edu/00/Weather/California/somefile"; <abc:someElement>some content</abc:someElement>]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<abc:someElement xmlns:abc="gopher://spinaltap.micro.umn.edu/00/Weather/California/somefile">some content</abc:someElement>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="namespaceDecl-23">
    <description> Verify that a namespace URI conatining &quot;abcamp;&quot; is a valid namespace URI during namespace declaration. Test was modified on 07/06/06 in order to avoid serialization of relative URI's as part of the result. </description>
    <created by="Carmelo Montanez" on="2005-11-18"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace abc = "http://www.example.com/abc&amp;"; let $var := <abc:someElement>some content</abc:someElement> return namespace-uri-from-QName(node-name($var)) eq xs:anyURI("http://www.example.com/abc&amp;")]]>
    </test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="namespaceDecl-24">
    <description> Verify that &quot;mailto:someuser@someserver.com&quot; is a valid namespace URI during namespace declaration. </description>
    <created by="Carmelo Montanez" on="2005-11-18"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace abc = "mailto:someuser@someserver.com"; <abc:someElement>some content</abc:someElement>]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<abc:someElement xmlns:abc="mailto:someuser@someserver.com">some content</abc:someElement>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="K-NamespaceProlog-1">
    <description> A 'declare namespace' expression containing many comments, using apostrophes for the URILiteral. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(::)declare(::)namespace(::)ncname(::)=(::)'http://example.com/';(::)1(::)eq(::)1(::)</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-NamespaceProlog-2">
    <description> A 'declare namespace' expression containing many comments, using quotes for the URILiteral. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(::)declare(::)namespace(::)ncname(::)=(::)&quot;http://example.com/&quot;(::);(::)1(::)eq(::)1(::)</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-NamespaceProlog-3">
    <description> ':=' can't be used in 'declare namespace, '=' must be used. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>declare namespace NCName := &quot;http://example.com/&quot;;</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0003&quot;))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="K2-NamespaceProlog-1">
    <description> A namespace declaration cannot occur twice for the same prefix, no matter what. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>declare namespace myPrefix = &quot;http://example.com/&quot;; declare namespace myPrefix = &quot;&quot;; 1</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQST0033&quot;))</result-string>
    <result>
      <error code="XQST0033"/>
    </result>
  </test-case>
  <test-case name="K2-NamespaceProlog-2">
    <description> A namespace declaration cannot occur twice for the same prefix, no matter what. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>declare namespace myPrefix = &quot;&quot;; declare namespace myPrefix = &quot;http://example.com/&quot;; 1</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQST0033&quot;))</result-string>
    <result>
      <error code="XQST0033"/>
    </result>
  </test-case>
  <test-case name="K2-NamespaceProlog-3">
    <description> A namespace declaration cannot occur twice for the same prefix, no matter what. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>declare namespace myPrefix = &quot;http://example.com/&quot;; declare namespace myPrefix = &quot;http://example.com/TheSecondOne&quot;; declare namespace myPrefix = &quot;&quot;; 1</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQST0033&quot;))</result-string>
    <result>
      <error code="XQST0033"/>
    </result>
  </test-case>
  <test-case name="K2-NamespaceProlog-4">
    <description> When a pre-declared namespace prefix has been undeclared, it is not available. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>declare namespace xs = &quot;&quot;; xs:integer(1)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0081&quot;))</result-string>
    <result>
      <error code="XPST0081"/>
    </result>
  </test-case>
  <test-case name="K2-NamespaceProlog-5">
    <description> It is ok to undeclare a non-bound namespace. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>declare namespace thisPrefixIsNotBoundExampleCom = &quot;&quot;; true()</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-NamespaceProlog-6">
    <description> It is not possible to undeclare the 'xml' prefix. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>declare namespace xml = &quot;&quot;; 1</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQST0070&quot;))</result-string>
    <result>
      <error code="XQST0070"/>
    </result>
  </test-case>
  <test-case name="K2-NamespaceProlog-7">
    <description> It is not possible to undeclare the 'xmlns' prefix. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>declare namespace xmlns = &quot;&quot;; 1</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQST0070&quot;))</result-string>
    <result>
      <error code="XQST0070"/>
    </result>
  </test-case>
  <test-case name="K2-NamespaceProlog-8">
    <description> Undeclare the 'xdt' prefix. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>declare namespace xdt = &quot;&quot;; xdt:untypedAtomic(&quot;string&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0081&quot;))</result-string>
    <result>
      <error code="XPST0081"/>
    </result>
  </test-case>
  <test-case name="K2-NamespaceProlog-9">
    <description> Undeclare the 'xs' prefix. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>declare namespace xs = &quot;&quot;; xs:untypedAtomic(&quot;string&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0081&quot;))</result-string>
    <result>
      <error code="XPST0081"/>
    </result>
  </test-case>
  <test-case name="K2-NamespaceProlog-10">
    <description> Undeclare the 'local' prefix. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>declare namespace local = &quot;&quot;; local:untypedAtomic(&quot;string&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0081&quot;))</result-string>
    <result>
      <error code="XPST0081"/>
    </result>
  </test-case>
  <test-case name="K2-NamespaceProlog-11">
    <description> Undeclare the 'fn' prefix. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>declare namespace fn = &quot;&quot;; fn:untypedAtomic(&quot;string&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0081&quot;))</result-string>
    <result>
      <error code="XPST0081"/>
    </result>
  </test-case>
  <test-case name="K2-NamespaceProlog-12">
    <description> Undeclare the 'xsi' prefix. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>declare namespace xsi = &quot;&quot;; xsi:untypedAtomic(&quot;string&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0081&quot;))</result-string>
    <result>
      <error code="XPST0081"/>
    </result>
  </test-case>
  <test-case name="K2-NamespaceProlog-13">
    <description> Use the focus from within a attribute value template. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[<e/>/<e a="{p:asd}" xmlns:p="http://example.com/asd"/>]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<e xmlns:p="http://example.com/asd" a=""/>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="K2-NamespaceProlog-14">
    <description> Namespace declaration must appear before a variable declaration. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>declare variable $inputDoc := 2; declare namespace x = &quot;http://example.com/&quot;; 1</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0003&quot;))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="K2-NamespaceProlog-15">
    <description> Bind the prefix 'xml' to an invalid namespace. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>declare namespace xml = &quot;http://example.com/&quot;; 1</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQST0070&quot;))</result-string>
    <result>
      <error code="XQST0070"/>
    </result>
  </test-case>
  <test-case name="K2-NamespaceProlog-16">
    <description> XQuery has no such expression. </description>
    <created by="Frans Englich" on="2008-06-12"/>
    <test>declare namespace prefix = &quot;http://example.com/&quot; { 1 }</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0003&quot;))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="cbcl-declare-namespace-001">
    <description> Test that the empty namespace can be bound to a prefix. </description>
    <created by="Oliver Hallam" on="2008-11-03"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[
      	declare default element namespace "http://www.example.org"; 
      	declare namespace test=""; 
      	<test:a />
      ]]>
    </test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0081&quot;))</result-string>
    <result>
      <error code="XPST0081"/>
    </result>
  </test-case>
</test-set>