<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="prod-OrderByClause">
   <description>Tests for the OrderByClause production</description>
   <link type="spec" document="http://www.w3.org/TR/xquery-30/"
         idref="doc-xquery30-OrderByClause"/>
   <link type="spec" document="XQuery" section-number="3.8.3" idref="id-orderby-return"/>
   
   <dependency type="spec" value="XQ10+"/>
   
   <environment name="orderdata">
      <source role="." file="OrderByClause/orderData.xml" validation="strict">
         <description>A Schema validated xml file, that contains values for some of the order by tests generated by NIST.</description>
         <created by="Carmelo Montanez" on="2005-06-01"/>
      </source>
      <schema uri="http://www.w3.org/XQueryTestOrderBy" file="OrderByClause/orderData.xsd">
         <description>A Schema for orderData.xml</description>
         <created by="Carmelo Montanez" on="2005-06-01"/>
      </schema>
   </environment> 

   <environment name="orderdata2">
      <!-- orderdata, without schema validation, create by Andrew Eisenberg -->
      <source role="." file="OrderByClause/orderData.xml">
         <description>An uvalidated xml file, that contains values for some of the order by tests generated by NIST.</description>
         <created by="Carmelo Montanez" on="2005-06-01"/>
      </source>
   </environment> 

   <test-case name="orderBy1">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "$x ", 
        where $x is a set of Strings and the ordering mode set to ascending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/Strings/orderData order by $x ascending return $x } </results>
      ]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy"><orderData>A String</orderData><orderData>B String</orderData><orderData>C String</orderData><orderData>D String</orderData><orderData>E String</orderData><orderData>F String</orderData><orderData>G String</orderData><orderData>H String</orderData><orderData>I String</orderData><orderData>J String</orderData><orderData>K String</orderData><orderData>L String</orderData><orderData>M String</orderData><orderData>N String</orderData><orderData>O String</orderData><orderData>P String</orderData><orderData>R String</orderData><orderData>S String</orderData><orderData>T String</orderData><orderData>U String</orderData><orderData>V String</orderData><orderData>W String</orderData><orderData>X String</orderData><orderData>Y String</orderData><orderData>Z String</orderData></results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy2">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "$x ", where $x is a set of Strings and the ordering mode set to descending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/Strings/orderData order by $x descending return $x } </results>
      ]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy"><orderData>Z String</orderData><orderData>Y String</orderData><orderData>X String</orderData><orderData>W String</orderData><orderData>V String</orderData><orderData>U String</orderData><orderData>T String</orderData><orderData>S String</orderData><orderData>R String</orderData><orderData>P String</orderData><orderData>O String</orderData><orderData>N String</orderData><orderData>M String</orderData><orderData>L String</orderData><orderData>K String</orderData><orderData>J String</orderData><orderData>I String</orderData><orderData>H String</orderData><orderData>G String</orderData><orderData>F String</orderData><orderData>E String</orderData><orderData>D String</orderData><orderData>C String</orderData><orderData>B String</orderData><orderData>A String</orderData></results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy3">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "concat($x,"()") ", where $x is a set of Strings and the ordering mode set to ascending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/Strings/orderData order by concat($x,"()") ascending return concat($x,"()") } </results>
      ]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">A String() B String() C String() D String() E String() F String() G String() H String() I String() J String() K String() L String() M String() N String() O String() P String() R String() S String() T String() U String() V String() W String() X String() Y String() Z String()</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy4">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression 
        set to "concat($x,"()") ", where $x is a set of Strings and the ordering mode set to descending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/Strings/orderData order by concat($x,"()") descending return concat($x,"()") } </results>
      ]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">Z String() Y String() X String() W String() V String() U String() T String() S String() R String() P String() O String() N String() M String() L String() K String() J String() I String() H String() G String() F String() E String() D String() C String() B String() A String()</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy5">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression 
        set to "concat($x,"another String After") ", where $x is a set of Strings and the ordering mode set to ascending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { 
            for $x in /DataValues/Strings/orderData 
            order by concat($x,"another String After") ascending 
            return concat($x,"another String After") 
        } </results>
      ]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">A Stringanother String After B Stringanother String After C Stringanother String After D Stringanother String After E Stringanother String After F Stringanother String After G Stringanother String After H Stringanother String After I Stringanother String After J Stringanother String After K Stringanother String After L Stringanother String After M Stringanother String After N Stringanother String After O Stringanother String After P Stringanother String After R Stringanother String After S Stringanother String After T Stringanother String After U Stringanother String After V Stringanother String After W Stringanother String After X Stringanother String After Y Stringanother String After Z Stringanother String After</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy6">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set 
        to "concat($x,"another String After") ", where $x is a set of Strings and the ordering mode set to descending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/Strings/orderData order by concat($x,"another String After") descending 
            return concat($x,"another String After") } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">Z Stringanother String After Y Stringanother String After X Stringanother String After W Stringanother String After V Stringanother String After U Stringanother String After T Stringanother String After S Stringanother String After R Stringanother String After P Stringanother String After O Stringanother String After N Stringanother String After M Stringanother String After L Stringanother String After K Stringanother String After J Stringanother String After I Stringanother String After H Stringanother String After G Stringanother String After F Stringanother String After E Stringanother String After D Stringanother String After C Stringanother String After B Stringanother String After A Stringanother String After</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy7">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression 
        set to "concat($x,"another String Before") ", where $x is a set of Strings and the ordering mode set to ascending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/Strings/orderData order by concat($x,"another String Before") ascending 
            return concat($x,"another String Before") } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">A Stringanother String Before B Stringanother String Before C Stringanother String Before D Stringanother String Before E Stringanother String Before F Stringanother String Before G Stringanother String Before H Stringanother String Before I Stringanother String Before J Stringanother String Before K Stringanother String Before L Stringanother String Before M Stringanother String Before N Stringanother String Before O Stringanother String Before P Stringanother String Before R Stringanother String Before S Stringanother String Before T Stringanother String Before U Stringanother String Before V Stringanother String Before W Stringanother String Before X Stringanother String Before Y Stringanother String Before Z Stringanother String Before</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy8">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "concat($x,"another String Before") ", where $x is a set of Strings and the ordering mode set to descending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/Strings/orderData order by concat($x,"another String Before") descending 
            return concat($x,"another String Before") } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">Z Stringanother String Before Y Stringanother String Before X Stringanother String Before W Stringanother String Before V Stringanother String Before U Stringanother String Before T Stringanother String Before S Stringanother String Before R Stringanother String Before P Stringanother String Before O Stringanother String Before N Stringanother String Before M Stringanother String Before L Stringanother String Before K Stringanother String Before J Stringanother String Before I Stringanother String Before H Stringanother String Before G Stringanother String Before F Stringanother String Before E Stringanother String Before D Stringanother String Before C Stringanother String Before B Stringanother String Before A Stringanother String Before</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy9">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to
         "concat($x,"") ", where $x is a set of Strings and the ordering mode set to descending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/Strings/orderData order by concat($x,"") descending return concat($x,"") } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">Z String Y String X String W String V String U String T String S String R String P String O String N String M String L String K String J String I String H String G String F String E String D String C String B String A String</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy10">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "concat($x,"") ", where $x is a set of Strings and the ordering mode set to ascending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/Strings/orderData order by concat($x,"") ascending 
            return concat($x,"") } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">A String B String C String D String E String F String G String H String I String J String K String L String M String N String O String P String R String S String T String U String V String W String X String Y String Z String</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy11">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "concat("",$x) ", where $x is a set of Strings and the ordering mode set to descending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/Strings/orderData order by concat("",$x) descending return concat("",$x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">Z String Y String X String W String V String U String T String S String R String P String O String N String M String L String K String J String I String H String G String F String E String D String C String B String A String</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy12">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "concat("",$x) ", where $x is a set of Strings and the ordering mode set to ascending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/Strings/orderData order by concat("",$x) ascending return concat("",$x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">A String B String C String D String E String F String G String H String I String J String K String L String M String N String O String P String R String S String T String U String V String W String X String Y String Z String</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy13">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "concat("",$x) ", where $x is a set of Strings and the ordering mode set to ascending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/Strings/orderData order by concat("",$x) ascending return concat("",$x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">A String B String C String D String E String F String G String H String I String J String K String L String M String N String O String P String R String S String T String U String V String W String X String Y String Z String</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy14">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to
         "$x is $x ", where $x is a set of Strings and the ordering mode set to ascending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/Strings/orderData order by $x is $x ascending return $x is $x } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">true true true true true true true true true true true true true true true true true true true true true true true true true</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy15">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "$x is $x ", where $x is a set of Strings and the ordering mode set to descending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/Strings/orderData order by $x is $x descending return $x is $x } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">true true true true true true true true true true true true true true true true true true true true true true true true true</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy16">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "concat($x,$x) ", where $x is a set of Strings and the ordering mode set to ascending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/Strings/orderData order by concat($x,$x) ascending return concat($x,$x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">A StringA String B StringB String C StringC String D StringD String E StringE String F StringF String G StringG String H StringH String I StringI String J StringJ String K StringK String L StringL String M StringM String N StringN String O StringO String P StringP String R StringR String S StringS String T StringT String U StringU String V StringV String W StringW String X StringX String Y StringY String Z StringZ String</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy17">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "string-length($x) ", where $x is a set of Strings and the ordering mode set to ascending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/Strings/orderData order by string-length($x) ascending return string-length($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy18">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "count($x) ", where $x is a set of Strings and the ordering mode set to ascending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/Strings/orderData order by count($x) ascending return count($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy19">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "string-length($x) ", where $x is a set of Strings and the ordering mode set to ascending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/Strings/orderData order by string-length($x) ascending return string-length($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy20">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "$x ", where $x is a set of negative numbers and the ordering mode set to ascending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <modified by="O'Neil Delpratt" on="2013-05-07" change="Added alternative result. See bug issue #21619" />
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/NegativeNumbers/orderData order by $x ascending return $x } </results>]]></test>
      <result>
         <any-of>
            <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy"><orderData>-100000000000000000</orderData><orderData>-10000000000000000</orderData><orderData>-1000000000000000</orderData><orderData>-100000000000000</orderData><orderData>-10000000000000</orderData><orderData>-1000000000000</orderData><orderData>-100000000000</orderData><orderData>-10000000000</orderData><orderData>-1000000000</orderData><orderData>-100000000</orderData><orderData>-10000000</orderData><orderData>-1000000</orderData><orderData>-100000</orderData><orderData>-10000</orderData><orderData>-1000</orderData><orderData>-100</orderData><orderData>-10</orderData><orderData>-1</orderData><orderData>-0</orderData></results>]]></assert-xml>
            <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy"><orderData>-0</orderData><orderData>-1</orderData><orderData>-10</orderData><orderData>-100</orderData><orderData>-1000</orderData><orderData>-10000</orderData><orderData>-100000</orderData><orderData>-1000000</orderData><orderData>-10000000</orderData><orderData>-100000000</orderData><orderData>-1000000000</orderData><orderData>-10000000000</orderData><orderData>-100000000000</orderData><orderData>-1000000000000</orderData><orderData>-10000000000000</orderData><orderData>-100000000000000</orderData><orderData>-1000000000000000</orderData><orderData>-10000000000000000</orderData><orderData>-100000000000000000</orderData></results>]]></assert-xml>
            <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy"><orderData>-100000000000000000</orderData><orderData>-10000000000000000</orderData><orderData>-1000000000000000</orderData><orderData>-100000000000000</orderData><orderData>-10000000000000</orderData><orderData>-1000000000000</orderData><orderData>-100000000000</orderData><orderData>-10000000000</orderData><orderData>-1000000000</orderData><orderData>-100000000</orderData><orderData>-10000000</orderData><orderData>-1000000</orderData><orderData>-100000</orderData><orderData>-10000</orderData><orderData>-1000</orderData><orderData>-100</orderData><orderData>-10</orderData><orderData>-1</orderData><orderData>0</orderData></results>]]></assert-xml>
            <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy"><orderData>0</orderData><orderData>-1</orderData><orderData>-10</orderData><orderData>-100</orderData><orderData>-1000</orderData><orderData>-10000</orderData><orderData>-100000</orderData><orderData>-1000000</orderData><orderData>-10000000</orderData><orderData>-100000000</orderData><orderData>-1000000000</orderData><orderData>-10000000000</orderData><orderData>-100000000000</orderData><orderData>-1000000000000</orderData><orderData>-10000000000000</orderData><orderData>-100000000000000</orderData><orderData>-1000000000000000</orderData><orderData>-10000000000000000</orderData><orderData>-100000000000000000</orderData></results>]]></assert-xml>
         </any-of>
      </result>
   </test-case>

   <test-case name="orderBy21">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "$x ", where $x is a set of negative numbers and the ordering mode set to descending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <modified by="O'Neil Delpratt" on="2013-05-07" change="Added alternative result. See bug issue #21619" />
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/NegativeNumbers/orderData order by $x descending return $x } </results>]]></test>
      <result>
         <any-of>
            <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy"><orderData>-0</orderData><orderData>-1</orderData><orderData>-10</orderData><orderData>-100</orderData><orderData>-1000</orderData><orderData>-10000</orderData><orderData>-100000</orderData><orderData>-1000000</orderData><orderData>-10000000</orderData><orderData>-100000000</orderData><orderData>-1000000000</orderData><orderData>-10000000000</orderData><orderData>-100000000000</orderData><orderData>-1000000000000</orderData><orderData>-10000000000000</orderData><orderData>-100000000000000</orderData><orderData>-1000000000000000</orderData><orderData>-10000000000000000</orderData><orderData>-100000000000000000</orderData></results>]]></assert-xml>
            <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy"><orderData>-100000000000000000</orderData><orderData>-10000000000000000</orderData><orderData>-1000000000000000</orderData><orderData>-100000000000000</orderData><orderData>-10000000000000</orderData><orderData>-1000000000000</orderData><orderData>-100000000000</orderData><orderData>-10000000000</orderData><orderData>-1000000000</orderData><orderData>-100000000</orderData><orderData>-10000000</orderData><orderData>-1000000</orderData><orderData>-100000</orderData><orderData>-10000</orderData><orderData>-1000</orderData><orderData>-100</orderData><orderData>-10</orderData><orderData>-1</orderData><orderData>-0</orderData></results>]]></assert-xml>
            <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy"><orderData>0</orderData><orderData>-1</orderData><orderData>-10</orderData><orderData>-100</orderData><orderData>-1000</orderData><orderData>-10000</orderData><orderData>-100000</orderData><orderData>-1000000</orderData><orderData>-10000000</orderData><orderData>-100000000</orderData><orderData>-1000000000</orderData><orderData>-10000000000</orderData><orderData>-100000000000</orderData><orderData>-1000000000000</orderData><orderData>-10000000000000</orderData><orderData>-100000000000000</orderData><orderData>-1000000000000000</orderData><orderData>-10000000000000000</orderData><orderData>-100000000000000000</orderData></results>]]></assert-xml>
            <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy"><orderData>-100000000000000000</orderData><orderData>-10000000000000000</orderData><orderData>-1000000000000000</orderData><orderData>-100000000000000</orderData><orderData>-10000000000000</orderData><orderData>-1000000000000</orderData><orderData>-100000000000</orderData><orderData>-10000000000</orderData><orderData>-1000000000</orderData><orderData>-100000000</orderData><orderData>-10000000</orderData><orderData>-1000000</orderData><orderData>-100000</orderData><orderData>-10000</orderData><orderData>-1000</orderData><orderData>-100</orderData><orderData>-10</orderData><orderData>-1</orderData><orderData>0</orderData></results>]]></assert-xml>
         </any-of>
      </result>
   </test-case>

   <test-case name="orderBy22">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "($x + $x) ", where $x is a set of negative numbers and the ordering mode set to descending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/NegativeNumbers/orderData order by ($x + $x) descending return $x + $x } </results>]]></test>
      <result>
         <any-of>
            <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">0 -2 -20 -200 -2000 -20000 -200000 -2000000 -20000000 -200000000 -2000000000 -20000000000 -200000000000 -2000000000000 -20000000000000 -200000000000000 -2000000000000000 -20000000000000000 -200000000000000000</results>]]></assert-xml>
            <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">-0 -2 -20 -200 -2000 -20000 -200000 -2.0E6 -2.0E7 -2.0E8 -2.0E9 -2.0E10 -2.0E11 -2.0E12 -2.0E13 -2.0E14 -2.0E15 -2.0E16 -2.0E17</results>]]></assert-xml>
            <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">0 -2 -20 -200 -2000 -20000 -200000 -2.0E6 -2.0E7 -2.0E8 -2.0E9 -2.0E10 -2.0E11 -2.0E12 -2.0E13 -2.0E14 -2.0E15 -2.0E16 -2.0E17</results>]]></assert-xml>
         </any-of>
      </result>
   </test-case>

   <test-case name="orderBy23">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "$x is $x ", where $x is a set of negative numbers and the ordering mode set to ascending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/NegativeNumbers/orderData order by $x is $x ascending return $x is $x } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">true true true true true true true true true true true true true true true true true true true</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy24">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "$x is $x ", where $x is a set of negative numbers and the ordering mode set to descending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/NegativeNumbers/orderData order by $x is $x descending return $x is $x } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">true true true true true true true true true true true true true true true true true true true</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy25">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "xs:float($x) ", where $x is a set of negative numbers and the ordering mode set to descending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/NegativeNumbers/orderData order by xs:float($x) descending return xs:float($x) } </results>]]></test>
      <result>
         <any-of>
            <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">0 -1 -10 -100 -1000 -10000 -100000 -1.0E6 -1.0E7 -1.0E8 -1.0E9 -1.0E10 -1.0E11 -1.0E12 -1.0E13 -1.0E14 -1.0E15 -1.0E16 -1.0E17</results>]]></assert-xml>
            <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">-0 -1 -10 -100 -1000 -10000 -100000 -1.0E6 -1.0E7 -1.0E8 -1.0E9 -1.0E10 -1.0E11 -1.0E12 -1.0E13 -1.0E14 -1.0E15 -1.0E16 -1.0E17</results>]]></assert-xml>
         </any-of>
      </result>
   </test-case>

   <test-case name="orderBy26">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to
         "xs:decimal($x) ", where $x is a set of negative numbers and the ordering mode set to descending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <modified by="O'Neil Delpratt" on="2013-05-01" change="Added alternative result. See bug issue #21619" />
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/NegativeNumbers/orderData order by xs:decimal($x) descending return xs:decimal($x) } </results>]]></test>
      <result>
          <any-of>
            <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">0 -1 -10 -100 -1000 -10000 -100000 -1000000 -10000000 -100000000 -1000000000 -10000000000 -100000000000 -1000000000000 -10000000000000 -100000000000000 -1000000000000000 -10000000000000000 -100000000000000000</results>]]></assert-xml>
            <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">-0 -1 -10 -100 -1000 -10000 -100000 -1000000 -10000000 -100000000 -1000000000 -10000000000 -100000000000 -1000000000000 -10000000000000 -100000000000000 -1000000000000000 -10000000000000000 -100000000000000000</results>]]></assert-xml>
          </any-of>
      </result>
   </test-case>

   <test-case name="orderBy27">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "xs:double($x) ", where $x is a set of negative numbers and the ordering mode set to descending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/NegativeNumbers/orderData order by xs:double($x) descending return xs:double($x) } </results>]]></test>
      <result>
         <any-of>
            <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">0 -1 -10 -100 -1000 -10000 -100000 -1.0E6 -1.0E7 -1.0E8 -1.0E9 -1.0E10 -1.0E11 -1.0E12 -1.0E13 -1.0E14 -1.0E15 -1.0E16 -1.0E17</results>]]></assert-xml>
            <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">-0 -1 -10 -100 -1000 -10000 -100000 -1.0E6 -1.0E7 -1.0E8 -1.0E9 -1.0E10 -1.0E11 -1.0E12 -1.0E13 -1.0E14 -1.0E15 -1.0E16 -1.0E17</results>]]></assert-xml>
         </any-of>
      </result>
   </test-case>

   <test-case name="orderBy28">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to
        "xs:integer($x) ", where $x is a set of negative numbers and the ordering mode set to descending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/NegativeNumbers/orderData order by xs:integer($x) descending return xs:integer($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">0 -1 -10 -100 -1000 -10000 -100000 -1000000 -10000000 -100000000 -1000000000 -10000000000 -100000000000 -1000000000000 -10000000000000 -100000000000000 -1000000000000000 -10000000000000000 -100000000000000000</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy29">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "($x * -1) ", where $x is a set of negative numbers and the ordering mode set to descending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <modified by="O'Neil Delpratt" on="2013-04-01" change="Added schemaImport dependency" />
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <dependency type="feature" value="schemaImport"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { 
            for $x in /DataValues/NegativeNumbers/orderData 
            order by ($x * -1) descending 
            return ($x * -1e0) (:force to xs:double:) 
        } </results>
      ]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">1.0E17 1.0E16 1.0E15 1.0E14 1.0E13 1.0E12 1.0E11 1.0E10 1.0E9 1.0E8 1.0E7 1.0E6 100000 10000 1000 100 10 1 -0</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy29a">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "($x * -1) ", where $x is a set of negative numbers and the ordering mode set to descending,
        orderBy29 using an unvalidated source document</description>
      <created by="Andrew Eisenberg" on="2012-01-24"/>
      <modified by="O'Neil Delpratt" on="2013-04-01" change="Added schemaImport dependency" />
      <environment ref="orderdata2"/>
      <dependency type="spec" value="XQ10+"/>
      <dependency type="feature" value="schemaImport"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { 
            for $x in /DataValues/NegativeNumbers/orderData 
            order by ($x * -1) descending 
            return ($x * -1e0) (:force to xs:double:) 
        } </results>
      ]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">1.0E17 1.0E16 1.0E15 1.0E14 1.0E13 1.0E12 1.0E11 1.0E10 1.0E9 1.0E8 1.0E7 1.0E6 100000 10000 1000 100 10 1 0</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy30">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "$x ", where $x is a set of positive numbers and the ordering mode set to ascending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/PositiveNumbers/orderData order by $x ascending return $x } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy"><orderData>0</orderData><orderData>1</orderData><orderData>10</orderData><orderData>100</orderData><orderData>1000</orderData><orderData>10000</orderData><orderData>100000</orderData><orderData>1000000</orderData><orderData>10000000</orderData><orderData>100000000</orderData><orderData>1000000000</orderData><orderData>10000000000</orderData><orderData>100000000000</orderData><orderData>1000000000000</orderData><orderData>10000000000000</orderData><orderData>100000000000000</orderData><orderData>1000000000000000</orderData><orderData>10000000000000000</orderData><orderData>100000000000000000</orderData></results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy31">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "$x ", where $x is a set of positive numbers and the ordering mode set to descending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/PositiveNumbers/orderData order by $x descending return $x } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy"><orderData>100000000000000000</orderData><orderData>10000000000000000</orderData><orderData>1000000000000000</orderData><orderData>100000000000000</orderData><orderData>10000000000000</orderData><orderData>1000000000000</orderData><orderData>100000000000</orderData><orderData>10000000000</orderData><orderData>1000000000</orderData><orderData>100000000</orderData><orderData>10000000</orderData><orderData>1000000</orderData><orderData>100000</orderData><orderData>10000</orderData><orderData>1000</orderData><orderData>100</orderData><orderData>10</orderData><orderData>1</orderData><orderData>0</orderData></results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy32">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to
         "($x + $x) ", where $x is a set of positive numbers and the ordering mode set to descending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/PositiveNumbers/orderData order by ($x + $x) descending return $x + $x } </results>]]></test>
      <result>
         <any-of>
            <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">200000000000000000 20000000000000000 2000000000000000 200000000000000 20000000000000 2000000000000 200000000000 20000000000 2000000000 200000000 20000000 2000000 200000 20000 2000 200 20 2 0</results>]]></assert-xml>
            <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">2.0E17 2.0E16 2.0E15 2.0E14 2.0E13 2.0E12 2.0E11 2.0E10 2.0E9 2.0E8 2.0E7 2.0E6 200000 20000 2000 200 20 2 0</results>]]></assert-xml>
         </any-of>
      </result>
   </test-case>

   <test-case name="orderBy33">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "$x is $x ", where $x is a set of positive numbers and the ordering mode set to ascending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/PositiveNumbers/orderData order by $x is $x ascending return $x is $x } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">true true true true true true true true true true true true true true true true true true true</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy34">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "$x is $x ", where $x is a set of positive numbers and the ordering mode set to descending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/PositiveNumbers/orderData order by $x is $x descending return $x is $x } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">true true true true true true true true true true true true true true true true true true true</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy35">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "xs:float($x) ", where $x is a set of positive numbers and the ordering mode set to descending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/PositiveNumbers/orderData order by xs:float($x) descending return xs:float($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">1.0E17 1.0E16 1.0E15 1.0E14 1.0E13 1.0E12 1.0E11 1.0E10 1.0E9 1.0E8 1.0E7 1.0E6 100000 10000 1000 100 10 1 0</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy36">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "xs:decimal($x) ", where $x is a set of positive numbers and the ordering mode set to descending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/PositiveNumbers/orderData order by xs:decimal($x) descending return xs:decimal($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">100000000000000000 10000000000000000 1000000000000000 100000000000000 10000000000000 1000000000000 100000000000 10000000000 1000000000 100000000 10000000 1000000 100000 10000 1000 100 10 1 0</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy37">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "xs:double($x) ", where $x is a set of positive numbers and the ordering mode set to descending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/PositiveNumbers/orderData order by xs:double($x) descending return xs:double($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">1.0E17 1.0E16 1.0E15 1.0E14 1.0E13 1.0E12 1.0E11 1.0E10 1.0E9 1.0E8 1.0E7 1.0E6 100000 10000 1000 100 10 1 0</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy38">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "xs:integer($x) ", where $x is a set of positive numbers and the ordering mode set to descending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/PositiveNumbers/orderData order by xs:integer($x) descending return xs:integer($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">100000000000000000 10000000000000000 1000000000000000 100000000000000 10000000000000 1000000000000 100000000000 10000000000 1000000000 100000000 10000000 1000000 100000 10000 1000 100 10 1 0</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy39">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "string($x) ", where $x is a set of positive numbers and the ordering mode set to ascending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/PositiveNumbers/orderData order by string($x) ascending return string($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">0 1 10 100 1000 10000 100000 1000000 10000000 100000000 1000000000 10000000000 100000000000 1000000000000 10000000000000 100000000000000 1000000000000000 10000000000000000 100000000000000000</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy40">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "$x ", where $x is a set of small positive numbers and the ordering mode set to ascending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/SmallPositiveNumbers/orderData order by $x ascending return $x } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy"><orderData>0.0</orderData><orderData>0.000000000000000001</orderData><orderData>0.00000000000000001</orderData><orderData>0.0000000000000001</orderData><orderData>0.000000000000001</orderData><orderData>0.00000000000001</orderData><orderData>0.0000000000001</orderData><orderData>0.000000000001</orderData><orderData>0.00000000001</orderData><orderData>0.0000000001</orderData><orderData>0.000000001</orderData><orderData>0.00000001</orderData><orderData>0.0000001</orderData><orderData>0.000001</orderData><orderData>0.00001</orderData><orderData>0.0001</orderData><orderData>0.001</orderData><orderData>0.01</orderData><orderData>0.1</orderData></results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy41">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to
         "$x ", where $x is a set of small positive numbers and the ordering mode set to descending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/SmallPositiveNumbers/orderData order by $x descending return $x } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy"><orderData>0.1</orderData><orderData>0.01</orderData><orderData>0.001</orderData><orderData>0.0001</orderData><orderData>0.00001</orderData><orderData>0.000001</orderData><orderData>0.0000001</orderData><orderData>0.00000001</orderData><orderData>0.000000001</orderData><orderData>0.0000000001</orderData><orderData>0.00000000001</orderData><orderData>0.000000000001</orderData><orderData>0.0000000000001</orderData><orderData>0.00000000000001</orderData><orderData>0.000000000000001</orderData><orderData>0.0000000000000001</orderData><orderData>0.00000000000000001</orderData><orderData>0.000000000000000001</orderData><orderData>0.0</orderData></results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy42">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "($x + $x) ", where $x is a set of small positive numbers and the ordering mode set to descending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/SmallPositiveNumbers/orderData order by ($x + $x) descending return $x + $x } </results>]]></test>
      <result>
         <any-of>
            <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">0.2 0.02 0.002 0.0002 0.00002 0.000002 0.0000002 0.00000002 0.000000002 0.0000000002 0.00000000002 0.000000000002 0.0000000000002 0.00000000000002 0.000000000000002 0.0000000000000002 0.00000000000000002 0.000000000000000002 0</results>]]></assert-xml>
            <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">0.2 0.02 0.002 0.0002 0.00002 0.000002 2.0E-7 2.0E-8 2.0E-9 2.0E-10 2.0E-11 2.0E-12 2.0E-13 2.0E-14 2.0E-15 2.0E-16 2.0E-17 2.0E-18 0</results>]]></assert-xml>
         </any-of>
      </result>
   </test-case>

   <test-case name="orderBy43">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "$x is $x ", where $x is a set of small positive numbers and the ordering mode set to ascending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/SmallPositiveNumbers/orderData order by $x is $x ascending return $x is $x } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">true true true true true true true true true true true true true true true true true true true</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy44">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "$x is $x ", where $x is a set of small positive numbers and the ordering mode set to descending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/SmallPositiveNumbers/orderData order by $x is $x descending return $x is $x } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">true true true true true true true true true true true true true true true true true true true</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy45">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "xs:float($x) ", where $x is a set of small positive numbers and the ordering mode set to descending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/SmallPositiveNumbers/orderData order by xs:float($x) descending return xs:float($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">0.1 0.01 0.001 0.0001 0.00001 0.000001 1.0E-7 1.0E-8 1.0E-9 1.0E-10 1.0E-11 1.0E-12 1.0E-13 1.0E-14 1.0E-15 1.0E-16 1.0E-17 1.0E-18 0</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy46">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "xs:decimal($x) ", where $x is a set of small positive numbers and the ordering mode set to descending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/SmallPositiveNumbers/orderData order by xs:decimal($x) descending return xs:decimal($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">0.1 0.01 0.001 0.0001 0.00001 0.000001 0.0000001 0.00000001 0.000000001 0.0000000001 0.00000000001 0.000000000001 0.0000000000001 0.00000000000001 0.000000000000001 0.0000000000000001 0.00000000000000001 0.000000000000000001 0</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy47">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "xs:double($x) ", where $x is a set of small positive numbers and the ordering mode set to descending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/SmallPositiveNumbers/orderData order by xs:double($x) descending return xs:double($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">0.1 0.01 0.001 0.0001 0.00001 0.000001 1.0E-7 1.0E-8 1.0E-9 1.0E-10 1.0E-11 1.0E-12 1.0E-13 1.0E-14 1.0E-15 1.0E-16 1.0E-17 1.0E-18 0</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy49">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "string($x) ", where $x is a set of small positive numbers and the ordering mode set to ascending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/SmallPositiveNumbers/orderData order by string($x) ascending return string($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">0.0 0.000000000000000001 0.00000000000000001 0.0000000000000001 0.000000000000001 0.00000000000001 0.0000000000001 0.000000000001 0.00000000001 0.0000000001 0.000000001 0.00000001 0.0000001 0.000001 0.00001 0.0001 0.001 0.01 0.1</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy50">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "$x ", where $x is a set of small negative numbers and the ordering mode set to ascending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/SmallNegativeNumbers/orderData order by $x ascending return $x } </results>]]></test>
      <result>
         <any-of>
            <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy"><orderData>-0.1</orderData><orderData>-0.01</orderData><orderData>-0.001</orderData><orderData>-0.0001</orderData><orderData>-0.00001</orderData><orderData>-0.000001</orderData><orderData>-0.0000001</orderData><orderData>-0.00000001</orderData><orderData>-0.000000001</orderData><orderData>-0.0000000001</orderData><orderData>-0.00000000001</orderData><orderData>-0.000000000001</orderData><orderData>-0.0000000000001</orderData><orderData>-0.00000000000001</orderData><orderData>-0.000000000000001</orderData><orderData>-0.0000000000000001</orderData><orderData>-0.00000000000000001</orderData><orderData>-0.000000000000000001</orderData><orderData>-0.0</orderData></results>]]></assert-xml>
            <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy"><orderData>-0.0</orderData><orderData>-0.000000000000000001</orderData><orderData>-0.00000000000000001</orderData><orderData>-0.0000000000000001</orderData><orderData>-0.000000000000001</orderData><orderData>-0.00000000000001</orderData><orderData>-0.0000000000001</orderData><orderData>-0.000000000001</orderData><orderData>-0.00000000001</orderData><orderData>-0.0000000001</orderData><orderData>-0.000000001</orderData><orderData>-0.00000001</orderData><orderData>-0.0000001</orderData><orderData>-0.000001</orderData><orderData>-0.00001</orderData><orderData>-0.0001</orderData><orderData>-0.001</orderData><orderData>-0.01</orderData><orderData>-0.1</orderData></results>]]></assert-xml>
         </any-of>
      </result>
   </test-case>

   <test-case name="orderBy51">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "$x ", where $x is a set of small negative numbers and the ordering mode set to descending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/SmallNegativeNumbers/orderData order by $x descending return $x } </results>]]></test>
      <result>
         <any-of>
            <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy"><orderData>-0.0</orderData><orderData>-0.000000000000000001</orderData><orderData>-0.00000000000000001</orderData><orderData>-0.0000000000000001</orderData><orderData>-0.000000000000001</orderData><orderData>-0.00000000000001</orderData><orderData>-0.0000000000001</orderData><orderData>-0.000000000001</orderData><orderData>-0.00000000001</orderData><orderData>-0.0000000001</orderData><orderData>-0.000000001</orderData><orderData>-0.00000001</orderData><orderData>-0.0000001</orderData><orderData>-0.000001</orderData><orderData>-0.00001</orderData><orderData>-0.0001</orderData><orderData>-0.001</orderData><orderData>-0.01</orderData><orderData>-0.1</orderData></results>]]></assert-xml>
            <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy"><orderData>-0.1</orderData><orderData>-0.01</orderData><orderData>-0.001</orderData><orderData>-0.0001</orderData><orderData>-0.00001</orderData><orderData>-0.000001</orderData><orderData>-0.0000001</orderData><orderData>-0.00000001</orderData><orderData>-0.000000001</orderData><orderData>-0.0000000001</orderData><orderData>-0.00000000001</orderData><orderData>-0.000000000001</orderData><orderData>-0.0000000000001</orderData><orderData>-0.00000000000001</orderData><orderData>-0.000000000000001</orderData><orderData>-0.0000000000000001</orderData><orderData>-0.00000000000000001</orderData><orderData>-0.000000000000000001</orderData><orderData>-0.0</orderData></results>]]></assert-xml>
         </any-of>
      </result>
   </test-case>

   <test-case name="orderBy52">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "($x + $x) ", where $x is a set of small negative numbers and the ordering mode set to descending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <modified by="O'Neil Delpratt" on="2013-04-01" change="Added schemaImport dependency" />
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <dependency type="feature" value="schemaImport"/>
      <test><![CDATA[declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { 
            for $x in /DataValues/SmallNegativeNumbers/orderData 
            order by ($x + $x) descending 
            return xs:double($x + $x) 
        } </results>
      ]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">0 -2.0E-18 -2.0E-17 -2.0E-16 -2.0E-15 -2.0E-14 -2.0E-13 -2.0E-12 -2.0E-11 -2.0E-10 -2.0E-9 -2.0E-8 -2.0E-7 -0.000002 -0.00002 -0.0002 -0.002 -0.02 -0.2</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy52a">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "($x + $x) ", where $x is a set of small negative numbers and the ordering mode set to descending,
        orderBy52 using an unvalidated source document </description>
      <created by="Andrew Eisenberg" on="2012-01-24"/>
      <modified by="O'Neil Delpratt" on="2013-04-01" change="Added schemaImport dependency" />
      <environment ref="orderdata2"/>
      <dependency type="spec" value="XQ10+"/>
      <dependency type="feature" value="schemaImport"/>
      <test><![CDATA[declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { 
            for $x in /DataValues/SmallNegativeNumbers/orderData 
            order by ($x + $x) descending 
            return xs:double($x + $x) 
        } </results>
      ]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">-0 -2.0E-18 -2.0E-17 -2.0E-16 -2.0E-15 -2.0E-14 -2.0E-13 -2.0E-12 -2.0E-11 -2.0E-10 -2.0E-9 -2.0E-8 -2.0E-7 -0.000002 -0.00002 -0.0002 -0.002 -0.02 -0.2</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy53">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "$x is $x ", where $x is a set of small negative numbers and the ordering mode set to ascending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/SmallNegativeNumbers/orderData order by $x is $x ascending return $x is $x } </results>
      ]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">true true true true true true true true true true true true true true true true true true true</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy54">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "$x is $x ", where $x is a set of small negative numbers and the ordering mode set to descending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/SmallNegativeNumbers/orderData order by $x is $x descending return $x is $x } </results>
      ]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">true true true true true true true true true true true true true true true true true true true</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy55">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "xs:float($x) ", where $x is a set of small negative numbers and the ordering mode set to descending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/SmallNegativeNumbers/orderData order by xs:float($x) descending return xs:float($x) } </results>
      ]]></test>
      <result>
         <any-of>
            <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">0 -1.0E-18 -1.0E-17 -1.0E-16 -1.0E-15 -1.0E-14 -1.0E-13 -1.0E-12 -1.0E-11 -1.0E-10 -1.0E-9 -1.0E-8 -1.0E-7 -0.000001 -0.00001 -0.0001 -0.001 -0.01 -0.1</results>]]></assert-xml>
            <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">-0 -1.0E-18 -1.0E-17 -1.0E-16 -1.0E-15 -1.0E-14 -1.0E-13 -1.0E-12 -1.0E-11 -1.0E-10 -1.0E-9 -1.0E-8 -1.0E-7 -0.000001 -0.00001 -0.0001 -0.001 -0.01 -0.1</results>]]></assert-xml>
         </any-of>
      </result>
   </test-case>

   <test-case name="orderBy56">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "xs:decimal($x) ", where $x is a set of small negative numbers and the ordering mode set to descending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/SmallNegativeNumbers/orderData order by xs:decimal($x) descending return xs:decimal($x) } </results>
      ]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">0 -0.000000000000000001 -0.00000000000000001 -0.0000000000000001 -0.000000000000001 -0.00000000000001 -0.0000000000001 -0.000000000001 -0.00000000001 -0.0000000001 -0.000000001 -0.00000001 -0.0000001 -0.000001 -0.00001 -0.0001 -0.001 -0.01 -0.1</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy57">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "xs:double($x) ", where $x is a set of small negative numbers and the ordering mode set to descending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/SmallNegativeNumbers/orderData order by xs:double($x) descending return xs:double($x) } </results>
      ]]></test>
      <result>
         <any-of>
            <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">0 -1.0E-18 -1.0E-17 -1.0E-16 -1.0E-15 -1.0E-14 -1.0E-13 -1.0E-12 -1.0E-11 -1.0E-10 -1.0E-9 -1.0E-8 -1.0E-7 -0.000001 -0.00001 -0.0001 -0.001 -0.01 -0.1</results>]]></assert-xml>
            <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">-0 -1.0E-18 -1.0E-17 -1.0E-16 -1.0E-15 -1.0E-14 -1.0E-13 -1.0E-12 -1.0E-11 -1.0E-10 -1.0E-9 -1.0E-8 -1.0E-7 -0.000001 -0.00001 -0.0001 -0.001 -0.01 -0.1</results>]]></assert-xml>
         </any-of>
      </result>
   </test-case>

   <test-case name="orderBy59">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to 
        "string($x) ", where $x is a set of small negative numbers and the ordering mode set to ascending </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/SmallNegativeNumbers/orderData order by string($x) ascending return string($x) } </results>
      ]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">-0.0 -0.000000000000000001 -0.00000000000000001 -0.0000000000000001 -0.000000000000001 -0.00000000000001 -0.0000000000001 -0.000000000001 -0.00000000001 -0.0000000001 -0.000000001 -0.00000001 -0.0000001 -0.000001 -0.00001 -0.0001 -0.001 -0.01 -0.1</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy60">
      <description> Evaluation of "order by" clause using a relative, valid collation. </description>
      <created by="Sorin Nasoi" on="2009-05-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare base-uri "http://www.w3.org/2005/xpath-functions/"; 
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { for $x in /DataValues/Strings/orderData 
                    order by concat($x,"()") ascending collation "collation/codepoint" 
                    return concat($x,"()") } </results>
      ]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">A String() B String() C String() D String() E String() F String() G String() H String() I String() J String() K String() L String() M String() N String() O String() P String() R String() S String() T String() U String() V String() W String() X String() Y String() Z String()</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy61">
      <description> Evaluation of "order by" clause using an absolute, valid collation. </description>
      <created by="Sorin Nasoi" on="2009-05-01"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results> { 
            for $x in /DataValues/Strings/orderData 
            order by concat($x,"()") ascending collation "http://www.w3.org/2005/xpath-functions/collation/codepoint" 
            return concat($x,"()") } 
        </results>
      ]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">A String() B String() C String() D String() E String() F String() G String() H String() I String() J String() K String() L String() M String() N String() O String() P String() R String() S String() T String() U String() V String() W String() X String() Y String() Z String()</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderBy62">
      <description/>
      <created by="Benjamin NGUYEN &amp; Bogdan BUTNARU" on="2009-11-18"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results>{ 
            for $x in /DataValues/NegativeNumbers/orderData/xs:decimal(.) 
            where $x > -1000 
            order by $x ascending collation "http://www.w3.org/2005/xpath-functions/collation/codepoint" 
            return $x }
        </results>
      ]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">-100 -10 -1 0</results>]]></assert-xml>
      </result>
   </test-case>
   
   <test-case name="orderBy63">
      <description>Test that the context item for evaluating a sort key is NOT the item whose sort key is being computed</description>
      <created by="Michael Kay" on="2011-07-30"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test>
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        /DataValues/(
            for $x in NegativeNumbers/orderData
            order by xs:decimal(.)
            return $x)</test>
      <result>
         <any-of>
            <error code="FOTY0004"/>
            <error code="FOTY0012"/>
            <error code="FORG0001"/>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="orderBy64" covers="flwor-generalization">
      <description>Variant of orderBy62 putting the where clause after the order by clause. Permitted in 3.0</description>
      <created by="Michael Kay" on="2011-09-19"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results>{ 
            for $x in /DataValues/NegativeNumbers/orderData/xs:decimal(.)  
            order by $x ascending collation "http://www.w3.org/2005/xpath-functions/collation/codepoint" 
            where $x > -1000
            return $x }
        </results>
      ]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">-100 -10 -1 0</results>]]></assert-xml>
      </result>
   </test-case>
   
   <test-case name="orderBy65" covers="flwor-generalization">
      <description>Variant of orderBy65 with multiple order by clauses. Permitted in 3.0</description>
      <created by="Michael Kay" on="2012-07-09"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        <results>{ 
            for $x in /DataValues/NegativeNumbers/orderData/xs:decimal(.) 
            order by $x descending collation "http://www.w3.org/2005/xpath-functions/collation/codepoint" 
            order by $x ascending collation "http://www.w3.org/2005/xpath-functions/collation/codepoint" 
            where $x > -1000
            return $x }
        </results>
      ]]></test>
      <result>
         <assert-xml><![CDATA[<results xmlns="http://www.w3.org/XQueryTestOrderBy">-100 -10 -1 0</results>]]></assert-xml>
      </result>
   </test-case>
   
   <test-case name="orderBy66" covers="flwor-generalization bang-operator">
      <description>Multiple order by clauses. Permitted in 3.0</description>
      <created by="Michael Kay" on="2012-07-09"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
 
            for $i in 1 to 100
            order by -$i
            count $count
            let $e := <e i="{$i}" pos="{$count}"/>
            order by number($e/@i)
            where $count gt 90
            return $e!@pos!number()

      ]]></test>
      <result>
         <assert-deep-eq>100, 99, 98, 97, 96, 95, 94, 93, 92, 91</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="orderbylocal-1">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "$x ", where $x is a set of Strings and the ordering mode set to ascending Uses a locally defined sequence. </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-10"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String",
        "I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String",
        "U String","V String","W String","X String","Y String","Z String") order by xs:string($x) 
        ascending return xs:string($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>A String B String C String D String E String F String G String H String I String J String K String L String M String N String O String P String R String S String T String U String V String W String X String Y String Z String</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-2">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "$x ", where $x is a set of Strings and the ordering mode set to descending Uses a local sequence. </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-10"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String",
        "I String","J String","K String","L String","M String","N String","O String","P String","R String","S String",
        "T String","U String","V String","W String","X String","Y String","Z String") order by xs:string($x) 
        descending return xs:string($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>Z String Y String X String W String V String U String T String S String R String P String O String N String M String L String K String J String I String H String G String F String E String D String C String B String A String</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-3">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "concat($x,"()") ", where $x is a set of Strings and the ordering mode set to ascending Uses a local sequence </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-10"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String",
        "I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String",
        "U String","V String","W String","X String","Y String","Z String") order by concat(xs:string($x),"()") 
        ascending return concat(xs:string($x),"()") } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>A String() B String() C String() D String() E String() F String() G String() H String() I String() J String() K String() L String() M String() N String() O String() P String() R String() S String() T String() U String() V String() W String() X String() Y String() Z String()</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-4">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "concat($x,"()") ", where $x is a set of Strings and the ordering mode set to descending Uses a locally defined string </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-10"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String","I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String","U String","V String","W String","X String","Y String","Z String") order by concat(xs:string($x),"()") descending return concat(xs:string($x),"()") } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>Z String() Y String() X String() W String() V String() U String() T String() S String() R String() P String() O String() N String() M String() L String() K String() J String() I String() H String() G String() F String() E String() D String() C String() B String() A String()</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-5">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "concat($x,"another String After") ", where $x is a set of Strings and the ordering mode set to ascending Uses Locally define sequence </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-10"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String","I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String","U String","V String","W String","X String","Y String","Z String") order by concat(xs:string($x),"another String After") ascending return concat(xs:string($x),"another String After") } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>A Stringanother String After B Stringanother String After C Stringanother String After D Stringanother String After E Stringanother String After F Stringanother String After G Stringanother String After H Stringanother String After I Stringanother String After J Stringanother String After K Stringanother String After L Stringanother String After M Stringanother String After N Stringanother String After O Stringanother String After P Stringanother String After R Stringanother String After S Stringanother String After T Stringanother String After U Stringanother String After V Stringanother String After W Stringanother String After X Stringanother String After Y Stringanother String After Z Stringanother String After</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-6">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "concat($x,"another String After") ", where $x is a set of Strings and the ordering mode set to descending Uses a locally defined sequence </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-10"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String","I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String","U String","V String","W String","X String","Y String","Z String") order by concat(xs:string($x),"another String After") descending return concat(xs:string($x),"another String After") } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>Z Stringanother String After Y Stringanother String After X Stringanother String After W Stringanother String After V Stringanother String After U Stringanother String After T Stringanother String After S Stringanother String After R Stringanother String After P Stringanother String After O Stringanother String After N Stringanother String After M Stringanother String After L Stringanother String After K Stringanother String After J Stringanother String After I Stringanother String After H Stringanother String After G Stringanother String After F Stringanother String After E Stringanother String After D Stringanother String After C Stringanother String After B Stringanother String After A Stringanother String After</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-7">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "concat("another String Before",$x) ", where $x is a set of Strings and the ordering mode set to ascending uses a locally defined sequence </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-10"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String","I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String","U String","V String","W String","X String","Y String","Z String") order by concat("another String Before",xs:string($x)) ascending return concat("another String Before",xs:string($x)) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>another String BeforeA String another String BeforeB String another String BeforeC String another String BeforeD String another String BeforeE String another String BeforeF String another String BeforeG String another String BeforeH String another String BeforeI String another String BeforeJ String another String BeforeK String another String BeforeL String another String BeforeM String another String BeforeN String another String BeforeO String another String BeforeP String another String BeforeR String another String BeforeS String another String BeforeT String another String BeforeU String another String BeforeV String another String BeforeW String another String BeforeX String another String BeforeY String another String BeforeZ String</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-8">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "concat("another String Before",$x) ", where $x is a set of Strings and the ordering mode set to descending Uses a locally defined sequence. </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-10"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String","I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String","U String","V String","W String","X String","Y String","Z String") order by concat("another String Before",xs:string($x)) descending return concat("another String Before",xs:string($x)) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>another String BeforeZ String another String BeforeY String another String BeforeX String another String BeforeW String another String BeforeV String another String BeforeU String another String BeforeT String another String BeforeS String another String BeforeR String another String BeforeP String another String BeforeO String another String BeforeN String another String BeforeM String another String BeforeL String another String BeforeK String another String BeforeJ String another String BeforeI String another String BeforeH String another String BeforeG String another String BeforeF String another String BeforeE String another String BeforeD String another String BeforeC String another String BeforeB String another String BeforeA String</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-9">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "concat($x,"") ", where $x is a set of Strings and the ordering mode set to descending Uses a locally defined sequence . </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-10"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String","I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String","U String","V String","W String","X String","Y String","Z String") order by concat(xs:string($x),"") descending return concat(xs:string($x),"") } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>Z String Y String X String W String V String U String T String S String R String P String O String N String M String L String K String J String I String H String G String F String E String D String C String B String A String</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-10">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "concat($x,"") ", where $x is a set of Strings and the ordering mode set to ascending Uses a locally defined sequence. </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-10"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String","I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String","U String","V String","W String","X String","Y String","Z String") order by concat(xs:string($x),"") ascending return concat(xs:string($x),"") } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>A String B String C String D String E String F String G String H String I String J String K String L String M String N String O String P String R String S String T String U String V String W String X String Y String Z String</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-11">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "concat("",$x) ", where $x is a set of Strings and the ordering mode set to descending Use locally defined sequence. </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-10"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String","I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String","U String","V String","W String","X String","Y String","Z String") order by concat("",xs:string($x)) descending return concat("",xs:string($x)) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>Z String Y String X String W String V String U String T String S String R String P String O String N String M String L String K String J String I String H String G String F String E String D String C String B String A String</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-12">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "concat("",$x) ", where $x is a set of Strings and the ordering mode set to ascending Uses locally defined sequence. </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-10"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String","I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String","U String","V String","W String","X String","Y String","Z String") order by concat("",xs:string($x)) ascending return concat("",xs:string($x)) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>A String B String C String D String E String F String G String H String I String J String K String L String M String N String O String P String R String S String T String U String V String W String X String Y String Z String</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-16">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "concat($x,$x) ", where $x is a set of Strings and the ordering mode set to ascending Use a locally defined sequence. </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-10"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String","I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String","U String","V String","W String","X String","Y String","Z String") order by concat(xs:string($x),xs:string($x)) ascending return concat(xs:string($x),xs:string($x)) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>A StringA String B StringB String C StringC String D StringD String E StringE String F StringF String G StringG String H StringH String I StringI String J StringJ String K StringK String L StringL String M StringM String N StringN String O StringO String P StringP String R StringR String S StringS String T StringT String U StringU String V StringV String W StringW String X StringX String Y StringY String Z StringZ String</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-17">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "string-length($x) ", where $x is a set of Strings and the ordering mode set to ascending Use a locally defined sequence. </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-10"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in("A String","B String","C String","D String","E String","F String","G String","H String","I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String","U String","V String","W String","X String","Y String","Z String") order by string-length(xs:string($x)) ascending return string-length(xs:string($x)) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-18">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "count($x) ", where $x is a set of Strings and the ordering mode set to ascending Use a locally defined sequence. </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-10"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String","I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String","U String","V String","W String","X String","Y String","Z String") order by count(xs:string($x)) ascending return count(xs:string($x)) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-19">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "string-length($x) ", where $x is a set of Strings and the ordering mode set to ascending Use a locally defined sequence. </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-10"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String","I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String","U String","V String","W String","X String","Y String","Z String") order by string-length(xs:string($x)) ascending return string-length(xs:string($x)) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-20">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "$x ", where $x is a set of negative numbers and the ordering mode set to ascending Use a locally defined sequence </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-10"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (-100000000000000000,-10000000000000000,-1000000000000000,-100000000000000,-10000000000000,-1000000000000,-100000000000,-10000000000,-1000000000,-100000000,-10000000,-1000000,-100000,-10000,-1000,-100,-10,-1,-0) order by xs:decimal($x) ascending return xs:decimal($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>-100000000000000000 -10000000000000000 -1000000000000000 -100000000000000 -10000000000000 -1000000000000 -100000000000 -10000000000 -1000000000 -100000000 -10000000 -1000000 -100000 -10000 -1000 -100 -10 -1 0</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-21">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "$x ", where $x is a set of negative numbers and the ordering mode set to descending Use a locally defined sequence. </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-10"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (-100000000000000000,-10000000000000000,-1000000000000000,-100000000000000,-10000000000000,-1000000000000,-100000000000,-10000000000,-1000000000,-100000000,-10000000,-1000000,-100000,-10000,-1000,-100,-10,-1,-0) order by xs:decimal($x) descending return xs:decimal($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>0 -1 -10 -100 -1000 -10000 -100000 -1000000 -10000000 -100000000 -1000000000 -10000000000 -100000000000 -1000000000000 -10000000000000 -100000000000000 -1000000000000000 -10000000000000000 -100000000000000000</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-22">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "($x + $x) ", where $x is a set of negative numbers and the ordering mode set to descending Use a locally define sequence. </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-10"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (-100000000000000000,-10000000000000000,-1000000000000000,-100000000000000,-10000000000000,-1000000000000,-100000000000,-10000000000,-1000000000,-100000000,-10000000,-1000000,-100000,-10000,-1000,-100,-10,-1,-0) order by (xs:decimal($x) + xs:decimal($x)) descending return xs:decimal($x) + xs:decimal($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>0 -2 -20 -200 -2000 -20000 -200000 -2000000 -20000000 -200000000 -2000000000 -20000000000 -200000000000 -2000000000000 -20000000000000 -200000000000000 -2000000000000000 -20000000000000000 -200000000000000000</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-25">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "xs:float($x) ", where $x is a set of negative numbers and the ordering mode set to descending Use a locally defined sequence. </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-10"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (-100000000000000000,-10000000000000000,-1000000000000000,-100000000000000,-10000000000000,-1000000000000,-100000000000,-10000000000,-1000000000,-100000000,-10000000,-1000000,-100000,-10000,-1000,-100,-10,-1,-0) order by xs:float($x) descending return xs:float($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>0 -1 -10 -100 -1000 -10000 -100000 -1.0E6 -1.0E7 -1.0E8 -1.0E9 -1.0E10 -1.0E11 -1.0E12 -1.0E13 -1.0E14 -1.0E15 -1.0E16 -1.0E17</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-26">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "xs:decimal($x) ", where $x is a set of negative numbers and the ordering mode set to descending Use a locally defined sequence. </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-10"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (-100000000000000000,-10000000000000000,-1000000000000000,-100000000000000,-10000000000000,-1000000000000,-100000000000,-10000000000,-1000000000,-100000000,-10000000,-1000000,-100000,-10000,-1000,-100,-10,-1,-0) order by xs:decimal($x) descending return xs:decimal($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>0 -1 -10 -100 -1000 -10000 -100000 -1000000 -10000000 -100000000 -1000000000 -10000000000 -100000000000 -1000000000000 -10000000000000 -100000000000000 -1000000000000000 -10000000000000000 -100000000000000000</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-27">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "xs:double($x) ", where $x is a set of negative numbers and the ordering mode set to descending Use a locally defined sequence </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-10"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (-100000000000000000,-10000000000000000,-1000000000000000,-100000000000000,-10000000000000,-1000000000000,-100000000000,-10000000000,-1000000000,-100000000,-10000000,-1000000,-100000,-10000,-1000,-100,-10,-1,-0) order by xs:double($x) descending return xs:double($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>0 -1 -10 -100 -1000 -10000 -100000 -1.0E6 -1.0E7 -1.0E8 -1.0E9 -1.0E10 -1.0E11 -1.0E12 -1.0E13 -1.0E14 -1.0E15 -1.0E16 -1.0E17</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-28">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "xs:integer($x) ", where $x is a set of negative numbers and the ordering mode set to descending Use a locally defined sequence. </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-10"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (-100000000000000000,-10000000000000000,-1000000000000000,-100000000000000,-10000000000000,-1000000000000,-100000000000,-10000000000,-1000000000,-100000000,-10000000,-1000000,-100000,-10000,-1000,-100,-10,-1,-0) order by xs:integer($x) descending return xs:integer($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>0 -1 -10 -100 -1000 -10000 -100000 -1000000 -10000000 -100000000 -1000000000 -10000000000 -100000000000 -1000000000000 -10000000000000 -100000000000000 -1000000000000000 -10000000000000000 -100000000000000000</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-29">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "($x * -1) ", where $x is a set of negative numbers and the ordering mode set to descending Use a locally defined sequence. </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-10"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (-100000000000000000,-10000000000000000,-1000000000000000,-100000000000000,-10000000000000,-1000000000000,-100000000000,-10000000000,-1000000000,-100000000,-10000000,-1000000,-100000,-10000,-1000,-100,-10,-1,-0) order by (xs:decimal($x) * -1) descending return (xs:decimal($x) * -1) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>100000000000000000 10000000000000000 1000000000000000 100000000000000 10000000000000 1000000000000 100000000000 10000000000 1000000000 100000000 10000000 1000000 100000 10000 1000 100 10 1 0</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-30">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "$x ", where $x is a set of positive numbers and the ordering mode set to ascending Use a locally defined sequence. </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-10"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (100000000000000000,10000000000000000,1000000000000000,100000000000000,10000000000000,1000000000000,100000000000,10000000000,1000000000,100000000,10000000,1000000,100000,10000,1000,100,10,1,0) order by xs:decimal($x) ascending return xs:decimal($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>0 1 10 100 1000 10000 100000 1000000 10000000 100000000 1000000000 10000000000 100000000000 1000000000000 10000000000000 100000000000000 1000000000000000 10000000000000000 100000000000000000</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-31">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "$x ", where $x is a set of positive numbers and the ordering mode set to descending Use a locally defined sequence. </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-14"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (100000000000000000,10000000000000000,1000000000000000,100000000000000,10000000000000,1000000000000,100000000000,10000000000,1000000000,100000000,10000000,1000000,100000,10000,1000,100,10,1,0) order by xs:decimal($x) descending return xs:decimal($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>100000000000000000 10000000000000000 1000000000000000 100000000000000 10000000000000 1000000000000 100000000000 10000000000 1000000000 100000000 10000000 1000000 100000 10000 1000 100 10 1 0</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-32">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "($x + $x) ", where $x is a set of positive numbers and the ordering mode set to descending Use a locally defined sequwnce. </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-14"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (100000000000000000,10000000000000000,1000000000000000,100000000000000,10000000000000,1000000000000,100000000000,10000000000,1000000000,100000000,10000000,1000000,100000,10000,1000,100,10,1,0) order by (xs:decimal($x) + xs:decimal($x)) descending return xs:decimal($x) + xs:decimal($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>200000000000000000 20000000000000000 2000000000000000 200000000000000 20000000000000 2000000000000 200000000000 20000000000 2000000000 200000000 20000000 2000000 200000 20000 2000 200 20 2 0</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-35">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "xs:float($x) ", where $x is a set of positive numbers and the ordering mode set to descending Use a locally defined sequence. </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-14"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (100000000000000000,10000000000000000,1000000000000000,100000000000000,10000000000000,1000000000000,100000000000,10000000000,1000000000,100000000,10000000,1000000,100000,10000,1000,100,10,1,0) order by xs:float($x) descending return xs:float($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>1.0E17 1.0E16 1.0E15 1.0E14 1.0E13 1.0E12 1.0E11 1.0E10 1.0E9 1.0E8 1.0E7 1.0E6 100000 10000 1000 100 10 1 0</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-36">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "xs:decimal($x) ", where $x is a set of positive numbers and the ordering mode set to descending Use a locally defined sequence. </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-14"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (100000000000000000,10000000000000000,1000000000000000,100000000000000,10000000000000,1000000000000,100000000000,10000000000,1000000000,100000000,10000000,1000000,100000,10000,1000,100,10,1,0) order by xs:decimal($x) descending return xs:decimal($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>100000000000000000 10000000000000000 1000000000000000 100000000000000 10000000000000 1000000000000 100000000000 10000000000 1000000000 100000000 10000000 1000000 100000 10000 1000 100 10 1 0</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-37">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "xs:double($x) ", where $x is a set of positive numbers and the ordering mode set to descending Use a locally defined sequence. </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-14"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (100000000000000000,10000000000000000,1000000000000000,100000000000000,10000000000000,1000000000000,100000000000,10000000000,1000000000,100000000,10000000,1000000,100000,10000,1000,100,10,1,0) order by xs:double($x) descending return xs:double($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>1.0E17 1.0E16 1.0E15 1.0E14 1.0E13 1.0E12 1.0E11 1.0E10 1.0E9 1.0E8 1.0E7 1.0E6 100000 10000 1000 100 10 1 0</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-38">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "xs:integer($x) ", where $x is a set of positive numbers and the ordering mode set to descending Use a locally defined sequence. </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-14"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (100000000000000000,10000000000000000,1000000000000000,100000000000000,10000000000000,1000000000000,100000000000,10000000000,1000000000,100000000,10000000,1000000,100000,10000,1000,100,10,1,0) order by xs:integer($x) descending return xs:integer($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>100000000000000000 10000000000000000 1000000000000000 100000000000000 10000000000000 1000000000000 100000000000 10000000000 1000000000 100000000 10000000 1000000 100000 10000 1000 100 10 1 0</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-39">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "string($x) ", where $x is a set of positive numbers and the ordering mode set to ascending Use a locally defined sequence. </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-14"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (100000000000000000,10000000000000000,1000000000000000,100000000000000,10000000000000,1000000000000,100000000000,10000000000,1000000000,100000000,10000000,1000000,100000,10000,1000,100,10,1,0) order by string($x) ascending return string($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>0 1 10 100 1000 10000 100000 1000000 10000000 100000000 1000000000 10000000000 100000000000 1000000000000 10000000000000 100000000000000 1000000000000000 10000000000000000 100000000000000000</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-40">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "$x ", where $x is a set of small positive numbers and the ordering mode set to ascending Use a locally defined sequence. </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-14"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (0.000000000000000001,0.00000000000000001,0.0000000000000001,0.000000000000001,0.00000000000001,0.0000000000001,0.000000000001,0.00000000001,0.0000000001,0.000000001,0.00000001,0.0000001,0.000001,0.00001,0.0001,0.001,0.01,0.1,0.0) order by $x ascending return $x } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>0 0.000000000000000001 0.00000000000000001 0.0000000000000001 0.000000000000001 0.00000000000001 0.0000000000001 0.000000000001 0.00000000001 0.0000000001 0.000000001 0.00000001 0.0000001 0.000001 0.00001 0.0001 0.001 0.01 0.1</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-41">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "$x ", where $x is a set of small positive numbers and the ordering mode set to descending Uses a locally defined sequence </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-14"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (0.000000000000000001,0.00000000000000001,0.0000000000000001,0.000000000000001,0.00000000000001,0.0000000000001,0.000000000001,0.00000000001,0.0000000001,0.000000001,0.00000001,0.0000001,0.000001,0.00001,0.0001,0.001,0.01,0.1,0.0) order by xs:decimal($x) descending return xs:decimal($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>0.1 0.01 0.001 0.0001 0.00001 0.000001 0.0000001 0.00000001 0.000000001 0.0000000001 0.00000000001 0.000000000001 0.0000000000001 0.00000000000001 0.000000000000001 0.0000000000000001 0.00000000000000001 0.000000000000000001 0</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-42">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "($x + $x) ", where $x is a set of small positive numbers and the ordering mode set to descending Use a locally defined sequence </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-14"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (0.000000000000000001,0.00000000000000001,0.0000000000000001,0.000000000000001,0.00000000000001,0.0000000000001,0.000000000001,0.00000000001,0.0000000001,0.000000001,0.00000001,0.0000001,0.000001,0.00001,0.0001,0.001,0.01,0.1,0.0) order by (xs:decimal($x) + xs:decimal($x)) descending return xs:decimal($x) + xs:decimal($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>0.2 0.02 0.002 0.0002 0.00002 0.000002 0.0000002 0.00000002 0.000000002 0.0000000002 0.00000000002 0.000000000002 0.0000000000002 0.00000000000002 0.000000000000002 0.0000000000000002 0.00000000000000002 0.000000000000000002 0</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-43">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "$x is $x ", where $x is a set of small positive numbers and the ordering mode set to ascending </description>
      <created by="Carmelo Montanez" on="2006-07-18"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results>{ for $x in (<a>0.000000000000000001</a>,<a>0.00000000000000001</a>,<a>0.0000000000000001</a>,<a>0.000000000000001</a>,<a>0.00000000000001</a>,<a>0.0000000000001</a>,<a>0.000000000001</a>,<a>0.00000000001</a>,<a>0.0000000001</a>,<a>0.000000001</a>,<a>0.00000001</a>,<a>0.0000001</a>,<a>0.000001</a>,<a>0.00001</a>,<a>0.0001</a>,<a>0.001</a>,<a>0.01</a>,<a>0.1</a>,<a>0.0</a>) order by $x is $x ascending return $x is $x}</results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>true true true true true true true true true true true true true true true true true true true</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-44">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "$x is $x ", where $x is a set of small positive numbers and the ordering mode set to descending </description>
      <created by="Carmelo Montanez" on="2006-07-18"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results>{ for $x in (<a>0.000000000000000001</a>,<a>0.00000000000000001</a>,<a>0.0000000000000001</a>,<a>0.000000000000001</a>,<a>0.00000000000001</a>,<a>0.0000000000001</a>,<a>0.000000000001</a>,<a>0.00000000001</a>,<a>0.0000000001</a>,<a>0.000000001</a>,<a>0.00000001</a>,<a>0.0000001</a>,<a>0.000001</a>,<a>0.00001</a>,<a>0.0001</a>,<a>0.001</a>,<a>0.01</a>,<a>0.1</a>,<a>0.0</a>) order by $x is $x descending return $x is $x }</results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>true true true true true true true true true true true true true true true true true true true</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-45">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "xs:float($x) ", where $x is a set of small positive numbers and the ordering mode set to descending Use a locally defined sequence </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-14"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (0.000000000000000001,0.00000000000000001,0.0000000000000001,0.000000000000001,0.00000000000001,0.0000000000001,0.000000000001,0.00000000001,0.0000000001,0.000000001,0.00000001,0.0000001,0.000001,0.00001,0.0001,0.001,0.01,0.1,0.0) order by xs:float($x) descending return xs:float($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>0.1 0.01 0.001 0.0001 0.00001 0.000001 1.0E-7 1.0E-8 1.0E-9 1.0E-10 1.0E-11 1.0E-12 1.0E-13 1.0E-14 1.0E-15 1.0E-16 1.0E-17 1.0E-18 0</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-46">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "xs:decimal($x) ", where $x is a set of small positive numbers and the ordering mode set to descending Use a locally defined sequence </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-14"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (0.000000000000000001,0.00000000000000001,0.0000000000000001,0.000000000000001,0.00000000000001,0.0000000000001,0.000000000001,0.00000000001,0.0000000001,0.000000001,0.00000001,0.0000001,0.000001,0.00001,0.0001,0.001,0.01,0.1,0.0) order by xs:decimal($x) descending return xs:decimal($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>0.1 0.01 0.001 0.0001 0.00001 0.000001 0.0000001 0.00000001 0.000000001 0.0000000001 0.00000000001 0.000000000001 0.0000000000001 0.00000000000001 0.000000000000001 0.0000000000000001 0.00000000000000001 0.000000000000000001 0</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-47">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "xs:double($x) ", where $x is a set of small positive numbers and the ordering mode set to descending Use a locally defined sequence </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-14"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (0.000000000000000001,0.00000000000000001,0.0000000000000001,0.000000000000001,0.00000000000001,0.0000000000001,0.000000000001,0.00000000001,0.0000000001,0.000000001,0.00000001,0.0000001,0.000001,0.00001,0.0001,0.001,0.01,0.1,0.0) order by xs:double($x) descending return xs:double($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>0.1 0.01 0.001 0.0001 0.00001 0.000001 1.0E-7 1.0E-8 1.0E-9 1.0E-10 1.0E-11 1.0E-12 1.0E-13 1.0E-14 1.0E-15 1.0E-16 1.0E-17 1.0E-18 0</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-49">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "string($x) ", where $x is a set of small positive numbers and the ordering mode set to ascending Use a locally defined sequence </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-14"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (0.000000000000000001,0.00000000000000001,0.0000000000000001,0.000000000000001,0.00000000000001,0.0000000000001,0.000000000001,0.00000000001,0.0000000001,0.000000001,0.00000001,0.0000001,0.000001,0.00001,0.0001,0.001,0.01,0.1,0.0) order by string($x) ascending return string($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>0 0.000000000000000001 0.00000000000000001 0.0000000000000001 0.000000000000001 0.00000000000001 0.0000000000001 0.000000000001 0.00000000001 0.0000000001 0.000000001 0.00000001 0.0000001 0.000001 0.00001 0.0001 0.001 0.01 0.1</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-50">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "$x ", where $x is a set of small negative numbers and the ordering mode set to ascending Use a locally definded sequence </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-14"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (-0.000000000000000001,-0.00000000000000001,-0.0000000000000001,-0.000000000000001,-0.00000000000001,-0.0000000000001,-0.000000000001,-0.00000000001,-0.0000000001,-0.000000001,-0.00000001,-0.0000001,-0.000001,-0.00001,-0.0001,-0.001,-0.01,-0.0,-0.1) order by xs:decimal($x) ascending return xs:decimal($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>-0.1 -0.01 -0.001 -0.0001 -0.00001 -0.000001 -0.0000001 -0.00000001 -0.000000001 -0.0000000001 -0.00000000001 -0.000000000001 -0.0000000000001 -0.00000000000001 -0.000000000000001 -0.0000000000000001 -0.00000000000000001 -0.000000000000000001 0</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-51">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "$x ", where $x is a set of small negative numbers and the ordering mode set to descending Use a locally defined sequence </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-14"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (-0.000000000000000001,-0.00000000000000001,-0.0000000000000001,-0.000000000000001,-0.00000000000001,-0.0000000000001,-0.000000000001,-0.00000000001,-0.0000000001,-0.000000001,-0.00000001,-0.0000001,-0.000001,-0.00001,-0.0001,-0.001,-0.01,-0.0,-0.1) order by xs:decimal($x) descending return xs:decimal($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>0 -0.000000000000000001 -0.00000000000000001 -0.0000000000000001 -0.000000000000001 -0.00000000000001 -0.0000000000001 -0.000000000001 -0.00000000001 -0.0000000001 -0.000000001 -0.00000001 -0.0000001 -0.000001 -0.00001 -0.0001 -0.001 -0.01 -0.1</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-52">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "($x + $x) ", where $x is a set of small negative numbers and the ordering mode set to descending Use a locally defined sequence </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-14"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (-0.000000000000000001,-0.00000000000000001,-0.0000000000000001,-0.000000000000001,-0.00000000000001,-0.0000000000001,-0.000000000001,-0.00000000001,-0.0000000001,-0.000000001,-0.00000001,-0.0000001,-0.000001,-0.00001,-0.0001,-0.001,-0.01,-0.0,-0.1) order by (xs:decimal($x) + xs:decimal($x)) descending return xs:decimal($x) + xs:decimal($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>0 -0.000000000000000002 -0.00000000000000002 -0.0000000000000002 -0.000000000000002 -0.00000000000002 -0.0000000000002 -0.000000000002 -0.00000000002 -0.0000000002 -0.000000002 -0.00000002 -0.0000002 -0.000002 -0.00002 -0.0002 -0.002 -0.02 -0.2</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-55">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "xs:float($x) ", where $x is a set of small negative numbers and the ordering mode set to descending Use a locally defined sequence </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-14"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (-0.000000000000000001,-0.00000000000000001,-0.0000000000000001,-0.000000000000001,-0.00000000000001,-0.0000000000001,-0.000000000001,-0.00000000001,-0.0000000001,-0.000000001,-0.00000001,-0.0000001,-0.000001,-0.00001,-0.0001,-0.001,-0.01,-0.0,-0.1) order by xs:float($x) descending return xs:float($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>0 -1.0E-18 -1.0E-17 -1.0E-16 -1.0E-15 -1.0E-14 -1.0E-13 -1.0E-12 -1.0E-11 -1.0E-10 -1.0E-9 -1.0E-8 -1.0E-7 -0.000001 -0.00001 -0.0001 -0.001 -0.01 -0.1</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-56">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "xs:decimal($x) ", where $x is a set of small negative numbers and the ordering mode set to descending Use a locally defined sequence </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-14"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (-0.000000000000000001,-0.00000000000000001,-0.0000000000000001,-0.000000000000001,-0.00000000000001,-0.0000000000001,-0.000000000001,-0.00000000001,-0.0000000001,-0.000000001,-0.00000001,-0.0000001,-0.000001,-0.00001,-0.0001,-0.001,-0.01,-0.0,-0.1) order by xs:decimal($x) descending return xs:decimal($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>0 -0.000000000000000001 -0.00000000000000001 -0.0000000000000001 -0.000000000000001 -0.00000000000001 -0.0000000000001 -0.000000000001 -0.00000000001 -0.0000000001 -0.000000001 -0.00000001 -0.0000001 -0.000001 -0.00001 -0.0001 -0.001 -0.01 -0.1</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-57">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "xs:double($x) ", where $x is a set of small negative numbers and the ordering mode set to descending Use a locally defined sequence </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-14"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (-0.000000000000000001,-0.00000000000000001,-0.0000000000000001,-0.000000000000001,-0.00000000000001,-0.0000000000001,-0.000000000001,-0.00000000001,-0.0000000001,-0.000000001,-0.00000001,-0.0000001,-0.000001,-0.00001,-0.0001,-0.001,-0.01,-0.0,-0.1) order by xs:double($x) descending return xs:double($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>0 -1.0E-18 -1.0E-17 -1.0E-16 -1.0E-15 -1.0E-14 -1.0E-13 -1.0E-12 -1.0E-11 -1.0E-10 -1.0E-9 -1.0E-8 -1.0E-7 -0.000001 -0.00001 -0.0001 -0.001 -0.01 -0.1</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-59">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "string($x) ", where $x is a set of small negative numbers and the ordering mode set to ascending Use a locally defined sequence </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-14"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (-0.000000000000000001,-0.00000000000000001,-0.0000000000000001,-0.000000000000001,-0.00000000000001,-0.0000000000001,-0.000000000001,-0.00000000001,-0.0000000001,-0.000000001,-0.00000001,-0.0000001,-0.000001,-0.00001,-0.0001,-0.001,-0.01,-0.0,-0.1) order by string($x) ascending return string($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>-0.000000000000000001 -0.00000000000000001 -0.0000000000000001 -0.000000000000001 -0.00000000000001 -0.0000000000001 -0.000000000001 -0.00000000001 -0.0000000001 -0.000000001 -0.00000001 -0.0000001 -0.000001 -0.00001 -0.0001 -0.001 -0.01 -0.1 0</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbylocal-60">
      <description> Evaluation of "order by" clause with an unknown collation. Use a locally defined sequence </description>
      <created by="Carmelo Montanez" on="2006-02-06"/>
      <test>for $x in ("A","B","C") order by string($x) ascending collation "http://nonexistentcollition.org/ifsupportedwoooayouarethebestQueryimplementation/makeitharder" return string($x)</test>
      <result>
         <error code="XQST0076"/>
      </result>
   </test-case>
   
      <test-case name="orderbywithout-1">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "$x ", where $x is a set of Strings. </description>
      <created by="Carmelo Montanez" on="2005-12-08"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String","I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String","U String","V String","W String","X String","Y String","Z String") order by xs:string($x) return xs:string($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>A String B String C String D String E String F String G String H String I String J String K String L String M String N String O String P String R String S String T String U String V String W String X String Y String Z String</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbywithout-2">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "concat($x,"()") ", where $x is a set of Strings. </description>
      <created by="Carmelo Montanez" on="2005-12-08"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String","I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String","U String","V String","W String","X String","Y String","Z String") order by concat(xs:string($x),"()") return concat(xs:string($x),"()") } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>A String() B String() C String() D String() E String() F String() G String() H String() I String() J String() K String() L String() M String() N String() O String() P String() R String() S String() T String() U String() V String() W String() X String() Y String() Z String()</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbywithout-3">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWOR expression set to "concat($x,"another String After") ", where $x is a set of Strings. </description>
      <created by="Carmelo Montanez" on="2005-12-08"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String","I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String","U String","V String","W String","X String","Y String","Z String") order by concat(xs:string($x),"another String After") return concat(xs:string($x),"another String After") } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>A Stringanother String After B Stringanother String After C Stringanother String After D Stringanother String After E Stringanother String After F Stringanother String After G Stringanother String After H Stringanother String After I Stringanother String After J Stringanother String After K Stringanother String After L Stringanother String After M Stringanother String After N Stringanother String After O Stringanother String After P Stringanother String After R Stringanother String After S Stringanother String After T Stringanother String After U Stringanother String After V Stringanother String After W Stringanother String After X Stringanother String After Y Stringanother String After Z Stringanother String After</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbywithout-4">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWOR expression set to "concat("another String Before",$x) ", where $x is a set of Strings. </description>
      <created by="Carmelo Montanez" on="2005-12-08"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String","I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String","U String","V String","W String","X String","Y String","Z String") order by concat("another String Before",xs:string($x)) return concat("another String Before",xs:string($x)) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>another String BeforeA String another String BeforeB String another String BeforeC String another String BeforeD String another String BeforeE String another String BeforeF String another String BeforeG String another String BeforeH String another String BeforeI String another String BeforeJ String another String BeforeK String another String BeforeL String another String BeforeM String another String BeforeN String another String BeforeO String another String BeforeP String another String BeforeR String another String BeforeS String another String BeforeT String another String BeforeU String another String BeforeV String another String BeforeW String another String BeforeX String another String BeforeY String another String BeforeZ String</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbywithout-5">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWOR expression set to "concat($x,"") ", where $x is a set of Strings. </description>
      <created by="Carmelo Montanez" on="2005-12-08"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String","I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String","U String","V String","W String","X String","Y String","Z String") order by concat(xs:string($x),"") return concat(xs:string($x),"") } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>A String B String C String D String E String F String G String H String I String J String K String L String M String N String O String P String R String S String T String U String V String W String X String Y String Z String</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbywithout-6">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWOR expression set to "concat("",$x) ", where $x is a set of Strings. </description>
      <created by="Carmelo Montanez" on="2005-12-08"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String","I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String","U String","V String","W String","X String","Y String","Z String") order by concat("",xs:string($x)) return concat("",xs:string($x)) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>A String B String C String D String E String F String G String H String I String J String K String L String M String N String O String P String R String S String T String U String V String W String X String Y String Z String</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbywithout-7">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWOR expression set to "$x is $x ", where $x is a set of nodes with strings as content. </description>
      <created by="Carmelo Montanez" on="2005-12-08"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (<a>A String</a>,<a>B String</a>,<a>C String</a>,<a>D String</a>,<a>E String</a>,<a>F String</a>,<a>G String</a>,<a>H String</a>,<a>I String</a>, <a>J String</a>,<a>K String</a>,<a>L String</a>,<a>M String</a>,<a>N String</a>,<a>O String</a>,<a>P String</a>,<a>R String</a>,<a>S String</a>,<a>T String</a>, <a>U String</a>,<a>V String</a>,<a>W String</a>,<a>X String</a>,<a>Y String</a>,<a>Z String</a>) order by $x is $x return $x is $x } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>true true true true true true true true true true true true true true true true true true true true true true true true true</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbywithout-8">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWOR expression set to "concat($x,$x) ", where $x is a set of Strings. </description>
      <created by="Carmelo Montanez" on="2005-12-08"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String","I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String","U String","V String","W String","X String","Y String","Z String") order by concat(xs:string($x),xs:string($x)) return concat(xs:string($x),xs:string($x)) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>A StringA String B StringB String C StringC String D StringD String E StringE String F StringF String G StringG String H StringH String I StringI String J StringJ String K StringK String L StringL String M StringM String N StringN String O StringO String P StringP String R StringR String S StringS String T StringT String U StringU String V StringV String W StringW String X StringX String Y StringY String Z StringZ String</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbywithout-9">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWOR expression set to "string-length($x) ", where $x is a set of Nodes with strings as content. </description>
      <created by="Carmelo Montanez" on="2005-12-08"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (<a>A String</a>,<a>B String</a>,<a>C String</a>,<a>D String</a>,<a>E String</a>,<a>F String</a>,<a>G String</a>,<a>H String</a>,<a>I String</a>, <a>J String</a>,<a>K String</a>,<a>L String</a>,<a>M String</a>,<a>N String</a>,<a>O String</a>,<a>P String</a>,<a>R String</a>,<a>S String</a>,<a>T String</a>, <a>U String</a>,<a>V String</a>,<a>W String</a>,<a>X String</a>,<a>Y String</a>,<a>Z String</a>) order by string-length($x) return string-length($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbywithout-10">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWOR expression set to "count($x) ", where $x is a set of node with strings as content. </description>
      <created by="Carmelo Montanez" on="2005-12-08"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in ("A String","B String","C String","D String","E String","F String","G String","H String","I String","J String","K String","L String","M String","N String","O String","P String","R String","S String","T String","U String","V String","W String","X String","Y String","Z String") order by count(xs:string($x)) return count(xs:string($x)) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbywithout-11">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWOR expression set to "$x ", where $x is a set of negative numbers casted as decimals. </description>
      <created by="Carmelo Montanez" on="2005-12-08"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (-100000000000000000,-10000000000000000,-1000000000000000,-100000000000000,-10000000000000,-1000000000000,-100000000000,-10000000000,-1000000000,-100000000,-10000000,-1000000,-100000,-10000,-1000,-100,-10,-1,-0) order by xs:decimal($x) return xs:decimal($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>-100000000000000000 -10000000000000000 -1000000000000000 -100000000000000 -10000000000000 -1000000000000 -100000000000 -10000000000 -1000000000 -100000000 -10000000 -1000000 -100000 -10000 -1000 -100 -10 -1 0</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbywithout-12">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWOR expression set to "($x + $x) ", where $x is a set of negative numbers casted as decimals. </description>
      <created by="Carmelo Montanez" on="2005-12-08"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (-100000000000000000,-10000000000000000,-1000000000000000,-100000000000000,-10000000000000,-1000000000000,-100000000000,-10000000000,-1000000000,-100000000,-10000000,-1000000,-100000,-10000,-1000,-100,-10,-1,-0) order by (xs:decimal($x) + xs:decimal($x)) return xs:decimal($x) + xs:decimal($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>-200000000000000000 -20000000000000000 -2000000000000000 -200000000000000 -20000000000000 -2000000000000 -200000000000 -20000000000 -2000000000 -200000000 -20000000 -2000000 -200000 -20000 -2000 -200 -20 -2 0</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbywithout-13">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWOR expression set to "$x is $x ", where $x is a set of nodes with negative numbers as content. </description>
      <created by="Carmelo Montanez" on="2005-12-08"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (<orderData>-100000000000000000</orderData>,<orderData>-10000000000000000</orderData>,<orderData>-1000000000000000</orderData>,<orderData>-100000000000000</orderData>, <orderData>-10000000000000</orderData>,<orderData>-1000000000000</orderData>,<orderData>-100000000000</orderData>,<orderData>-10000000000</orderData>,<orderData>-1000000000</orderData>, <orderData>-100000000</orderData>,<orderData>-10000000</orderData>,<orderData>-1000000</orderData>,<orderData>-100000</orderData>,<orderData>-10000</orderData>,<orderData>-1000</orderData>, <orderData>-100</orderData>,<orderData>-10</orderData>,<orderData>-1</orderData>,<orderData>-0</orderData>) order by $x is $x return $x is $x } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>true true true true true true true true true true true true true true true true true true true</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbywithout-14">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWOR expression set to "xs:float($x) ", where $x is a set of negative numbers. </description>
      <created by="Carmelo Montanez" on="2005-12-08"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (-100000000000000000,-10000000000000000,-1000000000000000,-100000000000000,-10000000000000,-1000000000000,-100000000000,-10000000000,-1000000000,-100000000,-10000000,-1000000,-100000,-10000,-1000,-100,-10,-1,-0) order by xs:float($x) return xs:float($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>-1.0E17 -1.0E16 -1.0E15 -1.0E14 -1.0E13 -1.0E12 -1.0E11 -1.0E10 -1.0E9 -1.0E8 -1.0E7 -1.0E6 -100000 -10000 -1000 -100 -10 -1 0</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbywithout-15">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWOR expression set to "xs:double($x) ", where $x is a set of negative numbers. </description>
      <created by="Carmelo Montanez" on="2005-12-08"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (-100000000000000000,-10000000000000000,-1000000000000000,-100000000000000,-10000000000000,-1000000000000,-100000000000,-10000000000,-1000000000,-100000000,-10000000,-1000000,-100000,-10000,-1000,-100,-10,-1,-0) order by xs:double($x) return xs:double($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>-1.0E17 -1.0E16 -1.0E15 -1.0E14 -1.0E13 -1.0E12 -1.0E11 -1.0E10 -1.0E9 -1.0E8 -1.0E7 -1.0E6 -100000 -10000 -1000 -100 -10 -1 0</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbywithout-16">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWOR expression set to "xs:integer($x) ", where $x is a set of negative numbers. </description>
      <created by="Carmelo Montanez" on="2005-12-08"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (-100000000000000000,-10000000000000000,-1000000000000000,-100000000000000,-10000000000000,-1000000000000,-100000000000,-10000000000,-1000000000,-100000000,-10000000,-1000000,-100000,-10000,-1000,-100,-10,-1,-0) order by xs:integer($x) return xs:integer($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>-100000000000000000 -10000000000000000 -1000000000000000 -100000000000000 -10000000000000 -1000000000000 -100000000000 -10000000000 -1000000000 -100000000 -10000000 -1000000 -100000 -10000 -1000 -100 -10 -1 0</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbywithout-17">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWOR expression set to "($x * -1) ", where $x is a set of negative numbers. Use a locally defined sequence. </description>
      <created by="Carmelo Montanez" on="2005-12-08"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (-100000000000000000,-10000000000000000,-1000000000000000,-100000000000000,-10000000000000,-1000000000000,-100000000000,-10000000000,-1000000000,-100000000,-10000000,-1000000,-100000,-10000,-1000,-100,-10,-1,-0) order by (xs:decimal($x) * -1) return (xs:decimal($x) * -1) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>0 1 10 100 1000 10000 100000 1000000 10000000 100000000 1000000000 10000000000 100000000000 1000000000000 10000000000000 100000000000000 1000000000000000 10000000000000000 100000000000000000</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbywithout-18">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWOR expression set to "$x ", where $x is a set of positive numbers. </description>
      <created by="Carmelo Montanez" on="2005-12-08"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (100000000000000000,10000000000000000,1000000000000000,100000000000000,10000000000000,1000000000000,100000000000,10000000000,1000000000,100000000,10000000,1000000,100000,10000,1000,100,10,1,0) order by xs:decimal($x) return xs:decimal($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>0 1 10 100 1000 10000 100000 1000000 10000000 100000000 1000000000 10000000000 100000000000 1000000000000 10000000000000 100000000000000 1000000000000000 10000000000000000 100000000000000000</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbywithout-19">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWOR expression set to "($x + $x) ", where $x is a set of positive numbers. </description>
      <created by="Carmelo Montanez" on="2005-12-08"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (100000000000000000,10000000000000000,1000000000000000,100000000000000,10000000000000,1000000000000,100000000000,10000000000,1000000000,100000000,10000000,1000000,100000,10000,1000,100,10,1,0) order by (xs:decimal($x) + xs:decimal($x)) return xs:decimal($x) + xs:decimal($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>0 2 20 200 2000 20000 200000 2000000 20000000 200000000 2000000000 20000000000 200000000000 2000000000000 20000000000000 200000000000000 2000000000000000 20000000000000000 200000000000000000</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbywithout-20">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWOR expression set to "$x is $x ", where $x is a set of nodes with positive numbers as content. </description>
      <created by="Carmelo Montanez" on="2005-12-08"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (<orderData>100000000000000000</orderData>,<orderData>10000000000000000</orderData>,<orderData>1000000000000000</orderData>, <orderData>100000000000000</orderData>,<orderData>10000000000000</orderData>,<orderData>1000000000000</orderData>,<orderData>100000000000</orderData>, <orderData>10000000000</orderData>,<orderData>1000000000</orderData>,<orderData>100000000</orderData>,<orderData>10000000</orderData>, <orderData>1000000</orderData>,<orderData>100000</orderData>,<orderData>10000</orderData>,<orderData>1000</orderData>,<orderData>100</orderData>, <orderData>10</orderData>,<orderData>1</orderData>,<orderData>0</orderData>) order by $x is $x return $x is $x } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>true true true true true true true true true true true true true true true true true true true</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbywithout-21">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWOR expression set to "xs:float($x) ", where $x is a set of positive numbers. </description>
      <created by="Carmelo Montanez" on="2005-12-08"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (100000000000000000,10000000000000000,1000000000000000,100000000000000,10000000000000,1000000000000,100000000000,10000000000,1000000000,100000000,10000000,1000000,100000,10000,1000,100,10,1,0) order by xs:float($x) return xs:float($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>0 1 10 100 1000 10000 100000 1.0E6 1.0E7 1.0E8 1.0E9 1.0E10 1.0E11 1.0E12 1.0E13 1.0E14 1.0E15 1.0E16 1.0E17</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbywithout-22">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWR expression set to "xs:decimal($x)", where $x is a set of positive numbers. </description>
      <created by="Carmelo Montanez" on="2005-12-08"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (100000000000000000,10000000000000000,1000000000000000,100000000000000,10000000000000,1000000000000,100000000000,10000000000,1000000000,100000000,10000000,1000000,100000,10000,1000,100,10,1,0) order by xs:decimal($x) return xs:decimal($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>0 1 10 100 1000 10000 100000 1000000 10000000 100000000 1000000000 10000000000 100000000000 1000000000000 10000000000000 100000000000000 1000000000000000 10000000000000000 100000000000000000</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbywithout-23">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWOR expression set to "xs:double($x)", where $x is a set of positive numbers. </description>
      <created by="Carmelo Montanez" on="2005-12-08"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (100000000000000000,10000000000000000,1000000000000000,100000000000000,10000000000000,1000000000000,100000000000,10000000000,1000000000,100000000,10000000,1000000,100000,10000,1000,100,10,1,0) order by xs:double($x) return xs:double($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>0 1 10 100 1000 10000 100000 1.0E6 1.0E7 1.0E8 1.0E9 1.0E10 1.0E11 1.0E12 1.0E13 1.0E14 1.0E15 1.0E16 1.0E17</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbywithout-24">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWOR expression set to "xs:integer($x)", where $x is a set of positive numbers. </description>
      <created by="Carmelo Montanez" on="2005-12-08"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (100000000000000000,10000000000000000,1000000000000000,100000000000000,10000000000000,1000000000000,100000000000,10000000000,1000000000,100000000,10000000,1000000,100000,10000,1000,100,10,1,0) order by xs:integer($x) return xs:integer($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>0 1 10 100 1000 10000 100000 1000000 10000000 100000000 1000000000 10000000000 100000000000 1000000000000 10000000000000 100000000000000 1000000000000000 10000000000000000 100000000000000000</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbywithout-25">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWOR expression set to "string($x)", where $x is a set of positive numbers. </description>
      <created by="Carmelo Montanez" on="2005-12-08"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (100000000000000000,10000000000000000,1000000000000000,100000000000000,10000000000000,1000000000000,100000000000,10000000000,1000000000,100000000,10000000,1000000,100000,10000,1000,100,10,1,0) order by string($x) return string($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>0 1 10 100 1000 10000 100000 1000000 10000000 100000000 1000000000 10000000000 100000000000 1000000000000 10000000000000 100000000000000 1000000000000000 10000000000000000 100000000000000000</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbywithout-26">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWOR expression set to "$x", where $x is a set of small positive numbers. </description>
      <created by="Carmelo Montanez" on="2005-12-09"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (0.000000000000000001,0.00000000000000001,0.0000000000000001,0.000000000000001,0.00000000000001,0.0000000000001,0.000000000001,0.00000000001,0.0000000001,0.000000001,0.00000001,0.0000001,0.000001,0.00001,0.0001,0.001,0.01,0.1,0.0) order by $x return $x } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>0 0.000000000000000001 0.00000000000000001 0.0000000000000001 0.000000000000001 0.00000000000001 0.0000000000001 0.000000000001 0.00000000001 0.0000000001 0.000000001 0.00000001 0.0000001 0.000001 0.00001 0.0001 0.001 0.01 0.1</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbywithout-27">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWOR expression set to "$x", where $x is a set of small positive numbers casted as decimals. </description>
      <created by="Carmelo Montanez" on="2005-12-09"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (0.000000000000000001,0.00000000000000001,0.0000000000000001,0.000000000000001,0.00000000000001,0.0000000000001,0.000000000001,0.00000000001,0.0000000001,0.000000001,0.00000001,0.0000001,0.000001,0.00001,0.0001,0.001,0.01,0.1,0.0) order by xs:decimal($x) return xs:decimal($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>0 0.000000000000000001 0.00000000000000001 0.0000000000000001 0.000000000000001 0.00000000000001 0.0000000000001 0.000000000001 0.00000000001 0.0000000001 0.000000001 0.00000001 0.0000001 0.000001 0.00001 0.0001 0.001 0.01 0.1</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbywithout-28">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWOR expression set to "($x + $x) ", where $x is a set of small positive numbers casted as decimals. </description>
      <created by="Carmelo Montanez" on="2005-12-09"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (0.000000000000000001,0.00000000000000001,0.0000000000000001,0.000000000000001,0.00000000000001,0.0000000000001,0.000000000001,0.00000000001,0.0000000001,0.000000001,0.00000001,0.0000001,0.000001,0.00001,0.0001,0.001,0.01,0.1,0.0) order by (xs:decimal($x) + xs:decimal($x)) return xs:decimal($x) + xs:decimal($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>0 0.000000000000000002 0.00000000000000002 0.0000000000000002 0.000000000000002 0.00000000000002 0.0000000000002 0.000000000002 0.00000000002 0.0000000002 0.000000002 0.00000002 0.0000002 0.000002 0.00002 0.0002 0.002 0.02 0.2</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbywithout-29">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWOR expression set to "$x is $x ", where $x is a set nodes with small positive numbers as content. </description>
      <created by="Carmelo Montanez" on="2005-12-09"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (<orderData>0.000000000000000001</orderData>,<orderData>0.00000000000000001</orderData>,<orderData>0.0000000000000001</orderData>,<orderData>0.000000000000001</orderData>, <orderData>0.00000000000001</orderData>,<orderData>0.0000000000001</orderData>,<orderData>0.000000000001</orderData>,<orderData>0.00000000001</orderData>,<orderData>0.0000000001</orderData>, <orderData>0.000000001</orderData>,<orderData>0.00000001</orderData>,<orderData>0.0000001</orderData>,<orderData>0.000001</orderData>,<orderData>0.00001</orderData>, <orderData>0.0001</orderData>,<orderData>0.001</orderData>,<orderData>0.01</orderData>,<orderData>0.1</orderData>,<orderData>0.0</orderData>) order by $x is $x return $x is $x } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>true true true true true true true true true true true true true true true true true true true</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbywithout-30">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWOR expression set to "xs:float($x) ", where $x is a set of small positive numbers. </description>
      <created by="Carmelo Montanez" on="2005-12-09"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (0.000000000000000001,0.00000000000000001,0.0000000000000001,0.000000000000001,0.00000000000001,0.0000000000001,0.000000000001,0.00000000001,0.0000000001,0.000000001,0.00000001,0.0000001,0.000001,0.00001,0.0001,0.001,0.01,0.1,0.0) order by xs:float($x) return xs:float($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>0 1.0E-18 1.0E-17 1.0E-16 1.0E-15 1.0E-14 1.0E-13 1.0E-12 1.0E-11 1.0E-10 1.0E-9 1.0E-8 1.0E-7 0.000001 0.00001 0.0001 0.001 0.01 0.1</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbywithout-31">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWOR expression set to "xs:decimal($x) ", where $x is a set of small positive numbers. </description>
      <created by="Carmelo Montanez" on="2005-12-09"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (0.000000000000000001,0.00000000000000001,0.0000000000000001,0.000000000000001,0.00000000000001,0.0000000000001,0.000000000001,0.00000000001,0.0000000001,0.000000001,0.00000001,0.0000001,0.000001,0.00001,0.0001,0.001,0.01,0.1,0.0) order by xs:decimal($x) return xs:decimal($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>0 0.000000000000000001 0.00000000000000001 0.0000000000000001 0.000000000000001 0.00000000000001 0.0000000000001 0.000000000001 0.00000000001 0.0000000001 0.000000001 0.00000001 0.0000001 0.000001 0.00001 0.0001 0.001 0.01 0.1</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbywithout-32">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWOR expression set to "xs:double($x) ", where $x is a set of small positive numbers. </description>
      <created by="Carmelo Montanez" on="2005-12-09"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (0.000000000000000001,0.00000000000000001,0.0000000000000001,0.000000000000001,0.00000000000001,0.0000000000001,0.000000000001,0.00000000001,0.0000000001,0.000000001,0.00000001,0.0000001,0.000001,0.00001,0.0001,0.001,0.01,0.1,0.0) order by xs:double($x) return xs:double($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>0 1.0E-18 1.0E-17 1.0E-16 1.0E-15 1.0E-14 1.0E-13 1.0E-12 1.0E-11 1.0E-10 1.0E-9 1.0E-8 1.0E-7 0.000001 0.00001 0.0001 0.001 0.01 0.1</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbywithout-33">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWOR expression set to "string($x) ", where $x is a set of small positive numbers. </description>
      <created by="Carmelo Montanez" on="2005-12-09"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (0.000000000000000001,0.00000000000000001,0.0000000000000001,0.000000000000001,0.00000000000001,0.0000000000001,0.000000000001,0.00000000001,0.0000000001,0.000000001,0.00000001,0.0000001,0.000001,0.00001,0.0001,0.001,0.01,0.1,0.0) order by string($x) return string($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>0 0.000000000000000001 0.00000000000000001 0.0000000000000001 0.000000000000001 0.00000000000001 0.0000000000001 0.000000000001 0.00000000001 0.0000000001 0.000000001 0.00000001 0.0000001 0.000001 0.00001 0.0001 0.001 0.01 0.1</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbywithout-34">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWOR expression set to "$x ", where $x is a set of small negative numbers casted as decimals. </description>
      <created by="Carmelo Montanez" on="2005-12-09"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (-0.000000000000000001,-0.00000000000000001,-0.0000000000000001,-0.000000000000001,-0.00000000000001,-0.0000000000001,-0.000000000001,-0.00000000001,-0.0000000001,-0.000000001,-0.00000001,-0.0000001,-0.000001,-0.00001,-0.0001,-0.001,-0.01,-0.0,-0.1) order by xs:decimal($x) return xs:decimal($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>-0.1 -0.01 -0.001 -0.0001 -0.00001 -0.000001 -0.0000001 -0.00000001 -0.000000001 -0.0000000001 -0.00000000001 -0.000000000001 -0.0000000000001 -0.00000000000001 -0.000000000000001 -0.0000000000000001 -0.00000000000000001 -0.000000000000000001 0</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbywithout-35">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWOR expression set to "($x + $x) ", where $x is a set of small negative numbers casted as decimals. </description>
      <created by="Carmelo Montanez" on="2005-12-09"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (-0.000000000000000001,-0.00000000000000001,-0.0000000000000001,-0.000000000000001,-0.00000000000001,-0.0000000000001,-0.000000000001,-0.00000000001,-0.0000000001,-0.000000001,-0.00000001,-0.0000001,-0.000001,-0.00001,-0.0001,-0.001,-0.01,-0.0,-0.1) order by (xs:decimal($x) + xs:decimal($x)) return xs:decimal($x) + xs:decimal($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>-0.2 -0.02 -0.002 -0.0002 -0.00002 -0.000002 -0.0000002 -0.00000002 -0.000000002 -0.0000000002 -0.00000000002 -0.000000000002 -0.0000000000002 -0.00000000000002 -0.000000000000002 -0.0000000000000002 -0.00000000000000002 -0.000000000000000002 0</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbywithout-36">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWOR expression set to "$x is $x ", where $x is a set of nodes with small negative numbers as argument. </description>
      <created by="Carmelo Montanez" on="2005-12-09"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (<orderData>-0.000000000000000001</orderData>,<orderData>-0.00000000000000001</orderData>,<orderData>-0.0000000000000001</orderData>,<orderData>-0.000000000000001</orderData>,<orderData>-0.00000000000001</orderData>,<orderData>-0.0000000000001</orderData>, <orderData>-0.000000000001</orderData>,<orderData>-0.00000000001</orderData>,<orderData>-0.0000000001</orderData>,<orderData>-0.000000001</orderData>, <orderData>-0.00000001</orderData>,<orderData>-0.0000001</orderData>,<orderData>-0.000001</orderData>,<orderData>-0.00001</orderData>,<orderData>-0.0001</orderData>,<orderData>-0.001</orderData>,<orderData>-0.01</orderData>,<orderData>-0.0</orderData>, <orderData>-0.1</orderData>) order by $x is $x return $x is $x } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>true true true true true true true true true true true true true true true true true true true</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbywithout-37">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWOR expression set to "xs:float($x) ", where $x is a set of small negative numbers. </description>
      <created by="Carmelo Montanez" on="2005-12-09"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (-0.000000000000000001,-0.00000000000000001,-0.0000000000000001,-0.000000000000001,-0.00000000000001,-0.0000000000001,-0.000000000001,-0.00000000001,-0.0000000001,-0.000000001,-0.00000001,-0.0000001,-0.000001,-0.00001,-0.0001,-0.001,-0.01,-0.0,-0.1) order by xs:float($x) return xs:float($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>-0.1 -0.01 -0.001 -0.0001 -0.00001 -0.000001 -1.0E-7 -1.0E-8 -1.0E-9 -1.0E-10 -1.0E-11 -1.0E-12 -1.0E-13 -1.0E-14 -1.0E-15 -1.0E-16 -1.0E-17 -1.0E-18 0</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbywithout-38">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWOR expression set to "xs:decimal($x) ", where $x is a set of small negative numbers. </description>
      <created by="Carmelo Montanez" on="2005-12-09"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (-0.000000000000000001,-0.00000000000000001,-0.0000000000000001,-0.000000000000001,-0.00000000000001,-0.0000000000001,-0.000000000001,-0.00000000001,-0.0000000001,-0.000000001,-0.00000001,-0.0000001,-0.000001,-0.00001,-0.0001,-0.001,-0.01,-0.0,-0.1) order by xs:decimal($x) return xs:decimal($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>-0.1 -0.01 -0.001 -0.0001 -0.00001 -0.000001 -0.0000001 -0.00000001 -0.000000001 -0.0000000001 -0.00000000001 -0.000000000001 -0.0000000000001 -0.00000000000001 -0.000000000000001 -0.0000000000000001 -0.00000000000000001 -0.000000000000000001 0</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbywithout-39">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWOR expression set to "xs:double($x) ", where $x is a set of small negative numbers. </description>
      <created by="Carmelo Montanez" on="2005-12-09"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (-0.000000000000000001,-0.00000000000000001,-0.0000000000000001,-0.000000000000001,-0.00000000000001,-0.0000000000001,-0.000000000001,-0.00000000001,-0.0000000001,-0.000000001,-0.00000001,-0.0000001,-0.000001,-0.00001,-0.0001,-0.001,-0.01,-0.0,-0.1) order by xs:double($x) return xs:double($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>-0.1 -0.01 -0.001 -0.0001 -0.00001 -0.000001 -1.0E-7 -1.0E-8 -1.0E-9 -1.0E-10 -1.0E-11 -1.0E-12 -1.0E-13 -1.0E-14 -1.0E-15 -1.0E-16 -1.0E-17 -1.0E-18 0</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="orderbywithout-40">
      <description> Evaluation of "order by" clause with the "order by" clause of a FLWOR expression set to "string($x) ", where $x is a set of small negative numbers. </description>
      <created by="Carmelo Montanez" on="2005-12-09"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<results> { for $x in (-0.000000000000000001,-0.00000000000000001,-0.0000000000000001,-0.000000000000001,-0.00000000000001,-0.0000000000001,-0.000000000001,-0.00000000001,-0.0000000001,-0.000000001,-0.00000001,-0.0000001,-0.000001,-0.00001,-0.0001,-0.001,-0.01,-0.0,-0.1) order by string($x) return string($x) } </results>]]></test>
      <result>
         <assert-xml><![CDATA[<results>-0.000000000000000001 -0.00000000000000001 -0.0000000000000001 -0.000000000000001 -0.00000000000001 -0.0000000000001 -0.000000000001 -0.00000000001 -0.0000000001 -0.000000001 -0.00000001 -0.0000001 -0.000001 -0.00001 -0.0001 -0.001 -0.01 -0.1 0</results>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-1">
      <description> Use a relative, valid collation. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare base-uri "http://www.w3.org/2005/xpath-functions/"; let $i as xs:integer* := (1, 2, 3) order by 1 collation "collation/codepoint" return $i</test>
      <result>
         <assert-string-value>1 2 3</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-2">
      <description> Use a relative, invalid collation. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare base-uri "http://www.w3.org/2005/xpath-functions/"; let $i as xs:integer* := (1, 2, 3) order by 1 collation "collation/" return $i</test>
      <result>
         <error code="XQST0076"/>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-3">
      <description> Use a relative, unknown collation. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare base-uri "http://www.w3.org/2005/xpath-functions/"; let $i as xs:integer* := (1, 2, 3) order by 1 collation "collation/" return $i</test>
      <result>
         <error code="XQST0076"/>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-4">
      <description> Use an absolute, invalid collation. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>let $i as xs:integer* := (1, 2, 3) order by 1 collation "http:\\invalid%&gt;URI\someURI" return $i</test>
      <result>
         <error code="XQST0046"/>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-5">
      <description> A simple sorting of integers. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>for $i in (1, 3, 2) order by $i return $i</test>
      <result>
         <assert-string-value>1 2 3</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-6">
      <description> A simple sorting of integers(#2). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>for $i in (1, 3, 2) order by $i return ($i, 2)</test>
      <result>
         <assert-string-value>1 2 2 2 3 2</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-7">
      <description> A simple sorting of integers(#2). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>for $i in (1, 3, 2) order by $i empty INVALID return ($i, 2)</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-8">
      <description> Sorting only involving a let-binding, no for-clause. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>let $i := (1, 3, 2) order by $i return $i</test>
      <result>
         <any-of>
            <assert-string-value>1 3 2</assert-string-value>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-9">
      <description> Sorting of 4 6 5. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>let $i := (1, 3, 2), $b := (4, 6, 5) order by $b return $b</test>
      <result>
         <any-of>
            <assert-string-value>4 6 5</assert-string-value>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-10">
      <description>Cardinality error in the order spec. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <modified by="Benjamin Nguyen" on="2010-10-18" change="resolve bug 10651 cardinality error in the order spec"/>
      <test>for $a in (1, 4, 2) let $i := (1, $a, 2) order by $i return $i</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-11">
      <description> A sort where the for-binding is only used as a sort key. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>for $a in (1, 4, 2) let $i := (1, 3, 2) order by $a return $i</test>
      <result>
         <assert-string-value>1 3 2 1 3 2 1 3 2</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-12">
      <description> A sort with an unused for-binding. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>for $a in (3, 2, 1), $b in (6, 5, 4) order by $a return $a</test>
      <result>
         <assert-string-value>1 1 1 2 2 2 3 3 3</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-13">
      <description> A sort with a for-binding whose only purpose is sorting. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>for $a in (3, 2, 1), $b in (6, 5, 4) stable order by $b return $a</test>
      <result>
         <assert-string-value>3 2 1 3 2 1 3 2 1</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-14">
      <description> Apply fn:avg() to the return value of a for clause with sorting. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare variable $e := <e> <a>3</a> <a>2</a> <a>1</a> </e>; <result> { avg(for $i in $e/a order by $i return $i) } </result>]]></test>
      <result>
         <assert-xml><![CDATA[<result>2</result>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-15">
      <description> Ensure that cardinality checks are effective on the return value of a . </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare variable $e := <e> <a>3</a> <a>2</a> <a>1</a> </e>; exactly-one(for $i in $e/a order by $i return $i)]]></test>
      <result>
         <error code="FORG0005"/>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-16">
      <description> Sort booleans. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>for $i in (false(), true(), true(), false(), true(), false()) order by $i return $i</test>
      <result>
         <assert-string-value>false false false true true true</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-17">
      <description> Extract the effective boolean value from a order by expression. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>boolean((for $i in (false(), true(), true(), false(), true(), false()) order by $i return $i)[1])</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-18">
      <description> Sort a single atomic value. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>(for $i in current-time() order by $i return $i) eq current-time()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-19">
      <description> Multiple atomic values as sort key trigger a type error. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>let $i := (1, 3, 2) order by $i return $i</test>
      <result>
         <any-of>
            <assert-string-value>1 3 2</assert-string-value>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-20">
      <description> Multiple nodes as sort key trigger a type error. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $i := (<e>1</e>, <e>3</e>, <e>2</e>) order by $i return $i]]></test>
      <result>
         <any-of>
            <assert-xml><![CDATA[<e>1</e><e>3</e><e>2</e>]]></assert-xml>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-21">
      <description> A sort key that doesn't affect the result. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $i := (<e>1</e>, <e>3</e>, <e>2</e>) order by 1 return $i]]></test>
      <result>
         <assert-xml><![CDATA[<e>1</e><e>3</e><e>2</e>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-22">
      <description> order by preceded by an unused let binding. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>for $i in (1, 3, 2) let $c := 3 stable order by () return $i</test>
      <result>
         <any-of>
            <assert-string-value>1 3 2</assert-string-value>
            <assert-string-value>1 2 3</assert-string-value>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-23">
      <description> Multiple atomic values as sort key trigger a type error(stable sort). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>let $i := (1, 3, 2) stable order by $i return $i</test>
      <result>
         <any-of>
            <assert-string-value>1 3 2</assert-string-value>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-24">
      <description> Multiple nodes as sort key trigger a type error(stable sort). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $i := (<e>1</e>, <e>3</e>, <e>2</e>) stable order by $i return $i]]></test>
      <result>
         <any-of>
            <assert-xml><![CDATA[<e>1</e><e>3</e><e>2</e>]]></assert-xml>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-25">
      <description> xs:hexBinary values cannot be compared(stable sort). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>let $i := (xs:hexBinary("FF"), xs:hexBinary("FF")) stable order by $i return $i</test>
      <result>
         <any-of>
            <assert-string-value>FF FF</assert-string-value>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-26">
      <description> xs:hexBinary values cannot be compared. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>let $i := (xs:hexBinary("FF"), xs:hexBinary("FF")) order by $i return $i</test>
      <result>
         <any-of>
            <assert-string-value>FF FF</assert-string-value>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-27">
      <description> xs:time and xs:date values cannot be compared(stable sort). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>let $i := (xs:date("2001-02-03"), xs:time("01:02:03Z")) stable order by $i return $i</test>
      <result>
         <any-of>
            <assert-string-value>2001-02-03 01:02:03Z</assert-string-value>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-28">
      <description> xs:time and xs:date values cannot be compared. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>let $i := (xs:date("2001-02-03"), xs:time("01:02:03Z")) order by $i return $i</test>
      <result>
         <any-of>
            <assert-string-value>2001-02-03 01:02:03Z</assert-string-value>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-29">
      <description> An empty order by and an empty return clause, with node constructor. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<r> { for $i in attribute name {()} order by () return () } </r>]]></test>
      <result>
         <any-of>
            <assert-xml><![CDATA[<r/>]]></assert-xml>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-30">
      <description> An empty order by and an empty return clause, with atomic value. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<r> { for $i in 1 order by () return () } </r>]]></test>
      <result>
         <any-of>
            <assert-xml><![CDATA[<r/>]]></assert-xml>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-31">
      <description> A type error in order by, but without for clause(unstable sort). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>let $i := (1, 2, 3) order by $i return $i</test>
      <result>
         <any-of>
            <assert-string-value>1 2 3</assert-string-value>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-32">
      <description> A type error in order by, but without for clause(stable sort). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>let $i := (1, 2, 3) stable order by $i return $i</test>
      <result>
         <any-of>
            <assert-string-value>1 2 3</assert-string-value>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-33">
      <description> Uncomparable values in order by, but without for clause(stable sort). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>let $i := (xs:hexBinary("FF"), xs:hexBinary("FF")) stable order by $i[1] return $i</test>
      <result>
         <any-of>
            <assert-string-value>FF FF</assert-string-value>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-34">
      <description> Uncomparable values in order by, but without for clause(stable sort). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>let $i := (xs:hexBinary("FF"), xs:hexBinary("FF")) order by $i[1] return $i</test>
      <result>
         <any-of>
            <assert-string-value>FF FF</assert-string-value>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-35">
      <description> Uncomparable values in order by, but without for clause(stable sort). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>let $i := (xs:hexBinary("FF"), xs:time("03:03:03Z"), xs:hexBinary("FF")) stable order by $i[1] return $i</test>
      <result>
         <any-of>
            <assert-string-value>FF 03:03:03Z FF</assert-string-value>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-36">
      <description> Uncomparable values in order by, but without for clause(stable sort). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>let $i := (xs:hexBinary("FF"), xs:time("03:03:03Z"), xs:hexBinary("FF")) order by $i[1] return $i</test>
      <result>
         <any-of>
            <assert-string-value>FF 03:03:03Z FF</assert-string-value>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-37">
      <description> Unused order by. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>for $i in (1, 3, 2) stable order by () return $i</test>
      <result>
         <any-of>
            <assert-string-value>1 3 2</assert-string-value>
            <assert-string-value>1 2 3</assert-string-value>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-38">
      <description> 'order by' combined with reverse(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>for $i in (1, 2, 3) stable order by 1 return reverse(($i, "FO"))</test>
      <result>
         <assert-string-value>FO 1 FO 2 FO 3</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-39">
      <description> Contains a type error, but the result can be computed without evaluation. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>for $a in (1, 4, 2) let $i := (1, 3, 2) order by $i return 1</test>
      <result>
         <any-of>
            <assert-string-value>1 1 1</assert-string-value>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-40">
      <description>Updated by Benjamin Nguyen on 2010-10-18T:13:07:50+02:00 to resolve bug 10651  Overshadowing variable that leads to type error. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>for $a in (3, 2, 1) let $a := ($a, 1), $b := (2, 1), $c := (2, 1), $d:= (2, 1) order by $a return $a</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-41">
      <description> order by, with many let bindings inbetween. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>for $a in (3, 2, 1) let $b := (2, 1), $c := (2, 1), $d := (2, 1), $e := (2, 1) order by $a return $a</test>
      <result>
         <assert-string-value>1 2 3</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-42">
      <description> Apply fn:string() on a for clause that only produces on item, and that cannot easily constant propagate. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <modified by="O'Neil Delpratt" on="2013-01-02" change="Change assertion type. Bug 20233."/>
      <test>string(for $i in current-date() order by $i return $i)</test>
      <result>
         <assert-count>1</assert-count>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-43">
      <description> Extract the effective boolean value from the result of order by. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[if(for $i in <e> <a id="3"/> <b id="2"/> <c id="1"/> </e>/* order by xs:integer($i/@id) return $i) then 4 else 9]]></test>
      <result>
         <assert-eq>4</assert-eq>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-44">
      <description> Sort, with a where and let clause in between. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>for $a in (2, 1) let $b := 1 where true() order by $a return $a</test>
      <result>
         <assert-string-value>1 2</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-45">
      <description> Short key-for involved in sorting. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>for $a in (3, 2, 1), $b in (6) stable order by $b return $a</test>
      <result>
         <assert-string-value>3 2 1</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-46">
      <description> Sort special floating point values. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>let $numbers := (1, 2, 1.3, 3e3, xs:double("NaN"), xs:double("-INF"), xs:double("INF")) return (for $i in $numbers order by $i empty least return $i, "SEP", for $i in $numbers order by $i empty greatest return $i)</test>
      <result>
         <assert-string-value>NaN -INF 1 1.3 2 3000 INF SEP -INF 1 1.3 2 3000 INF NaN</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-47">
      <description> Sort special floating point values(stable sort). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>let $numbers := (1, 2, 1.3, 3e3, xs:double("NaN"), xs:double("-INF"), xs:double("INF")) return (for $i in $numbers stable order by $i empty least return $i, "SEP", for $i in $numbers order by $i empty greatest return $i)</test>
      <result>
         <assert-string-value>NaN -INF 1 1.3 2 3000 INF SEP -INF 1 1.3 2 3000 INF NaN</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-48">
      <description> Sort special floating point values. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $numbers := (<e>NaN</e>, <e/>, <e/>, <e>NaN</e>, <e>NaN</e>, <e>INF</e>, <e>NaN</e>, <e/>, <e>3</e>, comment{"3"}) return (for $i in $numbers order by xs:double($i/text()) empty least return xs:double($i/text()), "SEP", for $i in $numbers order by xs:double($i/text()) empty greatest return xs:double($i/text()))]]></test>
      <result>
         <assert-string-value>NaN NaN NaN NaN 3 INF SEP 3 INF NaN NaN NaN NaN</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-OrderbyExprWithout-49">
      <description> Sort special floating point values(stable sort). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $numbers := (<e>NaN</e>, <e/>, <e/>, <e>NaN</e>, <e>NaN</e>, <e>INF</e>, <e>NaN</e>, <e/>, <e>3</e>, comment{"3"}) return (for $i in $numbers stable order by xs:double($i/text()) empty least return xs:double($i/text()), "SEP", for $i in $numbers stable order by xs:double($i/text()) empty greatest return xs:double($i/text()))]]></test>
      <result>
         <assert-string-value>NaN NaN NaN NaN 3 INF SEP 3 INF NaN NaN NaN NaN</assert-string-value>
      </result>
   </test-case>
</test-set>