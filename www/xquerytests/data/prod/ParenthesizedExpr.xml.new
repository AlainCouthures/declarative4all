<?xml version="1.0" encoding="UTF-8"?>
<test-set name="prod-ParenthesizedExpr" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">
  <description>Tests for the ParenthesizedExpr production</description>
  <link document="http://www.w3.org/TR/xquery-30/" idref="doc-xquery30-ParenthesizedExpr" type="spec"/>
  <link document="XQuery" idref="id-paren-expressions" section-number="3.1.3" type="spec"/>
  <environment name="Tree1Child">
    <source file="AxisStep/Tree1Child.xml" role=".">
      <description>A &quot;compass&quot; tree that has just one child, of an abnormal name, off the center node.
            One attribute each on west and center.</description>
      <created by="David Marston" on="2003-03-25"/>
    </source>
  </environment>
  <environment name="DupNode">
    <source file="CompAttrConstructor/DupNode.xml" role=".">
      <description>Simple document with all node kinds</description>
      <created by="Andreas Behm" on="2005-04-26"/>
    </source>
  </environment>
  <test-case name="Parenexpr-1">
    <description> Arithmetic operations </description>
    <created by="Andreas Behm" on="2005-09-22"/>
    <test>(1 + 2) * 3</test>
    <result-string/>
    <result>
      <assert-eq>9</assert-eq>
    </result>
  </test-case>
  <test-case name="Parenexpr-2">
    <description> Arithmetic operations </description>
    <created by="Andreas Behm" on="2005-09-22"/>
    <test>1 + (2 * 3)</test>
    <result-string/>
    <result>
      <assert-eq>7</assert-eq>
    </result>
  </test-case>
  <test-case name="Parenexpr-3">
    <description> Arithmetic operations </description>
    <created by="Andreas Behm" on="2005-09-22"/>
    <test>-(2 + 5)</test>
    <result-string/>
    <result>
      <assert-eq>-7</assert-eq>
    </result>
  </test-case>
  <test-case name="Parenexpr-4">
    <description> Arithmetic operations </description>
    <created by="Andreas Behm" on="2005-09-22"/>
    <test>(-2) + 5</test>
    <result-string/>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="Parenexpr-5">
    <description> Arithmetic operations </description>
    <created by="Andreas Behm" on="2005-09-22"/>
    <test>2 + (4 idiv 2)</test>
    <result-string/>
    <result>
      <assert-eq>4</assert-eq>
    </result>
  </test-case>
  <test-case name="Parenexpr-6">
    <description> Arithmetic operations </description>
    <created by="Andreas Behm" on="2005-09-22"/>
    <test>(2 + 4) idiv 2</test>
    <result-string/>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="Parenexpr-7">
    <description> Arithmetic operations </description>
    <created by="Andreas Behm" on="2005-09-22"/>
    <test>2 * (5 mod 3)</test>
    <result-string/>
    <result>
      <assert-eq>4</assert-eq>
    </result>
  </test-case>
  <test-case name="Parenexpr-8">
    <description> Arithmetic operations </description>
    <created by="Andreas Behm" on="2005-09-22"/>
    <test>(2 * 5) mod 3</test>
    <result-string/>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="Parenexpr-9">
    <description> Logical expressions </description>
    <created by="Andreas Behm" on="2005-09-22"/>
    <test>(fn:true() or fn:true()) and fn:false()</test>
    <result-string>xs:boolean('false')</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="Parenexpr-10">
    <description> Logical expressions </description>
    <created by="Andreas Behm" on="2005-09-22"/>
    <test>fn:true() or (fn:true() and fn:false())</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="Parenexpr-11">
    <description> FLWOR expression </description>
    <created by="Andreas Behm" on="2005-09-22"/>
    <dependency type="spec" value="XQ10+"/>
    <test>(for $x in (1) where (fn:true()) order by ($x) return ($x))</test>
    <result-string/>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="Parenexpr-12">
    <description> if expression </description>
    <created by="Andreas Behm" on="2005-09-22"/>
    <test>for $x in (1,2) return (if (($x eq 1)) then ($x) else ($x + 1))</test>
    <result-string>xs:string('1 3')</result-string>
    <result>
      <assert-string-value>1 3</assert-string-value>
    </result>
  </test-case>
  <test-case name="Parenexpr-13">
    <description> Literal </description>
    <created by="Andreas Behm" on="2005-09-22"/>
    <test>(1)</test>
    <result-string/>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="Parenexpr-14">
    <description> Sequence </description>
    <created by="Andreas Behm" on="2005-09-22"/>
    <test>(1, (2, (3, 4)), (5))</test>
    <result-string>xs:string('1 2 3 4 5')</result-string>
    <result>
      <assert-string-value>1 2 3 4 5</assert-string-value>
    </result>
  </test-case>
  <test-case name="Parenexpr-15">
    <description> union and except </description>
    <created by="Andreas Behm" on="2005-09-22"/>
    <environment ref="DupNode"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[<elem>{//node() | (//node() except //comment())}</elem>]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<elem><root><child1><a>text</a><!--comment--><?pi content?></child1><child2><a>text</a><!--comment--><?pi content?></child2></root><child1><a>text</a><!--comment--><?pi content?></child1><a>text</a>text<!--comment--><?pi content?><child2><a>text</a><!--comment--><?pi content?></child2><a>text</a>text<!--comment--><?pi content?></elem>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="Parenexpr-16">
    <description> union and except </description>
    <created by="Andreas Behm" on="2005-09-22"/>
    <environment ref="DupNode"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[<elem>{(//node() | //node()) except //comment()}</elem>]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<elem><root><child1><a>text</a><!--comment--><?pi content?></child1><child2><a>text</a><!--comment--><?pi content?></child2></root><child1><a>text</a><!--comment--><?pi content?></child1><a>text</a>text<?pi content?><child2><a>text</a><!--comment--><?pi content?></child2><a>text</a>text<?pi content?></elem>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="Parenexpr-17">
    <description> Constructor </description>
    <created by="Andreas Behm" on="2005-09-22"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(<elem/>)]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<elem/>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="Parenexpr-18">
    <description> Constructor </description>
    <created by="Andreas Behm" on="2005-09-22"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[<elem attr="{(1)}">{(<child/>),(<child/>)}</elem>]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<elem attr="1"><child/><child/></elem>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="Parenexpr-19">
    <description> Input context </description>
    <created by="Andreas Behm" on="2005-09-22"/>
    <environment ref="Tree1Child"/>
    <test>(.)</test>
    <result-string/>
    <result>
      <assert>name($result/*) = &quot;far-north&quot;</assert>
    </result>
  </test-case>
  <test-case name="Parenexpr-20">
    <description> Path expression </description>
    <created by="Andreas Behm" on="2005-09-22"/>
    <environment ref="Tree1Child"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[<elem>{(//(north)/(/)//(@mark)[(1)]/(.)/(..))}</elem>]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<elem><west mark="w0"/><center mark="c0"><the1child/></center><east mark="e0">Text in east</east></elem>]]>
      </assert-xml>
    </result>
  </test-case>
</test-set>