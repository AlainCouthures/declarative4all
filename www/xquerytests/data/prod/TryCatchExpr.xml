<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="prod-TryCatchExpr" covers="try-catch">
   <description>Tests for the prod-TryCatchExpr operator</description>
   <link type="spec" document="http://www.w3.org/TR/xpath-functions-30/"
         idref="prod-TryCatchExpr"/>
   <link type="spec" document="XQuery 1.1" section-number="3.12" idref="id-try-catch"/>
   
   <dependency type="spec" value="XQ30+"/>

   <environment name="err">
     <namespace prefix="err" uri="http://www.w3.org/2005/xqt-errors"/>
   </environment>
  
   <test-case name="try-001">
      <description/>
      <created by="Michael Kay" on="2008-11-25"/>
      <modified by="O'Neil Delpratt" on="2011-10-12" change="Removed local dependency. See bug# 14438"/>
      <test><![CDATA[try { doc('rubbish.xml') } catch * {"ok"}]]></test>
      <result>
         <assert-string-value>ok</assert-string-value>
      </result>
   </test-case>

   <test-case name="try-002">
      <description/>
      <created by="Michael Kay" on="2008-11-25"/>
      <test><![CDATA[
        declare namespace err = "http://www.w3.org/2005/xqt-errors";
        try { doc('rubbish.xml') } catch err:FODC0001 | err:FODC0002 | err:FODC0005 {"ok"}
      ]]></test>
      <result>
         <assert-string-value>ok</assert-string-value>
      </result>
   </test-case>

   <test-case name="try-003">
      <description/>
      <created by="Michael Kay" on="2008-11-25"/>
      <modified by="O'Neil Delpratt" on="2011-10-12" change="Removed local dependency. See bug# 14438"/>
      <test><![CDATA[try { doc('rubbish.xml') } catch *:FODC0001 | *:FODC0002 | *:FODC0005 {"ok"}]]></test>
      <result>
         <assert-string-value>ok</assert-string-value>
      </result>
   </test-case>

   <test-case name="try-004">
      <description/>
      <created by="Michael Kay" on="2008-11-25"/>
      <modified by="O'Neil Delpratt" on="2011-10-12" change="Removed local dependency. See bug# 14438"/>
      <environment ref="err"/>  <test><![CDATA[
        try { doc('rubbish.xml') } 
        catch err:FODC0001 {<caught-error code="FODC0001"/>} 
        catch err:FODC0002 {<caught-error code="FODC0002"/>} 
        catch err:FODC0005 {<caught-error code="FODC0005"/>} 
        catch err:* {<caught-error code="other"/>}
      ]]></test>
      <result>
         <assert-xml><![CDATA[<caught-error code="FODC0002"/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="try-005">
      <description>test try/catch as an ExprSingle </description>
      <created by="Michael Kay" on="2008-11-25"/>
      <modified by="O'Neil Delpratt" on="2011-10-12" change="Removed local dependency. See bug# 14438"/>
      <test><![CDATA[<out>{ try { doc('rubbish.xml') } catch * {<caught-error/>}, try { doc('rubbish.xml') } catch * {<caught-another/>} }</out>]]></test>
      <result>
         <assert-xml><![CDATA[<out><caught-error/><caught-another/></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="try-006">
      <description>try/catch doesn't catch error evaluating global variable </description>
      <created by="Michael Kay" on="2008-11-25"/>
      <test><![CDATA[
        declare variable $doc := doc('rubbish.xml'); 
        try { $doc } catch * {<caught-error/>}
       ]]></test>
      <result>
         <error code="FODC0002"/>
      </result>
   </test-case>

   <test-case name="try-007">
      <description>doesn't catch error evaluating local variable </description>
      <created by="Michael Kay" on="2008-11-25"/>
      <modified by="O'Neil Delpratt" on="2011-10-12" change="Removed local dependency. See bug# 14438"/>
      <test><![CDATA[
        let $doc := doc('rubbish.xml') 
        return try { $doc } catch * {<caught-error/>}]]></test>
      <result>
         <error code="FODC0002"/>
      </result>
   </test-case>

   <test-case name="try-008">
      <description>does catch error evaluating function call </description>
      <created by="Michael Kay" on="2008-11-25"/>
      <modified by="O'Neil Delpratt" on="2011-10-12" change="Removed local dependency. See bug# 14438"/>
      <test><![CDATA[
        declare function local:f() { doc('rubbish.xml') }; 
        try { local:f() } catch * {"ok"}
      ]]></test>
      <result>
         <assert-string-value>ok</assert-string-value>
      </result>
   </test-case>

   <test-case name="try-009">
      <description>does catch error evaluating function call </description>
      <created by="Michael Kay" on="2008-11-25"/>
      <modified by="O'Neil Delpratt" on="2011-10-12" change="Removed local dependency. See bug# 14438"/>
      <environment ref="err"/>  <test><![CDATA[
        declare function local:f($d as xs:integer) { 10 div $d }; 
        try { local:f(0) } catch err:FOAR0001 {"ok"}
      ]]></test>
      <result>
         <assert-string-value>ok</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="try-010">
      <description>Use err:code local variable, implicitly declared</description>
      <created by="Michael Kay" on="2011-12-23"/>
      <environment ref="err"/>  <test><![CDATA[
        declare function local:f($d as xs:integer) { 10 div $d };
        try { local:f(0) } catch * {local-name-from-QName($err:code)}
      ]]></test>
      <result>
         <assert-string-value>FOAR0001</assert-string-value>
      </result>
   </test-case>

  <test-case name="try-011">
    <description>Use err:code local variable in a nested tryCatch. The cast as expr should throw a dynamic error</description>
    <created by="O'Neil Delpratt" on="2012-03-02"/>
    <environment ref="err"/><test><![CDATA[
        declare function local:f($d as xs:integer) { 10 div $d };
        declare variable $t as xs:string := "text";
        try { local:f(0) } catch * { try { local:f($t cast as xs:integer) } catch * {local-name-from-QName($err:code)} }
      ]]></test>
    <result>
      <assert-string-value>FORG0001</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-012">
    <description>Use err:description local variable, implicitly declared</description>
    <created by="O'Neil Delpratt" on="2012-03-02"/>
    <environment ref="err"/><test><![CDATA[
        declare function local:f($d as xs:integer) { 10 div $d };
        try { local:f(0) } catch * {$err:description}
      ]]></test>
    <result>
      <any-of>
        <assert-string-value>Integer division by zero</assert-string-value>
        <assert-type>xs:string</assert-type>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="try-013">
    <description>Use err:value, err:line-number and err:column-number local variable, implicitly declared</description>
    <created by="O'Neil Delpratt" on="2012-03-02"/>
    <environment ref="err"/><test><![CDATA[
        declare function local:f($d as xs:integer) { 10 div $d };
        try { local:f(0) } catch * {$err:column-number, $err:line-number, $err:line-number}
      ]]></test>
    <result>
      <assert-type>xs:integer*</assert-type>
    </result>
  </test-case>
  
  <test-case name="try-014">
    <description>Integer literal out of range is a dynamic error</description>
    <created by="Michael Kay" on="2013-04-16"/>
    <environment ref="err"/>
    <test>try { 9999999999999999999999999999999999999999999999999999999999999999999999
                idiv
                9999999999999999999999999999999999999999999999999999999999999999999999 }
        catch err:FOAR0002 {1}
    </test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  
  <test-case name="try-015">
    <description>Bad date is a dynamic error</description>
    <created by="Michael Kay" on="2013-04-16"/>
    <environment ref="err"/>
    <test>try { xs:date('2013-02-29') }
          catch err:FORG0001 {true()}
    </test>
    <result>
      <assert-true/>
    </result>
  </test-case>
  
  <test-case name="try-016">
    <description>No context item is a dynamic error</description>
    <created by="Michael Kay" on="2013-04-16"/>
    <environment ref="err"/>
    <test>
      declare function local:f() { .+3 };
      try {local:f()} catch err:XPDY0002 {true()}
    </test>
    <result>
      <assert-true/>
    </result>
  </test-case>
  
  <test-case name="try-017">
    <description>No context item is a dynamic error (but no context node is a type error...)</description>
    <created by="Michael Kay" on="2013-04-16"/>
    <environment ref="err"/>
    <test>
      declare function local:f() { a };
      try {local:f()} catch err:XPDY0002 {true()}
    </test>
    <result>
      <any-of>
      	<assert-true/>
      	<error code="XPTY0004"/>
      </any-of>
    </result>
  </test-case>

  <test-case name="no-try-catch-1">
    <description>Without try catch a division by 0 raises a dynamic error.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    
    <test>1 div 0</test>
    <result>
      <error code="FOAR0001"/>
    </result>
  </test-case>
  
  <test-case name="no-try-catch-2">
    <description>Without try catch an undefined variable raises a static error.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    
    <test>$x</test>
    <result>
      <error code="XPST0008"/>
    </result>
  </test-case>
  
  <test-case name="no-try-catch-3">
    <description>Without try catch a static type mismatch raises a type error.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>

    <test>let $i as xs:string := 1 return $i</test>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  
  <test-case name="try-catch-dynamic-error-1">
    <description>A division by zero (dynamic error) is caught.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    
    <test>try { 1 div 0 } catch * { "Division by zero" }</test>
    <result>
      <assert-eq>"Division by zero"</assert-eq>
    </result>
  </test-case>
  
  <test-case name="try-catch-dynamic-error-2">
    <description>A division by zero (dynamic error) is caught when the error is specified.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { 1 div 0 } catch err:FOAR0001 { "Division by zero" }</test>
    <result>
      <assert-eq>"Division by zero"</assert-eq>
    </result>
  </test-case>
  
  <test-case name="try-catch-dynamic-error-3">
    <description>A division by zero (dynamic error) is caught when the error namespace is specified.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { 1 div 0 } catch err:* { "Division by zero" }</test>
    <result>
      <assert-eq>"Division by zero"</assert-eq>
    </result>
  </test-case>
  
  <test-case name="try-catch-dynamic-error-4">
    <description>A division by zero (dynamic error) is caught when the error local name is specified.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    
    <test>try { 1 div 0 } catch *:FOAR0001 { "Division by zero" }</test>
    <result>
      <assert-eq>"Division by zero"</assert-eq>
    </result>
  </test-case>
  
  <test-case name="try-catch-static-error-1">
    <description>An undefined variable (static error) is not caught.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    
    <test>try { $x } catch * { "Undefined variable" }</test>
    <result>
      <error code="XPST0008"/>
    </result>
  </test-case>
  
  <test-case name="try-catch-static-error-2">
    <description>An undefined variable (static error) is not caught.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { $x } catch err:XPST0008 { "Undefined variable" }</test>
    <result>
      <error code="XPST0008"/>
    </result>
  </test-case>
  
  <test-case name="try-catch-static-error-3">
    <description>An undefined variable (static error) is not caught.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { $x } catch err:* { "Undefined variable" }</test>
    <result>
      <error code="XPST0008"/>
    </result>
  </test-case>
  
  <test-case name="try-catch-static-error-4">
    <description>An undefined variable (static error) is not caught.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    
    <test>try { $x } catch *:XPST0008 { "Undefined variable" }</test>
    <result>
      <error code="XPST0008"/>
    </result>
  </test-case>
  

  <test-case name="try-catch-type-error-1">
    <description>A static type mismatch (type error) is caught.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <test>try { let $i as xs:string := 1 return $i } catch * { "Type error" }</test>
    <result>
      <any-of>
        <error code="XPTY0004"/>
        <assert-eq>"Type error"</assert-eq>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="try-catch-type-error-2">
    <description>A static type mismatch (type error) is caught.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { let $i as xs:string := 1 return $i } catch err:XPTY0004 { "Type error" }</test>
    <result>
      <any-of>
        <error code="XPTY0004"/>
        <assert-eq>"Type error"</assert-eq>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="try-catch-type-error-3">
    <description>A static type mismatch (type error) is caught.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { let $i as xs:string := 1 return $i } catch err:* { "Type error" }</test>
    <result>
      <any-of>
        <error code="XPTY0004"/>
        <assert-eq>"Type error"</assert-eq>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="try-catch-type-error-4">
    <description>A static type mismatch (type error) is caught.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    
    <test>try { let $i as xs:string := 1 return $i } catch *:XPTY0004 { "Type error" }</test>
    <result>
      <any-of>
        <error code="XPTY0004"/>
        <assert-eq>"Type error"</assert-eq>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="try-catch-dynamic-error-outside-before-1">
    <description>A dynamic error before a try catch expression is not caught.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    
    <test>1 div 0, try { () } catch * { "Division by zero" }</test>
    <result>
      <error code="FOAR0001"/>
    </result>
  </test-case>
  
  <test-case name="try-catch-dynamic-error-outside-before-2">
    <description>A dynamic error before a try catch expression is not caught.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>1 div 0, try { () } catch err:FOAR0001 { "Division by zero" }</test>
    <result>
      <error code="FOAR0001"/>
    </result>
  </test-case>
  
  <test-case name="try-catch-dynamic-error-outside-before-3">
    <description>A dynamic error before a try catch expression is not caught.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>1 div 0, try { () } catch err:* { "Division by zero" }</test>
    <result>
      <error code="FOAR0001"/>
    </result>
  </test-case>
  
  <test-case name="try-catch-dynamic-error-outside-before-4">
    <description>A dynamic error before a try catch expression is not caught.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    
    <test>1 div 0, try { () } catch *:FOAR0001 { "Division by zero" }</test>
    <result>
      <error code="FOAR0001"/>
    </result>
  </test-case>
  
  <test-case name="try-catch-dynamic-error-outside-after-1">
    <description>A dynamic error after a try catch expression is not caught.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    
    <test>try { () } catch * { "Division by zero" }, 1 div 0</test>
    <result>
      <error code="FOAR0001"/>
    </result>
  </test-case>
  
  <test-case name="try-catch-dynamic-error-outside-after-2">
    <description>A dynamic error after a try catch expression is not caught.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { () } catch err:FOAR0001 { "Division by zero" }, 1 div 0</test>
    <result>
      <error code="FOAR0001"/>
    </result>
  </test-case>
  
  <test-case name="try-catch-dynamic-error-outside-after-3">
    <description>A dynamic error after a try catch expression is not caught.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { () } catch err:* { "Division by zero" }, 1 div 0</test>
    <result>
      <error code="FOAR0001"/>
    </result>
  </test-case>
  
  <test-case name="try-catch-dynamic-error-outside-after-4">
    <description>A dynamic error after a try catch expression is not caught.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    
    <test>try { () } catch *:FOAR0001 { "Division by zero" }, 1 div 0</test>
    <result>
      <error code="FOAR0001"/>
    </result>
  </test-case>
  
  <test-case name="try-catch-dynamic-error-outside-1">
    <description>A dynamic error outside a try catch expression is not caught.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <test>1 + (try { "" } catch * { "Invalid argument" })</test>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  
  <test-case name="try-catch-dynamic-error-outside-2">
    <description>A dynamic error outside a try catch expression is not caught.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>1 + (try { "" } catch err:XPTY0004 { "Invalid argument" })</test>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  
  <test-case name="try-catch-dynamic-error-outside-3">
    <description>A dynamic error outside a try catch expression is not caught.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>1 + (try { "" } catch err:* { "Invalid argument" })</test>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  
  <test-case name="try-catch-dynamic-error-outside-4">
    <description>A dynamic error outside a try catch expression is not caught.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    
    <test>1 + (try { "" } catch *:XPTY0004 { "Invalid argument" })</test>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  
  <test-case name="try-catch-dynamic-error-outside-5">
    <description>A dynamic error outside a try catch expression is not caught.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    
    <test>(try { "" } catch * { "Invalid argument" }) + 1</test>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  
  <test-case name="try-catch-dynamic-error-outside-6">
    <description>A dynamic error outside a try catch expression is not caught.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>(try { "" } catch err:FOAR0001 { "Invalid argument" }) + 1</test>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  
  <test-case name="try-catch-dynamic-error-outside-7">
    <description>A dynamic error outside a try catch expression is not caught.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/><test>(try { "" } catch err:* { "Invalid argument" }) + 1</test>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  
  <test-case name="try-catch-dynamic-error-outside-8">
    <description>A dynamic error outside a try catch expression is not caught.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    
    <test>(try { "" } catch *:FOAR0001 { "Invalid argument" }) + 1</test>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  
  <test-case name="try-catch-no-error-1">
    <description>If no error is raised, the result of the try catch expression is the result of the try clause.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    
    <test>try { 0 } catch * { "No error" }</test>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  
  <test-case name="try-catch-no-error-2">
    <description>If no error is raised, the result of the try catch expression is the result of the try clause.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { 0 } catch err:FOAR0001 { "No error" }</test>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  
  <test-case name="try-catch-no-error-3">
    <description>If no error is raised, the result of the try catch expression is the result of the try clause.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { 0 } catch err:* { "No error" }</test>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  
  <test-case name="try-catch-no-error-4">
    <description>If no error is raised, the result of the try catch expression is the result of the try clause.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    
    <test>try { 0 } catch *:FOAR0001 { "No error" }</test>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  
  <test-case name="try-catch-no-error-5">
    <description>If no error is raised, the result of the try catch expression is the result of the try clause.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { 0 } catch err:FOAR0001 { "No error" } catch *:FOAR0001 { "No error "} catch err:* { "No error "}  catch * { "No error "}</test>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  
  <test-case name="try-catch-name-tests-namespace-1">
    <description>URI literals are supported in name tests.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    
    <test>try { 1 div 0 } catch Q{http://www.w3.org/2005/xqt-errors}FOAR0001 { "Division by zero" }</test>
    <result>
      <assert-string-value>Division by zero</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-catch-name-tests-namespace-2">
    <description>URI literals are supported in name tests.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    
    <test>try { 1 div 0 } catch Q{http://www.w3.org/2005/xqt-errors}* { "Division by zero" }</test>
    <result>
      <assert-string-value>Division by zero</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-catch-name-no-matching-catch-clause-1">
    <description>If there is no matching catch clause, the error is forwarded.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { 1 div 0 } catch err:XPST0008 { "Division by zero" }</test>
    <result>
      <error code="FOAR0001"/>
    </result>
  </test-case>
  
  <test-case name="try-catch-name-no-matching-catch-clause-2">
    <description>If there is no matching catch clause, the error is forwarded.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    
    <test>try { 1 div 0 } catch xs:* { "Division by zero" }</test>
    <result>
      <error code="FOAR0001"/>
    </result>
  </test-case>
  
  <test-case name="try-catch-name-no-matching-catch-clause-3">
    <description>If there is no matching catch clause, the error is forwarded.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    
    <test>try { 1 div 0 } catch *:XPST0008 { "Division by zero" }</test>
    <result>
      <error code="FOAR0001"/>
    </result>
  </test-case>
  
  <test-case name="try-catch-name-no-matching-catch-clause-4">
    <description>If there is no matching catch clause, the error is forwarded.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    
    <test>try { 1 div 0 } catch Q{http://www.w3.org/2005/not-xqt-errors}* { "Division by zero" }</test>
    <result>
      <error code="FOAR0001"/>
    </result>
  </test-case>
  
  <test-case name="try-catch-name-no-matching-catch-clause-5">
    <description>If there is no matching catch clause, the error is forwarded.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    
    <test>try { 1 div 0 } catch Q{http://www.w3.org/2005/xqt-errors}XPST0008 { "Division by zero" }</test>
    <result>
      <error code="FOAR0001"/>
    </result>
  </test-case>
  
  <test-case name="try-catch-name-no-matching-catch-clause-6">
    <description>If there is no matching catch clause, the error is forwarded.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { 1 div 0 } catch err:XPST0008 { "Division by zero" } catch xs:* { "Division by zero" } catch *:XPST0008 { "Division by zero" } catch Q{http://www.w3.org/2005/not-xqt-errors}* { "Division by zero" } catch Q{http://www.w3.org/2005/xqt-errors}XPST0008 { "Division by zero" }</test>
    <result>
      <error code="FOAR0001"/>
    </result>
  </test-case>
  
  <test-case name="try-catch-several-name-tests-1">
    <description>A catch clause with one or more NameTests matches any error whose error code matches one of these NameTests.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { 1 div 0 } catch err:XPST0008 | err:FOAR0001 { "Division by zero" }</test>
    <result>
      <assert-string-value>Division by zero</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-catch-several-name-tests-2">
    <description>A catch clause with one or more NameTests matches any error whose error code matches one of these NameTests.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { 1 div 0 } catch err:FOAR0001 | err:XPST0008 { "Division by zero" }</test>
    <result>
      <assert-string-value>Division by zero</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-catch-several-name-tests-3">
    <description>A catch clause with one or more NameTests matches any error whose error code matches one of these NameTests.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { 1 div 0 } catch err:XPTY0004 | err:FOAR0001 | err:XPST0008 { "Division by zero" }</test>
    <result>
      <assert-string-value>Division by zero</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-catch-first-matching-catch-clause-1">
    <description>The first matching catch clause is used.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { 1 div 0 } catch err:FOAR0001 { "Clause 1" } catch err:FOAR0001 { "Clause 2" }</test>
    <result>
      <assert-string-value>Clause 1</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-catch-first-matching-catch-clause-2">
    <description>The first matching catch clause is used.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { 1 div 0 } catch err:XQST008 { "Clause 1" } catch err:FOAR0001 { "Clause 2" }</test>
    <result>
      <assert-string-value>Clause 2</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-catch-first-matching-catch-clause-3">
    <description>The first matching catch clause is used.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { 1 div 0 } catch err:FOAR0001 { "Clause 1" } catch err:XQST008 { "Clause 2" }</test>
    <result>
      <assert-string-value>Clause 1</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-catch-first-matching-catch-clause-4">
    <description>The first matching catch clause is used.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { 1 div 0 } catch err:FOAR0001 { "Clause 1" } catch err:XQST008 { "Clause 2" } catch err:XPTY0004 { "Clause 3" }</test>
    <result>
      <assert-string-value>Clause 1</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-catch-first-matching-catch-clause-5">
    <description>The first matching catch clause is used.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { 1 div 0 } catch err:FOAR0001 { "Clause 1" } catch err:XPTY0004 { "Clause 2" } catch err:XQST008 { "Clause 3" }</test>
    <result>
      <assert-string-value>Clause 1</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-catch-first-matching-catch-clause-6">
    <description>The first matching catch clause is used.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { 1 div 0 } catch err:XPTY0004 { "Clause 1" } catch err:FOAR0001 { "Clause 2" } catch err:XQST008 { "Clause 3" }</test>
    <result>
      <assert-string-value>Clause 2</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-catch-first-matching-catch-clause-7">
    <description>The first matching catch clause is used.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { 1 div 0 } catch err:XPTY0004 { "Clause 1" } catch err:XPST0008 { "Clause 2" } catch err:FOAR0001 { "Clause 3" }</test>
    <result>
      <assert-string-value>Clause 3</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-catch-first-matching-catch-clause-8">
    <description>The first matching catch clause is used.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { 1 div 0 } catch err:* { "Clause 1" } catch xs:* { "Clause 2" }</test>
    <result>
      <assert-string-value>Clause 1</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-catch-first-matching-catch-clause-9">
    <description>The first matching catch clause is used.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { 1 div 0 } catch xs:* { "Clause 1" } catch err:* { "Clause 2" }</test>
    <result>
      <assert-string-value>Clause 2</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-catch-first-matching-catch-clause-10">
    <description>The first matching catch clause is used.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    
    <test>try { 1 div 0 } catch Q{http://www.w3.org/2005/xqt-errors}* { "Clause 1" } catch Q{http://www.w3.org/2001/XMLSchema}* { "Clause 2" }</test>
    <result>
      <assert-string-value>Clause 1</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-catch-first-matching-catch-clause-11">
    <description>The first matching catch clause is used.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    
    <test>try { 1 div 0 } catch Q{http://www.w3.org/2001/XMLSchema}* { "Clause 1" } catch Q{http://www.w3.org/2005/xqt-errors}* { "Clause 2" }</test>
    <result>
      <assert-string-value>Clause 2</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-catch-first-matching-catch-clause-12">
    <description>The first matching catch clause is used.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { 1 div 0 } catch * { "Clause 1" } catch err:FOAR0001 { "Clause 2" }</test>
    <result>
      <assert-string-value>Clause 1</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-catch-err-code-variable-1">
    <description>err:code returns the error code.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { 1 div 0 } catch * { $err:code }</test>
    <result>
      <assert-string-value>err:FOAR0001</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-catch-err-code-variable-2">
    <description>err:code returns the error code.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { 1 div 0 } catch * { fn:prefix-from-QName($err:code) }</test>
    <result>
      <assert-string-value>err</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-catch-err-code-variable-3">
    <description>err:code returns the error code.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { 1 div 0 } catch * { fn:local-name-from-QName($err:code) }</test>
    <result>
      <assert-string-value>FOAR0001</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-catch-err-code-variable-4">
    <description>err:code returns the error code.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { 1 div 0 } catch * { fn:namespace-uri-from-QName($err:code) }</test>
    <result>
      <assert-string-value>http://www.w3.org/2005/xqt-errors</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-catch-err-code-variable-5">
    <description>err:code returns the error code.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0001')) } catch * { $err:code }</test>
    <result>
      <assert-string-value>err:FOER0001</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-catch-err-code-variable-6">
    <description>err:code returns the error code.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0001')) } catch * { fn:prefix-from-QName($err:code) }</test>
    <result>
      <assert-string-value>err</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-catch-err-code-variable-7">
    <description>err:code returns the error code.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0001')) } catch * { fn:local-name-from-QName($err:code) }</test>
    <result>
      <assert-string-value>FOER0001</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-catch-err-code-variable-8">
    <description>err:code returns the error code.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0001')) } catch * { fn:namespace-uri-from-QName($err:code) }</test>
    <result>
      <assert-string-value>http://www.w3.org/2005/xqt-errors</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-catch-err-code-variable-9">
    <description>err:code returns the error code.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { fn:error() } catch * { $err:code }</test>
    <result>
      <assert-string-value>err:FOER0000</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-catch-err-code-variable-10">
    <description>err:code returns the error code.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { fn:error() } catch * { fn:prefix-from-QName($err:code) }</test>
    <result>
      <assert-string-value>err</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-catch-err-code-variable-11">
    <description>err:code returns the error code.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { fn:error() } catch * { fn:local-name-from-QName($err:code) }</test>
    <result>
      <assert-string-value>FOER0000</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-catch-err-code-variable-12">
    <description>err:code returns the error code.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { fn:error() } catch * { fn:namespace-uri-from-QName($err:code) }</test>
    <result>
      <assert-string-value>http://www.w3.org/2005/xqt-errors</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-catch-err-description-variable-1">
    <description>err:description returns a description string or the empty sequence.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { 1 div 0 } catch * { count($err:description) le 1 }</test>
    <result>
      <assert-true/>
    </result>
  </test-case>
  
  <test-case name="try-catch-err-description-variable-2">
    <description>err:code returns a description string or the empty sequence.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { 1 div 0 } catch * { if (($err:description)) then $err:description instance of xs:string else fn:true() }</test>
    <result>
      <assert-true/>
    </result>
  </test-case>
  
  <test-case name="try-catch-err-description-variable-3">
    <description>err:code returns a description string or the empty sequence.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'), "Description") } catch * { $err:description }</test>
    <result>
      <assert-string-value>Description</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-catch-err-value-variable-1">
    <description>err:value returns a sequence of error values.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'), "Description", "Value") } catch * { $err:value }</test>
    <result>
      <assert-string-value>Value</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-catch-err-value-variable-2">
    <description>err:value returns a sequence of error values.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'), "Description", ("Value", 3, &lt;a/>, true())) } catch * { count($err:value) }</test>
    <result>
      <assert-eq>4</assert-eq>
    </result>
  </test-case>
  
  <test-case name="try-catch-err-value-variable-3">
    <description>err:value returns a sequence of error values.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'), "Description", ("Value", 3)) } catch * { $err:value[2] }</test>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  
  <test-case name="try-catch-err-module-variable-1">
    <description>err:module must be defined.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { fn:error() } catch * { let $n := $err:module return true() }</test>
    <result>
      <assert-true/>
    </result>
  </test-case>
  
  <test-case name="try-catch-err-module-variable-2">
    <description>err:module must be defined.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { fn:error() } catch * { count($err:module) }</test>
    <result>
      <any-of>
        <assert-eq>0</assert-eq>
        <assert-eq>1</assert-eq>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="try-catch-err-module-variable-3">
    <description>err:module must be a string if it is not empty.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { fn:error() } catch * { if (count($err:module) eq 1) then $err:module else "" }</test>
    <result>
      <assert-type>xs:string</assert-type>
    </result>
  </test-case>

  <test-case name="try-catch-err-line-number-variable-1">
    <description>err:line-number must be defined.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { fn:error() } catch * { let $n := $err:line-number return true() }</test>
    <result>
      <assert-true/>
    </result>
  </test-case>
  
  <test-case name="try-catch-err-line-number-variable-2">
    <description>err:line-number must be defined.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { fn:error() } catch * { count($err:line-number) }</test>
    <result>
      <any-of>
        <assert-eq>0</assert-eq>
        <assert-eq>1</assert-eq>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="try-catch-err-line-number-variable-3">
    <description>err:line-number must be an integer if it is not empty.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { fn:error() } catch * { if (count($err:line-number) eq 1) then $err:line-number else 0 }</test>
    <result>
      <assert-type>xs:integer</assert-type>
    </result>
  </test-case>
  
  <test-case name="try-catch-err-column-number-variable-1">
    <description>err:column-number must be defined.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { fn:error() } catch * { let $n := $err:column-number return true() }</test>
    <result>
      <assert-true/>
    </result>
  </test-case>
  
  <test-case name="try-catch-err-column-number-variable-2">
    <description>err:column-number must be defined.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { fn:error() } catch * { count($err:column-number) }</test>
    <result>
      <any-of>
        <assert-eq>0</assert-eq>
        <assert-eq>1</assert-eq>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="try-catch-err-column-number-variable-3">
    <description>err:column-number must be an integer if it is not empty.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { fn:error() } catch * { if (count($err:column-number) eq 1) then $err:column-number else 0 }</test>
    <result>
      <assert-type>xs:integer</assert-type>
    </result>
  </test-case>
  
  <test-case name="try-catch-err-other-variable-1">
    <description>err:other must not be defined.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { fn:error() } catch * { $err:other }</test>
    <result>
      <error code="XPST0008"/>
    </result>
  </test-case>
  
  <test-case name="try-catch-err-dynamic-error-in-catch-clause-1">
    <description>A dynamic error raised by the chosen catch clause must be thrown.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    
    <test>try { fn:error() } catch * { fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0001')) }</test>
    <result>
      <error code="FOER0001"/>
    </result>
  </test-case>
  
  <test-case name="try-catch-err-dynamic-error-in-catch-clause-2">
    <description>A dynamic error raised by a non-executed catch clause must be ignored.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { 1 div 0 } catch err:FOER0000 { fn:error() }</test>
    <result>
      <error code="FOAR0001"/>
    </result>
  </test-case>
  
  <test-case name="try-catch-err-dynamic-error-in-catch-clause-3">
    <description>A dynamic error raised by a non-executed catch clause must be ignored.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { 0 } catch err:FOER0000 { fn:error() }</test>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  
  <test-case name="try-catch-err-dynamic-error-in-catch-clause-4">
    <description>A dynamic error raised by a non-executed catch clause must be ignored.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { fn:error() } catch err:FOER0001 { fn:error() } catch err:FOER0000 { 0 }</test>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  
  <test-case name="try-catch-err-dynamic-error-in-catch-clause-5">
    <description>A dynamic error raised by a non-executed catch clause must be ignored.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { fn:error() } catch err:FOER0000 { 0 } catch err:FOER0001 { fn:error() }</test>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  
  <test-case name="try-catch-function-call-1">
    <description>If a function call occurs within a try clause, errors raised by evaluating the corresponding function are caught by the try/catch expression.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { fn:error() } catch err:FOER0000 { 0 }</test>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  
  <test-case name="try-catch-function-call-2">
    <description>If a function call occurs within a try clause, errors raised by evaluating the corresponding function are caught by the try/catch expression.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { fn:one-or-more(()) } catch err:FORG0004 { 0 }</test>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  
  <test-case name="try-catch-function-call-3">
    <description>If a function call occurs within a try clause, errors raised by evaluating the corresponding function are caught by the try/catch expression.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <dependency type="feature" value="higherOrderFunctions" satisfied="true"/>
    <test>try { function() { fn:error() } () } catch err:FOER0000 { 0 }</test>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  
  <test-case name="try-catch-function-call-4">
    <description>If a function call occurs within a try clause, errors raised by evaluating the corresponding function are caught by the try/catch expression.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <dependency type="feature" value="higherOrderFunctions" satisfied="true"/>
    <test>try { function() { 1 div 0 } () } catch err:FOAR0001 { 0 }</test>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  
  <test-case name="try-catch-error-function-with-static-error-code">
    <description>An error raised with fn:error() must be handled as a dynamic error.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { fn:error(xs:QName("err:XPST0008")) } catch err:XPST0008 { 0 }</test>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  
  <test-case name="try-catch-variable-binding-outside-1">
    <description>If a variable reference is used in a try clause, errors raised by binding a value to the variable are not caught unless the binding expression occurs within the try clause.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>let $x as xs:integer := "" return try { $x } catch err:XPTY0004 { 0 }</test>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  
  <test-case name="try-catch-variable-binding-outside-2">
    <description>If a variable reference is used in a try clause, errors raised by binding a value to the variable are not caught unless the binding expression occurs within the try clause.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { let $x as xs:integer := "" return $x } catch err:XPTY0004 { 0 }</test>
    <result>
      <any-of>
        <assert-eq>0</assert-eq>
        <error code="XPTY0004"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="try-catch-variable-binding-outside-3">
    <description>If a variable reference is used in a try clause, errors raised by binding a value to the variable are not caught unless the binding expression occurs within the try clause.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>for $x as xs:integer in (0, 1, "") return try { $x } catch err:XPTY0004 { 0 }</test>
    <result>
      <any-of>
        <assert-eq>0</assert-eq>
        <error code="XPTY0004"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="try-catch-variable-binding-outside-4">
    <description>If a variable reference is used in a try clause, errors raised by binding a value to the variable are not caught unless the binding expression occurs within the try clause.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { for $x as xs:integer in (0, 1, "") return $x } catch err:XPTY0004 { 0 }</test>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  
  <test-case name="try-catch-variable-binding-outside-5">
    <description>If a variable reference is used in a try clause, errors raised by binding a value to the variable are not caught unless the binding expression occurs within the try clause.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>for tumbling window $x as xs:string in (2, 4, 6, 8, 10)
      start $s at $spos previous $sprev next $snext when true() end $e at
      $epos previous $eprev next $enext when true() return try { $x } catch err:XPTY0004 { 0 }</test>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  
  <test-case name="try-catch-variable-binding-outside-6">
    <description>If a variable reference is used in a try clause, errors raised by binding a value to the variable are not caught unless the binding expression occurs within the try clause.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { for tumbling window $x as xs:string in (2, 4, 6, 8, 10)
      start $s at $spos previous $sprev next $snext when true() end $e at
      $epos previous $eprev next $enext when true() return $x } catch err:XPTY0004 { 0 }</test>
    <result>
      <any-of>
	<assert-eq>0</assert-eq>
	<error code="XPTY0004"/>
      </any-of>
    </result>
  </test-case>

  <test-case name="try-catch-optimizations-1">
    <description>If the evaluation of an expression inside a try/catch is rewritten or deferred in this way, it must take its try/catch context with it.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { 1 div 0 } catch * { 0 }, try { 1 div 0 } catch err:FOAR0001 { 1}</test>
    <result>
      <assert-deep-eq>0, 1</assert-deep-eq>
    </result>
  </test-case>
  
  <test-case name="try-catch-optimizations-2">
    <description>If the evaluation of an expression inside a try/catch is rewritten or deferred in this way, it must take its try/catch context with it.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { fn:error() } catch * { 0 }, try { fn:error() } catch err:FOER0000 { 1}</test>
    <result>
      <assert-xml>0 1</assert-xml>
    </result>
  </test-case>
  
  <test-case name="try-catch-optimizations-3">
    <description>Expressions that were written outside the try/catch expression may be evaluated inside the try/catch, but only if they retain their original try/catch behavior.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    
    <test>let $x := 1 div 0 return try { $x } catch * { 0 }</test>
    <result>
      <error code="FOAR0001"/>
    </result>
  </test-case>
  
  <test-case name="try-catch-spec-example-1">
    <description>Example from the specification.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    
    <test>let $x := "" return try {
      $x cast as xs:integer
      }
      catch * {
      0
      }</test>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  
  <test-case name="try-catch-spec-example-2">
    <description>Example from the specification.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>let $x := "" return try {
      $x cast as xs:integer
      }
      catch err:FORG0001 {
      0
      }</test>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  
  <test-case name="try-catch-spec-example-3">
    <description>Example from the specification.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>let $x := "" return try {
      $x cast as xs:integer
      }
      catch err:FORG0001 | err:XPTY0004 {
      0
      }</test>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  
  <test-case name="try-catch-spec-example-4">
    <description>Example from the specification (must parse).</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>
      let $output := (try {
          fn:error(fn:QName('http://www.w3.org/2005/xqt-errors', 'err:FOER0000'))
        }
        catch * {
          $err:code, $err:value, " module: ",
          $err:module, "(", $err:line-number, ",", $err:column-number, ")"
        })
      return true()
    </test>
    <result>
      <assert-true/>
    </result>
  </test-case>
  
  <test-case name="try-catch-spec-example-5">
    <description>Example from the specification.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    
    <test>declare function local:thrice($x as xs:integer) as xs:integer
      {
      3*$x
      };
      
      local:thrice(try { "oops" } catch * { 3 } )
    </test>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  
  <test-case name="try-catch-function-result-type-1">
    <description>Can't catch this error within the function body</description>
    <created by="Michael Kay" on="2012-06-13"/>
    
    <test>declare function local:thrice($x as xs:integer) as xs:integer
      { try { if (current-date() gt xs:date('2000-01-01')) then "three" else 3 } catch * { 3 } };
      local:thrice(3)
    </test>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  
  <test-case name="try-catch-all-dynamic-errors-caught-1">
    <description>XPDY0002 must be caught.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { . } catch err:XPDY0002 { "Context item not set." }</test>
    <result>
      <assert-string-value>Context item not set.</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-catch-all-dynamic-errors-caught-2">
    <description>XPDY0050 must be caught.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { "" treat as element() } catch err:XPDY0050 { "Sequence type mismatch." }</test>
    <result>
      <assert-string-value>Sequence type mismatch.</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-catch-all-dynamic-errors-caught-3">
    <description>XQDY0025 must be caught.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { element  element { attribute a {""}, attribute a {""} } } catch err:XQDY0025 { "Attribute name duplicate." }</test>
    <result>
      <assert-string-value>Attribute name duplicate.</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-catch-all-dynamic-errors-caught-4">
    <description>XQDY0026 must be caught.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { processing-instruction name { "?>" } } catch err:XQDY0026 { "Invalid PI." }</test>
    <result>
      <assert-string-value>Invalid PI.</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-catch-all-dynamic-errors-caught-5">
    <description>XQDY0041 must be caught.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { processing-instruction  { "prefix:name" } {} } catch err:XQDY0041 { "Invalid PI." }</test>
    <result>
      <assert-string-value>Invalid PI.</assert-string-value>
    </result>
  </test-case>

  <test-case name="try-catch-all-dynamic-errors-caught-6">
    <description>XQDY0044 must be caught.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { attribute xmlns {} } catch err:XQDY0044 { "Invalid attribute." }</test>
    <result>
      <assert-string-value>Invalid attribute.</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-catch-all-dynamic-errors-caught-7">
    <description>XQDY0061 must be caught.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <modified by="O'Neil Delpratt" on="2013-05-01" change="Bug fix relating to issue #21720" />
    <environment ref="err"/>
    <test><![CDATA[
      try { validate { document { <a/>, <b/> }} } catch err:XQDY0061 { "Invalid document." }
    ]]></test>
    <result>
      <any-of>
        <assert-string-value>Invalid document.</assert-string-value>
        <error code="XQDY0084"/>
        <error code="XQST0075"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="try-catch-all-dynamic-errors-caught-8">
    <description>XQDY0064 must be caught.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { processing-instruction XML {} } catch err:XQDY0064 { "Invalid PI." }</test>
    <result>
      <assert-string-value>Invalid PI.</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-catch-all-dynamic-errors-caught-9">
    <description>XQDY0072 must be caught.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { comment { "--" } } catch err:XQDY0072 { "Invalid comment." }</test>
    <result>
      <assert-string-value>Invalid comment.</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-catch-all-dynamic-errors-caught-10">
    <description>XQDY0074 must be caught.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { element { "prefix:name" } {} } catch err:XQDY0074 { "Invalid element." }</test>
    <result>
      <assert-string-value>Invalid element.</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-catch-all-dynamic-errors-caught-11">
    <description>XQDY0091 must be caught.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>(try { (attribute xml:id {""})/0 } catch err:XQDY0091 { "Invalid attribute ID." })</test>
    <result>
      <any-of>
        <assert-eq>0</assert-eq>
        <assert-string-value>Invalid attribute ID.</assert-string-value>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="try-catch-all-dynamic-errors-caught-12">
    <description>XQDY0095 must be caught.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { let $x := (1,2)[position() &lt; 3] group by $x return $x } catch err:XPTY0004 { "More than a grouping item." }</test>
    <result>
      <any-of>
        <assert-string-value>More than a grouping item.</assert-string-value>
        <error code="XPTY0004"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="try-catch-all-dynamic-errors-caught-13">
    <description>XQDY0096 must be caught.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <modified by="Michael Kay" on="2012-12-20" 
             change="catch XQDY0074 as well, which is a reasonable error to raise since 'xmlns' is not declared in the static context"/>
    <environment ref="err"/>
    <test>try { element { "xmlns:name" } {} } catch err:XQDY0096 | err:XQDY0074 { "Invalid element." }</test>
    <result>
      <assert-string-value>Invalid element.</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-catch-all-dynamic-errors-caught-13b">
    <description>XQDY0096 must be caught.</description>
    <created by="Michael Kay" on="2012-12-20"/>
    <environment ref="err"/>
    <test>try { element { QName("http://www.w3.org/2000/xmlns/", "xmlns:name") } {} } catch err:XQDY0096 { "Invalid element." }</test>
    <result>
      <assert-string-value>Invalid element.</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-catch-all-dynamic-errors-caught-14">
    <description>XQDY0101 must be caught.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    <environment ref="err"/>
    <test>try { namespace xmlns { "http://www.example.com" } } catch err:XQDY0101 { "Invalid namespace node." }</test>
    <result>
      <assert-string-value>Invalid namespace node.</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-catch-all-dynamic-errors-caught-15">
    <description>FAOR0002 must be caught, even when detectable statically.</description>
    <created by="Michael Kay" on="2012-12-27"/>
    <environment ref="err"/>
    <test>try { 10000000000000000000000000001 - 10000000000000000000000000000 } catch err:FOAR0002 { 1 }</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  
  <test-case name="try-catch-nest-1">
    <description>Try-catch expressions must nest.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    
    <test>try { try { 1 div 0 } catch * { "Division by zero" } } catch * { "Should not be reached." }</test>
    <result>
      <assert-string-value>Division by zero</assert-string-value>
    </result>
  </test-case>
  
  <test-case name="try-catch-nest-2">
    <description>Try-catch expressions must nest.</description>
    <created by="Ghislain Fourny" on="2011-07-28"/>
    
    <test>try { fn:error() } catch * { try { 1 div 0 } catch * { "Division by zero" } }</test>
    <result>
      <assert-string-value>Division by zero</assert-string-value>
    </result>
  </test-case>

  <test-case name="try-catch-fn-error-1" covers="fn-error">
    <description>Try-catch must match fn:error semantics.</description>
    <created by="Ghislain Fourny" on="2012-10-03"/>
    <modified by="Michael Kay" on="2012-10-05" change="use EQName for error code (bug 19281)"/>
    <test>fn:error(fn:QName("http://www.example.com/", "example:EXER3141"))</test>
    <result>
      <error code="Q{http://www.example.com/}EXER3141"/>
    </result>
  </test-case>
  
  <test-case name="try-catch-fn-error-2" covers="fn-error">
    <description>Try-catch must match fn:error semantics.</description>
    <created by="Ghislain Fourny" on="2012-10-03"/>
    
    <test>try { fn:error(fn:QName("http://www.example.com/", "example:EXER3141")) } catch * { 0 }</test>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  
  <test-case name="try-catch-fn-error-3" covers="fn-error">
    <description>Try-catch must match fn:error semantics.</description>
    <created by="Ghislain Fourny" on="2012-10-03"/>
    
    <test>try { fn:error(fn:QName("http://www.example.com/", "example:EXER3141")) } catch Q{http://www.example.com/}EXER3141 { 0 }</test>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>

  <test-case name="try-catch-fn-error-4" covers="fn-error">
    <description>Try-catch must match fn:error semantics.</description>
    <created by="Ghislain Fourny" on="2012-10-03"/>
    
    <test>try { fn:error(fn:QName("http://www.example.com/", "example:EXER3141")) } catch Q{http://www.example.com/}* { 0 }</test>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>

  <test-case name="try-catch-fn-error-5" covers="fn-error">
    <description>Try-catch must match fn:error semantics.</description>
    <created by="Ghislain Fourny" on="2012-10-03"/>
    
    <test>try { fn:error(fn:QName("http://www.example.com/", "example:EXER3141")) } catch *:EXER3141 { 0 }</test>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>

  <test-case name="try-catch-fn-error-6" covers="fn-error">
    <description>Try-catch must match fn:error semantics.</description>
    <created by="Ghislain Fourny" on="2012-10-03"/>
    <modified by="Michael Kay" on="2012-10-05" change="comparator for QName result (bug 19282)"/>
    <environment ref="err"/>
    <test>try { fn:error(fn:QName("http://www.example.com/", "example:EXER3141"), "Description") } catch Q{http://www.example.com/}EXER3141 { $err:code }</test>
    <result>
      <all-of>
        <assert>local-name-from-QName($result) eq 'EXER3141'</assert>
        <assert>namespace-uri-from-QName($result) eq "http://www.example.com/"</assert>
      </all-of>
    </result>
  </test-case>
  
  <test-case name="try-catch-fn-error-7" covers="fn-error">
    <description>Try-catch must match fn:error semantics.</description>
    <created by="Ghislain Fourny" on="2012-10-03"/>
    <environment ref="err"/>
    <test>try { fn:error(fn:QName("http://www.example.com/", "example:EXER3141"), "Description") } catch Q{http://www.example.com/}EXER3141 { namespace-uri-from-QName($err:code) }</test>
    <result>
      <assert-eq>'http://www.example.com/'</assert-eq>
    </result>
  </test-case>
  
  <test-case name="try-catch-fn-error-8" covers="fn-error">
    <description>Try-catch must match fn:error semantics.</description>
    <created by="Ghislain Fourny" on="2012-10-03"/>
    <environment ref="err"/>
    <test>try { fn:error(fn:QName("http://www.example.com/", "example:EXER3141"), "Description") } catch Q{http://www.example.com/}EXER3141 { prefix-from-QName($err:code) }</test>
    <result>
      <assert-eq>'example'</assert-eq>
    </result>
  </test-case>
  
  <test-case name="try-catch-fn-error-9" covers="fn-error">
    <description>Try-catch must match fn:error semantics.</description>
    <created by="Ghislain Fourny" on="2012-10-03"/>
    <environment ref="err"/>
    <test>try { fn:error(fn:QName("http://www.example.com/", "example:EXER3141"), "Description") } catch Q{http://www.example.com/}EXER3141 { local-name-from-QName($err:code) }</test>
    <result>
      <assert-eq>'EXER3141'</assert-eq>
    </result>
  </test-case>
  
  <test-case name="try-catch-fn-error-10" covers="fn-error">
    <description>Try-catch must match fn:error semantics.</description>
    <created by="Ghislain Fourny" on="2012-10-03"/>
    <environment ref="err"/>
    <test>try { fn:error(fn:QName("http://www.example.com/", "example:EXER3141"), "Description") } catch Q{http://www.example.com/}EXER3141 { $err:description }</test>
    <result>
      <assert-eq>'Description'</assert-eq>
    </result>
  </test-case>
  
  <test-case name="try-catch-fn-error-11" covers="fn-error">
    <description>Try-catch must match fn:error semantics.</description>
    <created by="Ghislain Fourny" on="2012-10-03"/>
    <environment ref="err"/>
    <test>try { fn:error(fn:QName("http://www.example.com/", "example:EXER3141"), "Description", (1, 2)) } catch Q{http://www.example.com/}EXER3141 { $err:value[2] }</test>
    <result>
      <assert-eq>2</assert-eq>
    </result>
  </test-case>

  <test-case name="try-catch-fn-error-12" covers="fn-error">
    <description>Try-catch must match any error raised by fn:error.</description>
    <created by="Ghislain Fourny" on="2012-10-03"/>
    <environment ref="err"/>
    <test>try { fn:error(xs:QName("err:XPTY0004")) } catch Q{http://www.w3.org/2005/xqt-errors}XPTY0004 { 0 }</test>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>

  <test-case name="try-catch-fn-error-13" covers="fn-error">
    <description>Try-catch must match any error raised by fn:error.</description>
    <created by="Ghislain Fourny" on="2012-10-03"/>
    <environment ref="err"/>
    <test>try { fn:error(xs:QName("err:XPST0001")) } catch Q{http://www.w3.org/2005/xqt-errors}XPST0001 { 0 }</test>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>

  <test-case name="try-catch-fn-error-14" covers="fn-error">
    <description>Try-catch must match any error raised by fn:error.</description>
    <created by="Ghislain Fourny" on="2012-10-03"/>
    <environment ref="err"/>
    <test>try { fn:error(xs:QName("err:XPDY0002")) } catch Q{http://www.w3.org/2005/xqt-errors}XPDY0002 { 0 }</test>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>

  <test-case name="try-catch-fn-error-15" covers="fn-error">
    <description>Try-catch must match any error raised by fn:error.</description>
    <created by="Ghislain Fourny" on="2012-10-03"/>
    <environment ref="err"/>
    <test>try { fn:error(xs:QName("err:XQTY0105")) } catch Q{http://www.w3.org/2005/xqt-errors}XQTY0105 { 0 }</test>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>

  <test-case name="try-catch-fn-error-16" covers="fn-error">
    <description>Try-catch must match any error raised by fn:error.</description>
    <created by="Ghislain Fourny" on="2012-10-03"/>
    <environment ref="err"/>
    <test>try { fn:error(xs:QName("err:XQST0089")) } catch Q{http://www.w3.org/2005/xqt-errors}XQST0089 { 0 }</test>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>

  <test-case name="try-catch-fn-error-17" covers="fn-error">
    <description>Try-catch must match any error raised by fn:error.</description>
    <created by="Ghislain Fourny" on="2012-10-03"/>
    <environment ref="err"/>
    <test>try { fn:error(xs:QName("err:XQDY0061")) } catch Q{http://www.w3.org/2005/xqt-errors}XQDY0061 { 0 }</test>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>

  <test-case name="try-catch-fn-error-18" covers="fn-error">
    <description>Try-catch must match any error raised by fn:error.</description>
    <created by="Ghislain Fourny" on="2012-10-03"/>
    <environment ref="err"/>
    <test>try { fn:error(xs:QName("err:FOTY0014")) } catch Q{http://www.w3.org/2005/xqt-errors}FOTY0014 { 0 }</test>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>

  <test-case name="try-catch-fn-error-19" covers="fn-error">
    <description>Try-catch must match any error raised by fn:error.</description>
    <created by="Ghislain Fourny" on="2012-10-03"/>
    <environment ref="err"/>
    <test>try { fn:error(xs:QName("err:FORG0001")) } catch Q{http://www.w3.org/2005/xqt-errors}FORG0001 { 0 }</test>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>

  <test-case name="try-catch-fn-error-20" covers="fn-error">
    <description>Try-catch must match any error raised by fn:error.</description>
    <created by="Ghislain Fourny" on="2012-10-03"/>
    <environment ref="err"/>
    <test>try { fn:error(xs:QName("err:FONS0004")) } catch Q{http://www.w3.org/2005/xqt-errors}FONS0004 { 0 }</test>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
</test-set>
