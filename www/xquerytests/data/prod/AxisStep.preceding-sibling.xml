<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog"
          name="prod-AxisStep.preceding-sibling">
   <description>Tests for the AxisStep.preceding-sibling production</description>
   <link type="spec" document="http://www.w3.org/TR/xquery-30/"
         idref="doc-xquery30-AxisStep.preceding-sibling"/>
   <link type="spec" document="XQuery" section-number="3.2.1.1" idref="axes"/>

   <test-case name="preceding-sibling-1">
      <description> Evaluation of the preceding-sibling axis for which the context node is not a node. </description>
      <created by="Carmelo Montanez" on="2005-12-14"/>
      <test>(200)/preceding-sibling::*</test>
      <result>
         <error code="XPTY0019"/>
      </result>
   </test-case>

   <test-case name="preceding-sibling-2">
      <description> Evaluation of the preceding-sibling axis for which the given node does not exists. Uses fn:count to avoid empty file. </description>
      <created by="Carmelo Montanez" on="2005-12-14"/>
      <environment ref="works-mod"/>
      <test>fn:count(/works/employee[1]/preceding-sibling::noSuchNode)</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="preceding-sibling-3">
      <description> Evaluation of the preceding-sibling axis that is part of an "is" expression (return true). </description>
      <created by="Carmelo Montanez" on="2005-12-14"/>
      <environment ref="works-mod"/>
      <test>exactly-one(/works/employee[2]/preceding-sibling::employee) is exactly-one(/works/employee[1])</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="preceding-sibling-4">
      <description> Evaluation of the preceding-sibling axis that is part of an "is" expression (return false). </description>
      <created by="Carmelo Montanez" on="2005-12-14"/>
      <environment ref="works-mod"/>
      <test>exactly-one(/works[1]/employee[2]/preceding-sibling::employee) is exactly-one(/works[1]/employee[2])</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="preceding-sibling-5">
      <description> Evaluation of the preceding-sibling axis that is part of an "node before" expression (return true). </description>
      <created by="Carmelo Montanez" on="2005-12-14"/>
      <environment ref="works-mod"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[exactly-one(/works[1]/employee[2]/preceding-sibling::employee) << exactly-one(/works[1]/employee[2])]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="preceding-sibling-6">
      <description> Evaluation of the preceding-sibling axis that is part of an "node before" expression and both operands are the same (return false). </description>
      <created by="Carmelo Montanez" on="2005-12-14"/>
      <environment ref="works-mod"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[exactly-one(/works[1]/employee[2]/preceding-sibling::employee) << exactly-one(/works[1]/employee[2]/preceding-sibling::employee)]]></test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="preceding-sibling-7">
      <description> Evaluation of the preceding-sibling axis that is part of an "node before" expression both operands are differents (return false). </description>
      <created by="Carmelo Montanez" on="2005-12-14"/>
      <environment ref="works-mod"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[exactly-one(/works[1]/employee[2]/preceding-sibling::employee) << exactly-one(/works[1])]]></test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="preceding-sibling-8">
      <description> Evaluation of the preceding-sibling axis that is part of a "node after" expression (returns true). </description>
      <created by="Carmelo Montanez" on="2005-12-14"/>
      <environment ref="works-mod"/>
      <test>exactly-one(/works[1]/employee[13]) &gt;&gt; exactly-one(/works[1]/employee[12]/preceding-sibling::employee[1])</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="preceding-sibling-9">
      <description> Evaluation of the preceding-sibling axis that is part of an "node after" expression with both operands the same (returns false). </description>
      <created by="Carmelo Montanez" on="2005-12-14"/>
      <environment ref="works-mod"/>
      <test>exactly-one(/works[1]/employee[2]/preceding-sibling::employee) &gt;&gt; exactly-one(/works[1]/employee[2]/preceding-sibling::employee)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="preceding-sibling-10">
      <description> Evaluation of the preceding-sibling axis that is part of an "node after" expression with different operands (returns false). </description>
      <created by="Carmelo Montanez" on="2005-12-14"/>
      <environment ref="works-mod"/>
      <test>exactly-one(/works[1]/employee[13]) &gt;&gt; exactly-one(/works[1]/employee[2]/preceding-sibling::employee)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="preceding-sibling-11">
      <description> Evaluation of the preceding-sibling axis that is part of an "union " operation. Both operands are the same. </description>
      <created by="Carmelo Montanez" on="2005-12-14"/>
      <environment ref="works-mod"/>
      <test>(/works/employee[12]/*/day[2]/preceding-sibling::day) | (/works/employee[12]/*/day[2]/preceding-sibling::day)</test>
      <result>
         <assert-xml><![CDATA[<day>Monday</day>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="preceding-sibling-12">
      <description> Evaluation of the preceding-sibling axis that is part of an "union" operation. Both operands are different </description>
      <created by="Carmelo Montanez" on="2005-12-14"/>
      <environment ref="works-mod"/>
      <test>(/works/employee[12]/*/day[2]/preceding-sibling::day) | (/works/employee[12]/*/day[2])</test>
      <result>
         <assert-xml><![CDATA[<day>Monday</day><day>Tuesday</day>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="preceding-sibling-13">
      <description> Evaluation of the preceding-sibling axis that is part of an "intersect" operation. Both operands are the same. </description>
      <created by="Carmelo Montanez" on="2005-12-14"/>
      <environment ref="works-mod"/>
      <test>(/works[1]/employee[12]/overtime[1]/day[2]/preceding-sibling::day) intersect (/works[1]/employee[12]/overtime[1]/day[2]/preceding-sibling::day)</test>
      <result>
         <assert-xml><![CDATA[<day>Monday</day>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="preceding-sibling-14">
      <description> Evaluation of the preceding-sibling axis that is part of an "except" operation. Both operands are the same. Uses fn:count to avoid empty file </description>
      <created by="Carmelo Montanez" on="2005-12-14"/>
      <environment ref="works-mod"/>
      <test>fn:count((/works[1]/employee[12]/preceding-sibling::employee) except (/works[1]/employee[12]/preceding-sibling::employee))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="preceding-sibling-15">
      <description> Evaluation of the preceding-sibling axis that is part of an "except" operation. Both operands are different. </description>
      <created by="Carmelo Montanez" on="2005-12-14"/>
      <environment ref="works-mod"/>
      <test>(/works[1]/employee[12]/overtime/day) except (/works[1]/employee[12]/overtime/day[2]/preceding-sibling::day)</test>
      <result>
         <assert-xml><![CDATA[<day>Tuesday</day>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="preceding-sibling-16">
      <description> Evaluation of the preceding-sibling axis that is part of a boolean expression ("and" and fn:true(). </description>
      <created by="Carmelo Montanez" on="2005-12-14"/>
      <environment ref="works-mod"/>
      <test>(/works[1]/employee[12]/preceding-sibling::employee) and fn:true()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="preceding-sibling-17">
      <description> Evaluation of the preceding-sibling axis that is part of a boolean expression ("and" and fn:false()). </description>
      <created by="Carmelo Montanez" on="2005-12-14"/>
      <environment ref="works-mod"/>
      <test>(/works[1]/employee[12]/preceding-sibling::employee) and fn:false()</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="preceding-sibling-18">
      <description> Evaluation of the preceding-sibling axis that is part of a boolean expression ("or" and fn:true()). </description>
      <created by="Carmelo Montanez" on="2005-12-14"/>
      <environment ref="works-mod"/>
      <test>(/works[1]/employee[12]/preceding-sibling::employee) or fn:true()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="preceding-sibling-19">
      <description> Evaluation of the preceding-sibling axis that is part of a boolean expression ("or" and fn:false()). </description>
      <created by="Carmelo Montanez" on="2005-12-14"/>
      <environment ref="works-mod"/>
      <test>(/works[1]/employee[12]/preceding-sibling::employee) or fn:false()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="preceding-sibling-20">
      <description> Evaluation of the preceding-sibling axis that used as part of the deep-equal-function. </description>
      <created by="Carmelo Montanez" on="2005-12-14"/>
      <environment ref="works-mod"/>
      <test>fn:deep-equal(/works[1]/employee[12]/preceding-sibling::employee,/works[1]/employee[12]/preceding-sibling::employee)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="preceding-sibling-21">
      <description> Evaluation of the preceding-sibling axis used together with a newly constructed element. Uses fn:count to avoid empty file. </description>
      <created by="Carmelo Montanez" on="2005-12-14"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $var := <anElement>Some Content</anElement> return fn:count($var/preceding-sibling::*)]]></test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="unabbreviatedSyntax-25">
      <description> Evaluate "preceding-sibling::employee[fn:position() = 1]". Selects the previous employee sibling of the context node. </description>
      <created by="Carmelo Montanez" on="2005-07-11"/>
      <environment ref="works-mod"/>
      <test>for $h in (/works/employee[2]) return $h/preceding-sibling::employee[fn:position() = 1]</test>
      <result>
         <assert-xml><![CDATA[<employee name="Jane Doe 1" gender="female">
   <empnum>E1</empnum>
   <pnum>P1</pnum>
   <hours>40</hours>
  </employee>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="K2-preceding-siblingAxis-1">
      <description> Iterate from the root node. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare variable $i := <root> <child> <preceding2/> <child2> <preceding1/> <child3> <leaf/> </child3> <following/> </child2> <following/> </child> <following/> </root>; empty(root($i)/preceding-sibling::node())]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-preceding-siblingAxis-2">
      <description> Iterate from the root node. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare variable $i := <root> <child> <preceding2/> <child2> <preceding1/> <child3> <leaf/> </child3> <following/> </child2> <following/> </child> <following/> </root>; empty(root($i)/preceding::node())]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-preceding-siblingAxis-3">
      <description> Apply fn:count() to the result of axis preceding. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare variable $i := <root> <child> <preceding2/> <child2> <preceding1/> <child3> <leaf/> </child3> <following/> </child2> <following/> </child> <following/> </root>; count(root($i)/preceding::node())]]></test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="K2-preceding-siblingAxis-4">
      <description> Apply fn:count() to the result of axis preceding. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare variable $i := <root> <child> <preceding2/> <child2> <preceding1/> <child3> <leaf/> </child3> <following/> </child2> <following/> </child> <following/> </root>; count(root($i)//leaf/preceding::node())]]></test>
      <result>
         <assert-eq>2</assert-eq>
      </result>
   </test-case>

   <test-case name="K2-preceding-siblingAxis-5">
      <description> Apply fn:count() to the result of axis preceding. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare variable $i := <root> <child> <preceding2/> <child2> <preceding1/> <child3> <leaf/> </child3> <following/> </child2> <following/> </child> <following/> </root>; root($i)//count(preceding-sibling::node())]]></test>
      <result>
         <assert-string-value>0 0 0 1 0 1 0 2 2 1</assert-string-value>
      </result>
   </test-case>

   <test-case name="preceding-sibling-attr">
      <description> Apply the preceding-sibling axis to an attribute node. </description>
      <created by="Michael Dyck" on="2009-03-11"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<foo a='1' b='2' c='3'> <bar>4</bar> <bar>5</bar> <bar>6</bar> </foo>/@c/preceding-sibling::node()]]></test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>
</test-set>