<?xml version="1.0" encoding="UTF-8"?>
<test-set name="prod-VarDecl" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">
  <description>Tests for the VarDecl (variable declaration) production</description>
  <link document="http://www.w3.org/TR/xquery-30/" idref="doc-xquery30-VarDecl" type="spec"/>
  <link document="XQuery" idref="id-variable-declarations" section-number="4.14" type="spec"/>
  <environment name="bib">
    <source file="../docs/bib.xml" role=".">
      <description>Data for the the XML Query XMP use cases</description>
      <created by="XQuery WG" on="2005-02-11"/>
    </source>
  </environment>
  <environment name="bib2">
    <source file="../op/union/bib2.xml" role=".">
      <description>Bibliography example with extra comments and PIs.</description>
      <created by="spec-authors" on="2000-01-01"/>
    </source>
  </environment>
  <dependency type="spec" value="XQ10+"/>
  <test-case name="VarDecl001">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := &quot;&quot; ; $x</test>
    <result-string>xs:string('')</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="VarDecl002">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := '' ; $x</test>
    <result-string>xs:string('')</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="VarDecl003">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := 'a string' ; $x</test>
    <result-string>xs:string('a string')</result-string>
    <result>
      <assert-string-value>a string</assert-string-value>
    </result>
  </test-case>
  <test-case name="VarDecl004">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := &quot;a string&quot; ; $x</test>
    <result-string>xs:string('a string')</result-string>
    <result>
      <assert-string-value>a string</assert-string-value>
    </result>
  </test-case>
  <test-case name="VarDecl005">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := &quot;This is a string, isn't it?&quot; ; $x</test>
    <result-string>xs:string('This is a string, isn't it?')</result-string>
    <result>
      <assert-string-value>This is a string, isn't it?</assert-string-value>
    </result>
  </test-case>
  <test-case name="VarDecl006">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := 'This is a &quot;String&quot;' ; $x</test>
    <result-string>xs:string('This is a &quot;String&quot;')</result-string>
    <result>
      <assert-string-value>This is a &quot;String&quot;</assert-string-value>
    </result>
  </test-case>
  <test-case name="VarDecl007">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := &quot;a &quot;&quot; or a ' delimits a string literal&quot; ; $x</test>
    <result-string>xs:string('a &quot; or a ' delimits a string literal')</result-string>
    <result>
      <assert-string-value>a &quot; or a ' delimits a string literal</assert-string-value>
    </result>
  </test-case>
  <test-case name="VarDecl008">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := 'a &quot; or a '' delimits a string literal' ; $x</test>
    <result-string>xs:string('a &quot; or a ' delimits a string literal')</result-string>
    <result>
      <assert-string-value>a &quot; or a ' delimits a string literal</assert-string-value>
    </result>
  </test-case>
  <test-case name="VarDecl009">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>
      <![CDATA[declare variable $x := '&lt;bold&gt;A sample element.&lt;/bold&gt;' ; $x]]>
    </test>
    <result-string>xs:string('boldA sample element./bold')</result-string>
    <result>
      <assert-string-value>boldA sample element./bold</assert-string-value>
    </result>
  </test-case>
  <test-case name="VarDecl010">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := 0 ; $x</test>
    <result-string/>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="VarDecl011">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := 1 ; $x</test>
    <result-string/>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="VarDecl012">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := -1 ; $x</test>
    <result-string/>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="VarDecl013">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := +1 ; $x</test>
    <result-string/>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="VarDecl014">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := 1.23 ; $x</test>
    <result-string>xs:string('1.23')</result-string>
    <result>
      <assert-string-value>1.23</assert-string-value>
    </result>
  </test-case>
  <test-case name="VarDecl015">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := -1.23 ; $x</test>
    <result-string>xs:string('-1.23')</result-string>
    <result>
      <assert-string-value>-1.23</assert-string-value>
    </result>
  </test-case>
  <test-case name="VarDecl016">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := 1.2e5 ; $x</test>
    <result-string/>
    <result>
      <assert-eq>120000</assert-eq>
    </result>
  </test-case>
  <test-case name="VarDecl017">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := -1.2E5 ; $x</test>
    <result-string/>
    <result>
      <assert-eq>-120000</assert-eq>
    </result>
  </test-case>
  <test-case name="VarDecl018">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := 0.0E0 ; $x</test>
    <result-string/>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="VarDecl019">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := 1e-5 ; $x</test>
    <result-string>xs:string('0.00001')</result-string>
    <result>
      <assert-string-value>0.00001</assert-string-value>
    </result>
  </test-case>
  <test-case name="VarDecl020">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := 9.999999999999999; $x</test>
    <result-string>xs:string('9.999999999999999')</result-string>
    <result>
      <assert-string-value>9.999999999999999</assert-string-value>
    </result>
  </test-case>
  <test-case name="VarDecl021">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := -10000000 ; $x</test>
    <result-string/>
    <result>
      <assert-eq>-10000000</assert-eq>
    </result>
  </test-case>
  <test-case name="VarDecl022">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := 1 to 10 ; $x</test>
    <result-string>xs:string('1 2 3 4 5 6 7 8 9 10')</result-string>
    <result>
      <assert-string-value>1 2 3 4 5 6 7 8 9 10</assert-string-value>
    </result>
  </test-case>
  <test-case name="VarDecl023">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := xs:double('NaN'); $x</test>
    <result-string>xs:string('NaN')</result-string>
    <result>
      <assert-string-value>NaN</assert-string-value>
    </result>
  </test-case>
  <test-case name="VarDecl024">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := xs:double('INF'); $x</test>
    <result-string>xs:string('INF')</result-string>
    <result>
      <assert-string-value>INF</assert-string-value>
    </result>
  </test-case>
  <test-case name="VarDecl025">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := xs:double('-INF'); $x</test>
    <result-string>xs:string('-INF')</result-string>
    <result>
      <assert-string-value>-INF</assert-string-value>
    </result>
  </test-case>
  <test-case name="VarDecl026">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := fn:false() ; $x</test>
    <result-string>xs:boolean('false')</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="VarDecl027">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := false(); $x</test>
    <result-string>xs:boolean('false')</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="VarDecl028">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := fn:true() ; $x</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="VarDecl029">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := true() ; $x</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="VarDecl030">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := true(); $x</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="VarDecl031">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := 2+2 ; $x</test>
    <result-string/>
    <result>
      <assert-eq>4</assert-eq>
    </result>
  </test-case>
  <test-case name="VarDecl032">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := 2*2 ; $x</test>
    <result-string/>
    <result>
      <assert-eq>4</assert-eq>
    </result>
  </test-case>
  <test-case name="VarDecl033">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := 3-2 ; $x</test>
    <result-string/>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="VarDecl034">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := 3 div 2 ; $x</test>
    <result-string>xs:string('1.5')</result-string>
    <result>
      <assert-string-value>1.5</assert-string-value>
    </result>
  </test-case>
  <test-case name="VarDecl035">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := 3 mod 2 ; $x</test>
    <result-string/>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="VarDecl036">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := 3 idiv 2 ; $x</test>
    <result-string/>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="VarDecl037">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := -1.7976931348623157E308 ; $x</test>
    <result-string>xs:string('-1.7976931348623157E308')</result-string>
    <result>
      <assert-string-value>-1.7976931348623157E308</assert-string-value>
    </result>
  </test-case>
  <test-case name="VarDecl038">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := xs:double(&quot;-1.7976931348623157E308&quot;) ; $x</test>
    <result-string>xs:string('-1.7976931348623157E308')</result-string>
    <result>
      <assert-string-value>-1.7976931348623157E308</assert-string-value>
    </result>
  </test-case>
  <test-case name="VarDecl039">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := -999999999999999999 ; $x</test>
    <result-string/>
    <result>
      <assert-eq>-999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="VarDecl040">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := xs:decimal(&quot;-999999999999999999&quot;) ; $x</test>
    <result-string/>
    <result>
      <assert-eq>-999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="VarDecl041">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := 999999999999999999 ; $x</test>
    <result-string/>
    <result>
      <assert-eq>999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="VarDecl042">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := xs:decimal(&quot;999999999999999999&quot;) ; $x</test>
    <result-string/>
    <result>
      <assert-eq>999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="VarDecl043">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := -3.4028235E38 ; $x</test>
    <result-string>xs:string('-3.4028235E38')</result-string>
    <result>
      <assert-string-value>-3.4028235E38</assert-string-value>
    </result>
  </test-case>
  <test-case name="VarDecl044">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := xs:float(&quot;-3.4028235E38&quot;) ; $x</test>
    <result-string>xs:string('-3.4028235E38')</result-string>
    <result>
      <assert-string-value>-3.4028235E38</assert-string-value>
    </result>
  </test-case>
  <test-case name="VarDecl045">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := xs:date(&quot;1970-01-01Z&quot;) ; $x</test>
    <result-string>xs:string('1970-01-01Z')</result-string>
    <result>
      <assert-string-value>1970-01-01Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="VarDecl046">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := xs:date(&quot;1970-01-01Z&quot;) + xs:dayTimeDuration(&quot;P31DT23H59M59S&quot;) ; $x</test>
    <result-string>xs:string('1970-02-01Z')</result-string>
    <result>
      <assert-string-value>1970-02-01Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="VarDecl047">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := xs:time(&quot;08:03:35Z&quot;) ; $x</test>
    <result-string>xs:string('08:03:35Z')</result-string>
    <result>
      <assert-string-value>08:03:35Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="VarDecl048">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := xs:time(&quot;08:03:35Z&quot;) + xs:dayTimeDuration(&quot;P0DT0H0M0S&quot;) ; $x</test>
    <result-string>xs:string('08:03:35Z')</result-string>
    <result>
      <assert-string-value>08:03:35Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="VarDecl049">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := xs:dateTime(&quot;2030-12-31T23:59:59Z&quot;) ; $x</test>
    <result-string>xs:string('2030-12-31T23:59:59Z')</result-string>
    <result>
      <assert-string-value>2030-12-31T23:59:59Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="VarDecl050">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := (1,2,3) ; $x</test>
    <result-string>xs:string('1 2 3')</result-string>
    <result>
      <assert-string-value>1 2 3</assert-string-value>
    </result>
  </test-case>
  <test-case name="VarDecl051">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := (xs:string(&quot;a&quot;) , (), &quot;xyz&quot;) ; $x</test>
    <result-string>xs:string('a xyz')</result-string>
    <result>
      <assert-string-value>a xyz</assert-string-value>
    </result>
  </test-case>
  <test-case name="VarDecl052">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := (xs:string(&quot;a&quot;) , xs:anyURI(&quot;www.example.com&quot;)) ; $x</test>
    <result-string>xs:string('a www.example.com')</result-string>
    <result>
      <assert-string-value>a www.example.com</assert-string-value>
    </result>
  </test-case>
  <test-case name="VarDecl053">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := (xs:float(&quot;INF&quot;) , xs:double(&quot;NaN&quot;)) ; $x</test>
    <result-string>xs:string('INF NaN')</result-string>
    <result>
      <assert-string-value>INF NaN</assert-string-value>
    </result>
  </test-case>
  <test-case name="VarDecl054">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := (xs:boolean(&quot;true&quot;) , xs:boolean(&quot;0&quot;), xs:integer(&quot;0&quot;)) ; $x</test>
    <result-string>xs:string('true false 0')</result-string>
    <result>
      <assert-string-value>true false 0</assert-string-value>
    </result>
  </test-case>
  <test-case name="VarDecl055">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := (xs:date(&quot;1993-03-31&quot;) , xs:boolean(&quot;true&quot;), xs:string(&quot;abc&quot;)) ; $x</test>
    <result-string>xs:string('1993-03-31 true abc')</result-string>
    <result>
      <assert-string-value>1993-03-31 true abc</assert-string-value>
    </result>
  </test-case>
  <test-case name="VarDecl056">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := (xs:time(&quot;12:30:00&quot;) , xs:string(&quot; &quot;) , xs:decimal(&quot;2.000000000000002&quot;)) ; $x</test>
    <result-string>xs:string('12:30:00   2.000000000000002')</result-string>
    <result>
      <assert-string-value>12:30:00   2.000000000000002</assert-string-value>
    </result>
  </test-case>
  <test-case name="VarDecl057">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := ((1+1), (2-2)) ; $x</test>
    <result-string>xs:string('2 0')</result-string>
    <result>
      <assert-string-value>2 0</assert-string-value>
    </result>
  </test-case>
  <test-case name="VarDecl058">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <test>declare variable $x := ((1,2,2),(1,2,3),(123,&quot;&quot;),(),(&quot;&quot;)) ; $x</test>
    <result-string>xs:string('1 2 2 1 2 3 123  ')</result-string>
    <result>
      <assert-string-value>1 2 2 1 2 3 123  </assert-string-value>
    </result>
  </test-case>
  <test-case name="VarDecl059">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <environment ref="bib"/>
    <test>declare variable $x := (//book/price, (), (1)) ; $x</test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<price>65.95</price><price>65.95</price><price>39.95</price><price>129.95</price>1]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="VarDecl060">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <environment ref="bib"/>
    <test>declare variable $x := //Price/text() ; $x</test>
    <result-string>xs:string('')</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="VarDecl061">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <environment ref="bib2"/>
    <test>declare variable $x := /comment() ; $x</test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<!-- this file is a copy of bib.xml; just adds a few comments and PI nodes for testing --><!-- Comment 1 --><!-- Comment 2 -->]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="VarDecl062">
    <description>Purpose - Variable with no type definition </description>
    <created by="Ravindranath Chennoju" on="2005-06-30"/>
    <environment ref="bib2"/>
    <test>declare variable $x := /processing-instruction() ; $x</test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<?PI1 Processing Instruction 1?><?PI2 Processing Instruction 2?>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case covers="forwards-references" name="VarDecl063">
    <description>Purpose - forwards references to global variables allowed in XQuery 3.0 </description>
    <created by="Michael Kay" on="2011-12-04"/>
    <modified by="Michael Dyck" change="Remove final semicolon" on="2012-01-01"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
        declare variable $x := $y + 3;
        declare variable $y := 17;
        $x + 5
      </test>
    <result-string/>
    <result>
      <assert-eq>25</assert-eq>
    </result>
  </test-case>
  <test-case covers="declaration-cycles" name="vardeclerr">
    <description> Test circularity on variable/function declaration . </description>
    <created by="Carmelo Montanez" on="2006-02-06"/>
    <modified by="O'Neil Delpratt" change="bug fix 19331: add dependency" on="2012-10-08"/>
    <dependency type="spec" value="XQ10"/>
    <test>
      declare namespace foo = &quot;http://www..oracle.com/xquery/test&quot;; 
      declare variable $var1 as xs:integer := foo:price(xs:integer(2)); 
      declare function foo:price ($b as xs:integer) as xs:integer { $var1 + 1 }; 
      declare variable $input-context1 external; 
      $var1</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQST0054&quot;))</result-string>
    <result>
      <error code="XQST0054"/>
    </result>
  </test-case>
  <test-case covers="declaration-cycles" name="vardeclerr-1">
    <description> Test circularity on variable/function declaration . </description>
    <created by="Carmelo Montanez" on="2006-02-06"/>
    <modified by="O'Neil Delpratt" change="Variant of vardeclerr. Bug fix 19331: add dependency" on="2012-10-08"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      declare namespace foo = &quot;http://www..oracle.com/xquery/test&quot;; 
      declare variable $var1 as xs:integer := foo:price(xs:integer(2)); 
      declare function foo:price ($b as xs:integer) as xs:integer { $var1 + 1 }; 
      declare variable $input-context1 external; 
      $var1</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQDY0054&quot;))</result-string>
    <result>
      <error code="XQDY0054"/>
    </result>
  </test-case>
  <test-case name="internalvar-2">
    <description> Evaluates an external variable named &quot;$local:var&quot; declared with no type and multiple embedded comments. </description>
    <created by="Carmelo Montanez" on="2006-06-29"/>
    <test>(::)declare(::)variable(::)$var(::):=(::)1(::);(::) 1(::)eq(::)1</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-InternalVariablesWithout-1">
    <description> A variable depending on a recursive function. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10"/>
    <test>
        declare variable $local:myVar := local:myFunction(); 
        declare function local:myFunction() { local:myFunction(), 1, $local:myVar }; 
        $local:myVar
      </test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQST0054&quot;))</result-string>
    <result>
      <error code="XQST0054"/>
    </result>
  </test-case>
  <test-case covers="declaration-cycles" name="K2-InternalVariablesWithout-1a">
    <description>Test case based on K2-InterVariablesWithout-1 with XQuery 3.0 error code</description>
    <created by="O'Neil Delpratt" on="2012-10-08"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
        declare variable $local:myVar := local:myFunction();
        declare function local:myFunction() { local:myFunction(), 1, $local:myVar };
        $local:myVar
      </test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQDY0054&quot;))</result-string>
    <result>
      <error code="XQDY0054"/>
    </result>
  </test-case>
  <test-case name="K2-InternalVariablesWithout-2">
    <description> A variable depending on a recursive function. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10"/>
    <test>
        declare variable $local:myVar := local:myFunction(); 
        declare function local:myFunction() { $local:myVar, 1, local:myFunction() }; 
        $local:myVar
      </test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQST0054&quot;))</result-string>
    <result>
      <error code="XQST0054"/>
    </result>
  </test-case>
  <test-case covers="declaration-cycles" name="K2-InternalVariablesWithout-2a">
    <description>Test case based on K2-InterVariablesWithout-2 with XQuery 3.0 error code</description>
    <created by="O'Neil Delpratt" on="2012-10-08"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
        declare variable $local:myVar := local:myFunction();
        declare function local:myFunction() { $local:myVar, 1, local:myFunction() };
        $local:myVar
      </test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQDY0054&quot;))</result-string>
    <result>
      <error code="XQDY0054"/>
    </result>
  </test-case>
  <test-case name="K2-InternalVariablesWithout-3">
    <description> A variable depending on a recursive function. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10"/>
    <test>declare variable $local:myVar := local:myFunction(); declare function local:myFunction() { $local:myVar, 1, local:myFunction() }; $local:myVar</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQST0054&quot;))</result-string>
    <result>
      <error code="XQST0054"/>
    </result>
  </test-case>
  <test-case covers="declaration-cycles" name="K2-InternalVariablesWithout-3a">
    <description>Test case based on K2-InterVariablesWithout-3 with XQuery 3.0 error code</description>
    <created by="O'Neil Delpratt" on="2012-10-08"/>
    <dependency type="spec" value="XQ30+"/>
    <test>declare variable $local:myVar := local:myFunction(); declare function local:myFunction() { $local:myVar, 1, local:myFunction() }; $local:myVar</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQDY0054&quot;))</result-string>
    <result>
      <error code="XQDY0054"/>
    </result>
  </test-case>
  <test-case name="K2-InternalVariablesWithout-4">
    <description> A variable depending on a recursive function. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10"/>
    <test>declare variable $local:myVar := local:myFunction(); declare function local:myFunction() { $local:myVar, 1, local:myFunction() }; $local:myVar</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQST0054&quot;))</result-string>
    <result>
      <error code="XQST0054"/>
    </result>
  </test-case>
  <test-case covers="declaration-cycles" name="K2-InternalVariablesWithout-4a">
    <description>Test case based on K2-InterVariablesWithout-4 with XQuery 3.0 error code</description>
    <created by="O'Neil Delpratt" on="2012-10-08"/>
    <dependency type="spec" value="XQ30+"/>
    <test>declare variable $local:myVar := local:myFunction(); declare function local:myFunction() { $local:myVar, 1, local:myFunction() }; $local:myVar</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQDY0054&quot;))</result-string>
    <result>
      <error code="XQDY0054"/>
    </result>
  </test-case>
  <test-case name="K2-InternalVariablesWithout-5">
    <description> A variable depending indirectly on a recursive function. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10"/>
    <test>declare variable $local:myVar := local:myFunction(); declare function local:myFunction2() { $local:myVar, 1, local:myFunction() }; declare function local:myFunction() { local:myFunction2() }; $local:myVar</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQST0054&quot;))</result-string>
    <result>
      <error code="XQST0054"/>
    </result>
  </test-case>
  <test-case covers="declaration-cycles" name="K2-InternalVariablesWithout-5a">
    <description>Test case based on K2-InterVariablesWithout-5 with XQuery 3.0 error code</description>
    <created by="O'Neil Delpratt" on="2012-10-08"/>
    <dependency type="spec" value="XQ30+"/>
    <test>declare variable $local:myVar := local:myFunction(); declare function local:myFunction2() { $local:myVar, 1, local:myFunction() }; declare function local:myFunction() { local:myFunction2() }; $local:myVar</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQDY0054&quot;))</result-string>
    <result>
      <error code="XQDY0054"/>
    </result>
  </test-case>
  <test-case name="K2-InternalVariablesWithout-6">
    <description> A variable depending indirectly on a recursive function. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10"/>
    <test>declare variable $local:myVar := local:myFunction(); declare function local:myFunction2() { local:myFunction(), $local:myVar }; declare function local:myFunction() { local:myFunction2() }; local:myFunction()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQST0054&quot;))</result-string>
    <result>
      <error code="XQST0054"/>
    </result>
  </test-case>
  <test-case covers="declaration-cycles" name="K2-InternalVariablesWithout-6a">
    <description>Test case based on K2-InterVariablesWithout-6 with XQuery 3.0 error code</description>
    <created by="O'Neil Delpratt" on="2012-10-08"/>
    <dependency type="spec" value="XQ30+"/>
    <test>declare variable $local:myVar := local:myFunction(); declare function local:myFunction2() { local:myFunction(), $local:myVar }; declare function local:myFunction() { local:myFunction2() }; local:myFunction()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQDY0054&quot;))</result-string>
    <result>
      <error code="XQDY0054"/>
    </result>
  </test-case>
  <test-case name="K2-InternalVariablesWithout-7">
    <description> A variable depending indirectly on a recursive function. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10"/>
    <test>declare variable $local:myVar := local:myFunction(); declare function local:myFunction2() { local:myFunction(), $local:myVar }; declare function local:myFunction4() { local:myFunction2() }; declare function local:myFunction3() { local:myFunction4() }; declare function local:myFunction() { local:myFunction3() }; local:myFunction()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQST0054&quot;))</result-string>
    <result>
      <error code="XQST0054"/>
    </result>
  </test-case>
  <test-case covers="declaration-cycles" name="K2-InternalVariablesWithout-7a">
    <description>Test case based on K2-InterVariablesWithout-7 with XQuery 3.0 error code</description>
    <created by="O'Neil Delpratt" on="2012-10-08"/>
    <dependency type="spec" value="XQ30+"/>
    <test>declare variable $local:myVar := local:myFunction(); declare function local:myFunction2() { local:myFunction(), $local:myVar }; declare function local:myFunction4() { local:myFunction2() }; declare function local:myFunction3() { local:myFunction4() }; declare function local:myFunction() { local:myFunction3() }; local:myFunction()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQDY0054&quot;))</result-string>
    <result>
      <error code="XQDY0054"/>
    </result>
  </test-case>
  <test-case name="K2-InternalVariablesWithout-8">
    <description> A variable depending indirectly on a recursive function. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10"/>
    <test>declare variable $local:myVar := local:myFunction(); declare function local:myFunction2() { local:myFunction4() }; declare function local:myFunction4() { local:myFunction2(), $local:myVar }; declare function local:myFunction3() { local:myFunction4() }; declare function local:myFunction() { local:myFunction3() }; local:myFunction()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQST0054&quot;))</result-string>
    <result>
      <error code="XQST0054"/>
    </result>
  </test-case>
  <test-case covers="declaration-cycles" name="K2-InternalVariablesWithout-8a">
    <description>Test case based on K2-InterVariablesWithout-8 with XQuery 3.0 error code</description>
    <created by="O'Neil Delpratt" on="2012-10-08"/>
    <dependency type="spec" value="XQ30+"/>
    <test>declare variable $local:myVar := local:myFunction(); declare function local:myFunction2() { local:myFunction4() }; declare function local:myFunction4() { local:myFunction2(), $local:myVar }; declare function local:myFunction3() { local:myFunction4() }; declare function local:myFunction() { local:myFunction3() }; local:myFunction()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQDY0054&quot;))</result-string>
    <result>
      <error code="XQDY0054"/>
    </result>
  </test-case>
  <test-case name="K2-InternalVariablesWithout-9">
    <description> A variable depending on its self through the argument of a user function callsite. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10"/>
    <test>declare variable $local:myVar := local:myFunc(3); declare function local:myFunc($arg) { local:myFunc($local:myVar) }; $local:myVar</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQST0054&quot;))</result-string>
    <result>
      <error code="XQST0054"/>
    </result>
  </test-case>
  <test-case covers="declaration-cycles" name="K2-InternalVariablesWithout-9a">
    <description>Test case based on K2-InterVariablesWithout-9 with XQuery 3.0 error code</description>
    <created by="O'Neil Delpratt" on="2012-10-08"/>
    <dependency type="spec" value="XQ30+"/>
    <test>declare variable $local:myVar := local:myFunc(3); declare function local:myFunc($arg) { local:myFunc($local:myVar) }; $local:myVar</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQDY0054&quot;))</result-string>
    <result>
      <error code="XQDY0054"/>
    </result>
  </test-case>
  <test-case name="K2-InternalVariablesWithout-10">
    <description> Function arguments shadow global variables. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>declare variable $local:myVar := local:myFunc(3); declare function local:myFunc($local:myVar) { $local:myVar }; local:myFunc(6)</test>
    <result-string/>
    <result>
      <assert-eq>6</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-InternalVariablesWithout-11">
    <description> A variable initialized with a function that doesn't exist. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>declare variable $local:myVar := local:thisFunctionDoesNotExist(); 1</test>
    <result-string/>
    <result>
      <any-of>
        <assert-eq>1</assert-eq>
        <error code="XPST0017"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K2-InternalVariablesWithout-12">
    <description> A variable initialized with a function that doesn't exist. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>declare variable $local:myVar := local:thisFunctionDoesNotExist(); $local:myVar</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K2-InternalVariablesWithout-13">
    <description> A prolog containing 20 variable declarations. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>declare variable $local:var1 := 1; declare variable $local:var2 := 2; declare variable $local:var3 := 3; declare variable $local:var4 := 4; declare variable $local:var5 := 5; declare variable $local:var6 := 6; declare variable $local:var7 := 7; declare variable $local:var8 := 8; declare variable $local:var9 := 9; declare variable $local:var10 := 10; declare variable $local:var11 := 11; declare variable $local:var12 := 12; declare variable $local:var13 := 13; declare variable $local:var14 := 14; declare variable $local:var15 := 15; declare variable $local:var16 := 16; declare variable $local:var17 := 17; declare variable $local:var18 := 18; declare variable $local:var19 := 19; declare variable $local:var20 := 20; deep-equal((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20), ($local:var1, $local:var2, $local:var3, $local:var4, $local:var5, $local:var6, $local:var7, $local:var8, $local:var9, $local:var10, $local:var11, $local:var12, $local:var13, $local:var14, $local:var15, $local:var16, $local:var17, $local:var18, $local:var19, $local:var20))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-InternalVariablesWithout-14">
    <description> A focus doesn't propagate through variable references. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $myVar := <e>{nametest}</e>; <e/>/$myVar]]>
    </test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPDY0002&quot;))</result-string>
    <result>
      <error code="XPDY0002"/>
    </result>
  </test-case>
  <test-case name="K2-InternalVariablesWithout-15">
    <description> Multiple assignments is invalid. </description>
    <created by="Frans Englich" on="2008-11-13"/>
    <test>declare variable $var := 1 := 2; 3</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0003&quot;))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="vardeclwithtype-1">
    <description> Evaluates an internal variable declaration with type Use type xs:string. </description>
    <created by="Carmelo Montanez" on="2005-11-23"/>
    <test>declare variable $var as xs:string := &quot;abc&quot;; declare variable $input-context1 external; $var</test>
    <result-string>xs:string('abc')</result-string>
    <result>
      <assert-string-value>abc</assert-string-value>
    </result>
  </test-case>
  <test-case name="vardeclwithtype-2">
    <description> Evaluates an internal variable declaration with type Use type xs:integer. </description>
    <created by="Carmelo Montanez" on="2005-11-23"/>
    <test>declare variable $var as xs:integer := 100; declare variable $input-context1 external; $var</test>
    <result-string/>
    <result>
      <assert-eq>100</assert-eq>
    </result>
  </test-case>
  <test-case name="vardeclwithtype-3">
    <description> Evaluates an internal variable declaration with type Use type xs:decimal. </description>
    <created by="Carmelo Montanez" on="2005-11-23"/>
    <test>declare variable $var as xs:decimal := 100; declare variable $input-context1 external; $var</test>
    <result-string/>
    <result>
      <assert-eq>100</assert-eq>
    </result>
  </test-case>
  <test-case name="vardeclwithtype-4">
    <description> Evaluates an internal variable declaration with type Use type xs:boolean (true value). </description>
    <created by="Carmelo Montanez" on="2005-11-23"/>
    <test>declare variable $var as xs:boolean := fn:true(); declare variable $input-context1 external; $var</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="vardeclwithtype-5">
    <description> Evaluates an internal variable declaration with type Use type xs:boolean (false value). </description>
    <created by="Carmelo Montanez" on="2005-11-23"/>
    <test>declare variable $var as xs:boolean := fn:false(); declare variable $input-context1 external; $var</test>
    <result-string>xs:boolean('false')</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="vardeclwithtype-6">
    <description> Evaluates an internal variable declaration with type Use type xs:float </description>
    <created by="Carmelo Montanez" on="2005-11-23"/>
    <test>declare variable $var as xs:float := xs:float(12.5E10); declare variable $input-context1 external; $var</test>
    <result-string>xs:string('1.25E11')</result-string>
    <result>
      <assert-string-value>1.25E11</assert-string-value>
    </result>
  </test-case>
  <test-case name="vardeclwithtype-7">
    <description> Evaluates an internal variable declaration with type Use type xs:double </description>
    <created by="Carmelo Montanez" on="2005-11-23"/>
    <test>declare variable $var as xs:double := xs:double(1267.43233E12); declare variable $input-context1 external; $var</test>
    <result-string>xs:string('1.26743233E15')</result-string>
    <result>
      <assert-string-value>1.26743233E15</assert-string-value>
    </result>
  </test-case>
  <test-case name="vardeclwithtype-8">
    <description> Evaluates an internal variable declaration with type Use type xs:anyURI </description>
    <created by="Carmelo Montanez" on="2005-11-23"/>
    <test>declare variable $var as xs:anyURI := xs:anyURI(&quot;http://example.com&quot;); declare variable $input-context1 external; $var</test>
    <result-string>xs:string('http://example.com')</result-string>
    <result>
      <assert-string-value>http://example.com</assert-string-value>
    </result>
  </test-case>
  <test-case name="vardeclwithtype-9">
    <description> Evaluates an internal variable declaration with type Use type xs:dateTime </description>
    <created by="Carmelo Montanez" on="2005-11-23"/>
    <test>declare variable $var as xs:dateTime := xs:dateTime(&quot;1999-11-28T09:00:00Z&quot;); declare variable $input-context1 external; $var</test>
    <result-string>xs:string('1999-11-28T09:00:00Z')</result-string>
    <result>
      <assert-string-value>1999-11-28T09:00:00Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="vardeclwithtype-10">
    <description> Evaluates an internal variable declaration with type Use type xs:time </description>
    <created by="Carmelo Montanez" on="2005-11-23"/>
    <test>declare variable $var as xs:time := xs:time(&quot;11:12:00Z&quot;); declare variable $input-context1 external; $var</test>
    <result-string>xs:string('11:12:00Z')</result-string>
    <result>
      <assert-string-value>11:12:00Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="vardeclwithtype-11">
    <description> Evaluates an internal variable declaration with type Use type xs:date </description>
    <created by="Carmelo Montanez" on="2005-11-23"/>
    <test>declare variable $var as xs:date := xs:date(&quot;1999-11-28Z&quot;); declare variable $input-context1 external; $var</test>
    <result-string>xs:string('1999-11-28Z')</result-string>
    <result>
      <assert-string-value>1999-11-28Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="vardeclwithtype-12">
    <description> Evaluates an internal variable declaration with type that is declared twice </description>
    <created by="Carmelo Montanez" on="2005-11-23"/>
    <test>declare variable $var as xs:date := xs:date(&quot;1999-11-28Z&quot;); declare variable $var as xs:date := xs:date(&quot;1999-11-28Z&quot;); declare variable $input-context1 external; $var</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQST0049&quot;))</result-string>
    <result>
      <error code="XQST0049"/>
    </result>
  </test-case>
  <test-case name="vardeclwithtype-13">
    <description> Evaluates an internal variable declaration with type and expression. Expression result does not match given type. </description>
    <created by="Carmelo Montanez" on="2005-11-23"/>
    <test>declare variable $var as xs:date := fn:true() and fn:true(); declare variable $input-context1 external; $var</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="vardeclwithtype-14">
    <description> Evaluates an internal variable declaration with type and expression. Expression uses a previously defined variable. </description>
    <created by="Carmelo Montanez" on="2005-11-23"/>
    <test>declare variable $x as xs:integer := 10; declare variable $var as xs:integer := $x +1; declare variable $input-context1 external; $var</test>
    <result-string/>
    <result>
      <assert-eq>11</assert-eq>
    </result>
  </test-case>
  <test-case name="vardeclwithtype-15a">
    <description> Evaluates an internal variable declaration with type and expression. 
      Test usage of variable with no assigned value at time of expression definition. </description>
    <created by="Carmelo Montanez" on="2005-11-23"/>
    <modified by="Michael Kay" change="see bug 15790" on="2012-05-18"/>
    <dependency type="spec" value="XQ10"/>
    <test>
      declare variable $var as xs:integer := $e +1; 
      declare variable $e as xs:integer := 10;  
      $var</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0008&quot;))</result-string>
    <result>
      <error code="XPST0008"/>
    </result>
  </test-case>
  <test-case name="vardeclwithtype-15b">
    <description> Evaluates an internal variable declaration with type and expression. 
      Test usage of variable with no assigned value at time of expression definition. </description>
    <created by="Carmelo Montanez" on="2005-11-23"/>
    <modified by="Michael Kay" change="see bug 15790" on="2012-05-18"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      declare variable $var as xs:integer := $e +1; 
      declare variable $e as xs:integer := 10;  
      $var</test>
    <result-string/>
    <result>
      <assert-eq>11</assert-eq>
    </result>
  </test-case>
  <test-case name="vardeclwithtype-16">
    <description> Evaluates an internal variable declaration with type that uses a declared namesapce. </description>
    <created by="Carmelo Montanez" on="2005-11-23"/>
    <test>declare namespace p1 = &quot;http://www.example.com&quot;; declare variable $p1:var as xs:integer := 10; declare variable $input-context1 external; $p1:var</test>
    <result-string/>
    <result>
      <assert-eq>10</assert-eq>
    </result>
  </test-case>
  <test-case name="vardeclwithtype-17">
    <description> Evaluates an internal variable declaration with type that uses a declared namespace. Two variable with same name declared in two deferent namespaces. </description>
    <created by="Carmelo Montanez" on="2005-11-23"/>
    <test>declare namespace p1 = &quot;http://www.example.com&quot;; declare namespace p2 = &quot;http://www.example.com/examples&quot;; declare variable $p1:var as xs:integer := 10; declare variable $p2:var as xs:integer := 20; declare variable $input-context1 external; $p2:var</test>
    <result-string/>
    <result>
      <assert-eq>20</assert-eq>
    </result>
  </test-case>
  <test-case name="vardeclwithtype-18">
    <description> Evaluates an internal variable declaration with type that uses a declared namespace. Two variable with same name declared in namespaces with same namespace uri. </description>
    <created by="Carmelo Montanez" on="2005-11-23"/>
    <test>declare namespace p1 = &quot;http://www.example.com&quot;; declare namespace p2 = &quot;http://www.example.com&quot;; declare variable $p1:var as xs:integer := 10; declare variable $p2:var as xs:integer := 20; declare variable $input-context1 external; $p2:var</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQST0049&quot;))</result-string>
    <result>
      <error code="XQST0049"/>
    </result>
  </test-case>
  <test-case name="vardeclwithtype-19">
    <description> Evaluates an internal variable declaration with type that uses the fn:count function . </description>
    <created by="Carmelo Montanez" on="2005-11-23"/>
    <test>declare variable $var as xs:integer := fn:count((10,2)); declare variable $input-context1 external; $var</test>
    <result-string/>
    <result>
      <assert-eq>2</assert-eq>
    </result>
  </test-case>
  <test-case name="vardeclwithtype-20">
    <description> Evaluates an internal variable declaration with type that uses the fn:string-length function . </description>
    <created by="Carmelo Montanez" on="2005-11-23"/>
    <test>declare variable $var as xs:integer := fn:string-length(&quot;ABC&quot;); declare variable $input-context1 external; $var</test>
    <result-string/>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="vardeclwithtype-21">
    <description> Evaluates an internal variable declaration with type that uses the fn:not function . </description>
    <created by="Carmelo Montanez" on="2005-11-23"/>
    <test>declare variable $var as xs:boolean := fn:not(fn:true()); declare variable $input-context1 external; $var</test>
    <result-string>xs:boolean('false')</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="vardeclwithtype-22">
    <description> Evaluates an internal variable declaration with type that uses the fn:empty function . </description>
    <created by="Carmelo Montanez" on="2005-11-23"/>
    <test>declare variable $var as xs:boolean := fn:empty((1,2,3)); declare variable $input-context1 external; $var</test>
    <result-string>xs:boolean('false')</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="internalvar-1">
    <description> Evaluates an external variable named &quot;$local:var&quot; declared as &quot;item()*&quot; and multiple embedded comments. </description>
    <created by="Carmelo Montanez" on="2006-06-29"/>
    <test>declare(::)variable(::)$var(::)as(::)item((: :))*(::):=(::)1(::);(::) 1(::)eq(::)1(::)</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-InternalVariablesWith-1">
    <description> A variable declaration involving assignment and type declaration, and many comments. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>declare(::)variable(::)$local:var(::)as(::)item((: :))* :=3(::);(::)1(::)eq(::)1</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-InternalVariablesWith-2">
    <description> A variable declaration involving assignment, and many comments. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(::)declare(::)variable(::)$local:var(::):=(::)3;(::)1(::)eq(::)1(::)</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-InternalVariablesWith-3">
    <description> A variable declaration whose source expression doesn't match the declared type, and where it typically is difficult to deduce statically. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>declare variable $myVar as xs:integer := subsequence((1, 2, &quot;a string&quot;), 3, 1); $myVar eq 3</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-InternalVariablesWith-4">
    <description> A variable declaration whose source expression doesn't match the declared type, and where it can be deduced statically. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>declare variable $myVar as xs:gYear := 2006; true()</test>
    <result-string/>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPTY0004"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-InternalVariablesWith-5">
    <description> A variable declaration whose source expression doesn't match the declared type, and where it can be deduced statically. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>declare variable $myVar as xs:gYear := 2006; $myVar</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-InternalVariablesWith-6a">
    <description> A prolog variable depending on a variable which is not in scope, 
      and the variable is not used. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="Michael Kay" change="see bug 15790" on="2012-05-18"/>
    <dependency type="spec" value="XQ10"/>
    <test>declare variable $var1 := $var2; declare variable $var2 := 2; true()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0008&quot;))</result-string>
    <result>
      <error code="XPST0008"/>
    </result>
  </test-case>
  <test-case covers="forwards-references" name="K-InternalVariablesWith-6b">
    <description> A prolog variable depending on a variable which is (in XQuery 3.0) in scope, 
      and the variable is not used. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="Michael Kay" change="see bug 15790" on="2012-05-18"/>
    <dependency type="spec" value="XQ30+"/>
    <test>declare variable $var1 := $var2; declare variable $var2 := 2; true()</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-InternalVariablesWith-7">
    <description> 'declare variable' must be followed by '$'. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>declare variable var1 := 1; 1</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0003&quot;))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="K-InternalVariablesWith-8">
    <description> '=' cannot be used to assign values in 'declare variable', it must be ':='. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>declare variable $var1 = 1; 1</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0003&quot;))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="K-InternalVariablesWith-9a">
    <description> A prolog variable depending on a variable which is not in scope. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="Michael Kay" change="see bug 15790" on="2012-05-18"/>
    <dependency type="spec" value="XQ10"/>
    <test>declare variable $var1 := $var2; declare variable $var2 := 2; $var1</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0008&quot;))</result-string>
    <result>
      <error code="XPST0008"/>
    </result>
  </test-case>
  <test-case covers="forwards-references" name="K-InternalVariablesWith-9b">
    <description> A prolog variable depending on a variable which is (in XQuery 3.0) in scope. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="Michael Kay" change="see bug 15790" on="2012-05-18"/>
    <dependency type="spec" value="XQ30+"/>
    <test>declare variable $var1 := $var2; declare variable $var2 := 2; $var1</test>
    <result-string/>
    <result>
      <assert-eq>2</assert-eq>
    </result>
  </test-case>
  <test-case name="K-InternalVariablesWith-10">
    <description> A namespace declaration must appear before a variable declaration, and its prefix is not inscope for the variable declaration. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>declare variable $prefix:var1 := 2; declare namespace prefix = &quot;http://example.com/myNamespace&quot;; true()</test>
    <result-string/>
    <result>
      <any-of>
        <error code="XPST0003"/>
        <error code="XPST0081"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-InternalVariablesWith-11">
    <description> One prolog variable initialized via another. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>declare variable $var1 := 2; declare variable $var2 := $var1; $var2 eq 2</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-InternalVariablesWith-12">
    <description> One prolog variable depending on a user function appearing after it. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>declare variable $var1 := local:myFunc(); declare function local:myFunc() { 1 }; $var1 eq 1</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-InternalVariablesWith-13">
    <description> One prolog variable depending on a user function, but where the user-specified types doesn't match. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>declare variable $var1 as xs:string := local:myFunc(); declare function local:myFunc() as xs:integer { 1 }; $var1 eq 1</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-InternalVariablesWith-14">
    <description> One prolog variable depending on a user function, but where the types doesn't match. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>declare variable $var1 as xs:string := local:myFunc(); declare function local:myFunc() { 1 }; $var1 eq 1</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-InternalVariablesWith-15a">
    <description> One prolog variable depending on itself. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="Michael Kay" change="see bug 15790" on="2012-05-18"/>
    <dependency type="spec" value="XQ10"/>
    <test>declare variable $var1 := $var1; true()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0008&quot;))</result-string>
    <result>
      <error code="XPST0008"/>
    </result>
  </test-case>
  <test-case name="K-InternalVariablesWith-15b">
    <description> One prolog variable depending on itself. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="Michael Kay" change="see bug 15790" on="2012-05-18"/>
    <modified by="O'Neil Delpratt" change="see bug 17272" on="2012-10-02"/>
    <dependency type="spec" value="XQ30+"/>
    <test>declare variable $var1 := $var1; true()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0008&quot;))</result-string>
    <result>
      <error code="XPST0008"/>
    </result>
  </test-case>
  <test-case name="K-InternalVariablesWith-16">
    <description> A prolog variable having a circular dependency, stretching through many functions. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10"/>
    <test>
      declare variable $var := local:func1(); 
      declare function local:func1() { local:func2() }; 
      declare function local:func2() { local:func3() }; 
      declare function local:func3() { local:func4() }; 
      declare function local:func4() { $var }; 
      boolean($var)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQST0054&quot;))</result-string>
    <result>
      <error code="XQST0054"/>
    </result>
  </test-case>
  <test-case covers="declaration-cycles" name="K-InternalVariablesWith-16a">
    <description>Test case based on K-InternalVariablesWith-16. XQuery 3.0 error code.</description>
    <created by="O'Neil Delpratt" on="2012-10-08"/>
    <dependency type="spec" value="XQ30"/>
    <test>
      declare variable $var := local:func1(); 
      declare function local:func1() { local:func2() }; 
      declare function local:func2() { local:func3() }; 
      declare function local:func3() { local:func4() }; 
      declare function local:func4() { $var }; 
      boolean($var)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQDY0054&quot;))</result-string>
    <result>
      <error code="XQDY0054"/>
    </result>
  </test-case>
  <test-case covers="declaration-cycles" name="K-InternalVariablesWith-17">
    <description> A prolog variable having a circular dependency, by having a variable reference in a call site argument. This is an error even though the variable isn't used, because implementations cannot skip reporting static errors. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10"/>
    <test>declare variable $var := local:func1(); declare function local:func1() { local:func2($var) }; declare function local:func2($arg2) { 1 }; true()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQST0054&quot;))</result-string>
    <result>
      <error code="XQST0054"/>
    </result>
  </test-case>
  <test-case covers="declaration-cycles" name="K-InternalVariablesWith-17a">
    <description>Test case based on K-InternalVariablesWith-17. XQuery 3.0 error code.</description>
    <created by="O'Neil Delpratt" on="2012-10-08"/>
    <dependency type="spec" value="XQ30"/>
    <test>declare variable $var := local:func1(); declare function local:func1() { local:func2($var) }; declare function local:func2($arg2) { 1 }; true()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQDY0054&quot;))</result-string>
    <result>
      <error code="XQDY0054"/>
    </result>
  </test-case>
  <test-case covers="declaration-cycles" name="K-InternalVariablesWith-18">
    <description> A prolog variable having a circular dependency, by having a variable reference in a call site argument. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10"/>
    <test>declare variable $var := local:func1(); declare function local:func1() { local:func2($var) }; declare function local:func2($arg2) { $arg2 }; $var</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQST0054&quot;))</result-string>
    <result>
      <error code="XQST0054"/>
    </result>
  </test-case>
  <test-case covers="declaration-cycles" name="K-InternalVariablesWith-18a">
    <description>Test case based on K-InternalVariablesWith-18 with XQuery 3.0 error code.</description>
    <created by="O'Neil Delpratt" on="2012-10-08"/>
    <dependency type="spec" value="XQ30"/>
    <test>declare variable $var := local:func1(); declare function local:func1() { local:func2($var) }; declare function local:func2($arg2) { $arg2 }; $var</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQDY0054&quot;))</result-string>
    <result>
      <error code="XQDY0054"/>
    </result>
  </test-case>
  <test-case covers="declaration-cycles" name="K-InternalVariablesWith-19">
    <description> A prolog variable having a circular dependency, stretching through functions and variables. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10"/>
    <test>declare variable $var2 := local:func1(); declare variable $var := ($var2 treat as xs:integer) + 1; declare function local:func1() { local:func2() }; declare function local:func2() { local:func3() }; declare function local:func3() { local:func4() }; declare function local:func4() { $var }; boolean($var)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQST0054&quot;))</result-string>
    <result>
      <error code="XQST0054"/>
    </result>
  </test-case>
  <test-case covers="declaration-cycles" name="K-InternalVariablesWith-19a">
    <description>Test case based on K-InternalVariablesWith-19 with XQuery 3.0 error code.</description>
    <created by="O'Neil Delpratt" on="2012-10-08"/>
    <dependency type="spec" value="XQ30"/>
    <test>declare variable $var2 := local:func1(); declare variable $var := ($var2 treat as xs:integer) + 1; declare function local:func1() { local:func2() }; declare function local:func2() { local:func3() }; declare function local:func3() { local:func4() }; declare function local:func4() { $var }; boolean($var)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQDY0054&quot;))</result-string>
    <result>
      <error code="XQDY0054"/>
    </result>
  </test-case>
  <test-case covers="declaration-cycles" name="K-InternalVariablesWith-20">
    <description> A prolog variable having a circular dependency, stretching through functions and variables(#2). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10"/>
    <test>declare variable $var := local:func1(); declare function local:func1() { local:func2() }; declare function local:func2() { local:func3() }; declare variable $var2 := local:func2(); declare function local:func3() { $var2 }; boolean($var)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQST0054&quot;))</result-string>
    <result>
      <error code="XQST0054"/>
    </result>
  </test-case>
  <test-case covers="declaration-cycles" name="K-InternalVariablesWith-20a">
    <description>Test case based on K-InternalVariablesWith-20 with XQuery 3.0 error code.</description>
    <created by="O'Neil Delpratt" on="2012-10-08"/>
    <dependency type="spec" value="XQ30"/>
    <test>declare variable $var := local:func1(); declare function local:func1() { local:func2() }; declare function local:func2() { local:func3() }; declare variable $var2 := local:func2(); declare function local:func3() { $var2 }; boolean($var)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQDY0054&quot;))</result-string>
    <result>
      <error code="XQDY0054"/>
    </result>
  </test-case>
  <test-case name="K-InternalVariablesWith-21">
    <description> A variable declaration involving assignment and type declaration, demonstrating a parsing problem. </description>
    <created by="Michael Kay" on="2011-07-12"/>
    <test>declare variable $local:var as item() *:=3; true()</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-InternalVariablesWith-1">
    <description> The query contains a type error despite the 'treat as' declaration. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>declare variable $var1 as xs:string := 1 treat as item(); $var1</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
</test-set>