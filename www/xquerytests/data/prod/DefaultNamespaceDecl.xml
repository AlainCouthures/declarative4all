<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog"
          name="prod-DefaultNamespaceDecl">
   <description>Tests for the DefaultNamespaceDecl production</description>
   <link type="spec" document="http://www.w3.org/TR/xquery-30/"
         idref="doc-xquery30-DefaultNamespaceDecl"/>
   <link type="spec" document="XQuery" section-number="4.13"
         idref="id-default-namespace"/>
   
   <environment name="bib">
      <source role="." file="../docs/bib.xml">
         <description>Data for the the XML Query XMP use cases</description>
         <created by="XQuery WG" on="2005-02-11"/>
      </source>      
   </environment>
   
   <environment name="bib2">
      <source role="." file="../op/union/bib2.xml">
         <description>Bibliography example with extra comments and PIs.</description>
         <created by="spec-authors" on="2000-01-01"/>
      </source>
   </environment>    
   
   <environment name="acme_corp">
      <source role="." file="../op/union/acme_corp.xml">
         <description>Source document for Function Declaration tests</description>
         <created by="Ravindranath Chennoju" on="2000-01-01"/>
      </source>
   </environment> 

   <dependency type="spec" value="XQ10+"/>

   <test-case name="default_namespace-001">
      <description> Demonstrates Default namespace declaration, facilitates the use of unprefixed QNames </description>
      <created by="Pulkita Tyagi" on="2005-09-02"/>
      <test>declare default function namespace "http://www..oracle.com/xquery/test"; declare function price ($b as element()) as element()* { $b/price }; 1</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="default_namespace-002">
      <description> Demonstrates Default namespace declaration, facilitates the use of unprefixed QNames </description>
      <created by="Pulkita Tyagi" on="2005-09-02"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default function namespace "http://www..oracle.com/xquery/test"; 
        declare function foo($n as xs:integer) { <tr> {$n} </tr> }; 
        foo(4)]]></test>
      <result>
         <assert-xml><![CDATA[<tr>4</tr>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="default_namespace-003">
      <description> Demonstrates Default namespace declaration, facilitates the use of unprefixed QNames </description>
      <created by="Pulkita Tyagi" on="2005-09-02"/>
      <environment ref="bib"/>
      <test>
        declare default function namespace "http://www..oracle.com/xquery/test"; 
        declare function price ($i as element()) as element()? { $i/price }; 
        for $j in /bib/book return price($j)
      </test>
      <result>
         <assert-xml><![CDATA[<price>65.95</price><price>65.95</price><price>39.95</price><price>129.95</price>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="default_namespace-004">
      <description> Demonstrates Default namespace declaration, facilitates the use of unprefixed QNames </description>
      <created by="Pulkita Tyagi" on="2005-09-02"/>
      <environment ref="acme_corp"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default function namespace "http://example.org"; 
        declare function summary($emps as element(employee)*) as element(dept)* { 
            for $d in fn:distinct-values($emps/deptno) 
            let $e := $emps[deptno = $d] 
            return <dept> <deptno>{$d}</deptno> <headcount> {fn:count($e)} </headcount> <payroll> {fn:sum($e/salary)} </payroll> </dept> 
        }; 
        summary(//employee[location = "Denver"])]]></test>
      <result>
         <assert-xml><![CDATA[<dept><deptno>1</deptno><headcount>2</headcount><payroll>130000</payroll></dept><dept><deptno>2</deptno><headcount>1</headcount><payroll>80000</payroll></dept>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="default_namespace-005">
      <description> Demonstrates Default namespace declaration, facilitates the use of unprefixed QNames </description>
      <created by="Pulkita Tyagi" on="2005-09-02"/>
      <test>
      	declare default function namespace "http://example.org"; 
      	declare function mysum($i as xs:integer, $j as xs:integer) { let $j := $i + $j return $j }; 
      	declare function invoke_mysum() { let $s := 1 for $d in (1,2,3,4,5) let $s := mysum($s, $d) return $s }; 
      	invoke_mysum()</test>
      <result>
         <assert-string-value>2 3 4 5 6</assert-string-value>
      </result>
   </test-case>

   <test-case name="default_namespace-006">
      <description> Demonstrates Default namespace declaration, facilitates the use of unprefixed QNames </description>
      <created by="Pulkita Tyagi" on="2005-09-02"/>
      <test>
      	declare default function namespace "http://example.org"; 
      	declare function mysum($i as xs:integer, $j as xs:integer) { let $j := $i + $j return $j }; 
      	declare function invoke_mysum($st) { for $d in (1,2,3,4,5) let $st := mysum($d, $st) return $st }; 
      	invoke_mysum(0)
      </test>
      <result>
         <assert-string-value>1 2 3 4 5</assert-string-value>
      </result>
   </test-case>

   <test-case name="default_namespace-007">
      <description> Demonstrates Default namespace declaration, facilitates the use of unprefixed QNames </description>
      <created by="Pulkita Tyagi" on="2005-09-02"/>
      <test>
      	declare default function namespace "http://example.org"; 
      	declare variable $a := 1; 
      	declare function foo($a as xs:integer) { if ($a &gt; 100) then $a else let $a := $a + 1 return foo($a) }; 
      	foo($a)
      </test>
      <result>
         <assert-eq>101</assert-eq>
      </result>
   </test-case>

   <test-case name="default_namespace-008">
      <description> Demonstrates Default namespace declaration, facilitates the use of unprefixed QNames </description>
      <created by="Pulkita Tyagi" on="2005-09-02"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
      	declare default function namespace "http://example.org"; 
      	declare function fact($n as xs:integer) as xs:integer { if ($n < 2) then 1 else $n * fact($n - 1) }; 
      	declare variable $ten := fact(10); 
      	<table> { for $i in 1 to 10 return <tr> <td>10!/{$i}! = {$ten div fact($i)}</td> </tr> } </table>
      ]]></test>
      <result>
         <assert-xml><![CDATA[<table><tr><td>10!/1! = 3628800</td></tr><tr><td>10!/2! = 1814400</td></tr><tr><td>10!/3! = 604800</td></tr><tr><td>10!/4! = 151200</td></tr><tr><td>10!/5! = 30240</td></tr><tr><td>10!/6! = 5040</td></tr><tr><td>10!/7! = 720</td></tr><tr><td>10!/8! = 90</td></tr><tr><td>10!/9! = 10</td></tr><tr><td>10!/10! = 1</td></tr></table>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="default_namespace-009">
      <description> Demonstrates Default namespace declaration, facilitates the use of unprefixed QNames </description>
      <created by="Pulkita Tyagi" on="2005-09-02"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
      	declare default function namespace "http://example.org"; 
      	declare function fact($n as xs:integer) as xs:integer { if ($n < 2) then 1 else $n * fact(($n)-1) }; 
      	<table> { for $i in 1 to 10 return <tr> <td>{$i}! = {fact($i)}</td> </tr> } </table>
      ]]></test>
      <result>
         <assert-xml><![CDATA[<table><tr><td>1! = 1</td></tr><tr><td>2! = 2</td></tr><tr><td>3! = 6</td></tr><tr><td>4! = 24</td></tr><tr><td>5! = 120</td></tr><tr><td>6! = 720</td></tr><tr><td>7! = 5040</td></tr><tr><td>8! = 40320</td></tr><tr><td>9! = 362880</td></tr><tr><td>10! = 3628800</td></tr></table>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="default_namespace-010">
      <description> Demonstrates Default namespace declaration, facilitates the use of unprefixed QNames </description>
      <created by="Pulkita Tyagi" on="2005-09-02"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default function namespace "http://example.org"; 
        declare function prnt($n as xs:integer,$n2 as xs:string, $n3 as xs:date, $n4 as xs:long, $n5 as xs:string, $n6 as xs:decimal) {
             if ($n < 2) then 1 else fn:concat($n, " ",$n2," ",$n3," ",$n4," ",$n5," ",$n6) 
        }; 
        <table> { <td>Value is = {prnt(4,xs:string("hello"),xs:date("2005-02-22"), xs:long(5),xs:string("well"),xs:decimal(1.2))}</td> } </table>
      ]]></test>
      <result>
         <assert-xml><![CDATA[<table><td>Value is = 4 hello 2005-02-22 5 well 1.2</td></table>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="default_namespace-011">
      <description> Demonstrates Default namespace declaration, facilitates the use of unprefixed QNames </description>
      <created by="Pulkita Tyagi" on="2005-09-02"/>
      <test>
      	declare default function namespace "http://example.org"; 
      	declare function fn1 ($n as xs:integer) as xs:integer { fn2($n) }; 
      	declare function fn2 ($n as xs:integer) as xs:integer { if ($n = 1) then 1 else $n + fn1($n - 1) }; 
      	fn1(4)</test>
      <result>
         <assert-eq>10</assert-eq>
      </result>
   </test-case>

   <test-case name="default_namespace-012">
      <description> Demonstrates Default namespace declaration, facilitates the use of unprefixed QNames </description>
      <created by="Pulkita Tyagi" on="2005-09-02"/>
      <test>
      	declare default function namespace "http://example.org"; 
      	declare function fn1 ($n as xs:integer) as xs:integer { fn2($n) }; 
      	declare function fn2 ($n as xs:integer) as xs:integer { if ($n = 1) then 1 else $n + fn1($n - 1) }; 
      	fn1(4)</test>
      <result>
         <assert-eq>10</assert-eq>
      </result>
   </test-case>

   <test-case name="default_namespace-013">
      <description> Demonstrates Default namespace declaration, facilitates the use of unprefixed QNames </description>
      <created by="Pulkita Tyagi" on="2005-09-02"/>
      <test>
      	declare default function namespace "http://example.org"; 
      	declare function foo2($i as xs:string) as xs:string {foo($i)}; 
      	declare function foo($i as xs:string) as xs:string {$i}; 
      	foo2("abc")</test>
      <result>
         <assert-string-value>abc</assert-string-value>
      </result>
   </test-case>

   <test-case name="default_namespace-014">
      <description> Demonstrates Default namespace declaration, facilitates the use of unprefixed QNames </description>
      <created by="Pulkita Tyagi" on="2005-09-02"/>
      <test>
      	declare default function namespace "http://example.org"; 
      	declare function odd($x as xs:integer) as xs:boolean {if ($x = 0) then fn:false() else even($x - 1)}; 
      	declare function even($x as xs:integer) as xs:boolean {if ($x = 0) then fn:true() else odd($x - 1)}; 
      	even(4)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="default_namespace-015">
      <description> Demonstrates Default namespace declaration, facilitates the use of unprefixed QNames </description>
      <created by="Pulkita Tyagi" on="2005-09-02"/>
      <test>
      	declare default function namespace "http://example.org"; 
      	declare function odd($x as xs:integer) as xs:boolean {if ($x = 0) then fn:false() else even($x - 1)}; 
      	declare function even($x as xs:integer) as xs:boolean {if ($x = 0) then fn:true() else odd($x - 1)}; 
      	even(3)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="default_namespace-016">
      <description> Demonstrates Default namespace declaration, facilitates the use of unprefixed QNames </description>
      <created by="Pulkita Tyagi" on="2005-09-02"/>
      <environment ref="bib2"/>
      <test>
        declare default function namespace "http://example.org"; 
        declare function title($a_book as element()) as element()* { for $i in $a_book return $i/title }; 
        /bib/book/(title(.))</test>
      <result>
         <assert-xml><![CDATA[<title>TCP/IP Illustrated</title><title>Advanced Programming in the Unix environment</title><title>Data on the Web</title><title>The Economics of Technology and Content for Digital TV</title>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="default_namespace-017">
      <description> Demonstrates Default namespace declaration, facilitates the use of unprefixed QNames </description>
      <created by="Pulkita Tyagi" on="2005-09-02"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default function namespace "http://example.org"; 
        declare default element namespace "http://www.example.com/filesystem"; 
        declare variable $v as xs:integer := 100; 
        declare function udf1 ($CUSTNO as xs:integer) { <empty> {$CUSTNO*$v} </empty> }; 
        udf1(10)
      ]]></test>
      <result>
         <assert-xml><![CDATA[<empty xmlns="http://www.example.com/filesystem">1000</empty>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="default_namespace-018">
      <description> Demonstrates Default namespace declaration, facilitates the use of unprefixed QNames </description>
      <created by="Pulkita Tyagi" on="2005-09-02"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default function namespace "http://example.org"; 
        declare default element namespace "http://www.example.com/filesystem"; 
        declare function udf1 () { <empty> {10*10} </empty> }; 
        udf1 ()
      ]]></test>
      <result>
         <assert-xml><![CDATA[<empty xmlns="http://www.example.com/filesystem">100</empty>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="default_namespace-019">
      <description> Demonstrates Default namespace declaration, facilitates the use of unprefixed QNames </description>
      <created by="Pulkita Tyagi" on="2005-09-02"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default function namespace "http://example.org"; 
        declare default element namespace "http://www.example.com/def"; 
        declare namespace test="http://www.example.com/test"; 
        declare namespace test2="http://www.example.com/test2"; 
        declare function test:udf1() { <empty> {10*10} </empty> }; 
        declare function test2:udf1() { <empty/> }; 
        <A> {test:udf1()} {test2:udf1()} </A>
      ]]></test>
      <result>
         <assert-xml><![CDATA[<A xmlns="http://www.example.com/def"><empty>100</empty><empty/></A>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="default_namespace-020">
      <description> Demonstrates Default namespace declaration, facilitates the use of unprefixed QNames </description>
      <created by="Pulkita Tyagi" on="2005-09-02"/>
      <test>
      	declare default function namespace "http://example.org"; 
      	declare function price () as xs:integer+ { 100 }; 
      	declare function price ($z as xs:integer) as xs:integer+ { $z }; 
      	declare function price ($x as xs:integer, $y as xs:integer) as xs:integer+ { $x, $y }; 
      	declare function price ($x as xs:integer, $y as xs:integer, $z as xs:integer) as xs:integer+ { $x+$y+$z }; 
      	price(), price(1), price(2,3), price(4,5,6)
      </test>
      <result>
         <assert-string-value>100 1 2 3 15</assert-string-value>
      </result>
   </test-case>

   <test-case name="default_namespace-021">
      <description> Demonstrates Default namespace declaration, facilitates the use of unprefixed QNames </description>
      <created by="Pulkita Tyagi" on="2005-09-02"/>
      <test>
        declare default element namespace "http:/www.oracle.com/xquery"; 
        declare variable $x := 7.5; 
        $x + 2</test>
      <result>
         <assert-string-value>9.5</assert-string-value>
      </result>
   </test-case>

   <test-case name="default_namespace-022">
      <description> Demonstrates Default namespace declaration, facilitates the use of unprefixed QNames </description>
      <created by="Pulkita Tyagi" on="2005-09-02"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare default element namespace "http://www.example.com/test"; 
        <test/>
      ]]></test>
      <result>
         <assert-xml><![CDATA[<test xmlns="http://www.example.com/test"/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="defaultnamespacedeclerr-1">
      <description> Evaluation of the of a query prolog with two default namespace declarations. </description>
      <created by="Carmelo Montanez" on="2005-12-06"/>
      <test>
        declare default element namespace "http://example.org/names"; 
        declare default element namespace "http://someexample.org/names"; 
        "abc"</test>
      <result>
         <error code="XQST0066"/>
      </result>
   </test-case>

   <test-case name="defaultnamespacedeclerr-2">
      <description> Evaluation of the of a query prolog with two default namespace declarations. </description>
      <created by="Carmelo Montanez" on="2005-12-06"/>
      <test>
        declare default function namespace "http://example.org/names"; 
        declare default function namespace "http://someexample.org/names"; 
        "abc"</test>
      <result>
         <error code="XQST0066"/>
      </result>
   </test-case>
   
   <test-case name="defaultnamespacedeclerr-3" covers="reserved-namespaces">
      <description>Invalid use of XML namespace as default. See bug 14930. </description>
      <created by="Michael Kay" on="2011-11-25"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/XML/1998/namespace";
        <a/>
      ]]></test>
      <result>
         <error code="XQST0070"/>
      </result>
   </test-case>
   
    <test-case name="defaultnamespacedeclerr-4" covers="reserved-namespaces">
      <description>Invalid use of XML namespace as default. See bug 14930. </description>
      <created by="Michael Kay" on="2011-11-25"/>
      <test><![CDATA[
        declare default function namespace "http://www.w3.org/XML/1998/namespace";
        declare function go() {3};
        go()
      ]]></test>
      <result>
         <error code="XQST0070"/>
      </result>
   </test-case>
   
   <test-case name="defaultnamespacedeclerr-5" covers="reserved-namespaces">
      <description>Invalid use of XMLNS namespace as default. See bug 14930. </description>
      <created by="Michael Kay" on="2011-11-25"/>
      <test><![CDATA[
        declare default element namespace "http://www.w3.org/2000/xmlns/";
        <a/>
      ]]></test>
      <result>
         <error code="XQST0070"/>
      </result>
   </test-case>
   
    <test-case name="defaultnamespacedeclerr-6" covers="reserved-namespaces">
      <description>Invalid use of XMLNS namespace as default. See bug 14930. </description>
      <created by="Michael Kay" on="2011-11-25"/>
      <test><![CDATA[
        declare default function namespace "http://www.w3.org/2000/xmlns/";
        declare function go() {3};
        go()
      ]]></test>
      <result>
         <error code="XQST0070"/>
      </result>
   </test-case>
   
   <test-case name="defaultnamespacedeclerr-7" covers="reserved-namespaces">
      <description>Invalid use of XMLNS namespace as default, with escaping. See bug 14930. </description>
      <created by="Michael Kay" on="2011-11-25"/>
      <test><![CDATA[
        declare default element namespace "http&#x3a;//www.w3.org/2000/xmlns/";
        <a/>
      ]]></test>
      <result>
         <error code="XQST0070"/>
      </result>
   </test-case>
   
    <test-case name="defaultnamespacedeclerr-8" covers="reserved-namespaces">
      <description>Invalid use of XMLNS namespace as default, with escaping. See bug 14930. </description>
      <created by="Michael Kay" on="2011-11-25"/>
      <test><![CDATA[
        declare default function namespace "http&#x3a;//www.w3.org/2000/xmlns/";
        declare function go() {3};
        go()
      ]]></test>
      <result>
         <error code="XQST0070"/>
      </result>
   </test-case>

   <test-case name="K-DefaultNamespaceProlog-1">
      <description> A 'declare default element namespace' expression containing many comments, using apostrophes for the URILiteral. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare(:..:)default(:..:)element(:..:)namespace(:..:)'http://example.com/'(:..:);(:..:)1(:..:)eq(:..:)1(:..:)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-DefaultNamespaceProlog-2">
      <description> A 'declare default element namespace' expression containing many comments, using quotes for the URILiteral. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare(:..:)default(:..:)element(:..:)namespace(:..:)"http://example.com/"(:..:);(:..:)1(:..:)eq(:..:)1(:..:)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-DefaultNamespaceProlog-3">
      <description> A 'declare default function namespace' expression containing many comments, using apostrophes for the URILiteral. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare(:..:)default(:..:)function(:..:)namespace(:..:)'http://example.com/'(:..:);(:..:)1(:..:)eq(:..:)1(:..:)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-DefaultNamespaceProlog-4">
      <description> A 'declare default function namespace' expression containing many comments, using quotes for the URILiteral. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare(:..:)default(:..:)function(:..:)namespace(:..:)"http://example.com/"(:..:);(:..:)1(:..:)eq(:..:)1(:..:)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-DefaultNamespaceProlog-5">
      <description> No function named boolean is available in the namespace 'example.com' set via 'declare default function namespace'. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare(:..:)default(:..:)function(:..:)namespace(:..:)"http://example.com/"(:..:);(:..:)boolean(1)(:..:)</test>
      <result>
         <error code="XPST0017"/>
      </result>
   </test-case>

   <test-case name="K-DefaultNamespaceProlog-6">
      <description> 'declare function namespace' is a syntactically invalid declaration. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare function namespace "http://example.com/";1</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-DefaultNamespaceProlog-7">
      <description> 'declare function namespace' is a syntactically invalid declaration. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare element namespace "http://example.com/";1</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-DefaultNamespaceProlog-8">
      <description> '=' cannot be used in a 'declare namespace' declaration. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare default element namespace = "http://example.com/";1</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-DefaultNamespaceProlog-9">
      <description> '=' cannot be used in a 'declare namespace' declaration. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare default function namespace = "http://example.com/";1</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-DefaultNamespaceProlog-10">
      <description> ':=' cannot be used in a 'declare namespace' declaration. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare default element namespace := "http://example.com/";1</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-DefaultNamespaceProlog-11">
      <description> ':=' cannot be used in a 'declare namespace' declaration. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare default function namespace := "http://example.com/";1</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-DefaultNamespaceProlog-1">
      <description> In direct element constructors, the declared default element namespace is respected. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare default element namespace "http://example.com/defelementns"; namespace-uri(<foo/>)]]></test>
      <result>
         <assert-string-value>http://example.com/defelementns</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-DefaultNamespaceProlog-2">
      <description> 'xmlns' declarations on direct element constructors override the declared default element namespace. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare default element namespace "http://example.com/defelementns"; namespace-uri(<foo xmlns="http://example.com/overriden"/>)]]></test>
      <result>
         <assert-string-value>http://example.com/overriden</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-DefaultNamespaceProlog-3">
      <description> Syntax error in the keywords. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[default declare default element namespace b = "http://www.example.com/"; empty(<e xmlns="http://www.example.com/"><d xmlns=""><b/></d></e>/b:d/b:b)]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-DefaultNamespaceProlog-4">
      <description> Syntax error in the keywords(#2). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare default element namespace b = "http://www.example.com/"; empty(<e xmlns="http://www.example.com/"><d xmlns=""><b/></d></e>/b:d/b:b)]]></test>
      <result>
         <any-of>
            <error code="XPST0003"/>
            <error code="XPST0081"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-DefaultNamespaceProlog-5">
      <description> Syntax error in the keywords(#3). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare default element namespace b = "http://www.example.com/"; 1</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-DefaultNamespaceProlog-6">
      <description> Ensure the default element namespace is properly handled with default namespace attribute declarations. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare default element namespace "http://example.com/"; namespace-uri-from-QName(xs:QName("localName")), <e xmlns=""> { " | ", namespace-uri-from-QName(xs:QName("localName")) } </e>, namespace-uri-from-QName(xs:QName("localName"))]]></test>
      <result>
         <assert-xml><![CDATA[http://example.com/<e> |  </e>http://example.com/]]></assert-xml>
      </result>
   </test-case>

   <test-case name="K2-DefaultNamespaceProlog-7">
      <description> Use two default namespace declarations on the same element. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<e xmlns="" xmlns=""/>]]></test>
      <result>
         <error code="XQST0071"/>
      </result>
   </test-case>

   <test-case name="K2-DefaultNamespaceProlog-8">
      <description> Use two default namespace declarations on the same element, but with different namespace URIs. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<e xmlns="http://www.example.com/1" xmlns="http://www.example.com/2"/>]]></test>
      <result>
         <error code="XQST0071"/>
      </result>
   </test-case>

   <test-case name="K2-DefaultNamespaceProlog-9">
      <description> Use two namespace declarations on the same element, but with different namespace URIs. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<e xmlns:p="http://www.example.com/1" xmlns:p="http://www.example.com/2"/>]]></test>
      <result>
         <error code="XQST0071"/>
      </result>
   </test-case>

   <test-case name="K2-DefaultNamespaceProlog-10">
      <description> Two attributes that have identical expanded names, but indifferent lexical names. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace a = "http://www.example.com/"; <e xmlns:b="http://www.example.com/" a:localName="1" b:localName="2" />]]></test>
      <result>
         <error code="XQST0040"/>
      </result>
   </test-case>

   <test-case name="K2-DefaultNamespaceProlog-11">
      <description> Ensure the default namespaces are correctly set. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<a xmlns="http://www.w3.org/2001/XMLSchema"> {1 cast as byte} <b xmlns="http://www.w3.org/1999/XSL/Transform"> {count(1)} </b> {2 cast as byte} </a>]]></test>
      <result>
         <assert-xml><![CDATA[<a xmlns="http://www.w3.org/2001/XMLSchema">1<b xmlns="http://www.w3.org/1999/XSL/Transform">1</b>2</a>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="K2-DefaultNamespaceProlog-12">
      <description> Ensure that default namespaces override each other properly. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <modified by="O'Neil Delpratt" on="2012-09-25" change="Test case depends on XQ10" />
      <dependency type="spec" value="XQ10"/>
      <test><![CDATA[<a xmlns="http://www.w3.org/2001/XMLSchema"> {1 cast as byte} <b xmlns="http://www.w3.org/1999/XSL/Transform"> {count(1), 2 cast as byte} </b> {2 cast as byte} </a>]]></test>
      <result>
         <error code="XPST0051"/>
      </result>
   </test-case>

   <test-case name="K2-DefaultNamespaceProlog-12a">
      <description> Ensure that default namespaces override each other properly. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <modified by="O'Neil Delpratt" on="2012-09-25" change="new test case variant, which depends on XQ30, XP30 and different error code" />
      <dependency type="spec" value="XQ30+ XP30+"/>
      <test><![CDATA[<a xmlns="http://www.w3.org/2001/XMLSchema"> {1 cast as byte} <b xmlns="http://www.w3.org/1999/XSL/Transform"> {count(1), 2 cast as byte} </b> {2 cast as byte} </a>]]></test>
      <result>
         <error code="XQST0052"/>
      </result>
   </test-case>

   <test-case name="K2-DefaultNamespaceProlog-13">
      <description> Variables cannot occur before namespace declarations. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare variable $variable := 1; declare default element namespace "http://example.com"; 1</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-DefaultNamespaceProlog-14">
      <description> Variables cannot occur before namespace declarations. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare variable $variable := 1; declare default element namespace "http://example.com"; 1</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-DefaultNamespaceProlog-15">
      <description> Functions cannot occur before namespace declarations. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare function local:myFunc() { 1 }; declare default element namespace "http://example.com"; 1</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-DefaultNamespaceProlog-16">
      <description> Options cannot occur before namespace declarations. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare option local:myOption "foo"; declare default element namespace "http://example.com"; 1</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-DefaultNamespaceProlog-17">
      <description> Ensure that the right namespace binding is picked up. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
         declare default element namespace "http://example.com/"; 
         for $test as attribute(integer, xs:anyAtomicType) in (<e integer="1"/>/@integer) 
         return data($test)
      ]]></test>
      <result>
         <assert-string-value>1</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-DefaultNamespaceProlog-18">
      <description> Ensure the 'default' keyword is parsed correctly. </description>
      <created by="Frans Englich" on="2008-01-03"/>
      <test>default eq default</test>
      <result>
         <error code="XPDY0002"/>
      </result>
   </test-case>
</test-set>