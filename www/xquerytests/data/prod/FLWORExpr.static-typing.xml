<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog"
          name="prod-FLWORExpr.static-typing">
   <description>Tests for the FLWORExpr.static-typing production</description>
   <link type="spec" document="http://www.w3.org/TR/xquery-30/"
         idref="doc-xquery30-FLWORExpr.static-typing"/>
   <link type="spec" document="XQuery" section-number="2.1.1" idref="static_context"/>
   
   <environment name="fsx">
      <source role="." file="ForClause/fsx.xml">
         <description>Data about a filesystem represented in XML.</description>
         <created by="Mike Rorke" on="2003-03-25"/>
      </source>    
   </environment>

   <environment name="fsx_NS">
      <source role="." file="ForClause/fsx_NS.xml">
         <description>Data about a filesystem represented in XMLwith namespace-qualified names .</description>
         <created by="Mike Rorke" on="2003-03-25"/>
      </source>    
   </environment>   
   
   <dependency type="spec" value="XQ10+"/>
   <dependency type="feature" value="staticTyping"/>

   <test-case name="statictyping-21">
      <description> Evaluation of static typing where value of a variable is not set. </description>
      <created by="Carmelo Montanez" on="2006-04-11"/>
      <test>let $x := 1 let $z := $x + $y return $x</test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="statictyping-22">
      <description> Evaluation of static typing where value of a variable is not set. </description>
      <created by="Carmelo Montanez" on="2006-04-11"/>
      <test>declare variable $x := $y + 1; "abc"</test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="statictyping-23">
      <description> Evaluation of static typing where value of a variable is not set. Used in a for clause of a FLOWR expression. </description>
      <created by="Carmelo Montanez" on="2006-07-11"/>
      <test>for $x in (1, 2, 3) for $z in ($x, $y) return $x</test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="statictyping-24">
      <description> Evaluation of static typing feature within a "where" clause. Wrong operand for expression (uses fn:not) </description>
      <created by="Sorin Nasoi" on="2009-04-01"/>
      <test>let $var := ("a","b","c") where fn:not($var) eq fn:true() return $var</test>
      <result>
         <any-of>
            <error code="XPTY0004"/>
            <error code="FORG0006"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="ST-WhereExpr001">
      <description> Test 'where' clause with heterogenous sequences. First item is a node </description>
      <created by="Mike Rorke" on="2005-06-24"/>
      <environment ref="fsx"/>
      <test>for $file in (//Folder)[1]/File where ($file, 1) return $file/FileName</test>
      <result>
         <any-of>
            <error code="XPTY0004"/>
            <error code="FORG0006"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="ST-WhereExpr002">
      <description> Test 'where' clause with heterogenous sequences. First item is a value. </description>
      <created by="Mike Rorke" on="2005-06-24"/>
      <environment ref="fsx"/>
      <test>for $file in (//Folder)[1]/File where (1, $file) return $file/FileName</test>
      <result>
         <any-of>
            <error code="XPTY0004"/>
            <error code="FORG0006"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="statictyping-1">
      <description> Evaluation of static typing feature within a "where" clause. Wrong operand for expression. </description>
      <created by="Carmelo Montanez" on="2005-12-14"/>
      <test>for $var in ("a","b","c") where $var + 1 = 3 return $var</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="statictyping-2">
      <description> Evaluation of static typing feature within a "where" clause. Wrong operand for expression. </description>
      <created by="Carmelo Montanez" on="2005-12-14"/>
      <test>for $var in ("a","b","c") where fn:abs(($var)) return $var</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="statictyping-3">
      <description> Evaluation of static typing feature within a "where" clause. Wrong operand for expression (uses fn:avg). </description>
      <created by="Carmelo Montanez" on="2005-12-14"/>
      <test>for $var in ("a","b","c") where fn:avg(($var,1)) return $var</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="statictyping-4">
      <description> Evaluation of static typing feature within a "where" clause. Wrong operand for expression (uses fn:max). </description>
      <created by="Carmelo Montanez" on="2005-12-14"/>
      <test>for $var in ("a","b","c") where fn:max(($var,1)) return $var</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="statictyping-5">
      <description> Evaluation of static typing feature within a "where" clause. Wrong operand for expression (uses fn:min). </description>
      <created by="Carmelo Montanez" on="2005-12-14"/>
      <test>for $var in ("a","b","c") where fn:min(($var,1)) return $var</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="statictyping-6">
      <description> Evaluation of static typing feature within a "where" clause. Wrong operand for expression (uses fn:sum). </description>
      <created by="Carmelo Montanez" on="2005-12-14"/>
      <test>for $var in ("a","b","c") where fn:sum(($var,1)) return $var</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="statictyping-7">
      <description> Evaluation of static typing feature within a "where" clause. Wrong operand for expression (uses fn:boolean). </description>
      <created by="Carmelo Montanez" on="2005-12-14"/>
      <test>let $var := ("a","b","c") where fn:boolean($var) = fn:true() return $var</test>
      <result>
         <any-of>
            <error code="XPTY0004"/>
            <error code="FORG0006"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="statictyping-8">
      <description> Evaluation of static typing feature within a "where" clause. Wrong operand for expression (uses subtraction expression). </description>
      <created by="Carmelo Montanez" on="2005-12-15"/>
      <test>for $var in ("a","b","c") where ($var - 1) = 3 return $var</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="statictyping-9">
      <description> Evaluation of static typing feature within a "where" clause. Wrong operand for expression (uses multiplication operation). </description>
      <created by="Carmelo Montanez" on="2005-12-15"/>
      <test>for $var in ("a","b","c") where ($var * 1) = 3 return $var</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="statictyping-10">
      <description> Evaluation of static typing feature within a "where" clause. Wrong operand for expression (uses "div" operator). </description>
      <created by="Carmelo Montanez" on="2005-12-15"/>
      <test>for $var in ("a","b","c") where ($var div 2) = 3 return $var</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="statictyping-11">
      <description> Evaluation of static typing feature within a "where" clause. Wrong operand for expression (uses "idiv" operator). </description>
      <created by="Carmelo Montanez" on="2005-12-15"/>
      <test>for $var in ("a","b","c") where ($var idiv 2) = 3 return $var</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="statictyping-12">
      <description> Evaluation of static typing feature within a "where" clause. Wrong operand for expression (uses "mod" operator). </description>
      <created by="Carmelo Montanez" on="2005-12-15"/>
      <test>for $var in ("a","b","c") where ($var mod 2) = 3 return $var</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="statictyping-13">
      <description> Evaluation of static typing feature within a "where" clause. Wrong cardinality for operator (uses eq operator). </description>
      <created by="Carmelo Montanez" on="2005-12-15"/>
      <test>let $var := ("a","b","c") where ($var eq 1) return $var</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="statictyping-14">
      <description> Evaluation of static typing feature within a "where" clause. Wrong cardinality for operator (uses le operator). </description>
      <created by="Carmelo Montanez" on="2005-12-15"/>
      <test>let $var := ("a","b","c") where ($var le 1) return $var</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="statictyping-15">
      <description> Evaluation of static typing feature within a "where" clause. Wrong cardinality for operator (uses lt operator). </description>
      <created by="Carmelo Montanez" on="2005-12-15"/>
      <test>let $var := ("a","b","c") where ($var lt 1) return $var</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="statictyping-16">
      <description> Evaluation of static typing feature within a "where" clause. Wrong cardinality for operator (uses gt operator). </description>
      <created by="Carmelo Montanez" on="2005-12-15"/>
      <test>let $var := ("a","b","c") where ($var gt 1) return $var</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="statictyping-17">
      <description> Evaluation of static typing feature within a "where" clause. Wrong cardinality for operator (uses ne operator). </description>
      <created by="Carmelo Montanez" on="2005-12-15"/>
      <test>let $var := ("a","b","c") where ($var ne 1) return $var</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="statictyping-18">
      <description> Evaluation of static typing feature within a "where" clause. Wrong cardinality for operator (uses "+" operator). </description>
      <created by="Carmelo Montanez" on="2005-12-15"/>
      <test>let $var := (1,2,3) where ($var + 1) return $var</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="statictyping-19">
      <description> Evaluation of static typing feature within a "where" clause. Wrong cardinality for operator (uses "-" operator). </description>
      <created by="Carmelo Montanez" on="2005-12-15"/>
      <test>let $var := (1,2,3) where ($var - 1) return $var</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="statictyping-20">
      <description> Evaluation of static typing feature within a "where" clause. Wrong cardinality for operator (uses "*" operator). </description>
      <created by="Carmelo Montanez" on="2005-12-15"/>
      <test>let $var := (1,2,3) where ($var * 1) return $var</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="ST-PITest-01">
      <description> In LetClause, binding expr's ST must be subtype of variable's ST. Under REC FS, both are 'processing-instruction?', so STA succeeds. Under PER FS, former is 'processing-instruction filesystem?', latter is 'processing-instruction filesytem', so STA fails, raises error. (Note that an implementation that doesn't do STA will not raise an error.) </description>
      <created by="Michael Dyck" on="2010-02-08"/>
      <environment ref="fsx_NS"/>
      <test>(: Description: In LetClause, binding expr's ST must be subtype of variable's ST. Under REC FS, both are 'processing-instruction?', so STA succeeds. Under PER FS, former is 'processing-instruction filesystem?', latter is 'processing-instruction filesytem', so STA fails, raises error. (Note that an implementation that doesn't do STA will not raise an error.) :) let $pi as processing-instruction(filesystem) := (//processing-instruction(filesystem))[1] return $pi</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="ST-PITest-02">
      <description> 
          In LetClause, binding expr's ST must be subtype of variable's ST. 
          Under REC FS, both are 'processing-instruction?', so STA succeeds. 
          Under PER FS, former is 'processing-instruction nonexistent', latter is 'processing-instruction filesytem', so STA fails, raises error. 
          (Note that an implementation that doesn't do STA will not raise an error, because the LetClause isn't evaluated.) 
      </description>
      <created by="Michael Dyck" on="2010-02-08"/>
      <environment ref="fsx_NS"/>
      <test>
        for $pi in //processing-instruction(nonexistent) 
        let $pi2 as processing-instruction(filesystem) := $pi 
        return $pi2</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
</test-set>
