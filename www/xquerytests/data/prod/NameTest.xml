<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="prod-NameTest">
   <description>Tests for the NameTest production</description>
   <link type="spec" document="http://www.w3.org/TR/xquery-30/"
         idref="doc-xquery30-NameTest"/>
   <link type="spec" document="XQuery" section-number="3.2.1.2" idref="node-tests"/>
   
   <environment name="nw_Customers">
      <source role="." file="AxisStep/nw_Customers.xml">
         <description>Customer name/address file with some non-ASCII characters..</description>
         <created by="Kuen Siew" on="2003-03-25"/>
      </source>
   </environment>

   <test-case name="NodeTest003">
      <description> Simple test for * node test </description>
      <created by="Asad Jawahar" on="2003-03-07"/>
      <environment ref="nw_Customers"/>
      <test>/*/*[1]/name()</test>
      <result>
         <assert-string-value>Customers</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="NodeTest004">
      <description> Simple test for . node test </description>
      <created by="Asad Jawahar" on="2003-03-07"/>
      <environment ref="nw_Customers"/>
      <test>/.</test>
      <result>
        <all-of>
            <assert-type>document-node(element(Root))</assert-type>
            <assert>exists($result//Country[.='Poland'])</assert>
        </all-of>
      </result>
   </test-case>

   <test-case name="NodeTest005">
      <description> Simple test for . and * node test </description>
      <created by="Asad Jawahar" on="2003-03-07"/>
      <environment ref="nw_Customers"/>
      <test>/*/.</test>
      <result>
        <all-of>
            <assert-type>element(Root)</assert-type>
            <assert>exists($result//Country[.='Poland'])</assert>
        </all-of>
      </result>
   </test-case>         

   <test-case name="nametest-1">
      <description> Name test that evaluates a child "b" of a newly construted node. </description>
      <created by="Carmelo Montanez" on="2005-12-20"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $var := <a attr1 = "abc1"><b attr2 = "abc2">context2</b></a> return $var/child::*]]></test>
      <result>
         <assert-xml><![CDATA[<b attr2="abc2">context2</b>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="nametest-2">
      <description> Name test that test for "child::b" of a newly construted node. </description>
      <created by="Carmelo Montanez" on="2005-12-20"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $var := <a attr1 = "abc1"><b attr2 = "abc2">context2</b></a> return $var/child::b]]></test>
      <result>
         <assert-xml><![CDATA[<b attr2="abc2">context2</b>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="nametest-3">
      <description> Name test that uses an unknown prefix. </description>
      <created by="Carmelo Montanez" on="2005-12-20"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $var := <a attr1 = "abc1"><b attr2 = "abc2">context2</b></a> return $var/child::pr:b]]></test>
      <result>
         <error code="XPST0081"/>
      </result>
   </test-case>

   <test-case name="nametest-4">
      <description> Name test that uses an unknown prefix. Uses "*". </description>
      <created by="Carmelo Montanez" on="2005-12-20"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $var := <a attr1 = "abc1"><b attr2 = "abc2">context2</b></a> return $var/child::pr:*]]></test>
      <result>
         <error code="XPST0081"/>
      </result>
   </test-case>

   <test-case name="nametest-5">
      <description> Name test that examines "*:b" for a newly constructed element. </description>
      <created by="Carmelo Montanez" on="2005-12-20"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $var := <a attr1 = "abc1"><b attr2 = "abc2">context2</b></a> return $var/child::*:b]]></test>
      <result>
         <assert-xml><![CDATA[<b attr2="abc2">context2</b>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="nametest-6">
      <description> Name test that examines "ns1:b" for a newly constructed element that uses a declared namespace. </description>
      <created by="Carmelo Montanez" on="2005-12-20"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace ns1 = "http://example.org"; let $var := <a attr1 = "abc1"><ns1:b attr2 = "abc2">context2</ns1:b></a> return $var/child::ns1:b]]></test>
      <result>
         <assert-xml><![CDATA[<ns1:b xmlns:ns1="http://example.org" attr2="abc2">context2</ns1:b>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="nametest-7">
      <description> Name test that examines "b" for a newly constructed element. </description>
      <created by="Carmelo Montanez" on="2005-12-20"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $var := <a attr1 = "abc1"><b attr2 = "abc2">context2</b></a> return $var/b]]></test>
      <result>
         <assert-xml><![CDATA[<b attr2="abc2">context2</b>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="nametest-8">
      <description> Name test that examines "b" for a newly constructed element and used as argument to "node-name". </description>
      <created by="Carmelo Montanez" on="2005-12-20"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $var := <a attr1 = "abc1"><b attr2 = "abc2">context2</b></a> return fn:node-name(exactly-one($var/b))]]></test>
      <result>
         <assert-string-value>b</assert-string-value>
      </result>
   </test-case>

   <test-case name="nametest-9">
      <description> Name test that attempts to select non-existent nodes from a newly constructed. Use fn:count to avoid empty file. </description>
      <created by="Carmelo Montanez" on="2005-12-20"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $var := <a attr1 = "abc1"><b attr2 = "abc2">context2</b></a> return fn:count(($var/empty-node-list)[1])]]></test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="nametest-10">
      <description> Name test that selects an "child::b" of a newly created element node and whose namespace URI is declared as the default namespace. </description>
      <created by="Carmelo Montanez" on="2005-12-20"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare default element namespace "http://www.example.org/examples"; let $var := <a attr1 = "abc1"><b attr2 = "abc2">context2</b></a> return fn:namespace-uri(exactly-one($var/child::b))]]></test>
      <result>
         <assert-string-value>http://www.example.org/examples</assert-string-value>
      </result>
   </test-case>

   <test-case name="nametest-11">
      <description> Name test that selects an "child::b" of a newly created element node and whose namespace URI is in no namespace. </description>
      <created by="Carmelo Montanez" on="2005-12-20"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $var := <a attr1 = "abc1"><b attr2 = "abc2">context2</b></a> return fn:count(fn:namespace-uri(exactly-one($var/child::b)))]]></test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="nametest-12">
      <description> Name test that selects an "child::*:day" of an element node used as part of an union operation. </description>
      <created by="Carmelo Montanez" on="2005-12-21"/>
      <environment ref="works-mod"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $var := /works/employee[12]/overtime return $var/child::*:day[1] | $var/child::*:day[2]</test>
      <result>
         <assert-xml><![CDATA[<day>Monday</day><day>Tuesday</day>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="nametest-13">
      <description> Name test that selects an "child::*" and "child::day" (same nodes) of an element node used as part of an intersect operation. </description>
      <created by="Carmelo Montanez" on="2005-12-21"/>
      <environment ref="works-mod"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $var := /works[1]/child::employee[12]/overtime return $var/child::* intersect $var/child::day</test>
      <result>
         <assert-xml><![CDATA[<day>Monday</day><day>Tuesday</day>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="nametest-14">
      <description> Name test that selects an "child::*" and "child::day" (same nodes) of an element node used as part of an except operation. Use fn:count to avoid empty file. </description>
      <created by="Carmelo Montanez" on="2005-12-21"/>
      <environment ref="works-mod"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $var := /works[1]/child::employee[12]/overtime return fn:count($var/child::* except $var/child::day)</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="nametest-15">
      <description> Name test that selects all the children of the context node with "child::*". </description>
      <created by="Carmelo Montanez" on="2005-12-21"/>
      <environment ref="works-mod"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $var := /works return fn:count($var/child::*)</test>
      <result>
         <assert-eq>13</assert-eq>
      </result>
   </test-case>

   <test-case name="nametest-16">
      <description> Name test that selects all the children of the context node with "child::employee". </description>
      <created by="Carmelo Montanez" on="2005-12-21"/>
      <environment ref="works-mod"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $var := /works return fn:count($var/child::employee)</test>
      <result>
         <assert-eq>13</assert-eq>
      </result>
   </test-case>

   <test-case name="nametest-17">
      <description> Name test that selects all the children of the context node with "child::*:employee". </description>
      <created by="Carmelo Montanez" on="2005-12-21"/>
      <environment ref="works-mod"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $var := /works return fn:count($var/child::*:employee)</test>
      <result>
         <assert-eq>13</assert-eq>
      </result>
   </test-case>

   <test-case name="nametest-18">
      <description> Evaluation of a name test, which selects a child that was created using a declared namespace (qualified name). Use "child::*:b" syntax. </description>
      <created by="Carmelo Montanez" on="2005-12-21"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace ns1 = "http://example.org"; let $var := <a attr1 = "abc1"><ns1:b attr2 = "abc2">context2</ns1:b></a> return $var/child::*:b]]></test>
      <result>
         <assert-xml><![CDATA[<ns1:b xmlns:ns1="http://example.org" attr2="abc2">context2</ns1:b>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="K-NameTest-1">
      <description> A nodetest appearing in a wrong place, leading to syntax error. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>1 + remove(("foo", 2), 2)asdasdad</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-NameTest-2">
      <description> '---..---' is an invalid nodetest. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>---..---</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-NameTest-3">
      <description> 'foo-' is an invalid nametest. Whitespace is wrong. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>foo- foo</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-NameTest-4">
      <description> 'nametest : nametest' is a syntactically invalid expression. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>nametest : nametest</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-NameTest-5">
      <description> 'nametest: nametest' is a syntactically invalid expression. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>nametest: nametest</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-NameTest-6">
      <description> 'nametest :nametest' is a syntactically invalid expression. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>nametest :nametest</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-NameTest-7">
      <description> Invalid string literals and nametests mixed, stressing tokenizer and parser code. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>f oo" eq "f oo"</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-NameTest-8">
      <description> Invalid string literals and nametests mixed, stressing tokenizer and parser code. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>"f oo eq "f oo"</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-NameTest-9">
      <description> Invalid string literals and nametests mixed, stressing tokenizer and parser code. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>"f oo" eq f oo"</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-NameTest-10">
      <description> Invalid string literals and nametests mixed, stressing tokenizer and parser code. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>"f oo" eq "f oo</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-NameTest-11">
      <description> Invalid string literals and nametests mixed, stressing tokenizer and parser code. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>normalize-unicode("f oo") eq "f oo</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-1">
      <description> "//" by itself is not a valid path expression. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>//</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-2">
      <description> "/*5" is a syntax error. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>/*5</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-3">
      <description> "/*5" is a syntax error. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>/ * 5</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-4">
      <description> "4 + / * 5" is a syntax error. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>4 + / * 5</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-5">
      <description> A complex expression to parse, taken from W3C's (obsolete) 'Building a Tokenizer for XPath or XQuery' document. The query naturally contains XPTY0004. XPDY0002 is allowed since an implementation may change the default focus from being 'none' to being undefined. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace namespace = "http://example.com"; declare union <union>for gibberish { for $for in for return <for>***div div</for> }</union>, if(if) then then else else- +-++-**-* instance of element(*)* * * **---++div- div -div]]></test>
      <result>
         <any-of>
            <error code="XPTY0004"/>
            <error code="XPDY0002"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-NameTest-6">
      <description> An axis must be specified when ".." is used. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>::ncname</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-7">
      <description> An axis must be specified when ".." is used(#2). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>::local:ncname</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-8">
      <description> "@" by itself is syntactically invalid. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>@</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-9">
      <description> "@" with space is syntactically invalid. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>@</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-10">
      <description> A node test must follow "parent::" is used. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>parent::</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-11">
      <description> No binding existing for a "prefix:*" test. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>no-binding:*</test>
      <result>
         <error code="XPST0081"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-12">
      <description> A nametest being "xml:space". </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare variable $var := <elem xml:space="default"/>; $var/@xml:space eq "default"]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-13">
      <description> A nametest being "xml:*". </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare variable $var := <elem xml:space="preserve"/>; string(($var/@xml:*)[1])]]></test>
      <result>
         <assert-string-value>preserve</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-NameTest-14">
      <description> A nametest being "child::*". </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare variable $var := <elem>text<a/><!-- a comment --><b/><?target data?><c/>]]>&lt;![CDATA[more text]]&gt;&lt;/elem>; $var/child::*</test>
      <result>
         <assert-xml><![CDATA[<a/><b/><c/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="K2-NameTest-15">
      <description> A name test matching many different kinds of nodes. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare variable $e := <a b ="content"><?b asd?><b/><c b="content"/></a>; $e/b]]></test>
      <result>
         <assert-xml><![CDATA[<b/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="K2-NameTest-16">
      <description> A wild-card name test matching only elements. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare variable $e := <a b ="content"><?b asd?><b/></a>; $e/*]]></test>
      <result>
         <assert-xml><![CDATA[<b/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="K2-NameTest-17">
      <description> A name test matching only attributes. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare variable $e := <a b ="content"><?b asd?><b/></a>; <a>{$e/@b}</a>]]></test>
      <result>
         <assert-xml><![CDATA[<a b="content"/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="K2-NameTest-18">
      <description> A wild-card name test matching only attributes. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare variable $e := <a b ="content"><?b asd?><b/></a>; <a>{$e/@*}</a>]]></test>
      <result>
         <assert-xml><![CDATA[<a b="content"/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="K2-NameTest-19">
      <description> A name test matching only processing-instructions. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare variable $e := <a b ="content"><?b asd?><b/></a>; $e/processing-instruction(b)]]></test>
      <result>
         <assert-xml><![CDATA[<?b asd?>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="K2-NameTest-20">
      <description> A wild-card name test matching only processing-instructions. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare variable $e := <a b ="content"><?b asd?><b/></a>; <a>{$e/processing-instruction()}</a>]]></test>
      <result>
         <assert-xml><![CDATA[<a><?b asd?></a>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="K2-NameTest-21">
      <description> A processing-instruction() with an invalid NCName in a string literal. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[empty(let $e := <a b ="content"><?b asd?><b/></a> return $e/processing-instruction("123ncname"))]]></test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-22">
      <description> A processing-instruction() with an invalid NCName in a string literal. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[empty(let $e := <a b ="content"><?b asd?><b/></a> return $e/processing-instruction("b "))]]></test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-23">
      <description> A processing-instruction() with an invalid NCName in a string literal. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[empty(let $e := <a b ="content"><?b asd?><b/></a> return $e/processing-instruction("prefix:b"))]]></test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-24">
      <description> An integer literal cannot be specified as PI name. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<e/>/processing-instruction(1))]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-25">
      <description> A QName cannot be specified as PI name. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<e/>/processing-instruction(prefix:ncname))]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-26">
      <description> A variable reference cannot be specified as PI name. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $name := "ncname" return <e/>/processing-instruction($name))]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-27">
      <description> A variable reference cannot be specified as PI name. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $name := "ncname" return <e/>/processing-instruction($name))]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-28">
      <description> A element name cannot be a string literal, inside element(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<e/>/element("any"))]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-29">
      <description> A element name cannot be a string literal, inside element(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<e/>/attribute("any"))]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-30">
      <description> A element name cannot be a string literal, inside element(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace a = "http://example.com/1"; declare namespace b = "http://example.com/2"; let $e := <e a:n1="content" b:n1="content"> <a:n1/> <b:n1/> <?n1 ?> <n1/> </e> return $e/*:n1]]></test>
      <result>
         <assert-xml><![CDATA[<a:n1 xmlns:b="http://example.com/2" xmlns:a="http://example.com/1"/><b:n1 xmlns:b="http://example.com/2" xmlns:a="http://example.com/1"/><n1 xmlns:b="http://example.com/2" xmlns:a="http://example.com/1"/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="K2-NameTest-31">
      <description> A element name cannot be a string literal, inside element(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace a = "http://example.com/1"; declare namespace b = "http://example.com/2"; let $e := <e a:n1="content" b:n1="content"> <a:n1/> <b:n1/> <?n1 ?> <n1/> </e> return $e/a:*]]></test>
      <result>
         <assert-xml><![CDATA[<a:n1 xmlns:b="http://example.com/2" xmlns:a="http://example.com/1"/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="K2-NameTest-32">
      <description> attribute(name) as part of a step. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<a>{<e foo="content2" bar="content1"/>/attribute(foo)}</a>]]></test>
      <result>
         <assert-xml><![CDATA[<a foo="content2"/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="K2-NameTest-33">
      <description> String literals aren't allowed in schema-element(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>schema-element("quotesAreNotAllowed")</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-34">
      <description> String literals aren't allowed in schema-attribute(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>schema-attribute("quotesAreNotAllowed")</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-35">
      <description> An undeclared prefix inside a name in schema-element() is an error. a little comment </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>schema-element(notDeclared:ncname)</test>
      <result>
         <error code="XPST0081"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-36">
      <description> An undeclared prefix inside a name in schema-attribute() is an error. a little comment </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>schema-attribute(notDeclared:ncname)</test>
      <result>
         <error code="XPST0081"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-37">
      <description> Specifying an unknown type in schema-element() is an error. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>schema-element(thisTypeDoesNotExistExample.Com)</test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-38">
      <description> Specifying an unknown type in schema-attribute() is an error. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>schema-attribute(thisTypeDoesNotExistExample.Com)</test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-39">
      <description> Specifying an unknown type in schema-element() is an error(with namespace). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>declare namespace e = "http://www.example.com/"; schema-element(e:thisTypeDoesNotExistExample.Com)</test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-40">
      <description> Specifying an unknown type in schema-attribute() is an error(with namespace). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>declare namespace e = "http://www.example.com/"; schema-attribute(e:thisTypeDoesNotExistExample.Com)</test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-41">
      <description> Specifying an unknown prefix raises an error. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>unknownprefix:*</test>
      <result>
         <error code="XPST0081"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-42">
      <description> Specifying an unknown prefix raises an error. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>@unknownprefix:*</test>
      <result>
         <error code="XPST0081"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-43">
      <description> The prefix 'xmlns' is not in-scope. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>@xmlns:*</test>
      <result>
         <error code="XPST0081"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-44">
      <description> The prefix 'xmlns' is not in-scope(#2). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>@xmlns:ncname</test>
      <result>
         <error code="XPST0081"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-45">
      <description> The prefix 'xmlns' is not in-scope(#3). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xmlns:ncname</test>
      <result>
         <error code="XPST0081"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-46">
      <description> The prefix 'xmlns' is not in-scope(#4). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xmlns:*</test>
      <result>
         <error code="XPST0081"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-47">
      <description> Use 'xmlns' as an element name test. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare variable $i := <e > <xmlns/> <xmlns/> <xmlns/> <xmlns/> </e>; $i/xmlns]]></test>
      <result>
         <assert-xml><![CDATA[<xmlns/><xmlns/><xmlns/><xmlns/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="K2-NameTest-48">
      <description> Use 'xmlns' as an attribute name test. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare variable $i := <e xmlns="http://example.com/"/>; empty($i/@xmlns)]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-49">
      <description> An child axis applies on a sequence of attributes. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace p = "http://example.com/"; <a>{<e p:a="1" p:b="2" p:c="3"/>/attribute::*/p:*}</a>]]></test>
      <result>
         <any-of>
            <assert-xml><![CDATA[<a></a>]]></assert-xml>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-NameTest-50">
      <description> A '@prefix:*'-test doesn't match element nodes. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace p = "http://example.com/"; <a>{document {<p:e/>}/@p:*}</a>]]></test>
      <result>
         <any-of>
            <assert-xml><![CDATA[<a></a>]]></assert-xml>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-NameTest-51">
      <description> Navigate the child axis of a computed attribute. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<a>{attribute name{"content"}/*}</a>]]></test>
      <result>
         <any-of>
            <assert-xml><![CDATA[<a></a>]]></assert-xml>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-NameTest-52">
      <description> Navigate the child axis of a computed comment. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<a>{comment {"content"}/*}</a>]]></test>
      <result>
         <any-of>
            <assert-xml><![CDATA[<a/>]]></assert-xml>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-NameTest-53">
      <description> Navigate the child axis of a direct comment. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<a>{<!-- a comment -->/*}</a>]]></test>
      <result>
         <any-of>
            <assert-xml><![CDATA[<a/>]]></assert-xml>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-NameTest-54">
      <description> Navigate the child axis of a computed PI. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<a>{processing-instruction name {"content"}/*}</a>]]></test>
      <result>
         <any-of>
            <assert-xml><![CDATA[<a/>]]></assert-xml>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-NameTest-55">
      <description> Navigate the child axis of a direct PI. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<a>{<?target data?>/*}</a>]]></test>
      <result>
         <any-of>
            <assert-xml><![CDATA[<a/>]]></assert-xml>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-NameTest-56">
      <description> A '*:name' as operand to 'eq'. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare variable $a := <e><a/><b/><c/></e>; <a>{$a/*:ncname eq 1}</a>]]></test>
      <result>
         <any-of>
            <assert-xml><![CDATA[<a/>]]></assert-xml>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-NameTest-57">
      <description> A '@*:name' as operand to 'eq'. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare variable $a := <e><a/><b/><c/></e>; <a>{$a/*:ncname eq 1}</a>]]></test>
      <result>
         <any-of>
            <assert-xml><![CDATA[<a/>]]></assert-xml>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-NameTest-58">
      <description> A 'prefix:*' as operand to 'eq'. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace prefix = "http://example.com/"; declare variable $a := <e><a/><b/><c/></e>; <a>{$a/prefix:* eq 1}</a>]]></test>
      <result>
         <any-of>
            <assert-xml><![CDATA[<a/>]]></assert-xml>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-NameTest-59">
      <description> A '@*prefix:*' as operand to 'eq'. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace prefix = "http://example.com/"; declare variable $a := <e><a/><b/><c/></e>; <a>{$a/@prefix:* eq 1}</a>]]></test>
      <result>
         <any-of>
            <assert-xml><![CDATA[<a/>]]></assert-xml>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-NameTest-60">
      <description> Combine the descendant-or-self axis with a processing-instruction test. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare variable $input := <e/>; 
        empty(for $PI as processing-instruction() in $input//processing-instruction() return $PI)]]></test>
      <result>
         <any-of>
            <assert-true/>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-NameTest-61">
      <description> Apply processing-instruction() to the empty sequence. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<e>{for $PI in ()/processing-instruction() return ()}</e>]]></test>
      <result>
         <any-of>
            <assert-xml><![CDATA[<e/>]]></assert-xml>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-NameTest-62">
      <description> Apply processing-instruction() to the result of an element constructor. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<e>{for $PI in <e/>/processing-instruction() return ()}</e>]]></test>
      <result>
         <any-of>
            <assert-xml><![CDATA[<e/>]]></assert-xml>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-NameTest-63">
      <description> Combine the descendant-or-self axis with the child axis. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<x> <x> <y id="0"/> </x> <y id="1"/> </x>/descendant-or-self::x/child::y]]></test>
      <result>
         <assert-xml><![CDATA[<y id="0"/><y id="1"/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="K2-NameTest-64">
      <description> Ensure the axis is correct when using an attribute(*, type) test in the abbreviated axis. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<e>{<e foo="asd"/>/attribute(*, xs:untypedAtomic)}</e>]]></test>
      <result>
         <assert-xml><![CDATA[<e foo="asd"/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="K2-NameTest-65">
      <description> Ensure the axis is correct when using an attribute(name, type) test in the abbreviated axis. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<e>{<e foo="asd"/>/attribute(foo, xs:untypedAtomic)}</e>]]></test>
      <result>
         <assert-xml><![CDATA[<e foo="asd"/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="K2-NameTest-66">
      <description> Use an unbound prefix inside attribute(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<e>{<e foo="asd"/>/attribute(notBound:foo, xs:untypedAtomic)}</e>]]></test>
      <result>
         <error code="XPST0081"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-67">
      <description> Use an unbound prefix inside attribute()(#2). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<e>{<e foo="asd"/>/attribute(foo, notBound:untypedAtomic)}</e>]]></test>
      <result>
         <error code="XPST0081"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-68">
      <description> Use a type with attribute() that doesn't match. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<e>{<e foo="1"/>/attribute(foo, xs:integer)}</e>]]></test>
      <result>
         <any-of>
            <assert-xml><![CDATA[<e/>]]></assert-xml>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-NameTest-69">
      <description> Use a type with attribute() that doesn't exist. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<e>{<e foo="1"/>/attribute(foo, doesNotExistExampleCom)}</e>]]></test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-70">
      <description> Use a type with attribute() that doesn't exist(#2). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<e>{<e foo="1"/>/attribute(foo, xs:doesNotExistExampleCom)}</e>]]></test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-71">
      <description> Use a complex type with attribute(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<e>{<b foo="1"/>/attribute(foo, xs:anyType)}</e>]]></test>
      <result>
         <assert-xml><![CDATA[<e foo="1"/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="K2-NameTest-72">
      <description> Use element() with an unbound prefix. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<e>{<e><b/></e>/element(p:foo)}</e>]]></test>
      <result>
         <error code="XPST0081"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-73">
      <description> Use element() with an unbound prefix(#2). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<e>{<e><b/></e>/element(foo, notBound:type)}</e>]]></test>
      <result>
         <error code="XPST0081"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-74">
      <description> Use element() with a type that doesn't exist. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<e>{<e><b/></e>/element(foo, xs:doesNotExist)}</e>]]></test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-75">
      <description> Use element() with a type that doesn't exist. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<e>{<e><b/></e>/element(foo, doesNotExist)}</e>]]></test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-76">
      <description> Use element() with xs:anyType. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<e><b/></e>/element(b, xs:anyType)]]></test>
      <result>
         <assert-xml><![CDATA[<b/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="K2-NameTest-77">
      <description> Use element() with xs:anyType. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<e><b/></e>/element(b, xs:anyType)]]></test>
      <result>
         <assert-xml><![CDATA[<b/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="K2-NameTest-78">
      <description> Use 'let' as a single name test. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>let</test>
      <result>
         <error code="XPDY0002"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-79">
      <description> Use 'for' as a single name test. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>let</test>
      <result>
         <error code="XPDY0002"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-80">
      <description> Use 'as' as a single name test. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>as</test>
      <result>
         <error code="XPDY0002"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-81">
      <description> Use 'of' as a single name test. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>of</test>
      <result>
         <error code="XPDY0002"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-82">
      <description> A name cannot end with a colon. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>child:</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-83">
      <description> A name test that is equal to a node type name. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>child::element</test>
      <result>
         <error code="XPDY0002"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-84">
      <description> Axis names are reserved function names. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare default function namespace "http://www.example.com/"; declare namespace e = "http://www.example.com/"; declare function element() { 1 }; e:element()</test>
      <result>
         <any-of>
            <assert-eq>1</assert-eq>
            <error code="XPST0003"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-NameTest-85">
      <description> A single '_' is a valid name test. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>_</test>
      <result>
         <error code="XPDY0002"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-86">
      <description> A '_' between letters is a valid name test. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>pod_pod</test>
      <result>
         <error code="XPDY0002"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-87">
      <description> Use a type with attribute() that doesn't exist(#3). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<e>{<e foo="1"/>/attribute(*, doesNotExistExampleCom)}</e>]]></test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-88">
      <description> Use a type with attribute() that doesn't exist(#4). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<e>{<e foo="1"/>/attribute(*, xs:doesNotExistExampleCom)}</e>]]></test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-89">
      <description> Use a type with element() that doesn't exist(#3). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<e>{<e foo="1"/>/attribute(*, doesNotExistExampleCom)}</e>]]></test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>

   <test-case name="K2-NameTest-90">
      <description> Use a type with element() that doesn't exist(#4). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<e>{<e foo="1"/>/attribute(*, xs:doesNotExistExampleCom)}</e>]]></test>
      <result>
         <error code="XPST0008"/>
      </result>
   </test-case>
</test-set>
