<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog"
          name="prod-CompElemConstructor">
   <description>Tests for the CompElemConstructor (Computed Element Constructor) production</description>
   
   <link type="spec" document="http://www.w3.org/TR/xquery-30/"
         idref="doc-xquery30-CompElemConstructor"/>
   <link type="spec" document="XQuery" section-number="3.7.3.1"
         idref="id-computedElements"/>
         
   <environment name="DupNode">
      <source role="." file="CompAttrConstructor/DupNode.xml">
         <description>Simple document with all node kinds</description>
         <created by="Andreas Behm" on="2005-04-26"/>
      </source>
   </environment> 
   
   <environment name="atomicns">
      <source role="." file="../docs/atomicns.xml">
         <description>A non schema validated xml file, that contains values for data types. Can be used by any test.</description>
         <created by="Carmelo Montanez" on="2006-03-15"/>
      </source>
   </environment>
   
   <environment name="TopMany">
      <source role="." file="AxisStep/TopMany.xml">
         <description>Like TreeCompass, but with comments and PIs off the root. PI targets vary.
            All text nodes must have non-whitespace characters.</description>
         <created by="David Marston" on="2003-03-25"/>   
      </source>
   </environment>   
   
   <environment name="acme_corp">
      <source role="." file="../op/union/acme_corp.xml">
         <description>Source document for Function Declaration tests</description>
         <created by="Ravindranath Chennoju" on="2000-01-01"/>
      </source>
   </environment>    
         
   <dependency type="spec" value="XQ10+"/>          

   <test-case name="Constr-compelem-name-1">
      <description> NCName for computed element constructor </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <test>element elem {'text'}</test>
      <result>
         <assert-xml><![CDATA[<elem>text</elem>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="Constr-compelem-name-2">
      <description> QName for computed element constructor </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <test>declare namespace foo="http://www.example.com/foo"; element foo:elem {'text'}</test>
      <result>
         <assert-xml><![CDATA[<foo:elem xmlns:foo="http://www.example.com/foo">text</foo:elem>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="Constr-compelem-name-3">
      <description> QName with undeclared prefix for computed element constructor </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <test>element foo:elem {'text'}</test>
      <result>
         <error code="XPST0081"/>
      </result>
   </test-case>

   <test-case name="Constr-compelem-compname-1">
      <description> empty computed name </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <test>element {()} {'text'}</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="Constr-compelem-compname-2">
      <description> two strings as name </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <test>element {'one', 'two'} {'text'}</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="Constr-compelem-compname-3">
      <description> two untypedAtomic values as name </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <test>element {xs:untypedAtomic('one'), xs:untypedAtomic('two')} {'text'}</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="Constr-compelem-compname-4">
      <description> content of two nodes as name </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <environment ref="DupNode"/>
      <test>element {//a} {'text'}</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="Constr-compelem-compname-5">
      <description> two numeric values as name </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <test>element {1,2} {'text'}</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="Constr-compelem-compname-6">
      <description> numeric value as name </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <test>element {123} {'text'}</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="Constr-compelem-compname-7">
      <description> dataTime value as name </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <test>element {xs:dateTime("1999-05-31T13:20:00")} {'text'}</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="Constr-compelem-compname-8">
      <description> NCName as name </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <environment ref="atomic"/>
      <test>element {//*:NCName[1]} {'text'}</test>
      <result>
         <assert-xml><![CDATA[<aNCname>text</aNCname>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="Constr-compelem-compname-9">
      <description> QName as name </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <test>element {xs:QName('aQname')} {'text'}</test>
      <result>
         <assert-xml><![CDATA[<aQname>text</aQname>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="Constr-compelem-compname-10">
      <description> string as name </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <test>element {'elem'} {'text'}</test>
      <result>
         <assert-xml><![CDATA[<elem>text</elem>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="Constr-compelem-compname-11">
      <description> string as name </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <test>element {'elem', ()} {'text'}</test>
      <result>
         <assert-xml><![CDATA[<elem>text</elem>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="Constr-compelem-compname-12">
      <description> string as name </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <test>element {(), 'elem'} {'text'}</test>
      <result>
         <assert-xml><![CDATA[<elem>text</elem>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="Constr-compelem-compname-13">
      <description> string with prefix as name </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<elem xmlns:foo="http://www.example.com/foo">{element {'foo:elem'} {'text'}}</elem>]]></test>
      <result>
         <assert-xml><![CDATA[<elem xmlns:foo="http://www.example.com/foo"><foo:elem>text</foo:elem></elem>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="Constr-compelem-compname-14">
      <description> string with undeclared prefix as name </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <test>element {'foo:elem'} {}</test>
      <result>
         <error code="XQDY0074"/>
      </result>
   </test-case>

   <test-case name="Constr-compelem-compname-15">
      <description> untyped atomic as name </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <test>element {xs:untypedAtomic('elem')} {'text'}</test>
      <result>
         <assert-xml><![CDATA[<elem>text</elem>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="Constr-compelem-compname-16">
      <description> untyped atomic with prefix as name </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<elem xmlns:foo="http://www.example.com/foo">{element {xs:untypedAtomic('foo:elem')} {'text'}}</elem>]]></test>
      <result>
         <assert-xml><![CDATA[<elem xmlns:foo="http://www.example.com/foo"><foo:elem>text</foo:elem></elem>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="Constr-compelem-compname-17">
      <description> untyped atomic with undeclared prefix as name </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <test>element {xs:untypedAtomic('foo:elem')} {'text'}</test>
      <result>
         <error code="XQDY0074"/>
      </result>
   </test-case>

   <test-case name="Constr-compelem-compname-18">
      <description> non-ncname string as name </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <test>element {'el em'} {'text'}</test>
      <result>
         <error code="XQDY0074"/>
      </result>
   </test-case>

   <test-case name="Constr-compelem-compname-19">
      <description> non-ncname untyped atomic as name </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <test>element {xs:untypedAtomic('el em')} {'text'}</test>
      <result>
         <error code="XQDY0074"/>
      </result>
   </test-case>

   <test-case name="Constr-compelem-adjtext-1">
      <description> merge adjacent atomic values to text node </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <test>count((element elem {1, 'string', 1,2e3})/text())</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="Constr-compelem-adjtext-2">
      <description> merge adjacent atomic values and text nodes to text node </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <environment ref="DupNode"/>
      <test>count((element elem {1, //text(), 'string'})/text())</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="Constr-compelem-adjtext-3">
      <description> merge adjacent atomic values between other nodes to text node </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[count((element elem {1, 2, <a/>, 3, 4, <b/>, 5, 6})/text())]]></test>
      <result>
         <assert-eq>3</assert-eq>
      </result>
   </test-case>

   <test-case name="Constr-compelem-nested-1">
      <description> nested computed element constructors </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <test>element elem {1, element a {2, element b {element c {}, element d {3}}, 4}}</test>
      <result>
         <assert-xml><![CDATA[<elem>1<a>2<b><c/><d>3</d></b>4</a></elem>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="Constr-compelem-nested-2">
      <description> copy node tree into computed element constructor </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <environment ref="DupNode"/>
      <test>element elem {}</test>
      <result>
         <assert-xml><![CDATA[<elem/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="Constr-compelem-enclexpr-1">
      <description> empty computed element content </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <test>element elem {}</test>
      <result>
         <assert-xml><![CDATA[<elem/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="Constr-compelem-enclexpr-2">
      <description> atomic values in computed element content </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <test>element elem {1,'a',3.5,4e2}</test>
      <result>
         <assert-xml><![CDATA[<elem>1 a 3.5 400</elem>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="Constr-compelem-enclexpr-3">
      <description> atomic values and nodes in computed element content </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <environment ref="DupNode"/>
      <test>element elem {1,//a,2,3,//comment(),4,5,//processing-instruction(),6,7,//text(),8}</test>
      <result>
         <assert-xml><![CDATA[<elem>1<a>text</a><a>text</a>2 3<!--comment--><!--comment-->4 5<?pi content?><?pi content?>6 7texttext8</elem>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="Constr-compelem-enclexpr-4">
      <description> empty string in element content </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <test>element elem {1, '', 2}</test>
      <result>
         <assert-xml><![CDATA[<elem>1  2</elem>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="Constr-compelem-nodeid-1">
      <description> Copied element node has new node identity </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[for $x in <a/>, $y in element elem {$x} return exactly-one($y/a) is $x]]></test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="Constr-compelem-nodeid-2">
      <description> Copied attribute node has new node identity </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[for $x in <a b="b"/>, $y in element elem {$x/@b} return $y/@b is $x/@b]]></test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="Constr-compelem-nodeid-3">
      <description> Copied comment node has new node identity </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[for $x in <!--comment-->, $y in element elem {$x} return exactly-one($y/comment()) is $x]]></test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="Constr-compelem-nodeid-4">
      <description> Copied pi node has new node identity </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[for $x in <?pi content?>, $y in element elem {$x} return exactly-one($y/processing-instruction()) is $x]]></test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="Constr-compelem-nodeid-5">
      <description> Copied text node has new node identity </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[for $x in <a>text</a>, $y in element elem {$x/text()} return exactly-one($y/text()) is exactly-one($x/text())]]></test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="Constr-compelem-constrmod-3">
      <description> strip decimal type </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <environment ref="atomicns"/>
      <test>declare construction strip; (element elem {xs:decimal((//decimal[1]))}) cast as xs:integer</test>
      <result>
         <error code="FORG0001"/>
      </result>
   </test-case>

   <test-case name="Constr-compelem-constrmod-4">
      <description> preserve decimal type </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <environment ref="atomicns"/>
      <test>declare construction preserve; (element elem {xs:decimal((//decimal[1]))}) cast as xs:integer</test>
      <result>
         <any-of>
            <assert-eq>12678967</assert-eq>
            <error code="FORG0001"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="Constr-compelem-constrmod-7">
      <description> strip decimal type in attribute </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <environment ref="atomicns"/>
      <test>declare construction strip; (element elem {//*:decimal/@*:attr})/@*:attr cast as xs:integer</test>
      <result>
         <error code="FORG0001"/>
      </result>
   </test-case>

   <test-case name="Constr-compelem-constrmod-8">
      <description> preserve decimal type in attribute </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <environment ref="atomicns"/>
      <test>declare construction preserve; (element elem {xs:decimal(//*:decimal[1]/@*:attr)}) cast as xs:integer</test>
      <result>
         <any-of>
            <assert-eq>12678967</assert-eq>
            <error code="FORG0001"/>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="Constr-compelem-baseuri-1">
      <description> base-uri through xml:base attribute </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <test>fn:base-uri(element elem {attribute xml:base {"http://www.example.com"}})</test>
      <result>
         <assert-string-value>http://www.example.com</assert-string-value>
      </result>
   </test-case>

   <test-case name="Constr-compelem-baseuri-2">
      <description> base-uri through parent </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[fn:base-uri(exactly-one((<elem xml:base="http://www.example.com">{element a {}}</elem>)/a))]]></test>
      <result>
         <assert-string-value>http://www.example.com</assert-string-value>
      </result>
   </test-case>

   <test-case name="Constr-compelem-baseuri-3">
      <description> base-uri through declaration </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <test>declare base-uri "http://www.example.com"; fn:base-uri(element elem {})</test>
      <result>
         <assert-string-value>http://www.example.com</assert-string-value>
      </result>
   </test-case>

   <test-case name="Constr-compelem-doc-1">
      <description> strip document nodes </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <environment ref="DupNode"/>
      <test>element elem {., .}</test>
      <result>
         <assert-xml><![CDATA[<elem><root><child1><a>text</a><!--comment--><?pi content?></child1><child2><a>text</a><!--comment--><?pi content?></child2></root><root><child1><a>text</a><!--comment--><?pi content?></child1><child2><a>text</a><!--comment--><?pi content?></child2></root></elem>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="Constr-compelem-parent-1">
      <description> empty parent </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <test>count((element elem {})/..)</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="Constr-compelem-string-1">
      <description> string value of element </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <test>fn:string(element elem {'a', element a {}, 'b'})</test>
      <result>
         <assert-string-value>ab</assert-string-value>
      </result>
   </test-case>

   <test-case name="Constr-compelem-data-1">
      <description> typed value of element </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <test>fn:data(element elem {'a', element a {}, 'b'})</test>
      <result>
         <assert-string-value>ab</assert-string-value>
      </result>
   </test-case>

   <test-case name="Constr-compelem-attr-1">
      <description> attribute node following atomic value </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <environment ref="TopMany"/>
      <test>element elem {1, //west/@mark}</test>
      <result>
         <error code="XQTY0024"/>
      </result>
   </test-case>

   <test-case name="Constr-compelem-attr-2">
      <description> attribute node following node </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <environment ref="TopMany"/>
      <test>element elem {element a {}, //west/@mark}</test>
      <result>
         <error code="XQTY0024"/>
      </result>
   </test-case>

   <test-case name="Constr-compelem-attr-3">
      <description> attributes in content </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <environment ref="TopMany"/>
      <test>element elem {//west/@mark, //west/@west-attr-1}</test>
      <result>
         <assert-xml><![CDATA[<elem mark="w0" west-attr-1="w1"/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="Constr-compelem-attr-4">
      <description> attribute in content with same name </description>
      <created by="Andreas Behm" on="2005-04-20"/>
      <environment ref="TopMany"/>
      <test>element elem {//west/@mark, //center/@mark}</test>
      <result>
         <error code="XQDY0025"/>
      </result>
   </test-case>

   <test-case name="K2-ComputeConElem-1">
      <description> The name can't be specified as a string literal. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>element "name" {"content"}</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-ComputeConElem-2">
      <description> Simple content that only is empty string in an element constructor. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<elem>{"", "", <e/>, <b></b>}</elem>]]></test>
      <result>
         <assert-xml><![CDATA[<elem> <e/><b/></elem>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="K2-ComputeConElem-3">
      <description> Simple content that only is empty string in an element constructor(#2). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<elem>{<e/>, <b></b>, "", ""}</elem>]]></test>
      <result>
         <assert-xml><![CDATA[<elem><e/><b/> </elem>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="K2-ComputeConElem-4">
      <description> An unbound prefix in a lexical QName yields QDY0074. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>element {"aPrefix:localName"} {"content"}</test>
      <result>
         <error code="XQDY0074"/>
      </result>
   </test-case>

   <test-case name="K2-ComputeConElem-5">
      <description> An unbound prefix in a lexical QName yields QDY0074. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>element {xs:untypedAtomic("aPrefix::localName")} {"content"}</test>
      <result>
         <error code="XQDY0074"/>
      </result>
   </test-case>

   <test-case name="K2-ComputeConElem-6">
      <description> Test the type of the typed value of a computationally constructed element node. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>data(element foo {"dsa"}) instance of xs:untypedAtomic</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-ComputeConElem-7">
      <description> Test the data of the typed value of a computationally constructed element node. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>data(element foo {"dsa"})</test>
      <result>
         <assert-string-value>dsa</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-ComputeConElem-8">
      <description> Check that a directly constructed element gets the right type. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>element e {"content"} instance of element(*, xs:anyType)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-ComputeConElem-9">
      <description> Check that a directly constructed element gets the right type(#2). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <modified by="Michael Kay" on="2011-07-12" change="added option of returning true. The spec requires xs:anyType, but
        xs:untyped is a subtype of xs:anyType, and processors are allowed to assign a subtype of the type required by the spec."/>
      <test>element e {"content"} instance of element(*, xs:untyped)</test>
      <result>
         <any-of>
           <assert-false/>
           <assert-true/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-ComputeConElem-10">
      <description> Check that a directly constructed element gets the right type(#3). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare construction strip; element e {"content"} instance of element(*, xs:untyped)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-ComputeConElem-11">
      <description> Check that a directly constructed element gets the right type, and that the name test fails. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>element e {"content"} instance of element(a, xs:anyType)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="K2-ComputeConElem-12">
      <description> Check that a directly constructed element gets the right type, and that the name test fails(#2). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>declare construction strip; element e {"content"} instance of element(b, xs:untyped)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="K2-ComputeConElem-13">
      <description> Two simple nested constructors. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>element e {element b{()}}</test>
      <result>
         <assert-xml><![CDATA[<e><b/></e>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="K2-ComputeConElem-14">
      <description> Use a technique that sometimes is used for adding namespace nodes. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare function local:addNamespace($argElement as element(), $argPrefix as xs:string, $namespaceURI as xs:string) as element() { 
            element { QName($namespaceURI, concat($argPrefix, ":x")) }{$argElement}/* 
        }; 
        local:addNamespace(<a><b/></a>, "prefix", "http://example.com/")
      ]]></test>
      <result>
         <assert-xml><![CDATA[<a xmlns:prefix="http://example.com/"><b/></a>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="K2-ComputeConElem-15">
      <description> Use the default element, where the name is computed dynamically. </description>
      <created by="Frans Englich" on="2008-01-28"/>
      <environment ref="acme_corp"/>
      <test>
        declare default element namespace "http://example.com/NS"; 
        element {exactly-one((//*)[3])} {}</test>
      <result>
         <assert-xml><![CDATA[<Boston xmlns="http://example.com/NS"/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="comp-elem-bad-name-1">
      <description>3.7.3.1 Computed Element Constructor per XQ.E19 XQDY0096 if namespace prefix is 'xmlns' Mary Holstege </description>
      <created by="Mary Holstege" on="2009-12-10"/>
      <modified by="O'Neil Delpratt" on="2013-06-11" change="Added error cod. Related to bug issue #11434" />
      <test>element {"xmlns:error"} {}</test>
      <result>
         <any-of>
            <error code="XQDY0096"/>
            <error code="XQDY0074"/>
         </any-of>   
      </result>
   </test-case>

   <test-case name="comp-elem-bad-name-2">
      <description>3.7.3.1 Computed Element Constructor per XQ.E19 XQDY0096 if namespace URI is 'http://www.w3.org/2000/xmlns/' Mary Holstege </description>
      <created by="Mary Holstege" on="2009-12-10"/>
      <test>(: 3.7.3.1 Computed Element Constructor per XQ.E19 XQDY0096 if namespace URI is 'http://www.w3.org/2000/xmlns/' Mary Holstege :) element { fn:QName("http://www.w3.org/2000/xmlns/","error")} {}</test>
      <result>
         <error code="XQDY0096"/>
      </result>
   </test-case>

   <test-case name="comp-elem-bad-name-3">
      <description>3.7.3.1 Computed Element Constructor per XQ.E19 XQDY0096 if namespace URI is 'http://www.w3.org/2000/xmlns/' Mary Holstege </description>
      <created by="Mary Holstege" on="2009-12-10"/>
      <test>(: 3.7.3.1 Computed Element Constructor per XQ.E19 XQDY0096 if namespace URI is 'http://www.w3.org/2000/xmlns/' Mary Holstege :) element { fn:QName("http://www.w3.org/2000/xmlns/","foo:error")} {}</test>
      <result>
         <error code="XQDY0096"/>
      </result>
   </test-case>

   <test-case name="comp-elem-bad-name-4" covers="reserved-namespaces">
      <description>3.7.3.1 Computed Element Constructor per XQ.E19 XQDY0096 if namespace prefix is 'xml' and namespace URI is not 'http://www.w3.org/XML/1998/namespace' Mary Holstege </description>
      <created by="Mary Holstege" on="2009-12-10"/>
      <test>(: 3.7.3.1 Computed Element Constructor per XQ.E19 XQDY0096 if namespace prefix is 'xml' and namespace URI is not 'http://www.w3.org/XML/1998/namespace' Mary Holstege :) element { fn:QName("http://example.com/not-XML-uri","xml:error") } {}</test>
      <result>
         <error code="XQDY0096"/>
      </result>
   </test-case>

   <test-case name="comp-elem-bad-name-5" covers="reserved-namespaces">
      <description>3.7.3.1 Computed Element Constructor per XQ.E19 XQDY0096 if namespace prefix is not 'xml' and its namespace URI is 'http://www.w3.org/XML/1998/namespace' Mary Holstege </description>
      <created by="Mary Holstege" on="2009-12-10"/>
      <test>(: 3.7.3.1 Computed Element Constructor per XQ.E19 XQDY0096 if namespace prefix is not 'xml' and its namespace URI is 'http://www.w3.org/XML/1998/namespace' Mary Holstege :) element { fn:QName("http://www.w3.org/XML/1998/namespace","foo:error") } {}</test>
      <result>
         <error code="XQDY0096"/>
      </result>
   </test-case>

   <test-case name="comp-elem-bad-name-6" covers="reserved-namespaces">
      <description>3.7.3.1 Computed Element Constructor per XQ.E19 XQDY0096 if namespace prefix is 'xmlns' Mary Holstege </description>
      <created by="Mary Holstege" on="2010-02-17"/>
      <test>(: 3.7.3.1 Computed Element Constructor per XQ.E19 XQDY0096 if namespace prefix is 'xmlns' Mary Holstege :) element { fn:QName("http://example.com/some-uri","xmlns:error") } {}</test>
      <result>
         <error code="XQDY0096"/>
      </result>
   </test-case>
</test-set>