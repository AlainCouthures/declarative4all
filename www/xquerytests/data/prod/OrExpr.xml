<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="prod-OrExpr">
   <description>Tests for the OrExpr and AndExpr productions</description>
   <link type="spec" document="http://www.w3.org/TR/xquery-30/"
         idref="doc-xquery30-OrExpr"/>
   <link type="spec" document="XQuery" section-number="3.6"
         idref="id-logical-expressions"/>

   <environment name="bib">
      <source role="." file="../docs/bib.xml">
         <description>Data for the the XML Query XMP use cases</description>
         <created by="XQuery WG" on="2005-02-11"/>
      </source>      
   </environment>

   <test-case name="op-logical-and-001">
      <description> Logical 'and' using Boolean values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>false() and false()</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-002">
      <description> Logical 'and' using Boolean values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>true() and false()</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-003">
      <description> Logical 'and' using Boolean values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>false() and true()</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-004">
      <description> Logical 'and' using Boolean values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>true() and true()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-005">
      <description> Logical 'and' using sequences </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>() and ()</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-006">
      <description> Logical 'and' using sequences </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>(1) and ()</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-007">
      <description> Logical 'and' using sequences </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>() and (1)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-008">
      <description> Logical 'and' using sequences </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>(1) and (1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-009">
      <description> Logical 'and' using sequences </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>(0) and ()</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-010">
      <description> Logical 'and' using sequences </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>() and (0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-011">
      <description> Logical 'and' using sequences </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>(0) and (0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-012">
      <description> Logical 'and' using sequences </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>(1) and (0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-013">
      <description> Logical 'and' using sequences </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>(0) and (1)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-014">
      <description> Logical 'and' using sequences </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <environment ref="bib"/>
      <dependency type="spec" value="XQ10+"/>
      <test>(0) and (/bib/book/price/text())</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-015">
      <description> Logical 'and' using sequences </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <environment ref="bib"/>
      <dependency type="spec" value="XQ10+"/>
      <test>(/bib/book/price/text()) and (1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-016">
      <description> Logical 'and' using sequences </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <environment ref="bib"/>
      <dependency type="spec" value="XQ10+"/>
      <test>(/bib/book/price/text()) and (/bib/book/price/text())</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-017">
      <description> Logical 'and' using string values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>"" and ''</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-018">
      <description> Logical 'and' using string values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>"" and 'a'</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-019">
      <description> Logical 'and' using string values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>"0" and ''</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-020">
      <description> Logical 'and' using string values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>"a" and '0'</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-021">
      <description> Logical 'and' using string values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:string("") and xs:string('')</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-022">
      <description> Logical 'and' using string values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:string("") and xs:string('abc')</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-023">
      <description> Logical 'and' using string values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:string("abc") and xs:string('')</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-024">
      <description> Logical 'and' using string values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:string("0") and xs:string('abc')</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-025">
      <description> Logical 'and' using untypedAtomic values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:untypedAtomic('') and xs:untypedAtomic("")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-026">
      <description> Logical 'and' using untypedAtomic values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:untypedAtomic('abc') and xs:untypedAtomic("")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-027">
      <description> Logical 'and' using untypedAtomic values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:untypedAtomic('') and xs:untypedAtomic("0")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-028">
      <description> Logical 'and' using untypedAtomic values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:untypedAtomic('abc') and xs:untypedAtomic("0")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-029">
      <description> Logical 'and' using number values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>0 and 0</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-030">
      <description> Logical 'and' using number values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>0 and 1</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-031">
      <description> Logical 'and' using number values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>1 and 0</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-032">
      <description> Logical 'and' using number values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>0 and -1</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-033">
      <description> Logical 'and' using number values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>-1 and 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-034">
      <description> Logical 'and' using float values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:float(0) and xs:float(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-035">
      <description> Logical 'and' using float values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:float(0) and xs:float(1)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-036">
      <description> Logical 'and' using float values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:float(-1) and xs:float(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-037">
      <description> Logical 'and' using float values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:float(1) and xs:float(-1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-038">
      <description> Logical 'and' using float values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:float('NaN') and xs:float(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-039">
      <description> Logical 'and' using float values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:float('NaN') and xs:float(1)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-040">
      <description> Logical 'and' using float values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:float('NaN') and xs:float('NaN')</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-041">
      <description> Logical 'and' using float values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:float('INF') and xs:float(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-042">
      <description> Logical 'and' using float values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:float('INF') and xs:float(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-043">
      <description> Logical 'and' using float values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:float('INF') and xs:float('NaN')</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-044">
      <description> Logical 'and' using float values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:float('-INF') and xs:float(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-045">
      <description> Logical 'and' using float values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:float('-INF') and xs:float(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-046">
      <description> Logical 'and' using float values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:float('-INF') and xs:float('NaN')</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-047">
      <description> Logical 'and' using float values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:float('-INF') and xs:float('INF')</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-048">
      <description> Logical 'and' using double values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:double(0) and xs:double(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-049">
      <description> Logical 'and' using double values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:double(0) and xs:double(1)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-050">
      <description> Logical 'and' using double values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:double(-1) and xs:double(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-051">
      <description> Logical 'and' using double values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:double(1) and xs:double(-1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-052">
      <description> Logical 'and' using double values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:double('NaN') and xs:double(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-053">
      <description> Logical 'and' using double values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:double('NaN') and xs:double(1)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-054">
      <description> Logical 'and' using double values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:double('NaN') and xs:double('NaN')</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-055">
      <description> Logical 'and' using double values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:double('INF') and xs:double(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-056">
      <description> Logical 'and' using double values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:double('INF') and xs:double(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-057">
      <description> Logical 'and' using double values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:double('INF') and xs:double('NaN')</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-058">
      <description> Logical 'and' using double values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:double('-INF') and xs:double(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-059">
      <description> Logical 'and' using double values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:double('-INF') and xs:double(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-060">
      <description> Logical 'and' using double values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:double('-INF') and xs:double('NaN')</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-061">
      <description> Logical 'and' using double values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:double('-INF') and xs:double('INF')</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-062">
      <description> Logical 'and' using decimal values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:decimal(0) and xs:decimal(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-063">
      <description> Logical 'and' using decimal values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:decimal(0) and xs:decimal(1)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-064">
      <description> Logical 'and' using decimal values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:decimal(-1) and xs:decimal(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-065">
      <description> Logical 'and' using decimal values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:decimal(1) and xs:decimal(-1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-066">
      <description> Logical 'and' using decimal values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:decimal(9.99999999999999999999999999) and xs:decimal(0)</test>
      <result>
         <any-of>
            <assert-false/>
            <error code="FOCA0006"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="op-logical-and-067">
      <description> Logical 'and' using decimal values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:decimal(-123456789.123456789123456789) and xs:decimal(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-068">
      <description> Logical 'and' using decimal values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:decimal(9.99999999999999999999999999) and xs:decimal(-123456789.123456789123456789)</test>
      <result>
         <any-of>
            <assert-true/>
            <error code="FOCA0006"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="op-logical-and-069">
      <description> Logical 'and' using integer values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:integer(0) and xs:integer(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-070">
      <description> Logical 'and' using integer values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:integer(0) and xs:integer(1)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-071">
      <description> Logical 'and' using integer values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:integer(-1) and xs:integer(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-072">
      <description> Logical 'and' using integer values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:integer(1) and xs:integer(-1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-073">
      <description> Logical 'and' using integer values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:integer(99999999999999999) and xs:integer(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-074">
      <description> Logical 'and' using integer values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:integer(-99999999999999999) and xs:integer(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-075">
      <description> Logical 'and' using integer values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:integer(99999999999999999) and xs:integer(-99999999999999999)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-076">
      <description> Logical 'and' using nonPositiveInteger values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:nonPositiveInteger(0) and xs:nonPositiveInteger(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-077">
      <description> Logical 'and' using nonPositiveInteger values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:nonPositiveInteger(0) and xs:nonPositiveInteger(-1)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-078">
      <description> Logical 'and' using nonPositiveInteger values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:nonPositiveInteger(-1) and xs:nonPositiveInteger(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-079">
      <description> Logical 'and' using nonPositiveInteger values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:nonPositiveInteger(-1) and xs:nonPositiveInteger(-1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-080">
      <description> Logical 'and' using nonPositiveInteger values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:nonPositiveInteger(-99999999999999999) and xs:nonPositiveInteger(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-081">
      <description> Logical 'and' using nonPositiveInteger values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:nonPositiveInteger(-1) and xs:nonPositiveInteger(-9999999999)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-082">
      <description> Logical 'and' using nonPositiveInteger values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:nonPositiveInteger(-99999999999999999) and xs:nonPositiveInteger(-99999999999999999)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-083">
      <description> Logical 'and' using nonNegativeInteger values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:nonNegativeInteger(0) and xs:nonNegativeInteger(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-084">
      <description> Logical 'and' using nonNegativeInteger values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:nonNegativeInteger(0) and xs:nonNegativeInteger(1)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-085">
      <description> Logical 'and' using nonNegativeInteger values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:nonNegativeInteger(1) and xs:nonNegativeInteger(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-086">
      <description> Logical 'and' using nonNegativeInteger values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:nonNegativeInteger(1) and xs:nonNegativeInteger(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-087">
      <description> Logical 'and' using nonNegativeInteger values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:nonNegativeInteger(9999999999) and xs:nonNegativeInteger(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-088">
      <description> Logical 'and' using nonNegativeInteger values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:nonNegativeInteger(1) and xs:nonNegativeInteger(99999999999999999)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-089">
      <description> Logical 'and' using nonNegativeInteger values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:nonNegativeInteger(99999999999999999) and xs:nonNegativeInteger(99999999999999999)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-090">
      <description> Logical 'and' using negativeInteger values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:negativeInteger(-1) and xs:negativeInteger(-1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-091">
      <description> Logical 'and' using negativeInteger values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:negativeInteger(-99999999999999999) and xs:negativeInteger(-1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-092">
      <description> Logical 'and' using negativeInteger values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:negativeInteger(-99999999999999999) and xs:negativeInteger(-99999999999999999)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-093">
      <description> Logical 'and' using positiveInteger values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:positiveInteger(1) and xs:positiveInteger(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-094">
      <description> Logical 'and' using positiveInteger values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:positiveInteger(99999999999999999) and xs:positiveInteger(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-095">
      <description> Logical 'and' using positiveInteger values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:positiveInteger(99999999999999999) and xs:positiveInteger(99999999999999999)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-096">
      <description> Logical 'and' using long values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:long(0) and xs:long(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-097">
      <description> Logical 'and' using long values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:long(0) and xs:long(1)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-098">
      <description> Logical 'and' using long values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:long(-1) and xs:long(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-099">
      <description> Logical 'and' using long values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:long(1) and xs:long(-1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-100">
      <description> Logical 'and' using long values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:long(9223372036854775807) and xs:long(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-101">
      <description> Logical 'and' using long values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:long(9223372036854775807) and xs:long(-1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-102">
      <description> Logical 'and' using long values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:long(-99999999999999999) and xs:long(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-103">
      <description> Logical 'and' using long values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:long(-99999999999999999) and xs:long(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-104">
      <description> Logical 'and' using long values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:long(99999999999999999) and xs:long(-99999999999999999)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-105">
      <description> Logical 'and' using unsignedLong values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedLong(0) and xs:unsignedLong(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-106">
      <description> Logical 'and' using unsignedLong values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedLong(0) and xs:unsignedLong(1)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-107">
      <description> Logical 'and' using unsignedLong values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedLong(1) and xs:unsignedLong(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-108">
      <description> Logical 'and' using unsignedLong values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedLong(1) and xs:unsignedLong(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-109">
      <description> Logical 'and' using unsignedLong values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedLong(9223372036854775807) and xs:unsignedLong(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-110">
      <description> Logical 'and' using unsignedLong values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedLong(9223372036854775807) and xs:unsignedLong(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-111">
      <description> Logical 'and' using unsignedLong values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedLong(99999999999999999) and xs:unsignedLong(99999999999999999)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-112">
      <description> Logical 'and' using int values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:int(0) and xs:int(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-113">
      <description> Logical 'and' using int values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:int(0) and xs:int(1)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-114">
      <description> Logical 'and' using int values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:int(-1) and xs:int(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-115">
      <description> Logical 'and' using int values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:int(1) and xs:int(-1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-116">
      <description> Logical 'and' using int values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:int(2147483647) and xs:int(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-117">
      <description> Logical 'and' using int values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:int(2147483647) and xs:int(-1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-118">
      <description> Logical 'and' using int values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:int(-2147483648) and xs:int(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-119">
      <description> Logical 'and' using int values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:int(-2147483648) and xs:int(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-120">
      <description> Logical 'and' using int values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:int(2147483647) and xs:int(-2147483648)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-121">
      <description> Logical 'and' using unsignedInt values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedInt(0) and xs:unsignedInt(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-122">
      <description> Logical 'and' using unsignedInt values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedInt(0) and xs:unsignedInt(1)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-123">
      <description> Logical 'and' using unsignedInt values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedInt(1) and xs:unsignedInt(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-124">
      <description> Logical 'and' using unsignedInt values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedInt(1) and xs:unsignedInt(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-125">
      <description> Logical 'and' using unsignedInt values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedInt(4294967295) and xs:unsignedInt(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-126">
      <description> Logical 'and' using unsignedInt values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedInt(4294967295) and xs:unsignedInt(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-127">
      <description> Logical 'and' using unsignedInt values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedInt(4294967295) and xs:unsignedInt(4294967295)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-128">
      <description> Logical 'and' using short values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:short(0) and xs:short(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-129">
      <description> Logical 'and' using short values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:short(0) and xs:short(1)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-130">
      <description> Logical 'and' using short values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:short(-1) and xs:short(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-131">
      <description> Logical 'and' using short values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:short(1) and xs:short(-1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-132">
      <description> Logical 'and' using short values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:short(32767) and xs:short(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-133">
      <description> Logical 'and' using short values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:short(32767) and xs:short(-1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-134">
      <description> Logical 'and' using short values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:short(-32768) and xs:short(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-135">
      <description> Logical 'and' using short values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:short(-32768) and xs:short(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-136">
      <description> Logical 'and' using short values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:short(32767) and xs:short(-32768)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-137">
      <description> Logical 'and' using unsignedShort values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedShort(0) and xs:unsignedShort(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-138">
      <description> Logical 'and' using unsignedShort values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedShort(0) and xs:unsignedShort(1)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-139">
      <description> Logical 'and' using unsignedShort values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedShort(1) and xs:unsignedShort(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-140">
      <description> Logical 'and' using unsignedShort values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedShort(1) and xs:unsignedShort(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-141">
      <description> Logical 'and' using unsignedShort values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedShort(65535) and xs:unsignedShort(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-142">
      <description> Logical 'and' using unsignedShort values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedShort(65535) and xs:unsignedShort(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-143">
      <description> Logical 'and' using unsignedShort values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedShort(65535) and xs:unsignedShort(65535)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-144">
      <description> Logical 'and' using byte values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:byte(0) and xs:byte(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-145">
      <description> Logical 'and' using byte values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:byte(0) and xs:byte(1)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-146">
      <description> Logical 'and' using byte values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:byte(-1) and xs:byte(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-147">
      <description> Logical 'and' using byte values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:byte(1) and xs:byte(-1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-148">
      <description> Logical 'and' using byte values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:byte(127) and xs:byte(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-149">
      <description> Logical 'and' using byte values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:byte(127) and xs:byte(-1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-150">
      <description> Logical 'and' using byte values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:byte(-128) and xs:byte(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-151">
      <description> Logical 'and' using byte values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:byte(-128) and xs:byte(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-152">
      <description> Logical 'and' using byte values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:byte(127) and xs:byte(-128)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-153">
      <description> Logical 'and' using unsignedByte values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedByte(0) and xs:unsignedByte(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-154">
      <description> Logical 'and' using unsignedByte values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedByte(0) and xs:unsignedByte(1)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-155">
      <description> Logical 'and' using unsignedByte values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedByte(1) and xs:unsignedByte(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-156">
      <description> Logical 'and' using unsignedByte values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedByte(1) and xs:unsignedByte(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-157">
      <description> Logical 'and' using unsignedByte values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedByte(255) and xs:unsignedByte(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-and-158">
      <description> Logical 'and' using unsignedByte values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedByte(255) and xs:unsignedByte(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-and-159">
      <description> Logical 'and' using unsignedByte values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedByte(255) and xs:unsignedByte(255)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-001">
      <description> Logical 'or' using boolean values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>false() or false()</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-or-002">
      <description> Logical 'or' using boolean values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>true() or false()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-003">
      <description> Logical 'or' using boolean values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>false() or true()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-004">
      <description> Logical 'or' using boolean values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>true() or true()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-005">
      <description> Logical 'or' using sequences values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>() or ()</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-or-006">
      <description> Logical 'or' using sequences values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>(1) or ()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-007">
      <description> Logical 'or' using sequences values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>() or (1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-008">
      <description> Logical 'or' using sequences values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>(1) or (1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-009">
      <description> Logical 'or' using sequences values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>(0) or ()</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-or-010">
      <description> Logical 'or' using sequences values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>() or (0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-or-011">
      <description> Logical 'or' using sequences values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>(0) or (0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-or-012">
      <description> Logical 'or' using sequences values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>(1) or (0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-013">
      <description> Logical 'or' using sequences values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>(0) or (1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-014">
      <description> Logical 'or' using sequences values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <environment ref="bib"/>
      <dependency type="spec" value="XQ10+"/>
      <test>(0) or (/bib/book/price/text())</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-015">
      <description> Logical 'or' using sequences values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <environment ref="bib"/>
      <dependency type="spec" value="XQ10+"/>
      <test>(/bib/book/price/text()) or (1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-016">
      <description> Logical 'or' using sequences values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <environment ref="bib"/>
      <dependency type="spec" value="XQ10+"/>
      <test>(/bib/book/price/text()) or (/bib/book/price/text())</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-017">
      <description> Logical 'or' using string values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>"" or ''</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-or-018">
      <description> Logical 'or' using string values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>"" or 'a'</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-019">
      <description> Logical 'or' using string values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>"0" or ''</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-020">
      <description> Logical 'or' using string values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>"a" or '0'</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-021">
      <description> Logical 'or' using string values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:string("") or xs:string('')</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-or-022">
      <description> Logical 'or' using string values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:string("") or xs:string('abc')</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-023">
      <description> Logical 'or' using string values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:string("abc") or xs:string('')</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-024">
      <description> Logical 'or' using string values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:string("0") or xs:string('abc')</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-025">
      <description> Logical 'or' using untypedAtomic values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:untypedAtomic('') or xs:untypedAtomic("")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-or-026">
      <description> Logical 'or' using untypedAtomic values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:untypedAtomic('abc') or xs:untypedAtomic("")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-027">
      <description> Logical 'or' using untypedAtomic values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:untypedAtomic('') or xs:untypedAtomic("0")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-028">
      <description> Logical 'or' using untypedAtomic values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:untypedAtomic('abc') or xs:untypedAtomic("0")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-029">
      <description> Logical 'or' using number values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>0 or 0</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-or-030">
      <description> Logical 'or' using number values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>0 or 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-031">
      <description> Logical 'or' using number values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>1 or 0</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-032">
      <description> Logical 'or' using number values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>0 or -1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-033">
      <description> Logical 'or' using number values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>-1 or 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-034">
      <description> Logical 'or' using float values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:float(0) or xs:float(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-or-035">
      <description> Logical 'or' using float values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:float(0) or xs:float(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-036">
      <description> Logical 'or' using float values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:float(-1) or xs:float(0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-037">
      <description> Logical 'or' using float values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:float(1) or xs:float(-1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-038">
      <description> Logical 'or' using float values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:float('NaN') or xs:float(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-or-039">
      <description> Logical 'or' using float values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:float('NaN') or xs:float(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-040">
      <description> Logical 'or' using float values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:float('NaN') or xs:float('NaN')</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-or-041">
      <description> Logical 'or' using float values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:float('INF') or xs:float(0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-042">
      <description> Logical 'or' using float values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:float('INF') or xs:float(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-043">
      <description> Logical 'or' using float values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:float('INF') or xs:float('NaN')</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-044">
      <description> Logical 'or' using float values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:float('-INF') or xs:float(0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-045">
      <description> Logical 'or' using float values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:float('-INF') or xs:float(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-046">
      <description> Logical 'or' using float values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:float('-INF') or xs:float('NaN')</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-047">
      <description> Logical 'or' using float values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:float('-INF') or xs:float('INF')</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-048">
      <description> Logical 'or' using double values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:double(0) or xs:double(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-or-049">
      <description> Logical 'or' using double values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:double(0) or xs:double(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-050">
      <description> Logical 'or' using double values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:double(-1) or xs:double(0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-051">
      <description> Logical 'or' using double values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:double(1) or xs:double(-1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-052">
      <description> Logical 'or' using double values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:double('NaN') or xs:double(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-or-053">
      <description> Logical 'or' using double values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:double('NaN') or xs:double(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-054">
      <description> Logical 'or' using double values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:double('NaN') or xs:double('NaN')</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-or-055">
      <description> Logical 'or' using double values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:double('INF') or xs:double(0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-056">
      <description> Logical 'or' using double values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:double('INF') or xs:double(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-057">
      <description> Logical 'or' using double values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:double('INF') or xs:double('NaN')</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-058">
      <description> Logical 'or' using double values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:double('-INF') or xs:double(0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-059">
      <description> Logical 'or' using double values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:double('-INF') or xs:double(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-060">
      <description> Logical 'or' using double values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:double('-INF') or xs:double('NaN')</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-061">
      <description> Logical 'or' using double values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:double('-INF') or xs:double('INF')</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-062">
      <description> Logical 'or' using decimal values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:decimal(0) or xs:decimal(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-or-063">
      <description> Logical 'or' using decimal values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:decimal(0) or xs:decimal(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-064">
      <description> Logical 'or' using decimal values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:decimal(-1) or xs:decimal(0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-065">
      <description> Logical 'or' using decimal values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:decimal(1) or xs:decimal(-1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-066">
      <description> Logical 'or' using decimal values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:decimal(9.99999999999999999999999999) or xs:decimal(0)</test>
      <result>
         <any-of>
            <assert-true/>
            <error code="FOCA0006"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="op-logical-or-067">
      <description> Logical 'or' using decimal values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:decimal(-123456789.123456789123456789) or xs:decimal(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-068">
      <description> Logical 'or' using decimal values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:decimal(9.99999999999999999999999999) or xs:decimal(-123456789.123456789123456789)</test>
      <result>
         <any-of>
            <assert-true/>
            <error code="FOCA0006"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="op-logical-or-069">
      <description> Logical 'or' using integer values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:integer(0) or xs:integer(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-or-070">
      <description> Logical 'or' using integer values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:integer(0) or xs:integer(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-071">
      <description> Logical 'or' using integer values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:integer(-1) or xs:integer(0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-072">
      <description> Logical 'or' using integer values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:integer(1) or xs:integer(-1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-073">
      <description> Logical 'or' using integer values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:integer(99999999999999999) or xs:integer(0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-074">
      <description> Logical 'or' using integer values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:integer(-99999999999999999) or xs:integer(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-075">
      <description> Logical 'or' using integer values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:integer(99999999999999999) or xs:integer(-99999999999999999)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-076">
      <description> Logical 'or' using nonPositiveInteger values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:nonPositiveInteger(0) or xs:nonPositiveInteger(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-or-077">
      <description> Logical 'or' using nonPositiveInteger values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:nonPositiveInteger(0) or xs:nonPositiveInteger(-1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-078">
      <description> Logical 'or' using nonPositiveInteger values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:nonPositiveInteger(-1) or xs:nonPositiveInteger(0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-079">
      <description> Logical 'or' using nonPositiveInteger values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:nonPositiveInteger(-1) or xs:nonPositiveInteger(-1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-080">
      <description> Logical 'or' using nonPositiveInteger values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:nonPositiveInteger(-99999999999999999) or xs:nonPositiveInteger(0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-081">
      <description> Logical 'or' using nonPositiveInteger values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:nonPositiveInteger(-1) or xs:nonPositiveInteger(-99999999999999999)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-082">
      <description> Logical 'or' using nonPositiveInteger values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:nonPositiveInteger(-99999999999999999) or xs:nonPositiveInteger(-99999999999999999)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-083">
      <description> Logical 'or' using nonNegativeInteger values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:nonNegativeInteger(0) or xs:nonNegativeInteger(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-or-084">
      <description> Logical 'or' using nonNegativeInteger values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:nonNegativeInteger(0) or xs:nonNegativeInteger(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-085">
      <description> Logical 'or' using nonNegativeInteger values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:nonNegativeInteger(1) or xs:nonNegativeInteger(0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-086">
      <description> Logical 'or' using nonNegativeInteger values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:nonNegativeInteger(1) or xs:nonNegativeInteger(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-087">
      <description> Logical 'or' using nonNegativeInteger values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:nonNegativeInteger(99999999999999999) or xs:nonNegativeInteger(0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-088">
      <description> Logical 'or' using nonNegativeInteger values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:nonNegativeInteger(1) or xs:nonNegativeInteger(99999999999999999)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-089">
      <description> Logical 'or' using nonNegativeInteger values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:nonNegativeInteger(99999999999999999) or xs:nonNegativeInteger(99999999999999999)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-090">
      <description> Logical 'or' using negativeInteger values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:negativeInteger(-1) or xs:negativeInteger(-1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-091">
      <description> Logical 'or' using negativeInteger values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:negativeInteger(-99999999999999999) or xs:negativeInteger(-1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-092">
      <description> Logical 'or' using negativeInteger values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:negativeInteger(-99999999999999999) or xs:negativeInteger(-99999999999999999)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-093">
      <description> Logical 'or' using positiveInteger values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:positiveInteger(1) or xs:positiveInteger(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-094">
      <description> Logical 'or' using positiveInteger values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:positiveInteger(99999999999999999) or xs:positiveInteger(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-095">
      <description> Logical 'or' using positiveInteger values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:positiveInteger(99999999999999999) or xs:positiveInteger(99999999999999999)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-096">
      <description> Logical 'or' using long values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:long(0) or xs:long(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-or-097">
      <description> Logical 'or' using long values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:long(0) or xs:long(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-098">
      <description> Logical 'or' using long values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:long(-1) or xs:long(0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-099">
      <description> Logical 'or' using long values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:long(1) or xs:long(-1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-100">
      <description> Logical 'or' using long values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:long(9223372036854775807) or xs:long(0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-101">
      <description> Logical 'or' using long values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:long(9223372036854775807) or xs:long(-1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-102">
      <description> Logical 'or' using long values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:long(-99999999999999999) or xs:long(0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-103">
      <description> Logical 'or' using long values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:long(-99999999999999999) or xs:long(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-104">
      <description> Logical 'or' using long values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:long(99999999999999999) or xs:long(-99999999999999999)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-105">
      <description> Logical 'or' using unsignedLong values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedLong(0) or xs:unsignedLong(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-or-106">
      <description> Logical 'or' using unsignedLong values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedLong(0) or xs:unsignedLong(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-107">
      <description> Logical 'or' using unsignedLong values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedLong(1) or xs:unsignedLong(0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-108">
      <description> Logical 'or' using unsignedLong values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedLong(1) or xs:unsignedLong(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-109">
      <description> Logical 'or' using unsignedLong values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedLong(9223372036854775807) or xs:unsignedLong(0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-110">
      <description> Logical 'or' using unsignedLong values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedLong(9223372036854775807) or xs:unsignedLong(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-111">
      <description> Logical 'or' using unsignedLong values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedLong(99999999999999999) or xs:unsignedLong(99999999999999999)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-112">
      <description> Logical 'or' using int values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:int(0) or xs:int(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-or-113">
      <description> Logical 'or' using int values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:int(0) or xs:int(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-114">
      <description> Logical 'or' using int values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:int(-1) or xs:int(0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-115">
      <description> Logical 'or' using int values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:int(1) or xs:int(-1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-116">
      <description> Logical 'or' using int values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:int(2147483647) or xs:int(0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-117">
      <description> Logical 'or' using int values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:int(2147483647) or xs:int(-1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-118">
      <description> Logical 'or' using int values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:int(-2147483648) or xs:int(0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-119">
      <description> Logical 'or' using int values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:int(-2147483648) or xs:int(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-120">
      <description> Logical 'or' using int values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:int(2147483647) or xs:int(-2147483648)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-121">
      <description> Logical 'or' using unsignedInt values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedInt(0) or xs:unsignedInt(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-or-122">
      <description> Logical 'or' using unsignedInt values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedInt(0) or xs:unsignedInt(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-123">
      <description> Logical 'or' using unsignedInt values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedInt(1) or xs:unsignedInt(0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-124">
      <description> Logical 'or' using unsignedInt values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedInt(1) or xs:unsignedInt(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-125">
      <description> Logical 'or' using unsignedInt values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedInt(4294967295) or xs:unsignedInt(0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-126">
      <description> Logical 'or' using unsignedInt values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedInt(4294967295) or xs:unsignedInt(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-127">
      <description> Logical 'or' using unsignedInt values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedInt(4294967295) or xs:unsignedInt(4294967295)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-128">
      <description> Logical 'or' using short values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:short(0) or xs:short(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-or-129">
      <description> Logical 'or' using short values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:short(0) or xs:short(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-130">
      <description> Logical 'or' using short values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:short(-1) or xs:short(0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-131">
      <description> Logical 'or' using short values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:short(1) or xs:short(-1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-132">
      <description> Logical 'or' using short values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:short(32767) or xs:short(0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-133">
      <description> Logical 'or' using short values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:short(32767) or xs:short(-1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-134">
      <description> Logical 'or' using short values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:short(-32768) or xs:short(0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-135">
      <description> Logical 'or' using short values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:short(-32768) or xs:short(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-136">
      <description> Logical 'or' using short values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:short(32767) or xs:short(-32768)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-137">
      <description> Logical 'or' using unsignedShort values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedShort(0) or xs:unsignedShort(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-or-138">
      <description> Logical 'or' using unsignedShort values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedShort(0) or xs:unsignedShort(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-139">
      <description> Logical 'or' using unsignedShort values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedShort(1) or xs:unsignedShort(0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-140">
      <description> Logical 'or' using unsignedShort values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedShort(1) or xs:unsignedShort(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-141">
      <description> Logical 'or' using unsignedShort values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedShort(65535) or xs:unsignedShort(0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-142">
      <description> Logical 'or' using unsignedShort values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedShort(65535) or xs:unsignedShort(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-143">
      <description> Logical 'or' using unsignedShort values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedShort(65535) or xs:unsignedShort(65535)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-144">
      <description> Logical 'or' using byte values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:byte(0) or xs:byte(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-or-145">
      <description> Logical 'or' using byte values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:byte(0) or xs:byte(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-146">
      <description> Logical 'or' using byte values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:byte(-1) or xs:byte(0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-147">
      <description> Logical 'or' using byte values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:byte(1) or xs:byte(-1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-148">
      <description> Logical 'or' using byte values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:byte(127) or xs:byte(0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-149">
      <description> Logical 'or' using byte values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:byte(127) or xs:byte(-1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-150">
      <description> Logical 'or' using byte values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:byte(-128) or xs:byte(0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-151">
      <description> Logical 'or' using byte values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:byte(-128) or xs:byte(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-152">
      <description> Logical 'or' using byte values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:byte(127) or xs:byte(-128)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-153">
      <description> Logical 'or' using unsignedByte values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedByte(0) or xs:unsignedByte(0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-logical-or-154">
      <description> Logical 'or' using unsignedByte values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedByte(0) or xs:unsignedByte(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-155">
      <description> Logical 'or' using unsignedByte values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedByte(1) or xs:unsignedByte(0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-156">
      <description> Logical 'or' using unsignedByte values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedByte(1) or xs:unsignedByte(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-157">
      <description> Logical 'or' using unsignedByte values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedByte(255) or xs:unsignedByte(0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-158">
      <description> Logical 'or' using unsignedByte values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedByte(255) or xs:unsignedByte(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-logical-or-159">
      <description> Logical 'or' using unsignedByte values </description>
      <created by="Lalith Kumar" on="2005-05-19"/>
      <dependency type="spec" value="XQ10+"/>
      <test>xs:unsignedByte(255) or xs:unsignedByte(255)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-1">
      <description> A test whose essence is: `not("" or 0)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not("" or 0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-2">
      <description> A test whose essence is: `not(0 or 0)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not(0 or 0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-3">
      <description> A test whose essence is: `not(0 or 0)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not(0 or 0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-4">
      <description> A test whose essence is: `not("" or 0)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not("" or 0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-5">
      <description> A test whose essence is: `1 or 1`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>1 or 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-6">
      <description> A test whose essence is: `1 or 0`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>1 or 0</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-7">
      <description> A test whose essence is: `1 or 5`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>1 or 5</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-8">
      <description> Non-empty xs:anyURIs in the left branch of an or-expression has an EBV value of true. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:anyURI("example.com/") or 0</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-9">
      <description> Non-empty xs:anyURIs in the right branch of an or-expression has an EBV value of true. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>0 or xs:anyURI("example.com/")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-10">
      <description> Non-empty xs:anyURIs in the left branch of an or-expression has an EBV value of true. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not(xs:anyURI("") or 0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-11">
      <description> Non-empty xs:anyURIs in the right branch of an or-expression has an EBV value of true. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not(0 or xs:anyURI(""))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-12">
      <description> Non-empty xs:untypedAtomics in the left branch of an or-expression has an EBV value of true. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:untypedAtomic("a string") or 0</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-13">
      <description> Non-empty xs:untypedAtomics in the right branch of an or-expression has an EBV value of true. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>0 or xs:untypedAtomic("a string")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-14">
      <description> A test whose essence is: `true() or (0, current-time())[1] treat as xs:integer`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>true() or (0, current-time())[1] treat as xs:integer</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-15">
      <description> A test whose essence is: `(0, current-time())[1] treat as xs:integer or true()`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>(0, current-time())[1] treat as xs:integer or true()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-16">
      <description> An 'or' expression having an operand which EBV cannot be extracted from. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>current-date() or 0</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-17">
      <description> An 'or' expression having an operand which EBV cannot be extracted from. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>0 or current-date()</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-18">
      <description> An 'or' expression whose operands EBV cannot be extracted from. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>current-date() or current-date()</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-19">
      <description> An 'and' expression having an operand which EBV cannot be extracted from. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>current-date() and current-date()</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-20">
      <description> An 'and' expression having an operand which EBV cannot be extracted from. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>1 and current-date()</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-21">
      <description> An 'and' expression whose operands EBV cannot be extracted from. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>current-date() and 1</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-22">
      <description> An and-test applied on fn:count(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count((1, 2, 3, timezone-from-time(current-time()), 4)) or false()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-23">
      <description> An or-test applied on fn:count(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>false() or count((1, 2, 3, timezone-from-time(current-time()), 4))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-24">
      <description> An or-test applied on fn:count(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count((1, 2, 3, timezone-from-time(current-time()), 4)) or count((1, 2, 3, timezone-from-time(current-time()), 4))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-25">
      <description> or expression combined with fn:boolean(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>boolean((1, 2, 3, current-time())[1] treat as xs:integer) or boolean((1, 2, 3, current-time())[1] treat as xs:integer)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-26">
      <description> and expression combined or fn:boolean(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>boolean((1, 2, 3, current-time())[1] treat as xs:integer) and true()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-27">
      <description> or expression combined with fn:boolean(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>true() or boolean((1, 2, 3, current-time())[1] treat as xs:integer)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-28">
      <description> A test whose essence is: `not("" and 0)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not("" and 0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-29">
      <description> A test whose essence is: `1 and 1`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>1 and 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-30">
      <description> A test whose essence is: `10.3 and "non-zero length string"`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>10.3 and "non-zero length string"</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-31">
      <description> A test whose essence is: `1 and 5`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>1 and 5</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-32">
      <description> A test whose essence is: `not((1, current-time())[1] treat as xs:integer and false())`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not((1, current-time())[1] treat as xs:integer and false())</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-33">
      <description> A test whose essence is: `not(false() and (1, current-time())[1] treat as xs:integer)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not(false() and (1, current-time())[1] treat as xs:integer)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-34">
      <description> Non-empty xs:anyURIs have an EBV value of true. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:anyURI("example.com/") and xs:anyURI("example.com/")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-35">
      <description> Empty xs:anyURIs have an EBV value of false. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not(xs:anyURI("example.com/") and xs:anyURI(""))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-36">
      <description> Empty xs:anyURIs have an EBV value of false. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not(xs:anyURI("") and xs:anyURI("example.com/"))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-37">
      <description> Non-empty xs:untypedAtomics have an EBV value of true. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:untypedAtomic("a string") and xs:untypedAtomic("a string")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-38">
      <description> Empty xs:untypedAtomics have an EBV value of false. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not(xs:untypedAtomic("a string") and xs:untypedAtomic(""))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-39">
      <description> An and-test applied on fn:count(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count((1, 2, 3, timezone-from-time(current-time()), 4)) and true()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-40">
      <description> An and-test applied on fn:count(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>true() and count((1, 2, 3, timezone-from-time(current-time()), 4))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-41">
      <description> An and-test applied on fn:count(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count((1, 2, 3, timezone-from-time(current-time()), 4)) and count((1, 2, 3, timezone-from-time(current-time()), 4))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-42">
      <description> and-expression combined with fn:boolean(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>boolean((1, 2, 3, current-time())[1] treat as xs:integer) and boolean((1, 2, 3, current-time())[1] treat as xs:integer)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-43">
      <description> and-expression combined with fn:boolean(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>boolean((1, 2, 3, current-time())[1] treat as xs:integer) and true()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-44">
      <description> and-expression combined with fn:boolean(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>true() and boolean((1, 2, 3, current-time())[1] treat as xs:integer)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-45">
      <description> A test whose essence is: `"a string is ok" and QName("", "local")`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>"a string is ok" and QName("", "local")</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="K-LogicExpr-46">
      <description> A test whose essence is: `"a string is ok" or QName("", "local")`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>"a string is ok" or QName("", "local")</test>
      <result>
         <any-of>
            <assert-true/>
            <error code="FORG0006"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-LogicExpr-1">
      <description> Keywords are case-sensitive. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>1 OR 0</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-LogicExpr-2">
      <description> Keywords are case-sensitive. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>1 AND 0</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>
      
   <test-case name="cbcl-logical-and-002">
      <description> test logical and </description>
      <created by="Tim Mills" on="2008-04-11"/>
      <dependency type="spec" value="XQ10+"/>      
      <test>declare function local:times-table($n as xs:integer) as xs:integer* { for $x in 1 to 12 return $x * $n }; (every $x in local:times-table(15) satisfies ($x mod 3 eq 0)) and (every $y in local:times-table(15) satisfies ($y mod 5 eq 0))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="cbcl-logical-and-003">
      <description> test logical and </description>
      <created by="Tim Mills" on="2008-04-11"/>
      <dependency type="spec" value="XQ10+"/>      
      <test>declare function local:factorial($n as xs:integer) as xs:integer { if ($n le 1) then 1 else $n * local:factorial($n - 1) }; declare function local:is-divisible($n as xs:integer, $d as xs:integer) { $n mod $d eq 0 }; not(local:is-divisible(local:factorial(5), 3)) and not(local:is-divisible(local:factorial(5), 2))</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-logical-or-001">
      <description> test logical or </description>
      <created by="Tim Mills" on="2008-04-11"/>
      <dependency type="spec" value="XQ10+"/>      
      <test>declare function local:times-table($n as xs:integer) as xs:integer* { for $x in 1 to 12 return $x * $n }; (some $x in local:times-table(15) satisfies ($x mod 2 eq 0)) or (some $y in local:times-table(15) satisfies ($y mod 3 eq 0))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="cbcl-logical-or-002">
      <description> test logical or </description>
      <created by="Tim Mills" on="2008-04-11"/>
      <dependency type="spec" value="XQ10+"/>
      <test>declare function local:factorial($n as xs:integer) as xs:integer? { if ($n lt 1) then () else if ($n eq 1) then 1 else $n * local:factorial($n - 1) }; (every $x in local:factorial(5) satisfies ($x mod 3 eq 0)) or (every $y in local:factorial(5) satisfies ($y mod 5 eq 0))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="cbcl-logical-or-003">
      <description> test logical or </description>
      <created by="Tim Mills" on="2008-04-11"/>
      <dependency type="spec" value="XQ10+"/>     
      <test>declare function local:factorial($n as xs:integer) as xs:integer { if ($n le 1) then 1 else $n * local:factorial($n - 1) }; declare function local:is-divisible($n as xs:integer, $d as xs:integer) { $n mod $d eq 0 }; not(local:is-divisible(local:factorial(5), 3)) or not(local:is-divisible(local:factorial(5), 2))</test>
      <result>
         <assert-false/>
      </result>
   </test-case>
</test-set>