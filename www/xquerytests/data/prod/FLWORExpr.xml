<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="prod-FLWORExpr">
   <description>Tests for the FLWORExpr production</description>
   <link type="spec" document="http://www.w3.org/TR/xquery-30/"
         idref="doc-xquery30-FLWORExpr"/>
   <link type="spec" document="XQuery" section-number="3.8.1" idref="id-for-let"/>
   
   <environment name="SpecialTypes">
      <source role="." file="ForClause/SpecialTypes.xml" validation="strict">
         <description>A Schema validated XML file containing certain special types e.g. interleave types, union types, anySimpleType</description>
         <created by="Mike Rorke" on="2005-06-01"/>
      </source>
      <schema uri="http://www.example.com/typedecl" file="ForClause/SpecialTypes.xsd">
         <description >A Schema containing certain special types e.g. interleave types, union types, anySimpleType</description>
         <created by="Mike Rorke" on="2005-06-01"/>
      </schema>
   </environment>
   
   <environment name="orderData">
      <source role="." file="OrderByClause/orderData.xml" validation="strict">
         <description>A Schema validated xml file, that contains values for some of the order by tests generated by NIST.</description>
         <created by="Carmelo Montanez" on="2005-06-01"/>
      </source>
      <schema uri="http://www.w3.org/XQueryTestOrderBy" file="OrderByClause/orderData.xsd">
         <description>A Schema for orderData.xml</description>
         <created by="Carmelo Montanez" on="2005-06-01"/>
      </schema>
   </environment>
   
   <environment name="extendedTypes">
      <source role="." file="FLWORExpr/extendedTypes.xml" validation="strict">
         <description>A Schema validated xml file, that contains values for some of the order by tests generated by NIST.</description>
         <created by="Oliver Hallam" on="2010-03-17"/>
      </source>
      <schema uri="http://www.example.com/XQueryTest/extendedTypes" file="FLWORExpr/extendedTypes.xsd">
		  <description>Schema containing extended and restricted types.</description>
		  <created by="Oliver Hallam" on="2010-03-17"/>
	  </schema>
   </environment>
   
   <dependency type="spec" value="XQ10+"/>
   <dependency type="feature" value="schemaImport"/>
   
   <test-case name="ForExprType010">
      <description> FLWOR with type expression matching a type from the schema </description>
      <created by="Mike Rorke" on="2005-06-27"/>
      <modified by="O'Neil Delpratt" on="2013-05-01" change="Added alternative result. See bug issue #21619" />
      <environment ref="orderData"/>
      <test>
        import schema namespace xqt="http://www.w3.org/XQueryTestOrderBy"; 
        for $num as xs:decimal in data( /xqt:DataValues/xqt:NegativeNumbers/xqt:orderData ) 
        return $num
      </test>
      <result>
          <any-of>
            <assert-string-value>-100000000000000000 -10000000000000000 -1000000000000000 -100000000000000 -10000000000000 -1000000000000 -100000000000 -10000000000 -1000000000 -100000000 -10000000 -1000000 -100000 -10000 -1000 -100 -10 -1 0</assert-string-value>
            <assert-string-value>-100000000000000000 -10000000000000000 -1000000000000000 -100000000000000 -10000000000000 -1000000000000 -100000000000 -10000000000 -1000000000 -100000000 -10000000 -1000000 -100000 -10000 -1000 -100 -10 -1 -0</assert-string-value>
          </any-of>
      </result>
   </test-case>

   <test-case name="ForExprType025">
      <description> FLWOR expressions with type declaration (attribute type). Interleave type integer|decimal -&gt; decimal </description>
      <created by="Mike Rorke" on="2005-09-13"/>
      <environment ref="SpecialTypes"/>
      <test>
        import schema default element namespace "http://www.example.com/typedecl";
        for $test as attribute(*,xs:decimal) in ( /root/InterleaveType2/@integer, /root/InterleaveType2/@decimal ) return data( $test )</test>
      <result>
         <assert-string-value>10 20</assert-string-value>
      </result>
   </test-case>

   <test-case name="ForExprType026">
      <description> FLWOR expressions with type declaration (attribute type). Match user defined simple type on attribute </description>
      <created by="Mike Rorke" on="2005-09-13"/>
      <environment ref="SpecialTypes"/>
      <test>import schema default element namespace "http://www.example.com/typedecl";
            for $test as attribute( att,Enumeration ) in /root/UserDefinedSimpleTypeAttribute/@att return data( $test )</test>
      <result>
         <assert-string-value>ok</assert-string-value>
      </result>
   </test-case>

   <test-case name="ForExprType027">
      <description> FLWOR expressions with type declaration (attribute type). Wildcard match on user defined simple type on attribute </description>
      <created by="Mike Rorke" on="2005-09-13"/>
      <environment ref="SpecialTypes"/>
      <test>import schema default element namespace "http://www.example.com/typedecl";
            for $test as attribute( *,Enumeration ) in /root/UserDefinedSimpleTypeAttribute/@att return data( $test )</test>
      <result>
         <assert-string-value>ok</assert-string-value>
      </result>
   </test-case>

   <test-case name="ForExprType037">
      <description> FLWOR expressions with type declaration (element type). Simple element name test (no type) </description>
      <created by="Mike Rorke" on="2005-09-13"/>
      <environment ref="SpecialTypes"/>
      <test>import schema default element namespace "http://www.example.com/typedecl";
            for $test as element(decimal) in /root/InterleaveType/decimal return $test</test>
      <result>
         <assert-xml><![CDATA[<decimal xmlns="http://www.example.com/typedecl">20</decimal>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="ForExprType038">
      <description> FLWOR expressions with type declaration (element type). Match complex, user defined type </description>
      <created by="Mike Rorke" on="2005-09-13"/>
      <environment ref="SpecialTypes"/>
      <test>import schema default element namespace "http://www.example.com/typedecl";
            for $test as element(InterleaveType,InterleaveType) in /root/InterleaveType return $test</test>
      <result>
         <assert-xml><![CDATA[<InterleaveType xmlns="http://www.example.com/typedecl"><integer>10</integer><decimal>20</decimal></InterleaveType>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="ForExprType039">
      <description> FLWOR expressions with type declaration (element type). Wildcard for name on matching complex, user defined type </description>
      <created by="Mike Rorke" on="2005-09-13"/>
      <environment ref="SpecialTypes"/>
      <test>import schema default element namespace "http://www.example.com/typedecl";
            for $test as element(*,InterleaveType) in /root/InterleaveType return $test</test>
      <result>
         <assert-xml><![CDATA[<InterleaveType xmlns="http://www.example.com/typedecl"><integer>10</integer><decimal>20</decimal></InterleaveType>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="ForExprType040">
      <description> FLWOR expressions with type declaration (element type). Match user defined simple type on element </description>
      <created by="Mike Rorke" on="2005-09-13"/>
      <environment ref="SpecialTypes"/>
      <test>import schema default element namespace "http://www.example.com/typedecl";
            for $test as element( UserDefinedSimpleType, Enumeration ) in /root/UserDefinedSimpleType return $test</test>
      <result>
         <assert-xml><![CDATA[<UserDefinedSimpleType xmlns="http://www.example.com/typedecl">ok</UserDefinedSimpleType>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="ForExprType041">
      <description> FLWOR expressions with type declaration (element type). Wildcard match on user defined simple type on element </description>
      <created by="Mike Rorke" on="2005-09-13"/>
      <environment ref="SpecialTypes"/>
      <test>import schema default element namespace "http://www.example.com/typedecl";
            for $test as element( *, Enumeration ) in /root/UserDefinedSimpleType return $test</test>
      <result>
         <assert-xml><![CDATA[<UserDefinedSimpleType xmlns="http://www.example.com/typedecl">ok</UserDefinedSimpleType>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="ForExprType042">
      <description> FLWOR expressions with type declaration (element type). Interleave value type integer|decimal -&gt; decimal </description>
      <created by="Mike Rorke" on="2005-09-13"/>
      <environment ref="SpecialTypes"/>
      <test>import schema default element namespace "http://www.example.com/typedecl";
            for $test as element(*,xs:decimal) in /root/InterleaveType/* return $test</test>
      <result>
         <assert-xml><![CDATA[<integer xmlns="http://www.example.com/typedecl">10</integer><decimal xmlns="http://www.example.com/typedecl">20</decimal>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="ForExprType043">
      <description> FLWOR expressions with type declaration (element type). Union type integer|decimal -&gt; decimal </description>
      <created by="Mike Rorke" on="2005-09-13"/>
      <environment ref="SpecialTypes"/>
      <test>import schema default element namespace "http://www.example.com/typedecl";
            for $test as element(*,xs:decimal) in /root/UnionType/* return $test</test>
      <result>
         <assert-xml><![CDATA[<decimal xmlns="http://www.example.com/typedecl">20</decimal>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="ForExprType044">
      <description> FLWOR expressions with type declaration (element type). List type </description>
      <created by="Mike Rorke" on="2005-09-13"/>
      <environment ref="SpecialTypes"/>
      <test>import schema default element namespace "http://www.example.com/typedecl";
            for $test as element(ListType,xs:string) in /root/ListType return $test</test>
      <result>
         <assert-xml><![CDATA[<ListType xmlns="http://www.example.com/typedecl">entity1 entity2 entity3</ListType>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="ForExprType048">
      <description> FLWOR expressions with type declaration. Non-trivial value type promotion: anyAtomicType value type -&gt; anyAtomicType </description>
      <created by="Mike Rorke" on="2005-09-13"/>
      <environment ref="SpecialTypes"/>
      <test>import schema default element namespace "http://www.example.com/typedecl";
            for $test as xs:anyAtomicType in data( /root/anyAtomicType/@att ) return $test</test>
      <result>
         <assert-string-value>10</assert-string-value>
      </result>
   </test-case>

   <test-case name="ForExprType049">
      <description> FLWOR expressions with type declaration. Non-trivial value type promotion: Interleave value type integer|decimal -&gt; decimal </description>
      <created by="Mike Rorke" on="2005-09-13"/>
      <environment ref="SpecialTypes"/>
      <test>import schema default element namespace "http://www.example.com/typedecl";
            for $test as xs:decimal in data(/root/InterleaveType/*) return $test</test>
      <result>
         <assert-string-value>10 20</assert-string-value>
      </result>
   </test-case>

   <test-case name="ForExprType050">
      <description> FLWOR expressions with type declaration. Non-trivial value type promotion: Union type integer|decimal -&gt; decimal </description>
      <created by="Mike Rorke" on="2005-09-13"/>
      <environment ref="SpecialTypes"/>
      <test>import schema default element namespace "http://www.example.com/typedecl";
            for $test as xs:decimal in data( exactly-one(/root/UnionType/*) ) return $test</test>
      <result>
         <assert-eq>20</assert-eq>
      </result>
   </test-case>

   <test-case name="ForExprType051">
      <description> FLWOR expressions with type declaration. Non-trivial value type promotion: List type </description>
      <created by="Mike Rorke" on="2005-09-13"/>
      <environment ref="SpecialTypes"/>
      <test>import schema default element namespace "http://www.example.com/typedecl";
            for $test as xs:string in exactly-one(data( /root/ListType )) return $test</test>
      <result>
         <assert-string-value>entity1 entity2 entity3</assert-string-value>
      </result>
   </test-case>

   <test-case name="ForExprType052">
      <description> FLWOR expressions with type declaration. Non-trivial value type promotion: User defined simple type </description>
      <created by="Mike Rorke" on="2005-09-13"/>
      <environment ref="SpecialTypes"/>
      <test>import schema default element namespace "http://www.example.com/typedecl";
            for $test as Enumeration in exactly-one(data( /root/UserDefinedSimpleType )) return $test</test>
      <result>
         <assert-string-value>ok</assert-string-value>
      </result>
   </test-case>

   <test-case name="ForExprType053">
      <description> FLWOR expressions with type declaration. Non-trivial value type promotion: User defined simple type on attribute </description>
      <created by="Mike Rorke" on="2005-09-13"/>
      <environment ref="SpecialTypes"/>
      <test>import schema default element namespace "http://www.example.com/typedecl";
            for $test as Enumeration in exactly-one(data( /root/UserDefinedSimpleTypeAttribute/@att )) return $test</test>
      <result>
         <assert-string-value>ok</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="step-expr-si-1">
      <description> Ensure that the type of the child axis on an extended schema type is computed correctly. </description>
      <created by="Oliver Hallam" on="2010-03-17"/>
      <environment ref="extendedTypes"/>
      <test>
        import schema default element namespace "http://www.example.com/XQueryTest/extendedTypes"; 
        for $extended as element(*, extendedWithElementType) in //element(*, extendedWithElementType) 
        let $baseElement as empty-sequence() := $extended/baseElement 
        return $baseElement</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="step-expr-si-2">
      <description> Ensure that static type of the child axis on a restricted schema type is computed correctly. </description>
      <created by="Oliver Hallam" on="2010-03-17"/>
      <environment ref="extendedTypes"/>
      <test>
        import schema default element namespace "http://www.example.com/XQueryTest/extendedTypes"; 
        for $extended as element(*, restrictedType) in //element(*, restrictedType) 
        let $baseElement as element()+ := $extended/node() 
        return $baseElement</test>
      <result>
         <assert-xml><![CDATA[<baseElement xmlns = "http://www.example.com/XQueryTest/extendedTypes" />]]></assert-xml>
      </result>
   </test-case>

   <test-case name="step-expr-si-3">
      <description> Ensure that the child axis on a restricted schema type is computed correctly </description>
      <created by="Oliver Hallam" on="2010-03-17"/>
      <environment ref="extendedTypes"/>
      <test>
        import schema default element namespace "http://www.example.com/XQueryTest/extendedTypes"; 
        for $extended as element(*, anotherBaseType) in //element(restrictedAttribute, anotherBaseType) 
        let $baseElement as element(baseElement) := $extended/baseElement 
        return $baseElement</test>
      <result>
         <assert-xml><![CDATA[<baseElement xmlns = "http://www.example.com/XQueryTest/extendedTypes" />]]></assert-xml>
      </result>
   </test-case>
   
</test-set>