<?xml version="1.0" encoding="UTF-8"?>
<test-set name="prod-CastExpr" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">
  <description>Tests for the cast expression</description>
  <link document="http://www.w3.org/TR/xpath-30/" idref="prod-xpath30-CastExpr" type="spec"/>
  <environment name="NOTATION-type">
    <schema file="CastExpr/notation.xsd" uri="http://www.w3.org/XQueryTest/Cast/Notation">
      <description>Contains a type derived from xs:NOTATION</description>
      <created by="Ghislain Fourny" on="2012-10-09"/>
    </schema>
  </environment>
  <test-case name="casthc1">
    <description> Simple test for evaluation of a simple expression casted as xs:integer</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>(5 + 5) cast as xs:integer</test>
    <result-string>xs:decimal(&quot;10&quot;)</result-string>
    <result>
      <assert-eq>10</assert-eq>
    </result>
  </test-case>
  <test-case name="casthc2">
    <description> Simple test for evaluation of a simple expression casted as xs:float</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>(5 + 5) cast as xs:float</test>
    <result-string>xs:decimal(&quot;10&quot;)</result-string>
    <result>
      <assert-eq>10</assert-eq>
    </result>
  </test-case>
  <test-case name="casthc3">
    <description> Simple test for evaluation of a simple expression casted as xs:boolean</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>(5 + 5) cast as xs:boolean</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="casthc4">
    <description> Simple test for evaluation of a simple expression casted as xs:double</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>(5 + 5) cast as xs:double</test>
    <result-string>xs:decimal(&quot;10&quot;)</result-string>
    <result>
      <assert-eq>10</assert-eq>
    </result>
  </test-case>
  <test-case name="casthc5">
    <description> Simple test for evaluation of a simple expression casted as xs:decimal</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>(5 + 5) cast as xs:decimal</test>
    <result-string>xs:decimal(&quot;10&quot;)</result-string>
    <result>
      <assert-eq>10</assert-eq>
    </result>
  </test-case>
  <test-case name="casthc6">
    <description> Simple test for evaluation of a simple expression casted as xs:string</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>(5 + 5) cast as xs:string</test>
    <result-string>xs:string(&quot;10&quot;)</result-string>
    <result>
      <assert-string-value>10</assert-string-value>
    </result>
  </test-case>
  <test-case name="casthc7">
    <description> Simple test for evaluation a string casted as xs:string</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>&quot;A String&quot; cast as xs:string</test>
    <result-string>xs:string(&quot;A String&quot;)</result-string>
    <result>
      <assert-string-value>A String</assert-string-value>
    </result>
  </test-case>
  <test-case name="casthc8">
    <description> Simple test for casting a float as a float</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:float(2.1E3) cast as xs:float</test>
    <result-string>xs:decimal(&quot;2100&quot;)</result-string>
    <result>
      <assert-eq>2100</assert-eq>
    </result>
  </test-case>
  <test-case name="casthc9">
    <description> Simple test for casting a float as a string</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:float(2.1E3) cast as xs:string</test>
    <result-string>xs:string(&quot;2100&quot;)</result-string>
    <result>
      <assert-string-value>2100</assert-string-value>
    </result>
  </test-case>
  <test-case name="casthc10">
    <description> Simple test for casting a float as a double</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:float(2.1E3) cast as xs:double</test>
    <result-string>xs:decimal(&quot;2100&quot;)</result-string>
    <result>
      <assert-eq>2100</assert-eq>
    </result>
  </test-case>
  <test-case name="casthc11">
    <description> Simple test for casting a float as a boolean</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:float(2.1E3) cast as xs:boolean</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="casthc12">
    <description> Simple test for casting a double as a double</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:double(1267.43233E12) cast as xs:double</test>
    <result-string>xs:string(&quot;1.26743233E15&quot;)</result-string>
    <result>
      <assert-string-value>1.26743233E15</assert-string-value>
    </result>
  </test-case>
  <test-case name="casthc13">
    <description> Simple test for casting a double as a string</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:double(1267.43233E12) cast as xs:string</test>
    <result-string>xs:string(&quot;1.26743233E15&quot;)</result-string>
    <result>
      <assert-string-value>1.26743233E15</assert-string-value>
    </result>
  </test-case>
  <test-case name="casthc14">
    <description> Simple test for casting a double as a float</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>(xs:double(1267.43233E12) cast as xs:float) eq xs:float(1267.43233E12)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="casthc15">
    <description> Simple test for casting a double as a boolean</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:double(1267.43233E12) cast as xs:boolean</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="casthc16">
    <description> Simple test for casting a decimal as a string</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:decimal(12678967.543233) cast as xs:string</test>
    <result-string>xs:string(&quot;12678967.543233&quot;)</result-string>
    <result>
      <assert-string-value>12678967.543233</assert-string-value>
    </result>
  </test-case>
  <test-case name="casthc17">
    <description> Simple test for casting a decimal as a float</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:decimal(12678967.543233) cast as xs:float</test>
    <result-string>xs:string(&quot;1.2678968E7&quot;)</result-string>
    <result>
      <assert-string-value>1.2678968E7</assert-string-value>
    </result>
  </test-case>
  <test-case name="casthc18">
    <description> Simple test for casting a decimal as a double</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:decimal(12678967.543233) cast as xs:double</test>
    <result-string>xs:string(&quot;1.2678967543233E7&quot;)</result-string>
    <result>
      <assert-string-value>1.2678967543233E7</assert-string-value>
    </result>
  </test-case>
  <test-case name="casthc19">
    <description> Simple test for casting a decimal as a decimal</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:decimal(12678967.543233) cast as xs:decimal</test>
    <result-string>xs:string(&quot;12678967.543233&quot;)</result-string>
    <result>
      <assert-string-value>12678967.543233</assert-string-value>
    </result>
  </test-case>
  <test-case name="casthc20">
    <description> Simple test for casting a decimal as a integer</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:decimal(12678967.543233) cast as xs:integer</test>
    <result-string>xs:decimal(&quot;12678967&quot;)</result-string>
    <result>
      <assert-eq>12678967</assert-eq>
    </result>
  </test-case>
  <test-case name="casthc21">
    <description> Simple test for casting a decimal as a boolean</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:decimal(12678967.543233) cast as xs:boolean</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="casthc22">
    <description> Simple test for casting an integer as a string</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:integer(12678967543233) cast as xs:string</test>
    <result-string>xs:string(&quot;12678967543233&quot;)</result-string>
    <result>
      <assert-string-value>12678967543233</assert-string-value>
    </result>
  </test-case>
  <test-case name="casthc23">
    <description> Simple test for casting an integer as a float</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>(xs:integer(12678967543233) cast as xs:float) eq xs:float(12678967543233)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="casthc24">
    <description> Simple test for casting an integer as a double</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:integer(12678967543233) cast as xs:double</test>
    <result-string>xs:string(&quot;1.2678967543233E13&quot;)</result-string>
    <result>
      <assert-string-value>1.2678967543233E13</assert-string-value>
    </result>
  </test-case>
  <test-case name="casthc25">
    <description> Simple test for casting an integer as a decimal</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:integer(12678967543233) cast as xs:decimal</test>
    <result-string>xs:decimal(&quot;12678967543233&quot;)</result-string>
    <result>
      <assert-eq>12678967543233</assert-eq>
    </result>
  </test-case>
  <test-case name="casthc26">
    <description> Simple test for casting an integer as an integer</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:integer(12678967543233) cast as xs:integer</test>
    <result-string>xs:decimal(&quot;12678967543233&quot;)</result-string>
    <result>
      <assert-eq>12678967543233</assert-eq>
    </result>
  </test-case>
  <test-case name="casthc27">
    <description> Simple test for casting an integer as a boolean</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:integer(12678967543233) cast as xs:boolean</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="casthc28">
    <description> Simple test for casting an dateTime as a string</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:dateTime(&quot;1999-05-31T13:20:00-05:00&quot;) cast as xs:string</test>
    <result-string>xs:string(&quot;1999-05-31T13:20:00-05:00&quot;)</result-string>
    <result>
      <assert-string-value>1999-05-31T13:20:00-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="casthc29">
    <description> Simple test for casting an dateTime as a dateTime</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:dateTime(&quot;1999-05-31T13:20:00-05:00&quot;) cast as xs:dateTime</test>
    <result-string>xs:string(&quot;1999-05-31T13:20:00-05:00&quot;)</result-string>
    <result>
      <assert-string-value>1999-05-31T13:20:00-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="casthc30">
    <description> Simple test for casting an dateTime as a time</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:dateTime(&quot;1999-05-31T13:20:00-05:00&quot;) cast as xs:time</test>
    <result-string>xs:string(&quot;13:20:00-05:00&quot;)</result-string>
    <result>
      <assert-string-value>13:20:00-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="casthc31">
    <description> Simple test for casting an dateTime as a date</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:dateTime(&quot;1999-05-31T13:20:00-05:00&quot;) cast as xs:date</test>
    <result-string>xs:string(&quot;1999-05-31-05:00&quot;)</result-string>
    <result>
      <assert-string-value>1999-05-31-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="casthc32">
    <description> Simple test for casting an date as a string</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:date(&quot;1999-05-31&quot;) cast as xs:string</test>
    <result-string>xs:string(&quot;1999-05-31&quot;)</result-string>
    <result>
      <assert-string-value>1999-05-31</assert-string-value>
    </result>
  </test-case>
  <test-case name="casthc33">
    <description> Simple test for casting an date as a dateTime</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:date(&quot;1999-05-31&quot;) cast as xs:dateTime</test>
    <result-string>xs:string(&quot;1999-05-31T00:00:00&quot;)</result-string>
    <result>
      <assert-string-value>1999-05-31T00:00:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="casthc34">
    <description> Simple test for casting an date as a date</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:date(&quot;1999-05-31&quot;) cast as xs:date</test>
    <result-string>xs:string(&quot;1999-05-31&quot;)</result-string>
    <result>
      <assert-string-value>1999-05-31</assert-string-value>
    </result>
  </test-case>
  <test-case name="casthc35">
    <description> Simple test for casting an xs:time as a string</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:time(&quot;12:00:00&quot;) cast as xs:string</test>
    <result-string>xs:string(&quot;12:00:00&quot;)</result-string>
    <result>
      <assert-string-value>12:00:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="casthc36">
    <description> Simple test for casting an xs:time as an xs:time</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:time(&quot;12:00:00&quot;) cast as xs:time</test>
    <result-string>xs:string(&quot;12:00:00&quot;)</result-string>
    <result>
      <assert-string-value>12:00:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="casthc37">
    <description> Simple test for casting a boolean as string</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>fn:true() cast as xs:string</test>
    <result-string>xs:string(&quot;true&quot;)</result-string>
    <result>
      <assert-string-value>true</assert-string-value>
    </result>
  </test-case>
  <test-case name="casthc38">
    <description> Simple test for casting a boolean as float</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>fn:true() cast as xs:float</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="casthc39">
    <description> Simple test for casting a boolean as double</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>fn:true() cast as xs:double</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="casthc40">
    <description> Simple test for casting a boolean as decimal</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>fn:true() cast as xs:decimal</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="casthc41">
    <description> Simple test for casting a boolean as integer</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>fn:true() cast as xs:integer</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="casthc42">
    <description> Simple test for casting a boolean as boolean</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>fn:true() cast as xs:boolean</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="casthc43">
    <description> casting a string into an xs:NOTATION</description>
    <created by="Carmelo Montanez" on="2006-02-06"/>
    <test>xs:string(&quot;A String&quot;) cast as xs:NOTATION</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0080&quot;))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="CastAs001">
    <description>Try casting xs:untypedAtomic(INF) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;INF&quot;) cast as xs:untypedAtomic</test>
    <result-string>xs:string(&quot;INF&quot;)</result-string>
    <result>
      <assert-string-value>INF</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs002">
    <description>Try casting xs:untypedAtomic(0.0E0) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;0.0E0&quot;) cast as xs:untypedAtomic</test>
    <result-string>xs:string(&quot;0.0E0&quot;)</result-string>
    <result>
      <assert-string-value>0.0E0</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs003">
    <description>Try casting xs:untypedAtomic(true) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;true&quot;) cast as xs:untypedAtomic</test>
    <result-string>xs:string(&quot;true&quot;)</result-string>
    <result>
      <assert-string-value>true</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs004">
    <description>Try casting xs:untypedAtomic(INF) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;INF&quot;) cast as xs:string</test>
    <result-string>xs:string(&quot;INF&quot;)</result-string>
    <result>
      <assert-string-value>INF</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs005">
    <description>Try casting xs:untypedAtomic(0.0E0) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;0.0E0&quot;) cast as xs:string</test>
    <result-string>xs:string(&quot;0.0E0&quot;)</result-string>
    <result>
      <assert-string-value>0.0E0</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs006">
    <description>Try casting xs:untypedAtomic(true) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;true&quot;) cast as xs:string</test>
    <result-string>xs:string(&quot;true&quot;)</result-string>
    <result>
      <assert-string-value>true</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs007">
    <description>Try casting xs:untypedAtomic(-0.0E0) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;-0.0E0&quot;) cast as xs:float</test>
    <result-string>xs:decimal(&quot;-0&quot;)</result-string>
    <result>
      <assert-eq>-0</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs008">
    <description>Try casting xs:untypedAtomic(NaN) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;NaN&quot;) cast as xs:float</test>
    <result-string>xs:string(&quot;NaN&quot;)</result-string>
    <result>
      <assert-string-value>NaN</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs009">
    <description>Try casting xs:untypedAtomic(1e-5) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;1e-5&quot;) cast as xs:float</test>
    <result-string>xs:string(&quot;0.00001&quot;)</result-string>
    <result>
      <assert-string-value>0.00001</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs010">
    <description>Try casting xs:untypedAtomic(-10000000) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;-10000000&quot;) cast as xs:float</test>
    <result-string>xs:string(&quot;-1.0E7&quot;)</result-string>
    <result>
      <assert-string-value>-1.0E7</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs011">
    <description>Try casting xs:untypedAtomic(true) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;true&quot;) cast as xs:float</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs012">
    <description>Try casting xs:untypedAtomic(-0.0E0) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;-0.0E0&quot;) cast as xs:double</test>
    <result-string>xs:decimal(&quot;-0&quot;)</result-string>
    <result>
      <assert-eq>-0</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs013">
    <description>Try casting xs:untypedAtomic(NaN) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;NaN&quot;) cast as xs:double</test>
    <result-string>xs:string(&quot;NaN&quot;)</result-string>
    <result>
      <assert-string-value>NaN</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs014">
    <description>Try casting xs:untypedAtomic(1e-5) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;1e-5&quot;) cast as xs:double</test>
    <result-string>xs:string(&quot;0.00001&quot;)</result-string>
    <result>
      <assert-string-value>0.00001</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs015">
    <description>Try casting xs:untypedAtomic(-10000000) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;-10000000&quot;) cast as xs:double</test>
    <result-string>xs:string(&quot;-1.0E7&quot;)</result-string>
    <result>
      <assert-string-value>-1.0E7</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs016">
    <description>Try casting xs:untypedAtomic(true) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;true&quot;) cast as xs:double</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs017">
    <description>Try casting xs:untypedAtomic(-0.0E0) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;-0.0E0&quot;) cast as xs:decimal</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs018">
    <description>Try casting xs:untypedAtomic(NaN) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;NaN&quot;) cast as xs:decimal</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs019">
    <description>Try casting xs:untypedAtomic(1e-5) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;1e-5&quot;) cast as xs:decimal</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs020">
    <description>Try casting xs:untypedAtomic(5.5432) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;5.5432&quot;) cast as xs:decimal</test>
    <result-string>xs:string(&quot;5.5432&quot;)</result-string>
    <result>
      <assert-string-value>5.5432</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs021">
    <description>Try casting xs:untypedAtomic(true) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;true&quot;) cast as xs:decimal</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs022">
    <description>Try casting xs:untypedAtomic(-0.0E0) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;-0.0E0&quot;) cast as xs:integer</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs023">
    <description>Try casting xs:untypedAtomic(NaN) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;NaN&quot;) cast as xs:integer</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs024">
    <description>Try casting xs:untypedAtomic(1e-5) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;1e-5&quot;) cast as xs:integer</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs025">
    <description>Try casting xs:untypedAtomic(-1.1234) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;-1.1234&quot;) cast as xs:integer</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs026">
    <description>Try casting xs:untypedAtomic(true) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;true&quot;) cast as xs:integer</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs027">
    <description>Try casting xs:untypedAtomic(P1Y2M3DT10H30M23S) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;P1Y2M3DT10H30M23S&quot;) cast as xs:duration</test>
    <result-string>xs:string(&quot;P1Y2M3DT10H30M23S&quot;)</result-string>
    <result>
      <assert-string-value>P1Y2M3DT10H30M23S</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs028">
    <description>Try casting xs:untypedAtomic(-P1Y1M1DT1H1M1.123S) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;-P1Y1M1DT1H1M1.123S&quot;) cast as xs:duration</test>
    <result-string>xs:string(&quot;-P1Y1M1DT1H1M1.123S&quot;)</result-string>
    <result>
      <assert-string-value>-P1Y1M1DT1H1M1.123S</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs029">
    <description>Try casting xs:untypedAtomic(true) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;true&quot;) cast as xs:duration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs030">
    <description>Try casting xs:untypedAtomic(-P1Y1M1DT1H1M1.123S) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;-P1Y1M1DT1H1M1.123S&quot;) cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs031">
    <description>Try casting xs:untypedAtomic(P24M) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;P24M&quot;) cast as xs:yearMonthDuration</test>
    <result-string>xs:string(&quot;P2Y&quot;)</result-string>
    <result>
      <assert-string-value>P2Y</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs032">
    <description>Try casting xs:untypedAtomic(-P21M) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;-P21M&quot;) cast as xs:yearMonthDuration</test>
    <result-string>xs:string(&quot;-P1Y9M&quot;)</result-string>
    <result>
      <assert-string-value>-P1Y9M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs033">
    <description>Try casting xs:untypedAtomic(true) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;true&quot;) cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs034">
    <description>Try casting xs:untypedAtomic(-P1Y1M1DT1H1M1.123S) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;-P1Y1M1DT1H1M1.123S&quot;) cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs035">
    <description>Try casting xs:untypedAtomic(P3DT10H30M) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;P3DT10H30M&quot;) cast as xs:dayTimeDuration</test>
    <result-string>xs:string(&quot;P3DT10H30M&quot;)</result-string>
    <result>
      <assert-string-value>P3DT10H30M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs036">
    <description>Try casting xs:untypedAtomic(-PT100M) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;-PT100M&quot;) cast as xs:dayTimeDuration</test>
    <result-string>xs:string(&quot;-PT1H40M&quot;)</result-string>
    <result>
      <assert-string-value>-PT1H40M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs037">
    <description>Try casting xs:untypedAtomic(true) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;true&quot;) cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs038">
    <description>Try casting xs:untypedAtomic(1999-05-31T13:20:00) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;1999-05-31T13:20:00&quot;) cast as xs:dateTime</test>
    <result-string>xs:string(&quot;1999-05-31T13:20:00&quot;)</result-string>
    <result>
      <assert-string-value>1999-05-31T13:20:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs039">
    <description>Try casting xs:untypedAtomic(-1999-05-31T13:20:00+14:00) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;-1999-05-31T13:20:00+14:00&quot;) cast as xs:dateTime</test>
    <result-string>xs:string(&quot;-1999-05-31T13:20:00+14:00&quot;)</result-string>
    <result>
      <assert-string-value>-1999-05-31T13:20:00+14:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs040">
    <description>Try casting xs:untypedAtomic(2000-01-16T00:00:00Z) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;2000-01-16T00:00:00Z&quot;) cast as xs:dateTime</test>
    <result-string>xs:string(&quot;2000-01-16T00:00:00Z&quot;)</result-string>
    <result>
      <assert-string-value>2000-01-16T00:00:00Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs041">
    <description>Try casting xs:untypedAtomic(true) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;true&quot;) cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs042">
    <description>Try casting xs:untypedAtomic(13:20:00-05:00) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;13:20:00-05:00&quot;) cast as xs:time</test>
    <result-string>xs:string(&quot;13:20:00-05:00&quot;)</result-string>
    <result>
      <assert-string-value>13:20:00-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs043">
    <description>Try casting xs:untypedAtomic(13:20:02.123) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;13:20:02.123&quot;) cast as xs:time</test>
    <result-string>xs:string(&quot;13:20:02.123&quot;)</result-string>
    <result>
      <assert-string-value>13:20:02.123</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs044">
    <description>Try casting xs:untypedAtomic(13:20:00Z) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;13:20:00Z&quot;) cast as xs:time</test>
    <result-string>xs:string(&quot;13:20:00Z&quot;)</result-string>
    <result>
      <assert-string-value>13:20:00Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs045">
    <description>Try casting xs:untypedAtomic(true) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;true&quot;) cast as xs:time</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs046">
    <description>Try casting xs:untypedAtomic(1999-05-31) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;1999-05-31&quot;) cast as xs:date</test>
    <result-string>xs:string(&quot;1999-05-31&quot;)</result-string>
    <result>
      <assert-string-value>1999-05-31</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs047">
    <description>Try casting xs:untypedAtomic(-0012-12-03-05:00) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;-0012-12-03-05:00&quot;) cast as xs:date</test>
    <result-string>xs:string(&quot;-0012-12-03-05:00&quot;)</result-string>
    <result>
      <assert-string-value>-0012-12-03-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs048">
    <description>Try casting xs:untypedAtomic(1999-05-31Z) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;1999-05-31Z&quot;) cast as xs:date</test>
    <result-string>xs:string(&quot;1999-05-31Z&quot;)</result-string>
    <result>
      <assert-string-value>1999-05-31Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs049">
    <description>Try casting xs:untypedAtomic(true) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;true&quot;) cast as xs:date</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs050">
    <description>Try casting xs:untypedAtomic(1999-05) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;1999-05&quot;) cast as xs:gYearMonth</test>
    <result-string>xs:string(&quot;1999-05&quot;)</result-string>
    <result>
      <assert-string-value>1999-05</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs051">
    <description>Try casting xs:untypedAtomic(-0012-12-05:00) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;-0012-12-05:00&quot;) cast as xs:gYearMonth</test>
    <result-string>xs:string(&quot;-0012-12-05:00&quot;)</result-string>
    <result>
      <assert-string-value>-0012-12-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs052">
    <description>Try casting xs:untypedAtomic(1999-05Z) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;1999-05Z&quot;) cast as xs:gYearMonth</test>
    <result-string>xs:string(&quot;1999-05Z&quot;)</result-string>
    <result>
      <assert-string-value>1999-05Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs053">
    <description>Try casting xs:untypedAtomic(true) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;true&quot;) cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs054">
    <description>Try casting xs:untypedAtomic(1999) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;1999&quot;) cast as xs:gYear</test>
    <result-string>xs:string(&quot;1999&quot;)</result-string>
    <result>
      <assert-string-value>1999</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs055">
    <description>Try casting xs:untypedAtomic(-0012-05:00) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;-0012-05:00&quot;) cast as xs:gYear</test>
    <result-string>xs:string(&quot;-0012-05:00&quot;)</result-string>
    <result>
      <assert-string-value>-0012-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs056">
    <description>Try casting xs:untypedAtomic(1999Z) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;1999Z&quot;) cast as xs:gYear</test>
    <result-string>xs:string(&quot;1999Z&quot;)</result-string>
    <result>
      <assert-string-value>1999Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs057">
    <description>Try casting xs:untypedAtomic(true) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;true&quot;) cast as xs:gYear</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs058">
    <description>Try casting xs:untypedAtomic(--05-31) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;--05-31&quot;) cast as xs:gMonthDay</test>
    <result-string>xs:string(&quot;--05-31&quot;)</result-string>
    <result>
      <assert-string-value>--05-31</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs059">
    <description>Try casting xs:untypedAtomic(--05-31+14:00) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;--05-31+14:00&quot;) cast as xs:gMonthDay</test>
    <result-string>xs:string(&quot;--05-31+14:00&quot;)</result-string>
    <result>
      <assert-string-value>--05-31+14:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs060">
    <description>Try casting xs:untypedAtomic(--05-31Z) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;--05-31Z&quot;) cast as xs:gMonthDay</test>
    <result-string>xs:string(&quot;--05-31Z&quot;)</result-string>
    <result>
      <assert-string-value>--05-31Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs061">
    <description>Try casting xs:untypedAtomic(true) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;true&quot;) cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs062">
    <description>Try casting xs:untypedAtomic(---31) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;---31&quot;) cast as xs:gDay</test>
    <result-string>xs:string(&quot;---31&quot;)</result-string>
    <result>
      <assert-string-value>---31</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs063">
    <description>Try casting xs:untypedAtomic(---03-05:00) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;---03-05:00&quot;) cast as xs:gDay</test>
    <result-string>xs:string(&quot;---03-05:00&quot;)</result-string>
    <result>
      <assert-string-value>---03-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs064">
    <description>Try casting xs:untypedAtomic(---31Z) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;---31Z&quot;) cast as xs:gDay</test>
    <result-string>xs:string(&quot;---31Z&quot;)</result-string>
    <result>
      <assert-string-value>---31Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs065">
    <description>Try casting xs:untypedAtomic(true) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;true&quot;) cast as xs:gDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs066">
    <description>Try casting xs:untypedAtomic(--05) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;--05&quot;) cast as xs:gMonth</test>
    <result-string>xs:string(&quot;--05&quot;)</result-string>
    <result>
      <assert-string-value>--05</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs067">
    <description>Try casting xs:untypedAtomic(--12-05:00) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;--12-05:00&quot;) cast as xs:gMonth</test>
    <result-string>xs:string(&quot;--12-05:00&quot;)</result-string>
    <result>
      <assert-string-value>--12-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs068">
    <description>Try casting xs:untypedAtomic(--05Z) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;--05Z&quot;) cast as xs:gMonth</test>
    <result-string>xs:string(&quot;--05Z&quot;)</result-string>
    <result>
      <assert-string-value>--05Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs069">
    <description>Try casting xs:untypedAtomic(true) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;true&quot;) cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs070">
    <description>Try casting xs:untypedAtomic(0.0) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;0.0&quot;) cast as xs:boolean</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs071">
    <description>Try casting xs:untypedAtomic(0) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;0&quot;) cast as xs:boolean</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="CastAs072">
    <description>Try casting xs:untypedAtomic(true) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;true&quot;) cast as xs:boolean</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="CastAs073">
    <description>Try casting xs:untypedAtomic(true) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;true&quot;) cast as xs:base64Binary</test>
    <result-string>xs:string(&quot;true&quot;)</result-string>
    <result>
      <assert-string-value>true</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs074">
    <description>Try casting xs:untypedAtomic(00000000) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;00000000&quot;) cast as xs:base64Binary</test>
    <result-string>xs:string(&quot;00000000&quot;)</result-string>
    <result>
      <assert-string-value>00000000</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs075">
    <description>Try casting xs:untypedAtomic(D74D35D35D35) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;D74D35D35D35&quot;) cast as xs:base64Binary</test>
    <result-string>xs:string(&quot;D74D35D35D35&quot;)</result-string>
    <result>
      <assert-string-value>D74D35D35D35</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs076">
    <description>Try casting xs:untypedAtomic(true) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;true&quot;) cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs077">
    <description>Try casting xs:untypedAtomic(010010101) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;010010101&quot;) cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs078">
    <description>Try casting xs:untypedAtomic(0fb7) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;0fb7&quot;) cast as xs:hexBinary</test>
    <result-string>xs:string(&quot;0FB7&quot;)</result-string>
    <result>
      <assert-string-value>0FB7</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs079">
    <description>Try casting xs:untypedAtomic(D74D35D35D35) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;D74D35D35D35&quot;) cast as xs:hexBinary</test>
    <result-string>xs:string(&quot;D74D35D35D35&quot;)</result-string>
    <result>
      <assert-string-value>D74D35D35D35</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs080">
    <description>Try casting xs:untypedAtomic(-0012-05:00) to xs:anyURI</description>
    <created by="Joanne Tong" on="2006-01-27-07:00"/>
    <test>xs:untypedAtomic(&quot;http://www.example.com/~b%C3%A9b%C3%A9&quot;) cast as xs:anyURI</test>
    <result-string>xs:string(&quot;http://www.example.com/~b%C3%A9b%C3%A9&quot;)</result-string>
    <result>
      <assert-string-value>http://www.example.com/~b%C3%A9b%C3%A9</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs081">
    <description>Try casting xs:untypedAtomic(true) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;true&quot;) cast as xs:anyURI</test>
    <result-string>xs:string(&quot;true&quot;)</result-string>
    <result>
      <assert-string-value>true</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs082">
    <description>Try casting xs:untypedAtomic(http://www.ietf.org/rfc/rfc2396.txt) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic(&quot;http://www.ietf.org/rfc/rfc2396.txt&quot;) cast as xs:anyURI</test>
    <result-string>xs:string(&quot;http://www.ietf.org/rfc/rfc2396.txt&quot;)</result-string>
    <result>
      <assert-string-value>http://www.ietf.org/rfc/rfc2396.txt</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs083">
    <description>Try casting xs:string(INF) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;INF&quot;) cast as xs:untypedAtomic</test>
    <result-string>xs:string(&quot;INF&quot;)</result-string>
    <result>
      <assert-string-value>INF</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs084">
    <description>Try casting xs:string(0.0E0) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;0.0E0&quot;) cast as xs:untypedAtomic</test>
    <result-string>xs:string(&quot;0.0E0&quot;)</result-string>
    <result>
      <assert-string-value>0.0E0</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs085">
    <description>Try casting xs:string(true) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;true&quot;) cast as xs:untypedAtomic</test>
    <result-string>xs:string(&quot;true&quot;)</result-string>
    <result>
      <assert-string-value>true</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs086">
    <description>Try casting xs:string(INF) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;INF&quot;) cast as xs:string</test>
    <result-string>xs:string(&quot;INF&quot;)</result-string>
    <result>
      <assert-string-value>INF</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs087">
    <description>Try casting xs:string(0.0E0) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;0.0E0&quot;) cast as xs:string</test>
    <result-string>xs:string(&quot;0.0E0&quot;)</result-string>
    <result>
      <assert-string-value>0.0E0</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs088">
    <description>Try casting xs:string(true) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;true&quot;) cast as xs:string</test>
    <result-string>xs:string(&quot;true&quot;)</result-string>
    <result>
      <assert-string-value>true</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs089">
    <description>Try casting xs:string(-0.0E0) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;-0.0E0&quot;) cast as xs:float</test>
    <result-string>xs:decimal(&quot;-0&quot;)</result-string>
    <result>
      <assert-eq>-0</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs090">
    <description>Try casting xs:string(NaN) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;NaN&quot;) cast as xs:float</test>
    <result-string>xs:string(&quot;NaN&quot;)</result-string>
    <result>
      <assert-string-value>NaN</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs091">
    <description>Try casting xs:string(1e-5) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;1e-5&quot;) cast as xs:float</test>
    <result-string>xs:string(&quot;0.00001&quot;)</result-string>
    <result>
      <assert-string-value>0.00001</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs092">
    <description>Try casting xs:string(-10000000) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;-10000000&quot;) cast as xs:float</test>
    <result-string>xs:string(&quot;-1.0E7&quot;)</result-string>
    <result>
      <assert-string-value>-1.0E7</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs093">
    <description>Try casting xs:string(true) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;true&quot;) cast as xs:float</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs094">
    <description>Try casting xs:string(-0.0E0) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;-0.0E0&quot;) cast as xs:double</test>
    <result-string>xs:decimal(&quot;-0&quot;)</result-string>
    <result>
      <assert-eq>-0</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs095">
    <description>Try casting xs:string(NaN) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;NaN&quot;) cast as xs:double</test>
    <result-string>xs:string(&quot;NaN&quot;)</result-string>
    <result>
      <assert-string-value>NaN</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs096">
    <description>Try casting xs:string(1e-5) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;1e-5&quot;) cast as xs:double</test>
    <result-string>xs:string(&quot;0.00001&quot;)</result-string>
    <result>
      <assert-string-value>0.00001</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs097">
    <description>Try casting xs:string(-10000000) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;-10000000&quot;) cast as xs:double</test>
    <result-string>xs:string(&quot;-1.0E7&quot;)</result-string>
    <result>
      <assert-string-value>-1.0E7</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs098">
    <description>Try casting xs:string(true) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;true&quot;) cast as xs:double</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs099">
    <description>Try casting xs:string(-0.0E0) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;-0.0E0&quot;) cast as xs:decimal</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs100">
    <description>Try casting xs:string(NaN) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;NaN&quot;) cast as xs:decimal</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs101">
    <description>Try casting xs:string(1e-5) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;1e-5&quot;) cast as xs:decimal</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs102">
    <description>Try casting xs:string(5.5432) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;5.5432&quot;) cast as xs:decimal</test>
    <result-string>xs:string(&quot;5.5432&quot;)</result-string>
    <result>
      <assert-string-value>5.5432</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs103">
    <description>Try casting xs:string(true) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;true&quot;) cast as xs:decimal</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs104">
    <description>Try casting xs:string(-0.0E0) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;-0.0E0&quot;) cast as xs:integer</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs105">
    <description>Try casting xs:string(NaN) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;NaN&quot;) cast as xs:integer</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs106">
    <description>Try casting xs:string(1e-5) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;1e-5&quot;) cast as xs:integer</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs107">
    <description>Try casting xs:string(-1.1234) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;-1.1234&quot;) cast as xs:integer</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs108">
    <description>Try casting xs:string(true) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;true&quot;) cast as xs:integer</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs109">
    <description>Try casting xs:string(P1Y2M3DT10H30M23S) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;P1Y2M3DT10H30M23S&quot;) cast as xs:duration</test>
    <result-string>xs:string(&quot;P1Y2M3DT10H30M23S&quot;)</result-string>
    <result>
      <assert-string-value>P1Y2M3DT10H30M23S</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs110">
    <description>Try casting xs:string(-P1Y1M1DT1H1M1.123S) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;-P1Y1M1DT1H1M1.123S&quot;) cast as xs:duration</test>
    <result-string>xs:string(&quot;-P1Y1M1DT1H1M1.123S&quot;)</result-string>
    <result>
      <assert-string-value>-P1Y1M1DT1H1M1.123S</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs111">
    <description>Try casting xs:string(true) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;true&quot;) cast as xs:duration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs112">
    <description>Try casting xs:string(-P1Y1M1DT1H1M1.123S) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;-P1Y1M1DT1H1M1.123S&quot;) cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs113">
    <description>Try casting xs:string(P24M) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;P24M&quot;) cast as xs:yearMonthDuration</test>
    <result-string>xs:string(&quot;P2Y&quot;)</result-string>
    <result>
      <assert-string-value>P2Y</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs114">
    <description>Try casting xs:string(-P21M) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;-P21M&quot;) cast as xs:yearMonthDuration</test>
    <result-string>xs:string(&quot;-P1Y9M&quot;)</result-string>
    <result>
      <assert-string-value>-P1Y9M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs115">
    <description>Try casting xs:string(true) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;true&quot;) cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs116">
    <description>Try casting xs:string(-P1Y1M1DT1H1M1.123S) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;-P1Y1M1DT1H1M1.123S&quot;) cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs117">
    <description>Try casting xs:string(P3DT10H30M) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;P3DT10H30M&quot;) cast as xs:dayTimeDuration</test>
    <result-string>xs:string(&quot;P3DT10H30M&quot;)</result-string>
    <result>
      <assert-string-value>P3DT10H30M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs118">
    <description>Try casting xs:string(-PT100M) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;-PT100M&quot;) cast as xs:dayTimeDuration</test>
    <result-string>xs:string(&quot;-PT1H40M&quot;)</result-string>
    <result>
      <assert-string-value>-PT1H40M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs119">
    <description>Try casting xs:string(true) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;true&quot;) cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs120">
    <description>Try casting xs:string(1999-05-31T13:20:00) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;1999-05-31T13:20:00&quot;) cast as xs:dateTime</test>
    <result-string>xs:string(&quot;1999-05-31T13:20:00&quot;)</result-string>
    <result>
      <assert-string-value>1999-05-31T13:20:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs121">
    <description>Try casting xs:string(-1999-05-31T13:20:00+14:00) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;-1999-05-31T13:20:00+14:00&quot;) cast as xs:dateTime</test>
    <result-string>xs:string(&quot;-1999-05-31T13:20:00+14:00&quot;)</result-string>
    <result>
      <assert-string-value>-1999-05-31T13:20:00+14:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs122">
    <description>Try casting xs:string(2000-01-16T00:00:00Z) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;2000-01-16T00:00:00Z&quot;) cast as xs:dateTime</test>
    <result-string>xs:string(&quot;2000-01-16T00:00:00Z&quot;)</result-string>
    <result>
      <assert-string-value>2000-01-16T00:00:00Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs123">
    <description>Try casting xs:string(true) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;true&quot;) cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs124">
    <description>Try casting xs:string(13:20:00-05:00) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;13:20:00-05:00&quot;) cast as xs:time</test>
    <result-string>xs:string(&quot;13:20:00-05:00&quot;)</result-string>
    <result>
      <assert-string-value>13:20:00-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs125">
    <description>Try casting xs:string(13:20:02.123) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;13:20:02.123&quot;) cast as xs:time</test>
    <result-string>xs:string(&quot;13:20:02.123&quot;)</result-string>
    <result>
      <assert-string-value>13:20:02.123</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs126">
    <description>Try casting xs:string(13:20:00Z) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;13:20:00Z&quot;) cast as xs:time</test>
    <result-string>xs:string(&quot;13:20:00Z&quot;)</result-string>
    <result>
      <assert-string-value>13:20:00Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs127">
    <description>Try casting xs:string(true) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;true&quot;) cast as xs:time</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs128">
    <description>Try casting xs:string(1999-05-31) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;1999-05-31&quot;) cast as xs:date</test>
    <result-string>xs:string(&quot;1999-05-31&quot;)</result-string>
    <result>
      <assert-string-value>1999-05-31</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs129">
    <description>Try casting xs:string(-0012-12-03-05:00) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;-0012-12-03-05:00&quot;) cast as xs:date</test>
    <result-string>xs:string(&quot;-0012-12-03-05:00&quot;)</result-string>
    <result>
      <assert-string-value>-0012-12-03-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs130">
    <description>Try casting xs:string(1999-05-31Z) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;1999-05-31Z&quot;) cast as xs:date</test>
    <result-string>xs:string(&quot;1999-05-31Z&quot;)</result-string>
    <result>
      <assert-string-value>1999-05-31Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs131">
    <description>Try casting xs:string(true) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;true&quot;) cast as xs:date</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs132">
    <description>Try casting xs:string(1999-05) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;1999-05&quot;) cast as xs:gYearMonth</test>
    <result-string>xs:string(&quot;1999-05&quot;)</result-string>
    <result>
      <assert-string-value>1999-05</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs133">
    <description>Try casting xs:string(-0012-12-05:00) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;-0012-12-05:00&quot;) cast as xs:gYearMonth</test>
    <result-string>xs:string(&quot;-0012-12-05:00&quot;)</result-string>
    <result>
      <assert-string-value>-0012-12-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs134">
    <description>Try casting xs:string(1999-05Z) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;1999-05Z&quot;) cast as xs:gYearMonth</test>
    <result-string>xs:string(&quot;1999-05Z&quot;)</result-string>
    <result>
      <assert-string-value>1999-05Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs135">
    <description>Try casting xs:string(true) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;true&quot;) cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs136">
    <description>Try casting xs:string(1999) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;1999&quot;) cast as xs:gYear</test>
    <result-string>xs:string(&quot;1999&quot;)</result-string>
    <result>
      <assert-string-value>1999</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs137">
    <description>Try casting xs:string(-0012-05:00) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;-0012-05:00&quot;) cast as xs:gYear</test>
    <result-string>xs:string(&quot;-0012-05:00&quot;)</result-string>
    <result>
      <assert-string-value>-0012-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs138">
    <description>Try casting xs:string(1999Z) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;1999Z&quot;) cast as xs:gYear</test>
    <result-string>xs:string(&quot;1999Z&quot;)</result-string>
    <result>
      <assert-string-value>1999Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs139">
    <description>Try casting xs:string(true) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;true&quot;) cast as xs:gYear</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs140">
    <description>Try casting xs:string(--05-31) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;--05-31&quot;) cast as xs:gMonthDay</test>
    <result-string>xs:string(&quot;--05-31&quot;)</result-string>
    <result>
      <assert-string-value>--05-31</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs141">
    <description>Try casting xs:string(--05-31+14:00) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;--05-31+14:00&quot;) cast as xs:gMonthDay</test>
    <result-string>xs:string(&quot;--05-31+14:00&quot;)</result-string>
    <result>
      <assert-string-value>--05-31+14:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs142">
    <description>Try casting xs:string(--05-31Z) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;--05-31Z&quot;) cast as xs:gMonthDay</test>
    <result-string>xs:string(&quot;--05-31Z&quot;)</result-string>
    <result>
      <assert-string-value>--05-31Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs143">
    <description>Try casting xs:string(true) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;true&quot;) cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs144">
    <description>Try casting xs:string(---31) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;---31&quot;) cast as xs:gDay</test>
    <result-string>xs:string(&quot;---31&quot;)</result-string>
    <result>
      <assert-string-value>---31</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs145">
    <description>Try casting xs:string(---03-05:00) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;---03-05:00&quot;) cast as xs:gDay</test>
    <result-string>xs:string(&quot;---03-05:00&quot;)</result-string>
    <result>
      <assert-string-value>---03-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs146">
    <description>Try casting xs:string(---31Z) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;---31Z&quot;) cast as xs:gDay</test>
    <result-string>xs:string(&quot;---31Z&quot;)</result-string>
    <result>
      <assert-string-value>---31Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs147">
    <description>Try casting xs:string(true) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;true&quot;) cast as xs:gDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs148">
    <description>Try casting xs:string(--05) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;--05&quot;) cast as xs:gMonth</test>
    <result-string>xs:string(&quot;--05&quot;)</result-string>
    <result>
      <assert-string-value>--05</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs149">
    <description>Try casting xs:string(--12-05:00) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;--12-05:00&quot;) cast as xs:gMonth</test>
    <result-string>xs:string(&quot;--12-05:00&quot;)</result-string>
    <result>
      <assert-string-value>--12-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs150">
    <description>Try casting xs:string(--05Z) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;--05Z&quot;) cast as xs:gMonth</test>
    <result-string>xs:string(&quot;--05Z&quot;)</result-string>
    <result>
      <assert-string-value>--05Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs151">
    <description>Try casting xs:string(true) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;true&quot;) cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs152">
    <description>Try casting xs:string(0.0) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;0.0&quot;) cast as xs:boolean</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs153">
    <description>Try casting xs:string(0) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;0&quot;) cast as xs:boolean</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="CastAs154">
    <description>Try casting xs:string(true) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;true&quot;) cast as xs:boolean</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="CastAs155">
    <description>Try casting xs:string(true) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;true&quot;) cast as xs:base64Binary</test>
    <result-string>xs:string(&quot;true&quot;)</result-string>
    <result>
      <assert-string-value>true</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs156">
    <description>Try casting xs:string(00000000) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;00000000&quot;) cast as xs:base64Binary</test>
    <result-string>xs:string(&quot;00000000&quot;)</result-string>
    <result>
      <assert-string-value>00000000</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs157">
    <description>Try casting xs:string(D74D35D35D35) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;D74D35D35D35&quot;) cast as xs:base64Binary</test>
    <result-string>xs:string(&quot;D74D35D35D35&quot;)</result-string>
    <result>
      <assert-string-value>D74D35D35D35</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs158">
    <description>Try casting xs:string(true) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;true&quot;) cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs159">
    <description>Try casting xs:string(010010101) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;010010101&quot;) cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs160">
    <description>Try casting xs:string(0fb7) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;0fb7&quot;) cast as xs:hexBinary</test>
    <result-string>xs:string(&quot;0FB7&quot;)</result-string>
    <result>
      <assert-string-value>0FB7</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs161">
    <description>Try casting xs:string(D74D35D35D35) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;D74D35D35D35&quot;) cast as xs:hexBinary</test>
    <result-string>xs:string(&quot;D74D35D35D35&quot;)</result-string>
    <result>
      <assert-string-value>D74D35D35D35</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs162">
    <description>Try casting xs:string(-0012-05:00) to xs:anyURI</description>
    <created by="Joanne Tong" on="2006-01-27-07:00"/>
    <test>xs:string(&quot;http://www.example.com/~b%C3%A9b%C3%A9&quot;) cast as xs:anyURI</test>
    <result-string>xs:string(&quot;http://www.example.com/~b%C3%A9b%C3%A9&quot;)</result-string>
    <result>
      <assert-string-value>http://www.example.com/~b%C3%A9b%C3%A9</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs163">
    <description>Try casting xs:string(true) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;true&quot;) cast as xs:anyURI</test>
    <result-string>xs:string(&quot;true&quot;)</result-string>
    <result>
      <assert-string-value>true</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs164">
    <description>Try casting xs:string(http://www.ietf.org/rfc/rfc2396.txt) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string(&quot;http://www.ietf.org/rfc/rfc2396.txt&quot;) cast as xs:anyURI</test>
    <result-string>xs:string(&quot;http://www.ietf.org/rfc/rfc2396.txt&quot;)</result-string>
    <result>
      <assert-string-value>http://www.ietf.org/rfc/rfc2396.txt</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs165">
    <description>Try casting xs:float(1e5) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float(&quot;1e5&quot;) cast as xs:untypedAtomic</test>
    <result-string>xs:string(&quot;100000&quot;)</result-string>
    <result>
      <assert-string-value>100000</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs166">
    <description>Try casting xs:float(-INF) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float(&quot;-INF&quot;) cast as xs:untypedAtomic</test>
    <result-string>xs:string(&quot;-INF&quot;)</result-string>
    <result>
      <assert-string-value>-INF</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs167">
    <description>Try casting xs:float(-0.0E0) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float(&quot;-0.0E0&quot;) cast as xs:string</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs168">
    <description>Try casting xs:float(NaN) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float(&quot;NaN&quot;) cast as xs:string</test>
    <result-string>xs:string(&quot;NaN&quot;)</result-string>
    <result>
      <assert-string-value>NaN</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs169">
    <description>Try casting xs:float(5.4321E-100) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float(&quot;5.4321E-100&quot;) cast as xs:float</test>
    <result-string/>
    <result>
      <any-of>
        <assert-eq>0</assert-eq>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="CastAs170">
    <description>Try casting xs:float(-1.75e-3) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float(&quot;-1.75e-3&quot;) cast as xs:float</test>
    <result-string>xs:string(&quot;-0.00175&quot;)</result-string>
    <result>
      <assert-string-value>-0.00175</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs171">
    <description>Try casting xs:float(INF) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float(&quot;INF&quot;) cast as xs:float</test>
    <result-string>xs:string(&quot;INF&quot;)</result-string>
    <result>
      <assert-string-value>INF</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs172">
    <description>Try casting xs:float(-0.0E0) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float(&quot;-0.0E0&quot;) cast as xs:double</test>
    <result-string>xs:decimal(&quot;-0&quot;)</result-string>
    <result>
      <assert-eq>-0</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs173">
    <description>Try casting xs:float(-INF) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float(&quot;-INF&quot;) cast as xs:double</test>
    <result-string>xs:string(&quot;-INF&quot;)</result-string>
    <result>
      <assert-string-value>-INF</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs174">
    <description>Try casting xs:float(-0.0E0) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float(&quot;-0.0E0&quot;) cast as xs:decimal</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs175">
    <description>Try casting xs:float(5.4321E-100) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float(&quot;5.4321E-100&quot;) cast as xs:decimal</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs176">
    <description>Try casting xs:float(1e5) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float(&quot;1e5&quot;) cast as xs:decimal</test>
    <result-string>xs:decimal(&quot;100000&quot;)</result-string>
    <result>
      <assert-eq>100000</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs177">
    <description>Try casting xs:float(-1.75e-3) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>round-half-to-even(xs:float(&quot;-1.75e-3&quot;) cast as xs:decimal,5)</test>
    <result-string>xs:string(&quot;-0.00175&quot;)</result-string>
    <result>
      <assert-string-value>-0.00175</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs178">
    <description>Try casting xs:float(-0.0E0) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float(&quot;-0.0E0&quot;) cast as xs:integer</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs179">
    <description>Try casting xs:float(1e5) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float(&quot;1e5&quot;) cast as xs:integer</test>
    <result-string>xs:decimal(&quot;100000&quot;)</result-string>
    <result>
      <assert-eq>100000</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs180">
    <description>Try casting xs:float(INF) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float(&quot;INF&quot;) cast as xs:integer</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="CastAs181">
    <description>Try casting xs:float(-1.75e-3) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float(&quot;-1.75e-3&quot;) cast as xs:duration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs182">
    <description>Try casting xs:float(5.4321E-100) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float(&quot;5.4321E-100&quot;) cast as xs:yearMonthDuration</test>
    <result-string/>
    <result>
      <any-of>
        <error code="XPTY0004"/>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="CastAs183">
    <description>Try casting xs:float(5.4321E-100) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float(&quot;5.4321E-100&quot;) cast as xs:dayTimeDuration</test>
    <result-string/>
    <result>
      <any-of>
        <error code="XPTY0004"/>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="CastAs184">
    <description>Try casting xs:float(5.4321E-100) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float(&quot;5.4321E-100&quot;) cast as xs:dateTime</test>
    <result-string/>
    <result>
      <any-of>
        <error code="XPTY0004"/>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="CastAs185">
    <description>Try casting xs:float(5.4321E-100) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float(&quot;5.4321E-100&quot;) cast as xs:time</test>
    <result-string/>
    <result>
      <any-of>
        <error code="XPTY0004"/>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="CastAs186">
    <description>Try casting xs:float(5.4321E-100) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float(&quot;5.4321E-100&quot;) cast as xs:date</test>
    <result-string/>
    <result>
      <any-of>
        <error code="XPTY0004"/>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="CastAs187">
    <description>Try casting xs:float(5.4321E-100) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float(&quot;5.4321E-100&quot;) cast as xs:gYearMonth</test>
    <result-string/>
    <result>
      <any-of>
        <error code="XPTY0004"/>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="CastAs188">
    <description>Try casting xs:float(5.4321E-100) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float(&quot;5.4321E-100&quot;) cast as xs:gYear</test>
    <result-string/>
    <result>
      <any-of>
        <error code="XPTY0004"/>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="CastAs189">
    <description>Try casting xs:float(5.4321E-100) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float(&quot;5.4321E-100&quot;) cast as xs:gMonthDay</test>
    <result-string/>
    <result>
      <any-of>
        <error code="XPTY0004"/>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="CastAs190">
    <description>Try casting xs:float(5.4321E-100) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float(&quot;5.4321E-100&quot;) cast as xs:gDay</test>
    <result-string/>
    <result>
      <any-of>
        <error code="XPTY0004"/>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="CastAs191">
    <description>Try casting xs:float(5.4321E-100) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float(&quot;5.4321E-100&quot;) cast as xs:gMonth</test>
    <result-string/>
    <result>
      <any-of>
        <error code="XPTY0004"/>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="CastAs192">
    <description>Try casting xs:float(-0.0E0) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float(&quot;-0.0E0&quot;) cast as xs:boolean</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="CastAs193">
    <description>Try casting xs:float(1e5) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float(&quot;1e5&quot;) cast as xs:boolean</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="CastAs194">
    <description>Try casting xs:float(-INF) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float(&quot;-INF&quot;) cast as xs:boolean</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="CastAs195">
    <description>Try casting xs:float(NaN) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float(&quot;NaN&quot;) cast as xs:boolean</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="CastAs196">
    <description>Try casting xs:float(5.4321E-100) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float(&quot;5.4321E-100&quot;) cast as xs:base64Binary</test>
    <result-string/>
    <result>
      <any-of>
        <error code="XPTY0004"/>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="CastAs197">
    <description>Try casting xs:float(5.4321E-100) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float(&quot;5.4321E-100&quot;) cast as xs:hexBinary</test>
    <result-string/>
    <result>
      <any-of>
        <error code="XPTY0004"/>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="CastAs198">
    <description>Try casting xs:float(5.4321E-100) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float(&quot;5.4321E-100&quot;) cast as xs:anyURI</test>
    <result-string/>
    <result>
      <any-of>
        <error code="XPTY0004"/>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="CastAs199">
    <description>Try casting xs:double(1e5) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double(&quot;1e5&quot;) cast as xs:untypedAtomic</test>
    <result-string>xs:string(&quot;100000&quot;)</result-string>
    <result>
      <assert-string-value>100000</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs200">
    <description>Try casting xs:double(INF) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double(&quot;INF&quot;) cast as xs:untypedAtomic</test>
    <result-string>xs:string(&quot;INF&quot;)</result-string>
    <result>
      <assert-string-value>INF</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs201">
    <description>Try casting xs:double(1e8) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double(&quot;1e8&quot;) cast as xs:string</test>
    <result-string>xs:string(&quot;1.0E8&quot;)</result-string>
    <result>
      <assert-string-value>1.0E8</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs202">
    <description>Try casting xs:double(INF) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double(&quot;INF&quot;) cast as xs:string</test>
    <result-string>xs:string(&quot;INF&quot;)</result-string>
    <result>
      <assert-string-value>INF</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs203">
    <description>Try casting xs:double(-0.0E0) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double(&quot;-0.0E0&quot;) cast as xs:float</test>
    <result-string>xs:decimal(&quot;-0&quot;)</result-string>
    <result>
      <assert-eq>-0</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs204">
    <description>Try casting xs:double(5.4321E-1001) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double(&quot;5.4321E-1001&quot;) cast as xs:float</test>
    <result-string/>
    <result>
      <any-of>
        <assert-eq>0</assert-eq>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="CastAs205">
    <description>Try casting xs:double(1e5) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double(&quot;1e5&quot;) cast as xs:float</test>
    <result-string>xs:decimal(&quot;100000&quot;)</result-string>
    <result>
      <assert-eq>100000</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs206">
    <description>Try casting xs:double(-1.75e-3) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double(&quot;-1.75e-3&quot;) cast as xs:float</test>
    <result-string>xs:string(&quot;-0.00175&quot;)</result-string>
    <result>
      <assert-string-value>-0.00175</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs207">
    <description>Try casting xs:double(NaN) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double(&quot;NaN&quot;) cast as xs:float</test>
    <result-string>xs:string(&quot;NaN&quot;)</result-string>
    <result>
      <assert-string-value>NaN</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs208">
    <description>Try casting xs:double(1e5) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double(&quot;1e5&quot;) cast as xs:double</test>
    <result-string>xs:decimal(&quot;100000&quot;)</result-string>
    <result>
      <assert-eq>100000</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs209">
    <description>Try casting xs:double(INF) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double(&quot;INF&quot;) cast as xs:double</test>
    <result-string>xs:string(&quot;INF&quot;)</result-string>
    <result>
      <assert-string-value>INF</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs210">
    <description>Try casting xs:double(-0.0E0) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double(&quot;-0.0E0&quot;) cast as xs:decimal</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs211">
    <description>Try casting xs:double(5.4321E-1001) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double(&quot;5.4321E-1001&quot;) cast as xs:decimal</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs212">
    <description>Try casting xs:double(-1.75e-3) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>round-half-to-even(xs:double(&quot;-1.75e-3&quot;) cast as xs:decimal,5)</test>
    <result-string>xs:string(&quot;-0.00175&quot;)</result-string>
    <result>
      <assert-string-value>-0.00175</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs213">
    <description>Try casting xs:double(INF) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double(&quot;INF&quot;) cast as xs:decimal</test>
    <result-string/>
    <result>
      <any-of>
        <error code="FOCA0002"/>
        <error code="FORG0001"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="CastAs214">
    <description>Try casting xs:double(-0.0E0) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double(&quot;-0.0E0&quot;) cast as xs:integer</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs215">
    <description>Try casting xs:double(1e5) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double(&quot;1e5&quot;) cast as xs:integer</test>
    <result-string>xs:decimal(&quot;100000&quot;)</result-string>
    <result>
      <assert-eq>100000</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs216">
    <description>Try casting xs:double(-1.75e-3) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double(&quot;-1.75e-3&quot;) cast as xs:integer</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs217">
    <description>Try casting xs:double(INF) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double(&quot;INF&quot;) cast as xs:integer</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="CastAs218">
    <description>Try casting xs:double(NaN) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double(&quot;NaN&quot;) cast as xs:integer</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="CastAs219">
    <description>Try casting xs:double(1e5) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double(&quot;1e5&quot;) cast as xs:duration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs220">
    <description>Try casting xs:double(1e5) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double(&quot;1e5&quot;) cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs221">
    <description>Try casting xs:double(1e5) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double(&quot;1e5&quot;) cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs222">
    <description>Try casting xs:double(1e5) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double(&quot;1e5&quot;) cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs223">
    <description>Try casting xs:double(1e5) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double(&quot;1e5&quot;) cast as xs:time</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs224">
    <description>Try casting xs:double(1e5) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double(&quot;1e5&quot;) cast as xs:date</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs225">
    <description>Try casting xs:double(1e5) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double(&quot;1e5&quot;) cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs226">
    <description>Try casting xs:double(1e5) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double(&quot;1e5&quot;) cast as xs:gYear</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs227">
    <description>Try casting xs:double(1e5) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double(&quot;1e5&quot;) cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs228">
    <description>Try casting xs:double(1e5) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double(&quot;1e5&quot;) cast as xs:gDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs229">
    <description>Try casting xs:double(1e5) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double(&quot;1e5&quot;) cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs230">
    <description>Try casting xs:double(1e5) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double(&quot;1e5&quot;) cast as xs:boolean</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="CastAs231">
    <description>Try casting xs:double(1e5) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double(&quot;1e5&quot;) cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs232">
    <description>Try casting xs:double(1e5) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double(&quot;1e5&quot;) cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs233">
    <description>Try casting xs:double(1e5) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double(&quot;1e5&quot;) cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs234">
    <description>Try casting xs:decimal(-1.1234) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal(&quot;-1.1234&quot;) cast as xs:untypedAtomic</test>
    <result-string>xs:string(&quot;-1.1234&quot;)</result-string>
    <result>
      <assert-string-value>-1.1234</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs235">
    <description>Try casting xs:decimal(-1.1234) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal(&quot;-1.1234&quot;) cast as xs:string</test>
    <result-string>xs:string(&quot;-1.1234&quot;)</result-string>
    <result>
      <assert-string-value>-1.1234</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs236">
    <description>Try casting xs:decimal(-1.1234) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal(&quot;-1.1234&quot;) cast as xs:float</test>
    <result-string>xs:string(&quot;-1.1234&quot;)</result-string>
    <result>
      <assert-string-value>-1.1234</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs237">
    <description>Try casting xs:decimal(-1.1234) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal(&quot;-1.1234&quot;) cast as xs:double</test>
    <result-string>xs:string(&quot;-1.1234&quot;)</result-string>
    <result>
      <assert-string-value>-1.1234</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs238">
    <description>Try casting xs:decimal(-1.1234) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal(&quot;-1.1234&quot;) cast as xs:decimal</test>
    <result-string>xs:string(&quot;-1.1234&quot;)</result-string>
    <result>
      <assert-string-value>-1.1234</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs239">
    <description>Try casting xs:decimal(-1.1234) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal(&quot;-1.1234&quot;) cast as xs:integer</test>
    <result-string>xs:decimal(&quot;-1&quot;)</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs240">
    <description>Try casting xs:decimal(5.5432) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal(&quot;5.5432&quot;) cast as xs:integer</test>
    <result-string>xs:decimal(&quot;5&quot;)</result-string>
    <result>
      <assert-eq>5</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs241">
    <description>Try casting xs:decimal(-1.1234) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal(&quot;-1.1234&quot;) cast as xs:duration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs242">
    <description>Try casting xs:decimal(-1.1234) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal(&quot;-1.1234&quot;) cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs243">
    <description>Try casting xs:decimal(-1.1234) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal(&quot;-1.1234&quot;) cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs244">
    <description>Try casting xs:decimal(-1.1234) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal(&quot;-1.1234&quot;) cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs245">
    <description>Try casting xs:decimal(-1.1234) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal(&quot;-1.1234&quot;) cast as xs:time</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs246">
    <description>Try casting xs:decimal(-1.1234) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal(&quot;-1.1234&quot;) cast as xs:date</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs247">
    <description>Try casting xs:decimal(-1.1234) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal(&quot;-1.1234&quot;) cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs248">
    <description>Try casting xs:decimal(-1.1234) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal(&quot;-1.1234&quot;) cast as xs:gYear</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs249">
    <description>Try casting xs:decimal(-1.1234) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal(&quot;-1.1234&quot;) cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs250">
    <description>Try casting xs:decimal(-1.1234) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal(&quot;-1.1234&quot;) cast as xs:gDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs251">
    <description>Try casting xs:decimal(-1.1234) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal(&quot;-1.1234&quot;) cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs252">
    <description>Try casting xs:decimal(-1.1234) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal(&quot;-1.1234&quot;) cast as xs:boolean</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="CastAs253">
    <description>Try casting xs:decimal(-1.1234) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal(&quot;-1.1234&quot;) cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs254">
    <description>Try casting xs:decimal(-1.1234) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal(&quot;-1.1234&quot;) cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs255">
    <description>Try casting xs:decimal(-1.1234) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal(&quot;-1.1234&quot;) cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs256">
    <description>Try casting xs:integer(1) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:integer(&quot;1&quot;) cast as xs:untypedAtomic</test>
    <result-string>xs:string(&quot;1&quot;)</result-string>
    <result>
      <assert-string-value>1</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs257">
    <description>Try casting xs:integer(-100) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:integer(&quot;-100&quot;) cast as xs:string</test>
    <result-string>xs:string(&quot;-100&quot;)</result-string>
    <result>
      <assert-string-value>-100</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs258">
    <description>Try casting xs:integer(-100) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:integer(&quot;-100&quot;) cast as xs:float</test>
    <result-string>xs:decimal(&quot;-100&quot;)</result-string>
    <result>
      <assert-eq>-100</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs259">
    <description>Try casting xs:integer(-100) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:integer(&quot;-100&quot;) cast as xs:double</test>
    <result-string>xs:decimal(&quot;-100&quot;)</result-string>
    <result>
      <assert-eq>-100</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs260">
    <description>Try casting xs:integer(-100) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:integer(&quot;-100&quot;) cast as xs:decimal</test>
    <result-string>xs:decimal(&quot;-100&quot;)</result-string>
    <result>
      <assert-eq>-100</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs261">
    <description>Try casting xs:integer(-100) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:integer(&quot;-100&quot;) cast as xs:integer</test>
    <result-string>xs:decimal(&quot;-100&quot;)</result-string>
    <result>
      <assert-eq>-100</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs262">
    <description>Try casting xs:integer(-100) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:integer(&quot;-100&quot;) cast as xs:duration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs263">
    <description>Try casting xs:integer(-100) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:integer(&quot;-100&quot;) cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs264">
    <description>Try casting xs:integer(-100) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:integer(&quot;-100&quot;) cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs265">
    <description>Try casting xs:integer(-100) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:integer(&quot;-100&quot;) cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs266">
    <description>Try casting xs:integer(-100) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:integer(&quot;-100&quot;) cast as xs:time</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs267">
    <description>Try casting xs:integer(-100) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:integer(&quot;-100&quot;) cast as xs:date</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs268">
    <description>Try casting xs:integer(-100) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:integer(&quot;-100&quot;) cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs269">
    <description>Try casting xs:integer(-100) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:integer(&quot;-100&quot;) cast as xs:gYear</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs270">
    <description>Try casting xs:integer(-100) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:integer(&quot;-100&quot;) cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs271">
    <description>Try casting xs:integer(-100) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:integer(&quot;-100&quot;) cast as xs:gDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs272">
    <description>Try casting xs:integer(-100) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:integer(&quot;-100&quot;) cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs273">
    <description>Try casting xs:integer(-100) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:integer(&quot;-100&quot;) cast as xs:boolean</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="CastAs274">
    <description>Try casting xs:integer(-100) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:integer(&quot;-100&quot;) cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs275">
    <description>Try casting xs:integer(-100) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:integer(&quot;-100&quot;) cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs276">
    <description>Try casting xs:integer(-100) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:integer(&quot;-100&quot;) cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs277">
    <description>Try casting xs:duration(P1Y2M3DT10H30M23S) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M23S&quot;) cast as xs:untypedAtomic</test>
    <result-string>xs:string(&quot;P1Y2M3DT10H30M23S&quot;)</result-string>
    <result>
      <assert-string-value>P1Y2M3DT10H30M23S</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs278">
    <description>Try casting xs:duration(P1Y2M3DT10H30M23S) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M23S&quot;) cast as xs:string</test>
    <result-string>xs:string(&quot;P1Y2M3DT10H30M23S&quot;)</result-string>
    <result>
      <assert-string-value>P1Y2M3DT10H30M23S</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs279">
    <description>Try casting xs:duration(P1Y2M3DT10H30M23S) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M23S&quot;) cast as xs:float</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs280">
    <description>Try casting xs:duration(P1Y2M3DT10H30M23S) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M23S&quot;) cast as xs:double</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs281">
    <description>Try casting xs:duration(P1Y2M3DT10H30M23S) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M23S&quot;) cast as xs:decimal</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs282">
    <description>Try casting xs:duration(P1Y2M3DT10H30M23S) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M23S&quot;) cast as xs:integer</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs283">
    <description>Try casting xs:duration(P1Y2M3DT10H30M23S) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M23S&quot;) cast as xs:duration</test>
    <result-string>xs:string(&quot;P1Y2M3DT10H30M23S&quot;)</result-string>
    <result>
      <assert-string-value>P1Y2M3DT10H30M23S</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs284">
    <description>Try casting xs:duration(PT10H) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration(&quot;PT10H&quot;) cast as xs:duration</test>
    <result-string>xs:string(&quot;PT10H&quot;)</result-string>
    <result>
      <assert-string-value>PT10H</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs285">
    <description>Try casting xs:duration(P1Y2M3DT10H30M23S) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M23S&quot;) cast as xs:yearMonthDuration</test>
    <result-string>xs:string(&quot;P1Y2M&quot;)</result-string>
    <result>
      <assert-string-value>P1Y2M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs286">
    <description>Try casting xs:duration(PT10H) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration(&quot;PT10H&quot;) cast as xs:yearMonthDuration</test>
    <result-string>xs:string(&quot;P0M&quot;)</result-string>
    <result>
      <assert-string-value>P0M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs287">
    <description>Try casting xs:duration(P24M) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration(&quot;P24M&quot;) cast as xs:yearMonthDuration</test>
    <result-string>xs:string(&quot;P2Y&quot;)</result-string>
    <result>
      <assert-string-value>P2Y</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs288">
    <description>Try casting xs:duration(P1Y2M3DT10H30M23S) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M23S&quot;) cast as xs:dayTimeDuration</test>
    <result-string>xs:string(&quot;P3DT10H30M23S&quot;)</result-string>
    <result>
      <assert-string-value>P3DT10H30M23S</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs289">
    <description>Try casting xs:duration(PT10H) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration(&quot;PT10H&quot;) cast as xs:dayTimeDuration</test>
    <result-string>xs:string(&quot;PT10H&quot;)</result-string>
    <result>
      <assert-string-value>PT10H</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs290">
    <description>Try casting xs:duration(P24M) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration(&quot;P24M&quot;) cast as xs:dayTimeDuration</test>
    <result-string>xs:string(&quot;PT0S&quot;)</result-string>
    <result>
      <assert-string-value>PT0S</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs291">
    <description>Try casting xs:duration(P1Y2M3DT10H30M23S) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M23S&quot;) cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs292">
    <description>Try casting xs:duration(P1Y2M3DT10H30M23S) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M23S&quot;) cast as xs:time</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs293">
    <description>Try casting xs:duration(P1Y2M3DT10H30M23S) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M23S&quot;) cast as xs:date</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs294">
    <description>Try casting xs:duration(P1Y2M3DT10H30M23S) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M23S&quot;) cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs295">
    <description>Try casting xs:duration(P1Y2M3DT10H30M23S) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M23S&quot;) cast as xs:gYear</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs296">
    <description>Try casting xs:duration(P1Y2M3DT10H30M23S) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M23S&quot;) cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs297">
    <description>Try casting xs:duration(P1Y2M3DT10H30M23S) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M23S&quot;) cast as xs:gDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs298">
    <description>Try casting xs:duration(P1Y2M3DT10H30M23S) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M23S&quot;) cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs299">
    <description>Try casting xs:duration(P1Y2M3DT10H30M23S) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M23S&quot;) cast as xs:boolean</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs300">
    <description>Try casting xs:duration(P1Y2M3DT10H30M23S) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M23S&quot;) cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs301">
    <description>Try casting xs:duration(P1Y2M3DT10H30M23S) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M23S&quot;) cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs302">
    <description>Try casting xs:duration(P1Y2M3DT10H30M23S) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M23S&quot;) cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs303">
    <description>Try casting xs:yearMonthDuration(P1Y2M) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration(&quot;P1Y2M&quot;) cast as xs:untypedAtomic</test>
    <result-string>xs:string(&quot;P1Y2M&quot;)</result-string>
    <result>
      <assert-string-value>P1Y2M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs304">
    <description>Try casting xs:yearMonthDuration(P1Y2M) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration(&quot;P1Y2M&quot;) cast as xs:string</test>
    <result-string>xs:string(&quot;P1Y2M&quot;)</result-string>
    <result>
      <assert-string-value>P1Y2M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs305">
    <description>Try casting xs:yearMonthDuration(P1Y2M) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration(&quot;P1Y2M&quot;) cast as xs:float</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs306">
    <description>Try casting xs:yearMonthDuration(P1Y2M) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration(&quot;P1Y2M&quot;) cast as xs:double</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs307">
    <description>Try casting xs:yearMonthDuration(P1Y2M) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration(&quot;P1Y2M&quot;) cast as xs:decimal</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs308">
    <description>Try casting xs:yearMonthDuration(P1Y2M) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration(&quot;P1Y2M&quot;) cast as xs:integer</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs309">
    <description>Try casting xs:yearMonthDuration(P1Y2M) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration(&quot;P1Y2M&quot;) cast as xs:duration</test>
    <result-string>xs:string(&quot;P1Y2M&quot;)</result-string>
    <result>
      <assert-string-value>P1Y2M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs310">
    <description>Try casting xs:yearMonthDuration(P1Y2M) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration(&quot;P1Y2M&quot;) cast as xs:yearMonthDuration</test>
    <result-string>xs:string(&quot;P1Y2M&quot;)</result-string>
    <result>
      <assert-string-value>P1Y2M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs311">
    <description>Try casting xs:yearMonthDuration(-P21M) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration(&quot;-P21M&quot;) cast as xs:yearMonthDuration</test>
    <result-string>xs:string(&quot;-P1Y9M&quot;)</result-string>
    <result>
      <assert-string-value>-P1Y9M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs312">
    <description>Try casting xs:yearMonthDuration(P1Y2M) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration(&quot;P1Y2M&quot;) cast as xs:dayTimeDuration</test>
    <result-string>xs:string(&quot;PT0S&quot;)</result-string>
    <result>
      <assert-string-value>PT0S</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs313">
    <description>Try casting xs:yearMonthDuration(P1Y2M) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration(&quot;P1Y2M&quot;) cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs314">
    <description>Try casting xs:yearMonthDuration(P1Y2M) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration(&quot;P1Y2M&quot;) cast as xs:time</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs315">
    <description>Try casting xs:yearMonthDuration(P1Y2M) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration(&quot;P1Y2M&quot;) cast as xs:date</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs316">
    <description>Try casting xs:yearMonthDuration(P1Y2M) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration(&quot;P1Y2M&quot;) cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs317">
    <description>Try casting xs:yearMonthDuration(P1Y2M) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration(&quot;P1Y2M&quot;) cast as xs:gYear</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs318">
    <description>Try casting xs:yearMonthDuration(P1Y2M) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration(&quot;P1Y2M&quot;) cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs319">
    <description>Try casting xs:yearMonthDuration(P1Y2M) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration(&quot;P1Y2M&quot;) cast as xs:gDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs320">
    <description>Try casting xs:yearMonthDuration(P1Y2M) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration(&quot;P1Y2M&quot;) cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs321">
    <description>Try casting xs:yearMonthDuration(P1Y2M) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration(&quot;P1Y2M&quot;) cast as xs:boolean</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs322">
    <description>Try casting xs:yearMonthDuration(P1Y2M) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration(&quot;P1Y2M&quot;) cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs323">
    <description>Try casting xs:yearMonthDuration(P1Y2M) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration(&quot;P1Y2M&quot;) cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs324">
    <description>Try casting xs:yearMonthDuration(P1Y2M) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration(&quot;P1Y2M&quot;) cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs325">
    <description>Try casting xs:dayTimeDuration(P3DT10H30M) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration(&quot;P3DT10H30M&quot;) cast as xs:untypedAtomic</test>
    <result-string>xs:string(&quot;P3DT10H30M&quot;)</result-string>
    <result>
      <assert-string-value>P3DT10H30M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs326">
    <description>Try casting xs:dayTimeDuration(-PT100M) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration(&quot;-PT100M&quot;) cast as xs:untypedAtomic</test>
    <result-string>xs:string(&quot;-PT1H40M&quot;)</result-string>
    <result>
      <assert-string-value>-PT1H40M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs327">
    <description>Try casting xs:dayTimeDuration(P3DT10H30M) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration(&quot;P3DT10H30M&quot;) cast as xs:string</test>
    <result-string>xs:string(&quot;P3DT10H30M&quot;)</result-string>
    <result>
      <assert-string-value>P3DT10H30M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs328">
    <description>Try casting xs:dayTimeDuration(-PT100M) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration(&quot;-PT100M&quot;) cast as xs:string</test>
    <result-string>xs:string(&quot;-PT1H40M&quot;)</result-string>
    <result>
      <assert-string-value>-PT1H40M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs329">
    <description>Try casting xs:dayTimeDuration(P3DT10H30M) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration(&quot;P3DT10H30M&quot;) cast as xs:float</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs330">
    <description>Try casting xs:dayTimeDuration(P3DT10H30M) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration(&quot;P3DT10H30M&quot;) cast as xs:double</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs331">
    <description>Try casting xs:dayTimeDuration(P3DT10H30M) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration(&quot;P3DT10H30M&quot;) cast as xs:decimal</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs332">
    <description>Try casting xs:dayTimeDuration(P3DT10H30M) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration(&quot;P3DT10H30M&quot;) cast as xs:integer</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs333">
    <description>Try casting xs:dayTimeDuration(P3DT10H30M) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration(&quot;P3DT10H30M&quot;) cast as xs:duration</test>
    <result-string>xs:string(&quot;P3DT10H30M&quot;)</result-string>
    <result>
      <assert-string-value>P3DT10H30M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs334">
    <description>Try casting xs:dayTimeDuration(PT24H) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration(&quot;PT24H&quot;) cast as xs:duration</test>
    <result-string>xs:string(&quot;P1D&quot;)</result-string>
    <result>
      <assert-string-value>P1D</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs335">
    <description>Try casting xs:dayTimeDuration(-PT100M) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration(&quot;-PT100M&quot;) cast as xs:duration</test>
    <result-string>xs:string(&quot;-PT1H40M&quot;)</result-string>
    <result>
      <assert-string-value>-PT1H40M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs336">
    <description>Try casting xs:dayTimeDuration(P3DT10H30M) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration(&quot;P3DT10H30M&quot;) cast as xs:yearMonthDuration</test>
    <result-string>xs:string(&quot;P0M&quot;)</result-string>
    <result>
      <assert-string-value>P0M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs337">
    <description>Try casting xs:dayTimeDuration(P3DT10H30M) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration(&quot;P3DT10H30M&quot;) cast as xs:dayTimeDuration</test>
    <result-string>xs:string(&quot;P3DT10H30M&quot;)</result-string>
    <result>
      <assert-string-value>P3DT10H30M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs338">
    <description>Try casting xs:dayTimeDuration(P14D) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration(&quot;P14D&quot;) cast as xs:dayTimeDuration</test>
    <result-string>xs:string(&quot;P14D&quot;)</result-string>
    <result>
      <assert-string-value>P14D</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs339">
    <description>Try casting xs:dayTimeDuration(-PT100M) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration(&quot;-PT100M&quot;) cast as xs:dayTimeDuration</test>
    <result-string>xs:string(&quot;-PT1H40M&quot;)</result-string>
    <result>
      <assert-string-value>-PT1H40M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs340">
    <description>Try casting xs:dayTimeDuration(P3DT10H30M) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration(&quot;P3DT10H30M&quot;) cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs341">
    <description>Try casting xs:dayTimeDuration(P3DT10H30M) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration(&quot;P3DT10H30M&quot;) cast as xs:time</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs342">
    <description>Try casting xs:dayTimeDuration(P3DT10H30M) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration(&quot;P3DT10H30M&quot;) cast as xs:date</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs343">
    <description>Try casting xs:dayTimeDuration(P3DT10H30M) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration(&quot;P3DT10H30M&quot;) cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs344">
    <description>Try casting xs:dayTimeDuration(P3DT10H30M) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration(&quot;P3DT10H30M&quot;) cast as xs:gYear</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs345">
    <description>Try casting xs:dayTimeDuration(P3DT10H30M) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration(&quot;P3DT10H30M&quot;) cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs346">
    <description>Try casting xs:dayTimeDuration(P3DT10H30M) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration(&quot;P3DT10H30M&quot;) cast as xs:gDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs347">
    <description>Try casting xs:dayTimeDuration(P3DT10H30M) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration(&quot;P3DT10H30M&quot;) cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs348">
    <description>Try casting xs:dayTimeDuration(P3DT10H30M) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration(&quot;P3DT10H30M&quot;) cast as xs:boolean</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs349">
    <description>Try casting xs:dayTimeDuration(P3DT10H30M) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration(&quot;P3DT10H30M&quot;) cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs350">
    <description>Try casting xs:dayTimeDuration(P3DT10H30M) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration(&quot;P3DT10H30M&quot;) cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs351">
    <description>Try casting xs:dayTimeDuration(P3DT10H30M) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration(&quot;P3DT10H30M&quot;) cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs352">
    <description>Try casting xs:dateTime(1999-05-31T13:20:00) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime(&quot;1999-05-31T13:20:00&quot;) cast as xs:untypedAtomic</test>
    <result-string>xs:string(&quot;1999-05-31T13:20:00&quot;)</result-string>
    <result>
      <assert-string-value>1999-05-31T13:20:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs353">
    <description>Try casting xs:dateTime(-1999-05-31T13:20:00+14:00) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime(&quot;-1999-05-31T13:20:00+14:00&quot;) cast as xs:untypedAtomic</test>
    <result-string>xs:string(&quot;-1999-05-31T13:20:00+14:00&quot;)</result-string>
    <result>
      <assert-string-value>-1999-05-31T13:20:00+14:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs354">
    <description>Try casting xs:dateTime(1999-05-31T13:20:00) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime(&quot;1999-05-31T13:20:00&quot;) cast as xs:string</test>
    <result-string>xs:string(&quot;1999-05-31T13:20:00&quot;)</result-string>
    <result>
      <assert-string-value>1999-05-31T13:20:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs355">
    <description>Try casting xs:dateTime(-1999-05-31T13:20:00+14:00) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime(&quot;-1999-05-31T13:20:00+14:00&quot;) cast as xs:string</test>
    <result-string>xs:string(&quot;-1999-05-31T13:20:00+14:00&quot;)</result-string>
    <result>
      <assert-string-value>-1999-05-31T13:20:00+14:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs356">
    <description>Try casting xs:dateTime(1999-05-31T13:20:00) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime(&quot;1999-05-31T13:20:00&quot;) cast as xs:float</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs357">
    <description>Try casting xs:dateTime(2000-01-16T00:00:00Z) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime(&quot;2000-01-16T00:00:00Z&quot;) cast as xs:float</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs358">
    <description>Try casting xs:dateTime(1999-05-31T13:20:00) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime(&quot;1999-05-31T13:20:00&quot;) cast as xs:decimal</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs359">
    <description>Try casting xs:dateTime(1999-05-31T13:20:00) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime(&quot;1999-05-31T13:20:00&quot;) cast as xs:integer</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs360">
    <description>Try casting xs:dateTime(1999-05-31T13:20:00) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime(&quot;1999-05-31T13:20:00&quot;) cast as xs:duration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs361">
    <description>Try casting xs:dateTime(1999-05-31T13:20:00) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime(&quot;1999-05-31T13:20:00&quot;) cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs362">
    <description>Try casting xs:dateTime(1999-05-31T13:20:00) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime(&quot;1999-05-31T13:20:00&quot;) cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs363">
    <description>Try casting xs:dateTime(1999-05-31T13:20:00) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime(&quot;1999-05-31T13:20:00&quot;) cast as xs:dateTime</test>
    <result-string>xs:string(&quot;1999-05-31T13:20:00&quot;)</result-string>
    <result>
      <assert-string-value>1999-05-31T13:20:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs364">
    <description>Try casting xs:dateTime(1999-05-31T13:20:00) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime(&quot;1999-05-31T13:20:00&quot;) cast as xs:time</test>
    <result-string>xs:string(&quot;13:20:00&quot;)</result-string>
    <result>
      <assert-string-value>13:20:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs365">
    <description>Try casting xs:dateTime(-1999-05-31T13:20:00+14:00) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime(&quot;-1999-05-31T13:20:00+14:00&quot;) cast as xs:time</test>
    <result-string>xs:string(&quot;13:20:00+14:00&quot;)</result-string>
    <result>
      <assert-string-value>13:20:00+14:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs366">
    <description>Try casting xs:dateTime(1999-05-31T13:20:00) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime(&quot;1999-05-31T13:20:00&quot;) cast as xs:date</test>
    <result-string>xs:string(&quot;1999-05-31&quot;)</result-string>
    <result>
      <assert-string-value>1999-05-31</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs367">
    <description>Try casting xs:dateTime(-1999-05-31T13:20:00+14:00) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime(&quot;-1999-05-31T13:20:00+14:00&quot;) cast as xs:date</test>
    <result-string>xs:string(&quot;-1999-05-31+14:00&quot;)</result-string>
    <result>
      <assert-string-value>-1999-05-31+14:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs368">
    <description>Try casting xs:dateTime(1999-05-31T13:20:00) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime(&quot;1999-05-31T13:20:00&quot;) cast as xs:gYearMonth</test>
    <result-string>xs:string(&quot;1999-05&quot;)</result-string>
    <result>
      <assert-string-value>1999-05</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs369">
    <description>Try casting xs:dateTime(-1999-05-31T13:20:00+14:00) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime(&quot;-1999-05-31T13:20:00+14:00&quot;) cast as xs:gYearMonth</test>
    <result-string>xs:string(&quot;-1999-05+14:00&quot;)</result-string>
    <result>
      <assert-string-value>-1999-05+14:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs370">
    <description>Try casting xs:dateTime(1999-05-31T13:20:00) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime(&quot;1999-05-31T13:20:00&quot;) cast as xs:gYear</test>
    <result-string>xs:string(&quot;1999&quot;)</result-string>
    <result>
      <assert-string-value>1999</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs371">
    <description>Try casting xs:dateTime(-1999-05-31T13:20:00+14:00) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime(&quot;-1999-05-31T13:20:00+14:00&quot;) cast as xs:gYear</test>
    <result-string>xs:string(&quot;-1999+14:00&quot;)</result-string>
    <result>
      <assert-string-value>-1999+14:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs372">
    <description>Try casting xs:dateTime(1999-05-31T13:20:00) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime(&quot;1999-05-31T13:20:00&quot;) cast as xs:gMonthDay</test>
    <result-string>xs:string(&quot;--05-31&quot;)</result-string>
    <result>
      <assert-string-value>--05-31</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs373">
    <description>Try casting xs:dateTime(-1999-05-31T13:20:00+14:00) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime(&quot;-1999-05-31T13:20:00+14:00&quot;) cast as xs:gMonthDay</test>
    <result-string>xs:string(&quot;--05-31+14:00&quot;)</result-string>
    <result>
      <assert-string-value>--05-31+14:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs374">
    <description>Try casting xs:dateTime(1999-05-31T13:20:00) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime(&quot;1999-05-31T13:20:00&quot;) cast as xs:gDay</test>
    <result-string>xs:string(&quot;---31&quot;)</result-string>
    <result>
      <assert-string-value>---31</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs375">
    <description>Try casting xs:dateTime(-1999-05-31T13:20:00+14:00) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime(&quot;-1999-05-31T13:20:00+14:00&quot;) cast as xs:gDay</test>
    <result-string>xs:string(&quot;---31+14:00&quot;)</result-string>
    <result>
      <assert-string-value>---31+14:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs376">
    <description>Try casting xs:dateTime(1999-05-31T13:20:00) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime(&quot;1999-05-31T13:20:00&quot;) cast as xs:gMonth</test>
    <result-string>xs:string(&quot;--05&quot;)</result-string>
    <result>
      <assert-string-value>--05</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs377">
    <description>Try casting xs:dateTime(-1999-05-31T13:20:00+14:00) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime(&quot;-1999-05-31T13:20:00+14:00&quot;) cast as xs:gMonth</test>
    <result-string>xs:string(&quot;--05+14:00&quot;)</result-string>
    <result>
      <assert-string-value>--05+14:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs378">
    <description>Try casting xs:dateTime(1999-05-31T13:20:00) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime(&quot;1999-05-31T13:20:00&quot;) cast as xs:boolean</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs379">
    <description>Try casting xs:dateTime(1999-05-31T13:20:00) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime(&quot;1999-05-31T13:20:00&quot;) cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs380">
    <description>Try casting xs:dateTime(1999-05-31T13:20:00) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime(&quot;1999-05-31T13:20:00&quot;) cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs381">
    <description>Try casting xs:dateTime(1999-05-31T13:20:00) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime(&quot;1999-05-31T13:20:00&quot;) cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs382">
    <description>Try casting xs:time(13:20:00-05:00) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time(&quot;13:20:00-05:00&quot;) cast as xs:untypedAtomic</test>
    <result-string>xs:string(&quot;13:20:00-05:00&quot;)</result-string>
    <result>
      <assert-string-value>13:20:00-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs383">
    <description>Try casting xs:time(13:20:00-05:00) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time(&quot;13:20:00-05:00&quot;) cast as xs:string</test>
    <result-string>xs:string(&quot;13:20:00-05:00&quot;)</result-string>
    <result>
      <assert-string-value>13:20:00-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs384">
    <description>Try casting xs:time(13:20:00-05:00) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time(&quot;13:20:00-05:00&quot;) cast as xs:float</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs385">
    <description>Try casting xs:time(13:20:00-05:00) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time(&quot;13:20:00-05:00&quot;) cast as xs:double</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs386">
    <description>Try casting xs:time(13:20:00-05:00) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time(&quot;13:20:00-05:00&quot;) cast as xs:decimal</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs387">
    <description>Try casting xs:time(13:20:00-05:00) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time(&quot;13:20:00-05:00&quot;) cast as xs:integer</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs388">
    <description>Try casting xs:time(13:20:00-05:00) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time(&quot;13:20:00-05:00&quot;) cast as xs:duration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs389">
    <description>Try casting xs:time(13:20:00-05:00) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time(&quot;13:20:00-05:00&quot;) cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs390">
    <description>Try casting xs:time(13:20:00-05:00) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time(&quot;13:20:00-05:00&quot;) cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs391">
    <description>Try casting xs:time(13:20:00-05:00) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time(&quot;13:20:00-05:00&quot;) cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs392">
    <description>Try casting xs:time(13:20:00-05:00) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time(&quot;13:20:00-05:00&quot;) cast as xs:time</test>
    <result-string>xs:string(&quot;13:20:00-05:00&quot;)</result-string>
    <result>
      <assert-string-value>13:20:00-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs393">
    <description>Try casting xs:time(13:20:02.123) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time(&quot;13:20:02.123&quot;) cast as xs:time</test>
    <result-string>xs:string(&quot;13:20:02.123&quot;)</result-string>
    <result>
      <assert-string-value>13:20:02.123</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs394">
    <description>Try casting xs:time(13:20:00Z) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time(&quot;13:20:00Z&quot;) cast as xs:time</test>
    <result-string>xs:string(&quot;13:20:00Z&quot;)</result-string>
    <result>
      <assert-string-value>13:20:00Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs395">
    <description>Try casting xs:time(13:20:00-05:00) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time(&quot;13:20:00-05:00&quot;) cast as xs:date</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs396">
    <description>Try casting xs:time(13:20:00-05:00) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time(&quot;13:20:00-05:00&quot;) cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs397">
    <description>Try casting xs:time(13:20:00-05:00) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time(&quot;13:20:00-05:00&quot;) cast as xs:gYear</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs398">
    <description>Try casting xs:time(13:20:00-05:00) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time(&quot;13:20:00-05:00&quot;) cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs399">
    <description>Try casting xs:time(13:20:00-05:00) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time(&quot;13:20:00-05:00&quot;) cast as xs:gDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs400">
    <description>Try casting xs:time(13:20:00-05:00) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time(&quot;13:20:00-05:00&quot;) cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs401">
    <description>Try casting xs:time(13:20:00-05:00) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time(&quot;13:20:00-05:00&quot;) cast as xs:boolean</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs402">
    <description>Try casting xs:time(13:20:00-05:00) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time(&quot;13:20:00-05:00&quot;) cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs403">
    <description>Try casting xs:time(13:20:00-05:00) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time(&quot;13:20:00-05:00&quot;) cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs404">
    <description>Try casting xs:time(13:20:00-05:00) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time(&quot;13:20:00-05:00&quot;) cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs405">
    <description>Try casting xs:date(1999-05-31) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date(&quot;1999-05-31&quot;) cast as xs:untypedAtomic</test>
    <result-string>xs:string(&quot;1999-05-31&quot;)</result-string>
    <result>
      <assert-string-value>1999-05-31</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs406">
    <description>Try casting xs:date(-0012-12-03-05:00) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date(&quot;-0012-12-03-05:00&quot;) cast as xs:untypedAtomic</test>
    <result-string>xs:string(&quot;-0012-12-03-05:00&quot;)</result-string>
    <result>
      <assert-string-value>-0012-12-03-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs407">
    <description>Try casting xs:date(1999-05-31) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date(&quot;1999-05-31&quot;) cast as xs:string</test>
    <result-string>xs:string(&quot;1999-05-31&quot;)</result-string>
    <result>
      <assert-string-value>1999-05-31</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs408">
    <description>Try casting xs:date(-0012-12-03-05:00) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date(&quot;-0012-12-03-05:00&quot;) cast as xs:string</test>
    <result-string>xs:string(&quot;-0012-12-03-05:00&quot;)</result-string>
    <result>
      <assert-string-value>-0012-12-03-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs409">
    <description>Try casting xs:date(1999-05-31) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date(&quot;1999-05-31&quot;) cast as xs:float</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs410">
    <description>Try casting xs:date(1999-05-31) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date(&quot;1999-05-31&quot;) cast as xs:double</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs411">
    <description>Try casting xs:date(1999-05-31Z) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date(&quot;1999-05-31Z&quot;) cast as xs:double</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs412">
    <description>Try casting xs:date(1999-05-31) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date(&quot;1999-05-31&quot;) cast as xs:integer</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs413">
    <description>Try casting xs:date(1999-05-31) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date(&quot;1999-05-31&quot;) cast as xs:duration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs414">
    <description>Try casting xs:date(1999-05-31) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date(&quot;1999-05-31&quot;) cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs415">
    <description>Try casting xs:date(1999-05-31) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date(&quot;1999-05-31&quot;) cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs416">
    <description>Try casting xs:date(1999-05-31) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date(&quot;1999-05-31&quot;) cast as xs:dateTime</test>
    <result-string>xs:string(&quot;1999-05-31T00:00:00&quot;)</result-string>
    <result>
      <assert-string-value>1999-05-31T00:00:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs417">
    <description>Try casting xs:date(1999-05-31) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date(&quot;1999-05-31&quot;) cast as xs:time</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs418">
    <description>Try casting xs:date(1999-05-31) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date(&quot;1999-05-31&quot;) cast as xs:date</test>
    <result-string>xs:string(&quot;1999-05-31&quot;)</result-string>
    <result>
      <assert-string-value>1999-05-31</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs419">
    <description>Try casting xs:date(-0012-12-03-05:00) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date(&quot;-0012-12-03-05:00&quot;) cast as xs:date</test>
    <result-string>xs:string(&quot;-0012-12-03-05:00&quot;)</result-string>
    <result>
      <assert-string-value>-0012-12-03-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs420">
    <description>Try casting xs:date(1999-05-31Z) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date(&quot;1999-05-31Z&quot;) cast as xs:date</test>
    <result-string>xs:string(&quot;1999-05-31Z&quot;)</result-string>
    <result>
      <assert-string-value>1999-05-31Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs421">
    <description>Try casting xs:date(1999-05-31) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date(&quot;1999-05-31&quot;) cast as xs:gYearMonth</test>
    <result-string>xs:string(&quot;1999-05&quot;)</result-string>
    <result>
      <assert-string-value>1999-05</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs422">
    <description>Try casting xs:date(1999-05-31) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date(&quot;1999-05-31&quot;) cast as xs:gYear</test>
    <result-string>xs:string(&quot;1999&quot;)</result-string>
    <result>
      <assert-string-value>1999</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs423">
    <description>Try casting xs:date(-0012-12-03-05:00) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date(&quot;-0012-12-03-05:00&quot;) cast as xs:gYear</test>
    <result-string>xs:string(&quot;-0012-05:00&quot;)</result-string>
    <result>
      <assert-string-value>-0012-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs424">
    <description>Try casting xs:date(1999-05-31Z) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date(&quot;1999-05-31Z&quot;) cast as xs:gYear</test>
    <result-string>xs:string(&quot;1999Z&quot;)</result-string>
    <result>
      <assert-string-value>1999Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs425">
    <description>Try casting xs:date(1999-05-31) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date(&quot;1999-05-31&quot;) cast as xs:gMonthDay</test>
    <result-string>xs:string(&quot;--05-31&quot;)</result-string>
    <result>
      <assert-string-value>--05-31</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs426">
    <description>Try casting xs:date(-0012-12-03-05:00) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date(&quot;-0012-12-03-05:00&quot;) cast as xs:gMonthDay</test>
    <result-string>xs:string(&quot;--12-03-05:00&quot;)</result-string>
    <result>
      <assert-string-value>--12-03-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs427">
    <description>Try casting xs:date(1999-05-31Z) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date(&quot;1999-05-31Z&quot;) cast as xs:gMonthDay</test>
    <result-string>xs:string(&quot;--05-31Z&quot;)</result-string>
    <result>
      <assert-string-value>--05-31Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs428">
    <description>Try casting xs:date(1999-05-31Z) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date(&quot;1999-05-31Z&quot;) cast as xs:gDay</test>
    <result-string>xs:string(&quot;---31Z&quot;)</result-string>
    <result>
      <assert-string-value>---31Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs429">
    <description>Try casting xs:date(-0012-12-03-05:00) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date(&quot;-0012-12-03-05:00&quot;) cast as xs:gMonth</test>
    <result-string>xs:string(&quot;--12-05:00&quot;)</result-string>
    <result>
      <assert-string-value>--12-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs430">
    <description>Try casting xs:date(1999-05-31Z) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date(&quot;1999-05-31Z&quot;) cast as xs:gMonth</test>
    <result-string>xs:string(&quot;--05Z&quot;)</result-string>
    <result>
      <assert-string-value>--05Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs431">
    <description>Try casting xs:date(1999-05-31) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date(&quot;1999-05-31&quot;) cast as xs:boolean</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs432">
    <description>Try casting xs:date(1999-05-31) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date(&quot;1999-05-31&quot;) cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs433">
    <description>Try casting xs:date(1999-05-31) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date(&quot;1999-05-31&quot;) cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs434">
    <description>Try casting xs:date(1999-05-31) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date(&quot;1999-05-31&quot;) cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs435">
    <description>Try casting xs:gYearMonth(1999-05) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth(&quot;1999-05&quot;) cast as xs:untypedAtomic</test>
    <result-string>xs:string(&quot;1999-05&quot;)</result-string>
    <result>
      <assert-string-value>1999-05</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs436">
    <description>Try casting xs:gYearMonth(1999-05) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth(&quot;1999-05&quot;) cast as xs:string</test>
    <result-string>xs:string(&quot;1999-05&quot;)</result-string>
    <result>
      <assert-string-value>1999-05</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs437">
    <description>Try casting xs:gYearMonth(1999-05) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth(&quot;1999-05&quot;) cast as xs:float</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs438">
    <description>Try casting xs:gYearMonth(1999-05) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth(&quot;1999-05&quot;) cast as xs:double</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs439">
    <description>Try casting xs:gYearMonth(1999-05Z) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth(&quot;1999-05Z&quot;) cast as xs:double</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs440">
    <description>Try casting xs:gYearMonth(1999-05Z) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth(&quot;1999-05Z&quot;) cast as xs:decimal</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs441">
    <description>Try casting xs:gYearMonth(1999-05Z) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth(&quot;1999-05Z&quot;) cast as xs:integer</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs442">
    <description>Try casting xs:gYearMonth(1999-05Z) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth(&quot;1999-05Z&quot;) cast as xs:duration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs443">
    <description>Try casting xs:gYearMonth(1999-05Z) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth(&quot;1999-05Z&quot;) cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs444">
    <description>Try casting xs:gYearMonth(1999-05Z) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth(&quot;1999-05Z&quot;) cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs445">
    <description>Try casting xs:gYearMonth(1999-05Z) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth(&quot;1999-05Z&quot;) cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs446">
    <description>Try casting xs:gYearMonth(1999-05Z) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth(&quot;1999-05Z&quot;) cast as xs:time</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs447">
    <description>Try casting xs:gYearMonth(1999-05Z) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth(&quot;1999-05Z&quot;) cast as xs:date</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs448">
    <description>Try casting xs:gYearMonth(1999-05) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth(&quot;1999-05&quot;) cast as xs:gYearMonth</test>
    <result-string>xs:string(&quot;1999-05&quot;)</result-string>
    <result>
      <assert-string-value>1999-05</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs449">
    <description>Try casting xs:gYearMonth(-0012-12-05:00) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth(&quot;-0012-12-05:00&quot;) cast as xs:gYearMonth</test>
    <result-string>xs:string(&quot;-0012-12-05:00&quot;)</result-string>
    <result>
      <assert-string-value>-0012-12-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs450">
    <description>Try casting xs:gYearMonth(1999-05Z) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth(&quot;1999-05Z&quot;) cast as xs:gYearMonth</test>
    <result-string>xs:string(&quot;1999-05Z&quot;)</result-string>
    <result>
      <assert-string-value>1999-05Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs451">
    <description>Try casting xs:gYearMonth(1999-05Z) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth(&quot;1999-05Z&quot;) cast as xs:gYear</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs452">
    <description>Try casting xs:gYearMonth(1999-05Z) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth(&quot;1999-05Z&quot;) cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs453">
    <description>Try casting xs:gYearMonth(1999-05Z) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth(&quot;1999-05Z&quot;) cast as xs:gDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs454">
    <description>Try casting xs:gYearMonth(1999-05Z) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth(&quot;1999-05Z&quot;) cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs455">
    <description>Try casting xs:gYearMonth(1999-05Z) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth(&quot;1999-05Z&quot;) cast as xs:boolean</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs456">
    <description>Try casting xs:gYearMonth(1999-05Z) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth(&quot;1999-05Z&quot;) cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs457">
    <description>Try casting xs:gYearMonth(1999-05Z) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth(&quot;1999-05Z&quot;) cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs458">
    <description>Try casting xs:gYearMonth(1999-05Z) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth(&quot;1999-05Z&quot;) cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs459">
    <description>Try casting xs:gYear(1999) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear(&quot;1999&quot;) cast as xs:untypedAtomic</test>
    <result-string>xs:string(&quot;1999&quot;)</result-string>
    <result>
      <assert-string-value>1999</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs460">
    <description>Try casting xs:gYear(1999) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear(&quot;1999&quot;) cast as xs:string</test>
    <result-string>xs:string(&quot;1999&quot;)</result-string>
    <result>
      <assert-string-value>1999</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs461">
    <description>Try casting xs:gYear(1999) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear(&quot;1999&quot;) cast as xs:float</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs462">
    <description>Try casting xs:gYear(1999) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear(&quot;1999&quot;) cast as xs:double</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs463">
    <description>Try casting xs:gYear(1999) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear(&quot;1999&quot;) cast as xs:decimal</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs464">
    <description>Try casting xs:gYear(1999) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear(&quot;1999&quot;) cast as xs:integer</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs465">
    <description>Try casting xs:gYear(1999) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear(&quot;1999&quot;) cast as xs:duration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs466">
    <description>Try casting xs:gYear(1999) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear(&quot;1999&quot;) cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs467">
    <description>Try casting xs:gYear(1999) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear(&quot;1999&quot;) cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs468">
    <description>Try casting xs:gYear(1999) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear(&quot;1999&quot;) cast as xs:time</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs469">
    <description>Try casting xs:gYear(1999) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear(&quot;1999&quot;) cast as xs:date</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs470">
    <description>Try casting xs:gYear(1999) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear(&quot;1999&quot;) cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs471">
    <description>Try casting xs:gYear(1999) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear(&quot;1999&quot;) cast as xs:gYear</test>
    <result-string>xs:string(&quot;1999&quot;)</result-string>
    <result>
      <assert-string-value>1999</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs472">
    <description>Try casting xs:gYear(-0012-05:00) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear(&quot;-0012-05:00&quot;) cast as xs:gYear</test>
    <result-string>xs:string(&quot;-0012-05:00&quot;)</result-string>
    <result>
      <assert-string-value>-0012-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs473">
    <description>Try casting xs:gYear(1999Z) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear(&quot;1999Z&quot;) cast as xs:gYear</test>
    <result-string>xs:string(&quot;1999Z&quot;)</result-string>
    <result>
      <assert-string-value>1999Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs474">
    <description>Try casting xs:gYear(1999) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear(&quot;1999&quot;) cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs475">
    <description>Try casting xs:gYear(1999) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear(&quot;1999&quot;) cast as xs:gDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs476">
    <description>Try casting xs:gYear(1999) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear(&quot;1999&quot;) cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs477">
    <description>Try casting xs:gYear(1999) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear(&quot;1999&quot;) cast as xs:boolean</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs478">
    <description>Try casting xs:gYear(1999) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear(&quot;1999&quot;) cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs479">
    <description>Try casting xs:gYear(1999) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear(&quot;1999&quot;) cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs480">
    <description>Try casting xs:gYear(1999) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear(&quot;1999&quot;) cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs481">
    <description>Try casting xs:gMonthDay(--05-31) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay(&quot;--05-31&quot;) cast as xs:untypedAtomic</test>
    <result-string>xs:string(&quot;--05-31&quot;)</result-string>
    <result>
      <assert-string-value>--05-31</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs482">
    <description>Try casting xs:gMonthDay(--05-31) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay(&quot;--05-31&quot;) cast as xs:string</test>
    <result-string>xs:string(&quot;--05-31&quot;)</result-string>
    <result>
      <assert-string-value>--05-31</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs483">
    <description>Try casting xs:gMonthDay(--05-31) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay(&quot;--05-31&quot;) cast as xs:float</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs484">
    <description>Try casting xs:gMonthDay(--05-31) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay(&quot;--05-31&quot;) cast as xs:double</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs485">
    <description>Try casting xs:gMonthDay(--05-31) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay(&quot;--05-31&quot;) cast as xs:decimal</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs486">
    <description>Try casting xs:gMonthDay(--05-31) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay(&quot;--05-31&quot;) cast as xs:integer</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs487">
    <description>Try casting xs:gMonthDay(--05-31) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay(&quot;--05-31&quot;) cast as xs:duration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs488">
    <description>Try casting xs:gMonthDay(--05-31) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay(&quot;--05-31&quot;) cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs489">
    <description>Try casting xs:gMonthDay(--05-31) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay(&quot;--05-31&quot;) cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs490">
    <description>Try casting xs:gMonthDay(--05-31) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay(&quot;--05-31&quot;) cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs491">
    <description>Try casting xs:gMonthDay(--05-31) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay(&quot;--05-31&quot;) cast as xs:time</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs492">
    <description>Try casting xs:gMonthDay(--05-31) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay(&quot;--05-31&quot;) cast as xs:date</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs493">
    <description>Try casting xs:gMonthDay(--05-31) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay(&quot;--05-31&quot;) cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs494">
    <description>Try casting xs:gMonthDay(--05-31) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay(&quot;--05-31&quot;) cast as xs:gYear</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs495">
    <description>Try casting xs:gMonthDay(--05-31) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay(&quot;--05-31&quot;) cast as xs:gMonthDay</test>
    <result-string>xs:string(&quot;--05-31&quot;)</result-string>
    <result>
      <assert-string-value>--05-31</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs496">
    <description>Try casting xs:gMonthDay(--12-03-05:00) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay(&quot;--12-03-05:00&quot;) cast as xs:gMonthDay</test>
    <result-string>xs:string(&quot;--12-03-05:00&quot;)</result-string>
    <result>
      <assert-string-value>--12-03-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs497">
    <description>Try casting xs:gMonthDay(--05-31Z) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay(&quot;--05-31Z&quot;) cast as xs:gMonthDay</test>
    <result-string>xs:string(&quot;--05-31Z&quot;)</result-string>
    <result>
      <assert-string-value>--05-31Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs498">
    <description>Try casting xs:gMonthDay(--05-31) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay(&quot;--05-31&quot;) cast as xs:gDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs499">
    <description>Try casting xs:gMonthDay(--05-31) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay(&quot;--05-31&quot;) cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs500">
    <description>Try casting xs:gMonthDay(--05-31) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay(&quot;--05-31&quot;) cast as xs:boolean</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs501">
    <description>Try casting xs:gMonthDay(--05-31) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay(&quot;--05-31&quot;) cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs502">
    <description>Try casting xs:gMonthDay(--05-31) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay(&quot;--05-31&quot;) cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs503">
    <description>Try casting xs:gMonthDay(--05-31) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay(&quot;--05-31&quot;) cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs504">
    <description>Try casting xs:gDay(---31) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay(&quot;---31&quot;) cast as xs:untypedAtomic</test>
    <result-string>xs:string(&quot;---31&quot;)</result-string>
    <result>
      <assert-string-value>---31</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs505">
    <description>Try casting xs:gDay(---31) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay(&quot;---31&quot;) cast as xs:string</test>
    <result-string>xs:string(&quot;---31&quot;)</result-string>
    <result>
      <assert-string-value>---31</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs506">
    <description>Try casting xs:gDay(---31) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay(&quot;---31&quot;) cast as xs:float</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs507">
    <description>Try casting xs:gDay(---31) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay(&quot;---31&quot;) cast as xs:double</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs508">
    <description>Try casting xs:gDay(---31) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay(&quot;---31&quot;) cast as xs:decimal</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs509">
    <description>Try casting xs:gDay(---31) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay(&quot;---31&quot;) cast as xs:integer</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs510">
    <description>Try casting xs:gDay(---31) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay(&quot;---31&quot;) cast as xs:duration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs511">
    <description>Try casting xs:gDay(---31) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay(&quot;---31&quot;) cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs512">
    <description>Try casting xs:gDay(---31) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay(&quot;---31&quot;) cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs513">
    <description>Try casting xs:gDay(---31) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay(&quot;---31&quot;) cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs514">
    <description>Try casting xs:gDay(---31) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay(&quot;---31&quot;) cast as xs:time</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs515">
    <description>Try casting xs:gDay(---31) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay(&quot;---31&quot;) cast as xs:date</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs516">
    <description>Try casting xs:gDay(---31) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay(&quot;---31&quot;) cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs517">
    <description>Try casting xs:gDay(---31) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay(&quot;---31&quot;) cast as xs:gYear</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs518">
    <description>Try casting xs:gDay(---31) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay(&quot;---31&quot;) cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs519">
    <description>Try casting xs:gDay(---31) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay(&quot;---31&quot;) cast as xs:gDay</test>
    <result-string>xs:string(&quot;---31&quot;)</result-string>
    <result>
      <assert-string-value>---31</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs520">
    <description>Try casting xs:gDay(---03-05:00) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay(&quot;---03-05:00&quot;) cast as xs:gDay</test>
    <result-string>xs:string(&quot;---03-05:00&quot;)</result-string>
    <result>
      <assert-string-value>---03-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs521">
    <description>Try casting xs:gDay(---31Z) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay(&quot;---31Z&quot;) cast as xs:gDay</test>
    <result-string>xs:string(&quot;---31Z&quot;)</result-string>
    <result>
      <assert-string-value>---31Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs522">
    <description>Try casting xs:gDay(---31) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay(&quot;---31&quot;) cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs523">
    <description>Try casting xs:gDay(---31) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay(&quot;---31&quot;) cast as xs:boolean</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs524">
    <description>Try casting xs:gDay(---31) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay(&quot;---31&quot;) cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs525">
    <description>Try casting xs:gDay(---31) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay(&quot;---31&quot;) cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs526">
    <description>Try casting xs:gDay(---31) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay(&quot;---31&quot;) cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs527">
    <description>Try casting xs:gMonth(--05) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth(&quot;--05&quot;) cast as xs:untypedAtomic</test>
    <result-string>xs:string(&quot;--05&quot;)</result-string>
    <result>
      <assert-string-value>--05</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs528">
    <description>Try casting xs:gMonth(--05) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth(&quot;--05&quot;) cast as xs:string</test>
    <result-string>xs:string(&quot;--05&quot;)</result-string>
    <result>
      <assert-string-value>--05</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs529">
    <description>Try casting xs:gMonth(--05) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth(&quot;--05&quot;) cast as xs:float</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs530">
    <description>Try casting xs:gMonth(--05) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth(&quot;--05&quot;) cast as xs:double</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs531">
    <description>Try casting xs:gMonth(--05) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth(&quot;--05&quot;) cast as xs:decimal</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs532">
    <description>Try casting xs:gMonth(--05) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth(&quot;--05&quot;) cast as xs:integer</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs533">
    <description>Try casting xs:gMonth(--05) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth(&quot;--05&quot;) cast as xs:duration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs534">
    <description>Try casting xs:gMonth(--05) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth(&quot;--05&quot;) cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs535">
    <description>Try casting xs:gMonth(--05) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth(&quot;--05&quot;) cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs536">
    <description>Try casting xs:gMonth(--05) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth(&quot;--05&quot;) cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs537">
    <description>Try casting xs:gMonth(--05) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth(&quot;--05&quot;) cast as xs:time</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs538">
    <description>Try casting xs:gMonth(--05) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth(&quot;--05&quot;) cast as xs:date</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs539">
    <description>Try casting xs:gMonth(--05) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth(&quot;--05&quot;) cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs540">
    <description>Try casting xs:gMonth(--05) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth(&quot;--05&quot;) cast as xs:gYear</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs541">
    <description>Try casting xs:gMonth(--05) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth(&quot;--05&quot;) cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs542">
    <description>Try casting xs:gMonth(--05) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth(&quot;--05&quot;) cast as xs:gDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs543">
    <description>Try casting xs:gMonth(--05) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth(&quot;--05&quot;) cast as xs:gMonth</test>
    <result-string>xs:string(&quot;--05&quot;)</result-string>
    <result>
      <assert-string-value>--05</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs544">
    <description>Try casting xs:gMonth(--12-05:00) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth(&quot;--12-05:00&quot;) cast as xs:gMonth</test>
    <result-string>xs:string(&quot;--12-05:00&quot;)</result-string>
    <result>
      <assert-string-value>--12-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs545">
    <description>Try casting xs:gMonth(--05Z) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth(&quot;--05Z&quot;) cast as xs:gMonth</test>
    <result-string>xs:string(&quot;--05Z&quot;)</result-string>
    <result>
      <assert-string-value>--05Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs546">
    <description>Try casting xs:gMonth(--05) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth(&quot;--05&quot;) cast as xs:boolean</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs547">
    <description>Try casting xs:gMonth(--05) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth(&quot;--05&quot;) cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs548">
    <description>Try casting xs:gMonth(--05) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth(&quot;--05&quot;) cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs549">
    <description>Try casting xs:gMonth(--05) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth(&quot;--05&quot;) cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs550">
    <description>Try casting xs:boolean(true) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean(&quot;true&quot;) cast as xs:untypedAtomic</test>
    <result-string>xs:string(&quot;true&quot;)</result-string>
    <result>
      <assert-string-value>true</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs551">
    <description>Try casting xs:boolean(true) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean(&quot;true&quot;) cast as xs:string</test>
    <result-string>xs:string(&quot;true&quot;)</result-string>
    <result>
      <assert-string-value>true</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs552">
    <description>Try casting xs:boolean(true) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean(&quot;true&quot;) cast as xs:float</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs553">
    <description>Try casting xs:boolean(false) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean(&quot;false&quot;) cast as xs:float</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs554">
    <description>Try casting xs:boolean(true) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean(&quot;true&quot;) cast as xs:double</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs555">
    <description>Try casting xs:boolean(false) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean(&quot;false&quot;) cast as xs:double</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs556">
    <description>Try casting xs:boolean(true) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean(&quot;true&quot;) cast as xs:decimal</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs557">
    <description>Try casting xs:boolean(false) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean(&quot;false&quot;) cast as xs:decimal</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs558">
    <description>Try casting xs:boolean(true) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean(&quot;true&quot;) cast as xs:integer</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs559">
    <description>Try casting xs:boolean(false) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean(&quot;false&quot;) cast as xs:integer</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs560">
    <description>Try casting xs:boolean(true) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean(&quot;true&quot;) cast as xs:duration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs561">
    <description>Try casting xs:boolean(true) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean(&quot;true&quot;) cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs562">
    <description>Try casting xs:boolean(true) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean(&quot;true&quot;) cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs563">
    <description>Try casting xs:boolean(true) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean(&quot;true&quot;) cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs564">
    <description>Try casting xs:boolean(true) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean(&quot;true&quot;) cast as xs:time</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs565">
    <description>Try casting xs:boolean(true) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean(&quot;true&quot;) cast as xs:date</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs566">
    <description>Try casting xs:boolean(true) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean(&quot;true&quot;) cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs567">
    <description>Try casting xs:boolean(true) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean(&quot;true&quot;) cast as xs:gYear</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs568">
    <description>Try casting xs:boolean(true) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean(&quot;true&quot;) cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs569">
    <description>Try casting xs:boolean(true) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean(&quot;true&quot;) cast as xs:gDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs570">
    <description>Try casting xs:boolean(true) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean(&quot;true&quot;) cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs571">
    <description>Try casting xs:boolean(true) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean(&quot;true&quot;) cast as xs:boolean</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="CastAs572">
    <description>Try casting xs:boolean(false) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean(&quot;false&quot;) cast as xs:boolean</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="CastAs573">
    <description>Try casting xs:boolean(true) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean(&quot;true&quot;) cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs574">
    <description>Try casting xs:boolean(true) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean(&quot;true&quot;) cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs575">
    <description>Try casting xs:boolean(true) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean(&quot;true&quot;) cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs576">
    <description>Try casting xs:base64Binary(01001010) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary(&quot;01001010&quot;) cast as xs:untypedAtomic</test>
    <result-string>xs:string(&quot;01001010&quot;)</result-string>
    <result>
      <assert-string-value>01001010</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs577">
    <description>Try casting xs:base64Binary(0FB7) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary(&quot;0FB7&quot;) cast as xs:untypedAtomic</test>
    <result-string>xs:string(&quot;0FB7&quot;)</result-string>
    <result>
      <assert-string-value>0FB7</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs578">
    <description>Try casting xs:base64Binary(01001010) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary(&quot;01001010&quot;) cast as xs:string</test>
    <result-string>xs:string(&quot;01001010&quot;)</result-string>
    <result>
      <assert-string-value>01001010</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs579">
    <description>Try casting xs:base64Binary(0FB7) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary(&quot;0FB7&quot;) cast as xs:string</test>
    <result-string>xs:string(&quot;0FB7&quot;)</result-string>
    <result>
      <assert-string-value>0FB7</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs580">
    <description>Try casting xs:base64Binary(10010101) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary(&quot;10010101&quot;) cast as xs:float</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs581">
    <description>Try casting xs:base64Binary(10010101) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary(&quot;10010101&quot;) cast as xs:double</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs582">
    <description>Try casting xs:base64Binary(10010101) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary(&quot;10010101&quot;) cast as xs:decimal</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs583">
    <description>Try casting xs:base64Binary(10010101) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary(&quot;10010101&quot;) cast as xs:integer</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs584">
    <description>Try casting xs:base64Binary(10010101) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary(&quot;10010101&quot;) cast as xs:duration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs585">
    <description>Try casting xs:base64Binary(10010101) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary(&quot;10010101&quot;) cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs586">
    <description>Try casting xs:base64Binary(10010101) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary(&quot;10010101&quot;) cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs587">
    <description>Try casting xs:base64Binary(10010101) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary(&quot;10010101&quot;) cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs588">
    <description>Try casting xs:base64Binary(10010101) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary(&quot;10010101&quot;) cast as xs:time</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs589">
    <description>Try casting xs:base64Binary(10010101) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary(&quot;10010101&quot;) cast as xs:date</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs590">
    <description>Try casting xs:base64Binary(10010101) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary(&quot;10010101&quot;) cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs591">
    <description>Try casting xs:base64Binary(10010101) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary(&quot;10010101&quot;) cast as xs:gYear</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs592">
    <description>Try casting xs:base64Binary(10010101) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary(&quot;10010101&quot;) cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs593">
    <description>Try casting xs:base64Binary(10010101) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary(&quot;10010101&quot;) cast as xs:gDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs594">
    <description>Try casting xs:base64Binary(10010101) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary(&quot;10010101&quot;) cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs595">
    <description>Try casting xs:base64Binary(10010101) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary(&quot;10010101&quot;) cast as xs:boolean</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs596">
    <description>Try casting xs:base64Binary(01001010) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary(&quot;01001010&quot;) cast as xs:base64Binary</test>
    <result-string>xs:string(&quot;01001010&quot;)</result-string>
    <result>
      <assert-string-value>01001010</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs597">
    <description>Try casting xs:base64Binary(0FB7) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary(&quot;0FB7&quot;) cast as xs:base64Binary</test>
    <result-string>xs:string(&quot;0FB7&quot;)</result-string>
    <result>
      <assert-string-value>0FB7</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs598">
    <description>Try casting xs:base64Binary(00000000) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary(&quot;00000000&quot;) cast as xs:hexBinary</test>
    <result-string>xs:string(&quot;D34D34D34D34&quot;)</result-string>
    <result>
      <assert-string-value>D34D34D34D34</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs599">
    <description>Try casting xs:base64Binary(10010101) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary(&quot;10010101&quot;) cast as xs:hexBinary</test>
    <result-string>xs:string(&quot;D74D35D35D35&quot;)</result-string>
    <result>
      <assert-string-value>D74D35D35D35</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs600">
    <description>Try casting xs:base64Binary(aA+zZ/09) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary(&quot;aA+zZ/09&quot;) cast as xs:hexBinary</test>
    <result-string>xs:string(&quot;680FB367FD3D&quot;)</result-string>
    <result>
      <assert-string-value>680FB367FD3D</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs601">
    <description>Try casting xs:base64Binary(0FB7) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary(&quot;0FB7&quot;) cast as xs:hexBinary</test>
    <result-string>xs:string(&quot;D0507B&quot;)</result-string>
    <result>
      <assert-string-value>D0507B</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs602">
    <description>Try casting xs:base64Binary(10010101) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary(&quot;10010101&quot;) cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs603">
    <description>Try casting xs:hexBinary(D74D35D35D35) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary(&quot;D74D35D35D35&quot;) cast as xs:untypedAtomic</test>
    <result-string>xs:string(&quot;D74D35D35D35&quot;)</result-string>
    <result>
      <assert-string-value>D74D35D35D35</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs604">
    <description>Try casting xs:hexBinary(D74D35D35D35) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary(&quot;D74D35D35D35&quot;) cast as xs:string</test>
    <result-string>xs:string(&quot;D74D35D35D35&quot;)</result-string>
    <result>
      <assert-string-value>D74D35D35D35</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs605">
    <description>Try casting xs:hexBinary(D74D35D35D35) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary(&quot;D74D35D35D35&quot;) cast as xs:float</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs606">
    <description>Try casting xs:hexBinary(D74D35D35D35) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary(&quot;D74D35D35D35&quot;) cast as xs:double</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs607">
    <description>Try casting xs:hexBinary(D74D35D35D35) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary(&quot;D74D35D35D35&quot;) cast as xs:decimal</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs608">
    <description>Try casting xs:hexBinary(D74D35D35D35) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary(&quot;D74D35D35D35&quot;) cast as xs:integer</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs609">
    <description>Try casting xs:hexBinary(D74D35D35D35) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary(&quot;D74D35D35D35&quot;) cast as xs:duration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs610">
    <description>Try casting xs:hexBinary(D74D35D35D35) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary(&quot;D74D35D35D35&quot;) cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs611">
    <description>Try casting xs:hexBinary(D74D35D35D35) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary(&quot;D74D35D35D35&quot;) cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs612">
    <description>Try casting xs:hexBinary(D74D35D35D35) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary(&quot;D74D35D35D35&quot;) cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs613">
    <description>Try casting xs:hexBinary(D74D35D35D35) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary(&quot;D74D35D35D35&quot;) cast as xs:time</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs614">
    <description>Try casting xs:hexBinary(D74D35D35D35) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary(&quot;D74D35D35D35&quot;) cast as xs:date</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs615">
    <description>Try casting xs:hexBinary(D74D35D35D35) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary(&quot;D74D35D35D35&quot;) cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs616">
    <description>Try casting xs:hexBinary(D74D35D35D35) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary(&quot;D74D35D35D35&quot;) cast as xs:gYear</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs617">
    <description>Try casting xs:hexBinary(D74D35D35D35) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary(&quot;D74D35D35D35&quot;) cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs618">
    <description>Try casting xs:hexBinary(D74D35D35D35) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary(&quot;D74D35D35D35&quot;) cast as xs:gDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs619">
    <description>Try casting xs:hexBinary(D74D35D35D35) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary(&quot;D74D35D35D35&quot;) cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs620">
    <description>Try casting xs:hexBinary(D74D35D35D35) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary(&quot;D74D35D35D35&quot;) cast as xs:boolean</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs621">
    <description>Try casting xs:hexBinary(D74D35D35D35) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary(&quot;D74D35D35D35&quot;) cast as xs:base64Binary</test>
    <result-string>xs:string(&quot;10010101&quot;)</result-string>
    <result>
      <assert-string-value>10010101</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs622">
    <description>Try casting xs:hexBinary(0fb7) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary(&quot;0fb7&quot;) cast as xs:base64Binary</test>
    <result-string>xs:string(&quot;D7c=&quot;)</result-string>
    <result>
      <assert-string-value>D7c=</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs623">
    <description>Try casting xs:hexBinary(D74D35D35D35) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary(&quot;D74D35D35D35&quot;) cast as xs:hexBinary</test>
    <result-string>xs:string(&quot;D74D35D35D35&quot;)</result-string>
    <result>
      <assert-string-value>D74D35D35D35</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs624">
    <description>Try casting xs:hexBinary(d74d35d35d35) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary(&quot;d74d35d35d35&quot;) cast as xs:hexBinary</test>
    <result-string>xs:string(&quot;D74D35D35D35&quot;)</result-string>
    <result>
      <assert-string-value>D74D35D35D35</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs625">
    <description>Try casting xs:hexBinary(D74D35D35D35) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary(&quot;D74D35D35D35&quot;) cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs626">
    <description>Try casting xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:anyURI(&quot;http://www.ietf.org/rfc/rfc2396.txt&quot;) cast as xs:untypedAtomic</test>
    <result-string>xs:string(&quot;http://www.ietf.org/rfc/rfc2396.txt&quot;)</result-string>
    <result>
      <assert-string-value>http://www.ietf.org/rfc/rfc2396.txt</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs627">
    <description>Try casting xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:anyURI(&quot;http://www.ietf.org/rfc/rfc2396.txt&quot;) cast as xs:string</test>
    <result-string>xs:string(&quot;http://www.ietf.org/rfc/rfc2396.txt&quot;)</result-string>
    <result>
      <assert-string-value>http://www.ietf.org/rfc/rfc2396.txt</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs628">
    <description>Try casting xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:anyURI(&quot;http://www.ietf.org/rfc/rfc2396.txt&quot;) cast as xs:float</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs629">
    <description>Try casting xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:anyURI(&quot;http://www.ietf.org/rfc/rfc2396.txt&quot;) cast as xs:double</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs630">
    <description>Try casting xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:anyURI(&quot;http://www.ietf.org/rfc/rfc2396.txt&quot;) cast as xs:decimal</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs631">
    <description>Try casting xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:anyURI(&quot;http://www.ietf.org/rfc/rfc2396.txt&quot;) cast as xs:integer</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs632">
    <description>Try casting xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:anyURI(&quot;http://www.ietf.org/rfc/rfc2396.txt&quot;) cast as xs:duration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs633">
    <description>Try casting xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:anyURI(&quot;http://www.ietf.org/rfc/rfc2396.txt&quot;) cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs634">
    <description>Try casting xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:anyURI(&quot;http://www.ietf.org/rfc/rfc2396.txt&quot;) cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs635">
    <description>Try casting xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:anyURI(&quot;http://www.ietf.org/rfc/rfc2396.txt&quot;) cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs636">
    <description>Try casting xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:anyURI(&quot;http://www.ietf.org/rfc/rfc2396.txt&quot;) cast as xs:time</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs637">
    <description>Try casting xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:anyURI(&quot;http://www.ietf.org/rfc/rfc2396.txt&quot;) cast as xs:date</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs638">
    <description>Try casting xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:anyURI(&quot;http://www.ietf.org/rfc/rfc2396.txt&quot;) cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs639">
    <description>Try casting xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:anyURI(&quot;http://www.ietf.org/rfc/rfc2396.txt&quot;) cast as xs:gYear</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs640">
    <description>Try casting xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:anyURI(&quot;http://www.ietf.org/rfc/rfc2396.txt&quot;) cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs641">
    <description>Try casting xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:anyURI(&quot;http://www.ietf.org/rfc/rfc2396.txt&quot;) cast as xs:gDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs642">
    <description>Try casting xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:anyURI(&quot;http://www.ietf.org/rfc/rfc2396.txt&quot;) cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs643">
    <description>Try casting xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:anyURI(&quot;http://www.ietf.org/rfc/rfc2396.txt&quot;) cast as xs:boolean</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs644">
    <description>Try casting xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:anyURI(&quot;http://www.ietf.org/rfc/rfc2396.txt&quot;) cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs645">
    <description>Try casting xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:anyURI(&quot;http://www.ietf.org/rfc/rfc2396.txt&quot;) cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs646">
    <description>Try casting xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:anyURI(&quot;http://www.ietf.org/rfc/rfc2396.txt&quot;) cast as xs:anyURI</test>
    <result-string>xs:string(&quot;http://www.ietf.org/rfc/rfc2396.txt&quot;)</result-string>
    <result>
      <assert-string-value>http://www.ietf.org/rfc/rfc2396.txt</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs647">
    <description> Evaluates casting a string into a decimal.may process casting or raise error. This test may have differentoutcomes.</description>
    <created by="Carmelo Montanez" on="2006-03-29"/>
    <test>xs:string(2.123456789123456789) cast as xs:decimal</test>
    <result-string/>
    <result>
      <any-of>
        <assert-string-value>2.123456789123456789</assert-string-value>
        <error code="FOCA0006"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="CastAs648">
    <description> Evaluates casting a string into a nonPositiveInteger.</description>
    <created by="Carmelo Montanez" on="2006-07-10"/>
    <test>xs:string(-20) cast as xs:nonPositiveInteger</test>
    <result-string>xs:decimal(&quot;-20&quot;)</result-string>
    <result>
      <assert-eq>-20</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs649">
    <description> Evaluates casting a string into an xs:long.</description>
    <created by="Carmelo Montanez" on="2006-07-10"/>
    <test>xs:string(20) cast as xs:long</test>
    <result-string>xs:decimal(&quot;20&quot;)</result-string>
    <result>
      <assert-eq>20</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs650">
    <description> Evaluates casting a string into an xs:nonNegativeInteger</description>
    <created by="Carmelo Montanez" on="2006-07-10"/>
    <test>xs:string(200) cast as xs:nonNegativeInteger</test>
    <result-string>xs:decimal(&quot;200&quot;)</result-string>
    <result>
      <assert-eq>200</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs651">
    <description> Evaluates casting a string into an xs:negativeInteger</description>
    <created by="Carmelo Montanez" on="2006-07-10"/>
    <test>xs:string(-201) cast as xs:negativeInteger</test>
    <result-string>xs:decimal(&quot;-201&quot;)</result-string>
    <result>
      <assert-eq>-201</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs652">
    <description> Evaluates casting a string into an xs:int</description>
    <created by="Carmelo Montanez" on="2006-07-10"/>
    <test>xs:string(20) cast as xs:int</test>
    <result-string>xs:decimal(&quot;20&quot;)</result-string>
    <result>
      <assert-eq>20</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs653">
    <description> Evaluates casting a string into an xs:unsignedLong</description>
    <created by="Carmelo Montanez" on="2006-07-10"/>
    <test>xs:string(20) cast as xs:unsignedLong</test>
    <result-string>xs:decimal(&quot;20&quot;)</result-string>
    <result>
      <assert-eq>20</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs654">
    <description> Evaluates casting a string into an xs:positiveInteger</description>
    <created by="Carmelo Montanez" on="2006-07-10"/>
    <test>xs:string(300) cast as xs:positiveInteger</test>
    <result-string>xs:decimal(&quot;300&quot;)</result-string>
    <result>
      <assert-eq>300</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs655">
    <description> Evaluates casting a string into an xs:short</description>
    <created by="Carmelo Montanez" on="2006-07-10"/>
    <test>xs:string(30) cast as xs:short</test>
    <result-string>xs:decimal(&quot;30&quot;)</result-string>
    <result>
      <assert-eq>30</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs656">
    <description> Evaluates casting a string into an xs:unsignedInt</description>
    <created by="Carmelo Montanez" on="2006-07-10"/>
    <test>xs:string(300) cast as xs:unsignedInt</test>
    <result-string>xs:decimal(&quot;300&quot;)</result-string>
    <result>
      <assert-eq>300</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs657">
    <description> Evaluates casting a string into an xs:byte</description>
    <created by="Carmelo Montanez" on="2006-07-10"/>
    <test>xs:string(120) cast as xs:byte</test>
    <result-string>xs:decimal(&quot;120&quot;)</result-string>
    <result>
      <assert-eq>120</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs658">
    <description> Evaluates casting a string into an xs:unsignedShort</description>
    <created by="Carmelo Montanez" on="2006-07-10"/>
    <test>xs:string(12) cast as xs:unsignedShort</test>
    <result-string>xs:decimal(&quot;12&quot;)</result-string>
    <result>
      <assert-eq>12</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs659">
    <description> Evaluates casting a string into an xs:unsignedByte</description>
    <created by="Carmelo Montanez" on="2006-07-10"/>
    <test>xs:string(12) cast as xs:unsignedByte</test>
    <result-string>xs:decimal(&quot;12&quot;)</result-string>
    <result>
      <assert-eq>12</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs660">
    <description> Evaluates casting a long into an xs:short</description>
    <created by="Carmelo Montanez" on="2006-07-11"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $var := xs:long(120) cast as xs:short return $var instance of xs:short</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="CastAs661">
    <description> Evaluates casting a short into an xs:long</description>
    <created by="Carmelo Montanez" on="2006-07-11"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $var := xs:short(120) cast as xs:long return $var instance of xs:long</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="CastAs662">
    <description> Evaluates casting a xs:nonPositiveInteger into an xs:negativeInteger</description>
    <created by="Carmelo Montanez" on="2006-07-11"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $var := xs:nonPositiveInteger(-120) cast as xs:negativeInteger return $var instance of xs:negativeInteger</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="CastAs663">
    <description> Evaluates casting a xs:nonNegativeInteger into an xs:positiveInteger</description>
    <created by="Carmelo Montanez" on="2006-07-11"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $var := xs:nonNegativeInteger(120) cast as xs:positiveInteger return $var instance of xs:positiveInteger</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="CastAs664">
    <description> Evaluates casting a xs:short into an xs:unsignedShort</description>
    <created by="Carmelo Montanez" on="2006-07-11"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $var := xs:short(120) cast as xs:unsignedShort return $var instance of xs:unsignedShort</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="CastAs665">
    <description> Evaluates casting a xs:int into an xs:long</description>
    <created by="Carmelo Montanez" on="2006-07-11"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $var := xs:int(120) cast as xs:long return $var instance of xs:long</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="CastAs666">
    <description> Evaluates casting a xs:long into an xs:int</description>
    <created by="Carmelo Montanez" on="2006-07-11"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $var := xs:long(120) cast as xs:int return $var instance of xs:int</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="CastAs667">
    <description> Evaluates casting a xs:unsignedShort into an xs:unsignedInt</description>
    <created by="Carmelo Montanez" on="2006-07-11"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $var := xs:unsignedShort(120) cast as xs:unsignedInt return $var instance of xs:unsignedInt</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="CastAs668">
    <description> Evaluates casting a xs:unsignedInt into an xs:unsignedShort</description>
    <created by="Carmelo Montanez" on="2006-07-11"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $var := xs:unsignedInt(120) cast as xs:unsignedShort return $var instance of xs:unsignedShort</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="CastAs669">
    <description> Evaluates casting a xs:byte into an xs:unsignedByte</description>
    <created by="Carmelo Montanez" on="2006-07-11"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $var := xs:byte(120) cast as xs:unsignedByte return $var instance of xs:unsignedByte</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="CastAs670">
    <description> Evaluates overflow of an xs:date time (error FODT0001)It adds 9,000 years to a date created in 2006.</description>
    <created by="Carmelo Montanez" on="2006-07-12"/>
    <dependency type="spec" value="XQ10+"/>
    <test>let $d1 := '2006-07-12' cast as xs:date let $oneky := xs:yearMonthDuration('P1000Y') let $d2 := $d1 + $oneky let $d3 := $d2 + $oneky let $d4 := $d3 + $oneky let $d5 := $d4 + $oneky let $d6 := $d5 + $oneky let $d7 := $d6 + $oneky let $d8 := $d7 + $oneky let $d9 := $d8 + $oneky let $d10 := $d9 + $oneky return $d10</test>
    <result-string/>
    <result>
      <any-of>
        <assert-string-value>11006-07-12</assert-string-value>
        <error code="FODT0001"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="CastAs671">
    <description> Evaluates casting a string as an xs:ENTITY</description>
    <created by="Carmelo Montanez" on="2006-07-13"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $var := &quot;abc&quot; cast as xs:ENTITY return $var instance of xs:ENTITY</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="CastAs672">
    <description> Evaluates casting a sequence of strings as an xs:ENTITY</description>
    <created by="Carmelo Montanez" on="2006-07-13"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $var := (&quot;a&quot;,&quot;b&quot;,&quot;c&quot;) cast as xs:ENTITY return count($var) lt 10</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs673a">
    <description> Try to cast a variable to xs:QName</description>
    <created by="Nicolae Brinza" on="2009-04-01"/>
    <modified by="Tim Mills" change="See bug 16059" on="2012-05-31"/>
    <dependency type="spec" value="XQ10"/>
    <test>let $var := &quot;ABC&quot; return $var cast as xs:QName</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case covers="cast-to-qname" name="CastAs673b">
    <description> Try to cast a variable to xs:QName</description>
    <created by="Nicolae Brinza" on="2009-04-01"/>
    <modified by="Tim Mills" change="See bug 16059" on="2012-05-31"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>let $var := &quot;ABC&quot; return $var cast as xs:QName</test>
    <result-string>xs:string(&quot;ABC&quot;)</result-string>
    <result>
      <assert-string-value>ABC</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs674">
    <description> Try to cast an element to xs:QName.
        Fails in 1.0 because only a string literal can be cast to xs:QName
        Fails in 3.0 because atomization of the argument is not allowed - see bug 11964</description>
    <created by="Michael Kay" on="2011-02-16"/>
    <dependency type="spec" value="XQ10"/>
    <test>
      <![CDATA[let $var := <e>xml:space</e> return $var cast as xs:QName]]>
    </test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case covers="cast-to-qname" name="CastAs674a">
    <description> Try to cast an element to xs:QName.
        Fails in 1.0 because only a string literal can be cast to xs:QName
        Fails in 3.0 because atomization of the argument is not allowed - see bug 11964</description>
    <created by="Michael Kay" on="2011-02-16"/>
    <modified by="Michael Kay" change="bug 15814 - wrong error code for XQ30" on="2012-02-06"/>
    <modified by="Michael Kay" change="see bug 17038; as a result of bug 16089, the test now succeeds" on="2012-05-17"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      <![CDATA[let $var := <e>xml:space</e> return $var cast as xs:QName]]>
    </test>
    <result-string/>
    <result>
      <all-of>
        <assert-string-value>xml:space</assert-string-value>
        <assert-type>xs:QName</assert-type>
      </all-of>
    </result>
  </test-case>
  <test-case covers="cast-to-qname" name="CastAs675">
    <description> Try to do an implicit cast from untypedAtomic to xs:QName as part of a function call
        Fails in 1.0 because only a string literal can be cast to xs:QName
        Fails in 3.0 because implicit cast to xs:QName during a function call is not allowed - see bug 11964</description>
    <created by="Michael Kay" on="2011-02-16"/>
    <modified by="Michael Kay" change="split into XQ10 and XQ30 tests as per bug 16090" on="2012-05-18"/>
    <dependency type="spec" value="XQ10"/>
    <test>
      <![CDATA[
        declare function local:clarkname($q as xs:QName) as xs:string { 
          concat('{', namespace-uri-from-QName($q), '}', local-name-from-QName($q)) 
        }; 
        let $var := <e>xml:space</e> 
        return (local:clarkname(node-name($var)), local:clarkname(xs:untypedAtomic($var)))]]>
    </test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case covers="cast-to-qname-errors" name="CastAs675a">
    <description> Try to do an implicit cast from untypedAtomic to xs:QName as part of a function call
        Fails in 1.0 because only a string literal can be cast to xs:QName
        Fails in 3.0 because implicit cast to xs:QName during a function call is not allowed - see bug 11964</description>
    <created by="Michael Kay" on="2011-02-16"/>
    <modified by="Michael Kay" change="split into XQ10 and XQ30 tests as per bug 16090" on="2012-05-18"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      <![CDATA[
        declare function local:clarkname($q as xs:QName) as xs:string { 
          concat('{', namespace-uri-from-QName($q), '}', local-name-from-QName($q)) 
        }; 
        let $var := <e>xml:space</e> 
        return (local:clarkname(node-name($var)), local:clarkname(xs:untypedAtomic($var)))]]>
    </test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0117&quot;))</result-string>
    <result>
      <error code="XPTY0117"/>
    </result>
  </test-case>
  <test-case covers="cast-to-qname-errors" name="CastAsNamespaceSensitiveType-1">
    <description>Implicit cast to a namespace-sensitive type during a function call is not allowed.</description>
    <created by="Ghislain Fourny" on="2012-10-09"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      <![CDATA[
      declare function local:clarkname($q as xs:QName) as xs:string { 
      concat('{', namespace-uri-from-QName($q), '}', local-name-from-QName($q)) 
      }; 
      local:clarkname(xs:untypedAtomic("xs:integer"))
    ]]>
    </test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0117&quot;))</result-string>
    <result>
      <error code="XPTY0117"/>
    </result>
  </test-case>
  <test-case covers="cast-to-qname-errors" name="CastAsNamespaceSensitiveType-2">
    <description>Implicit cast to a namespace-sensitive type during a function call is not allowed.</description>
    <created by="Ghislain Fourny" on="2012-10-09"/>
    <modified by="Michael Dyck" change="Fix unintended syntax error (extra right paren)" on="2012-10-29"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      <![CDATA[
      declare function local:clarkname($q as xs:QName) as xs:string { 
      concat('{', namespace-uri-from-QName($q), '}', local-name-from-QName($q)) 
      }; 
      local:clarkname(<tag>xs:integer</tag>)
    ]]>
    </test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0117&quot;))</result-string>
    <result>
      <error code="XPTY0117"/>
    </result>
  </test-case>
  <test-case covers="cast-to-qname-errors" name="CastAsNamespaceSensitiveType-3">
    <description>Namespace-sensitive type during a function call (without cast) is allowed.</description>
    <created by="Ghislain Fourny" on="2012-10-09"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      <![CDATA[
      declare function local:clarkname($q as xs:QName) as xs:string { 
      concat('{', namespace-uri-from-QName($q), '}', local-name-from-QName($q)) 
      }; 
      local:clarkname(xs:QName("xs:integer"))
    ]]>
    </test>
    <result-string>xs:string(&quot;{http://www.w3.org/2001/XMLSchema}integer&quot;)</result-string>
    <result>
      <assert-string-value>{http://www.w3.org/2001/XMLSchema}integer</assert-string-value>
    </result>
  </test-case>
  <test-case covers="cast-to-qname-errors" name="CastAsNamespaceSensitiveType-4">
    <description>Implicit cast to a namespace-sensitive type during a function call is not allowed.</description>
    <created by="Ghislain Fourny" on="2012-10-09"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      <![CDATA[
      declare function local:clarkname($q as xs:NOTATION) as xs:string { 
        $q cast as xs:string
      }; 
      local:clarkname(xs:untypedAtomic("xs:integer"))
    ]]>
    </test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0117&quot;))</result-string>
    <result>
      <error code="XPTY0117"/>
    </result>
  </test-case>
  <test-case covers="cast-to-qname-errors" name="CastAsNamespaceSensitiveType-5">
    <description>Implicit cast to a namespace-sensitive type during a function call is not allowed.</description>
    <created by="Ghislain Fourny" on="2012-10-09"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      <![CDATA[
      declare function local:clarkname($q as xs:NOTATION) as xs:string { 
        $q cast as xs:string
      }; 
      local:clarkname(<tag>xs:integer</tag>)
    ]]>
    </test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0117&quot;))</result-string>
    <result>
      <error code="XPTY0117"/>
    </result>
  </test-case>
  <test-case covers="cast-to-qname-errors" name="CastAsNamespaceSensitiveType-6">
    <description>Namespace-sensitive type during a function call (without cast) is allowed.</description>
    <created by="Ghislain Fourny" on="2012-10-09"/>
    <environment ref="NOTATION-type"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>
      <![CDATA[
      import schema namespace ntn="http://www.w3.org/XQueryTest/Cast/Notation" at "notation.xsd";
      declare function local:is-jpg($q as xs:NOTATION) as xs:boolean { 
        $q eq ntn:pictures("ntn:jpg")
      }; 
      local:is-jpg(validate {
        <ntn:notation xmlns:ntn="http://www.w3.org/XQueryTest/Cast/Notation"
                      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                      xsi:schemaLocation="http://www.w3.org/XQueryTest/Cast/Notation CastExpr/notation.xsd">ntn:jpg</ntn:notation>
      })
    ]]>
    </test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case covers="cast-to-qname-errors" name="CastAsNamespaceSensitiveType-7">
    <description>Namespace-sensitive type during a function call (without cast) is allowed.</description>
    <created by="Ghislain Fourny" on="2012-10-09"/>
    <environment ref="NOTATION-type"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>
      <![CDATA[
      import schema namespace ntn="http://www.w3.org/XQueryTest/Cast/Notation" at "notation.xsd";
      declare function local:is-jpg($q as ntn:pictures) as xs:boolean { 
        $q eq ntn:pictures("ntn:jpg")
      }; 
      local:is-jpg(validate {
        <ntn:notation xmlns:ntn="http://www.w3.org/XQueryTest/Cast/Notation"
                      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                      xsi:schemaLocation="http://www.w3.org/XQueryTest/Cast/Notation CastExpr/notation.xsd">ntn:jpg</ntn:notation>
      })
    ]]>
    </test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case covers="cast-to-qname-errors" name="CastAsNamespaceSensitiveType-8">
    <description>Implicit cast to a namespace-sensitive type during a function call is not allowed.</description>
    <created by="Ghislain Fourny" on="2012-10-09"/>
    <environment ref="NOTATION-type"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>
      <![CDATA[
      import schema namespace ntn="http://www.w3.org/XQueryTest/Cast/Notation" at "notation.xsd";
      declare function local:is-jpg($q as ntn:pictures) as xs:boolean { 
        $q eq ntn:pictures("ntn:jpg")
      }; 
      local:is-jpg(xs:untypedAtomic("ntn:picture"))
    ]]>
    </test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0117&quot;))</result-string>
    <result>
      <error code="XPTY0117"/>
    </result>
  </test-case>
  <test-case covers="cast-to-qname-errors" name="CastAsNamespaceSensitiveType-9">
    <description>Implicit cast to a namespace-sensitive type during a function call is not allowed.</description>
    <created by="Ghislain Fourny" on="2012-10-09"/>
    <environment ref="NOTATION-type"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>
      <![CDATA[
      import schema namespace ntn="http://www.w3.org/XQueryTest/Cast/Notation" at "notation.xsd";
      declare function local:is-jpg($q as ntn:pictures) as xs:boolean { 
        $q eq ntn:pictures("ntn:jpg")
      }; 
      local:is-jpg(<tag>ntn:picture</tag>)
    ]]>
    </test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0117&quot;))</result-string>
    <result>
      <error code="XPTY0117"/>
    </result>
  </test-case>
  <test-case covers="cast-to-qname-errors" name="CastAsNamespaceSensitiveType-10">
    <description>Namespace-sensitive type during a function call (without cast) is allowed.</description>
    <created by="Ghislain Fourny" on="2012-10-09"/>
    <environment ref="NOTATION-type"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>
      <![CDATA[
      import schema namespace ntn="http://www.w3.org/XQueryTest/Cast/Notation" at "notation.xsd";
      declare function local:is-jpg($q as ntn:qnames) as xs:boolean { 
        $q eq ntn:qnames("ntn:jpg")
      }; 
      local:is-jpg(validate {
        <ntn:qname xmlns:ntn="http://www.w3.org/XQueryTest/Cast/Notation"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://www.w3.org/XQueryTest/Cast/Notation CastExpr/notation.xsd">ntn:jpg</ntn:qname>
      })
    ]]>
    </test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case covers="cast-to-qname-errors" name="CastAsNamespaceSensitiveType-11">
    <description>Implicit cast to a namespace-sensitive type during a function call is not allowed.</description>
    <created by="Ghislain Fourny" on="2012-10-09"/>
    <environment ref="NOTATION-type"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>
      <![CDATA[
      import schema namespace ntn="http://www.w3.org/XQueryTest/Cast/Notation" at "notation.xsd";
      declare function local:is-jpg($q as ntn:qnames) as xs:boolean { 
        $q eq ntn:qnames("ntn:jpg")
      }; 
      local:is-jpg(xs:untypedAtomic("ntn:picture"))
    ]]>
    </test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0117&quot;))</result-string>
    <result>
      <error code="XPTY0117"/>
    </result>
  </test-case>
  <test-case covers="cast-to-qname-errors" name="CastAsNamespaceSensitiveType-12">
    <description>Implicit cast to a namespace-sensitive type during a function call is not allowed.</description>
    <created by="Ghislain Fourny" on="2012-10-09"/>
    <environment ref="NOTATION-type"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>
      <![CDATA[
      import schema namespace ntn="http://www.w3.org/XQueryTest/Cast/Notation" at "notation.xsd";
      declare function local:is-jpg($q as ntn:qnames) as xs:boolean { 
        $q eq ntn:qnames("ntn:jpg")
      }; 
      local:is-jpg(<tag>ntn:picture</tag>)
    ]]>
    </test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0117&quot;))</result-string>
    <result>
      <error code="XPTY0117"/>
    </result>
  </test-case>
  <test-case name="CastFOCA0001-1">
    <description> casting an xs:decimal with a value to big for that type.</description>
    <created by="Carmelo Montanez" on="2005-10-03"/>
    <modified by="O'Neil Delpratt" change="Bug #19782 - change expected result" on="2012-11-08"/>
    <modified by="Michael Kay" change="Bug #21890 - change assertion" on="2013-05-01"/>
    <test>xs:decimal(99e100)</test>
    <result-string/>
    <result>
      <any-of>
        <assert>$result lt 100e100 and $result gt 98e100</assert>
        <error code="FOCA0001"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="CastFOCA0003-1">
    <description> casting an xs:integer with a value to big for that type.</description>
    <created by="Carmelo Montanez" on="2005-10-03"/>
    <modified by="O'Neil Delpratt" change="Bug #19782 - change expected result" on="2012-11-08"/>
    <modified by="Michael Kay" change="Bug #21890 - change assertion" on="2013-05-01"/>
    <test>xs:integer(99e100)</test>
    <result-string/>
    <result>
      <any-of>
        <assert>$result lt 100e100 and $result gt 98e100</assert>
        <error code="FOCA0003"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1">
    <description> Syntax: only ? is allowed as occurence indicator in 'cast as' expressions.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>'string' cast as xs:string*</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0003&quot;))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-2">
    <description> Syntax: only ? is allowed as occurence indicator in 'cast as' expressions.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>'string' cast as xs:string+</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0003&quot;))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-3">
    <description> Syntax: only ? is allowed as occurence indicator in 'cast as' expressions.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O'Neil Delpratt" change="Added test case depends on XQ10" on="2012-09-25"/>
    <dependency type="spec" value="XQ10"/>
    <test>'string' cast as xs:anyType*</test>
    <result-string/>
    <result>
      <any-of>
        <error code="XPST0003"/>
        <error code="XPST0051"/>
      </any-of>
    </result>
  </test-case>
  <test-case covers="cast-to-qname-errors" name="K-SeqExprCast-3a">
    <description> Syntax: only ? is allowed as occurence indicator in 'cast as' expressions.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O'Neil Delpratt" change="new test case variant, which depends on XQ30 and different error code" on="2012-09-25"/>
    <dependency type="spec" value="XQ30+"/>
    <test>'string' cast as xs:anyType*</test>
    <result-string/>
    <result>
      <any-of>
        <error code="XPST0003"/>
        <error code="XQST0052"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-4">
    <description> 'cast as' where the type is invalid.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O'Neil Delpratt" change="Added test case depends on XQ10" on="2012-09-25"/>
    <dependency type="spec" value="XQ10"/>
    <test>'string' cast as xs:anySimpleType</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0051&quot;))</result-string>
    <result>
      <error code="XPST0051"/>
    </result>
  </test-case>
  <test-case covers="cast-to-qname-errors" name="K-SeqExprCast-4a">
    <description> 'cast as' where the type is invalid.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O'Neil Delpratt" change="new test case variant, which depends on XQ30 and different error code" on="2012-09-25"/>
    <modified by="O'Neil Delpratt" change="Change error code according to bug issues #17462 and #19090" on="2012-10-10"/>
    <dependency type="spec" value="XQ30+"/>
    <test>'string' cast as xs:anySimpleType</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0080&quot;))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-5">
    <description> 'cast as' where the type is invalid.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O'Neil Delpratt" change="Added test case depends on XQ10" on="2012-09-25"/>
    <dependency type="spec" value="XQ10"/>
    <test>'string' cast as xs:untyped</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0051&quot;))</result-string>
    <result>
      <error code="XPST0051"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-5a">
    <description> 'cast as' where the type is invalid.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O'Neil Delpratt" change="new test case variant, which depends on XQ30 and different error code" on="2012-09-25"/>
    <dependency type="spec" value="XQ30+"/>
    <test>'string' cast as xs:untyped</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQST0052&quot;))</result-string>
    <result>
      <error code="XQST0052"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-6">
    <description> 'cast as' where the type is invalid.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>'string' cast as xs:anyAtomicType</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0080&quot;))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-7">
    <description> 'cast as' where the type is invalid.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O'Neil Delpratt" change="Added test case depends on XQ10" on="2012-09-25"/>
    <dependency type="spec" value="XQ10"/>
    <test>'string' cast as xs:anyType</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0051&quot;))</result-string>
    <result>
      <error code="XPST0051"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-7a">
    <description> 'cast as' where the type is invalid.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O'Neil Delpratt" change="new test case variant, which depends on XQ30 and different error code" on="2012-09-25"/>
    <dependency type="spec" value="XQ30+"/>
    <test>'string' cast as xs:anyType</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQST0052&quot;))</result-string>
    <result>
      <error code="XQST0052"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-8">
    <description> A prefix is used which isn't declared.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>3 cast as prefixDoesNotExist:integer</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0081&quot;))</result-string>
    <result>
      <error code="XPST0081"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-9">
    <description> A type is specified which doesn't exist.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O'Neil Delpratt" change="Added test case depends on XQ10" on="2012-09-25"/>
    <dependency type="spec" value="XQ10"/>
    <test>3 cast as xs:doesNotExist</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0051&quot;))</result-string>
    <result>
      <error code="XPST0051"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-9a">
    <description> A type is specified which doesn't exist.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O'Neil Delpratt" change="new test case variant, which depends on XQ30 and different error code" on="2012-09-25"/>
    <dependency type="spec" value="XQ30+"/>
    <test>3 cast as xs:doesNotExist</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XQST0052&quot;))</result-string>
    <result>
      <error code="XQST0052"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-10">
    <description> A non-atomic type is referenced, leading to a syntax error.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O'Neil Delpratt" change="Added test case depends on XQ10" on="2012-09-25"/>
    <dependency type="spec" value="XQ10"/>
    <test>'string' cast as item()</test>
    <result-string/>
    <result>
      <any-of>
        <error code="XPST0003"/>
        <error code="XPST0051"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-10a">
    <description> A non-atomic type is referenced, leading to a syntax error.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O'Neil Delpratt" change="new test case variant, which depends on XQ30 and different error code" on="2012-09-25"/>
    <dependency type="spec" value="XQ30+"/>
    <test>'string' cast as item()</test>
    <result-string/>
    <result>
      <any-of>
        <error code="XPST0003"/>
        <error code="XQST0052"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-11">
    <description> A non-atomic type is referenced, leading to a syntax error.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O'Neil Delpratt" change="Added test case depends on XQ10" on="2012-09-25"/>
    <dependency type="spec" value="XQ10"/>
    <test>'string' cast as node()</test>
    <result-string/>
    <result>
      <any-of>
        <error code="XPST0003"/>
        <error code="XPST0051"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-11a">
    <description> A non-atomic type is referenced, leading to a syntax error.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O'Neil Delpratt" change="new test case variant, which depends on XQ30 and different error code" on="2012-09-25"/>
    <dependency type="spec" value="XQ30+"/>
    <test>'string' cast as node()</test>
    <result-string/>
    <result>
      <any-of>
        <error code="XPST0003"/>
        <error code="XQST0052"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-12">
    <description> A non-atomic type is referenced, leading to a syntax error.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O'Neil Delpratt" change="Added test case depends on XQ10" on="2012-09-25"/>
    <dependency type="spec" value="XQ10"/>
    <test>'string' cast as attribute()</test>
    <result-string/>
    <result>
      <any-of>
        <error code="XPST0003"/>
        <error code="XPST0051"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-12a">
    <description> A non-atomic type is referenced, leading to a syntax error.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O'Neil Delpratt" change="new test case variant, which depends on XQ30 and different error code" on="2012-09-25"/>
    <dependency type="spec" value="XQ30+"/>
    <test>'string' cast as attribute()</test>
    <result-string/>
    <result>
      <any-of>
        <error code="XPST0003"/>
        <error code="XQST0052"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-13">
    <description> A non-atomic type is referenced, leading to a syntax error.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O'Neil Delpratt" change="Added test case depends XQ10" on="2012-09-25"/>
    <dependency type="spec" value="XQ10"/>
    <test>'string' cast as empty-sequence()</test>
    <result-string/>
    <result>
      <any-of>
        <error code="XPST0003"/>
        <error code="XPST0051"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-13a">
    <description> A non-atomic type is referenced, leading to a syntax error.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O'Neil Delpratt" change="new test case variant, which depends on XQ30 and different error code" on="2012-09-25"/>
    <dependency type="spec" value="XQ30+"/>
    <test>'string' cast as empty-sequence()</test>
    <result-string/>
    <result>
      <any-of>
        <error code="XPST0003"/>
        <error code="XQST0052"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-14">
    <description> A test whose essence is: `'1' cast as xs:boolean eq true()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>'1' cast as xs:boolean eq true()</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-15">
    <description> A test whose essence is: `'true' cast as xs:boolean eq true()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>'true' cast as xs:boolean eq true()</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-16">
    <description> A test whose essence is: `'false' cast as xs:boolean eq false()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>'false' cast as xs:boolean eq false()</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-17">
    <description> A test whose essence is: `'0' cast as xs:boolean eq false()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>'0' cast as xs:boolean eq false()</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-18">
    <description> A test whose essence is: `false() cast as xs:boolean eq false()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>false() cast as xs:boolean eq false()</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-19">
    <description> A test whose essence is: `not(true() cast as xs:boolean eq false())`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(true() cast as xs:boolean eq false())</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-20">
    <description> A test whose essence is: `xs:boolean(xs:double(3)) eq true()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(xs:double(3)) eq true()</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-21">
    <description> A test whose essence is: `xs:boolean(xs:string(1)) eq true()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(xs:string(1)) eq true()</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-22">
    <description> A test whose essence is: `xs:boolean(xs:integer(3)) eq true()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(xs:integer(3)) eq true()</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-23">
    <description> A test whose essence is: `xs:boolean(xs:decimal(3)) eq true()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(xs:decimal(3)) eq true()</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-24">
    <description> A test whose essence is: `xs:boolean(xs:double(0)) eq false()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(xs:double(0)) eq false()</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-25">
    <description> A test whose essence is: `xs:boolean(xs:string(0)) eq false()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(xs:string(0)) eq false()</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-26">
    <description> A test whose essence is: `xs:boolean(xs:integer(0)) eq false()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(xs:integer(0)) eq false()</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-27">
    <description> A test whose essence is: `xs:boolean(xs:decimal(0)) eq false()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(xs:decimal(0)) eq false()</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-28">
    <description> A test whose essence is: `xs:boolean(xs:decimal(0.0)) eq false()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(xs:decimal(0.0)) eq false()</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-29">
    <description> A test whose essence is: `xs:boolean(+0) eq false()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(+0) eq false()</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-30">
    <description> A test whose essence is: `xs:boolean(-0) eq false()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(-0) eq false()</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-31">
    <description> A test whose essence is: `xs:boolean(xs:double(+0)) eq false()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(xs:double(+0)) eq false()</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-32">
    <description> A test whose essence is: `xs:boolean(xs:double(-0)) eq false()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(xs:double(-0)) eq false()</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-33">
    <description> A test whose essence is: `xs:boolean(0.0E0) eq false()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(0.0E0) eq false()</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-34">
    <description> A test whose essence is: `xs:boolean(xs:double(&quot;NaN&quot;)) eq false()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(xs:double(&quot;NaN&quot;)) eq false()</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-35">
    <description> A test whose essence is: `xs:boolean(xs:float(&quot;NaN&quot;)) eq false()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(xs:float(&quot;NaN&quot;)) eq false()</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-36">
    <description> Invalid casting combination, combined with value comparison.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>'12312' cast as xs:boolean eq false()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-37">
    <description> A test whose essence is: `false() cast as xs:string eq &quot;false&quot;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>false() cast as xs:string eq &quot;false&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-38">
    <description> A test whose essence is: `true() cast as xs:string eq &quot;true&quot;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>true() cast as xs:string eq &quot;true&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-39">
    <description> A test whose essence is: `('1' cast as xs:boolean) cast as xs:string eq 'true'`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>('1' cast as xs:boolean) cast as xs:string eq 'true'</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-40">
    <description> A test whose essence is: `xs:boolean('0') cast as xs:string eq 'false'`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean('0') cast as xs:string eq 'false'</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-41">
    <description> A test whose essence is: `&quot; white space left alone&quot; cast as xs:string eq xs:string(&quot; white space left alone&quot;)`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>&quot; white space left alone&quot; cast as xs:string eq xs:string(&quot; white space left alone&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-42">
    <description> A test whose essence is: `(xs:QName(&quot;fn:local-name&quot;) cast as xs:string) eq &quot;fn:local-name&quot;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(xs:QName(&quot;fn:local-name&quot;) cast as xs:string) eq &quot;fn:local-name&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-43">
    <description> A test whose essence is: `(xs:QName(&quot;local-name&quot;) cast as xs:string) eq &quot;local-name&quot;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(xs:QName(&quot;local-name&quot;) cast as xs:string) eq &quot;local-name&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-44">
    <description> A test whose essence is: `xs:string(xs:anyURI('example.com/')) eq 'example.com/'`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:anyURI('example.com/')) eq 'example.com/'</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-45">
    <description> A test whose essence is: `xs:string(xs:double(3)) eq '3'`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:double(3)) eq '3'</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-46">
    <description> A test whose essence is: `xs:string(xs:string(3)) eq '3'`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:string(3)) eq '3'</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-47">
    <description> A test whose essence is: `xs:string(xs:integer(3)) eq '3'`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:integer(3)) eq '3'</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-48">
    <description> A test whose essence is: `xs:string(xs:decimal(3)) eq '3'`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:decimal(3)) eq '3'</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-49">
    <description> A test whose essence is: `&quot;untyped a &quot; cast as xs:untypedAtomic eq xs:untypedAtomic(&quot;untyped a &quot;)`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>&quot;untyped a &quot; cast as xs:untypedAtomic eq xs:untypedAtomic(&quot;untyped a &quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-50">
    <description> A test whose essence is: `false() cast as xs:untypedAtomic eq xs:untypedAtomic(&quot;false&quot;)`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>false() cast as xs:untypedAtomic eq xs:untypedAtomic(&quot;false&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-51">
    <description> A test whose essence is: `true() cast as xs:untypedAtomic eq xs:untypedAtomic(&quot;true&quot;)`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>true() cast as xs:untypedAtomic eq xs:untypedAtomic(&quot;true&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-52">
    <description> A test whose essence is: `false() cast as xs:untypedAtomic instance of xs:untypedAtomic`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>false() cast as xs:untypedAtomic instance of xs:untypedAtomic</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-53">
    <description> A test whose essence is: `true() cast as xs:untypedAtomic instance of xs:untypedAtomic`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>true() cast as xs:untypedAtomic instance of xs:untypedAtomic</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-54">
    <description> A test whose essence is: `(xs:QName(&quot;local-name&quot;) cast as xs:untypedAtomic) eq xs:untypedAtomic(&quot;local-name&quot;)`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(xs:QName(&quot;local-name&quot;) cast as xs:untypedAtomic) eq xs:untypedAtomic(&quot;local-name&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-55">
    <description> A test whose essence is: `(xs:QName(&quot;fn:local-name&quot;) cast as xs:untypedAtomic) eq xs:untypedAtomic(&quot;fn:local-name&quot;)`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(xs:QName(&quot;fn:local-name&quot;) cast as xs:untypedAtomic) eq xs:untypedAtomic(&quot;fn:local-name&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-56">
    <description> A test whose essence is: `xs:untypedAtomic(xs:anyURI('example.com/')) eq 'example.com/'`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:anyURI('example.com/')) eq 'example.com/'</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-57">
    <description> A test whose essence is: `xs:untypedAtomic(xs:double(3)) eq '3'`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:double(3)) eq '3'</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-58">
    <description> A test whose essence is: `xs:untypedAtomic(xs:string(3)) eq '3'`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:string(3)) eq '3'</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-59">
    <description> A test whose essence is: `xs:untypedAtomic(xs:integer(3)) eq '3'`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:integer(3)) eq '3'</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-60">
    <description> A test whose essence is: `xs:untypedAtomic(xs:decimal(3)) eq '3'`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:decimal(3)) eq '3'</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-61">
    <description> Casting to xs:notation is not allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>&quot;notation is abstract&quot; cast as xs:NOTATION</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0080&quot;))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-62">
    <description> Casting to xs:notation is not allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>&quot;notation is abstract&quot; cast as xs:NOTATION?</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0080&quot;))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-63">
    <description> Casting to xs:notation is not allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>() cast as xs:NOTATION?</test>
    <result-string/>
    <result>
      <any-of>
        <error code="XPST0080"/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-64">
    <description> Casting to xs:notation is not allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>() cast as xs:NOTATION</test>
    <result-string/>
    <result>
      <any-of>
        <error code="XPST0080"/>
        <error code="XPST0005"/>
        <error code="XPTY0004"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-65">
    <description> Casting to xs:notation is not allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:NOTATION(xs:anyURI('example.com/'))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-66">
    <description> Casting to xs:notation is not allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:NOTATION(QName('example.com', 'p:foo'))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-67">
    <description> Casting to xs:QName where the cardinality is wrong.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>() cast as xs:QName</test>
    <result-string/>
    <result>
      <any-of>
        <error code="XPTY0004"/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-68">
    <description> Input when casting to xs:QName must be a string literal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>3 cast as xs:QName</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-69">
    <description> Input when casting to xs:QName must be a string literal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>. cast as xs:QName</test>
    <result-string/>
    <result>
      <any-of>
        <error code="XPTY0004"/>
        <error code="XPDY0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-70">
    <description> Casting a xs:QName value to xs:QName is possible.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(xs:QName(&quot;local-name&quot;) cast as xs:QName) eq xs:QName(&quot;local-name&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-71a">
    <description> Casting xs:untypedAtomic to xs:QName is an error.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="Tim Mills" change="See bug 16059" on="2012-05-31"/>
    <dependency type="spec" value="XP20 XQ10"/>
    <test>xs:untypedAtomic(&quot;ncname&quot;) cast as xs:QName?</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case covers="cast-to-qname" name="K-SeqExprCast-71b">
    <description> Casting xs:untypedAtomic to xs:QName is an error.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="Tim Mills" change="See bug 16059" on="2012-05-31"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>xs:untypedAtomic(&quot;ncname&quot;) cast as xs:QName?</test>
    <result-string>xs:string(&quot;ncname&quot;)</result-string>
    <result>
      <assert-string-value>ncname</assert-string-value>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-72">
    <description> A test whose essence is: `&quot;example.com/&quot; cast as xs:anyURI eq xs:anyURI('example.com/')`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>&quot;example.com/&quot; cast as xs:anyURI eq xs:anyURI('example.com/')</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-73">
    <description> A test whose essence is: `xs:untypedAtomic(&quot;example.com/&quot;) cast as xs:anyURI eq xs:anyURI('example.com/')`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(&quot;example.com/&quot;) cast as xs:anyURI eq xs:anyURI('example.com/')</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-74">
    <description> A test whose essence is: `xs:anyURI(&quot;example.com/&quot;) cast as xs:anyURI eq xs:anyURI('example.com/')`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI(&quot;example.com/&quot;) cast as xs:anyURI eq xs:anyURI('example.com/')</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-75">
    <description> A test whose essence is: `xs:double(3) eq 3`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(3) eq 3</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-76">
    <description> A test whose essence is: `xs:double(3.1) eq 3.1`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(3.1) eq 3.1</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-77">
    <description> A test whose essence is: `xs:double(6) instance of xs:double`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(6) instance of xs:double</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-78">
    <description> A test whose essence is: `xs:string(xs:double(&quot;INF&quot;)) eq &quot;INF&quot;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:double(&quot;INF&quot;)) eq &quot;INF&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-79">
    <description> A test whose essence is: `xs:string(xs:double(&quot;-INF&quot;)) eq &quot;-INF&quot;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:double(&quot;-INF&quot;)) eq &quot;-INF&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-80">
    <description> A test whose essence is: `xs:float(3) eq 3`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(3) eq 3</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-81">
    <description> A test whose essence is: `xs:float(3.1) eq 3.1`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(3.1) eq 3.1</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-82">
    <description> A test whose essence is: `xs:float(6) instance of xs:float`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(6) instance of xs:float</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-83">
    <description> A test whose essence is: `xs:string(xs:float(&quot;INF&quot;)) eq &quot;INF&quot;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:float(&quot;INF&quot;)) eq &quot;INF&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-84">
    <description> A test whose essence is: `xs:string(xs:float(&quot;-INF&quot;)) eq &quot;-INF&quot;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:float(&quot;-INF&quot;)) eq &quot;-INF&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-85">
    <description> A test whose essence is: `xs:decimal(3) eq 3`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(3) eq 3</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-86">
    <description> A test whose essence is: `xs:decimal(3.1) eq 3.1`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(3.1) eq 3.1</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-87">
    <description> A test whose essence is: `xs:decimal(6) instance of xs:decimal`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(6) instance of xs:decimal</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-88">
    <description> A test whose essence is: `xs:integer(3) eq 3`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(3) eq 3</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-89">
    <description> A test whose essence is: `xs:integer(3.1) eq 3`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(3.1) eq 3</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-90">
    <description> Test that when casting xs:decimal to xs:integer that conversion happens.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(3.1) eq 3</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-91">
    <description> A test whose essence is: `xs:integer(6) instance of xs:integer`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(6) instance of xs:integer</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-92">
    <description> A test whose essence is: `xs:integer(6) instance of xs:decimal`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(6) instance of xs:decimal</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-93">
    <description> A test whose essence is: `xs:hexBinary(&quot;FFF&quot;)`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary(&quot;FFF&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-94">
    <description> A test whose essence is: `xs:hexBinary(&quot;FFxF&quot;)`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary(&quot;FFxF&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-95">
    <description> A test whose essence is: `xs:hexBinary(&quot;0xFF&quot;)`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary(&quot;0xFF&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-96">
    <description> A test whose essence is: `xs:hexBinary(&quot;F&quot;)`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary(&quot;F&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-97">
    <description> A test whose essence is: `xs:hexBinary(&quot;x&quot;)`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary(&quot;x&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-98">
    <description> A test whose essence is: `exists(xs:hexBinary(&quot;Ab08bcFFAA08b6&quot;))`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>exists(xs:hexBinary(&quot;Ab08bcFFAA08b6&quot;))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-99">
    <description> A test whose essence is: `exists(xs:hexBinary(&quot;FF&quot;))`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>exists(xs:hexBinary(&quot;FF&quot;))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-100">
    <description> A test whose essence is: `exists(xs:hexBinary(&quot;aa&quot;))`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>exists(xs:hexBinary(&quot;aa&quot;))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-101">
    <description> A test whose essence is: `count(xs:hexBinary(xs:hexBinary(&quot;03&quot;))) eq 1`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>count(xs:hexBinary(xs:hexBinary(&quot;03&quot;))) eq 1</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-102">
    <description> A test whose essence is: `xs:string(xs:hexBinary(&quot;aa&quot;)) eq &quot;AA&quot;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:hexBinary(&quot;aa&quot;)) eq &quot;AA&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-103">
    <description> A test whose essence is: `xs:string(xs:hexBinary(&quot;0a&quot;)) eq &quot;0A&quot;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:hexBinary(&quot;0a&quot;)) eq &quot;0A&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-104">
    <description> A test whose essence is: `xs:string(xs:hexBinary(&quot;a0&quot;)) eq &quot;A0&quot;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:hexBinary(&quot;a0&quot;)) eq &quot;A0&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-105">
    <description> A test whose essence is: `xs:string(xs:hexBinary(&quot;a4&quot;)) eq &quot;A4&quot;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:hexBinary(&quot;a4&quot;)) eq &quot;A4&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-106">
    <description> A test whose essence is: `xs:string(xs:hexBinary(&quot;c0&quot;)) eq &quot;C0&quot;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:hexBinary(&quot;c0&quot;)) eq &quot;C0&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-107">
    <description> A test whose essence is: `xs:string(xs:hexBinary(&quot;fA&quot;)) eq &quot;FA&quot;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:hexBinary(&quot;fA&quot;)) eq &quot;FA&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-108">
    <description> A test whose essence is: `xs:string(xs:hexBinary(&quot;10&quot;)) eq &quot;10&quot;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:hexBinary(&quot;10&quot;)) eq &quot;10&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-109">
    <description> A test whose essence is: `xs:string(xs:hexBinary(&quot;031a34123b&quot;)) eq &quot;031A34123B&quot;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:hexBinary(&quot;031a34123b&quot;)) eq &quot;031A34123B&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-110">
    <description> A test whose essence is: `xs:string(xs:hexBinary(&quot;03&quot;)) eq &quot;03&quot;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:hexBinary(&quot;03&quot;)) eq &quot;03&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-111">
    <description> A test whose essence is: `xs:string(xs:hexBinary(&quot;0c&quot;)) eq &quot;0C&quot;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:hexBinary(&quot;0c&quot;)) eq &quot;0C&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-112">
    <description> A test whose essence is: `xs:string(xs:hexBinary(&quot;0b&quot;)) eq &quot;0B&quot;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:hexBinary(&quot;0b&quot;)) eq &quot;0B&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-113">
    <description> A test whose essence is: `xs:string(xs:hexBinary(&quot;3a&quot;)) eq &quot;3A&quot;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:hexBinary(&quot;3a&quot;)) eq &quot;3A&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-114">
    <description> An empty string is a valid lexical representation for xs:hexBinary, and means 'no data.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:hexBinary(&quot;&quot;)) eq &quot;&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-115">
    <description> An invalid lexical representation for xs:base64Binary.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary(&quot;=aaabbcd&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-116">
    <description> An invalid lexical representation for xs:base64Binary.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary(&quot;F===&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-117">
    <description> An invalid lexical representation for xs:base64Binary.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary(&quot;a&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-118">
    <description> An invalid lexical representation for xs:base64Binary.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary(&quot;aaaa====&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-119">
    <description> An invalid lexical representation for xs:base64Binary.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary(&quot;aaaa=bcd&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-120">
    <description> An invalid lexical representation for xs:base64Binary.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary(&quot;aaaaa=======&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-121">
    <description> An invalid lexical representation for xs:base64Binary.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary(&quot;aaaabcd&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-122">
    <description> An invalid lexical representation for xs:base64Binary.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary(&quot;aaaabcd|&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-123">
    <description> An invalid lexical representation for xs:base64Binary.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary(&quot;aabb=d==&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-124">
    <description> An invalid lexical representation for xs:base64Binary.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary(&quot;aabbcd=a&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-125">
    <description> An invalid lexical representation for xs:base64Binary.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary(&quot;abcdefghi&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-126">
    <description> A test whose essence is: `xs:string(xs:base64Binary(&quot;0w==&quot;)) eq &quot;0w==&quot;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary(&quot;0w==&quot;)) eq &quot;0w==&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-127">
    <description> A test whose essence is: `xs:string(xs:base64Binary(&quot;aaa a&quot;)) eq &quot;aaaa&quot;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary(&quot;aaa a&quot;)) eq &quot;aaaa&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-128">
    <description> A test whose essence is: `xs:string(xs:base64Binary(&quot;frfhforlksid7453&quot;)) eq &quot;frfhforlksid7453&quot;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary(&quot;frfhforlksid7453&quot;)) eq &quot;frfhforlksid7453&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-129">
    <description> If the last tetragram ends in '==' then the previous character must be one of [AQgw].</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary(&quot;frfhforlksid745323==&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-130">
    <description> A test whose essence is: `xs:string(xs:base64Binary(xs:hexBinary(&quot;03&quot;))) eq &quot;Aw==&quot;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary(xs:hexBinary(&quot;03&quot;))) eq &quot;Aw==&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-131">
    <description> A test whose essence is: `xs:string(xs:base64Binary(xs:hexBinary(&quot;0f3c&quot;))) eq &quot;Dzw=&quot;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary(xs:hexBinary(&quot;0f3c&quot;))) eq &quot;Dzw=&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-132">
    <description> A test whose essence is: `xs:string(xs:base64Binary(xs:hexBinary(&quot;12&quot;))) eq &quot;Eg==&quot;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary(xs:hexBinary(&quot;12&quot;))) eq &quot;Eg==&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-133">
    <description> A test whose essence is: `xs:string(xs:base64Binary(xs:hexBinary(&quot;3B&quot;))) eq &quot;Ow==&quot;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary(xs:hexBinary(&quot;3B&quot;))) eq &quot;Ow==&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-134">
    <description> A test whose essence is: `xs:string(xs:base64Binary(xs:hexBinary(&quot;69A69A&quot;))) eq &quot;aaaa&quot;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary(xs:hexBinary(&quot;69A69A&quot;))) eq &quot;aaaa&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-135">
    <description> A test whose essence is: `xs:string(xs:base64Binary(xs:hexBinary(&quot;F43D1234ce8f&quot;))) eq &quot;9D0SNM6P&quot;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary(xs:hexBinary(&quot;F43D1234ce8f&quot;))) eq &quot;9D0SNM6P&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-136">
    <description> A test whose essence is: `xs:string(xs:base64Binary(xs:hexBinary(&quot;f0&quot;))) eq &quot;8A==&quot;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary(xs:hexBinary(&quot;f0&quot;))) eq &quot;8A==&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-137">
    <description> A test whose essence is: `xs:string(xs:base64Binary(xs:hexBinary(&quot;ffaabbddcceeff0134f001d8ca9bc77899c83e6f7d&quot;))) eq &quot;/6q73czu/wE08AHYypvHeJnIPm99&quot;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary(xs:hexBinary(&quot;ffaabbddcceeff0134f001d8ca9bc77899c83e6f7d&quot;))) eq &quot;/6q73czu/wE08AHYypvHeJnIPm99&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-138">
    <description> A test whose essence is: `xs:string(xs:base64Binary(xs:hexBinary(&quot;ffff&quot;))) eq &quot;//8=&quot;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary(xs:hexBinary(&quot;ffff&quot;))) eq &quot;//8=&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-139">
    <description> A test whose essence is: `xs:string(xs:base64Binary(xs:hexBinary(&quot;ffff34564321deac9876&quot;))) eq &quot;//80VkMh3qyYdg==&quot;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary(xs:hexBinary(&quot;ffff34564321deac9876&quot;))) eq &quot;//80VkMh3qyYdg==&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-140">
    <description> A test whose essence is: `xs:string(xs:hexBinary(xs:base64Binary(&quot;Ow==&quot;))) eq &quot;3B&quot;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:hexBinary(xs:base64Binary(&quot;Ow==&quot;))) eq &quot;3B&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-141">
    <description> A test whose essence is: `xs:string(xs:hexBinary(xs:base64Binary(&quot;aaa a&quot;))) eq &quot;69A69A&quot;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:hexBinary(xs:base64Binary(&quot;aaa a&quot;))) eq &quot;69A69A&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-142">
    <description> An empty string is a valid lexical representation for xs:base64Binary, and means 'no data.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary(&quot;&quot;)) eq &quot;&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-143">
    <description> Casting where the source type typically cannot be determined statically.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary(remove((&quot;3B&quot;, 1.1), 2) treat as xs:string)</test>
    <result-string>xs:string(&quot;3B&quot;)</result-string>
    <result>
      <assert-string-value>3B</assert-string-value>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-144">
    <description> A test whose essence is: `(xs:decimal(remove((3e3, 1.1), 1))) eq 1.1`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(xs:decimal(remove((3e3, 1.1), 1))) eq 1.1</test>
    <result-string/>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPTY0004"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-145">
    <description> Casting where the cardinality of the source value is wrong.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(remove((1, 2, 3), 1))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-147">
    <description> A preceding plus sign('+') is disallowed for xs:duration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration(&quot;+P1Y2M123DT10H30M99S&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-148">
    <description> No zone offset is allowed for xs:duration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration(&quot;P1Y2M123DT10H30M99S+08:00&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-149">
    <description> A preceding 'P' must always exist in a xs:duration value.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration(&quot;1Y2M123DT10H30M99S&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-150">
    <description> At least one number and its designator must be present in a xs:duration value.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration(&quot;P&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-151">
    <description> At least one number and its designator must be present in a xs:duration value, a minus sign is insufficient.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration(&quot;-P&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-152">
    <description> A 'T' separator in a xs:duration must be followed by time components.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration(&quot;P1Y24MT&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-153">
    <description> 'P24H' is an invalid lexical representation for xs:duration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration(&quot;P24H&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-154">
    <description> Ensure that when casting xs:duration to xs:string, preceding zeros are handled properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:duration(&quot;P0010Y0010M0010DT0010H0010M0010S&quot;)) eq &quot;P10Y10M10DT10H10M10S&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-155">
    <description> Ensure that a negative xs:duration is properly serialized when cast to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:duration(&quot;-P0010DT0010H0010M0010S&quot;)) eq &quot;-P10DT10H10M10S&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-156">
    <description> Ensure that when casting xs:duration to xs:string, that empty fields are properly serialized.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:duration(&quot;P0Y0M0DT00H00M00.000S&quot;)) eq &quot;PT0S&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-157">
    <description> Ensure that when casting xs:duration to xs:string, that empty components are handled properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:duration(&quot;-PT8H23M0S&quot;)) eq &quot;-PT8H23M&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-158">
    <description> Casting a xs:duration with zeroed time components to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:duration(&quot;-P2000Y11M5DT0H0M0.000S&quot;)) eq &quot;-P2000Y11M5D&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-159">
    <description> The canonical lexical representation for the xs:duration value P365D is 'P365D'.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:duration(&quot;P365D&quot;)) eq &quot;P365D&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-160">
    <description> The canonical lexical representation for the xs:duration value P12M is 'P1Y'.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:duration(&quot;P12M&quot;)) eq &quot;P1Y&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-161">
    <description> The canonical lexical representation for the xs:duration value P31D is 'P31D'.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:duration(&quot;P31D&quot;)) eq &quot;P31D&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-162">
    <description> The canonical lexical representation for the xs:duration value P3Y0M is 'P3Y'.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:yearMonthDuration(&quot;P3Y0M&quot;)) eq &quot;P3Y&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-163">
    <description> Test that a xs:duration value with a small second component is serialized properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:duration(&quot;P31DT3H2M10.001S&quot;)) eq &quot;P31DT3H2M10.001S&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-164">
    <description> The canonical form of the xs:duration value -PT0S is PT0S.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:duration(&quot;-PT0S&quot;)) eq &quot;PT0S&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-165">
    <description> Simple test of casting xs:dayTimeDuration to xs:duration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:duration(xs:dayTimeDuration(&quot;P31DT3H2M10.001S&quot;))) eq &quot;P31DT3H2M10.001S&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-166">
    <description> Simple test of casting xs:yearMonthDuration to xs:duration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:duration(xs:yearMonthDuration(&quot;P543Y456M&quot;))) eq &quot;P581Y&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-167">
    <description> Simple test of casting a negative xs:dayTimeDuration to xs:duration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:duration(xs:dayTimeDuration(&quot;-P31DT3H2M10.001S&quot;))) eq &quot;-P31DT3H2M10.001S&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-168">
    <description> Simple test of casting a negative xs:yearMonthDuration to xs:duration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:duration(xs:yearMonthDuration(&quot;-P543Y456M&quot;))) eq &quot;-P581Y&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-169">
    <description> A preceding plus sign('+') is disallowed for xs:dayTimeDuration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration(&quot;+P3DT10H&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-170">
    <description> No zone offset is allowed for xs:dayTimeDuration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration(&quot;P3DT10H+08:00&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-171">
    <description> A preceding 'P' must always exist in a xs:dayTimeDuration value.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration(&quot;3DT10H&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-172">
    <description> At least one number and its designator must be present in a xs:dayTimeDuration value.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration(&quot;P&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-173">
    <description> At least one number and its designator must be present in a xs:dayTimeDuration value, a minus sign is insufficient.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration(&quot;-P&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-174">
    <description> A 'T' separator in a xs:dayTimeDuration must be followed by time components.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration(&quot;P1DT&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-175">
    <description> Ensure that when casting xs:dayTimeDuration to xs:string, that empty fields are properly serialized.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dayTimeDuration(&quot;P0DT00H00M00.000S&quot;)) eq &quot;PT0S&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-176">
    <description> 'P1Y12M1D' is an invalid lexical representation for xs:dayTimeDuration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration(&quot;P1Y12M1D&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-177">
    <description> 'P24M1D' is an invalid lexical representation for xs:dayTimeDuration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration(&quot;P24M1D&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-178">
    <description> 'PDT3H2M10.001S' is an invalid lexical representation for xs:dayTimeDuration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration(&quot;PDT3H2M10.001S&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-179">
    <description> Ensure that when casting xs:dayTimeDuration to xs:string, that preceding zeros are handled properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dayTimeDuration(&quot;P0010DT0010H0010M0010S&quot;)) eq &quot;P10DT10H10M10S&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-180">
    <description> Ensure that a negative xs:dayTimeDuration is properly serialized when cast to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dayTimeDuration(&quot;-P0010DT0010H0010M0010S&quot;)) eq &quot;-P10DT10H10M10S&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-181">
    <description> Ensure that when casting xs:dayTimeDuration to xs:string, that empty components are handled properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dayTimeDuration(&quot;-PT8H23M0S&quot;)) eq &quot;-PT8H23M&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-182">
    <description> Casting a xs:duration with zeroed time components to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dayTimeDuration(&quot;-P5DT0H0M0.000S&quot;)) eq &quot;-P5D&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-183">
    <description> Test that a xs:dayTimeDuration value with a large day component is serialized properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dayTimeDuration(&quot;P9876DT1M&quot;)) eq &quot;P9876DT1M&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-184">
    <description> Test that a xs:dayTimeDuration value with a large hour component is serialized properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dayTimeDuration(&quot;PT9876H1M&quot;)) eq &quot;P411DT12H1M&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-185">
    <description> Test that a xs:dayTimeDuration value with a large minute component is serialized properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dayTimeDuration(&quot;PT6000M&quot;)) eq &quot;P4DT4H&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-186">
    <description> Test that a xs:dayTimeDuration value with a large second component is serialized properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dayTimeDuration(&quot;PT1M1231.432S&quot;)) eq &quot;PT21M31.432S&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-187">
    <description> Test that a xs:dayTimeDuration value with a small second component is serialized properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dayTimeDuration(&quot;P31DT3H2M10.001S&quot;)) eq &quot;P31DT3H2M10.001S&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-188">
    <description> The canonical form of the xs:dayTimeDuration value -PT0S is PT0S.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dayTimeDuration(&quot;-PT0S&quot;)) eq &quot;PT0S&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-189">
    <description> Simple test of casting xs:duration to xs:dayTimeDuration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dayTimeDuration(xs:duration(&quot;P3Y0M31DT3H2M10.001S&quot;))) eq &quot;P31DT3H2M10.001S&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-190">
    <description> Simple test of casting xs:yearMonthDuration to xs:dayTimeDuration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dayTimeDuration(xs:yearMonthDuration(&quot;P543Y456M&quot;))) eq &quot;PT0S&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-191">
    <description> Simple test of casting a negative xs:duration to xs:dayTimeDuration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dayTimeDuration(xs:duration(&quot;-P3Y0M31DT3H2M10.001S&quot;))) eq &quot;-P31DT3H2M10.001S&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-192">
    <description> Simple test of casting a negative xs:yearMonthDuration to xs:dayTimeDuration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dayTimeDuration(xs:yearMonthDuration(&quot;-P543Y456M&quot;))) eq &quot;PT0S&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-193">
    <description> The canonical lexical representation for the xs:dayTimeDuration value P3D is 'P3D'.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dayTimeDuration(&quot;P3D&quot;)) eq &quot;P3D&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-194">
    <description> A preceding plus sign('+') is disallowed for xs:yearMonthDuration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration(&quot;+P20Y15M&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-195">
    <description> No zone offset is allowed for xs:yearMonthDuration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration(&quot;P20Y15M+08:00&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-196">
    <description> A preceding 'P' must always exist in a xs:yearMonthDuration value.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration(&quot;20Y15M&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-197">
    <description> At least one number and its designator must be present in a xs:yearMonthDuration value.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration(&quot;P&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-198">
    <description> At least one number and its designator must be present in a xs:yearMonthDuration value, a minus sign is insufficient.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration(&quot;-P&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-199">
    <description> A 'T' separator in a xs:yearMonthDuration is not allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration(&quot;P1Y24MT&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-200">
    <description> 'P731D' is an invalid lexical representation for xs:yearMonthDuration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration(&quot;P731D&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-201">
    <description> '-P3' is an invalid lexical representation for xs:yearMonthDuration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration(&quot;-P3&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-202">
    <description> Ensure that when casting xs:yearMonthDuration to xs:string, that preceding zeros are handled properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:yearMonthDuration(&quot;P0010Y0010M&quot;)) eq &quot;P10Y10M&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-203">
    <description> Ensure that a negative xs:yearMonthDuration is properly serialized when cast to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:yearMonthDuration(&quot;-P0010Y0010M&quot;)) eq &quot;-P10Y10M&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-204">
    <description> Ensure that when casting xs:yearMonthDuration to xs:string, that empty fields are properly serialized.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:yearMonthDuration(&quot;P0Y0M&quot;)) eq &quot;P0M&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-205">
    <description> Test that a xs:yearMonthDuration value with a large year component is serialized properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:yearMonthDuration(&quot;P2Y323M&quot;)) eq &quot;P28Y11M&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-206">
    <description> Test that a xs:yearMonthDuration value with a large year and month component is serialized properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:yearMonthDuration(&quot;-P543Y456M&quot;)) eq &quot;-P581Y&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-207">
    <description> The canonical form of the xs:yearMonthDuration value -P0M is P0M.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:yearMonthDuration(&quot;-P0M&quot;)) eq &quot;P0M&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-208">
    <description> Simple test of casting xs:duration to xs:yearMonthDuration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:yearMonthDuration(xs:duration(&quot;P3Y0M31DT3H2M10.001S&quot;))) eq &quot;P3Y&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-209">
    <description> Simple test of casting xs:dayTimeDuration to xs:yearMonthDuration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:yearMonthDuration(xs:dayTimeDuration(&quot;P31DT3H2M10.001S&quot;))) eq &quot;P0M&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-210">
    <description> Simple test of casting a negative xs:duration to xs:yearMonthDuration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:yearMonthDuration(xs:duration(&quot;-P3Y0M31DT3H2M10.001S&quot;))) eq &quot;-P3Y&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-211">
    <description> Simple test of casting a negative xs:dayTimeDuration to xs:yearMonthDuration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:yearMonthDuration(xs:dayTimeDuration(&quot;-P31DT3H2M10.001S&quot;))) eq &quot;P0M&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-213">
    <description> A test whose essence is: `xs:gYear(&quot;1&quot;)`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;1&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-214">
    <description> A test whose essence is: `xs:gYear(&quot;12&quot;)`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;12&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-215">
    <description> A test whose essence is: `xs:gYear(&quot;867&quot;)`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;867&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-216">
    <description> A test whose essence is: `xs:gYear(&quot;+1999&quot;)`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;+1999&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-217">
    <description> A test whose essence is: `xs:gYear(&quot;+1999&quot;)`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;+1999&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-218">
    <description> A test whose essence is: `xs:gYear(&quot;+0000&quot;)`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;+0000&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-219">
    <description> A test whose essence is: `xs:gYear(&quot;1111-&quot;)`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;1111-&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-220">
    <description> A test whose essence is: `xs:gYear(&quot;1111a&quot;)`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;1111a&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-221">
    <description> A test whose essence is: `xs:gYear(&quot;a1111&quot;)`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;a1111&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-222">
    <description> A test whose essence is: `xs:gYear(&quot;1 111&quot;)`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;1 111&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-223">
    <description> A test whose essence is: `xs:gYear(&quot;1111 Z&quot;)`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;1111 Z&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-224">
    <description> A test whose essence is: `xs:gYear(&quot;1111 Z&quot;)`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;1111 Z&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-225">
    <description> Testing timezone field in xs:gYear: the hour component cannot be -15.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;1956-15:00&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-226">
    <description> Testing timezone field in xs:gYear: the hour component cannot be +15.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;1956+15:00&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-227">
    <description> Testing timezone field in xs:gYear: the minute component cannot be +60.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;1956+10:60&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-228">
    <description> Testing timezone field in xs:gYear: the minute component cannot be -60.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;1956-10:60&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-229">
    <description> '02004' is an invalid lexical representation for xs:gYear.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;02004&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-230">
    <description> Testing timezone field in xs:gYear: the minute field must always be present.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;1956-10&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-231">
    <description> Ensure casting xs:gYear to xs:string, with timezone '-00:00' is properly handled.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:gYear(&quot;1999-00:00&quot;)) eq &quot;1999Z&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-232">
    <description> Ensure casting xs:gYear to xs:string, with timezone '+00:00' is properly handled.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:gYear(&quot;1999+00:00&quot;)) eq &quot;1999Z&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-233">
    <description> Ensure casting xs:gYear to xs:string, with timezone 'Z' is properly handled.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:gYear(&quot;1999Z&quot;)) eq &quot;1999Z&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-234">
    <description> '10' is an invalid lexical representation for xs:gDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;10&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-235">
    <description> '-01' is an invalid lexical representation for xs:gDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;-01&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-236">
    <description> '---321' is an invalid lexical representation for xs:gDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;---321&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-237">
    <description> '--01' is an invalid lexical representation for xs:gDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;--01&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-238">
    <description> 'E---01' is an invalid lexical representation for xs:gDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;E---01&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-239">
    <description> '---01E' is an invalid lexical representation for xs:gDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;---01E&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-240">
    <description> '---01-' is an invalid lexical representation for xs:gDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;---01-&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-241">
    <description> '---001' is an invalid lexical representation for xs:gDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;---001&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-242">
    <description> '---32' is an invalid lexical representation for xs:gDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;---32&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-243">
    <description> '---00' is an invalid lexical representation for xs:gDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;---00&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-244">
    <description> '---8' is an invalid lexical representation for xs:gDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;+--08&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-245">
    <description> '+--08' is an invalid lexical representation for xs:gDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;+--08&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-246">
    <description> '+---08' is an invalid lexical representation for xs:gDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;+---08&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-247">
    <description> '---08 Z' is an invalid lexical representation for xs:gDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;---08 Z&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-248">
    <description> Testing timezone field in xs:gDay: the hour component cannot be -15.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;---08-15:00&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-249">
    <description> Testing timezone field in xs:gDay: the hour component cannot be +15.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;---08+15:00&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-250">
    <description> Testing timezone field in xs:gDay: the minute component cannot be +60.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;---08+10:60&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-251">
    <description> Testing timezone field in xs:gDay: the minute component cannot be -60.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;---08-10:60&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-252">
    <description> Testing timezone field in xs:gDay: the minute field must always be present.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;---08-10&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-253">
    <description> Ensure casting xs:gDay to xs:string, with timezone '-00:00' is properly handled.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:gDay(&quot;---01-00:00&quot;)) eq &quot;---01Z&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-254">
    <description> Ensure casting xs:gDay to xs:string, with timezone '+00:00' is properly handled.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:gDay(&quot;---01+00:00&quot;)) eq &quot;---01Z&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-255">
    <description> Ensure casting xs:gDay to xs:string, with timezone 'Z' is properly handled.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:gDay(&quot;---01Z&quot;)) eq &quot;---01Z&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-256">
    <description> '-01' is an invalid lexical representation for xs:gMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(&quot;-01&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-257">
    <description> '---01' is an invalid lexical representation for xs:gMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(&quot;---01&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-258">
    <description> '+--01' is an invalid lexical representation for xs:gMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(&quot;+--01&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-259">
    <description> '--13' is an invalid lexical representation for xs:gMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(&quot;--13&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-260">
    <description> '--431' is an invalid lexical representation for xs:gMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(&quot;--431&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-261">
    <description> '--11-' is an invalid lexical representation for xs:gMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(&quot;--11-&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-262">
    <description> '--00' is an invalid lexical representation for xs:gMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(&quot;--00&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-263">
    <description> Testing timezone field in xs:gMonth: the hour component cannot be -15.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(&quot;--08-15:00&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-264">
    <description> Testing timezone field in xs:gMonth: the hour component cannot be +15.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(&quot;--08+15:00&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-265">
    <description> Testing timezone field in xs:gMonth: the minute component cannot be +60.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(&quot;--08+10:60&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-266">
    <description> Testing timezone field in xs:gMonth: the minute component cannot be -60.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(&quot;--08-10:60&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-267">
    <description> Testing timezone field in xs:gMonth: the minute field must always be present.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(&quot;--08-10&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-268">
    <description> Ensure casting xs:gMonth to xs:string, with timezone '-00:00' is properly handled.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:gMonth(&quot;--01-00:00&quot;)) eq &quot;--01Z&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-269">
    <description> Ensure casting xs:gMonth to xs:string, with timezone '+00:00' is properly handled.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:gMonth(&quot;--01+00:00&quot;)) eq &quot;--01Z&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-270">
    <description> Ensure casting xs:gMonth to xs:string, with timezone 'Z' is properly handled.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:gMonth(&quot;--01Z&quot;)) eq &quot;--01Z&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-271">
    <description> '--1999-12' is an invalid lexical representation for xs:gYearMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(&quot;--1999-12&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-272">
    <description> '+1999-12' is an invalid lexical representation for xs:gYearMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(&quot;+1999-12&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-273">
    <description> '1999-12-' is an invalid lexical representation for xs:gYearMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(&quot;1999-12-&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-274">
    <description> '1999--12' is an invalid lexical representation for xs:gYearMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(&quot;1999--12&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-275">
    <description> '1999-13' is an invalid lexical representation for xs:gYearMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(&quot;1999-13&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-276">
    <description> '1999-00' is an invalid lexical representation for xs:gYearMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(&quot;1999-00&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-277">
    <description> '02004-08' is an invalid lexical representation for xs:gYearMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(&quot;02004-08&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-278">
    <description> Testing timezone field in xs:gYearMonth: the minute field must always be present.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(&quot;1999-08-10&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-279">
    <description> Testing timezone field in xs:gYearMonth: the hour component cannot be -15.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(&quot;1999-01-15:00&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-280">
    <description> Testing timezone field in xs:gYearMonth: the hour component cannot be +15.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(&quot;1999-01+15:00&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-281">
    <description> Testing timezone field in xs:gYearMonth: the minute component cannot be +60.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(&quot;1999-01+10:60&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-282">
    <description> Testing timezone field in xs:gYearMonth: the minute component cannot be -60.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(&quot;1999-01-10:60&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-283">
    <description> Ensure casting xs:gYearMonth to xs:string, with timezone '-00:00' is properly handled.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:gYearMonth(&quot;1999-01-00:00&quot;)) eq &quot;1999-01Z&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-284">
    <description> Ensure casting xs:gYearMonth to xs:string, with timezone '+00:00' is properly handled.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:gYearMonth(&quot;1999-01+00:00&quot;)) eq &quot;1999-01Z&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-285">
    <description> Ensure casting xs:gYearMonth to xs:string, with timezone 'Z' is properly handled.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:gYearMonth(&quot;1999-01Z&quot;)) eq &quot;1999-01Z&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-286">
    <description> '-01-12' is an invalid lexical representation for xs:gMonthDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;-01-12&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-287">
    <description> '+--01-12' is an invalid lexical representation for xs:gMonthDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;+--01-12&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-288">
    <description> '01-12-' is an invalid lexical representation for xs:gMonthDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;01-12-&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-289">
    <description> '--01--12' is an invalid lexical representation for xs:gMonthDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;--01--12&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-290">
    <description> '--01-00' is an invalid lexical representation for xs:gMonthDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;--01-00&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-291">
    <description> '--00-01' is an invalid lexical representation for xs:gMonthDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;--00-01&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-292">
    <description> '--13-01' is an invalid lexical representation for xs:gMonthDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;--13-01&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-293">
    <description> '--111-01' is an invalid lexical representation for xs:gMonthDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;--111-01&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-294">
    <description> '--1967-01' is an invalid lexical representation for xs:gMonthDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;--1967-01&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-295">
    <description> '--02-31' is an invalid lexical representation for xs:gMonthDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;--02-31&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-296">
    <description> Testing timezone field in xs:gMonthDay: the minute field must always be present.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;--11-08-10&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-297">
    <description> The xs:gMonthDay value '--02-30' represents a non-existent date.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;--02-30&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-298">
    <description> The xs:gMonthDay value '--04-31' represents a non-existent date.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;--04-31&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-299">
    <description> The xs:gMonthDay value '--11-31' represents a non-existent date.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;--11-31&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-300">
    <description> Testing timezone field in xs:gMonthDay: the hour component cannot be -15.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;--01-01-15:00&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-301">
    <description> Testing timezone field in xs:gMonthDay: the hour component cannot be +15.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;--01-01+15:00&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-302">
    <description> Testing timezone field in xs:gMonthDay: the minute component cannot be +60.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;--01-01+10:60&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-303">
    <description> Testing timezone field in xs:gMonthDay: the minute component cannot be -60.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;--01-01-10:60&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-304">
    <description> Ensure casting xs:gMonthDay to xs:string, with timezone '-00:00' is properly handled.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:gMonthDay(&quot;--01-01-00:00&quot;)) eq &quot;--01-01Z&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-305">
    <description> Ensure casting xs:gMonthDay to xs:string, with timezone '+00:00' is properly handled.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:gMonthDay(&quot;--01-01+00:00&quot;)) eq &quot;--01-01Z&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-306">
    <description> Ensure casting xs:gMonthDay to xs:string, with timezone 'Z' is properly handled.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:gMonthDay(&quot;--01-01Z&quot;)) eq &quot;--01-01Z&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-307">
    <description> Simple xs:gMonthDay test involving --02-29.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;--02-29+00:00&quot;) eq xs:gMonthDay(&quot;--02-29+00:00&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-308">
    <description> '+2004-08-01T12:44:05' is an invalid lexical representation, a preceding '+' sign is not allowed for xs:dateTime.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;+2004-08-01T12:44:05&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-309">
    <description> '02004-08-01T12:44:05' is an invalid lexical representation for xs:dateTime; if the year part has more than four digits, leading zeros are prohibited.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;02004-08-01T12:44:05&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-310">
    <description> '00004-08-01T12:44:05' is an invalid lexical representation for xs:dateTime; if the year part has more than four digits, leading zeros are prohibited.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;00004-08-01T12:44:05&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-311">
    <description> '2004-32-01T12:44:05' is an invalid lexical representation for xs:dateTime; the month part cannot be larger than 32.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;2004-32-01T12:44:05&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-312">
    <description> '2002-02-30T12:44:05' is a non-existent xs:dateTime date.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;2002-02-30T12:44:05&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-313">
    <description> '2002-002-15T12:44:05' is an invalid lexical representation for xs:dateTime.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;2002-002-15T12:44:05&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-314">
    <description> '2002-02-150T12:44:05' is an invalid lexical representation for xs:dateTime.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;2002-02-150T12:44:05&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-315">
    <description> '2002-02-15T24:00:00.001' is an invalid lexical representation for xs:dateTime; if hour is 24, seconds part must be 00.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;2002-02-15T24:00:00.001&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-316">
    <description> '2002-02-15T24:01:00' is an invalid lexical representation for xs:dateTime; if hour is 24, minutes part must be 00.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;2002-02-15T24:01:00&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-317">
    <description> '2002-02-15T25:00:00' is an invalid lexical representation for xs:dateTime; hour part can never be larger than 24.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;2002-02-15T25:01:00&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-318">
    <description> '2002-02-15T21:60:00' is an invalid lexical representation for xs:dateTime; minute part can never be larger than 59.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;2002-02-15T21:60:00&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-319">
    <description> '2002-02-15T21:01:60' is an invalid lexical representation for xs:dateTime; seconds part can never be larger than 59.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;2002-02-15T21:01:60&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-320">
    <description> '--2002-02-15T21:01:23' is an invalid lexical representation for xs:dateTime.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;--2002-02-15T21:01:23&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-321">
    <description> Testing timezone field in xs:dateTime: the hour component cannot be -15.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;1999-12-01T23:59:12.432-15:00&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-322">
    <description> Testing timezone field in xs:dateTime: the hour component cannot be +15.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;1999-12-01T23:59:12.432+15:00&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-323">
    <description> Testing timezone field in xs:dateTime: the minute component cannot be +60.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;1999-12-01T23:59:12.432+10:60&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-324">
    <description> Testing timezone field in xs:dateTime: the minute component cannot be -60.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;1999-12-01T23:59:12.432-10:60&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-325">
    <description> Testing timezone field in xs:dateTime: the minute field must always be present.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;1999-12-01T23:59:12.999-00&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-326">
    <description> Simple test of casting a xs:dateTime with UTC timezone to xs:gYear.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(xs:dateTime(&quot;2002-11-23T23:12:23.867-00:00&quot;)) eq xs:gYear(&quot;2002Z&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-327">
    <description> Simple test of casting a xs:dateTime with UTC offset to xs:gYear.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(xs:dateTime(&quot;2002-11-23T23:12:23.867-13:37&quot;)) eq xs:gYear(&quot;2002-13:37&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-328">
    <description> Simple test of casting a xs:dateTime with UTC timezone to xs:gYearMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(xs:dateTime(&quot;2002-11-23T23:12:23.867-00:00&quot;)) eq xs:gYearMonth(&quot;2002-11Z&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-329">
    <description> Simple test of casting a xs:dateTime with UTC offset to xs:gYearMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(xs:dateTime(&quot;2002-11-23T23:12:23.867-13:37&quot;)) eq xs:gYearMonth(&quot;2002-11-13:37&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-330">
    <description> Simple test of casting a xs:dateTime with UTC timezone to xs:gMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(xs:dateTime(&quot;2002-11-23T22:12:23.867-00:00&quot;)) eq xs:gMonth(&quot;--11Z&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-331">
    <description> Simple test of casting a xs:dateTime with UTC offset to xs:gMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(xs:dateTime(&quot;2002-11-23T22:12:23.867-13:37&quot;)) eq xs:gMonth(&quot;--11-13:37&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-332">
    <description> Simple test of casting a xs:dateTime with UTC timezone to xs:gMonthDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(xs:dateTime(&quot;2002-11-23T22:12:23.867-00:00&quot;)) eq xs:gMonthDay(&quot;--11-23Z&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-333">
    <description> Simple test of casting a xs:dateTime with UTC offset to xs:gMonthDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(xs:dateTime(&quot;2002-11-23T22:12:23.867-13:37&quot;)) eq xs:gMonthDay(&quot;--11-23-13:37&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-334">
    <description> Simple test of casting a xs:dateTime with UTC timezone to xs:gDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(xs:dateTime(&quot;2002-11-23T22:12:23.867-00:00&quot;)) eq xs:gDay(&quot;---23Z&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-335">
    <description> Simple test of casting a xs:dateTime with UTC offset to xs:gDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(xs:dateTime(&quot;2002-11-23T22:12:23.867-13:37&quot;)) eq xs:gDay(&quot;---23-13:37&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-336">
    <description> Simple test of casting a xs:dateTime with UTC timezone to xs:date.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(xs:dateTime(&quot;2002-11-23T22:12:23.867-00:00&quot;)) eq xs:date(&quot;2002-11-23Z&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-337">
    <description> Simple test of casting a xs:dateTime with UTC offset to xs:date.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(xs:dateTime(&quot;2002-11-23T22:12:23.867-13:37&quot;)) eq xs:date(&quot;2002-11-23-13:37&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-338">
    <description> Simple test of casting a xs:dateTime with UTC timezone to xs:time.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(xs:dateTime(&quot;2002-11-23T22:12:23.867-00:00&quot;)) eq xs:time(&quot;22:12:23.867Z&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-339">
    <description> Simple test of casting a xs:dateTime with UTC offset to xs:time.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(xs:dateTime(&quot;2002-11-23T22:12:23.867-13:37&quot;)) eq xs:time(&quot;22:12:23.867-13:37&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-340">
    <description> Ensure casting xs:dateTime to xs:string, with timezone '-00:00' is properly handled.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dateTime(&quot;1999-12-01T23:59:12.999-00:00&quot;)) eq &quot;1999-12-01T23:59:12.999Z&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-341">
    <description> Ensure casting xs:dateTime to xs:string, with timezone '+00:00' is properly handled.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dateTime(&quot;1999-12-01T23:59:12.432+00:00&quot;)) eq &quot;1999-12-01T23:59:12.432Z&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-342">
    <description> Ensure when casting xs:dateTime to xs:string that an empty milli seconds part is not serialized.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dateTime(&quot;2002-02-15T21:01:23.000&quot;)) eq &quot;2002-02-15T21:01:23&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-343">
    <description> Ensure when casting xs:dateTime to xs:string that milli seconds have no trailing zeros.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dateTime(&quot;2002-02-15T21:01:23.100&quot;)) eq &quot;2002-02-15T21:01:23.1&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-344">
    <description> Ensure when casting xs:dateTime to xs:string that milli seconds are properly padded with zeros.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dateTime(&quot;2002-02-15T21:01:23.001&quot;)) eq &quot;2002-02-15T21:01:23.001&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-345">
    <description> Ensure when casting xs:dateTime to xs:string that milli seconds are properly padded with zeros.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dateTime(&quot;2002-02-15T21:01:23.010&quot;)) eq &quot;2002-02-15T21:01:23.01&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-346">
    <description> Ensure when casting xs:dateTime to xs:string that a milli seconds part of '435' is handled properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dateTime(&quot;2002-02-15T21:01:23.435&quot;)) eq &quot;2002-02-15T21:01:23.435&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-347">
    <description> Ensure when casting xs:dateTime to xs:string that a milli seconds part of '11' is handled properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dateTime(&quot;2002-02-15T21:01:23.11&quot;)) eq &quot;2002-02-15T21:01:23.11&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-348">
    <description> Ensure when casting xs:dateTime to xs:string that a milli seconds part of '110' is handled properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dateTime(&quot;2002-02-15T21:01:23.110&quot;)) eq &quot;2002-02-15T21:01:23.11&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-349">
    <description> Simple xs:dateTime involving time with no milli seconds.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>string(xs:dateTime(&quot;2000-08-01T12:44:05&quot;)) eq &quot;2000-08-01T12:44:05&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-350">
    <description> The canonical form of an xs:dateTime containing 24:00:00 is the following day at 00:00:00.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>string(xs:dateTime(&quot;2004-03-31T24:00:00&quot;)) eq &quot;2004-04-01T00:00:00&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-351">
    <description> '24:00:00.001' is an invalid lexical representation for xs:time; if hour is 24, seconds part must be 00.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;24:00:00.001&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-352">
    <description> '24:01:00' is an invalid lexical representation for xs:time; if hour is 24, minutes part must be 00.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;24:01:00&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-353">
    <description> '25:00:00' is an invalid lexical representation for xs:time; hour part can never be larger than 24.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;25:01:00&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-354">
    <description> '21:60:00' is an invalid lexical representation for xs:time; minute part can never be larger than 59.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;21:60:00&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-355">
    <description> '21:01:60' is an invalid lexical representation for xs:time; seconds part can never be larger than 59.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;21:01:60&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-356">
    <description> '+21:01:50' is an invalid lexical representation for xs:time.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;+21:01:50&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-357">
    <description> '-21:01:50' is an invalid lexical representation for xs:time.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;-21:01:50&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-358">
    <description> A valid xs:dateTime is an invalid xs:time.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;2002-02-15T08:12:12&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-359">
    <description> Testing timezone field in xs:time: the hour component cannot be -15.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;23:59:12.432-15:00&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-360">
    <description> Testing timezone field in xs:time: the hour component cannot be +15.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;23:59:12.432+15:00&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-361">
    <description> Testing timezone field in xs:time: the minute component cannot be +60.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;23:59:12.432+10:60&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-362">
    <description> Testing timezone field in xs:time: the minute component cannot be -60.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;23:59:12.432-10:60&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-363">
    <description> Testing timezone field in xs:time: the minute field must always be present.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;T23:59:12.999-03&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-364">
    <description> Simple xs:time involving time with no milli seconds.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>string(xs:time(&quot;12:44:05&quot;)) eq &quot;12:44:05&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-365">
    <description> Ensure casting xs:time to xs:string, with timezone '-00:00' is properly handled.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:time(&quot;23:59:12.999-00:00&quot;)) eq &quot;23:59:12.999Z&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-366">
    <description> Ensure casting xs:time to xs:string, with timezone '+00:00' is properly handled.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:time(&quot;23:59:12.432+00:00&quot;)) eq &quot;23:59:12.432Z&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-367">
    <description> Ensure when casting xs:time to xs:string that an empty milli seconds part is not serialized.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:time(&quot;21:01:23.000&quot;)) eq &quot;21:01:23&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-368">
    <description> Ensure when casting xs:time to xs:string that milli seconds have no trailing zeros.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:time(&quot;21:01:23.100&quot;)) eq &quot;21:01:23.1&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-369">
    <description> Ensure when casting xs:time to xs:string that milli seconds are properly padded with zeros.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:time(&quot;21:01:23.001&quot;)) eq &quot;21:01:23.001&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-370">
    <description> Ensure when casting xs:time to xs:string that milli seconds are properly padded with zeros.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:time(&quot;21:01:23.010&quot;)) eq &quot;21:01:23.01&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-371">
    <description> Ensure when casting xs:time to xs:string that a milli seconds part of '435' is handled properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:time(&quot;21:01:23.435&quot;)) eq &quot;21:01:23.435&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-372">
    <description> Ensure when casting xs:time to xs:string that a milli seconds part of '11' is handled properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:time(&quot;21:01:23.11&quot;)) eq &quot;21:01:23.11&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-373">
    <description> Ensure when casting xs:time to xs:string that a milli seconds part of '110' is handled properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:time(&quot;21:01:23.110&quot;)) eq &quot;21:01:23.11&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-374">
    <description> The canonical form of an xs:time containing 24:00:00 is 00:00:00.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>string(xs:time(&quot;24:00:00&quot;)) eq &quot;00:00:00&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-375">
    <description> '+2004-08-01' is an invalid lexical representation, a preceding '+' sign is not allowed for xs:date.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;+2004-08-01&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-376">
    <description> '02004-08-01' is an invalid lexical representation for xs:date; if the year part has more than four digits, leading zeros are prohibited.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;02004-08-01&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-377">
    <description> '00004-08-01' is an invalid lexical representation for xs:date; if the year part has more than four digits, leading zeros are prohibited.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;00004-08-01&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-378">
    <description> '2004-32-01' is an invalid lexical representation for xs:date; the month part cannot be larger than 32.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;2004-32-01&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-379">
    <description> '2002-02-30' is a non-existent xs:date date.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;2002-02-30&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-380">
    <description> '2002-002-15' is an invalid lexical representation for xs:date.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;2002-002-15&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-381">
    <description> '2002-02-150' is an invalid lexical representation for xs:date.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;2002-02-150&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-382">
    <description> '--2002-02-15' is an invalid lexical representation for xs:date.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;--2002-02-15&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-383">
    <description> A valid xs:dateTime is an invalid xs:date.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;2002-02-15T08:12:12&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-384">
    <description> Testing timezone field in xs:date: the hour component cannot be -15.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;1999-12-01-15:00&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-385">
    <description> Testing timezone field in xs:date: the hour component cannot be +15.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;1999-12-01+15:00&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-386">
    <description> Testing timezone field in xs:date: the minute component cannot be +60.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;1999-12-01+10:60&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-387">
    <description> Testing timezone field in xs:date: the minute component cannot be -60.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;1999-12-01-10:60&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-388">
    <description> Testing datezone field in xs:date: the minute field must always be present.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;1999-12-01-03&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-389">
    <description> Simple test of casting a xs:date with UTC timezone to xs:gYear.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(xs:date(&quot;2002-11-23Z&quot;)) eq xs:gYear(&quot;2002Z&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-390">
    <description> Simple test of casting a xs:date with UTC offset to xs:gYear.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(xs:date(&quot;2002-11-23-13:37&quot;)) eq xs:gYear(&quot;2002-13:37&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-391">
    <description> Simple test of casting a xs:date with UTC timezone to xs:gYearMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(xs:date(&quot;2002-11-23Z&quot;)) eq xs:gYearMonth(&quot;2002-11Z&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-392">
    <description> Simple test of casting a xs:date with UTC offset to xs:gYearMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(xs:date(&quot;2002-11-23-13:37&quot;)) eq xs:gYearMonth(&quot;2002-11-13:37&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-393">
    <description> Simple test of casting a xs:date with UTC timezone to xs:gMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(xs:date(&quot;2002-11-23-00:00&quot;)) eq xs:gMonth(&quot;--11Z&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-394">
    <description> Simple test of casting a xs:date with UTC offset to xs:gMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(xs:date(&quot;2002-11-23-13:37&quot;)) eq xs:gMonth(&quot;--11-13:37&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-395">
    <description> Simple test of casting a xs:date with UTC timezone to xs:gMonthDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(xs:date(&quot;2002-11-23-00:00&quot;)) eq xs:gMonthDay(&quot;--11-23Z&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-396">
    <description> Simple test of casting a xs:date with UTC offset to xs:gMonthDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(xs:date(&quot;2002-11-23-13:37&quot;)) eq xs:gMonthDay(&quot;--11-23-13:37&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-397">
    <description> Simple test of casting a xs:date with UTC timezone to xs:gDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(xs:date(&quot;2002-11-23-00:00&quot;)) eq xs:gDay(&quot;---23Z&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-398">
    <description> Simple test of casting a xs:date with UTC offset to xs:gDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(xs:date(&quot;2002-11-23-13:37&quot;)) eq xs:gDay(&quot;---23-13:37&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-399">
    <description> Simple test of casting a xs:date with UTC timezone to xs:time.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(xs:date(&quot;2002-11-23-00:00&quot;)) eq xs:dateTime(&quot;2002-11-23T00:00:00.000Z&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-400">
    <description> Simple test of casting a xs:date with UTC offset to xs:dateTime.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(xs:date(&quot;2002-11-23-13:37&quot;)) eq xs:dateTime(&quot;2002-11-23T00:00:00.000-13:37&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-401">
    <description> Ensure casting xs:date to xs:string, with timezone '-00:00' is properly handled.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:date(&quot;1999-12-01-00:00&quot;)) eq &quot;1999-12-01Z&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-402">
    <description> Ensure casting xs:date to xs:string, with timezone '+00:00' is properly handled.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:date(&quot;1999-12-01+00:00&quot;)) eq &quot;1999-12-01Z&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-403">
    <description> Ensure when casting xs:date to xs:string that an empty milli seconds part is not serialized.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:date(&quot;2002-02-15&quot;)) eq &quot;2002-02-15&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-404">
    <description> Ensure when casting xs:date to xs:string that milli seconds have no trailing zeros.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:date(&quot;2002-02-15&quot;)) eq &quot;2002-02-15&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-405">
    <description> Ensure when casting xs:date to xs:string that milli seconds are properly padded with zeros.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:date(&quot;2002-02-15&quot;)) eq &quot;2002-02-15&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-406">
    <description> Ensure when casting xs:date to xs:string that milli seconds are properly padded with zeros.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:date(&quot;2002-02-15&quot;)) eq &quot;2002-02-15&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-407">
    <description> Ensure when casting xs:date to xs:string that a milli seconds part of '435' is handled properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:date(&quot;2002-02-15&quot;)) eq &quot;2002-02-15&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-408">
    <description> Ensure when casting xs:date to xs:string that a milli seconds part of '11' is handled properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:date(&quot;2002-02-15&quot;)) eq &quot;2002-02-15&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-409">
    <description> Ensure when casting xs:date to xs:string that a milli seconds part of '110' is handled properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:date(&quot;2002-02-15&quot;)) eq &quot;2002-02-15&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-411">
    <description> The xs:untypedAtomic constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-412">
    <description> The xs:untypedAtomic constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic( &quot;an arbitrary string(untypedAtomic source)&quot; , &quot;an arbitrary string(untypedAtomic source)&quot; )</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-413">
    <description> Verify with 'instance of' that the xs:untypedAtomic constructor function produces values of the correct type. 
      The subsequence() function makes it more difficult for optimizers to take short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence((&quot;dummy&quot;, 1.1, xs:untypedAtomic(&quot;an arbitrary string(untypedAtomic source)&quot;)), 3, 1) instance of xs:untypedAtomic</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-414">
    <description> A simple test exercising the whitespace facet for type xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(&quot; an arbitrary string(untypedAtomic source) &quot;) eq xs:untypedAtomic(&quot; an arbitrary string(untypedAtomic source) &quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-415">
    <description> An empty string is a valid lexical representation of xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(&quot;&quot;) eq xs:untypedAtomic(&quot;&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-416">
    <description> Cast a simple xs:untypedAtomic value to &quot;an arbitrary string(untypedAtomic source)&quot; .</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:untypedAtomic( &quot;an arbitrary string(untypedAtomic source)&quot; )) eq xs:untypedAtomic(&quot;an arbitrary string(untypedAtomic source)&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-417">
    <description> Applying fn:boolean() to a value of type xs:untypedAtomic that has the lexical value ' &quot;an arbitrary string(untypedAtomic source)&quot; ' should result in the boolean value true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:untypedAtomic(&quot;an arbitrary string(untypedAtomic source)&quot;))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-418">
    <description> Casting from xs:untypedAtomic to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(&quot;an arbitrary string(untypedAtomic source)&quot;) cast as xs:untypedAtomic eq xs:untypedAtomic(&quot;an arbitrary string(untypedAtomic source)&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-419">
    <description> 'castable as' involving xs:untypedAtomic as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(&quot;an arbitrary string(untypedAtomic source)&quot;) castable as xs:untypedAtomic</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-420">
    <description> Casting from xs:untypedAtomic to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(&quot;an arbitrary string(untypedAtomic source)&quot;) cast as xs:string ne xs:string(&quot;an arbitrary string&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-421">
    <description> 'castable as' involving xs:untypedAtomic as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(&quot;an arbitrary string(untypedAtomic source)&quot;) castable as xs:string</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-422">
    <description> Casting from xs:untypedAtomic to xs:QName isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="Michael Kay" change="different error code for XP30/XQ30 (bug 14856)" on="2011-11-17"/>
    <dependency type="spec" value="XQ10 XP20"/>
    <test>xs:untypedAtomic(&quot;an arbitrary string(untypedAtomic source)&quot;) cast as xs:QName</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case covers="cast-to-qname" name="K-SeqExprCast-422a">
    <description> Casting from xs:untypedAtomic to xs:QName isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="Michael Kay" change="different error code for XP30/XQ30 (bug 14856)" on="2011-11-17"/>
    <dependency type="spec" value="XQ30+ XP30+"/>
    <test>xs:untypedAtomic(&quot;an arbitrary string(untypedAtomic source)&quot;) cast as xs:QName</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-423">
    <description> 'castable as' involving xs:untypedAtomic as source type and xs:QName as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:untypedAtomic(&quot;an arbitrary string(untypedAtomic source)&quot;) castable as xs:QName)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-424">
    <description> 'castable as' involving xs:untypedAtomic as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:untypedAtomic(&quot;an arbitrary string(untypedAtomic source)&quot;) castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0080&quot;))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-425">
    <description> The xs:string constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-426">
    <description> The xs:string constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string( &quot;an arbitrary string&quot; , &quot;an arbitrary string&quot; )</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-427">
    <description> Verify with 'instance of' that the xs:string constructor function produces values of the correct type. 
      The subsequence() function makes it more difficult for optimizers to take short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence((&quot;dummy&quot;, 1.1, xs:string(&quot;an arbitrary string&quot;)), 3, 1) instance of xs:string</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-428">
    <description> A simple test exercising the whitespace facet for type xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(&quot; an arbitrary string &quot;) eq xs:string(&quot; an arbitrary string &quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-429">
    <description> An empty string is a valid lexical representation of xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(&quot;&quot;) eq xs:string(&quot;&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-430">
    <description> Cast a simple xs:untypedAtomic value to &quot;an arbitrary string&quot; .</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:untypedAtomic( &quot;an arbitrary string&quot; )) eq xs:string(&quot;an arbitrary string&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-431">
    <description> Applying fn:boolean() to a value of type xs:string that has the lexical value ' &quot;an arbitrary string&quot; ' should result in the boolean value true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:string(&quot;an arbitrary string&quot;))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-432">
    <description> Casting from xs:string to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(&quot;an arbitrary string&quot;) cast as xs:untypedAtomic ne xs:untypedAtomic(&quot;an arbitrary string(untypedAtomic source)&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-433">
    <description> 'castable as' involving xs:string as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(&quot;an arbitrary string&quot;) castable as xs:untypedAtomic</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-434">
    <description> Casting from xs:string to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(&quot;an arbitrary string&quot;) cast as xs:string eq xs:string(&quot;an arbitrary string&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-435">
    <description> 'castable as' involving xs:string as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(&quot;an arbitrary string&quot;) castable as xs:string</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-436">
    <description> 'castable as' involving xs:string as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:string(&quot;an arbitrary string&quot;) castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0080&quot;))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-437">
    <description> The xs:float constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-438">
    <description> The xs:float constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float( &quot;3.4e5&quot; , &quot;3.4e5&quot; )</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-439">
    <description> Verify with 'instance of' that the xs:float constructor function produces values of the correct type. 
      The subsequence() function makes it more difficult for optimizers to take short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence((&quot;dummy&quot;, 1.1, xs:float(&quot;3.4e5&quot;)), 3, 1) instance of xs:float</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-440">
    <description> A simple test exercising the whitespace facet for type xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(&quot; 3.4e5 &quot;) eq xs:float(&quot; 3.4e5 &quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-441">
    <description> An empty string is not a valid lexical representation of xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(&quot;&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-442">
    <description> Cast a simple xs:untypedAtomic value to &quot;3.4e5&quot; .</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(xs:untypedAtomic( &quot;3.4e5&quot; )) eq xs:float(&quot;3.4e5&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-443">
    <description> Applying fn:boolean() to a value of type xs:float that has the lexical value ' &quot;3.4e5&quot; ' should result in the boolean value true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:float(&quot;3.4e5&quot;))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-444">
    <description> Casting from xs:float to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(&quot;3.4e5&quot;) cast as xs:untypedAtomic ne xs:untypedAtomic(&quot;an arbitrary string(untypedAtomic source)&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-445">
    <description> 'castable as' involving xs:float as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(&quot;3.4e5&quot;) castable as xs:untypedAtomic</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-446">
    <description> Casting from xs:float to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(&quot;3.4e5&quot;) cast as xs:string ne xs:string(&quot;an arbitrary string&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-447">
    <description> 'castable as' involving xs:float as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(&quot;3.4e5&quot;) castable as xs:string</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-448">
    <description> Casting from xs:float to xs:float is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(&quot;3.4e5&quot;) cast as xs:float eq xs:float(&quot;3.4e5&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-449">
    <description> 'castable as' involving xs:float as source type and xs:float as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(&quot;3.4e5&quot;) castable as xs:float</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-450">
    <description> Casting from xs:float to xs:double is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(&quot;3.4e5&quot;) cast as xs:double ne xs:double(&quot;3.3e3&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-451">
    <description> 'castable as' involving xs:float as source type and xs:double as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(&quot;3.4e5&quot;) castable as xs:double</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-452">
    <description> Casting from xs:float to xs:duration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(&quot;3.4e5&quot;) cast as xs:duration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-453">
    <description> 'castable as' involving xs:float as source type and xs:duration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:float(&quot;3.4e5&quot;) castable as xs:duration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-454">
    <description> Casting from xs:float to xs:yearMonthDuration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(&quot;3.4e5&quot;) cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-455">
    <description> 'castable as' involving xs:float as source type and xs:yearMonthDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:float(&quot;3.4e5&quot;) castable as xs:yearMonthDuration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-456">
    <description> Casting from xs:float to xs:dayTimeDuration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(&quot;3.4e5&quot;) cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-457">
    <description> 'castable as' involving xs:float as source type and xs:dayTimeDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:float(&quot;3.4e5&quot;) castable as xs:dayTimeDuration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-458">
    <description> Casting from xs:float to xs:dateTime isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(&quot;3.4e5&quot;) cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-459">
    <description> 'castable as' involving xs:float as source type and xs:dateTime as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:float(&quot;3.4e5&quot;) castable as xs:dateTime)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-460">
    <description> Casting from xs:float to xs:time isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(&quot;3.4e5&quot;) cast as xs:time</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-461">
    <description> 'castable as' involving xs:float as source type and xs:time as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:float(&quot;3.4e5&quot;) castable as xs:time)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-462">
    <description> Casting from xs:float to xs:date isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(&quot;3.4e5&quot;) cast as xs:date</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-463">
    <description> 'castable as' involving xs:float as source type and xs:date as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:float(&quot;3.4e5&quot;) castable as xs:date)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-464">
    <description> Casting from xs:float to xs:gYearMonth isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(&quot;3.4e5&quot;) cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-465">
    <description> 'castable as' involving xs:float as source type and xs:gYearMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:float(&quot;3.4e5&quot;) castable as xs:gYearMonth)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-466">
    <description> Casting from xs:float to xs:gYear isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(&quot;3.4e5&quot;) cast as xs:gYear</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-467">
    <description> 'castable as' involving xs:float as source type and xs:gYear as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:float(&quot;3.4e5&quot;) castable as xs:gYear)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-468">
    <description> Casting from xs:float to xs:gMonthDay isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(&quot;3.4e5&quot;) cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-469">
    <description> 'castable as' involving xs:float as source type and xs:gMonthDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:float(&quot;3.4e5&quot;) castable as xs:gMonthDay)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-470">
    <description> Casting from xs:float to xs:gDay isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(&quot;3.4e5&quot;) cast as xs:gDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-471">
    <description> 'castable as' involving xs:float as source type and xs:gDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:float(&quot;3.4e5&quot;) castable as xs:gDay)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-472">
    <description> Casting from xs:float to xs:gMonth isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(&quot;3.4e5&quot;) cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-473">
    <description> 'castable as' involving xs:float as source type and xs:gMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:float(&quot;3.4e5&quot;) castable as xs:gMonth)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-474">
    <description> Casting from xs:float to xs:boolean is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(&quot;3.4e5&quot;) cast as xs:boolean eq xs:boolean(&quot;true&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-475">
    <description> 'castable as' involving xs:float as source type and xs:boolean as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(&quot;3.4e5&quot;) castable as xs:boolean</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-476">
    <description> Casting from xs:float to xs:base64Binary isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(&quot;3.4e5&quot;) cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-477">
    <description> 'castable as' involving xs:float as source type and xs:base64Binary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:float(&quot;3.4e5&quot;) castable as xs:base64Binary)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-478">
    <description> Casting from xs:float to xs:hexBinary isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(&quot;3.4e5&quot;) cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-479">
    <description> 'castable as' involving xs:float as source type and xs:hexBinary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:float(&quot;3.4e5&quot;) castable as xs:hexBinary)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-480">
    <description> Casting from xs:float to xs:anyURI isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(&quot;3.4e5&quot;) cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-481">
    <description> 'castable as' involving xs:float as source type and xs:anyURI as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:float(&quot;3.4e5&quot;) castable as xs:anyURI)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-482">
    <description> Casting from xs:float to xs:QName isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(&quot;3.4e5&quot;) cast as xs:QName</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-483">
    <description> 'castable as' involving xs:float as source type and xs:QName as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:float(&quot;3.4e5&quot;) castable as xs:QName)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-484">
    <description> 'castable as' involving xs:float as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:float(&quot;3.4e5&quot;) castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0080&quot;))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-485">
    <description> The xs:double constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-486">
    <description> The xs:double constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double( &quot;3.3e3&quot; , &quot;3.3e3&quot; )</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-487">
    <description> Verify with 'instance of' that the xs:double constructor function produces values of the correct type. 
      The subsequence() function makes it more difficult for optimizers to take short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence((&quot;dummy&quot;, 1.1, xs:double(&quot;3.3e3&quot;)), 3, 1) instance of xs:double</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-488">
    <description> A simple test exercising the whitespace facet for type xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(&quot; 3.3e3 &quot;) eq xs:double(&quot; 3.3e3 &quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-489">
    <description> An empty string is not a valid lexical representation of xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(&quot;&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-490">
    <description> Cast a simple xs:untypedAtomic value to &quot;3.3e3&quot; .</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(xs:untypedAtomic( &quot;3.3e3&quot; )) eq xs:double(&quot;3.3e3&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-491">
    <description> Applying fn:boolean() to a value of type xs:double that has the lexical value ' &quot;3.3e3&quot; ' should result in the boolean value true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:double(&quot;3.3e3&quot;))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-492">
    <description> Casting from xs:double to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(&quot;3.3e3&quot;) cast as xs:untypedAtomic ne xs:untypedAtomic(&quot;an arbitrary string(untypedAtomic source)&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-493">
    <description> 'castable as' involving xs:double as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(&quot;3.3e3&quot;) castable as xs:untypedAtomic</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-494">
    <description> Casting from xs:double to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(&quot;3.3e3&quot;) cast as xs:string ne xs:string(&quot;an arbitrary string&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-495">
    <description> 'castable as' involving xs:double as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(&quot;3.3e3&quot;) castable as xs:string</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-496">
    <description> Casting from xs:double to xs:float is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(&quot;3.3e3&quot;) cast as xs:float ne xs:float(&quot;3.4e5&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-497">
    <description> 'castable as' involving xs:double as source type and xs:float as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(&quot;3.3e3&quot;) castable as xs:float</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-498">
    <description> Casting from xs:double to xs:double is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(&quot;3.3e3&quot;) cast as xs:double eq xs:double(&quot;3.3e3&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-499">
    <description> 'castable as' involving xs:double as source type and xs:double as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(&quot;3.3e3&quot;) castable as xs:double</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-500">
    <description> Casting from xs:double to xs:duration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(&quot;3.3e3&quot;) cast as xs:duration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-501">
    <description> 'castable as' involving xs:double as source type and xs:duration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:double(&quot;3.3e3&quot;) castable as xs:duration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-502">
    <description> Casting from xs:double to xs:yearMonthDuration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(&quot;3.3e3&quot;) cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-503">
    <description> 'castable as' involving xs:double as source type and xs:yearMonthDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:double(&quot;3.3e3&quot;) castable as xs:yearMonthDuration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-504">
    <description> Casting from xs:double to xs:dayTimeDuration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(&quot;3.3e3&quot;) cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-505">
    <description> 'castable as' involving xs:double as source type and xs:dayTimeDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:double(&quot;3.3e3&quot;) castable as xs:dayTimeDuration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-506">
    <description> Casting from xs:double to xs:dateTime isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(&quot;3.3e3&quot;) cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-507">
    <description> 'castable as' involving xs:double as source type and xs:dateTime as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:double(&quot;3.3e3&quot;) castable as xs:dateTime)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-508">
    <description> Casting from xs:double to xs:time isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(&quot;3.3e3&quot;) cast as xs:time</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-509">
    <description> 'castable as' involving xs:double as source type and xs:time as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:double(&quot;3.3e3&quot;) castable as xs:time)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-510">
    <description> Casting from xs:double to xs:date isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(&quot;3.3e3&quot;) cast as xs:date</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-511">
    <description> 'castable as' involving xs:double as source type and xs:date as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:double(&quot;3.3e3&quot;) castable as xs:date)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-512">
    <description> Casting from xs:double to xs:gYearMonth isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(&quot;3.3e3&quot;) cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-513">
    <description> 'castable as' involving xs:double as source type and xs:gYearMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:double(&quot;3.3e3&quot;) castable as xs:gYearMonth)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-514">
    <description> Casting from xs:double to xs:gYear isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(&quot;3.3e3&quot;) cast as xs:gYear</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-515">
    <description> 'castable as' involving xs:double as source type and xs:gYear as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:double(&quot;3.3e3&quot;) castable as xs:gYear)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-516">
    <description> Casting from xs:double to xs:gMonthDay isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(&quot;3.3e3&quot;) cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-517">
    <description> 'castable as' involving xs:double as source type and xs:gMonthDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:double(&quot;3.3e3&quot;) castable as xs:gMonthDay)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-518">
    <description> Casting from xs:double to xs:gDay isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(&quot;3.3e3&quot;) cast as xs:gDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-519">
    <description> 'castable as' involving xs:double as source type and xs:gDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:double(&quot;3.3e3&quot;) castable as xs:gDay)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-520">
    <description> Casting from xs:double to xs:gMonth isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(&quot;3.3e3&quot;) cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-521">
    <description> 'castable as' involving xs:double as source type and xs:gMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:double(&quot;3.3e3&quot;) castable as xs:gMonth)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-522">
    <description> Casting from xs:double to xs:boolean is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(&quot;3.3e3&quot;) cast as xs:boolean eq xs:boolean(&quot;true&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-523">
    <description> 'castable as' involving xs:double as source type and xs:boolean as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(&quot;3.3e3&quot;) castable as xs:boolean</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-524">
    <description> Casting from xs:double to xs:base64Binary isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(&quot;3.3e3&quot;) cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-525">
    <description> 'castable as' involving xs:double as source type and xs:base64Binary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:double(&quot;3.3e3&quot;) castable as xs:base64Binary)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-526">
    <description> Casting from xs:double to xs:hexBinary isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(&quot;3.3e3&quot;) cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-527">
    <description> 'castable as' involving xs:double as source type and xs:hexBinary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:double(&quot;3.3e3&quot;) castable as xs:hexBinary)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-528">
    <description> Casting from xs:double to xs:anyURI isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(&quot;3.3e3&quot;) cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-529">
    <description> 'castable as' involving xs:double as source type and xs:anyURI as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:double(&quot;3.3e3&quot;) castable as xs:anyURI)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-530">
    <description> Casting from xs:double to xs:QName isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(&quot;3.3e3&quot;) cast as xs:QName</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-531">
    <description> 'castable as' involving xs:double as source type and xs:QName as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:double(&quot;3.3e3&quot;) castable as xs:QName)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-532">
    <description> 'castable as' involving xs:double as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:double(&quot;3.3e3&quot;) castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0080&quot;))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-533">
    <description> The xs:decimal constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-534">
    <description> The xs:decimal constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal( &quot;10.01&quot; , &quot;10.01&quot; )</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-535">
    <description> Verify with 'instance of' that the xs:decimal constructor function produces values of the correct type. 
      The subsequence() function makes it more difficult for optimizers to take short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence((&quot;dummy&quot;, 1.1, xs:decimal(&quot;10.01&quot;)), 3, 1) instance of xs:decimal</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-536">
    <description> A simple test exercising the whitespace facet for type xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(&quot; 10.01 &quot;) eq xs:decimal(&quot; 10.01 &quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-537">
    <description> An empty string is not a valid lexical representation of xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(&quot;&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-538">
    <description> Cast a simple xs:untypedAtomic value to &quot;10.01&quot; .</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(xs:untypedAtomic( &quot;10.01&quot; )) eq xs:decimal(&quot;10.01&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-539">
    <description> Applying fn:boolean() to a value of type xs:decimal that has the lexical value ' &quot;10.01&quot; ' should result in the boolean value true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:decimal(&quot;10.01&quot;))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-540">
    <description> Casting from xs:decimal to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(&quot;10.01&quot;) cast as xs:untypedAtomic ne xs:untypedAtomic(&quot;an arbitrary string(untypedAtomic source)&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-541">
    <description> 'castable as' involving xs:decimal as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(&quot;10.01&quot;) castable as xs:untypedAtomic</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-542">
    <description> Casting from xs:decimal to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(&quot;10.01&quot;) cast as xs:string ne xs:string(&quot;an arbitrary string&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-543">
    <description> 'castable as' involving xs:decimal as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(&quot;10.01&quot;) castable as xs:string</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-544">
    <description> Casting from xs:decimal to xs:float is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(&quot;10.01&quot;) cast as xs:float ne xs:float(&quot;3.4e5&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-545">
    <description> 'castable as' involving xs:decimal as source type and xs:float as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(&quot;10.01&quot;) castable as xs:float</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-546">
    <description> Casting from xs:decimal to xs:double is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(&quot;10.01&quot;) cast as xs:double ne xs:double(&quot;3.3e3&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-547">
    <description> 'castable as' involving xs:decimal as source type and xs:double as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(&quot;10.01&quot;) castable as xs:double</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-548">
    <description> Casting from xs:decimal to xs:decimal is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(&quot;10.01&quot;) cast as xs:decimal eq xs:decimal(&quot;10.01&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-549">
    <description> 'castable as' involving xs:decimal as source type and xs:decimal as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(&quot;10.01&quot;) castable as xs:decimal</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-550">
    <description> Casting from xs:decimal to xs:integer is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(&quot;10.01&quot;) cast as xs:integer ne xs:integer(&quot;6789&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-551">
    <description> 'castable as' involving xs:decimal as source type and xs:integer as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(&quot;10.01&quot;) castable as xs:integer</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-552">
    <description> Casting from xs:decimal to xs:duration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(&quot;10.01&quot;) cast as xs:duration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-553">
    <description> 'castable as' involving xs:decimal as source type and xs:duration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:decimal(&quot;10.01&quot;) castable as xs:duration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-554">
    <description> Casting from xs:decimal to xs:yearMonthDuration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(&quot;10.01&quot;) cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-555">
    <description> 'castable as' involving xs:decimal as source type and xs:yearMonthDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:decimal(&quot;10.01&quot;) castable as xs:yearMonthDuration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-556">
    <description> Casting from xs:decimal to xs:dayTimeDuration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(&quot;10.01&quot;) cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-557">
    <description> 'castable as' involving xs:decimal as source type and xs:dayTimeDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:decimal(&quot;10.01&quot;) castable as xs:dayTimeDuration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-558">
    <description> Casting from xs:decimal to xs:dateTime isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(&quot;10.01&quot;) cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-559">
    <description> 'castable as' involving xs:decimal as source type and xs:dateTime as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:decimal(&quot;10.01&quot;) castable as xs:dateTime)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-560">
    <description> Casting from xs:decimal to xs:time isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(&quot;10.01&quot;) cast as xs:time</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-561">
    <description> 'castable as' involving xs:decimal as source type and xs:time as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:decimal(&quot;10.01&quot;) castable as xs:time)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-562">
    <description> Casting from xs:decimal to xs:date isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(&quot;10.01&quot;) cast as xs:date</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-563">
    <description> 'castable as' involving xs:decimal as source type and xs:date as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:decimal(&quot;10.01&quot;) castable as xs:date)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-564">
    <description> Casting from xs:decimal to xs:gYearMonth isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(&quot;10.01&quot;) cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-565">
    <description> 'castable as' involving xs:decimal as source type and xs:gYearMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:decimal(&quot;10.01&quot;) castable as xs:gYearMonth)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-566">
    <description> Casting from xs:decimal to xs:gYear isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(&quot;10.01&quot;) cast as xs:gYear</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-567">
    <description> 'castable as' involving xs:decimal as source type and xs:gYear as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:decimal(&quot;10.01&quot;) castable as xs:gYear)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-568">
    <description> Casting from xs:decimal to xs:gMonthDay isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(&quot;10.01&quot;) cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-569">
    <description> 'castable as' involving xs:decimal as source type and xs:gMonthDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:decimal(&quot;10.01&quot;) castable as xs:gMonthDay)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-570">
    <description> Casting from xs:decimal to xs:gDay isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(&quot;10.01&quot;) cast as xs:gDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-571">
    <description> 'castable as' involving xs:decimal as source type and xs:gDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:decimal(&quot;10.01&quot;) castable as xs:gDay)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-572">
    <description> Casting from xs:decimal to xs:gMonth isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(&quot;10.01&quot;) cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-573">
    <description> 'castable as' involving xs:decimal as source type and xs:gMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:decimal(&quot;10.01&quot;) castable as xs:gMonth)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-574">
    <description> Casting from xs:decimal to xs:boolean is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(&quot;10.01&quot;) cast as xs:boolean eq xs:boolean(&quot;true&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-575">
    <description> 'castable as' involving xs:decimal as source type and xs:boolean as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(&quot;10.01&quot;) castable as xs:boolean</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-576">
    <description> Casting from xs:decimal to xs:base64Binary isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(&quot;10.01&quot;) cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-577">
    <description> 'castable as' involving xs:decimal as source type and xs:base64Binary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:decimal(&quot;10.01&quot;) castable as xs:base64Binary)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-578">
    <description> Casting from xs:decimal to xs:hexBinary isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(&quot;10.01&quot;) cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-579">
    <description> 'castable as' involving xs:decimal as source type and xs:hexBinary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:decimal(&quot;10.01&quot;) castable as xs:hexBinary)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-580">
    <description> Casting from xs:decimal to xs:anyURI isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(&quot;10.01&quot;) cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-581">
    <description> 'castable as' involving xs:decimal as source type and xs:anyURI as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:decimal(&quot;10.01&quot;) castable as xs:anyURI)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-582">
    <description> Casting from xs:decimal to xs:QName isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(&quot;10.01&quot;) cast as xs:QName</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-583">
    <description> 'castable as' involving xs:decimal as source type and xs:QName as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:decimal(&quot;10.01&quot;) castable as xs:QName)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-584">
    <description> 'castable as' involving xs:decimal as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:decimal(&quot;10.01&quot;) castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0080&quot;))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-585">
    <description> The xs:integer constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-586">
    <description> The xs:integer constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer( &quot;6789&quot; , &quot;6789&quot; )</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-587">
    <description> Verify with 'instance of' that the xs:integer constructor function produces values of the correct type. 
      The subsequence() function makes it more difficult for optimizers to take short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence((&quot;dummy&quot;, 1.1, xs:integer(&quot;6789&quot;)), 3, 1) instance of xs:integer</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-588">
    <description> A simple test exercising the whitespace facet for type xs:integer.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(&quot; 6789 &quot;) eq xs:integer(&quot; 6789 &quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-589">
    <description> An empty string is not a valid lexical representation of xs:integer.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(&quot;&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-590">
    <description> Cast a simple xs:untypedAtomic value to &quot;6789&quot; .</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(xs:untypedAtomic( &quot;6789&quot; )) eq xs:integer(&quot;6789&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-591">
    <description> Applying fn:boolean() to a value of type xs:integer that has the lexical value ' &quot;6789&quot; ' should result in the boolean value true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:integer(&quot;6789&quot;))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-592">
    <description> Casting from xs:integer to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(&quot;6789&quot;) cast as xs:untypedAtomic ne xs:untypedAtomic(&quot;an arbitrary string(untypedAtomic source)&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-593">
    <description> 'castable as' involving xs:integer as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(&quot;6789&quot;) castable as xs:untypedAtomic</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-594">
    <description> Casting from xs:integer to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(&quot;6789&quot;) cast as xs:string ne xs:string(&quot;an arbitrary string&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-595">
    <description> 'castable as' involving xs:integer as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(&quot;6789&quot;) castable as xs:string</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-596">
    <description> Casting from xs:integer to xs:float is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(&quot;6789&quot;) cast as xs:float ne xs:float(&quot;3.4e5&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-597">
    <description> 'castable as' involving xs:integer as source type and xs:float as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(&quot;6789&quot;) castable as xs:float</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-598">
    <description> Casting from xs:integer to xs:double is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(&quot;6789&quot;) cast as xs:double ne xs:double(&quot;3.3e3&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-599">
    <description> 'castable as' involving xs:integer as source type and xs:double as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(&quot;6789&quot;) castable as xs:double</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-600">
    <description> Casting from xs:integer to xs:decimal is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(&quot;6789&quot;) cast as xs:decimal ne xs:decimal(&quot;10.01&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-601">
    <description> 'castable as' involving xs:integer as source type and xs:decimal as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(&quot;6789&quot;) castable as xs:decimal</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-602">
    <description> Casting from xs:integer to xs:integer is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(&quot;6789&quot;) cast as xs:integer eq xs:integer(&quot;6789&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-603">
    <description> 'castable as' involving xs:integer as source type and xs:integer as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(&quot;6789&quot;) castable as xs:integer</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-604">
    <description> Casting from xs:integer to xs:duration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(&quot;6789&quot;) cast as xs:duration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-605">
    <description> 'castable as' involving xs:integer as source type and xs:duration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:integer(&quot;6789&quot;) castable as xs:duration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-606">
    <description> Casting from xs:integer to xs:yearMonthDuration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(&quot;6789&quot;) cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-607">
    <description> 'castable as' involving xs:integer as source type and xs:yearMonthDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:integer(&quot;6789&quot;) castable as xs:yearMonthDuration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-608">
    <description> Casting from xs:integer to xs:dayTimeDuration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(&quot;6789&quot;) cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-609">
    <description> 'castable as' involving xs:integer as source type and xs:dayTimeDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:integer(&quot;6789&quot;) castable as xs:dayTimeDuration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-610">
    <description> Casting from xs:integer to xs:dateTime isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(&quot;6789&quot;) cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-611">
    <description> 'castable as' involving xs:integer as source type and xs:dateTime as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:integer(&quot;6789&quot;) castable as xs:dateTime)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-612">
    <description> Casting from xs:integer to xs:time isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(&quot;6789&quot;) cast as xs:time</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-613">
    <description> 'castable as' involving xs:integer as source type and xs:time as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:integer(&quot;6789&quot;) castable as xs:time)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-614">
    <description> Casting from xs:integer to xs:date isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(&quot;6789&quot;) cast as xs:date</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-615">
    <description> 'castable as' involving xs:integer as source type and xs:date as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:integer(&quot;6789&quot;) castable as xs:date)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-616">
    <description> Casting from xs:integer to xs:gYearMonth isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(&quot;6789&quot;) cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-617">
    <description> 'castable as' involving xs:integer as source type and xs:gYearMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:integer(&quot;6789&quot;) castable as xs:gYearMonth)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-618">
    <description> Casting from xs:integer to xs:gYear isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(&quot;6789&quot;) cast as xs:gYear</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-619">
    <description> 'castable as' involving xs:integer as source type and xs:gYear as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:integer(&quot;6789&quot;) castable as xs:gYear)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-620">
    <description> Casting from xs:integer to xs:gMonthDay isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(&quot;6789&quot;) cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-621">
    <description> 'castable as' involving xs:integer as source type and xs:gMonthDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:integer(&quot;6789&quot;) castable as xs:gMonthDay)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-622">
    <description> Casting from xs:integer to xs:gDay isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(&quot;6789&quot;) cast as xs:gDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-623">
    <description> 'castable as' involving xs:integer as source type and xs:gDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:integer(&quot;6789&quot;) castable as xs:gDay)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-624">
    <description> Casting from xs:integer to xs:gMonth isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(&quot;6789&quot;) cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-625">
    <description> 'castable as' involving xs:integer as source type and xs:gMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:integer(&quot;6789&quot;) castable as xs:gMonth)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-626">
    <description> Casting from xs:integer to xs:boolean is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(&quot;6789&quot;) cast as xs:boolean eq xs:boolean(&quot;true&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-627">
    <description> 'castable as' involving xs:integer as source type and xs:boolean as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(&quot;6789&quot;) castable as xs:boolean</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-628">
    <description> Casting from xs:integer to xs:base64Binary isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(&quot;6789&quot;) cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-629">
    <description> 'castable as' involving xs:integer as source type and xs:base64Binary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:integer(&quot;6789&quot;) castable as xs:base64Binary)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-630">
    <description> Casting from xs:integer to xs:hexBinary isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(&quot;6789&quot;) cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-631">
    <description> 'castable as' involving xs:integer as source type and xs:hexBinary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:integer(&quot;6789&quot;) castable as xs:hexBinary)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-632">
    <description> Casting from xs:integer to xs:anyURI isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(&quot;6789&quot;) cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-633">
    <description> 'castable as' involving xs:integer as source type and xs:anyURI as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:integer(&quot;6789&quot;) castable as xs:anyURI)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-634">
    <description> Casting from xs:integer to xs:QName isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(&quot;6789&quot;) cast as xs:QName</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-635">
    <description> 'castable as' involving xs:integer as source type and xs:QName as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:integer(&quot;6789&quot;) castable as xs:QName)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-636">
    <description> 'castable as' involving xs:integer as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:integer(&quot;6789&quot;) castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0080&quot;))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-637">
    <description> The xs:duration constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-638">
    <description> The xs:duration constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration( &quot;P1Y2M3DT10H30M&quot; , &quot;P1Y2M3DT10H30M&quot; )</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-639">
    <description> Verify with 'instance of' that the xs:duration constructor function produces values of the correct type. 
      The subsequence() function makes it more difficult for optimizers to take short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence((&quot;dummy&quot;, 1.1, xs:duration(&quot;P1Y2M3DT10H30M&quot;)), 3, 1) instance of xs:duration</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-640">
    <description> A simple test exercising the whitespace facet for type xs:duration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration(&quot; P1Y2M3DT10H30M &quot;) eq xs:duration(&quot; P1Y2M3DT10H30M &quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-641">
    <description> An empty string is not a valid lexical representation of xs:duration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration(&quot;&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-642">
    <description> Cast a simple xs:untypedAtomic value to &quot;P1Y2M3DT10H30M&quot; .</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration(xs:untypedAtomic( &quot;P1Y2M3DT10H30M&quot; )) eq xs:duration(&quot;P1Y2M3DT10H30M&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-643">
    <description> It is not possible to extract an Effective Boolean Value from the type xs:duration, with the boolean() function.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:duration(&quot;P1Y2M3DT10H30M&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0006&quot;))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-644">
    <description> Casting from xs:duration to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M&quot;) cast as xs:untypedAtomic ne xs:untypedAtomic(&quot;an arbitrary string(untypedAtomic source)&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-645">
    <description> 'castable as' involving xs:duration as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M&quot;) castable as xs:untypedAtomic</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-646">
    <description> Casting from xs:duration to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M&quot;) cast as xs:string ne xs:string(&quot;an arbitrary string&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-647">
    <description> 'castable as' involving xs:duration as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M&quot;) castable as xs:string</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-648">
    <description> Casting from xs:duration to xs:float isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M&quot;) cast as xs:float</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-649">
    <description> 'castable as' involving xs:duration as source type and xs:float as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:duration(&quot;P1Y2M3DT10H30M&quot;) castable as xs:float)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-650">
    <description> Casting from xs:duration to xs:double isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M&quot;) cast as xs:double</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-651">
    <description> 'castable as' involving xs:duration as source type and xs:double as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:duration(&quot;P1Y2M3DT10H30M&quot;) castable as xs:double)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-652">
    <description> Casting from xs:duration to xs:decimal isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M&quot;) cast as xs:decimal</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-653">
    <description> 'castable as' involving xs:duration as source type and xs:decimal as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:duration(&quot;P1Y2M3DT10H30M&quot;) castable as xs:decimal)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-654">
    <description> Casting from xs:duration to xs:integer isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M&quot;) cast as xs:integer</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-655">
    <description> 'castable as' involving xs:duration as source type and xs:integer as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:duration(&quot;P1Y2M3DT10H30M&quot;) castable as xs:integer)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-656">
    <description> Casting from xs:duration to xs:duration is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M&quot;) cast as xs:duration eq xs:duration(&quot;P1Y2M3DT10H30M&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-657">
    <description> 'castable as' involving xs:duration as source type and xs:duration as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M&quot;) castable as xs:duration</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-658">
    <description> Casting from xs:duration to xs:yearMonthDuration is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M&quot;) cast as xs:yearMonthDuration ne xs:yearMonthDuration(&quot;P1Y12M&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-659">
    <description> 'castable as' involving xs:duration as source type and xs:yearMonthDuration as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M&quot;) castable as xs:yearMonthDuration</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-660">
    <description> Casting from xs:duration to xs:dayTimeDuration is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M&quot;) cast as xs:dayTimeDuration ne xs:dayTimeDuration(&quot;P3DT2H&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-661">
    <description> 'castable as' involving xs:duration as source type and xs:dayTimeDuration as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M&quot;) castable as xs:dayTimeDuration</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-662">
    <description> Casting from xs:duration to xs:dateTime isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M&quot;) cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-663">
    <description> 'castable as' involving xs:duration as source type and xs:dateTime as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:duration(&quot;P1Y2M3DT10H30M&quot;) castable as xs:dateTime)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-664">
    <description> Casting from xs:duration to xs:time isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M&quot;) cast as xs:time</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-665">
    <description> 'castable as' involving xs:duration as source type and xs:time as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:duration(&quot;P1Y2M3DT10H30M&quot;) castable as xs:time)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-666">
    <description> Casting from xs:duration to xs:date isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M&quot;) cast as xs:date</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-667">
    <description> 'castable as' involving xs:duration as source type and xs:date as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:duration(&quot;P1Y2M3DT10H30M&quot;) castable as xs:date)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-668">
    <description> Casting from xs:duration to xs:gYearMonth isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M&quot;) cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-669">
    <description> 'castable as' involving xs:duration as source type and xs:gYearMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:duration(&quot;P1Y2M3DT10H30M&quot;) castable as xs:gYearMonth)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-670">
    <description> Casting from xs:duration to xs:gYear isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M&quot;) cast as xs:gYear</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-671">
    <description> 'castable as' involving xs:duration as source type and xs:gYear as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:duration(&quot;P1Y2M3DT10H30M&quot;) castable as xs:gYear)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-672">
    <description> Casting from xs:duration to xs:gMonthDay isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M&quot;) cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-673">
    <description> 'castable as' involving xs:duration as source type and xs:gMonthDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:duration(&quot;P1Y2M3DT10H30M&quot;) castable as xs:gMonthDay)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-674">
    <description> Casting from xs:duration to xs:gDay isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M&quot;) cast as xs:gDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-675">
    <description> 'castable as' involving xs:duration as source type and xs:gDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:duration(&quot;P1Y2M3DT10H30M&quot;) castable as xs:gDay)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-676">
    <description> Casting from xs:duration to xs:gMonth isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M&quot;) cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-677">
    <description> 'castable as' involving xs:duration as source type and xs:gMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:duration(&quot;P1Y2M3DT10H30M&quot;) castable as xs:gMonth)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-678">
    <description> Casting from xs:duration to xs:boolean isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M&quot;) cast as xs:boolean</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-679">
    <description> 'castable as' involving xs:duration as source type and xs:boolean as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:duration(&quot;P1Y2M3DT10H30M&quot;) castable as xs:boolean)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-680">
    <description> Casting from xs:duration to xs:base64Binary isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M&quot;) cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-681">
    <description> 'castable as' involving xs:duration as source type and xs:base64Binary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:duration(&quot;P1Y2M3DT10H30M&quot;) castable as xs:base64Binary)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-682">
    <description> Casting from xs:duration to xs:hexBinary isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M&quot;) cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-683">
    <description> 'castable as' involving xs:duration as source type and xs:hexBinary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:duration(&quot;P1Y2M3DT10H30M&quot;) castable as xs:hexBinary)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-684">
    <description> Casting from xs:duration to xs:anyURI isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M&quot;) cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-685">
    <description> 'castable as' involving xs:duration as source type and xs:anyURI as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:duration(&quot;P1Y2M3DT10H30M&quot;) castable as xs:anyURI)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-686">
    <description> Casting from xs:duration to xs:QName isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration(&quot;P1Y2M3DT10H30M&quot;) cast as xs:QName</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-687">
    <description> 'castable as' involving xs:duration as source type and xs:QName as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:duration(&quot;P1Y2M3DT10H30M&quot;) castable as xs:QName)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-688">
    <description> 'castable as' involving xs:duration as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:duration(&quot;P1Y2M3DT10H30M&quot;) castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0080&quot;))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-689">
    <description> The xs:yearMonthDuration constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-690">
    <description> The xs:yearMonthDuration constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration( &quot;P1Y12M&quot; , &quot;P1Y12M&quot; )</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-691">
    <description> Verify with 'instance of' that the xs:yearMonthDuration constructor function produces values of the correct type. 
      The subsequence() function makes it more difficult for optimizers to take short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence((&quot;dummy&quot;, 1.1, xs:yearMonthDuration(&quot;P1Y12M&quot;)), 3, 1) instance of xs:yearMonthDuration</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-692">
    <description> A simple test exercising the whitespace facet for type xs:yearMonthDuration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration(&quot; P1Y12M &quot;) eq xs:yearMonthDuration(&quot; P1Y12M &quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-693">
    <description> An empty string is not a valid lexical representation of xs:yearMonthDuration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration(&quot;&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-694">
    <description> Cast a simple xs:untypedAtomic value to &quot;P1Y12M&quot; .</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration(xs:untypedAtomic( &quot;P1Y12M&quot; )) eq xs:yearMonthDuration(&quot;P1Y12M&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-695">
    <description> It is not possible to extract an Effective Boolean Value from the type xs:yearMonthDuration, with the boolean() function.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:yearMonthDuration(&quot;P1Y12M&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0006&quot;))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-696">
    <description> Casting from xs:yearMonthDuration to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration(&quot;P1Y12M&quot;) cast as xs:untypedAtomic ne xs:untypedAtomic(&quot;an arbitrary string(untypedAtomic source)&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-697">
    <description> 'castable as' involving xs:yearMonthDuration as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration(&quot;P1Y12M&quot;) castable as xs:untypedAtomic</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-698">
    <description> Casting from xs:yearMonthDuration to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration(&quot;P1Y12M&quot;) cast as xs:string ne xs:string(&quot;an arbitrary string&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-699">
    <description> 'castable as' involving xs:yearMonthDuration as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration(&quot;P1Y12M&quot;) castable as xs:string</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-700">
    <description> Casting from xs:yearMonthDuration to xs:float isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration(&quot;P1Y12M&quot;) cast as xs:float</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-701">
    <description> 'castable as' involving xs:yearMonthDuration as source type and xs:float as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:yearMonthDuration(&quot;P1Y12M&quot;) castable as xs:float)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-702">
    <description> Casting from xs:yearMonthDuration to xs:double isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration(&quot;P1Y12M&quot;) cast as xs:double</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-703">
    <description> 'castable as' involving xs:yearMonthDuration as source type and xs:double as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:yearMonthDuration(&quot;P1Y12M&quot;) castable as xs:double)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-704">
    <description> Casting from xs:yearMonthDuration to xs:decimal isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration(&quot;P1Y12M&quot;) cast as xs:decimal</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-705">
    <description> 'castable as' involving xs:yearMonthDuration as source type and xs:decimal as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:yearMonthDuration(&quot;P1Y12M&quot;) castable as xs:decimal)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-706">
    <description> Casting from xs:yearMonthDuration to xs:integer isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration(&quot;P1Y12M&quot;) cast as xs:integer</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-707">
    <description> 'castable as' involving xs:yearMonthDuration as source type and xs:integer as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:yearMonthDuration(&quot;P1Y12M&quot;) castable as xs:integer)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-708">
    <description> Casting from xs:yearMonthDuration to xs:duration is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration(&quot;P1Y12M&quot;) cast as xs:duration ne xs:duration(&quot;P1Y2M3DT10H30M&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-709">
    <description> 'castable as' involving xs:yearMonthDuration as source type and xs:duration as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration(&quot;P1Y12M&quot;) castable as xs:duration</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-710">
    <description> Casting from xs:yearMonthDuration to xs:yearMonthDuration is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration(&quot;P1Y12M&quot;) cast as xs:yearMonthDuration eq xs:yearMonthDuration(&quot;P1Y12M&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-711">
    <description> 'castable as' involving xs:yearMonthDuration as source type and xs:yearMonthDuration as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration(&quot;P1Y12M&quot;) castable as xs:yearMonthDuration</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-712">
    <description> Casting from xs:yearMonthDuration to xs:dayTimeDuration is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration(&quot;P1Y12M&quot;) cast as xs:dayTimeDuration ne xs:dayTimeDuration(&quot;P3DT2H&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-713">
    <description> 'castable as' involving xs:yearMonthDuration as source type and xs:dayTimeDuration as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration(&quot;P1Y12M&quot;) castable as xs:dayTimeDuration</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-714">
    <description> Casting from xs:yearMonthDuration to xs:dateTime isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration(&quot;P1Y12M&quot;) cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-715">
    <description> 'castable as' involving xs:yearMonthDuration as source type and xs:dateTime as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:yearMonthDuration(&quot;P1Y12M&quot;) castable as xs:dateTime)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-716">
    <description> Casting from xs:yearMonthDuration to xs:time isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration(&quot;P1Y12M&quot;) cast as xs:time</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-717">
    <description> 'castable as' involving xs:yearMonthDuration as source type and xs:time as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:yearMonthDuration(&quot;P1Y12M&quot;) castable as xs:time)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-718">
    <description> Casting from xs:yearMonthDuration to xs:date isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration(&quot;P1Y12M&quot;) cast as xs:date</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-719">
    <description> 'castable as' involving xs:yearMonthDuration as source type and xs:date as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:yearMonthDuration(&quot;P1Y12M&quot;) castable as xs:date)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-720">
    <description> Casting from xs:yearMonthDuration to xs:gYearMonth isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration(&quot;P1Y12M&quot;) cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-721">
    <description> 'castable as' involving xs:yearMonthDuration as source type and xs:gYearMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:yearMonthDuration(&quot;P1Y12M&quot;) castable as xs:gYearMonth)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-722">
    <description> Casting from xs:yearMonthDuration to xs:gYear isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration(&quot;P1Y12M&quot;) cast as xs:gYear</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-723">
    <description> 'castable as' involving xs:yearMonthDuration as source type and xs:gYear as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:yearMonthDuration(&quot;P1Y12M&quot;) castable as xs:gYear)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-724">
    <description> Casting from xs:yearMonthDuration to xs:gMonthDay isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration(&quot;P1Y12M&quot;) cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-725">
    <description> 'castable as' involving xs:yearMonthDuration as source type and xs:gMonthDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:yearMonthDuration(&quot;P1Y12M&quot;) castable as xs:gMonthDay)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-726">
    <description> Casting from xs:yearMonthDuration to xs:gDay isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration(&quot;P1Y12M&quot;) cast as xs:gDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-727">
    <description> 'castable as' involving xs:yearMonthDuration as source type and xs:gDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:yearMonthDuration(&quot;P1Y12M&quot;) castable as xs:gDay)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-728">
    <description> Casting from xs:yearMonthDuration to xs:gMonth isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration(&quot;P1Y12M&quot;) cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-729">
    <description> 'castable as' involving xs:yearMonthDuration as source type and xs:gMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:yearMonthDuration(&quot;P1Y12M&quot;) castable as xs:gMonth)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-730">
    <description> Casting from xs:yearMonthDuration to xs:boolean isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration(&quot;P1Y12M&quot;) cast as xs:boolean</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-731">
    <description> 'castable as' involving xs:yearMonthDuration as source type and xs:boolean as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:yearMonthDuration(&quot;P1Y12M&quot;) castable as xs:boolean)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-732">
    <description> Casting from xs:yearMonthDuration to xs:base64Binary isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration(&quot;P1Y12M&quot;) cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-733">
    <description> 'castable as' involving xs:yearMonthDuration as source type and xs:base64Binary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:yearMonthDuration(&quot;P1Y12M&quot;) castable as xs:base64Binary)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-734">
    <description> Casting from xs:yearMonthDuration to xs:hexBinary isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration(&quot;P1Y12M&quot;) cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-735">
    <description> 'castable as' involving xs:yearMonthDuration as source type and xs:hexBinary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:yearMonthDuration(&quot;P1Y12M&quot;) castable as xs:hexBinary)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-736">
    <description> Casting from xs:yearMonthDuration to xs:anyURI isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration(&quot;P1Y12M&quot;) cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-737">
    <description> 'castable as' involving xs:yearMonthDuration as source type and xs:anyURI as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:yearMonthDuration(&quot;P1Y12M&quot;) castable as xs:anyURI)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-738">
    <description> Casting from xs:yearMonthDuration to xs:QName isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration(&quot;P1Y12M&quot;) cast as xs:QName</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-739">
    <description> 'castable as' involving xs:yearMonthDuration as source type and xs:QName as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:yearMonthDuration(&quot;P1Y12M&quot;) castable as xs:QName)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-740">
    <description> 'castable as' involving xs:yearMonthDuration as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:yearMonthDuration(&quot;P1Y12M&quot;) castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0080&quot;))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-741">
    <description> The xs:dayTimeDuration constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-742">
    <description> The xs:dayTimeDuration constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration( &quot;P3DT2H&quot; , &quot;P3DT2H&quot; )</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-743">
    <description> Verify with 'instance of' that the xs:dayTimeDuration constructor function produces values of the correct type. 
      The subsequence() function makes it more difficult for optimizers to take short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence((&quot;dummy&quot;, 1.1, xs:dayTimeDuration(&quot;P3DT2H&quot;)), 3, 1) instance of xs:dayTimeDuration</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-744">
    <description> A simple test exercising the whitespace facet for type xs:dayTimeDuration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration(&quot; P3DT2H &quot;) eq xs:dayTimeDuration(&quot; P3DT2H &quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-745">
    <description> An empty string is not a valid lexical representation of xs:dayTimeDuration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration(&quot;&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-746">
    <description> Cast a simple xs:untypedAtomic value to &quot;P3DT2H&quot; .</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration(xs:untypedAtomic( &quot;P3DT2H&quot; )) eq xs:dayTimeDuration(&quot;P3DT2H&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-747">
    <description> It is not possible to extract an Effective Boolean Value from the type xs:dayTimeDuration, with the boolean() function.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:dayTimeDuration(&quot;P3DT2H&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0006&quot;))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-748">
    <description> Casting from xs:dayTimeDuration to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration(&quot;P3DT2H&quot;) cast as xs:untypedAtomic ne xs:untypedAtomic(&quot;an arbitrary string(untypedAtomic source)&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-749">
    <description> 'castable as' involving xs:dayTimeDuration as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration(&quot;P3DT2H&quot;) castable as xs:untypedAtomic</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-750">
    <description> Casting from xs:dayTimeDuration to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration(&quot;P3DT2H&quot;) cast as xs:string ne xs:string(&quot;an arbitrary string&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-751">
    <description> 'castable as' involving xs:dayTimeDuration as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration(&quot;P3DT2H&quot;) castable as xs:string</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-752">
    <description> Casting from xs:dayTimeDuration to xs:float isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration(&quot;P3DT2H&quot;) cast as xs:float</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-753">
    <description> 'castable as' involving xs:dayTimeDuration as source type and xs:float as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dayTimeDuration(&quot;P3DT2H&quot;) castable as xs:float)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-754">
    <description> Casting from xs:dayTimeDuration to xs:double isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration(&quot;P3DT2H&quot;) cast as xs:double</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-755">
    <description> 'castable as' involving xs:dayTimeDuration as source type and xs:double as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dayTimeDuration(&quot;P3DT2H&quot;) castable as xs:double)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-756">
    <description> Casting from xs:dayTimeDuration to xs:decimal isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration(&quot;P3DT2H&quot;) cast as xs:decimal</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-757">
    <description> 'castable as' involving xs:dayTimeDuration as source type and xs:decimal as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dayTimeDuration(&quot;P3DT2H&quot;) castable as xs:decimal)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-758">
    <description> Casting from xs:dayTimeDuration to xs:integer isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration(&quot;P3DT2H&quot;) cast as xs:integer</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-759">
    <description> 'castable as' involving xs:dayTimeDuration as source type and xs:integer as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dayTimeDuration(&quot;P3DT2H&quot;) castable as xs:integer)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-760">
    <description> Casting from xs:dayTimeDuration to xs:duration is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration(&quot;P3DT2H&quot;) cast as xs:duration ne xs:duration(&quot;P1Y2M3DT10H30M&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-761">
    <description> 'castable as' involving xs:dayTimeDuration as source type and xs:duration as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration(&quot;P3DT2H&quot;) castable as xs:duration</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-762">
    <description> Casting from xs:dayTimeDuration to xs:yearMonthDuration is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration(&quot;P3DT2H&quot;) cast as xs:yearMonthDuration ne xs:yearMonthDuration(&quot;P1Y12M&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-763">
    <description> 'castable as' involving xs:dayTimeDuration as source type and xs:yearMonthDuration as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration(&quot;P3DT2H&quot;) castable as xs:yearMonthDuration</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-764">
    <description> Casting from xs:dayTimeDuration to xs:dayTimeDuration is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration(&quot;P3DT2H&quot;) cast as xs:dayTimeDuration eq xs:dayTimeDuration(&quot;P3DT2H&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-765">
    <description> 'castable as' involving xs:dayTimeDuration as source type and xs:dayTimeDuration as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration(&quot;P3DT2H&quot;) castable as xs:dayTimeDuration</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-766">
    <description> Casting from xs:dayTimeDuration to xs:dateTime isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration(&quot;P3DT2H&quot;) cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-767">
    <description> 'castable as' involving xs:dayTimeDuration as source type and xs:dateTime as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dayTimeDuration(&quot;P3DT2H&quot;) castable as xs:dateTime)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-768">
    <description> Casting from xs:dayTimeDuration to xs:time isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration(&quot;P3DT2H&quot;) cast as xs:time</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-769">
    <description> 'castable as' involving xs:dayTimeDuration as source type and xs:time as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dayTimeDuration(&quot;P3DT2H&quot;) castable as xs:time)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-770">
    <description> Casting from xs:dayTimeDuration to xs:date isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration(&quot;P3DT2H&quot;) cast as xs:date</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-771">
    <description> 'castable as' involving xs:dayTimeDuration as source type and xs:date as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dayTimeDuration(&quot;P3DT2H&quot;) castable as xs:date)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-772">
    <description> Casting from xs:dayTimeDuration to xs:gYearMonth isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration(&quot;P3DT2H&quot;) cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-773">
    <description> 'castable as' involving xs:dayTimeDuration as source type and xs:gYearMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dayTimeDuration(&quot;P3DT2H&quot;) castable as xs:gYearMonth)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-774">
    <description> Casting from xs:dayTimeDuration to xs:gYear isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration(&quot;P3DT2H&quot;) cast as xs:gYear</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-775">
    <description> 'castable as' involving xs:dayTimeDuration as source type and xs:gYear as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dayTimeDuration(&quot;P3DT2H&quot;) castable as xs:gYear)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-776">
    <description> Casting from xs:dayTimeDuration to xs:gMonthDay isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration(&quot;P3DT2H&quot;) cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-777">
    <description> 'castable as' involving xs:dayTimeDuration as source type and xs:gMonthDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dayTimeDuration(&quot;P3DT2H&quot;) castable as xs:gMonthDay)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-778">
    <description> Casting from xs:dayTimeDuration to xs:gDay isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration(&quot;P3DT2H&quot;) cast as xs:gDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-779">
    <description> 'castable as' involving xs:dayTimeDuration as source type and xs:gDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dayTimeDuration(&quot;P3DT2H&quot;) castable as xs:gDay)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-780">
    <description> Casting from xs:dayTimeDuration to xs:gMonth isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration(&quot;P3DT2H&quot;) cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-781">
    <description> 'castable as' involving xs:dayTimeDuration as source type and xs:gMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dayTimeDuration(&quot;P3DT2H&quot;) castable as xs:gMonth)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-782">
    <description> Casting from xs:dayTimeDuration to xs:boolean isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration(&quot;P3DT2H&quot;) cast as xs:boolean</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-783">
    <description> 'castable as' involving xs:dayTimeDuration as source type and xs:boolean as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dayTimeDuration(&quot;P3DT2H&quot;) castable as xs:boolean)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-784">
    <description> Casting from xs:dayTimeDuration to xs:base64Binary isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration(&quot;P3DT2H&quot;) cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-785">
    <description> 'castable as' involving xs:dayTimeDuration as source type and xs:base64Binary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dayTimeDuration(&quot;P3DT2H&quot;) castable as xs:base64Binary)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-786">
    <description> Casting from xs:dayTimeDuration to xs:hexBinary isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration(&quot;P3DT2H&quot;) cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-787">
    <description> 'castable as' involving xs:dayTimeDuration as source type and xs:hexBinary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dayTimeDuration(&quot;P3DT2H&quot;) castable as xs:hexBinary)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-788">
    <description> Casting from xs:dayTimeDuration to xs:anyURI isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration(&quot;P3DT2H&quot;) cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-789">
    <description> 'castable as' involving xs:dayTimeDuration as source type and xs:anyURI as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dayTimeDuration(&quot;P3DT2H&quot;) castable as xs:anyURI)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-790">
    <description> Casting from xs:dayTimeDuration to xs:QName isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration(&quot;P3DT2H&quot;) cast as xs:QName</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-791">
    <description> 'castable as' involving xs:dayTimeDuration as source type and xs:QName as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dayTimeDuration(&quot;P3DT2H&quot;) castable as xs:QName)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-792">
    <description> 'castable as' involving xs:dayTimeDuration as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dayTimeDuration(&quot;P3DT2H&quot;) castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0080&quot;))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-793">
    <description> The xs:dateTime constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-794">
    <description> The xs:dateTime constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime( &quot;2002-10-10T12:00:00-05:00&quot; , &quot;2002-10-10T12:00:00-05:00&quot; )</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-795">
    <description> Verify with 'instance of' that the xs:dateTime constructor function produces values of the correct type. 
      The subsequence() function makes it more difficult for optimizers to take short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence((&quot;dummy&quot;, 1.1, xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;)), 3, 1) instance of xs:dateTime</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-796">
    <description> A simple test exercising the whitespace facet for type xs:dateTime.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot; 2002-10-10T12:00:00-05:00 &quot;) eq xs:dateTime(&quot; 2002-10-10T12:00:00-05:00 &quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-797">
    <description> An empty string is not a valid lexical representation of xs:dateTime.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-798">
    <description> Cast a simple xs:untypedAtomic value to &quot;2002-10-10T12:00:00-05:00&quot; .</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(xs:untypedAtomic( &quot;2002-10-10T12:00:00-05:00&quot; )) eq xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-799">
    <description> It is not possible to extract an Effective Boolean Value from the type xs:dateTime, with the boolean() function.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0006&quot;))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-800">
    <description> Casting from xs:dateTime to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) cast as xs:untypedAtomic ne xs:untypedAtomic(&quot;an arbitrary string(untypedAtomic source)&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-801">
    <description> 'castable as' involving xs:dateTime as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) castable as xs:untypedAtomic</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-802">
    <description> Casting from xs:dateTime to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) cast as xs:string ne xs:string(&quot;an arbitrary string&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-803">
    <description> 'castable as' involving xs:dateTime as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) castable as xs:string</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-804">
    <description> Casting from xs:dateTime to xs:float isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) cast as xs:float</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-805">
    <description> 'castable as' involving xs:dateTime as source type and xs:float as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) castable as xs:float)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-806">
    <description> Casting from xs:dateTime to xs:double isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) cast as xs:double</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-807">
    <description> 'castable as' involving xs:dateTime as source type and xs:double as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) castable as xs:double)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-808">
    <description> Casting from xs:dateTime to xs:decimal isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) cast as xs:decimal</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-809">
    <description> 'castable as' involving xs:dateTime as source type and xs:decimal as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) castable as xs:decimal)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-810">
    <description> Casting from xs:dateTime to xs:integer isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) cast as xs:integer</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-811">
    <description> 'castable as' involving xs:dateTime as source type and xs:integer as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) castable as xs:integer)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-812">
    <description> Casting from xs:dateTime to xs:duration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) cast as xs:duration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-813">
    <description> 'castable as' involving xs:dateTime as source type and xs:duration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) castable as xs:duration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-814">
    <description> Casting from xs:dateTime to xs:yearMonthDuration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-815">
    <description> 'castable as' involving xs:dateTime as source type and xs:yearMonthDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) castable as xs:yearMonthDuration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-816">
    <description> Casting from xs:dateTime to xs:dayTimeDuration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-817">
    <description> 'castable as' involving xs:dateTime as source type and xs:dayTimeDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) castable as xs:dayTimeDuration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-818">
    <description> Casting from xs:dateTime to xs:dateTime is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) cast as xs:dateTime eq xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-819">
    <description> 'castable as' involving xs:dateTime as source type and xs:dateTime as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) castable as xs:dateTime</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-820">
    <description> Casting from xs:dateTime to xs:time is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) cast as xs:time ne xs:time(&quot;03:20:00-05:00&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-821">
    <description> 'castable as' involving xs:dateTime as source type and xs:time as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) castable as xs:time</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-822">
    <description> Casting from xs:dateTime to xs:date is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) cast as xs:date ne xs:date(&quot;2004-10-13&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-823">
    <description> 'castable as' involving xs:dateTime as source type and xs:date as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) castable as xs:date</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-824">
    <description> Casting from xs:dateTime to xs:gYearMonth is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) cast as xs:gYearMonth ne xs:gYearMonth(&quot;1999-11&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-825">
    <description> 'castable as' involving xs:dateTime as source type and xs:gYearMonth as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) castable as xs:gYearMonth</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-826">
    <description> Casting from xs:dateTime to xs:gYear is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) cast as xs:gYear ne xs:gYear(&quot;1999&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-827">
    <description> 'castable as' involving xs:dateTime as source type and xs:gYear as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) castable as xs:gYear</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-828">
    <description> Casting from xs:dateTime to xs:gMonthDay is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) cast as xs:gMonthDay ne xs:gMonthDay(&quot;--11-13&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-829">
    <description> 'castable as' involving xs:dateTime as source type and xs:gMonthDay as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) castable as xs:gMonthDay</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-830">
    <description> Casting from xs:dateTime to xs:gDay is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) cast as xs:gDay ne xs:gDay(&quot;---03&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-831">
    <description> 'castable as' involving xs:dateTime as source type and xs:gDay as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) castable as xs:gDay</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-832">
    <description> Casting from xs:dateTime to xs:gMonth is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) cast as xs:gMonth ne xs:gMonth(&quot;--11&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-833">
    <description> 'castable as' involving xs:dateTime as source type and xs:gMonth as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) castable as xs:gMonth</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-834">
    <description> Casting from xs:dateTime to xs:boolean isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) cast as xs:boolean</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-835">
    <description> 'castable as' involving xs:dateTime as source type and xs:boolean as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) castable as xs:boolean)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-836">
    <description> Casting from xs:dateTime to xs:base64Binary isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-837">
    <description> 'castable as' involving xs:dateTime as source type and xs:base64Binary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) castable as xs:base64Binary)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-838">
    <description> Casting from xs:dateTime to xs:hexBinary isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-839">
    <description> 'castable as' involving xs:dateTime as source type and xs:hexBinary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) castable as xs:hexBinary)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-840">
    <description> Casting from xs:dateTime to xs:anyURI isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-841">
    <description> 'castable as' involving xs:dateTime as source type and xs:anyURI as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) castable as xs:anyURI)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-842">
    <description> Casting from xs:dateTime to xs:QName isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) cast as xs:QName</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-843">
    <description> 'castable as' involving xs:dateTime as source type and xs:QName as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) castable as xs:QName)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-844">
    <description> 'castable as' involving xs:dateTime as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;) castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0080&quot;))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-845">
    <description> The xs:time constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-846">
    <description> The xs:time constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time( &quot;03:20:00-05:00&quot; , &quot;03:20:00-05:00&quot; )</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-847">
    <description> Verify with 'instance of' that the xs:time constructor function produces values of the correct type. 
      The subsequence() function makes it more difficult for optimizers to take short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence((&quot;dummy&quot;, 1.1, xs:time(&quot;03:20:00-05:00&quot;)), 3, 1) instance of xs:time</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-848">
    <description> A simple test exercising the whitespace facet for type xs:time.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot; 03:20:00-05:00 &quot;) eq xs:time(&quot; 03:20:00-05:00 &quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-849">
    <description> An empty string is not a valid lexical representation of xs:time.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-850">
    <description> Cast a simple xs:untypedAtomic value to &quot;03:20:00-05:00&quot; .</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(xs:untypedAtomic( &quot;03:20:00-05:00&quot; )) eq xs:time(&quot;03:20:00-05:00&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-851">
    <description> It is not possible to extract an Effective Boolean Value from the type xs:time, with the boolean() function.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:time(&quot;03:20:00-05:00&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0006&quot;))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-852">
    <description> Casting from xs:time to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;03:20:00-05:00&quot;) cast as xs:untypedAtomic ne xs:untypedAtomic(&quot;an arbitrary string(untypedAtomic source)&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-853">
    <description> 'castable as' involving xs:time as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;03:20:00-05:00&quot;) castable as xs:untypedAtomic</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-854">
    <description> Casting from xs:time to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;03:20:00-05:00&quot;) cast as xs:string ne xs:string(&quot;an arbitrary string&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-855">
    <description> 'castable as' involving xs:time as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;03:20:00-05:00&quot;) castable as xs:string</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-856">
    <description> Casting from xs:time to xs:float isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;03:20:00-05:00&quot;) cast as xs:float</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-857">
    <description> 'castable as' involving xs:time as source type and xs:float as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:time(&quot;03:20:00-05:00&quot;) castable as xs:float)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-858">
    <description> Casting from xs:time to xs:double isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;03:20:00-05:00&quot;) cast as xs:double</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-859">
    <description> 'castable as' involving xs:time as source type and xs:double as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:time(&quot;03:20:00-05:00&quot;) castable as xs:double)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-860">
    <description> Casting from xs:time to xs:decimal isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;03:20:00-05:00&quot;) cast as xs:decimal</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-861">
    <description> 'castable as' involving xs:time as source type and xs:decimal as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:time(&quot;03:20:00-05:00&quot;) castable as xs:decimal)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-862">
    <description> Casting from xs:time to xs:integer isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;03:20:00-05:00&quot;) cast as xs:integer</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-863">
    <description> 'castable as' involving xs:time as source type and xs:integer as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:time(&quot;03:20:00-05:00&quot;) castable as xs:integer)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-864">
    <description> Casting from xs:time to xs:duration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;03:20:00-05:00&quot;) cast as xs:duration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-865">
    <description> 'castable as' involving xs:time as source type and xs:duration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:time(&quot;03:20:00-05:00&quot;) castable as xs:duration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-866">
    <description> Casting from xs:time to xs:yearMonthDuration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;03:20:00-05:00&quot;) cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-867">
    <description> 'castable as' involving xs:time as source type and xs:yearMonthDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:time(&quot;03:20:00-05:00&quot;) castable as xs:yearMonthDuration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-868">
    <description> Casting from xs:time to xs:dayTimeDuration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;03:20:00-05:00&quot;) cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-869">
    <description> 'castable as' involving xs:time as source type and xs:dayTimeDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:time(&quot;03:20:00-05:00&quot;) castable as xs:dayTimeDuration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-870">
    <description> Casting from xs:time to xs:dateTime isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;03:20:00-05:00&quot;) cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-871">
    <description> 'castable as' involving xs:time as source type and xs:dateTime as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:time(&quot;03:20:00-05:00&quot;) castable as xs:dateTime)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-872">
    <description> Casting from xs:time to xs:time is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;03:20:00-05:00&quot;) cast as xs:time eq xs:time(&quot;03:20:00-05:00&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-873">
    <description> 'castable as' involving xs:time as source type and xs:time as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;03:20:00-05:00&quot;) castable as xs:time</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-874">
    <description> Casting from xs:time to xs:date isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;03:20:00-05:00&quot;) cast as xs:date</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-875">
    <description> 'castable as' involving xs:time as source type and xs:date as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:time(&quot;03:20:00-05:00&quot;) castable as xs:date)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-876">
    <description> Casting from xs:time to xs:gYearMonth isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;03:20:00-05:00&quot;) cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-877">
    <description> 'castable as' involving xs:time as source type and xs:gYearMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:time(&quot;03:20:00-05:00&quot;) castable as xs:gYearMonth)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-878">
    <description> Casting from xs:time to xs:gYear isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;03:20:00-05:00&quot;) cast as xs:gYear</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-879">
    <description> 'castable as' involving xs:time as source type and xs:gYear as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:time(&quot;03:20:00-05:00&quot;) castable as xs:gYear)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-880">
    <description> Casting from xs:time to xs:gMonthDay isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;03:20:00-05:00&quot;) cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-881">
    <description> 'castable as' involving xs:time as source type and xs:gMonthDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:time(&quot;03:20:00-05:00&quot;) castable as xs:gMonthDay)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-882">
    <description> Casting from xs:time to xs:gDay isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;03:20:00-05:00&quot;) cast as xs:gDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-883">
    <description> 'castable as' involving xs:time as source type and xs:gDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:time(&quot;03:20:00-05:00&quot;) castable as xs:gDay)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-884">
    <description> Casting from xs:time to xs:gMonth isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;03:20:00-05:00&quot;) cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-885">
    <description> 'castable as' involving xs:time as source type and xs:gMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:time(&quot;03:20:00-05:00&quot;) castable as xs:gMonth)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-886">
    <description> Casting from xs:time to xs:boolean isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;03:20:00-05:00&quot;) cast as xs:boolean</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-887">
    <description> 'castable as' involving xs:time as source type and xs:boolean as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:time(&quot;03:20:00-05:00&quot;) castable as xs:boolean)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-888">
    <description> Casting from xs:time to xs:base64Binary isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;03:20:00-05:00&quot;) cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-889">
    <description> 'castable as' involving xs:time as source type and xs:base64Binary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:time(&quot;03:20:00-05:00&quot;) castable as xs:base64Binary)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-890">
    <description> Casting from xs:time to xs:hexBinary isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;03:20:00-05:00&quot;) cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-891">
    <description> 'castable as' involving xs:time as source type and xs:hexBinary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:time(&quot;03:20:00-05:00&quot;) castable as xs:hexBinary)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-892">
    <description> Casting from xs:time to xs:anyURI isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;03:20:00-05:00&quot;) cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-893">
    <description> 'castable as' involving xs:time as source type and xs:anyURI as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:time(&quot;03:20:00-05:00&quot;) castable as xs:anyURI)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-894">
    <description> Casting from xs:time to xs:QName isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;03:20:00-05:00&quot;) cast as xs:QName</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-895">
    <description> 'castable as' involving xs:time as source type and xs:QName as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:time(&quot;03:20:00-05:00&quot;) castable as xs:QName)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-896">
    <description> 'castable as' involving xs:time as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:time(&quot;03:20:00-05:00&quot;) castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0080&quot;))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-897">
    <description> The xs:date constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-898">
    <description> The xs:date constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date( &quot;2004-10-13&quot; , &quot;2004-10-13&quot; )</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-899">
    <description> Verify with 'instance of' that the xs:date constructor function produces values of the correct type. 
      The subsequence() function makes it more difficult for optimizers to take short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence((&quot;dummy&quot;, 1.1, xs:date(&quot;2004-10-13&quot;)), 3, 1) instance of xs:date</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-900">
    <description> A simple test exercising the whitespace facet for type xs:date.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot; 2004-10-13 &quot;) eq xs:date(&quot; 2004-10-13 &quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-901">
    <description> An empty string is not a valid lexical representation of xs:date.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-902">
    <description> Cast a simple xs:untypedAtomic value to &quot;2004-10-13&quot; .</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(xs:untypedAtomic( &quot;2004-10-13&quot; )) eq xs:date(&quot;2004-10-13&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-903">
    <description> It is not possible to extract an Effective Boolean Value from the type xs:date, with the boolean() function.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:date(&quot;2004-10-13&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0006&quot;))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-904">
    <description> Casting from xs:date to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;2004-10-13&quot;) cast as xs:untypedAtomic ne xs:untypedAtomic(&quot;an arbitrary string(untypedAtomic source)&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-905">
    <description> 'castable as' involving xs:date as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;2004-10-13&quot;) castable as xs:untypedAtomic</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-906">
    <description> Casting from xs:date to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;2004-10-13&quot;) cast as xs:string ne xs:string(&quot;an arbitrary string&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-907">
    <description> 'castable as' involving xs:date as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;2004-10-13&quot;) castable as xs:string</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-908">
    <description> Casting from xs:date to xs:float isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;2004-10-13&quot;) cast as xs:float</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-909">
    <description> 'castable as' involving xs:date as source type and xs:float as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:date(&quot;2004-10-13&quot;) castable as xs:float)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-910">
    <description> Casting from xs:date to xs:double isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;2004-10-13&quot;) cast as xs:double</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-911">
    <description> 'castable as' involving xs:date as source type and xs:double as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:date(&quot;2004-10-13&quot;) castable as xs:double)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-912">
    <description> Casting from xs:date to xs:decimal isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;2004-10-13&quot;) cast as xs:decimal</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-913">
    <description> 'castable as' involving xs:date as source type and xs:decimal as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:date(&quot;2004-10-13&quot;) castable as xs:decimal)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-914">
    <description> Casting from xs:date to xs:integer isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;2004-10-13&quot;) cast as xs:integer</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-915">
    <description> 'castable as' involving xs:date as source type and xs:integer as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:date(&quot;2004-10-13&quot;) castable as xs:integer)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-916">
    <description> Casting from xs:date to xs:duration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;2004-10-13&quot;) cast as xs:duration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-917">
    <description> 'castable as' involving xs:date as source type and xs:duration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:date(&quot;2004-10-13&quot;) castable as xs:duration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-918">
    <description> Casting from xs:date to xs:yearMonthDuration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;2004-10-13&quot;) cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-919">
    <description> 'castable as' involving xs:date as source type and xs:yearMonthDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:date(&quot;2004-10-13&quot;) castable as xs:yearMonthDuration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-920">
    <description> Casting from xs:date to xs:dayTimeDuration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;2004-10-13&quot;) cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-921">
    <description> 'castable as' involving xs:date as source type and xs:dayTimeDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:date(&quot;2004-10-13&quot;) castable as xs:dayTimeDuration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-922">
    <description> Casting from xs:date to xs:dateTime is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;2004-10-13&quot;) cast as xs:dateTime ne xs:dateTime(&quot;2002-10-10T12:00:00-05:00&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-923">
    <description> 'castable as' involving xs:date as source type and xs:dateTime as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;2004-10-13&quot;) castable as xs:dateTime</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-924">
    <description> Casting from xs:date to xs:time isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;2004-10-13&quot;) cast as xs:time</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-925">
    <description> 'castable as' involving xs:date as source type and xs:time as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:date(&quot;2004-10-13&quot;) castable as xs:time)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-926">
    <description> Casting from xs:date to xs:date is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;2004-10-13&quot;) cast as xs:date eq xs:date(&quot;2004-10-13&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-927">
    <description> 'castable as' involving xs:date as source type and xs:date as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;2004-10-13&quot;) castable as xs:date</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-928">
    <description> Casting from xs:date to xs:gYearMonth is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;2004-10-13&quot;) cast as xs:gYearMonth ne xs:gYearMonth(&quot;1999-11&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-929">
    <description> 'castable as' involving xs:date as source type and xs:gYearMonth as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;2004-10-13&quot;) castable as xs:gYearMonth</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-930">
    <description> Casting from xs:date to xs:gYear is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;2004-10-13&quot;) cast as xs:gYear ne xs:gYear(&quot;1999&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-931">
    <description> 'castable as' involving xs:date as source type and xs:gYear as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;2004-10-13&quot;) castable as xs:gYear</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-932">
    <description> Casting from xs:date to xs:gMonthDay is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;2004-10-13&quot;) cast as xs:gMonthDay ne xs:gMonthDay(&quot;--11-13&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-933">
    <description> 'castable as' involving xs:date as source type and xs:gMonthDay as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;2004-10-13&quot;) castable as xs:gMonthDay</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-934">
    <description> Casting from xs:date to xs:gDay is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;2004-10-13&quot;) cast as xs:gDay ne xs:gDay(&quot;---03&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-935">
    <description> 'castable as' involving xs:date as source type and xs:gDay as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;2004-10-13&quot;) castable as xs:gDay</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-936">
    <description> Casting from xs:date to xs:gMonth is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;2004-10-13&quot;) cast as xs:gMonth ne xs:gMonth(&quot;--11&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-937">
    <description> 'castable as' involving xs:date as source type and xs:gMonth as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;2004-10-13&quot;) castable as xs:gMonth</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-938">
    <description> Casting from xs:date to xs:boolean isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;2004-10-13&quot;) cast as xs:boolean</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-939">
    <description> 'castable as' involving xs:date as source type and xs:boolean as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:date(&quot;2004-10-13&quot;) castable as xs:boolean)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-940">
    <description> Casting from xs:date to xs:base64Binary isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;2004-10-13&quot;) cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-941">
    <description> 'castable as' involving xs:date as source type and xs:base64Binary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:date(&quot;2004-10-13&quot;) castable as xs:base64Binary)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-942">
    <description> Casting from xs:date to xs:hexBinary isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;2004-10-13&quot;) cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-943">
    <description> 'castable as' involving xs:date as source type and xs:hexBinary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:date(&quot;2004-10-13&quot;) castable as xs:hexBinary)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-944">
    <description> Casting from xs:date to xs:anyURI isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;2004-10-13&quot;) cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-945">
    <description> 'castable as' involving xs:date as source type and xs:anyURI as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:date(&quot;2004-10-13&quot;) castable as xs:anyURI)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-946">
    <description> Casting from xs:date to xs:QName isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;2004-10-13&quot;) cast as xs:QName</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-947">
    <description> 'castable as' involving xs:date as source type and xs:QName as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:date(&quot;2004-10-13&quot;) castable as xs:QName)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-948">
    <description> 'castable as' involving xs:date as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:date(&quot;2004-10-13&quot;) castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0080&quot;))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-949">
    <description> The xs:gYearMonth constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-950">
    <description> The xs:gYearMonth constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth( &quot;1999-11&quot; , &quot;1999-11&quot; )</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-951">
    <description> Verify with 'instance of' that the xs:gYearMonth constructor function produces values of the correct type. 
      The subsequence() function makes it more difficult for optimizers to take short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence((&quot;dummy&quot;, 1.1, xs:gYearMonth(&quot;1999-11&quot;)), 3, 1) instance of xs:gYearMonth</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-952">
    <description> A simple test exercising the whitespace facet for type xs:gYearMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(&quot; 1999-11 &quot;) eq xs:gYearMonth(&quot; 1999-11 &quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-953">
    <description> An empty string is not a valid lexical representation of xs:gYearMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(&quot;&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-954">
    <description> Cast a simple xs:untypedAtomic value to &quot;1999-11&quot; .</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(xs:untypedAtomic( &quot;1999-11&quot; )) eq xs:gYearMonth(&quot;1999-11&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-955">
    <description> It is not possible to extract an Effective Boolean Value from the type xs:gYearMonth, with the boolean() function.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:gYearMonth(&quot;1999-11&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0006&quot;))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-956">
    <description> Casting from xs:gYearMonth to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(&quot;1999-11&quot;) cast as xs:untypedAtomic ne xs:untypedAtomic(&quot;an arbitrary string(untypedAtomic source)&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-957">
    <description> 'castable as' involving xs:gYearMonth as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(&quot;1999-11&quot;) castable as xs:untypedAtomic</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-958">
    <description> Casting from xs:gYearMonth to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(&quot;1999-11&quot;) cast as xs:string ne xs:string(&quot;an arbitrary string&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-959">
    <description> 'castable as' involving xs:gYearMonth as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(&quot;1999-11&quot;) castable as xs:string</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-960">
    <description> Casting from xs:gYearMonth to xs:float isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(&quot;1999-11&quot;) cast as xs:float</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-961">
    <description> 'castable as' involving xs:gYearMonth as source type and xs:float as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYearMonth(&quot;1999-11&quot;) castable as xs:float)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-962">
    <description> Casting from xs:gYearMonth to xs:double isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(&quot;1999-11&quot;) cast as xs:double</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-963">
    <description> 'castable as' involving xs:gYearMonth as source type and xs:double as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYearMonth(&quot;1999-11&quot;) castable as xs:double)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-964">
    <description> Casting from xs:gYearMonth to xs:decimal isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(&quot;1999-11&quot;) cast as xs:decimal</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-965">
    <description> 'castable as' involving xs:gYearMonth as source type and xs:decimal as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYearMonth(&quot;1999-11&quot;) castable as xs:decimal)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-966">
    <description> Casting from xs:gYearMonth to xs:integer isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(&quot;1999-11&quot;) cast as xs:integer</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-967">
    <description> 'castable as' involving xs:gYearMonth as source type and xs:integer as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYearMonth(&quot;1999-11&quot;) castable as xs:integer)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-968">
    <description> Casting from xs:gYearMonth to xs:duration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(&quot;1999-11&quot;) cast as xs:duration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-969">
    <description> 'castable as' involving xs:gYearMonth as source type and xs:duration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYearMonth(&quot;1999-11&quot;) castable as xs:duration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-970">
    <description> Casting from xs:gYearMonth to xs:yearMonthDuration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(&quot;1999-11&quot;) cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-971">
    <description> 'castable as' involving xs:gYearMonth as source type and xs:yearMonthDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYearMonth(&quot;1999-11&quot;) castable as xs:yearMonthDuration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-972">
    <description> Casting from xs:gYearMonth to xs:dayTimeDuration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(&quot;1999-11&quot;) cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-973">
    <description> 'castable as' involving xs:gYearMonth as source type and xs:dayTimeDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYearMonth(&quot;1999-11&quot;) castable as xs:dayTimeDuration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-974">
    <description> Casting from xs:gYearMonth to xs:dateTime isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(&quot;1999-11&quot;) cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-975">
    <description> 'castable as' involving xs:gYearMonth as source type and xs:dateTime as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYearMonth(&quot;1999-11&quot;) castable as xs:dateTime)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-976">
    <description> Casting from xs:gYearMonth to xs:time isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(&quot;1999-11&quot;) cast as xs:time</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-977">
    <description> 'castable as' involving xs:gYearMonth as source type and xs:time as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYearMonth(&quot;1999-11&quot;) castable as xs:time)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-978">
    <description> Casting from xs:gYearMonth to xs:date isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(&quot;1999-11&quot;) cast as xs:date</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-979">
    <description> 'castable as' involving xs:gYearMonth as source type and xs:date as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYearMonth(&quot;1999-11&quot;) castable as xs:date)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-980">
    <description> Casting from xs:gYearMonth to xs:gYearMonth is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(&quot;1999-11&quot;) cast as xs:gYearMonth eq xs:gYearMonth(&quot;1999-11&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-981">
    <description> 'castable as' involving xs:gYearMonth as source type and xs:gYearMonth as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(&quot;1999-11&quot;) castable as xs:gYearMonth</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-982">
    <description> Casting from xs:gYearMonth to xs:gYear isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(&quot;1999-11&quot;) cast as xs:gYear</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-983">
    <description> 'castable as' involving xs:gYearMonth as source type and xs:gYear as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYearMonth(&quot;1999-11&quot;) castable as xs:gYear)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-984">
    <description> Casting from xs:gYearMonth to xs:gMonthDay isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(&quot;1999-11&quot;) cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-985">
    <description> 'castable as' involving xs:gYearMonth as source type and xs:gMonthDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYearMonth(&quot;1999-11&quot;) castable as xs:gMonthDay)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-986">
    <description> Casting from xs:gYearMonth to xs:gDay isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(&quot;1999-11&quot;) cast as xs:gDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-987">
    <description> 'castable as' involving xs:gYearMonth as source type and xs:gDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYearMonth(&quot;1999-11&quot;) castable as xs:gDay)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-988">
    <description> Casting from xs:gYearMonth to xs:gMonth isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(&quot;1999-11&quot;) cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-989">
    <description> 'castable as' involving xs:gYearMonth as source type and xs:gMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYearMonth(&quot;1999-11&quot;) castable as xs:gMonth)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-990">
    <description> Casting from xs:gYearMonth to xs:boolean isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(&quot;1999-11&quot;) cast as xs:boolean</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-991">
    <description> 'castable as' involving xs:gYearMonth as source type and xs:boolean as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYearMonth(&quot;1999-11&quot;) castable as xs:boolean)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-992">
    <description> Casting from xs:gYearMonth to xs:base64Binary isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(&quot;1999-11&quot;) cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-993">
    <description> 'castable as' involving xs:gYearMonth as source type and xs:base64Binary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYearMonth(&quot;1999-11&quot;) castable as xs:base64Binary)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-994">
    <description> Casting from xs:gYearMonth to xs:hexBinary isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(&quot;1999-11&quot;) cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-995">
    <description> 'castable as' involving xs:gYearMonth as source type and xs:hexBinary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYearMonth(&quot;1999-11&quot;) castable as xs:hexBinary)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-996">
    <description> Casting from xs:gYearMonth to xs:anyURI isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(&quot;1999-11&quot;) cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-997">
    <description> 'castable as' involving xs:gYearMonth as source type and xs:anyURI as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYearMonth(&quot;1999-11&quot;) castable as xs:anyURI)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-998">
    <description> Casting from xs:gYearMonth to xs:QName isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(&quot;1999-11&quot;) cast as xs:QName</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-999">
    <description> 'castable as' involving xs:gYearMonth as source type and xs:QName as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYearMonth(&quot;1999-11&quot;) castable as xs:QName)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1000">
    <description> 'castable as' involving xs:gYearMonth as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYearMonth(&quot;1999-11&quot;) castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0080&quot;))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1001">
    <description> The xs:gYear constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1002">
    <description> The xs:gYear constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear( &quot;1999&quot; , &quot;1999&quot; )</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1003">
    <description> Verify with 'instance of' that the xs:gYear constructor function produces values of the correct type. 
      The subsequence() function makes it more difficult for optimizers to take short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence((&quot;dummy&quot;, 1.1, xs:gYear(&quot;1999&quot;)), 3, 1) instance of xs:gYear</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1004">
    <description> A simple test exercising the whitespace facet for type xs:gYear.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot; 1999 &quot;) eq xs:gYear(&quot; 1999 &quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1005">
    <description> An empty string is not a valid lexical representation of xs:gYear.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1006">
    <description> Cast a simple xs:untypedAtomic value to &quot;1999&quot; .</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(xs:untypedAtomic( &quot;1999&quot; )) eq xs:gYear(&quot;1999&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1007">
    <description> It is not possible to extract an Effective Boolean Value from the type xs:gYear, with the boolean() function.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:gYear(&quot;1999&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0006&quot;))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1008">
    <description> Casting from xs:gYear to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;1999&quot;) cast as xs:untypedAtomic ne xs:untypedAtomic(&quot;an arbitrary string(untypedAtomic source)&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1009">
    <description> 'castable as' involving xs:gYear as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;1999&quot;) castable as xs:untypedAtomic</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1010">
    <description> Casting from xs:gYear to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;1999&quot;) cast as xs:string ne xs:string(&quot;an arbitrary string&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1011">
    <description> 'castable as' involving xs:gYear as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;1999&quot;) castable as xs:string</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1012">
    <description> Casting from xs:gYear to xs:float isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;1999&quot;) cast as xs:float</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1013">
    <description> 'castable as' involving xs:gYear as source type and xs:float as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYear(&quot;1999&quot;) castable as xs:float)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1014">
    <description> Casting from xs:gYear to xs:double isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;1999&quot;) cast as xs:double</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1015">
    <description> 'castable as' involving xs:gYear as source type and xs:double as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYear(&quot;1999&quot;) castable as xs:double)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1016">
    <description> Casting from xs:gYear to xs:decimal isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;1999&quot;) cast as xs:decimal</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1017">
    <description> 'castable as' involving xs:gYear as source type and xs:decimal as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYear(&quot;1999&quot;) castable as xs:decimal)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1018">
    <description> Casting from xs:gYear to xs:integer isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;1999&quot;) cast as xs:integer</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1019">
    <description> 'castable as' involving xs:gYear as source type and xs:integer as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYear(&quot;1999&quot;) castable as xs:integer)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1020">
    <description> Casting from xs:gYear to xs:duration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;1999&quot;) cast as xs:duration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1021">
    <description> 'castable as' involving xs:gYear as source type and xs:duration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYear(&quot;1999&quot;) castable as xs:duration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1022">
    <description> Casting from xs:gYear to xs:yearMonthDuration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;1999&quot;) cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1023">
    <description> 'castable as' involving xs:gYear as source type and xs:yearMonthDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYear(&quot;1999&quot;) castable as xs:yearMonthDuration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1024">
    <description> Casting from xs:gYear to xs:dayTimeDuration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;1999&quot;) cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1025">
    <description> 'castable as' involving xs:gYear as source type and xs:dayTimeDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYear(&quot;1999&quot;) castable as xs:dayTimeDuration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1026">
    <description> Casting from xs:gYear to xs:dateTime isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;1999&quot;) cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1027">
    <description> 'castable as' involving xs:gYear as source type and xs:dateTime as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYear(&quot;1999&quot;) castable as xs:dateTime)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1028">
    <description> Casting from xs:gYear to xs:time isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;1999&quot;) cast as xs:time</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1029">
    <description> 'castable as' involving xs:gYear as source type and xs:time as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYear(&quot;1999&quot;) castable as xs:time)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1030">
    <description> Casting from xs:gYear to xs:date isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;1999&quot;) cast as xs:date</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1031">
    <description> 'castable as' involving xs:gYear as source type and xs:date as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYear(&quot;1999&quot;) castable as xs:date)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1032">
    <description> Casting from xs:gYear to xs:gYearMonth isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;1999&quot;) cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1033">
    <description> 'castable as' involving xs:gYear as source type and xs:gYearMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYear(&quot;1999&quot;) castable as xs:gYearMonth)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1034">
    <description> Casting from xs:gYear to xs:gYear is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;1999&quot;) cast as xs:gYear eq xs:gYear(&quot;1999&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1035">
    <description> 'castable as' involving xs:gYear as source type and xs:gYear as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;1999&quot;) castable as xs:gYear</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1036">
    <description> Casting from xs:gYear to xs:gMonthDay isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;1999&quot;) cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1037">
    <description> 'castable as' involving xs:gYear as source type and xs:gMonthDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYear(&quot;1999&quot;) castable as xs:gMonthDay)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1038">
    <description> Casting from xs:gYear to xs:gDay isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;1999&quot;) cast as xs:gDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1039">
    <description> 'castable as' involving xs:gYear as source type and xs:gDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYear(&quot;1999&quot;) castable as xs:gDay)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1040">
    <description> Casting from xs:gYear to xs:gMonth isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;1999&quot;) cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1041">
    <description> 'castable as' involving xs:gYear as source type and xs:gMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYear(&quot;1999&quot;) castable as xs:gMonth)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1042">
    <description> Casting from xs:gYear to xs:boolean isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;1999&quot;) cast as xs:boolean</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1043">
    <description> 'castable as' involving xs:gYear as source type and xs:boolean as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYear(&quot;1999&quot;) castable as xs:boolean)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1044">
    <description> Casting from xs:gYear to xs:base64Binary isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;1999&quot;) cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1045">
    <description> 'castable as' involving xs:gYear as source type and xs:base64Binary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYear(&quot;1999&quot;) castable as xs:base64Binary)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1046">
    <description> Casting from xs:gYear to xs:hexBinary isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;1999&quot;) cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1047">
    <description> 'castable as' involving xs:gYear as source type and xs:hexBinary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYear(&quot;1999&quot;) castable as xs:hexBinary)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1048">
    <description> Casting from xs:gYear to xs:anyURI isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;1999&quot;) cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1049">
    <description> 'castable as' involving xs:gYear as source type and xs:anyURI as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYear(&quot;1999&quot;) castable as xs:anyURI)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1050">
    <description> Casting from xs:gYear to xs:QName isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;1999&quot;) cast as xs:QName</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1051">
    <description> 'castable as' involving xs:gYear as source type and xs:QName as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYear(&quot;1999&quot;) castable as xs:QName)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1052">
    <description> 'castable as' involving xs:gYear as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYear(&quot;1999&quot;) castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0080&quot;))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1053">
    <description> The xs:gMonthDay constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1054">
    <description> The xs:gMonthDay constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay( &quot;--11-13&quot; , &quot;--11-13&quot; )</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1055">
    <description> Verify with 'instance of' that the xs:gMonthDay constructor function produces values of the correct type. 
      The subsequence() function makes it more difficult for optimizers to take short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence((&quot;dummy&quot;, 1.1, xs:gMonthDay(&quot;--11-13&quot;)), 3, 1) instance of xs:gMonthDay</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1056">
    <description> A simple test exercising the whitespace facet for type xs:gMonthDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot; --11-13 &quot;) eq xs:gMonthDay(&quot; --11-13 &quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1057">
    <description> An empty string is not a valid lexical representation of xs:gMonthDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1058">
    <description> Cast a simple xs:untypedAtomic value to &quot;--11-13&quot; .</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(xs:untypedAtomic( &quot;--11-13&quot; )) eq xs:gMonthDay(&quot;--11-13&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1059">
    <description> It is not possible to extract an Effective Boolean Value from the type xs:gMonthDay, with the boolean() function.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:gMonthDay(&quot;--11-13&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0006&quot;))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1060">
    <description> Casting from xs:gMonthDay to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;--11-13&quot;) cast as xs:untypedAtomic ne xs:untypedAtomic(&quot;an arbitrary string(untypedAtomic source)&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1061">
    <description> 'castable as' involving xs:gMonthDay as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;--11-13&quot;) castable as xs:untypedAtomic</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1062">
    <description> Casting from xs:gMonthDay to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;--11-13&quot;) cast as xs:string ne xs:string(&quot;an arbitrary string&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1063">
    <description> 'castable as' involving xs:gMonthDay as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;--11-13&quot;) castable as xs:string</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1064">
    <description> Casting from xs:gMonthDay to xs:float isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;--11-13&quot;) cast as xs:float</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1065">
    <description> 'castable as' involving xs:gMonthDay as source type and xs:float as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonthDay(&quot;--11-13&quot;) castable as xs:float)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1066">
    <description> Casting from xs:gMonthDay to xs:double isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;--11-13&quot;) cast as xs:double</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1067">
    <description> 'castable as' involving xs:gMonthDay as source type and xs:double as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonthDay(&quot;--11-13&quot;) castable as xs:double)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1068">
    <description> Casting from xs:gMonthDay to xs:decimal isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;--11-13&quot;) cast as xs:decimal</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1069">
    <description> 'castable as' involving xs:gMonthDay as source type and xs:decimal as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonthDay(&quot;--11-13&quot;) castable as xs:decimal)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1070">
    <description> Casting from xs:gMonthDay to xs:integer isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;--11-13&quot;) cast as xs:integer</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1071">
    <description> 'castable as' involving xs:gMonthDay as source type and xs:integer as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonthDay(&quot;--11-13&quot;) castable as xs:integer)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1072">
    <description> Casting from xs:gMonthDay to xs:duration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;--11-13&quot;) cast as xs:duration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1073">
    <description> 'castable as' involving xs:gMonthDay as source type and xs:duration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonthDay(&quot;--11-13&quot;) castable as xs:duration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1074">
    <description> Casting from xs:gMonthDay to xs:yearMonthDuration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;--11-13&quot;) cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1075">
    <description> 'castable as' involving xs:gMonthDay as source type and xs:yearMonthDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonthDay(&quot;--11-13&quot;) castable as xs:yearMonthDuration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1076">
    <description> Casting from xs:gMonthDay to xs:dayTimeDuration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;--11-13&quot;) cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1077">
    <description> 'castable as' involving xs:gMonthDay as source type and xs:dayTimeDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonthDay(&quot;--11-13&quot;) castable as xs:dayTimeDuration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1078">
    <description> Casting from xs:gMonthDay to xs:dateTime isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;--11-13&quot;) cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1079">
    <description> 'castable as' involving xs:gMonthDay as source type and xs:dateTime as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonthDay(&quot;--11-13&quot;) castable as xs:dateTime)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1080">
    <description> Casting from xs:gMonthDay to xs:time isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;--11-13&quot;) cast as xs:time</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1081">
    <description> 'castable as' involving xs:gMonthDay as source type and xs:time as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonthDay(&quot;--11-13&quot;) castable as xs:time)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1082">
    <description> Casting from xs:gMonthDay to xs:date isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;--11-13&quot;) cast as xs:date</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1083">
    <description> 'castable as' involving xs:gMonthDay as source type and xs:date as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonthDay(&quot;--11-13&quot;) castable as xs:date)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1084">
    <description> Casting from xs:gMonthDay to xs:gYearMonth isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;--11-13&quot;) cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1085">
    <description> 'castable as' involving xs:gMonthDay as source type and xs:gYearMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonthDay(&quot;--11-13&quot;) castable as xs:gYearMonth)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1086">
    <description> Casting from xs:gMonthDay to xs:gYear isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;--11-13&quot;) cast as xs:gYear</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1087">
    <description> 'castable as' involving xs:gMonthDay as source type and xs:gYear as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonthDay(&quot;--11-13&quot;) castable as xs:gYear)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1088">
    <description> Casting from xs:gMonthDay to xs:gMonthDay is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;--11-13&quot;) cast as xs:gMonthDay eq xs:gMonthDay(&quot;--11-13&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1089">
    <description> 'castable as' involving xs:gMonthDay as source type and xs:gMonthDay as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;--11-13&quot;) castable as xs:gMonthDay</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1090">
    <description> Casting from xs:gMonthDay to xs:gDay isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;--11-13&quot;) cast as xs:gDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1091">
    <description> 'castable as' involving xs:gMonthDay as source type and xs:gDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonthDay(&quot;--11-13&quot;) castable as xs:gDay)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1092">
    <description> Casting from xs:gMonthDay to xs:gMonth isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;--11-13&quot;) cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1093">
    <description> 'castable as' involving xs:gMonthDay as source type and xs:gMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonthDay(&quot;--11-13&quot;) castable as xs:gMonth)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1094">
    <description> Casting from xs:gMonthDay to xs:boolean isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;--11-13&quot;) cast as xs:boolean</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1095">
    <description> 'castable as' involving xs:gMonthDay as source type and xs:boolean as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonthDay(&quot;--11-13&quot;) castable as xs:boolean)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1096">
    <description> Casting from xs:gMonthDay to xs:base64Binary isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;--11-13&quot;) cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1097">
    <description> 'castable as' involving xs:gMonthDay as source type and xs:base64Binary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonthDay(&quot;--11-13&quot;) castable as xs:base64Binary)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1098">
    <description> Casting from xs:gMonthDay to xs:hexBinary isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;--11-13&quot;) cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1099">
    <description> 'castable as' involving xs:gMonthDay as source type and xs:hexBinary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonthDay(&quot;--11-13&quot;) castable as xs:hexBinary)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1100">
    <description> Casting from xs:gMonthDay to xs:anyURI isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;--11-13&quot;) cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1101">
    <description> 'castable as' involving xs:gMonthDay as source type and xs:anyURI as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonthDay(&quot;--11-13&quot;) castable as xs:anyURI)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1102">
    <description> Casting from xs:gMonthDay to xs:QName isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(&quot;--11-13&quot;) cast as xs:QName</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1103">
    <description> 'castable as' involving xs:gMonthDay as source type and xs:QName as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonthDay(&quot;--11-13&quot;) castable as xs:QName)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1104">
    <description> 'castable as' involving xs:gMonthDay as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonthDay(&quot;--11-13&quot;) castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0080&quot;))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1105">
    <description> The xs:gDay constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1106">
    <description> The xs:gDay constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay( &quot;---03&quot; , &quot;---03&quot; )</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1107">
    <description> Verify with 'instance of' that the xs:gDay constructor function produces values of the correct type. 
      The subsequence() function makes it more difficult for optimizers to take short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence((&quot;dummy&quot;, 1.1, xs:gDay(&quot;---03&quot;)), 3, 1) instance of xs:gDay</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1108">
    <description> A simple test exercising the whitespace facet for type xs:gDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot; ---03 &quot;) eq xs:gDay(&quot; ---03 &quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1109">
    <description> An empty string is not a valid lexical representation of xs:gDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1110">
    <description> Cast a simple xs:untypedAtomic value to &quot;---03&quot; .</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(xs:untypedAtomic( &quot;---03&quot; )) eq xs:gDay(&quot;---03&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1111">
    <description> It is not possible to extract an Effective Boolean Value from the type xs:gDay, with the boolean() function.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:gDay(&quot;---03&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0006&quot;))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1112">
    <description> Casting from xs:gDay to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;---03&quot;) cast as xs:untypedAtomic ne xs:untypedAtomic(&quot;an arbitrary string(untypedAtomic source)&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1113">
    <description> 'castable as' involving xs:gDay as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;---03&quot;) castable as xs:untypedAtomic</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1114">
    <description> Casting from xs:gDay to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;---03&quot;) cast as xs:string ne xs:string(&quot;an arbitrary string&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1115">
    <description> 'castable as' involving xs:gDay as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;---03&quot;) castable as xs:string</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1116">
    <description> Casting from xs:gDay to xs:float isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;---03&quot;) cast as xs:float</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1117">
    <description> 'castable as' involving xs:gDay as source type and xs:float as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gDay(&quot;---03&quot;) castable as xs:float)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1118">
    <description> Casting from xs:gDay to xs:double isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;---03&quot;) cast as xs:double</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1119">
    <description> 'castable as' involving xs:gDay as source type and xs:double as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gDay(&quot;---03&quot;) castable as xs:double)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1120">
    <description> Casting from xs:gDay to xs:decimal isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;---03&quot;) cast as xs:decimal</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1121">
    <description> 'castable as' involving xs:gDay as source type and xs:decimal as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gDay(&quot;---03&quot;) castable as xs:decimal)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1122">
    <description> Casting from xs:gDay to xs:integer isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;---03&quot;) cast as xs:integer</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1123">
    <description> 'castable as' involving xs:gDay as source type and xs:integer as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gDay(&quot;---03&quot;) castable as xs:integer)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1124">
    <description> Casting from xs:gDay to xs:duration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;---03&quot;) cast as xs:duration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1125">
    <description> 'castable as' involving xs:gDay as source type and xs:duration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gDay(&quot;---03&quot;) castable as xs:duration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1126">
    <description> Casting from xs:gDay to xs:yearMonthDuration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;---03&quot;) cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1127">
    <description> 'castable as' involving xs:gDay as source type and xs:yearMonthDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gDay(&quot;---03&quot;) castable as xs:yearMonthDuration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1128">
    <description> Casting from xs:gDay to xs:dayTimeDuration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;---03&quot;) cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1129">
    <description> 'castable as' involving xs:gDay as source type and xs:dayTimeDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gDay(&quot;---03&quot;) castable as xs:dayTimeDuration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1130">
    <description> Casting from xs:gDay to xs:dateTime isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;---03&quot;) cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1131">
    <description> 'castable as' involving xs:gDay as source type and xs:dateTime as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gDay(&quot;---03&quot;) castable as xs:dateTime)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1132">
    <description> Casting from xs:gDay to xs:time isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;---03&quot;) cast as xs:time</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1133">
    <description> 'castable as' involving xs:gDay as source type and xs:time as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gDay(&quot;---03&quot;) castable as xs:time)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1134">
    <description> Casting from xs:gDay to xs:date isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;---03&quot;) cast as xs:date</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1135">
    <description> 'castable as' involving xs:gDay as source type and xs:date as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gDay(&quot;---03&quot;) castable as xs:date)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1136">
    <description> Casting from xs:gDay to xs:gYearMonth isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;---03&quot;) cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1137">
    <description> 'castable as' involving xs:gDay as source type and xs:gYearMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gDay(&quot;---03&quot;) castable as xs:gYearMonth)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1138">
    <description> Casting from xs:gDay to xs:gYear isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;---03&quot;) cast as xs:gYear</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1139">
    <description> 'castable as' involving xs:gDay as source type and xs:gYear as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gDay(&quot;---03&quot;) castable as xs:gYear)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1140">
    <description> Casting from xs:gDay to xs:gMonthDay isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;---03&quot;) cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1141">
    <description> 'castable as' involving xs:gDay as source type and xs:gMonthDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gDay(&quot;---03&quot;) castable as xs:gMonthDay)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1142">
    <description> Casting from xs:gDay to xs:gDay is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;---03&quot;) cast as xs:gDay eq xs:gDay(&quot;---03&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1143">
    <description> 'castable as' involving xs:gDay as source type and xs:gDay as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;---03&quot;) castable as xs:gDay</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1144">
    <description> Casting from xs:gDay to xs:gMonth isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;---03&quot;) cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1145">
    <description> 'castable as' involving xs:gDay as source type and xs:gMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gDay(&quot;---03&quot;) castable as xs:gMonth)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1146">
    <description> Casting from xs:gDay to xs:boolean isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;---03&quot;) cast as xs:boolean</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1147">
    <description> 'castable as' involving xs:gDay as source type and xs:boolean as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gDay(&quot;---03&quot;) castable as xs:boolean)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1148">
    <description> Casting from xs:gDay to xs:base64Binary isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;---03&quot;) cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1149">
    <description> 'castable as' involving xs:gDay as source type and xs:base64Binary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gDay(&quot;---03&quot;) castable as xs:base64Binary)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1150">
    <description> Casting from xs:gDay to xs:hexBinary isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;---03&quot;) cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1151">
    <description> 'castable as' involving xs:gDay as source type and xs:hexBinary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gDay(&quot;---03&quot;) castable as xs:hexBinary)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1152">
    <description> Casting from xs:gDay to xs:anyURI isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;---03&quot;) cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1153">
    <description> 'castable as' involving xs:gDay as source type and xs:anyURI as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gDay(&quot;---03&quot;) castable as xs:anyURI)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1154">
    <description> Casting from xs:gDay to xs:QName isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(&quot;---03&quot;) cast as xs:QName</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1155">
    <description> 'castable as' involving xs:gDay as source type and xs:QName as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gDay(&quot;---03&quot;) castable as xs:QName)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1156">
    <description> 'castable as' involving xs:gDay as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gDay(&quot;---03&quot;) castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0080&quot;))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1157">
    <description> The xs:gMonth constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1158">
    <description> The xs:gMonth constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth( &quot;--11&quot; , &quot;--11&quot; )</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1159">
    <description> Verify with 'instance of' that the xs:gMonth constructor function produces values of the correct type. 
      The subsequence() function makes it more difficult for optimizers to take short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence((&quot;dummy&quot;, 1.1, xs:gMonth(&quot;--11&quot;)), 3, 1) instance of xs:gMonth</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1160">
    <description> A simple test exercising the whitespace facet for type xs:gMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(&quot; --11 &quot;) eq xs:gMonth(&quot; --11 &quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1161">
    <description> An empty string is not a valid lexical representation of xs:gMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(&quot;&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1162">
    <description> Cast a simple xs:untypedAtomic value to &quot;--11&quot; .</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(xs:untypedAtomic( &quot;--11&quot; )) eq xs:gMonth(&quot;--11&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1163">
    <description> It is not possible to extract an Effective Boolean Value from the type xs:gMonth, with the boolean() function.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:gMonth(&quot;--11&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0006&quot;))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1164">
    <description> Casting from xs:gMonth to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(&quot;--11&quot;) cast as xs:untypedAtomic ne xs:untypedAtomic(&quot;an arbitrary string(untypedAtomic source)&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1165">
    <description> 'castable as' involving xs:gMonth as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(&quot;--11&quot;) castable as xs:untypedAtomic</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1166">
    <description> Casting from xs:gMonth to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(&quot;--11&quot;) cast as xs:string ne xs:string(&quot;an arbitrary string&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1167">
    <description> 'castable as' involving xs:gMonth as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(&quot;--11&quot;) castable as xs:string</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1168">
    <description> Casting from xs:gMonth to xs:float isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(&quot;--11&quot;) cast as xs:float</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1169">
    <description> 'castable as' involving xs:gMonth as source type and xs:float as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonth(&quot;--11&quot;) castable as xs:float)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1170">
    <description> Casting from xs:gMonth to xs:double isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(&quot;--11&quot;) cast as xs:double</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1171">
    <description> 'castable as' involving xs:gMonth as source type and xs:double as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonth(&quot;--11&quot;) castable as xs:double)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1172">
    <description> Casting from xs:gMonth to xs:decimal isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(&quot;--11&quot;) cast as xs:decimal</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1173">
    <description> 'castable as' involving xs:gMonth as source type and xs:decimal as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonth(&quot;--11&quot;) castable as xs:decimal)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1174">
    <description> Casting from xs:gMonth to xs:integer isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(&quot;--11&quot;) cast as xs:integer</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1175">
    <description> 'castable as' involving xs:gMonth as source type and xs:integer as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonth(&quot;--11&quot;) castable as xs:integer)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1176">
    <description> Casting from xs:gMonth to xs:duration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(&quot;--11&quot;) cast as xs:duration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1177">
    <description> 'castable as' involving xs:gMonth as source type and xs:duration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonth(&quot;--11&quot;) castable as xs:duration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1178">
    <description> Casting from xs:gMonth to xs:yearMonthDuration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(&quot;--11&quot;) cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1179">
    <description> 'castable as' involving xs:gMonth as source type and xs:yearMonthDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonth(&quot;--11&quot;) castable as xs:yearMonthDuration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1180">
    <description> Casting from xs:gMonth to xs:dayTimeDuration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(&quot;--11&quot;) cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1181">
    <description> 'castable as' involving xs:gMonth as source type and xs:dayTimeDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonth(&quot;--11&quot;) castable as xs:dayTimeDuration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1182">
    <description> Casting from xs:gMonth to xs:dateTime isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(&quot;--11&quot;) cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1183">
    <description> 'castable as' involving xs:gMonth as source type and xs:dateTime as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonth(&quot;--11&quot;) castable as xs:dateTime)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1184">
    <description> Casting from xs:gMonth to xs:time isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(&quot;--11&quot;) cast as xs:time</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1185">
    <description> 'castable as' involving xs:gMonth as source type and xs:time as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonth(&quot;--11&quot;) castable as xs:time)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1186">
    <description> Casting from xs:gMonth to xs:date isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(&quot;--11&quot;) cast as xs:date</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1187">
    <description> 'castable as' involving xs:gMonth as source type and xs:date as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonth(&quot;--11&quot;) castable as xs:date)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1188">
    <description> Casting from xs:gMonth to xs:gYearMonth isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(&quot;--11&quot;) cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1189">
    <description> 'castable as' involving xs:gMonth as source type and xs:gYearMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonth(&quot;--11&quot;) castable as xs:gYearMonth)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1190">
    <description> Casting from xs:gMonth to xs:gYear isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(&quot;--11&quot;) cast as xs:gYear</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1191">
    <description> 'castable as' involving xs:gMonth as source type and xs:gYear as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonth(&quot;--11&quot;) castable as xs:gYear)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1192">
    <description> Casting from xs:gMonth to xs:gMonthDay isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(&quot;--11&quot;) cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1193">
    <description> 'castable as' involving xs:gMonth as source type and xs:gMonthDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonth(&quot;--11&quot;) castable as xs:gMonthDay)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1194">
    <description> Casting from xs:gMonth to xs:gDay isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(&quot;--11&quot;) cast as xs:gDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1195">
    <description> 'castable as' involving xs:gMonth as source type and xs:gDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonth(&quot;--11&quot;) castable as xs:gDay)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1196">
    <description> Casting from xs:gMonth to xs:gMonth is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(&quot;--11&quot;) cast as xs:gMonth eq xs:gMonth(&quot;--11&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1197">
    <description> 'castable as' involving xs:gMonth as source type and xs:gMonth as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(&quot;--11&quot;) castable as xs:gMonth</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1198">
    <description> Casting from xs:gMonth to xs:boolean isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(&quot;--11&quot;) cast as xs:boolean</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1199">
    <description> 'castable as' involving xs:gMonth as source type and xs:boolean as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonth(&quot;--11&quot;) castable as xs:boolean)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1200">
    <description> Casting from xs:gMonth to xs:base64Binary isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(&quot;--11&quot;) cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1201">
    <description> 'castable as' involving xs:gMonth as source type and xs:base64Binary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonth(&quot;--11&quot;) castable as xs:base64Binary)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1202">
    <description> Casting from xs:gMonth to xs:hexBinary isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(&quot;--11&quot;) cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1203">
    <description> 'castable as' involving xs:gMonth as source type and xs:hexBinary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonth(&quot;--11&quot;) castable as xs:hexBinary)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1204">
    <description> Casting from xs:gMonth to xs:anyURI isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(&quot;--11&quot;) cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1205">
    <description> 'castable as' involving xs:gMonth as source type and xs:anyURI as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonth(&quot;--11&quot;) castable as xs:anyURI)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1206">
    <description> Casting from xs:gMonth to xs:QName isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(&quot;--11&quot;) cast as xs:QName</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1207">
    <description> 'castable as' involving xs:gMonth as source type and xs:QName as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonth(&quot;--11&quot;) castable as xs:QName)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1208">
    <description> 'castable as' involving xs:gMonth as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonth(&quot;--11&quot;) castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0080&quot;))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1209">
    <description> The xs:boolean constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1210">
    <description> The xs:boolean constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean( &quot;true&quot; , &quot;true&quot; )</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1211">
    <description> Verify with 'instance of' that the xs:boolean constructor function produces values of the correct type. 
      The subsequence() function makes it more difficult for optimizers to take short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence((&quot;dummy&quot;, 1.1, xs:boolean(&quot;true&quot;)), 3, 1) instance of xs:boolean</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1212">
    <description> A simple test exercising the whitespace facet for type xs:boolean.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(&quot; true &quot;) eq xs:boolean(&quot; true &quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1213">
    <description> An empty string is not a valid lexical representation of xs:boolean.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(&quot;&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1214">
    <description> Cast a simple xs:untypedAtomic value to &quot;true&quot; .</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(xs:untypedAtomic( &quot;true&quot; )) eq xs:boolean(&quot;true&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1215">
    <description> Applying fn:boolean() to a value of type xs:boolean that has the lexical value ' &quot;true&quot; ' 
      should result in the boolean value true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:boolean(&quot;true&quot;))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1216">
    <description> Casting from xs:boolean to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(&quot;true&quot;) cast as xs:untypedAtomic ne xs:untypedAtomic(&quot;an arbitrary string(untypedAtomic source)&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1217">
    <description> 'castable as' involving xs:boolean as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(&quot;true&quot;) castable as xs:untypedAtomic</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1218">
    <description> Casting from xs:boolean to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(&quot;true&quot;) cast as xs:string ne xs:string(&quot;an arbitrary string&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1219">
    <description> 'castable as' involving xs:boolean as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(&quot;true&quot;) castable as xs:string</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1220">
    <description> Casting from xs:boolean to xs:float is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(&quot;true&quot;) cast as xs:float ne xs:float(&quot;3.4e5&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1221">
    <description> 'castable as' involving xs:boolean as source type and xs:float as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(&quot;true&quot;) castable as xs:float</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1222">
    <description> Casting from xs:boolean to xs:double is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(&quot;true&quot;) cast as xs:double ne xs:double(&quot;3.3e3&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1223">
    <description> 'castable as' involving xs:boolean as source type and xs:double as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(&quot;true&quot;) castable as xs:double</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1224">
    <description> Casting from xs:boolean to xs:decimal is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(&quot;true&quot;) cast as xs:decimal ne xs:decimal(&quot;10.01&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1225">
    <description> 'castable as' involving xs:boolean as source type and xs:decimal as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(&quot;true&quot;) castable as xs:decimal</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1226">
    <description> Casting from xs:boolean to xs:integer is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(&quot;true&quot;) cast as xs:integer ne xs:integer(&quot;6789&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1227">
    <description> 'castable as' involving xs:boolean as source type and xs:integer as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(&quot;true&quot;) castable as xs:integer</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1228">
    <description> Casting from xs:boolean to xs:duration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(&quot;true&quot;) cast as xs:duration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1229">
    <description> 'castable as' involving xs:boolean as source type and xs:duration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:boolean(&quot;true&quot;) castable as xs:duration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1230">
    <description> Casting from xs:boolean to xs:yearMonthDuration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(&quot;true&quot;) cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1231">
    <description> 'castable as' involving xs:boolean as source type and xs:yearMonthDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:boolean(&quot;true&quot;) castable as xs:yearMonthDuration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1232">
    <description> Casting from xs:boolean to xs:dayTimeDuration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(&quot;true&quot;) cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1233">
    <description> 'castable as' involving xs:boolean as source type and xs:dayTimeDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:boolean(&quot;true&quot;) castable as xs:dayTimeDuration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1234">
    <description> Casting from xs:boolean to xs:dateTime isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(&quot;true&quot;) cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1235">
    <description> 'castable as' involving xs:boolean as source type and xs:dateTime as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:boolean(&quot;true&quot;) castable as xs:dateTime)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1236">
    <description> Casting from xs:boolean to xs:time isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(&quot;true&quot;) cast as xs:time</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1237">
    <description> 'castable as' involving xs:boolean as source type and xs:time as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:boolean(&quot;true&quot;) castable as xs:time)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1238">
    <description> Casting from xs:boolean to xs:date isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(&quot;true&quot;) cast as xs:date</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1239">
    <description> 'castable as' involving xs:boolean as source type and xs:date as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:boolean(&quot;true&quot;) castable as xs:date)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1240">
    <description> Casting from xs:boolean to xs:gYearMonth isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(&quot;true&quot;) cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1241">
    <description> 'castable as' involving xs:boolean as source type and xs:gYearMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:boolean(&quot;true&quot;) castable as xs:gYearMonth)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1242">
    <description> Casting from xs:boolean to xs:gYear isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(&quot;true&quot;) cast as xs:gYear</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1243">
    <description> 'castable as' involving xs:boolean as source type and xs:gYear as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:boolean(&quot;true&quot;) castable as xs:gYear)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1244">
    <description> Casting from xs:boolean to xs:gMonthDay isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(&quot;true&quot;) cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1245">
    <description> 'castable as' involving xs:boolean as source type and xs:gMonthDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:boolean(&quot;true&quot;) castable as xs:gMonthDay)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1246">
    <description> Casting from xs:boolean to xs:gDay isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(&quot;true&quot;) cast as xs:gDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1247">
    <description> 'castable as' involving xs:boolean as source type and xs:gDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:boolean(&quot;true&quot;) castable as xs:gDay)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1248">
    <description> Casting from xs:boolean to xs:gMonth isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(&quot;true&quot;) cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1249">
    <description> 'castable as' involving xs:boolean as source type and xs:gMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:boolean(&quot;true&quot;) castable as xs:gMonth)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1250">
    <description> Casting from xs:boolean to xs:boolean is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(&quot;true&quot;) cast as xs:boolean eq xs:boolean(&quot;true&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1251">
    <description> 'castable as' involving xs:boolean as source type and xs:boolean as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(&quot;true&quot;) castable as xs:boolean</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1252">
    <description> Casting from xs:boolean to xs:base64Binary isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(&quot;true&quot;) cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1253">
    <description> 'castable as' involving xs:boolean as source type and xs:base64Binary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:boolean(&quot;true&quot;) castable as xs:base64Binary)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1254">
    <description> Casting from xs:boolean to xs:hexBinary isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(&quot;true&quot;) cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1255">
    <description> 'castable as' involving xs:boolean as source type and xs:hexBinary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:boolean(&quot;true&quot;) castable as xs:hexBinary)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1256">
    <description> Casting from xs:boolean to xs:anyURI isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(&quot;true&quot;) cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1257">
    <description> 'castable as' involving xs:boolean as source type and xs:anyURI as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:boolean(&quot;true&quot;) castable as xs:anyURI)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1258">
    <description> Casting from xs:boolean to xs:QName isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(&quot;true&quot;) cast as xs:QName</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1259">
    <description> 'castable as' involving xs:boolean as source type and xs:QName as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:boolean(&quot;true&quot;) castable as xs:QName)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1260">
    <description> 'castable as' involving xs:boolean as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:boolean(&quot;true&quot;) castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0080&quot;))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1261">
    <description> The xs:base64Binary constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1262">
    <description> The xs:base64Binary constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary( &quot;aaaa&quot; , &quot;aaaa&quot; )</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1263">
    <description> Verify with 'instance of' that the xs:base64Binary constructor function produces values of the correct type. 
      The subsequence() function makes it more difficult for optimizers to take short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence((&quot;dummy&quot;, 1.1, xs:base64Binary(&quot;aaaa&quot;)), 3, 1) instance of xs:base64Binary</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1264">
    <description> A simple test exercising the whitespace facet for type xs:base64Binary.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary(&quot; aaaa &quot;) eq xs:base64Binary(&quot; aaaa &quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1265">
    <description> An empty string is a valid lexical representation of xs:base64Binary.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary(&quot;&quot;) eq xs:base64Binary(&quot;&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1266">
    <description> Cast a simple xs:untypedAtomic value to &quot;aaaa&quot; .</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary(xs:untypedAtomic( &quot;aaaa&quot; )) eq xs:base64Binary(&quot;aaaa&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1267">
    <description> It is not possible to extract an Effective Boolean Value from the type xs:base64Binary, with the boolean() function.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:base64Binary(&quot;aaaa&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0006&quot;))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1268">
    <description> Casting from xs:base64Binary to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary(&quot;aaaa&quot;) cast as xs:untypedAtomic ne xs:untypedAtomic(&quot;an arbitrary string(untypedAtomic source)&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1269">
    <description> 'castable as' involving xs:base64Binary as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary(&quot;aaaa&quot;) castable as xs:untypedAtomic</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1270">
    <description> Casting from xs:base64Binary to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary(&quot;aaaa&quot;) cast as xs:string ne xs:string(&quot;an arbitrary string&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1271">
    <description> 'castable as' involving xs:base64Binary as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary(&quot;aaaa&quot;) castable as xs:string</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1272">
    <description> Casting from xs:base64Binary to xs:float isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary(&quot;aaaa&quot;) cast as xs:float</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1273">
    <description> 'castable as' involving xs:base64Binary as source type and xs:float as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:base64Binary(&quot;aaaa&quot;) castable as xs:float)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1274">
    <description> Casting from xs:base64Binary to xs:double isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary(&quot;aaaa&quot;) cast as xs:double</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1275">
    <description> 'castable as' involving xs:base64Binary as source type and xs:double as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:base64Binary(&quot;aaaa&quot;) castable as xs:double)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1276">
    <description> Casting from xs:base64Binary to xs:decimal isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary(&quot;aaaa&quot;) cast as xs:decimal</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1277">
    <description> 'castable as' involving xs:base64Binary as source type and xs:decimal as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:base64Binary(&quot;aaaa&quot;) castable as xs:decimal)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1278">
    <description> Casting from xs:base64Binary to xs:integer isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary(&quot;aaaa&quot;) cast as xs:integer</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1279">
    <description> 'castable as' involving xs:base64Binary as source type and xs:integer as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:base64Binary(&quot;aaaa&quot;) castable as xs:integer)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1280">
    <description> Casting from xs:base64Binary to xs:duration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary(&quot;aaaa&quot;) cast as xs:duration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1281">
    <description> 'castable as' involving xs:base64Binary as source type and xs:duration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:base64Binary(&quot;aaaa&quot;) castable as xs:duration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1282">
    <description> Casting from xs:base64Binary to xs:yearMonthDuration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary(&quot;aaaa&quot;) cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1283">
    <description> 'castable as' involving xs:base64Binary as source type and xs:yearMonthDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:base64Binary(&quot;aaaa&quot;) castable as xs:yearMonthDuration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1284">
    <description> Casting from xs:base64Binary to xs:dayTimeDuration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary(&quot;aaaa&quot;) cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1285">
    <description> 'castable as' involving xs:base64Binary as source type and xs:dayTimeDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:base64Binary(&quot;aaaa&quot;) castable as xs:dayTimeDuration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1286">
    <description> Casting from xs:base64Binary to xs:dateTime isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary(&quot;aaaa&quot;) cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1287">
    <description> 'castable as' involving xs:base64Binary as source type and xs:dateTime as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:base64Binary(&quot;aaaa&quot;) castable as xs:dateTime)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1288">
    <description> Casting from xs:base64Binary to xs:time isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary(&quot;aaaa&quot;) cast as xs:time</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1289">
    <description> 'castable as' involving xs:base64Binary as source type and xs:time as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:base64Binary(&quot;aaaa&quot;) castable as xs:time)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1290">
    <description> Casting from xs:base64Binary to xs:date isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary(&quot;aaaa&quot;) cast as xs:date</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1291">
    <description> 'castable as' involving xs:base64Binary as source type and xs:date as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:base64Binary(&quot;aaaa&quot;) castable as xs:date)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1292">
    <description> Casting from xs:base64Binary to xs:gYearMonth isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary(&quot;aaaa&quot;) cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1293">
    <description> 'castable as' involving xs:base64Binary as source type and xs:gYearMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:base64Binary(&quot;aaaa&quot;) castable as xs:gYearMonth)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1294">
    <description> Casting from xs:base64Binary to xs:gYear isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary(&quot;aaaa&quot;) cast as xs:gYear</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1295">
    <description> 'castable as' involving xs:base64Binary as source type and xs:gYear as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:base64Binary(&quot;aaaa&quot;) castable as xs:gYear)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1296">
    <description> Casting from xs:base64Binary to xs:gMonthDay isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary(&quot;aaaa&quot;) cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1297">
    <description> 'castable as' involving xs:base64Binary as source type and xs:gMonthDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:base64Binary(&quot;aaaa&quot;) castable as xs:gMonthDay)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1298">
    <description> Casting from xs:base64Binary to xs:gDay isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary(&quot;aaaa&quot;) cast as xs:gDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1299">
    <description> 'castable as' involving xs:base64Binary as source type and xs:gDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:base64Binary(&quot;aaaa&quot;) castable as xs:gDay)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1300">
    <description> Casting from xs:base64Binary to xs:gMonth isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary(&quot;aaaa&quot;) cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1301">
    <description> 'castable as' involving xs:base64Binary as source type and xs:gMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:base64Binary(&quot;aaaa&quot;) castable as xs:gMonth)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1302">
    <description> Casting from xs:base64Binary to xs:boolean isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary(&quot;aaaa&quot;) cast as xs:boolean</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1303">
    <description> 'castable as' involving xs:base64Binary as source type and xs:boolean as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:base64Binary(&quot;aaaa&quot;) castable as xs:boolean)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1304">
    <description> Casting from xs:base64Binary to xs:base64Binary is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary(&quot;aaaa&quot;) cast as xs:base64Binary eq xs:base64Binary(&quot;aaaa&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1305">
    <description> 'castable as' involving xs:base64Binary as source type and xs:base64Binary as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary(&quot;aaaa&quot;) castable as xs:base64Binary</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1306">
    <description> Casting from xs:base64Binary to xs:hexBinary is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary(&quot;aaaa&quot;) cast as xs:hexBinary ne xs:hexBinary(&quot;0FB7&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1307">
    <description> 'castable as' involving xs:base64Binary as source type and xs:hexBinary as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary(&quot;aaaa&quot;) castable as xs:hexBinary</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1308">
    <description> Casting from xs:base64Binary to xs:anyURI isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary(&quot;aaaa&quot;) cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1309">
    <description> 'castable as' involving xs:base64Binary as source type and xs:anyURI as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:base64Binary(&quot;aaaa&quot;) castable as xs:anyURI)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1310">
    <description> Casting from xs:base64Binary to xs:QName isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary(&quot;aaaa&quot;) cast as xs:QName</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1311">
    <description> 'castable as' involving xs:base64Binary as source type and xs:QName as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:base64Binary(&quot;aaaa&quot;) castable as xs:QName)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1312">
    <description> 'castable as' involving xs:base64Binary as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:base64Binary(&quot;aaaa&quot;) castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0080&quot;))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1313">
    <description> The xs:hexBinary constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1314">
    <description> The xs:hexBinary constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary( &quot;0FB7&quot; , &quot;0FB7&quot; )</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1315">
    <description> Verify with 'instance of' that the xs:hexBinary constructor function produces values of the correct type. 
      The subsequence() function makes it more difficult for optimizers to take short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence((&quot;dummy&quot;, 1.1, xs:hexBinary(&quot;0FB7&quot;)), 3, 1) instance of xs:hexBinary</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1316">
    <description> A simple test exercising the whitespace facet for type xs:hexBinary.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary(&quot; 0FB7 &quot;) eq xs:hexBinary(&quot; 0FB7 &quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1317">
    <description> An empty string is a valid lexical representation of xs:hexBinary.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary(&quot;&quot;) eq xs:hexBinary(&quot;&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1318">
    <description> Cast a simple xs:untypedAtomic value to &quot;0FB7&quot; .</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary(xs:untypedAtomic( &quot;0FB7&quot; )) eq xs:hexBinary(&quot;0FB7&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1319">
    <description> It is not possible to extract an Effective Boolean Value from the type xs:hexBinary, with the boolean() function.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:hexBinary(&quot;0FB7&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0006&quot;))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1320">
    <description> Casting from xs:hexBinary to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary(&quot;0FB7&quot;) cast as xs:untypedAtomic ne xs:untypedAtomic(&quot;an arbitrary string(untypedAtomic source)&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1321">
    <description> 'castable as' involving xs:hexBinary as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary(&quot;0FB7&quot;) castable as xs:untypedAtomic</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1322">
    <description> Casting from xs:hexBinary to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary(&quot;0FB7&quot;) cast as xs:string ne xs:string(&quot;an arbitrary string&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1323">
    <description> 'castable as' involving xs:hexBinary as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary(&quot;0FB7&quot;) castable as xs:string</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1324">
    <description> Casting from xs:hexBinary to xs:float isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary(&quot;0FB7&quot;) cast as xs:float</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1325">
    <description> 'castable as' involving xs:hexBinary as source type and xs:float as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:hexBinary(&quot;0FB7&quot;) castable as xs:float)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1326">
    <description> Casting from xs:hexBinary to xs:double isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary(&quot;0FB7&quot;) cast as xs:double</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1327">
    <description> 'castable as' involving xs:hexBinary as source type and xs:double as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:hexBinary(&quot;0FB7&quot;) castable as xs:double)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1328">
    <description> Casting from xs:hexBinary to xs:decimal isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary(&quot;0FB7&quot;) cast as xs:decimal</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1329">
    <description> 'castable as' involving xs:hexBinary as source type and xs:decimal as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:hexBinary(&quot;0FB7&quot;) castable as xs:decimal)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1330">
    <description> Casting from xs:hexBinary to xs:integer isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary(&quot;0FB7&quot;) cast as xs:integer</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1331">
    <description> 'castable as' involving xs:hexBinary as source type and xs:integer as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:hexBinary(&quot;0FB7&quot;) castable as xs:integer)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1332">
    <description> Casting from xs:hexBinary to xs:duration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary(&quot;0FB7&quot;) cast as xs:duration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1333">
    <description> 'castable as' involving xs:hexBinary as source type and xs:duration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:hexBinary(&quot;0FB7&quot;) castable as xs:duration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1334">
    <description> Casting from xs:hexBinary to xs:yearMonthDuration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary(&quot;0FB7&quot;) cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1335">
    <description> 'castable as' involving xs:hexBinary as source type and xs:yearMonthDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:hexBinary(&quot;0FB7&quot;) castable as xs:yearMonthDuration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1336">
    <description> Casting from xs:hexBinary to xs:dayTimeDuration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary(&quot;0FB7&quot;) cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1337">
    <description> 'castable as' involving xs:hexBinary as source type and xs:dayTimeDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:hexBinary(&quot;0FB7&quot;) castable as xs:dayTimeDuration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1338">
    <description> Casting from xs:hexBinary to xs:dateTime isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary(&quot;0FB7&quot;) cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1339">
    <description> 'castable as' involving xs:hexBinary as source type and xs:dateTime as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:hexBinary(&quot;0FB7&quot;) castable as xs:dateTime)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1340">
    <description> Casting from xs:hexBinary to xs:time isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary(&quot;0FB7&quot;) cast as xs:time</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1341">
    <description> 'castable as' involving xs:hexBinary as source type and xs:time as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:hexBinary(&quot;0FB7&quot;) castable as xs:time)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1342">
    <description> Casting from xs:hexBinary to xs:date isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary(&quot;0FB7&quot;) cast as xs:date</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1343">
    <description> 'castable as' involving xs:hexBinary as source type and xs:date as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:hexBinary(&quot;0FB7&quot;) castable as xs:date)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1344">
    <description> Casting from xs:hexBinary to xs:gYearMonth isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary(&quot;0FB7&quot;) cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1345">
    <description> 'castable as' involving xs:hexBinary as source type and xs:gYearMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:hexBinary(&quot;0FB7&quot;) castable as xs:gYearMonth)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1346">
    <description> Casting from xs:hexBinary to xs:gYear isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary(&quot;0FB7&quot;) cast as xs:gYear</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1347">
    <description> 'castable as' involving xs:hexBinary as source type and xs:gYear as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:hexBinary(&quot;0FB7&quot;) castable as xs:gYear)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1348">
    <description> Casting from xs:hexBinary to xs:gMonthDay isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary(&quot;0FB7&quot;) cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1349">
    <description> 'castable as' involving xs:hexBinary as source type and xs:gMonthDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:hexBinary(&quot;0FB7&quot;) castable as xs:gMonthDay)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1350">
    <description> Casting from xs:hexBinary to xs:gDay isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary(&quot;0FB7&quot;) cast as xs:gDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1351">
    <description> 'castable as' involving xs:hexBinary as source type and xs:gDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:hexBinary(&quot;0FB7&quot;) castable as xs:gDay)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1352">
    <description> Casting from xs:hexBinary to xs:gMonth isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary(&quot;0FB7&quot;) cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1353">
    <description> 'castable as' involving xs:hexBinary as source type and xs:gMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:hexBinary(&quot;0FB7&quot;) castable as xs:gMonth)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1354">
    <description> Casting from xs:hexBinary to xs:boolean isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary(&quot;0FB7&quot;) cast as xs:boolean</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1355">
    <description> 'castable as' involving xs:hexBinary as source type and xs:boolean as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:hexBinary(&quot;0FB7&quot;) castable as xs:boolean)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1356">
    <description> Casting from xs:hexBinary to xs:base64Binary is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary(&quot;0FB7&quot;) cast as xs:base64Binary ne xs:base64Binary(&quot;aaaa&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1357">
    <description> 'castable as' involving xs:hexBinary as source type and xs:base64Binary as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary(&quot;0FB7&quot;) castable as xs:base64Binary</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1358">
    <description> Casting from xs:hexBinary to xs:hexBinary is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary(&quot;0FB7&quot;) cast as xs:hexBinary eq xs:hexBinary(&quot;0FB7&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1359">
    <description> 'castable as' involving xs:hexBinary as source type and xs:hexBinary as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary(&quot;0FB7&quot;) castable as xs:hexBinary</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1360">
    <description> Casting from xs:hexBinary to xs:anyURI isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary(&quot;0FB7&quot;) cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1361">
    <description> 'castable as' involving xs:hexBinary as source type and xs:anyURI as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:hexBinary(&quot;0FB7&quot;) castable as xs:anyURI)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1362">
    <description> Casting from xs:hexBinary to xs:QName isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary(&quot;0FB7&quot;) cast as xs:QName</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1363">
    <description> 'castable as' involving xs:hexBinary as source type and xs:QName as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:hexBinary(&quot;0FB7&quot;) castable as xs:QName)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1364">
    <description> 'castable as' involving xs:hexBinary as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:hexBinary(&quot;0FB7&quot;) castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0080&quot;))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1365">
    <description> The xs:anyURI constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1366">
    <description> The xs:anyURI constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI( &quot;http://www.example.com/an/arbitrary/URI.ext&quot; , &quot;http://www.example.com/an/arbitrary/URI.ext&quot; )</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1367">
    <description> Verify with 'instance of' that the xs:anyURI constructor function produces values of the correct type. 
      The subsequence() function makes it more difficult for optimizers to take short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence((&quot;dummy&quot;, 1.1, xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;)), 3, 1) instance of xs:anyURI</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1368">
    <description> A simple test exercising the whitespace facet for type xs:anyURI.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI(&quot; http://www.example.com/an/arbitrary/URI.ext &quot;) eq xs:anyURI(&quot; http://www.example.com/an/arbitrary/URI.ext &quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1369">
    <description> An empty string is a valid lexical representation of xs:anyURI.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI(&quot;&quot;) eq xs:anyURI(&quot;&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1370">
    <description> Cast a simple xs:untypedAtomic value to &quot;http://www.example.com/an/arbitrary/URI.ext&quot; .</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI(xs:untypedAtomic( &quot;http://www.example.com/an/arbitrary/URI.ext&quot; )) 
      eq xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1371">
    <description> Applying fn:boolean() to a value of type xs:anyURI that has the lexical value 
      ' &quot;http://www.example.com/an/arbitrary/URI.ext&quot; ' should result in the boolean value true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1372">
    <description> Casting from xs:anyURI to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) cast as xs:untypedAtomic
      ne xs:untypedAtomic(&quot;an arbitrary string(untypedAtomic source)&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1373">
    <description> 'castable as' involving xs:anyURI as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) castable as xs:untypedAtomic</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1374">
    <description> Casting from xs:anyURI to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) cast as xs:string ne xs:string(&quot;an arbitrary string&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1375">
    <description> 'castable as' involving xs:anyURI as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) castable as xs:string</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1376">
    <description> Casting from xs:anyURI to xs:float isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) cast as xs:float</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1377">
    <description> 'castable as' involving xs:anyURI as source type and xs:float as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) castable as xs:float)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1378">
    <description> Casting from xs:anyURI to xs:double isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) cast as xs:double</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1379">
    <description> 'castable as' involving xs:anyURI as source type and xs:double as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) castable as xs:double)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1380">
    <description> Casting from xs:anyURI to xs:decimal isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) cast as xs:decimal</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1381">
    <description> 'castable as' involving xs:anyURI as source type and xs:decimal as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) castable as xs:decimal)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1382">
    <description> Casting from xs:anyURI to xs:integer isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) cast as xs:integer</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1383">
    <description> 'castable as' involving xs:anyURI as source type and xs:integer as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) castable as xs:integer)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1384">
    <description> Casting from xs:anyURI to xs:duration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) cast as xs:duration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1385">
    <description> 'castable as' involving xs:anyURI as source type and xs:duration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) castable as xs:duration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1386">
    <description> Casting from xs:anyURI to xs:yearMonthDuration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1387">
    <description> 'castable as' involving xs:anyURI as source type and xs:yearMonthDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) castable as xs:yearMonthDuration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1388">
    <description> Casting from xs:anyURI to xs:dayTimeDuration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1389">
    <description> 'castable as' involving xs:anyURI as source type and xs:dayTimeDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) castable as xs:dayTimeDuration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1390">
    <description> Casting from xs:anyURI to xs:dateTime isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1391">
    <description> 'castable as' involving xs:anyURI as source type and xs:dateTime as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) castable as xs:dateTime)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1392">
    <description> Casting from xs:anyURI to xs:time isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) cast as xs:time</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1393">
    <description> 'castable as' involving xs:anyURI as source type and xs:time as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) castable as xs:time)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1394">
    <description> Casting from xs:anyURI to xs:date isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) cast as xs:date</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1395">
    <description> 'castable as' involving xs:anyURI as source type and xs:date as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) castable as xs:date)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1396">
    <description> Casting from xs:anyURI to xs:gYearMonth isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1397">
    <description> 'castable as' involving xs:anyURI as source type and xs:gYearMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) castable as xs:gYearMonth)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1398">
    <description> Casting from xs:anyURI to xs:gYear isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) cast as xs:gYear</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1399">
    <description> 'castable as' involving xs:anyURI as source type and xs:gYear as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) castable as xs:gYear)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1400">
    <description> Casting from xs:anyURI to xs:gMonthDay isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1401">
    <description> 'castable as' involving xs:anyURI as source type and xs:gMonthDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) castable as xs:gMonthDay)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1402">
    <description> Casting from xs:anyURI to xs:gDay isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) cast as xs:gDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1403">
    <description> 'castable as' involving xs:anyURI as source type and xs:gDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) castable as xs:gDay)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1404">
    <description> Casting from xs:anyURI to xs:gMonth isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1405">
    <description> 'castable as' involving xs:anyURI as source type and xs:gMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) castable as xs:gMonth)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1406">
    <description> Casting from xs:anyURI to xs:boolean isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) cast as xs:boolean</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1407">
    <description> 'castable as' involving xs:anyURI as source type and xs:boolean as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) castable as xs:boolean)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1408">
    <description> Casting from xs:anyURI to xs:base64Binary isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1409">
    <description> 'castable as' involving xs:anyURI as source type and xs:base64Binary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) castable as xs:base64Binary)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1410">
    <description> Casting from xs:anyURI to xs:hexBinary isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1411">
    <description> 'castable as' involving xs:anyURI as source type and xs:hexBinary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) castable as xs:hexBinary)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1412">
    <description> Casting from xs:anyURI to xs:anyURI is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) cast as xs:anyURI eq xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1413">
    <description> 'castable as' involving xs:anyURI as source type and xs:anyURI as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) castable as xs:anyURI</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1414">
    <description> Casting from xs:anyURI to xs:QName isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) cast as xs:QName</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1415">
    <description> 'castable as' involving xs:anyURI as source type and xs:QName as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) castable as xs:QName)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1416">
    <description> 'castable as' involving xs:anyURI as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:anyURI(&quot;http://www.example.com/an/arbitrary/URI.ext&quot;) castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0080&quot;))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1417">
    <description> The xs:QName constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1418">
    <description> The xs:QName constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName( &quot;ncname&quot; , &quot;ncname&quot; )</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1419">
    <description> Verify with 'instance of' that the xs:QName constructor function produces values 
        of the correct type. The subsequence() function makes it more difficult for optimizers to take 
        short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence((&quot;dummy&quot;, 1.1, xs:QName(&quot;ncname&quot;)), 3, 1) instance of xs:QName</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1420">
    <description> A simple test exercising the whitespace facet for type xs:QName.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName(&quot; ncname &quot;) eq xs:QName(&quot; ncname &quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1421">
    <description> An empty string is not a valid lexical representation of xs:QName.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName(&quot;&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1422">
    <description> It is not possible to extract an Effective Boolean Value from the type xs:QName, with the boolean() function.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:QName(&quot;ncname&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0006&quot;))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1423">
    <description> Casting from xs:QName to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName(&quot;ncname&quot;) cast as xs:untypedAtomic ne xs:untypedAtomic(&quot;an arbitrary string(untypedAtomic source)&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1424">
    <description> 'castable as' involving xs:QName as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName(&quot;ncname&quot;) castable as xs:untypedAtomic</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1425">
    <description> Casting from xs:QName to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName(&quot;ncname&quot;) cast as xs:string ne xs:string(&quot;an arbitrary string&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1426">
    <description> 'castable as' involving xs:QName as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName(&quot;ncname&quot;) castable as xs:string</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1427">
    <description> Casting from xs:QName to xs:float isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName(&quot;ncname&quot;) cast as xs:float</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1428">
    <description> 'castable as' involving xs:QName as source type and xs:float as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:QName(&quot;ncname&quot;) castable as xs:float)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1429">
    <description> Casting from xs:QName to xs:double isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName(&quot;ncname&quot;) cast as xs:double</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1430">
    <description> 'castable as' involving xs:QName as source type and xs:double as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:QName(&quot;ncname&quot;) castable as xs:double)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1431">
    <description> Casting from xs:QName to xs:decimal isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName(&quot;ncname&quot;) cast as xs:decimal</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1432">
    <description> 'castable as' involving xs:QName as source type and xs:decimal as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:QName(&quot;ncname&quot;) castable as xs:decimal)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1433">
    <description> Casting from xs:QName to xs:integer isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName(&quot;ncname&quot;) cast as xs:integer</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1434">
    <description> 'castable as' involving xs:QName as source type and xs:integer as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:QName(&quot;ncname&quot;) castable as xs:integer)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1435">
    <description> Casting from xs:QName to xs:duration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName(&quot;ncname&quot;) cast as xs:duration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1436">
    <description> 'castable as' involving xs:QName as source type and xs:duration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:QName(&quot;ncname&quot;) castable as xs:duration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1437">
    <description> Casting from xs:QName to xs:yearMonthDuration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName(&quot;ncname&quot;) cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1438">
    <description> 'castable as' involving xs:QName as source type and xs:yearMonthDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:QName(&quot;ncname&quot;) castable as xs:yearMonthDuration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1439">
    <description> Casting from xs:QName to xs:dayTimeDuration isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName(&quot;ncname&quot;) cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1440">
    <description> 'castable as' involving xs:QName as source type and xs:dayTimeDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:QName(&quot;ncname&quot;) castable as xs:dayTimeDuration)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1441">
    <description> Casting from xs:QName to xs:dateTime isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName(&quot;ncname&quot;) cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1442">
    <description> 'castable as' involving xs:QName as source type and xs:dateTime as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:QName(&quot;ncname&quot;) castable as xs:dateTime)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1443">
    <description> Casting from xs:QName to xs:time isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName(&quot;ncname&quot;) cast as xs:time</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1444">
    <description> 'castable as' involving xs:QName as source type and xs:time as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:QName(&quot;ncname&quot;) castable as xs:time)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1445">
    <description> Casting from xs:QName to xs:date isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName(&quot;ncname&quot;) cast as xs:date</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1446">
    <description> 'castable as' involving xs:QName as source type and xs:date as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:QName(&quot;ncname&quot;) castable as xs:date)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1447">
    <description> Casting from xs:QName to xs:gYearMonth isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName(&quot;ncname&quot;) cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1448">
    <description> 'castable as' involving xs:QName as source type and xs:gYearMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:QName(&quot;ncname&quot;) castable as xs:gYearMonth)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1449">
    <description> Casting from xs:QName to xs:gYear isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName(&quot;ncname&quot;) cast as xs:gYear</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1450">
    <description> 'castable as' involving xs:QName as source type and xs:gYear as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:QName(&quot;ncname&quot;) castable as xs:gYear)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1451">
    <description> Casting from xs:QName to xs:gMonthDay isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName(&quot;ncname&quot;) cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1452">
    <description> 'castable as' involving xs:QName as source type and xs:gMonthDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:QName(&quot;ncname&quot;) castable as xs:gMonthDay)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1453">
    <description> Casting from xs:QName to xs:gDay isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName(&quot;ncname&quot;) cast as xs:gDay</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1454">
    <description> 'castable as' involving xs:QName as source type and xs:gDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:QName(&quot;ncname&quot;) castable as xs:gDay)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1455">
    <description> Casting from xs:QName to xs:gMonth isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName(&quot;ncname&quot;) cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1456">
    <description> 'castable as' involving xs:QName as source type and xs:gMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:QName(&quot;ncname&quot;) castable as xs:gMonth)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1457">
    <description> Casting from xs:QName to xs:boolean isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName(&quot;ncname&quot;) cast as xs:boolean</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1458">
    <description> 'castable as' involving xs:QName as source type and xs:boolean as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:QName(&quot;ncname&quot;) castable as xs:boolean)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1459">
    <description> Casting from xs:QName to xs:base64Binary isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName(&quot;ncname&quot;) cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1460">
    <description> 'castable as' involving xs:QName as source type and xs:base64Binary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:QName(&quot;ncname&quot;) castable as xs:base64Binary)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1461">
    <description> Casting from xs:QName to xs:hexBinary isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName(&quot;ncname&quot;) cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1462">
    <description> 'castable as' involving xs:QName as source type and xs:hexBinary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:QName(&quot;ncname&quot;) castable as xs:hexBinary)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1463">
    <description> Casting from xs:QName to xs:anyURI isn't allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName(&quot;ncname&quot;) cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1464">
    <description> 'castable as' involving xs:QName as source type and xs:anyURI as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:QName(&quot;ncname&quot;) castable as xs:anyURI)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1465">
    <description> 'castable as' involving xs:QName as source type and xs:QName as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName(&quot;ncname&quot;) castable as xs:QName</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1466">
    <description> 'castable as' involving xs:QName as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:QName(&quot;ncname&quot;) castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0080&quot;))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1467">
    <description> The xs:NOTATION constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:NOTATION()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1468">
    <description> The xs:NOTATION constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:NOTATION( &quot;prefix:local&quot; , &quot;prefix:local&quot; )</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1469">
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION(&quot;prefix:local&quot;) castable as xs:untypedAtomic)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1470">
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION(&quot;prefix:local&quot;) castable as xs:string)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1471">
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION(&quot;prefix:local&quot;) castable as xs:float)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1472">
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION(&quot;prefix:local&quot;) castable as xs:double)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1473">
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION(&quot;prefix:local&quot;) castable as xs:decimal)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1474">
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION(&quot;prefix:local&quot;) castable as xs:integer)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1475">
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION(&quot;prefix:local&quot;) castable as xs:duration)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1476">
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION(&quot;prefix:local&quot;) castable as xs:yearMonthDuration)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1477">
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION(&quot;prefix:local&quot;) castable as xs:dayTimeDuration)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1478">
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION(&quot;prefix:local&quot;) castable as xs:dateTime)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1479">
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION(&quot;prefix:local&quot;) castable as xs:time)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1480">
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION(&quot;prefix:local&quot;) castable as xs:date)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1481">
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION(&quot;prefix:local&quot;) castable as xs:gYearMonth)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1482">
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION(&quot;prefix:local&quot;) castable as xs:gYear)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1483">
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION(&quot;prefix:local&quot;) castable as xs:gMonthDay)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1484">
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION(&quot;prefix:local&quot;) castable as xs:gDay)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1485">
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION(&quot;prefix:local&quot;) castable as xs:gMonth)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1486">
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION(&quot;prefix:local&quot;) castable as xs:boolean)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1487">
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION(&quot;prefix:local&quot;) castable as xs:base64Binary)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1488">
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION(&quot;prefix:local&quot;) castable as xs:hexBinary)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1489">
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION(&quot;prefix:local&quot;) castable as xs:anyURI)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1490">
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION(&quot;prefix:local&quot;) castable as xs:QName)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1491">
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION(&quot;prefix:local&quot;) castable as xs:NOTATION)</test>
    <result-string/>
    <result>
      <any-of>
        <error code="XPST0017"/>
        <error code="XPST0080"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-1">
    <description> Cast to xs:QName where the prefix is declared in the prolog.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <environment>
      <namespace prefix="myPrefix" uri="http://example.com/"/>
    </environment>
    <test>&quot;myPrefix:ncname&quot; cast as xs:QName eq QName(&quot;http://example.com/&quot;, &quot;anotherPrefix:ncname&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-2">
    <description> Casting the empty sequence to xs:QName? is ok.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(() cast as xs:QName?)</test>
    <result-string/>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-3">
    <description> Pass a small, the smallest if such a limit exists, to nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger(&quot;0&quot;)</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-4">
    <description> Pass a small, the smallest if such a limit exists, to negativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:negativeInteger(&quot;-1&quot;)</test>
    <result-string>xs:decimal(&quot;-1&quot;)</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-5">
    <description> Pass a small, the smallest if such a limit exists, to long.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:long(&quot;9223372036854775807&quot;)</test>
    <result-string>xs:decimal(&quot;9223372036854775807&quot;)</result-string>
    <result>
      <assert-eq>9223372036854775807</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-6">
    <description> Pass a small, the smallest if such a limit exists, to int.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:int(&quot;2147483647&quot;)</test>
    <result-string>xs:decimal(&quot;2147483647&quot;)</result-string>
    <result>
      <assert-eq>2147483647</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-7">
    <description> Pass a small, the smallest if such a limit exists, to short.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:short(&quot;-32768&quot;)</test>
    <result-string>xs:decimal(&quot;-32768&quot;)</result-string>
    <result>
      <assert-eq>-32768</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-8">
    <description> Pass a small, the smallest if such a limit exists, to byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte(&quot;-128&quot;)</test>
    <result-string>xs:decimal(&quot;-128&quot;)</result-string>
    <result>
      <assert-eq>-128</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-9">
    <description> Pass a small, the smallest if such a limit exists, to nonNegativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonNegativeInteger(&quot;0&quot;)</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-10">
    <description> Pass a small, the smallest if such a limit exists, to unsignedLong.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedLong(&quot;0&quot;)</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-11">
    <description> Pass a small, the smallest if such a limit exists, to unsignedInt.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt(&quot;0&quot;)</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-12">
    <description> Pass a small, the smallest if such a limit exists, to unsignedByte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedByte(&quot;0&quot;)</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-13">
    <description> Pass a small, the smallest if such a limit exists, to unsignedShort.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedShort(&quot;0&quot;)</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-14">
    <description> Pass a small, the smallest if such a limit exists, to positiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:positiveInteger(&quot;1&quot;)</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-15">
    <description> Pass a large, the largest if such a limit exists, to nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger(&quot;-999999999999999999&quot;)</test>
    <result-string>xs:decimal(&quot;-999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>-999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-16">
    <description> Pass a large, the largest if such a limit exists, to negativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:negativeInteger(&quot;-999999999999999999&quot;)</test>
    <result-string>xs:decimal(&quot;-999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>-999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-17">
    <description> Pass a large, the largest if such a limit exists, to long.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O'Neil Delpratt" change="Bug #19782 - change expected result" on="2012-11-08"/>
    <test>xs:long(&quot;-9223372036854775808&quot;)</test>
    <result-string/>
    <result>
      <any-of>
        <assert-eq>-9223372036854775808</assert-eq>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-18">
    <description> Pass a large, the largest if such a limit exists, to int.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:int(&quot;-2147483648&quot;)</test>
    <result-string>xs:decimal(&quot;-2147483648&quot;)</result-string>
    <result>
      <assert-eq>-2147483648</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-19">
    <description> Pass a large, the largest if such a limit exists, to short.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:short(&quot;32767&quot;)</test>
    <result-string>xs:decimal(&quot;32767&quot;)</result-string>
    <result>
      <assert-eq>32767</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-20">
    <description> Pass a large, the largest if such a limit exists, to byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte(&quot;127&quot;)</test>
    <result-string>xs:decimal(&quot;127&quot;)</result-string>
    <result>
      <assert-eq>127</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-21">
    <description> Pass a large, the largest if such a limit exists, to nonNegativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonNegativeInteger(&quot;999999999999999999&quot;)</test>
    <result-string>xs:decimal(&quot;999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-22">
    <description> Pass a large, the largest if such a limit exists, to unsignedLong.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedLong(&quot;18446744073709551615&quot;)</test>
    <result-string/>
    <result>
      <any-of>
        <assert-eq>18446744073709551615</assert-eq>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-23">
    <description> Pass a large, the largest if such a limit exists, to unsignedInt.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt(&quot;4294967295&quot;)</test>
    <result-string>xs:decimal(&quot;4294967295&quot;)</result-string>
    <result>
      <assert-eq>4294967295</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-24">
    <description> Pass a large, the largest if such a limit exists, to unsignedShort.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedShort(&quot;65535&quot;)</test>
    <result-string>xs:decimal(&quot;65535&quot;)</result-string>
    <result>
      <assert-eq>65535</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-25">
    <description> Pass a large, the largest if such a limit exists, to unsignedByte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedByte(&quot;255&quot;)</test>
    <result-string>xs:decimal(&quot;255&quot;)</result-string>
    <result>
      <assert-eq>255</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-26">
    <description> Pass a large, the largest if such a limit exists, to positiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:positiveInteger(&quot;999999999999999999&quot;)</test>
    <result-string>xs:decimal(&quot;999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-27">
    <description> Cast fn:false() to nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger(false())</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-28">
    <description> Cast fn:true() to nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger(true())</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-29">
    <description> Cast fn:false() to negativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:negativeInteger(false())</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-30">
    <description> Cast fn:true() to negativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:negativeInteger(true())</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-31">
    <description> Cast fn:false() to long.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:long(false())</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-32">
    <description> Cast fn:true() to long.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:long(true())</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-33">
    <description> Cast fn:false() to int.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:int(false())</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-34">
    <description> Cast fn:true() to int.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:int(true())</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-35">
    <description> Cast fn:false() to short.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:short(false())</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-36">
    <description> Cast fn:true() to short.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:short(true())</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-37">
    <description> Cast fn:false() to byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte(false())</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-38">
    <description> Cast fn:true() to byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte(true())</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-39">
    <description> Cast fn:false() to nonNegativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonNegativeInteger(false())</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-40">
    <description> Cast fn:true() to nonNegativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonNegativeInteger(true())</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-41">
    <description> Cast fn:false() to unsignedLong.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedLong(false())</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-42">
    <description> Cast fn:true() to unsignedLong.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedLong(true())</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-43">
    <description> Cast fn:false() to unsignedInt.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt(false())</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-44">
    <description> Cast fn:true() to unsignedInt.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt(true())</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-45">
    <description> Cast fn:false() to unsignedShort.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedShort(false())</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-46">
    <description> Cast fn:true() to unsignedShort.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedShort(true())</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-47">
    <description> Cast fn:false() to unsignedByte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedByte(false())</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-48">
    <description> Cast fn:true() to unsignedByte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedByte(true())</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-49">
    <description> Cast fn:false() to positiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:positiveInteger(false())</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-50">
    <description> Cast fn:true() to positiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:positiveInteger(true())</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-51">
    <description> -0 is an invalid value for xs:negativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:negativeInteger(&quot;-0&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-52">
    <description> The minus sign is allowed unsignedLong. 
      S4S is considered normative, and XSD 1.1 adjusted the prose to say the same.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedLong(&quot;-0&quot;)</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-53">
    <description> The minus sign is allowed unsignedInt. 
      S4S is considered normative, and XSD 1.1 adjusted the prose to say the same.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt(&quot;-0&quot;)</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-54">
    <description> The minus sign is allowed unsignedShort. 
      S4S is considered normative, and XSD 1.1 adjusted the prose to say the same.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedShort(&quot;-0&quot;)</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-55">
    <description> The minus sign is allowed in unsignedByte. 
      S4S is considered normative, and XSD 1.1 adjusted the prose to say the same.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedByte(&quot;-0&quot;)</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-56">
    <description> The minus sign is prohibited in positiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:positiveInteger(&quot;-0&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-57">
    <description> The minus sign is prohibited in positiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:positiveInteger(&quot;-1&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-58">
    <description> The plus sign is allowed in unsignedLong. 
      S4S is considered normative, and XSD 1.1 adjusted the prose to say the same.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedLong(&quot;+0&quot;)</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-59">
    <description> The plus sign is allowed in unsignedInt. 
      S4S is considered normative, and XSD 1.1 adjusted the prose to say the same.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt(&quot;+0&quot;)</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-60">
    <description> The plus sign is allowed in unsignedShort. 
      S4S is considered normative, and XSD 1.1 adjusted the prose to say the same.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedShort(&quot;+0&quot;)</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-61">
    <description> The plus sign is allowed in unsignedByte. 
      S4S is considered normative, and XSD 1.1 adjusted the prose to say the same.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedByte(&quot;+0&quot;)</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-62">
    <description> The plus sign is prohibited in negativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:negativeInteger(&quot;+0&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-63">
    <description> The plus sign is prohibited in nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger(&quot;+1&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-64">
    <description> The minus sign is allowed in nonNegativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonNegativeInteger(&quot;-0&quot;)</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-65">
    <description> The minus sign is allowed in negativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:negativeInteger(&quot;-1&quot;)</test>
    <result-string>xs:decimal(&quot;-1&quot;)</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-66">
    <description> The minus sign is allowed in nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger(&quot;-0&quot;)</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-67">
    <description> The minus sign is allowed in nonPositiveInteger(#2).</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger(&quot;-1&quot;)</test>
    <result-string>xs:decimal(&quot;-1&quot;)</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-68">
    <description> Ensure a plus sign is accepted for positiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:positiveInteger(&quot;+1&quot;)</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-69">
    <description> Ensure a plus sign is accepted for nonNegativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonNegativeInteger(&quot;+1&quot;)</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-70">
    <description> Ensure a plus sign is accepted for nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger(&quot;+0&quot;)</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-71">
    <description> Multiple minus signs is disallowed in nonNegativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonNegativeInteger(&quot;--0&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-72">
    <description> Multiple minus signs is disallowed in negativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:negativeInteger(&quot;--1&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-73">
    <description> Multiple minus signs is disallowed in nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger(&quot;--0&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-74">
    <description> Multiple minus signs is disallowed in nonPositiveInteger(#2).</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger(&quot;--1&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-75">
    <description> Multiple plus signs is allowed in positiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:positiveInteger(&quot;++1&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-76">
    <description> Multiple plus signs is allowed in nonNegativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonNegativeInteger(&quot;++1&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-77">
    <description> Multiple plus signs is allowed in nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger(&quot;++0&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-78">
    <description> Cast a too small value to long.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:long(&quot;-9223372036854775809&quot;)</test>
    <result-string/>
    <result>
      <any-of>
        <error code="FORG0001"/>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-79">
    <description> Cast a too small value to int.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:int(&quot;-2147483649&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-80">
    <description> Cast a too small value to short.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:short(&quot;-32769&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-81">
    <description> Cast a too small value to byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte(&quot;-129&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-82">
    <description> Cast a too small value to nonNegativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonNegativeInteger(&quot;-1&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-83">
    <description> Cast a too small value to unsignedLong.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedLong(&quot;-1&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-84">
    <description> Cast a too small value to unsignedInt.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt(&quot;-1&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-85">
    <description> Cast a too small value to unsignedShort.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedShort(&quot;-1&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-86">
    <description> Cast a too small value to unsignedByte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedByte(&quot;-1&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-87">
    <description> Cast a too small value to positiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:positiveInteger(&quot;-1&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-88">
    <description> Cast a too large value to nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger(&quot;1&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-89">
    <description> Cast a too large value to negativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:negativeInteger(&quot;0&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-90">
    <description> Cast a too large value to long.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:long(&quot;9223372036854775808&quot;)</test>
    <result-string/>
    <result>
      <any-of>
        <error code="FORG0001"/>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-91">
    <description> Cast a too large value to int.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:int(&quot;2147483648&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-92">
    <description> Cast a too large value to short.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:short(&quot;32768&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-93">
    <description> Cast a too large value to byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte(&quot;128&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-94">
    <description> Pass an empty string to nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger(&quot;&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-95">
    <description> Pass an empty string to negativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:negativeInteger(&quot;&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-96">
    <description> Pass an empty string to long.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:long(&quot;&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-97">
    <description> Pass an empty string to int.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:int(&quot;&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-98">
    <description> Pass an empty string to short.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:short(&quot;&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-99">
    <description> Pass an empty string to byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte(&quot;&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-100">
    <description> Pass an empty string to nonNegativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonNegativeInteger(&quot;&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-101">
    <description> Pass an empty string to unsignedLong.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedLong(&quot;&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-102">
    <description> Pass an empty string to unsignedInt.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt(&quot;&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-103">
    <description> Pass an empty string to unsignedByte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedByte(&quot;&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-104">
    <description> Pass an empty string to unsignedShort.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedShort(&quot;&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-105">
    <description> Pass an empty string to positiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:positiveInteger(&quot;&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-106">
    <description> Fractions are disallowed in nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger(&quot;-3.0&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-107">
    <description> Fractions are disallowed in negativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:negativeInteger(&quot;-3.0&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-108">
    <description> Fractions are disallowed in long.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:long(&quot;3.0&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-109">
    <description> Fractions are disallowed in int.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:int(&quot;3.0&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-110">
    <description> Fractions are disallowed in short.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:short(&quot;3.0&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-111">
    <description> Fractions are disallowed in byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte(&quot;3.0&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-112">
    <description> Fractions are disallowed in nonNegativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonNegativeInteger(&quot;3.0&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-113">
    <description> Fractions are disallowed in unsignedLong.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedLong(&quot;3.0&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-114">
    <description> Fractions are disallowed in unsignedInt.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt(&quot;3.0&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-115">
    <description> Fractions are disallowed in unsignedByte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedByte(&quot;3.0&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-116">
    <description> Fractions are disallowed in unsignedShort.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedShort(&quot;3.0&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-117">
    <description> Fractions are disallowed in positiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:positiveInteger(&quot;3.0&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-118">
    <description> Space between the sign and the digits is disallowed for nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger(&quot;- 0&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-119">
    <description> Space between the sign and the digits is disallowed for nonPositiveInteger(#2).</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger(&quot;+ 0&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-120">
    <description> Space between the sign and the digits is disallowed for negativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:negativeInteger(&quot;- 3&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-121">
    <description> Space between the sign and the digits is disallowed for long.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:long(&quot;+ 5&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-122">
    <description> Space between the sign and the digits is disallowed for int.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:int(&quot;+ 5&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-123">
    <description> Space between the sign and the digits is disallowed for short.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:short(&quot;+ 5&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-124">
    <description> Space between the sign and the digits is disallowed for byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte(&quot;+ 5&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-125">
    <description> Space between the sign and the digits is disallowed for long.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:long(&quot;- 5&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-126">
    <description> Space between the sign and the digits is disallowed for int.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:int(&quot;- 5&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-127">
    <description> Space between the sign and the digits is disallowed for short.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:short(&quot;- 5&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-128">
    <description> Space between the sign and the digits is disallowed for byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte(&quot;- 5&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-129">
    <description> Space between the sign and the digits is disallowed for nonNegativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonNegativeInteger(&quot;+ 0&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-130">
    <description> Space between the sign and the digits is disallowed for nonNegativeInteger(#2).</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonNegativeInteger(&quot;- 0&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-131">
    <description> Space between the sign and the digits is disallowed for positiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:positiveInteger(&quot;+ 3&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-132">
    <description> Pass preceding zeros to nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger(&quot;-000000001&quot;)</test>
    <result-string>xs:decimal(&quot;-1&quot;)</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-133">
    <description> Pass preceding zeros to nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger(&quot;-000000000&quot;)</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-134">
    <description> Pass preceding zeros to negativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:negativeInteger(&quot;-000000001&quot;)</test>
    <result-string>xs:decimal(&quot;-1&quot;)</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-135">
    <description> Pass preceding zeros to long.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:long(&quot;000000001&quot;)</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-136">
    <description> Pass preceding zeros to int.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:int(&quot;000000001&quot;)</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-137">
    <description> Pass preceding zeros to short.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:short(&quot;000000001&quot;)</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-138">
    <description> Pass preceding zeros to byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte(&quot;000000001&quot;)</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-139">
    <description> Pass preceding zeros to nonNegativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonNegativeInteger(&quot;000000001&quot;)</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-140">
    <description> Pass preceding zeros to unsignedLong.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedLong(&quot;000000001&quot;)</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-141">
    <description> Pass preceding zeros to unsignedInt.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt(&quot;000000001&quot;)</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-142">
    <description> Pass preceding zeros to unsignedByte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedByte(&quot;000000001&quot;)</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-143">
    <description> Pass preceding zeros to unsignedShort.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedShort(&quot;000000001&quot;)</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-144">
    <description> Pass preceding zeros to positiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:positiveInteger(&quot;000000001&quot;)</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-145">
    <description> Hexa-decimal notation isn't allowed in nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger(&quot;0x0&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-146">
    <description> Hexa-decimal notation isn't allowed in negativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:negativeInteger(&quot;-0x1&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-147">
    <description> Hexa-decimal notation isn't allowed in long.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:long(&quot;0x9223372036854775807&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-148">
    <description> Hexa-decimal notation isn't allowed in int.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:int(&quot;0x2147483647&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-149">
    <description> Hexa-decimal notation isn't allowed in short.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:short(&quot;-0x32768&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-150">
    <description> Hexa-decimal notation isn't allowed in byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte(&quot;-0x128&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-151">
    <description> Hexa-decimal notation isn't allowed in nonNegativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonNegativeInteger(&quot;0x0&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-152">
    <description> Hexa-decimal notation isn't allowed in unsignedLong.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedLong(&quot;0x0&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-153">
    <description> Hexa-decimal notation isn't allowed in unsignedInt.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt(&quot;0x0&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-154">
    <description> Hexa-decimal notation isn't allowed in unsignedByte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedByte(&quot;0x0&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-155">
    <description> Hexa-decimal notation isn't allowed in unsignedShort.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedShort(&quot;0x0&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-156">
    <description> Hexa-decimal notation isn't allowed in positiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:positiveInteger(&quot;0x1&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-157">
    <description> Cast fn:false() to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language(false())</test>
    <result-string>xs:string(&quot;false&quot;)</result-string>
    <result>
      <assert-string-value>false</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-158">
    <description> Cast fn:true() to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language(true())</test>
    <result-string>xs:string(&quot;true&quot;)</result-string>
    <result>
      <assert-string-value>true</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-159">
    <description> Cast an empty string to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language(&quot;&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-160">
    <description> Cast a too long string to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language(&quot;abcdefjhl&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-161">
    <description> Cast string with invalid characters to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language(&quot;1&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-162">
    <description> Cast string with invalid characters to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language(&quot;a1a&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-163">
    <description> Cast string with invalid characters to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language(&quot;a.a&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-164">
    <description> Cast string with invalid characters to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language(&quot;a*a&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-165">
    <description> Cast string with invalid characters to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language(&quot;abc-&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-166">
    <description> Cast string with invalid characters to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language(&quot;abc--ab&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-167">
    <description> Cast string with invalid characters to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language(&quot;abc-ab-&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-168">
    <description> Cast string with invalid characters to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language(&quot;abc-&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-169">
    <description> Cast string with invalid characters to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language(&quot;abc-abcdefikl&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-170">
    <description> Cast string with invalid characters to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language(&quot;abc-abcdef.k&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-171">
    <description> Cast string with invalid characters to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language(&quot;abc-ab1efikl&quot;)</test>
    <result-string>xs:string(&quot;abc-ab1efikl&quot;)</result-string>
    <result>
      <assert-string-value>abc-ab1efikl</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-172">
    <description> Cast string with invalid characters to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language(&quot;abc-a-1b1efikl&quot;)</test>
    <result-string>xs:string(&quot;abc-a-1b1efikl&quot;)</result-string>
    <result>
      <assert-string-value>abc-a-1b1efikl</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-173">
    <description> Cast string with invalid characters to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language(&quot;abc-a-1-1b1efil&quot;)</test>
    <result-string>xs:string(&quot;abc-a-1-1b1efil&quot;)</result-string>
    <result>
      <assert-string-value>abc-a-1-1b1efil</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-174">
    <description> Cast string with invalid characters to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language(&quot;abc-a-1-1b01efil&quot;)</test>
    <result-string>xs:string(&quot;abc-a-1-1b01efil&quot;)</result-string>
    <result>
      <assert-string-value>abc-a-1-1b01efil</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-175">
    <description> Cast an integer to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language(1)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-176">
    <description> Cast a short to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language(xs:short(&quot;1&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-177">
    <description> Cast a xs:date to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language(current-date())</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-178">
    <description> Cast a xs:time to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language(current-time())</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-179">
    <description> Cast a xs:dateTime to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language(current-dateTime())</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-180">
    <description> No function by name xs:name exists.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:name(&quot;input&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-181">
    <description> Pass invalid input to xs:Name.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:Name(&quot;1abc&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-182">
    <description> Pass invalid input to xs:Name.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:Name(&quot;ab\c&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-183">
    <description> Pass invalid input to xs:Name.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:Name(&quot;ab|&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-184">
    <description> Pass invalid input to xs:Name.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:Name(&quot;a c&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-185">
    <description> Pass invalid input to xs:Name.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:Name(&quot;&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-186">
    <description> Pass tricky, valid input to xs:Name.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:Name(&quot;::::&quot;)</test>
    <result-string>xs:string(&quot;::::&quot;)</result-string>
    <result>
      <assert-string-value>::::</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-187">
    <description> Pass tricky, valid input to xs:Name.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:Name(&quot;_&quot;)</test>
    <result-string>xs:string(&quot;_&quot;)</result-string>
    <result>
      <assert-string-value>_</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-188">
    <description> Pass tricky, valid input to xs:Name.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:Name(&quot;:&quot;)</test>
    <result-string>xs:string(&quot;:&quot;)</result-string>
    <result>
      <assert-string-value>:</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-189">
    <description> Pass tricky, valid input to xs:Name.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:Name(&quot;a&quot;)</test>
    <result-string>xs:string(&quot;a&quot;)</result-string>
    <result>
      <assert-string-value>a</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-190">
    <description> Pass tricky, valid input to xs:Name.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:Name(&quot; a &quot;)</test>
    <result-string>xs:string(&quot;a&quot;)</result-string>
    <result>
      <assert-string-value>a</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-191">
    <description> Pass tricky, valid input to xs:Name.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:Name(&quot;a1123-_--__-__--....-.--.-..12309asd&quot;)</test>
    <result-string>xs:string(&quot;a1123-_--__-__--....-.--.-..12309asd&quot;)</result-string>
    <result>
      <assert-string-value>a1123-_--__-__--....-.--.-..12309asd</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-192">
    <description> Pass an empty string to normalizedString.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:normalizedString(&quot;&quot;)</test>
    <result-string>xs:string(&quot;&quot;)</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-193">
    <description> Pass an empty string to token.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:token(&quot;&quot;)</test>
    <result-string>xs:string(&quot;&quot;)</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-194">
    <description> Pass an empty string to language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language(&quot;&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-195">
    <description> Pass an empty string to NMTOKEN.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:NMTOKEN(&quot;&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-196">
    <description> Pass an empty string to Name.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:Name(&quot;&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-197">
    <description> Pass an empty string to NCName.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:NCName(&quot;&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-198">
    <description> Pass an empty string to ID.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:ID(&quot;&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-199">
    <description> Pass an empty string to IDREF.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:IDREF(&quot;&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-200">
    <description> Pass an empty string to ENTITY.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:ENTITY(&quot;&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-201">
    <description> When casting to xs:QName, the declared default element namespace is considered.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <environment>
      <namespace prefix="" uri="http://example.com/defelementns"/>
    </environment>
    <test>namespace-uri-from-QName(xs:QName(&quot;ncname&quot;))</test>
    <result-string>xs:string(&quot;http://example.com/defelementns&quot;)</result-string>
    <result>
      <assert-string-value>http://example.com/defelementns</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-202">
    <description> Use complex input to xs:NMTOKEN.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:NMTOKEN(&quot; ::::...:SDA21455313 &quot;)</test>
    <result-string>xs:string(&quot;::::...:SDA21455313&quot;)</result-string>
    <result>
      <assert-string-value>::::...:SDA21455313</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-203">
    <description> Whitespace is disallowed inside NMOKEN.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:NMTOKEN(&quot; f f&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-204">
    <description> The empty string is invalid in xs:NMTOKEN.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:NMTOKEN(&quot;&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-205">
    <description> The empty string is invalid in xs:NMTOKEN(#2).</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:NMTOKEN(&quot; &quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-206">
    <description> Pass a single semi colon to xs:NMTOKEN.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:NMTOKEN(&quot;;&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-207">
    <description> Construct an xs:anyURI from an invalid string. 
      However, in FO 17.1.1, it is said that &quot;For xs:anyURI, the extent to which an 
      implementation validates the lexical form of xs:anyURI is implementation dependent.&quot;.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI(&quot;http:\\invalidURI\someURI&quot;)</test>
    <result-string/>
    <result>
      <any-of>
        <assert-string-value>http:\\invalidURI\someURI</assert-string-value>
        <error code="FORG0001"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-208">
    <description> Use a large chunk of whitespace in an xs:anyURI.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>concat(&quot;b&quot;, xs:anyURI(&quot; &quot;), &quot;b&quot;)</test>
    <result-string>xs:string(&quot;bb&quot;)</result-string>
    <result>
      <assert-string-value>bb</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-209">
    <description> Ensure that a large Unicode codepoint is handled correctly in xs:anyURI.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI(&quot;&quot;)</test>
    <result-string>xs:string(&quot;&quot;)</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-210">
    <description> '%' is not a disallowed character and therefore it's not encoded 
      before being considered for RFC 2396 validness.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI(&quot;http://www.example.com/file%GF.html&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-211">
    <description> No type by name xs:anyAtomic exists.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyAtomic(&quot;1&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-212">
    <description> No type by name xs:anyAtomic exists(2).</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyAtomic(&quot;1&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-213">
    <description> Cast an xs:positiveInteger value to xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(xs:positiveInteger(&quot;52&quot;))</test>
    <result-string>xs:decimal(&quot;52&quot;)</result-string>
    <result>
      <assert-eq>52</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-214">
    <description> Cast an xs:int value to xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(xs:int(&quot;-1873914410&quot;))</test>
    <result-string>xs:string(&quot;-1.87391441E9&quot;)</result-string>
    <result>
      <assert-string-value>-1.87391441E9</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-215">
    <description> 'Inf' is not a valid value for xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(&quot;Inf&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-216">
    <description> 'Inf' is not a valid value for xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(&quot;Inf&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-217">
    <description> '-Inf' is not a valid value for xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(&quot;-Inf&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-218">
    <description> '-Inf' is not a valid value for xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(&quot;-Inf&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-219">
    <description> '+Inf' is not a valid value for xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(&quot;+Inf&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-220">
    <description> '+Inf' is not a valid value for xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(&quot;+Inf&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-221">
    <description> Whitespace is ignored for xs:float's lexical space.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(&quot; NaN &quot;)</test>
    <result-string>xs:string(&quot;NaN&quot;)</result-string>
    <result>
      <assert-string-value>NaN</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-222">
    <description> Whitespace is ignored for xs:double's lexical space.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(&quot; NaN &quot;)</test>
    <result-string>xs:string(&quot;NaN&quot;)</result-string>
    <result>
      <assert-string-value>NaN</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-223">
    <description> Whitespace is ignored for xs:float's lexical space(#2).</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(&quot; INF &quot;)</test>
    <result-string>xs:string(&quot;INF&quot;)</result-string>
    <result>
      <assert-string-value>INF</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-224">
    <description> Whitespace is ignored for xs:double's lexical space(#2).</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(&quot; INF &quot;)</test>
    <result-string>xs:string(&quot;INF&quot;)</result-string>
    <result>
      <assert-string-value>INF</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-225">
    <description> 'nan' is not a valid value for xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(&quot;nan&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-226">
    <description> 'nan' is not a valid value for xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(&quot;nan&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-227">
    <description> '- INF' is not a valid value for xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(&quot;- INF&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-228">
    <description> '- INF' is not a valid value for xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(&quot;- INF&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-229">
    <description> '+ INF' is not a valid value for xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(&quot;+ INF&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-230">
    <description> '+ INF' is not a valid value for xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(&quot;+ INF&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-231">
    <description> '+INF' is not a valid value for xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O'Neil Delpratt, Saxonica" change="Bug fix for #21263 - added dependency to xsd-version 1.0" on="2013-03-20"/>
    <dependency type="xsd-version" value="1.0"/>
    <test>xs:double(&quot;+INF&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-231a">
    <description> Test derived from K2-SeqExprCast-231 '+INF' is a valid value for xs:double under xsd-version  1.1.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O'Neil Delpratt, Saxonica" change="Bug fix for #21263 - added dependency to xsd-version 1.0" on="2013-03-20"/>
    <modified by="Michael Kay" change="See bug 21263. Use string-value" on="2013-04-09"/>
    <dependency type="xsd-version" value="1.1"/>
    <test>xs:double(&quot;+INF&quot;)</test>
    <result-string>xs:string(&quot;INF&quot;)</result-string>
    <result>
      <assert-string-value>INF</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-232">
    <description> '+INF' is not a valid value for xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O'Neil Delpratt" change="Bug fix for #21263 - added the dependency xsd-version 1.0" on="2013-03-20"/>
    <dependency type="xsd-version" value="1.0"/>
    <test>xs:float(&quot;+INF&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-232a">
    <description> '+INF' is a valid value for xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O'Neil Delpratt, Saxonica" change="Bug fix for #21263 - added dependency to xsd-version 1.0" on="2013-03-20"/>
    <modified by="Michael Kay" change="See bug 21263. Use string-value" on="2013-04-09"/>
    <dependency type="xsd-version" value="1.1"/>
    <test>xs:float(&quot;+INF&quot;)</test>
    <result-string>xs:string(&quot;INF&quot;)</result-string>
    <result>
      <assert-string-value>INF</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-233">
    <description> 'Inf' is not a valid value for xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(&quot;Inf&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-234">
    <description> '-Inf' is not a valid value for xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(&quot;-Inf&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-235">
    <description> '+Inf' is not a valid value for xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(&quot;+Inf&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-236">
    <description> 'nan' is not a valid value for xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(&quot;nan&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-237">
    <description> '- INF' is not a valid value for xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(&quot;- INF&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-238">
    <description> '+ INF' is not a valid value for xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(&quot;+ INF&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-239">
    <description> '+INF' is not a valid value for xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(&quot;+INF&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-240">
    <description> 'INF' is not a valid value for xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(&quot;INF&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-241">
    <description> 'NaN' is not a valid value for xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(&quot;NaN&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-242">
    <description> Cast xs:float(NaN) to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(xs:float(&quot;NaN&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-243">
    <description> Cast xs:double(NaN) to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(xs:double(&quot;NaN&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-244">
    <description> Cast xs:float(NaN) to xs:integer.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(xs:float(&quot;NaN&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-245">
    <description> Cast xs:double(NaN) to xs:integer.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(xs:double(&quot;NaN&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-246">
    <description> Cast xs:float(INF) to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(xs:float(&quot;INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-247">
    <description> Cast xs:double(INF) to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(xs:double(&quot;INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-248">
    <description> Cast xs:float(INF) to xs:integer.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(xs:float(&quot;INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-249">
    <description> Cast xs:double(INF) to xs:integer.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(xs:double(&quot;INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-250">
    <description> Cast xs:float(-INF) to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(xs:float(&quot;-INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-251">
    <description> Cast xs:double(-INF) to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(xs:double(&quot;-INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-252">
    <description> Cast xs:float(-INF) to xs:integer.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(xs:float(&quot;-INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-253">
    <description> Cast xs:double(-INF) to xs:integer.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(xs:double(&quot;-INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-254">
    <description> Cast xs:float(-INF) to xs:byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte(xs:float(&quot;-INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-255">
    <description> Cast xs:double(-INF) to xs:byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte(xs:double(&quot;-INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-256">
    <description> Cast xs:float(INF) to xs:byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte(xs:float(&quot;INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-257">
    <description> Cast xs:double(INF) to xs:byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte(xs:double(&quot;INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-258">
    <description> Cast xs:float(NaN) to xs:byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte(xs:float(&quot;NaN&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-259">
    <description> Cast xs:double(NaN) to xs:byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte(xs:double(&quot;NaN&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-260">
    <description> Cast xs:float(-INF) to xs:nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger(xs:float(&quot;-INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-261">
    <description> Cast xs:double(-INF) to xs:nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger(xs:double(&quot;-INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-262">
    <description> Cast xs:float(INF) to xs:nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger(xs:float(&quot;INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-263">
    <description> Cast xs:double(INF) to xs:nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger(xs:double(&quot;INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-264">
    <description> Cast xs:float(NaN) to xs:nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger(xs:float(&quot;NaN&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-265">
    <description> Cast xs:double(NaN) to xs:nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger(xs:double(&quot;NaN&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-266">
    <description> Cast xs:float(-INF) to xs:negativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:negativeInteger(xs:float(&quot;-INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-267">
    <description> Cast xs:double(-INF) to xs:negativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:negativeInteger(xs:double(&quot;-INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-268">
    <description> Cast xs:float(INF) to xs:negativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:negativeInteger(xs:float(&quot;INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-269">
    <description> Cast xs:double(INF) to xs:negativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:negativeInteger(xs:double(&quot;INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-270">
    <description> Cast xs:float(NaN) to xs:negativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:negativeInteger(xs:float(&quot;NaN&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-271">
    <description> Cast xs:double(NaN) to xs:negativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:negativeInteger(xs:double(&quot;NaN&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-272">
    <description> Cast xs:float(-INF) to xs:long.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:long(xs:float(&quot;-INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-273">
    <description> Cast xs:double(-INF) to xs:long.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:long(xs:double(&quot;-INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-274">
    <description> Cast xs:float(INF) to xs:long.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:long(xs:float(&quot;INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-275">
    <description> Cast xs:double(INF) to xs:long.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:long(xs:double(&quot;INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-276">
    <description> Cast xs:float(NaN) to xs:long.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:long(xs:float(&quot;NaN&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-277">
    <description> Cast xs:double(NaN) to xs:long.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:long(xs:double(&quot;NaN&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-278">
    <description> Cast xs:float(-INF) to xs:int.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:int(xs:float(&quot;-INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-279">
    <description> Cast xs:double(-INF) to xs:int.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:int(xs:double(&quot;-INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-280">
    <description> Cast xs:float(INF) to xs:int.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:int(xs:float(&quot;INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-281">
    <description> Cast xs:double(INF) to xs:int.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:int(xs:double(&quot;INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-282">
    <description> Cast xs:float(NaN) to xs:int.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:int(xs:float(&quot;NaN&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-283">
    <description> Cast xs:double(NaN) to xs:int.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:int(xs:double(&quot;NaN&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-284">
    <description> Cast xs:float(-INF) to xs:short.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:short(xs:float(&quot;-INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-285">
    <description> Cast xs:double(-INF) to xs:short.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:short(xs:double(&quot;-INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-286">
    <description> Cast xs:float(INF) to xs:short.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:short(xs:float(&quot;INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-287">
    <description> Cast xs:double(INF) to xs:short.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:short(xs:double(&quot;INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-288">
    <description> Cast xs:float(NaN) to xs:short.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:short(xs:float(&quot;NaN&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-289">
    <description> Cast xs:double(NaN) to xs:short.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:short(xs:double(&quot;NaN&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-290">
    <description> Cast xs:float(-INF) to xs:byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte(xs:float(&quot;-INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-291">
    <description> Cast xs:double(-INF) to xs:byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte(xs:double(&quot;-INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-292">
    <description> Cast xs:float(INF) to xs:byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte(xs:float(&quot;INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-293">
    <description> Cast xs:double(INF) to xs:byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte(xs:double(&quot;INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-294">
    <description> Cast xs:float(NaN) to xs:byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte(xs:float(&quot;NaN&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-295">
    <description> Cast xs:double(NaN) to xs:byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte(xs:double(&quot;NaN&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-296">
    <description> Cast xs:float(-INF) to xs:nonNegativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonNegativeInteger(xs:float(&quot;-INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-297">
    <description> Cast xs:double(-INF) to xs:nonNegativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonNegativeInteger(xs:double(&quot;-INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-298">
    <description> Cast xs:float(INF) to xs:nonNegativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonNegativeInteger(xs:float(&quot;INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-299">
    <description> Cast xs:double(INF) to xs:nonNegativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonNegativeInteger(xs:double(&quot;INF&quot;))</test>
    <result-string/>
    <result>
      <any-of>
        <error code="FOCA0002"/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-300">
    <description> Cast xs:float(NaN) to xs:nonNegativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonNegativeInteger(xs:float(&quot;NaN&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-301">
    <description> Cast xs:double(NaN) to xs:nonNegativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonNegativeInteger(xs:double(&quot;NaN&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-302">
    <description> Cast xs:float(-INF) to xs:unsignedLong.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedLong(xs:float(&quot;-INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-303">
    <description> Cast xs:double(-INF) to xs:unsignedLong.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedLong(xs:double(&quot;-INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-304">
    <description> Cast xs:float(INF) to xs:unsignedLong.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedLong(xs:float(&quot;INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-305">
    <description> Cast xs:double(INF) to xs:unsignedLong.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedLong(xs:double(&quot;INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-306">
    <description> Cast xs:float(NaN) to xs:unsignedLong.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedLong(xs:float(&quot;NaN&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-307">
    <description> Cast xs:double(NaN) to xs:unsignedLong.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedLong(xs:double(&quot;NaN&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-308">
    <description> Cast xs:float(-INF) to xs:unsignedInt.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt(xs:float(&quot;-INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-309">
    <description> Cast xs:double(-INF) to xs:unsignedInt.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt(xs:double(&quot;-INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-310">
    <description> Cast xs:float(INF) to xs:unsignedInt.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt(xs:float(&quot;INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-311">
    <description> Cast xs:double(INF) to xs:unsignedInt.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt(xs:double(&quot;INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-312">
    <description> Cast xs:float(NaN) to xs:unsignedInt.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt(xs:float(&quot;NaN&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-313">
    <description> Cast xs:double(NaN) to xs:unsignedInt.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt(xs:double(&quot;NaN&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-314">
    <description> Cast xs:float(-INF) to xs:unsignedShort.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedShort(xs:float(&quot;-INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-315">
    <description> Cast xs:double(-INF) to xs:unsignedShort.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedShort(xs:double(&quot;-INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-316">
    <description> Cast xs:float(INF) to xs:unsignedShort.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedShort(xs:float(&quot;INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-317">
    <description> Cast xs:double(INF) to xs:unsignedShort.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedShort(xs:double(&quot;INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-318">
    <description> Cast xs:float(NaN) to xs:unsignedShort.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedShort(xs:float(&quot;NaN&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-319">
    <description> Cast xs:double(NaN) to xs:unsignedShort.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedShort(xs:double(&quot;NaN&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-320">
    <description> Cast xs:float(-INF) to xs:unsignedByte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedByte(xs:float(&quot;-INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-321">
    <description> Cast xs:double(-INF) to xs:unsignedByte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedByte(xs:double(&quot;-INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-322">
    <description> Cast xs:float(INF) to xs:unsignedByte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedByte(xs:float(&quot;INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-323">
    <description> Cast xs:double(INF) to xs:unsignedByte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedByte(xs:double(&quot;INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-324">
    <description> Cast xs:float(NaN) to xs:unsignedByte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedByte(xs:float(&quot;NaN&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-325">
    <description> Cast xs:double(NaN) to xs:unsignedByte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedByte(xs:double(&quot;NaN&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-326">
    <description> Cast xs:float(-INF) to xs:unsignedInt.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt(xs:float(&quot;-INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-327">
    <description> Cast xs:double(-INF) to xs:unsignedInt.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt(xs:double(&quot;-INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-328">
    <description> Cast xs:float(INF) to xs:unsignedInt.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt(xs:float(&quot;INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-329">
    <description> Cast xs:double(INF) to xs:unsignedInt.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt(xs:double(&quot;INF&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-330">
    <description> Cast xs:float(NaN) to xs:unsignedInt.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt(xs:float(&quot;NaN&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-331">
    <description> Cast xs:double(NaN) to xs:unsignedInt.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt(xs:double(&quot;NaN&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCA0002&quot;))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-332">
    <description> No function by name xs:unsignedInteger exists.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInteger(1)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-333">
    <description> Cast xs:byte to xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(xs:byte(3))</test>
    <result-string>xs:decimal(&quot;3&quot;)</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-334">
    <description> Cast xs:int to xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(xs:int(3))</test>
    <result-string>xs:decimal(&quot;3&quot;)</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-335">
    <description> Cast xs:long to xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(xs:long(3))</test>
    <result-string>xs:decimal(&quot;3&quot;)</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-336">
    <description> Cast xs:negativeInteger to xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(xs:negativeInteger(-3))</test>
    <result-string>xs:decimal(&quot;-3&quot;)</result-string>
    <result>
      <assert-eq>-3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-337">
    <description> Cast xs:nonNegativeInteger to xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(xs:nonNegativeInteger(3))</test>
    <result-string>xs:decimal(&quot;3&quot;)</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-338">
    <description> Cast xs:nonPositiveInteger to xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(xs:nonPositiveInteger(0))</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-339">
    <description> Cast xs:short to xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(xs:short(3))</test>
    <result-string>xs:decimal(&quot;3&quot;)</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-340">
    <description> Cast xs:unsignedByte to xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(xs:unsignedByte(3))</test>
    <result-string>xs:decimal(&quot;3&quot;)</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-341">
    <description> Cast xs:unsignedInt to xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(xs:unsignedInt(3))</test>
    <result-string>xs:decimal(&quot;3&quot;)</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-342">
    <description> Cast xs:unsignedInt to xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(xs:unsignedInt(3))</test>
    <result-string>xs:decimal(&quot;3&quot;)</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-343">
    <description> Cast xs:unsignedLong to xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(xs:unsignedLong(3))</test>
    <result-string>xs:decimal(&quot;3&quot;)</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-344">
    <description> Cast xs:unsignedShort to xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(xs:unsignedShort(3))</test>
    <result-string>xs:decimal(&quot;3&quot;)</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-345">
    <description> Cast xs:byte to xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(xs:byte(3))</test>
    <result-string>xs:decimal(&quot;3&quot;)</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-346">
    <description> Cast xs:int to xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(xs:int(3))</test>
    <result-string>xs:decimal(&quot;3&quot;)</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-347">
    <description> Cast xs:long to xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(xs:long(3))</test>
    <result-string>xs:decimal(&quot;3&quot;)</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-348">
    <description> Cast xs:negativeInteger to xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(xs:negativeInteger(-3))</test>
    <result-string>xs:decimal(&quot;-3&quot;)</result-string>
    <result>
      <assert-eq>-3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-349">
    <description> Cast xs:nonNegativeInteger to xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(xs:nonNegativeInteger(3))</test>
    <result-string>xs:decimal(&quot;3&quot;)</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-350">
    <description> Cast xs:nonPositiveInteger to xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(xs:nonPositiveInteger(0))</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-351">
    <description> Cast xs:short to xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(xs:short(3))</test>
    <result-string>xs:decimal(&quot;3&quot;)</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-352">
    <description> Cast xs:unsignedByte to xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(xs:unsignedByte(3))</test>
    <result-string>xs:decimal(&quot;3&quot;)</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-353">
    <description> Cast xs:unsignedInt to xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(xs:unsignedInt(3))</test>
    <result-string>xs:decimal(&quot;3&quot;)</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-354">
    <description> Cast xs:unsignedInt to xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(xs:unsignedInt(3))</test>
    <result-string>xs:decimal(&quot;3&quot;)</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-355">
    <description> Cast xs:unsignedLong to xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(xs:unsignedLong(3))</test>
    <result-string>xs:decimal(&quot;3&quot;)</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-356">
    <description> Cast xs:unsignedShort to xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(xs:unsignedShort(3))</test>
    <result-string>xs:decimal(&quot;3&quot;)</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-357">
    <description> Cast xs:byte to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(xs:byte(3))</test>
    <result-string>xs:decimal(&quot;3&quot;)</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-358">
    <description> Cast xs:int to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(xs:int(3))</test>
    <result-string>xs:decimal(&quot;3&quot;)</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-359">
    <description> Cast xs:long to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(xs:long(3))</test>
    <result-string>xs:decimal(&quot;3&quot;)</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-360">
    <description> Cast xs:negativeInteger to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(xs:negativeInteger(-3))</test>
    <result-string>xs:decimal(&quot;-3&quot;)</result-string>
    <result>
      <assert-eq>-3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-361">
    <description> Cast xs:nonNegativeInteger to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(xs:nonNegativeInteger(3))</test>
    <result-string>xs:decimal(&quot;3&quot;)</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-362">
    <description> Cast xs:nonPositiveInteger to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(xs:nonPositiveInteger(0))</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-363">
    <description> Cast xs:short to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(xs:short(3))</test>
    <result-string>xs:decimal(&quot;3&quot;)</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-364">
    <description> Cast xs:unsignedByte to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(xs:unsignedByte(3))</test>
    <result-string>xs:decimal(&quot;3&quot;)</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-365">
    <description> Cast xs:unsignedInt to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(xs:unsignedInt(3))</test>
    <result-string>xs:decimal(&quot;3&quot;)</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-366">
    <description> Cast xs:unsignedInt to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(xs:unsignedInt(3))</test>
    <result-string>xs:decimal(&quot;3&quot;)</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-367">
    <description> Cast xs:unsignedLong to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(xs:unsignedLong(3))</test>
    <result-string>xs:decimal(&quot;3&quot;)</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-368">
    <description> Cast xs:unsignedShort to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(xs:unsignedShort(3))</test>
    <result-string>xs:decimal(&quot;3&quot;)</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-369">
    <description> Cast xs:byte to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:byte(3))</test>
    <result-string>xs:string(&quot;3&quot;)</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-370">
    <description> Cast xs:int to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:int(3))</test>
    <result-string>xs:string(&quot;3&quot;)</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-371">
    <description> Cast xs:long to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:long(3))</test>
    <result-string>xs:string(&quot;3&quot;)</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-372">
    <description> Cast xs:negativeInteger to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:negativeInteger(-3))</test>
    <result-string>xs:string(&quot;-3&quot;)</result-string>
    <result>
      <assert-string-value>-3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-373">
    <description> Cast xs:nonNegativeInteger to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:nonNegativeInteger(3))</test>
    <result-string>xs:string(&quot;3&quot;)</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-374">
    <description> Cast xs:nonPositiveInteger to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:nonPositiveInteger(0))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-375">
    <description> Cast xs:short to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:short(3))</test>
    <result-string>xs:string(&quot;3&quot;)</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-376">
    <description> Cast xs:unsignedByte to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:unsignedByte(3))</test>
    <result-string>xs:string(&quot;3&quot;)</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-377">
    <description> Cast xs:unsignedInt to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:unsignedInt(3))</test>
    <result-string>xs:string(&quot;3&quot;)</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-378">
    <description> Cast xs:unsignedInt to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:unsignedInt(3))</test>
    <result-string>xs:string(&quot;3&quot;)</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-379">
    <description> Cast xs:unsignedLong to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:unsignedLong(3))</test>
    <result-string>xs:string(&quot;3&quot;)</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-380">
    <description> Cast xs:unsignedShort to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:unsignedShort(3))</test>
    <result-string>xs:string(&quot;3&quot;)</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-381">
    <description> Cast xs:byte to xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:byte(3))</test>
    <result-string>xs:string(&quot;3&quot;)</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-382">
    <description> Cast xs:int to xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:int(3))</test>
    <result-string>xs:string(&quot;3&quot;)</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-383">
    <description> Cast xs:long to xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:long(3))</test>
    <result-string>xs:string(&quot;3&quot;)</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-384">
    <description> Cast xs:negativeInteger to xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:negativeInteger(-3))</test>
    <result-string>xs:string(&quot;-3&quot;)</result-string>
    <result>
      <assert-string-value>-3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-385">
    <description> Cast xs:nonNegativeInteger to xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:nonNegativeInteger(3))</test>
    <result-string>xs:string(&quot;3&quot;)</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-386">
    <description> Cast xs:nonPositiveInteger to xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:nonPositiveInteger(0))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-387">
    <description> Cast xs:short to xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:short(3))</test>
    <result-string>xs:string(&quot;3&quot;)</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-388">
    <description> Cast xs:unsignedByte to xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:unsignedByte(3))</test>
    <result-string>xs:string(&quot;3&quot;)</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-389">
    <description> Cast xs:unsignedInt to xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:unsignedInt(3))</test>
    <result-string>xs:string(&quot;3&quot;)</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-390">
    <description> Cast xs:unsignedInt to xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:unsignedInt(3))</test>
    <result-string>xs:string(&quot;3&quot;)</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-391">
    <description> Cast xs:unsignedLong to xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:unsignedLong(3))</test>
    <result-string>xs:string(&quot;3&quot;)</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-392">
    <description> Cast xs:unsignedShort to xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:unsignedShort(3))</test>
    <result-string>xs:string(&quot;3&quot;)</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-393">
    <description> Cast xs:unsignedShort to xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:normalizedString(&quot;foo&quot;))</test>
    <result-string>xs:string(&quot;foo&quot;)</result-string>
    <result>
      <assert-string-value>foo</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-394">
    <description> Cast xs:token to xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:token(&quot;foo&quot;))</test>
    <result-string>xs:string(&quot;foo&quot;)</result-string>
    <result>
      <assert-string-value>foo</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-395">
    <description> Cast xs:language to xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:language(&quot;foo&quot;))</test>
    <result-string>xs:string(&quot;foo&quot;)</result-string>
    <result>
      <assert-string-value>foo</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-396">
    <description> Cast xs:NMTOKEN to xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:NMTOKEN(&quot;foo&quot;))</test>
    <result-string>xs:string(&quot;foo&quot;)</result-string>
    <result>
      <assert-string-value>foo</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-397">
    <description> Cast xs:Name to xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:Name(&quot;foo&quot;))</test>
    <result-string>xs:string(&quot;foo&quot;)</result-string>
    <result>
      <assert-string-value>foo</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-398">
    <description> Cast xs:NCName to xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:NCName(&quot;foo&quot;))</test>
    <result-string>xs:string(&quot;foo&quot;)</result-string>
    <result>
      <assert-string-value>foo</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-399">
    <description> Cast xs:ID to xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:ID(&quot;foo&quot;))</test>
    <result-string>xs:string(&quot;foo&quot;)</result-string>
    <result>
      <assert-string-value>foo</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-400">
    <description> Cast xs:IDREF to xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:IDREF(&quot;foo&quot;))</test>
    <result-string>xs:string(&quot;foo&quot;)</result-string>
    <result>
      <assert-string-value>foo</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-401">
    <description> Cast xs:ENTITY to xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:ENTITY(&quot;foo&quot;))</test>
    <result-string>xs:string(&quot;foo&quot;)</result-string>
    <result>
      <assert-string-value>foo</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-402">
    <description> Cast xs:unsignedShort to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:normalizedString(&quot;foo&quot;))</test>
    <result-string>xs:string(&quot;foo&quot;)</result-string>
    <result>
      <assert-string-value>foo</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-403">
    <description> Cast xs:token to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:token(&quot;foo&quot;))</test>
    <result-string>xs:string(&quot;foo&quot;)</result-string>
    <result>
      <assert-string-value>foo</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-404">
    <description> Cast xs:language to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:language(&quot;foo&quot;))</test>
    <result-string>xs:string(&quot;foo&quot;)</result-string>
    <result>
      <assert-string-value>foo</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-405">
    <description> Cast xs:NMTOKEN to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:NMTOKEN(&quot;foo&quot;))</test>
    <result-string>xs:string(&quot;foo&quot;)</result-string>
    <result>
      <assert-string-value>foo</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-406">
    <description> Cast xs:Name to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:Name(&quot;foo&quot;))</test>
    <result-string>xs:string(&quot;foo&quot;)</result-string>
    <result>
      <assert-string-value>foo</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-407">
    <description> Cast xs:NCName to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:NCName(&quot;foo&quot;))</test>
    <result-string>xs:string(&quot;foo&quot;)</result-string>
    <result>
      <assert-string-value>foo</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-408">
    <description> Cast xs:ID to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:ID(&quot;foo&quot;))</test>
    <result-string>xs:string(&quot;foo&quot;)</result-string>
    <result>
      <assert-string-value>foo</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-409">
    <description> Cast xs:IDREF to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:IDREF(&quot;foo&quot;))</test>
    <result-string>xs:string(&quot;foo&quot;)</result-string>
    <result>
      <assert-string-value>foo</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-410">
    <description> Cast xs:ENTITY to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:ENTITY(&quot;foo&quot;))</test>
    <result-string>xs:string(&quot;foo&quot;)</result-string>
    <result>
      <assert-string-value>foo</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-411">
    <description> Cast &quot;a&quot; to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language(&quot;a&quot;)</test>
    <result-string>xs:string(&quot;a&quot;)</result-string>
    <result>
      <assert-string-value>a</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-412">
    <description> Cast &quot;ab&quot; to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language(&quot;ab&quot;)</test>
    <result-string>xs:string(&quot;ab&quot;)</result-string>
    <result>
      <assert-string-value>ab</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-413">
    <description> Cast &quot;abc&quot; to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language(&quot;abc&quot;)</test>
    <result-string>xs:string(&quot;abc&quot;)</result-string>
    <result>
      <assert-string-value>abc</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-414">
    <description> Cast &quot;abcd&quot; to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language(&quot;abcd&quot;)</test>
    <result-string>xs:string(&quot;abcd&quot;)</result-string>
    <result>
      <assert-string-value>abcd</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-415">
    <description> Cast &quot;abcde&quot; to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language(&quot;abcde&quot;)</test>
    <result-string>xs:string(&quot;abcde&quot;)</result-string>
    <result>
      <assert-string-value>abcde</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-416">
    <description> Cast &quot;abcdef&quot; to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language(&quot;abcdef&quot;)</test>
    <result-string>xs:string(&quot;abcdef&quot;)</result-string>
    <result>
      <assert-string-value>abcdef</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-417">
    <description> Cast &quot;abcdefg&quot; to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language(&quot;abcdefg&quot;)</test>
    <result-string>xs:string(&quot;abcdefg&quot;)</result-string>
    <result>
      <assert-string-value>abcdefg</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-418">
    <description> Cast &quot;abcdefgh&quot; to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language(&quot;abcdefgh&quot;)</test>
    <result-string>xs:string(&quot;abcdefgh&quot;)</result-string>
    <result>
      <assert-string-value>abcdefgh</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-419">
    <description> Cast &quot;abcdefgh-abcdefgh&quot; to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language(&quot;abcdefgh-abcdefgh&quot;)</test>
    <result-string>xs:string(&quot;abcdefgh-abcdefgh&quot;)</result-string>
    <result>
      <assert-string-value>abcdefgh-abcdefgh</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-420">
    <description> The whitespace facet for xs:anyURI is collapse.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI(&quot; http://example.com/ foo.xml &quot;)</test>
    <result-string>xs:string(&quot;http://example.com/ foo.xml&quot;)</result-string>
    <result>
      <assert-string-value>http://example.com/ foo.xml</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-421">
    <description> Pass an invalid anyURI.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI(&quot;foo://&quot;)</test>
    <result-string/>
    <result>
      <any-of>
        <assert-string-value>foo://</assert-string-value>
        <assert-string-value>foo:</assert-string-value>
        <error code="FORG0001"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-422">
    <description> Pass an invalid anyURI(#2).</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI(&quot;%gg&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-423">
    <description> An URI without scheme.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI(&quot;:/cut.jpg&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-424">
    <description> An URI without scheme, combined with a relative directory.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI(&quot;:/images/cut.png&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-425">
    <description> Serialize a set of xs:QName instances.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>&quot;START&quot;, 
      		QName(&quot;http://example.com&quot;, &quot;prefix:localName&quot;), 
      		QName(&quot;http://example.com&quot;, &quot;localName&quot;), 
      		QName(&quot;http://example.com&quot;, &quot;localName&quot;), 
      		QName(&quot;&quot;, &quot;localName&quot;), QName((), &quot;localName&quot;), 
      		&quot;END&quot;</test>
    <result-string/>
    <result>
      <assert-xml>START prefix:localName localName localName localName localName END</assert-xml>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-426">
    <description> Cast a set of QName to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>&quot;START&quot;, 
      	string(QName(&quot;http://example.com&quot;, 
      	&quot;prefix:localName&quot;)), 
      	string(QName(&quot;http://example.com&quot;, &quot;localName&quot;)), 
      	string(QName(&quot;http://example.com&quot;, &quot;localName&quot;)), 
      	string(QName(&quot;&quot;, &quot;localName&quot;)), 
      	string(QName((), &quot;localName&quot;)), 
      	&quot;END&quot; </test>
    <result-string/>
    <result>
      <assert-xml>START prefix:localName localName localName localName localName END</assert-xml>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-427">
    <description> Use a relative URI with double slashes.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI(&quot;//server/share/dir1&quot;)</test>
    <result-string>xs:string(&quot;//server/share/dir1&quot;)</result-string>
    <result>
      <assert-string-value>//server/share/dir1</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-428">
    <description> A relatively large negative number, fed to xs:unsignedLong.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedLong(&quot;-9876&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-429">
    <description> Cast xs:time(&quot;11:-1:11&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;11:-1:11&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-430">
    <description> Cast xs:time(&quot;11:+1:11&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;11:+1:11&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-431">
    <description> Cast xs:time(&quot;11: 1:11&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;11: 1:11&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-432">
    <description> Cast xs:time(&quot;11:11:-1&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;11:11:-1&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-433">
    <description> Cast xs:time(&quot;11:11:-1&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;11:11:-1&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-434">
    <description> Cast xs:time(&quot;11:11:+1&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;11:11:+1&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-435">
    <description> Cast xs:time(&quot;11:11: 1&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;11:11: 1&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-436">
    <description> Cast xs:time(&quot;-1:11:11&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;-1:11:11&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-437">
    <description> Cast xs:time(&quot;+1:11:11&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;+1:11:11&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-438">
    <description> Cast xs:time(&quot;+1:11:11&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;+1:11:11&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-439">
    <description> Cast xs:time(&quot;11:11:1e0&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;11:11:1e0&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-440">
    <description> Cast xs:time(&quot;11:11:1E0&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;11:11:1E0&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-441">
    <description> Cast xs:time(&quot;11:11:1b0&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;11:11:1b0&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-442">
    <description> Cast xs:time(&quot;11:11: 10&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;11:11: 10&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-443">
    <description> Cast xs:time(&quot;11:11:11b33&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;11:11:11b33&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-444">
    <description> Cast xs:time(&quot;11:11:111&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;11:11:111&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-445">
    <description> Cast xs:time(&quot;11:11:11.+11&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;11:11:11.+11&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-446">
    <description> Cast xs:time(&quot;11:11:11.-11&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;11:11:11.-11&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-447">
    <description> Cast xs:time(&quot;11:11:11. 11&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;11:11:11. 11&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-448">
    <description> Cast xs:time(&quot;24:00:00.1&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;24:00:00.1&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-449">
    <description> Cast xs:time(&quot;24:01:00&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;24:01:00&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-450">
    <description> Cast xs:time(&quot;24:00:01&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;24:00:01&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-451">
    <description> Cast xs:time(&quot;11:11:11++1:11&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;11:11:11++1:11&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-452">
    <description> Cast xs:time(&quot;11:11:11+-1:11&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;11:11:11+-1:11&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-453">
    <description> Cast xs:time(&quot;11:11:11+ 1:11&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;11:11:11+ 1:11&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-454">
    <description> Cast xs:time(&quot;11:11:11+11:+1&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;11:11:11+11:+1&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-455">
    <description> Cast xs:time(&quot;11:11:11+11:-1&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;11:11:11+11:-1&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-456">
    <description> Cast xs:time(&quot;11:11:11+11: 1&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;11:11:11+11: 1&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-457">
    <description> Cast xs:time(&quot;11&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;11&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-458">
    <description> Cast xs:time(&quot;1 :11:11&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;1 :11:11&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-459">
    <description> Cast xs:time(&quot;11:11:1 &quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(&quot;11:11:1 &quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-460">
    <description> Cast xs:date(&quot;+2002-12-11&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;+2002-12-11&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-461">
    <description> Cast xs:date(&quot; 111-11-11&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot; 111-11-11&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-462">
    <description> Cast xs:date(&quot; +11-11-11&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot; +11-11-11&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-463">
    <description> Cast xs:date(&quot;1111- 1-11&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;1111- 1-11&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-464">
    <description> Cast xs:date(&quot;-111-11-11&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;-111-11-11&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-465">
    <description> Cast xs:date(&quot;+111-11-11&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;+111-11-11&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-466">
    <description> Cast xs:date(&quot;1111-11- 1&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;1111-11- 1&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-467">
    <description> Cast xs:date(&quot;1111-+1-11&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;1111-+1-11&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-468">
    <description> Cast xs:date(&quot;1111-11-+1&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;1111-11-+1&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-469">
    <description> Cast xs:date(&quot;1111--1-11&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;1111--1-11&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-470">
    <description> Cast xs:date(&quot;1111-11--1&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;1111-11--1&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-471">
    <description> Cast xs:date(&quot;1111-11-1F&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;1111-11-1F&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-472">
    <description> Cast xs:date(&quot;0x10-11-11&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;0x10-11-11&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-473">
    <description> Cast xs:date(&quot;111 -11-11&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;111 -11-11&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-474">
    <description> Cast xs:date(&quot;1111-1 -11&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;1111-1 -11&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-475">
    <description> Cast xs:date(&quot;1111-11-1 &quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(&quot;1111-11-1 &quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-476">
    <description> Cast xs:dateTime(&quot;2002-11-23&quot;), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(&quot;2002-11-23&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-477">
    <description> Serialize xs:gYear(&quot;0040&quot;).</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(&quot;0040&quot;)</test>
    <result-string>xs:string(&quot;0040&quot;)</result-string>
    <result>
      <assert-string-value>0040</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-478">
    <description> Serialize xs:gYearMonth(&quot;0040-01&quot;).</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(&quot;0040-01&quot;)</test>
    <result-string>xs:string(&quot;0040-01&quot;)</result-string>
    <result>
      <assert-string-value>0040-01</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-479">
    <description> Cast to xs:QName, using a namespace from an element constructor.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[<e xmlns:prefix="http://example.com/"> { xs:QName("prefix:localName") } </e>]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<e xmlns:prefix="http://example.com/">prefix:localName</e>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-480">
    <description> All primitives in one query. Sub-types of xs:decimal. Sub-types of xs:decimal. Sub-types of xs:string</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(&quot;xs:untypedAtomic&quot;), xs:dateTime(&quot;2002-10-10T23:02:12Z&quot;), xs:date(&quot;2002-10-10Z&quot;), xs:time(&quot;23:02:12Z&quot;),
                xs:duration(&quot;P12M&quot;), xs:dayTimeDuration(&quot;PT1S&quot;), xs:yearMonthDuration(&quot;P1M&quot;), xs:float(&quot;3e3&quot;), xs:double(&quot;4e4&quot;),
                xs:decimal(&quot;2.0&quot;), xs:integer(&quot;16&quot;), xs:nonPositiveInteger(&quot;0&quot;), xs:negativeInteger(&quot;-4&quot;), xs:long(&quot;5&quot;),
                xs:int(&quot;6&quot;), xs:short(&quot;7&quot;), xs:byte(&quot;8&quot;), xs:nonNegativeInteger(&quot;9&quot;), xs:unsignedLong(&quot;10&quot;),
                xs:unsignedInt(&quot;11&quot;), xs:unsignedShort(&quot;12&quot;), xs:unsignedByte(&quot;13&quot;), xs:positiveInteger(&quot;14&quot;),
                xs:gYearMonth(&quot;1976-02Z&quot;), xs:gYear(&quot;2005-12:00&quot;), xs:gMonthDay(&quot;--12-25-14:00&quot;),
                xs:gDay(&quot;---25-14:00&quot;), xs:gMonth(&quot;--12-14:00&quot;), xs:boolean(&quot;true&quot;), xs:base64Binary(&quot;aaaa&quot;),
                xs:hexBinary(&quot;FFFF&quot;), xs:anyURI(&quot;http://example.com/&quot;), xs:QName(&quot;localName&quot;),
                xs:string(&quot;An xs:string&quot;), xs:normalizedString(&quot;normalizedString&quot;), xs:token(&quot;token&quot;),
                xs:language(&quot;language&quot;), xs:NMTOKEN(&quot;NMTOKEN&quot;), xs:Name(&quot;Name&quot;), xs:NCName(&quot;NCName&quot;),
                xs:ID(&quot;ID&quot;), xs:IDREF(&quot;IDREF&quot;), xs:ENTITY(&quot;ENTITY&quot;)</test>
    <result-string>xs:string(&quot;
             xs:untypedAtomic 2002-10-10T23:02:12Z 2002-10-10Z 23:02:12Z P1Y PT1S P1M 3000 40000 2 16 0
             -4 5 6 7 8 9 10 11 12 13 14 1976-02Z 2005-12:00 --12-25-14:00 ---25-14:00 --12-14:00 true
             aaaa FFFF http://example.com/ localName An xs:string normalizedString token language
             NMTOKEN Name NCName ID IDREF ENTITY&quot;)</result-string>
    <result>
      <assert-string-value normalize-space="true">
             xs:untypedAtomic 2002-10-10T23:02:12Z 2002-10-10Z 23:02:12Z P1Y PT1S P1M 3000 40000 2 16 0
             -4 5 6 7 8 9 10 11 12 13 14 1976-02Z 2005-12:00 --12-25-14:00 ---25-14:00 --12-14:00 true
             aaaa FFFF http://example.com/ localName An xs:string normalizedString token language
             NMTOKEN Name NCName ID IDREF ENTITY</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-481">
    <description> Try to cast inf to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>&quot;inf&quot; cast as xs:decimal</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-482">
    <description> Try to cast 'inF' to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>&quot;inF&quot; cast as xs:decimal</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-483">
    <description> Try to cast '-inF' to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>&quot;-inF&quot; cast as xs:decimal</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-484">
    <description> Try to cast 'inF ' to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>&quot;inF &quot; cast as xs:decimal</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-485">
    <description> Try to cast '-inF(space)' to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>&quot;-inF &quot; cast as xs:decimal</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-486">
    <description> Try to cast 'naN' to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>&quot;naN&quot; cast as xs:decimal</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-487">
    <description> Try to cast ' naN' to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>&quot; naN&quot; cast as xs:decimal</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-488">
    <description> Cast xs:QName to xs:language.</description>
    <created by="Frans Englich" on="2007-12-20+01:00"/>
    <test>xs:language(QName(&quot;http://example.com/&quot;, &quot;p:localName&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-489">
    <description> Cast xs:base64Binary to xs:language.</description>
    <created by="Frans Englich" on="2007-12-20+01:00"/>
    <test>xs:language(xs:base64Binary(&quot;1111&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-490">
    <description> Cast xs:hexBinary to xs:language.</description>
    <created by="Frans Englich" on="2007-12-20+01:00"/>
    <test>xs:language(xs:hexBinary(&quot;11&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-491">
    <description> Cast xs:gMonth to xs:language.</description>
    <created by="Frans Englich" on="2007-12-20+01:00"/>
    <test>xs:language(xs:gMonth(&quot;--10&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-492">
    <description> Cast xs:gDay to xs:language.</description>
    <created by="Frans Englich" on="2007-12-20+01:00"/>
    <test>xs:language(xs:gDay(&quot;---11&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-493">
    <description> Cast xs:gMonthDay to xs:language.</description>
    <created by="Frans Englich" on="2007-12-20+01:00"/>
    <test>xs:language(xs:gMonthDay(&quot;--10-15&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-494">
    <description> Cast xs:gYear to xs:language.</description>
    <created by="Frans Englich" on="2007-12-20+01:00"/>
    <test>xs:language(xs:gYear(&quot;4004&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-495">
    <description> Cast xs:integer to xs:language.</description>
    <created by="Frans Englich" on="2007-12-20+01:00"/>
    <test>xs:language(xs:integer(&quot;543&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-496">
    <description> Cast xs:decimal to xs:language.</description>
    <created by="Frans Englich" on="2007-12-20+01:00"/>
    <test>xs:language(xs:decimal(&quot;543&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-497">
    <description> Cast xs:double to xs:language.</description>
    <created by="Frans Englich" on="2007-12-20+01:00"/>
    <test>xs:language(xs:double(&quot;543&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-498">
    <description> Cast xs:float to xs:language.</description>
    <created by="Frans Englich" on="2007-12-20+01:00"/>
    <test>xs:language(xs:float(&quot;543&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-499">
    <description> Cast xs:time to xs:language.</description>
    <created by="Frans Englich" on="2007-12-20+01:00"/>
    <test>xs:language(current-time())</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-500">
    <description> Cast xs:date to xs:language.</description>
    <created by="Frans Englich" on="2007-12-20+01:00"/>
    <test>xs:language(current-date())</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-501">
    <description> Cast xs:duration to xs:language.</description>
    <created by="Frans Englich" on="2007-12-20+01:00"/>
    <test>xs:language(xs:duration(&quot;P1M&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-502">
    <description> Cast xs:dayTimeDuration to xs:language.</description>
    <created by="Frans Englich" on="2007-12-20+01:00"/>
    <test>xs:language(xs:dayTimeDuration(&quot;P1DT4H&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-503">
    <description> Cast xs:yearMonthDuration to xs:language.</description>
    <created by="Frans Englich" on="2007-12-20+01:00"/>
    <test>xs:language(xs:yearMonthDuration(&quot;P4Y5M&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-504">
    <description> Use a series of corner case Unicode codepoints.</description>
    <created by="Frans Englich" on="2007-12-20+01:00"/>
    <test>xs:NCName(codepoints-to-string((3648, 3592, 3617, 3626, 3660)))</test>
    <result-string>xs:string(&quot;&quot;)</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-505">
    <description> ':/' is an invalid URI, no scheme.</description>
    <created by="Frans Englich" on="2008-01-15+01:00"/>
    <test>xs:anyURI(&quot;:/&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-506">
    <description> Cast invalid gMonth.</description>
    <created by="Frans Englich" on="2008-11-13+01:00"/>
    <test>xs:gMonth(&quot;--02--&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-507">
    <description> Cast inF to xs:float.</description>
    <created by="Frans Englich" on="2009-01-12+01:00"/>
    <test>xs:float(&quot;inF&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-508">
    <description> Cast inF to xs:double.</description>
    <created by="Frans Englich" on="2009-01-12+01:00"/>
    <test>xs:double(&quot;inF&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-509">
    <description> Cast inF to xs:decimal.</description>
    <created by="Frans Englich" on="2009-01-12+01:00"/>
    <test>xs:decimal(&quot;inF&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-510">
    <description> Cast inf to xs:float.</description>
    <created by="Frans Englich" on="2009-01-12+01:00"/>
    <test>xs:float(&quot;inf&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-511">
    <description> Cast inf to xs:double.</description>
    <created by="Frans Englich" on="2009-01-12+01:00"/>
    <test>xs:double(&quot;inf&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-512">
    <description> Cast inf to xs:decimal.</description>
    <created by="Frans Englich" on="2009-01-12+01:00"/>
    <test>xs:decimal(&quot;inf&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-513">
    <description> Cast InF to xs:float.</description>
    <created by="Frans Englich" on="2009-01-12+01:00"/>
    <test>xs:float(&quot;InF&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-514">
    <description> Cast InF to xs:double.</description>
    <created by="Frans Englich" on="2009-01-12+01:00"/>
    <test>xs:double(&quot;InF&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-515">
    <description> Cast InF to xs:decimal.</description>
    <created by="Frans Englich" on="2009-01-12+01:00"/>
    <test>xs:decimal(&quot;InF&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-516">
    <description> Cast -InF to xs:float.</description>
    <created by="Frans Englich" on="2009-01-12+01:00"/>
    <test>xs:float(&quot;-InF&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-517">
    <description> Cast -InF to xs:double.</description>
    <created by="Frans Englich" on="2009-01-12+01:00"/>
    <test>xs:double(&quot;-InF&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-518">
    <description> Cast -InF to xs:decimal.</description>
    <created by="Frans Englich" on="2009-01-12+01:00"/>
    <test>xs:decimal(&quot;-InF&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-519">
    <description> Cast +InF to xs:float.</description>
    <created by="Frans Englich" on="2009-01-12+01:00"/>
    <test>xs:float(&quot;+InF&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-520">
    <description> Cast +InF to xs:double.</description>
    <created by="Frans Englich" on="2009-01-12+01:00"/>
    <test>xs:double(&quot;+InF&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-521">
    <description> Cast +InF to xs:decimal.</description>
    <created by="Frans Englich" on="2009-01-12+01:00"/>
    <test>xs:decimal(&quot;+InF&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-522">
    <description> Cast naN to xs:float.</description>
    <created by="Frans Englich" on="2009-01-12+01:00"/>
    <test>xs:float(&quot;naN&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-523">
    <description> Cast naN to xs:double.</description>
    <created by="Frans Englich" on="2009-01-12+01:00"/>
    <test>xs:double(&quot;naN&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-524">
    <description> Cast naN to xs:decimal.</description>
    <created by="Frans Englich" on="2009-01-12+01:00"/>
    <test>xs:decimal(&quot;naN&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
</test-set>