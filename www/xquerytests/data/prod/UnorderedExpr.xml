<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="prod-UnorderedExpr">
   <description>Tests for the OrderedExpr and UnorderedExpr productions</description>
   <link type="spec" document="http://www.w3.org/TR/xquery-30/"
         idref="doc-xquery30-UnorderedExpr"/>
   <link type="spec" document="XQuery" section-number="3.9"
         idref="id-unordered-expressions"/>
         
   <dependency type="spec" value="XQ10+"/>

   <environment name="partlist">
      <source role="." file="../docs/partlist.xml">
         <description>Data for the the XML Query PARTS use cases</description>
         <created by="XML Query WG" on="2005-02-11"/>
      </source>
   </environment>

   <test-case name="Orderexpr-1">
      <description> path expression ordered </description>
      <created by="Andreas Behm" on="2005-10-05"/>
      <environment ref="partlist"/>
      <test><![CDATA[ordered {//part[@partid < 2]}]]></test>
      <result>
         <assert-xml><![CDATA[<part partid="0" name="car"/><part partid="1" partof="0" name="engine"/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="Orderexpr-2">
      <description> path expression unordered </description>
      <created by="Andreas Behm" on="2005-10-05"/>
      <environment ref="partlist"/>
      <test><![CDATA[unordered {//part[@partid < 2]}]]></test>
      <result>
         <any-of>
            <assert-xml><![CDATA[<part partid="0" name="car"/><part partid="1" partof="0" name="engine"/>]]></assert-xml>
            <assert-xml><![CDATA[<part partid="1" partof="0" name="engine"/><part partid="0" name="car"/>]]></assert-xml>
         </any-of>
      </result>
   </test-case>

   <test-case name="Orderexpr-5">
      <description> position predicate ordered </description>
      <created by="Andreas Behm" on="2005-10-05"/>
      <environment ref="partlist"/>
      <test><![CDATA[ordered {//part[@partid < 2][2]}]]></test>
      <result>
         <assert-xml><![CDATA[<part partid="1" partof="0" name="engine"/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="Orderexpr-6">
      <description> position predicate unordered </description>
      <created by="Andreas Behm" on="2005-10-05"/>
      <environment ref="partlist"/>
      <test><![CDATA[unordered {//part[@partid < 2][2]}]]></test>
      <result>
         <any-of>
            <assert-xml><![CDATA[<part partid="1" partof="0" name="engine"/>]]></assert-xml>
            <assert-xml><![CDATA[<part partid="0" name="car"/>]]></assert-xml>
         </any-of>
      </result>
   </test-case>

   <test-case name="Orderexpr-9">
      <description> union ordered </description>
      <created by="Andreas Behm" on="2005-10-05"/>
      <environment ref="partlist"/>
      <test>ordered {//part[@partof = 1] union //part[@partid = 1] }</test>
      <result>
         <assert-xml><![CDATA[<part partid="1" partof="0" name="engine"/><part partid="3" partof="1" name="piston"/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="Orderexpr-10">
      <description> union unordered </description>
      <created by="Andreas Behm" on="2005-10-05"/>
      <environment ref="partlist"/>
      <test>unordered {//part[@partof = 1] union //part[@partid = 1] }</test>
      <result>
         <any-of>
            <assert-xml><![CDATA[<part partid="1" partof="0" name="engine"/><part partid="3" partof="1" name="piston"/>]]></assert-xml>
            <assert-xml><![CDATA[<part partid="3" partof="1" name="piston"/><part partid="1" partof="0" name="engine"/>]]></assert-xml>
         </any-of>
      </result>
   </test-case>

   <test-case name="Orderexpr-11">
      <description> intersect ordered </description>
      <created by="Andreas Behm" on="2005-10-05"/>
      <environment ref="partlist"/>
      <test><![CDATA[ordered {//part[@partof < 2] intersect //part[@partid = 1 or @partid > 2] }]]></test>
      <result>
         <assert-xml><![CDATA[<part partid="1" partof="0" name="engine"/><part partid="3" partof="1" name="piston"/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="Orderexpr-12">
      <description> intersect unordered </description>
      <created by="Andreas Behm" on="2005-10-05"/>
      <environment ref="partlist"/>
      <test><![CDATA[unordered {//part[@partof < 2] intersect //part[@partid = 1 or @partid > 2] }]]></test>
      <result>
         <any-of>
            <assert-xml><![CDATA[<part partid="1" partof="0" name="engine"/><part partid="3" partof="1" name="piston"/>]]></assert-xml>
            <assert-xml><![CDATA[<part partid="3" partof="1" name="piston"/><part partid="1" partof="0" name="engine"/>]]></assert-xml>
         </any-of>
      </result>
   </test-case>

   <test-case name="Orderexpr-13">
      <description> except ordered </description>
      <created by="Andreas Behm" on="2005-10-05"/>
      <environment ref="partlist"/>
      <test><![CDATA[ordered {//part[@partof < 2] except //part[@partid = 2] }]]></test>
      <result>
         <assert-xml><![CDATA[<part partid="1" partof="0" name="engine"/><part partid="3" partof="1" name="piston"/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="Orderexpr-14">
      <description> except unordered </description>
      <created by="Andreas Behm" on="2005-10-05"/>
      <environment ref="partlist"/>
      <test><![CDATA[unordered {//part[@partof < 2] except //part[@partid = 2] }]]></test>
      <result>
         <any-of>
            <assert-xml><![CDATA[<part partid="1" partof="0" name="engine"/><part partid="3" partof="1" name="piston"/>]]></assert-xml>
            <assert-xml><![CDATA[<part partid="3" partof="1" name="piston"/><part partid="1" partof="0" name="engine"/>]]></assert-xml>
         </any-of>
      </result>
   </test-case>

   <test-case name="Orderexpr-15">
      <description> fn:subsequence ordered </description>
      <created by="Andreas Behm" on="2005-10-05"/>
      <test>ordered {fn:subsequence((1,2,3,4),2,2)}</test>
      <result>
         <assert-string-value>2 3</assert-string-value>
      </result>
   </test-case>

   <test-case name="Orderexpr-16">
      <description> fn:subsequence unordered </description>
      <created by="Andreas Behm" on="2005-10-05"/>
      <test>unordered {fn:subsequence((1,2,3,4),2,2)}</test>
      <result>
         <any-of>
            <assert-string-value>2 3</assert-string-value>
            <assert-string-value>3 2</assert-string-value>
         </any-of>
      </result>
   </test-case>

   <test-case name="Orderexpr-17">
      <description> fn:reverse ordered </description>
      <created by="Andreas Behm" on="2005-10-05"/>
      <test>ordered {fn:reverse((3,2))}</test>
      <result>
         <assert-string-value>2 3</assert-string-value>
      </result>
   </test-case>

   <test-case name="Orderexpr-18">
      <description> fn:reverse unordered </description>
      <created by="Andreas Behm" on="2005-10-05"/>
      <test>unordered {fn:reverse((2,3))}</test>
      <result>
         <any-of>
            <assert-string-value>2 3</assert-string-value>
            <assert-string-value>3 2</assert-string-value>
         </any-of>
      </result>
   </test-case>

   <test-case name="Orderexpr-19">
      <description> FLWOR ordered </description>
      <created by="Andreas Behm" on="2005-10-05"/>
      <environment ref="partlist"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[ordered { for $i in (//part[@partid = 1], //part[@partid = 2]), $j in (//part[@partof = $i/@partid]) where ($i/@partid + $j/@partid) < 7 return $i/@partid + $j/@partid }]]></test>
      <result>
         <assert-string-value>4 6</assert-string-value>
      </result>
   </test-case>

   <test-case name="Orderexpr-20">
      <description> FLWOR unordered </description>
      <created by="Andreas Behm" on="2005-10-05"/>
      <environment ref="partlist"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[unordered { for $i in (//part[@partid = 1], //part[@partid = 2]), $j in (//part[@partof = $i/@partid]) where ($i/@partid + $j/@partid) < 7 return $i/@partid + $j/@partid }]]></test>
      <result>
         <any-of>
            <assert-string-value>4 6</assert-string-value>
            <assert-string-value>6 4</assert-string-value>
         </any-of>
      </result>
   </test-case>

   <test-case name="orderedunorderedexpr-1">
      <description> Evaluation of ordered expression together with if expression ("some" operator). </description>
      <created by="Carmelo Montanez" on="2005-12-09"/>
      <test>ordered {if (fn:true()) then (0,1,2,3,4) else ("A","B","C")}</test>
      <result>
         <assert-string-value>0 1 2 3 4</assert-string-value>
      </result>
   </test-case>

   <test-case name="orderedunorderedexpr-2">
      <description> Evaluation of ordered expression used with "or" expression ("and" operator). </description>
      <created by="Carmelo Montanez" on="2005-12-09"/>
      <test>ordered {if (1 eq 1 and 2 eq 2) then (0,1,2,3,4) else ("a","b")}</test>
      <result>
         <assert-string-value>0 1 2 3 4</assert-string-value>
      </result>
   </test-case>

   <test-case name="orderedunorderedexpr-3">
      <description> Evaluation of ordered expression used with "or" expression ("or" operator). </description>
      <created by="Carmelo Montanez" on="2005-12-09"/>
      <test>ordered {if (1 eq 1 or 2 eq 3) then (0,1,2,3,4) else ("a","b")}</test>
      <result>
         <assert-string-value>0 1 2 3 4</assert-string-value>
      </result>
   </test-case>

   <test-case name="orderedunorderedexpr-4">
      <description> Evaluation of ordered expression used with quantified expression. </description>
      <created by="Carmelo Montanez" on="2005-12-09"/>
      <test>ordered {if (some $x in (1, 2, 3), $y in (2, 3, 4) satisfies $x + $y = 4) then (0,1,2,3,4) else ("a","b")}</test>
      <result>
         <assert-string-value>0 1 2 3 4</assert-string-value>
      </result>
   </test-case>

   <test-case name="orderedunorderedexpr-5">
      <description> Evaluation of ordered expression used with quantified expression. </description>
      <created by="Carmelo Montanez" on="2005-12-09"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[ordered {if (every $x in (1, 2, 3) satisfies $x < 4) then (0,1,2,3,4) else ("a","b")}]]></test>
      <result>
         <assert-string-value>0 1 2 3 4</assert-string-value>
      </result>
   </test-case>

   <test-case name="orderedunorderedexpr-6">
      <description> Evaluation of ordered expression used with typeswitch expression. </description>
      <created by="Carmelo Montanez" on="2005-12-09"/>
      <test>ordered {typeswitch(123) case $i as xs:string return ("a","b","c") case $i as xs:double return ("a","b","c") case $i as xs:integer return (1,2,3,4) default return ("a","b","c") }</test>
      <result>
         <assert-string-value>1 2 3 4</assert-string-value>
      </result>
   </test-case>

   <test-case name="K-OrderExpr-1">
      <description> A nested expression must be present when 'ordered' is used. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>ordered{}</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-OrderExpr-2">
      <description> A nested expression must be present when 'unordered' is used. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>unordered{}</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-OrderExpr-3">
      <description> A simple test of 'ordered{}'. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>ordered{true()}</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-OrderExpr-4">
      <description> A simple test of 'unordered{}'. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>unordered{true()}</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
</test-set>