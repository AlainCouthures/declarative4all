<?xml version="1.0" encoding="UTF-8"?>
<test-set  xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="math-pow"  covers="math-pow">
    <description>Tests for the math:pow function introduced in XPath 3.0</description>
    <link type="spec" document="http://www.w3.org/TR/xpath-functions-30/" idref="func-pow"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    
    <test-case name="math-pow-001">
        <description>Evaluate the function math:pow() with the arguments () and 93.7</description>
        <created by="O'Neil Delpratt, Saxonica" on="2010-12-10"/>        
        <environment ref="math"/>        
        <test>math:pow((), 93.7)</test>
        <result>
            <assert-empty />
        </result>
    </test-case>
    
    <test-case name="math-pow-002">
        <description>Evaluate the function math:pow() with  the arguments 2 and 3</description>
        <created by="O'Neil Delpratt, Saxonica" on="2010-12-10"/>        
        <environment ref="math"/>        
        <test>math:pow(2, 3)</test>
        <result>
            <assert-eq>8.0e0</assert-eq>
        </result>
    </test-case>
    <test-case name="math-pow-003">
        <description>Evaluate the function math:pow() with  the arguments -2 and 3</description>
        <created by="O'Neil Delpratt, Saxonica" on="2010-12-10"/>        
        <environment ref="math"/>        
        <test>math:pow(-2, 3)</test>
        <result>
            <assert-eq>-8.0e0</assert-eq>
        </result>
    </test-case>
    <test-case name="math-pow-004">
        <description>Evaluate the function math:pow() with  the arguments -2 and -3</description>
        <created by="O'Neil Delpratt, Saxonica" on="2010-12-10"/>        
        <environment ref="math"/>        
        <test>math:pow(-2, -3)</test>
        <result>
            <assert-eq>-0.125e0</assert-eq>
        </result>
    </test-case>
    <test-case name="math-pow-005">
        <description>Evaluate the function math:pow() with  the arguments 2 and 0</description>
        <created by="O'Neil Delpratt, Saxonica" on="2010-12-10"/>        
        <environment ref="math"/>        
        <test>math:pow(2, 0)</test>
        <result>
            <assert-eq>1.0e0</assert-eq>
        </result>
    </test-case>
    <test-case name="math-pow-006">
        <description>Evaluate the function math:pow() with  the arguments 0 and 0</description>
        <created by="O'Neil Delpratt, Saxonica" on="2010-12-10"/>        
        <environment ref="math"/>        
        <test>math:pow(0, 0)</test>
        <result>
            <assert-eq>1.0e0</assert-eq>
        </result>
    </test-case>
    <test-case name="math-pow-007">
        <description>Evaluate the function math:pow() with  the arguments xs:double('INF') and 0</description>
        <created by="O'Neil Delpratt, Saxonica" on="2010-12-10"/>        
        <environment ref="math"/>        
        <test>math:pow(xs:double('INF'), 0)</test>
        <result>
            <assert-eq>1.0e0</assert-eq>
        </result>
    </test-case>
    <test-case name="math-pow-008">
        <description>Evaluate the function math:pow() with  the arguments xs:double('NaN') and 0</description>
        <created by="O'Neil Delpratt, Saxonica" on="2010-12-10"/>        
        <environment ref="math"/>        
        <test>math:pow(xs:double('NaN'), 0)</test>
        <result>
            <assert-eq>1.0e0</assert-eq>
        </result>
    </test-case>
    <test-case name="math-pow-009">
        <description>Evaluate the function math:pow() with  the arguments -math:pi() and 0</description>
        <created by="O'Neil Delpratt, Saxonica" on="2010-12-10"/>        
        <environment ref="math"/>        
        <test>math:pow(-math:pi(), 0)</test>
        <result>
            <assert-eq>1.0e0</assert-eq>
        </result>
    </test-case>
    <test-case name="math-pow-010">
        <description>Evaluate the function math:pow() with  the arguments 0e0 and 3</description>
        <created by="O'Neil Delpratt, Saxonica" on="2010-12-10"/>        
        <environment ref="math"/>        
        <test>math:pow(0e0, 3)</test>
        <result>
            <assert-eq>0.0e0</assert-eq>
        </result>
    </test-case>
    <test-case name="math-pow-011">
        <description>Evaluate the function math:pow() with  the arguments 0e0 and 4</description>
        <created by="O'Neil Delpratt, Saxonica" on="2010-12-10"/>        
        <environment ref="math"/>        
        <test>math:pow(0e0, 4)</test>
        <result>
            <assert-eq>0.0e0</assert-eq>
        </result>
    </test-case>
    <test-case name="math-pow-012">
        <description>Evaluate the function math:pow() with  the arguments -0e0 and 3</description>
        <created by="O'Neil Delpratt, Saxonica" on="2010-12-10"/>        
        <environment ref="math"/>        
        <test>math:pow(-0e0, 3)</test>
        <result>
            <assert-eq>-0.0e0</assert-eq>
        </result>
    </test-case>
    <test-case name="math-pow-013">
        <description>Evaluate the function math:pow() with  the arguments 0 and 4</description>
        <created by="O'Neil Delpratt, Saxonica" on="2010-12-10"/>        
        <environment ref="math"/>        
        <test>math:pow(0, 4)</test>
        <result>
            <assert-eq>0.0e0</assert-eq>
        </result>
    </test-case>
    <test-case name="math-pow-014">
        <description>Evaluate the function math:pow() with  the arguments 0e0 and -3</description>
        <created by="O'Neil Delpratt, Saxonica" on="2010-12-10"/>        
        <environment ref="math"/>        
        <test>math:pow(0e0, -3)</test>
        <result>
            <assert-eq>xs:double('INF')</assert-eq>
        </result>
    </test-case>
    <test-case name="math-pow-015">
        <description>Evaluate the function math:pow() with  the arguments 0e0 and -4</description>
        <created by="O'Neil Delpratt, Saxonica" on="2010-12-10"/>        
        <environment ref="math"/>        
        <test>math:pow(0e0, -4)</test>
        <result>
            <assert-eq>xs:double('INF')</assert-eq>
        </result>
    </test-case>
    <test-case name="math-pow-016">
        <description>Evaluate the function math:pow() with  the arguments -0e0 and -3</description>
        <created by="O'Neil Delpratt, Saxonica" on="2010-12-10"/>        
        <environment ref="math"/>        
        <test>math:pow(-0e0, -3)</test>
        <result>
            <assert-eq>xs:double('-INF')</assert-eq>
        </result>
    </test-case>
    <test-case name="math-pow-017">
        <description>Evaluate the function math:pow() with  the arguments 0 and -4</description>
        <created by="O'Neil Delpratt, Saxonica" on="2010-12-10"/>        
        <environment ref="math"/>        
        <test>math:pow(0, -4)</test>
        <result>
            <assert-eq>xs:double('INF')</assert-eq>
        </result>
    </test-case>
    <test-case name="math-pow-018">
        <description>Evaluate the function math:pow() with  the arguments 16 and 0.5e0</description>
        <created by="O'Neil Delpratt, Saxonica" on="2010-12-10"/>        
        <environment ref="math"/>        
        <test>math:pow(16, 0.5e0)</test>
        <result>
            <assert-eq>4.0e0</assert-eq>
        </result>
    </test-case>
    <test-case name="math-pow-019">
        <description>Evaluate the function math:pow() with  the arguments 16 and 0.25e0</description>
        <created by="O'Neil Delpratt, Saxonica" on="2010-12-10"/>        
        <environment ref="math"/>        
        <test>math:pow(16, 0.25e0)</test>
        <result>
            <assert-eq>2.0e0</assert-eq>
        </result>
    </test-case>
    <test-case name="math-pow-020">
        <description>Evaluate the function math:pow() with  the arguments 0e0 and -3.0e0</description>
        <created by="O'Neil Delpratt, Saxonica" on="2010-12-10"/>        
        <environment ref="math"/>        
        <test>math:pow(0e0, -3.0e0)</test>
        <result>
            <assert-eq>xs:double('INF')</assert-eq>
        </result>
    </test-case>
    <test-case name="math-pow-021">
        <description>Evaluate the function math:pow() with  the arguments -0e0 and -3.0e0</description>
        <created by="O'Neil Delpratt, Saxonica" on="2010-12-10"/>        
        <environment ref="math"/>        
        <test>math:pow(-0e0, -3.0e0)</test>
        <result>
            <assert-eq>xs:double('-INF')</assert-eq>
        </result>
    </test-case>
    <test-case name="math-pow-022">
        <description>Evaluate the function math:pow() with  the arguments 0e0 and -3.1e0</description>
        <created by="O'Neil Delpratt, Saxonica" on="2010-12-10"/>        
        <environment ref="math"/>        
        <test>math:pow(0e0, -3.1e0)</test>
        <result>
            <assert-eq>xs:double('INF')</assert-eq>
        </result>
    </test-case>
    <test-case name="math-pow-023">
        <description>Evaluate the function math:pow() with  the arguments -0e0 and -3.1e0</description>
        <created by="O'Neil Delpratt, Saxonica" on="2010-12-10"/>        
        <environment ref="math"/>        
        <test>math:pow(-0e0, -3.1e0)</test>
        <result>
            <assert-eq>xs:double('INF')</assert-eq>
        </result>
    </test-case>
    <test-case name="math-pow-024">
        <description>Evaluate the function math:pow() with  the arguments 0e0 3.0e0</description>
        <created by="O'Neil Delpratt, Saxonica" on="2010-12-10"/>        
        <environment ref="math"/>        
        <test>math:pow(0e0, 3.0e0)</test>
        <result>
            <assert-eq>0.0e0</assert-eq>
        </result>
    </test-case>
    <test-case name="math-pow-025">
        <description>Evaluate the function math:pow() with  the arguments -0e0 and 3.0e0</description>
        <created by="O'Neil Delpratt, Saxonica" on="2010-12-10"/>        
        <environment ref="math"/>        
        <test>math:pow(-0e0, 3.0e0)</test>
        <result>
            <assert-eq>-0.0e0</assert-eq>
        </result>
    </test-case>
    <test-case name="math-pow-026">
        <description>Evaluate the function math:pow() with  the arguments 0e0 3.1e0</description>
        <created by="O'Neil Delpratt, Saxonica" on="2010-12-10"/>        
        <environment ref="math"/>        
        <test>math:pow(0e0, 3.1e0)</test>
        <result>
            <assert-eq>0.0e0</assert-eq>
        </result>
    </test-case>
    <test-case name="math-pow-027">
        <description>Evaluate the function math:pow() with  the arguments -0e0 and 3.1e0</description>
        <created by="O'Neil Delpratt, Saxonica" on="2010-12-10"/>        
        <environment ref="math"/>        
        <test>math:pow(-0e0, 3.1e0)</test>
        <result>
            <assert-eq>0.0e0</assert-eq>
        </result>
    </test-case>
    <test-case name="math-pow-028">
        <description>Evaluate the function math:pow() with  the arguments -1 and xs:double('INF')</description>
        <created by="O'Neil Delpratt, Saxonica" on="2010-12-10"/>        
        <environment ref="math"/>        
        <test>math:pow(-1, xs:double('INF'))</test>
        <result>
            <assert-eq>1.0e0</assert-eq>
        </result>
    </test-case>
    <test-case name="math-pow-029">
        <description>Evaluate the function math:pow() with  the arguments -1 and xs:double('-INF')</description>
        <created by="O'Neil Delpratt, Saxonica" on="2010-12-10"/>        
        <environment ref="math"/>        
        <test>math:pow(-1, xs:double('-INF'))</test>
        <result>
            <assert-eq>1.0e0</assert-eq>
        </result>
    </test-case>
    <test-case name="math-pow-030">
        <description>Evaluate the function math:pow() with  the arguments 1 and xs:double('INF')</description>
        <created by="O'Neil Delpratt, Saxonica" on="2010-12-10"/>        
        <environment ref="math"/>        
        <test>math:pow(1, xs:double('INF'))</test>
        <result>
            <assert-eq>1.0e0</assert-eq>
        </result>
    </test-case>
    <test-case name="math-pow-031">
        <description>Evaluate the function math:pow() with the arguments 1 and xs:double('-INF')</description>
        <created by="O'Neil Delpratt, Saxonica" on="2010-12-10"/>        
        <environment ref="math"/>        
        <test>math:pow(1, xs:double('-INF'))</test>
        <result>
            <assert-eq>1.0e0</assert-eq>
        </result>
    </test-case>
    <test-case name="math-pow-032">
        <description>Evaluate the function math:pow() with the arguments 1 and xs:double('NaN')</description>
        <created by="O'Neil Delpratt, Saxonica" on="2010-12-10"/>        
        <environment ref="math"/>        
        <test>math:pow(1, xs:double('NaN'))</test>
        <result>
            <assert-eq>1.0e0</assert-eq>
        </result>
    </test-case>
    <test-case name="math-pow-033">
        <description>Evaluate the function math:pow() with the arguments -2.5 and 2.0e0</description>
        <created by="O'Neil Delpratt, Saxonica" on="2010-12-10"/>        
        <environment ref="math"/>        
        <test>math:pow(-2.5e0, 2.0e0)</test>
        <result>
            <assert-eq>6.25e0</assert-eq>
        </result>
    </test-case>
    <test-case name="math-pow-034">
        <description>Evaluate the function math:pow() with  the arguments -2.5 and 2.0000001</description>
        <created by="O'Neil Delpratt, Saxonica" on="2010-12-10"/>        
        <environment ref="math"/>        
        <test>math:pow(-2.5e0, 2.00000001e0)</test>
        <result>
            <assert-string-value>NaN</assert-string-value>
        </result>
    </test-case>
</test-set>
