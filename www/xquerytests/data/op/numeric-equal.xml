<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="op-numeric-equal">
   <description>Tests for the numeric-equal() function</description>
   <link type="spec" document="http://www.w3.org/TR/xpath-functions-30/"
         idref="func-numeric-equal"/>

   <test-case name="op-numeric-equalint2args-1">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:int(lower bound) $arg2 = xs:int(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:int("-2147483648") eq xs:int("-2147483648")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalint2args-2">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:int(mid range) $arg2 = xs:int(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:int("-1873914410") eq xs:int("-2147483648")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalint2args-3">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:int(upper bound) $arg2 = xs:int(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:int("2147483647") eq xs:int("-2147483648")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalint2args-4">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:int(lower bound) $arg2 = xs:int(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:int("-2147483648") eq xs:int("-1873914410")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalint2args-5">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:int(lower bound) $arg2 = xs:int(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:int("-2147483648") eq xs:int("2147483647")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalint2args-6">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:int(lower bound) $arg2 = xs:int(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:int("-2147483648") ne xs:int("-2147483648")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalint2args-7">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:int(mid range) $arg2 = xs:int(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:int("-1873914410") ne xs:int("-2147483648")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalint2args-8">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:int(upper bound) $arg2 = xs:int(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:int("2147483647") ne xs:int("-2147483648")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalint2args-9">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:int(lower bound) $arg2 = xs:int(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:int("-2147483648") ne xs:int("-1873914410")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalint2args-10">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:int(lower bound) $arg2 = xs:int(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:int("-2147483648") ne xs:int("2147483647")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalintg2args-1">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:integer(lower bound) $arg2 = xs:integer(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:integer("-999999999999999999") eq xs:integer("-999999999999999999")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalintg2args-2">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:integer(mid range) $arg2 = xs:integer(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:integer("830993497117024304") eq xs:integer("-999999999999999999")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalintg2args-3">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:integer(upper bound) $arg2 = xs:integer(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:integer("999999999999999999") eq xs:integer("-999999999999999999")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalintg2args-4">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:integer(lower bound) $arg2 = xs:integer(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:integer("-999999999999999999") eq xs:integer("830993497117024304")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalintg2args-5">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:integer(lower bound) $arg2 = xs:integer(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:integer("-999999999999999999") eq xs:integer("999999999999999999")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalintg2args-6">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:integer(lower bound) $arg2 = xs:integer(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:integer("-999999999999999999") ne xs:integer("-999999999999999999")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalintg2args-7">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:integer(mid range) $arg2 = xs:integer(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:integer("830993497117024304") ne xs:integer("-999999999999999999")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalintg2args-8">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:integer(upper bound) $arg2 = xs:integer(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:integer("999999999999999999") ne xs:integer("-999999999999999999")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalintg2args-9">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:integer(lower bound) $arg2 = xs:integer(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:integer("-999999999999999999") ne xs:integer("830993497117024304")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalintg2args-10">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:integer(lower bound) $arg2 = xs:integer(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:integer("-999999999999999999") ne xs:integer("999999999999999999")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equaldec2args-1">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:decimal(lower bound) $arg2 = xs:decimal(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:decimal("-999999999999999999") eq xs:decimal("-999999999999999999")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equaldec2args-2">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:decimal(mid range) $arg2 = xs:decimal(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:decimal("617375191608514839") eq xs:decimal("-999999999999999999")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equaldec2args-3">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:decimal(upper bound) $arg2 = xs:decimal(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:decimal("999999999999999999") eq xs:decimal("-999999999999999999")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equaldec2args-4">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:decimal(lower bound) $arg2 = xs:decimal(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:decimal("-999999999999999999") eq xs:decimal("617375191608514839")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equaldec2args-5">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:decimal(lower bound) $arg2 = xs:decimal(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:decimal("-999999999999999999") eq xs:decimal("999999999999999999")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equaldec2args-6">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:decimal(lower bound) $arg2 = xs:decimal(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:decimal("-999999999999999999") ne xs:decimal("-999999999999999999")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equaldec2args-7">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:decimal(mid range) $arg2 = xs:decimal(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:decimal("617375191608514839") ne xs:decimal("-999999999999999999")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equaldec2args-8">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:decimal(upper bound) $arg2 = xs:decimal(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:decimal("999999999999999999") ne xs:decimal("-999999999999999999")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equaldec2args-9">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:decimal(lower bound) $arg2 = xs:decimal(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:decimal("-999999999999999999") ne xs:decimal("617375191608514839")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equaldec2args-10">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:decimal(lower bound) $arg2 = xs:decimal(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:decimal("-999999999999999999") ne xs:decimal("999999999999999999")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equaldbl2args-1">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:double(lower bound) $arg2 = xs:double(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:double("-1.7976931348623157E308") eq xs:double("-1.7976931348623157E308")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equaldbl2args-2">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:double(mid range) $arg2 = xs:double(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:double("0") eq xs:double("-1.7976931348623157E308")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equaldbl2args-3">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:double(upper bound) $arg2 = xs:double(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:double("1.7976931348623157E308") eq xs:double("-1.7976931348623157E308")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equaldbl2args-4">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:double(lower bound) $arg2 = xs:double(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:double("-1.7976931348623157E308") eq xs:double("0")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equaldbl2args-5">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:double(lower bound) $arg2 = xs:double(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:double("-1.7976931348623157E308") eq xs:double("1.7976931348623157E308")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equaldbl2args-6">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:double(lower bound) $arg2 = xs:double(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:double("-1.7976931348623157E308") ne xs:double("-1.7976931348623157E308")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equaldbl2args-7">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:double(mid range) $arg2 = xs:double(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:double("0") ne xs:double("-1.7976931348623157E308")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equaldbl2args-8">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:double(upper bound) $arg2 = xs:double(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:double("1.7976931348623157E308") ne xs:double("-1.7976931348623157E308")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equaldbl2args-9">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:double(lower bound) $arg2 = xs:double(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:double("-1.7976931348623157E308") ne xs:double("0")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equaldbl2args-10">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:double(lower bound) $arg2 = xs:double(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:double("-1.7976931348623157E308") ne xs:double("1.7976931348623157E308")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalflt2args-1">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:float(lower bound) $arg2 = xs:float(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:float("-3.4028235E38") eq xs:float("-3.4028235E38")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalflt2args-2">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:float(mid range) $arg2 = xs:float(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:float("0") eq xs:float("-3.4028235E38")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalflt2args-3">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:float(upper bound) $arg2 = xs:float(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:float("3.4028235E38") eq xs:float("-3.4028235E38")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalflt2args-4">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:float(lower bound) $arg2 = xs:float(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:float("-3.4028235E38") eq xs:float("0")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalflt2args-5">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:float(lower bound) $arg2 = xs:float(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:float("-3.4028235E38") eq xs:float("3.4028235E38")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalflt2args-6">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:float(lower bound) $arg2 = xs:float(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:float("-3.4028235E38") ne xs:float("-3.4028235E38")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalflt2args-7">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:float(mid range) $arg2 = xs:float(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:float("0") ne xs:float("-3.4028235E38")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalflt2args-8">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:float(upper bound) $arg2 = xs:float(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:float("3.4028235E38") ne xs:float("-3.4028235E38")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalflt2args-9">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:float(lower bound) $arg2 = xs:float(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:float("-3.4028235E38") ne xs:float("0")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalflt2args-10">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:float(lower bound) $arg2 = xs:float(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:float("-3.4028235E38") ne xs:float("3.4028235E38")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equallng2args-1">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:long(lower bound) $arg2 = xs:long(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:long("-92233720368547758") eq xs:long("-92233720368547758")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equallng2args-2">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:long(mid range) $arg2 = xs:long(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:long("-47175562203048468") eq xs:long("-92233720368547758")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equallng2args-3">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:long(upper bound) $arg2 = xs:long(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:long("92233720368547758") eq xs:long("-92233720368547758")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equallng2args-4">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:long(lower bound) $arg2 = xs:long(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:long("-92233720368547758") eq xs:long("-47175562203048468")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equallng2args-5">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:long(lower bound) $arg2 = xs:long(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:long("-92233720368547758") eq xs:long("92233720368547758")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equallng2args-6">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:long(lower bound) $arg2 = xs:long(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:long("-92233720368547758") ne xs:long("-92233720368547758")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equallng2args-7">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:long(mid range) $arg2 = xs:long(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:long("-47175562203048468") ne xs:long("-92233720368547758")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equallng2args-8">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:long(upper bound) $arg2 = xs:long(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:long("92233720368547758") ne xs:long("-92233720368547758")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equallng2args-9">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:long(lower bound) $arg2 = xs:long(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:long("-92233720368547758") ne xs:long("-47175562203048468")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equallng2args-10">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:long(lower bound) $arg2 = xs:long(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:long("-92233720368547758") ne xs:long("92233720368547758")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalusht2args-1">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:unsignedShort(lower bound) $arg2 = xs:unsignedShort(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:unsignedShort("0") eq xs:unsignedShort("0")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalusht2args-2">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:unsignedShort(mid range) $arg2 = xs:unsignedShort(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:unsignedShort("44633") eq xs:unsignedShort("0")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalusht2args-3">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:unsignedShort(upper bound) $arg2 = xs:unsignedShort(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:unsignedShort("65535") eq xs:unsignedShort("0")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalusht2args-4">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:unsignedShort(lower bound) $arg2 = xs:unsignedShort(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:unsignedShort("0") eq xs:unsignedShort("44633")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalusht2args-5">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:unsignedShort(lower bound) $arg2 = xs:unsignedShort(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:unsignedShort("0") eq xs:unsignedShort("65535")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalusht2args-6">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:unsignedShort(lower bound) $arg2 = xs:unsignedShort(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:unsignedShort("0") ne xs:unsignedShort("0")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalusht2args-7">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:unsignedShort(mid range) $arg2 = xs:unsignedShort(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:unsignedShort("44633") ne xs:unsignedShort("0")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalusht2args-8">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:unsignedShort(upper bound) $arg2 = xs:unsignedShort(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:unsignedShort("65535") ne xs:unsignedShort("0")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalusht2args-9">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:unsignedShort(lower bound) $arg2 = xs:unsignedShort(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:unsignedShort("0") ne xs:unsignedShort("44633")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalusht2args-10">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:unsignedShort(lower bound) $arg2 = xs:unsignedShort(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:unsignedShort("0") ne xs:unsignedShort("65535")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalnint2args-1">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:negativeInteger(lower bound) $arg2 = xs:negativeInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:negativeInteger("-999999999999999999") eq xs:negativeInteger("-999999999999999999")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalnint2args-2">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:negativeInteger(mid range) $arg2 = xs:negativeInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:negativeInteger("-297014075999096793") eq xs:negativeInteger("-999999999999999999")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalnint2args-3">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:negativeInteger(upper bound) $arg2 = xs:negativeInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:negativeInteger("-1") eq xs:negativeInteger("-999999999999999999")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalnint2args-4">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:negativeInteger(lower bound) $arg2 = xs:negativeInteger(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:negativeInteger("-999999999999999999") eq xs:negativeInteger("-297014075999096793")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalnint2args-5">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:negativeInteger(lower bound) $arg2 = xs:negativeInteger(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:negativeInteger("-999999999999999999") eq xs:negativeInteger("-1")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalnint2args-6">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:negativeInteger(lower bound) $arg2 = xs:negativeInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:negativeInteger("-999999999999999999") ne xs:negativeInteger("-999999999999999999")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalnint2args-7">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:negativeInteger(mid range) $arg2 = xs:negativeInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:negativeInteger("-297014075999096793") ne xs:negativeInteger("-999999999999999999")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalnint2args-8">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:negativeInteger(upper bound) $arg2 = xs:negativeInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:negativeInteger("-1") ne xs:negativeInteger("-999999999999999999")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalnint2args-9">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:negativeInteger(lower bound) $arg2 = xs:negativeInteger(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:negativeInteger("-999999999999999999") ne xs:negativeInteger("-297014075999096793")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalnint2args-10">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:negativeInteger(lower bound) $arg2 = xs:negativeInteger(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:negativeInteger("-999999999999999999") ne xs:negativeInteger("-1")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalpint2args-1">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:positiveInteger(lower bound) $arg2 = xs:positiveInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:positiveInteger("1") eq xs:positiveInteger("1")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalpint2args-2">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:positiveInteger(mid range) $arg2 = xs:positiveInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:positiveInteger("52704602390610033") eq xs:positiveInteger("1")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalpint2args-3">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:positiveInteger(upper bound) $arg2 = xs:positiveInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:positiveInteger("999999999999999999") eq xs:positiveInteger("1")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalpint2args-4">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:positiveInteger(lower bound) $arg2 = xs:positiveInteger(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:positiveInteger("1") eq xs:positiveInteger("52704602390610033")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalpint2args-5">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:positiveInteger(lower bound) $arg2 = xs:positiveInteger(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:positiveInteger("1") eq xs:positiveInteger("999999999999999999")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalpint2args-6">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:positiveInteger(lower bound) $arg2 = xs:positiveInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:positiveInteger("1") ne xs:positiveInteger("1")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalpint2args-7">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:positiveInteger(mid range) $arg2 = xs:positiveInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:positiveInteger("52704602390610033") ne xs:positiveInteger("1")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalpint2args-8">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:positiveInteger(upper bound) $arg2 = xs:positiveInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:positiveInteger("999999999999999999") ne xs:positiveInteger("1")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalpint2args-9">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:positiveInteger(lower bound) $arg2 = xs:positiveInteger(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:positiveInteger("1") ne xs:positiveInteger("52704602390610033")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalpint2args-10">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:positiveInteger(lower bound) $arg2 = xs:positiveInteger(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:positiveInteger("1") ne xs:positiveInteger("999999999999999999")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalulng2args-1">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:unsignedLong(lower bound) $arg2 = xs:unsignedLong(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:unsignedLong("0") eq xs:unsignedLong("0")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalulng2args-2">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:unsignedLong(mid range) $arg2 = xs:unsignedLong(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:unsignedLong("130747108607674654") eq xs:unsignedLong("0")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalulng2args-3">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:unsignedLong(upper bound) $arg2 = xs:unsignedLong(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:unsignedLong("184467440737095516") eq xs:unsignedLong("0")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalulng2args-4">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:unsignedLong(lower bound) $arg2 = xs:unsignedLong(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:unsignedLong("0") eq xs:unsignedLong("130747108607674654")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalulng2args-5">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:unsignedLong(lower bound) $arg2 = xs:unsignedLong(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:unsignedLong("0") eq xs:unsignedLong("184467440737095516")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalulng2args-6">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:unsignedLong(lower bound) $arg2 = xs:unsignedLong(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:unsignedLong("0") ne xs:unsignedLong("0")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalulng2args-7">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:unsignedLong(mid range) $arg2 = xs:unsignedLong(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:unsignedLong("130747108607674654") ne xs:unsignedLong("0")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalulng2args-8">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:unsignedLong(upper bound) $arg2 = xs:unsignedLong(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:unsignedLong("184467440737095516") ne xs:unsignedLong("0")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalulng2args-9">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:unsignedLong(lower bound) $arg2 = xs:unsignedLong(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:unsignedLong("0") ne xs:unsignedLong("130747108607674654")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalulng2args-10">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:unsignedLong(lower bound) $arg2 = xs:unsignedLong(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:unsignedLong("0") ne xs:unsignedLong("184467440737095516")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalnpi2args-1">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:nonPositiveInteger(lower bound) $arg2 = xs:nonPositiveInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:nonPositiveInteger("-999999999999999999") eq xs:nonPositiveInteger("-999999999999999999")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalnpi2args-2">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:nonPositiveInteger(mid range) $arg2 = xs:nonPositiveInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:nonPositiveInteger("-475688437271870490") eq xs:nonPositiveInteger("-999999999999999999")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalnpi2args-3">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:nonPositiveInteger(upper bound) $arg2 = xs:nonPositiveInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:nonPositiveInteger("0") eq xs:nonPositiveInteger("-999999999999999999")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalnpi2args-4">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:nonPositiveInteger(lower bound) $arg2 = xs:nonPositiveInteger(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:nonPositiveInteger("-999999999999999999") eq xs:nonPositiveInteger("-475688437271870490")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalnpi2args-5">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:nonPositiveInteger(lower bound) $arg2 = xs:nonPositiveInteger(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:nonPositiveInteger("-999999999999999999") eq xs:nonPositiveInteger("0")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalnpi2args-6">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:nonPositiveInteger(lower bound) $arg2 = xs:nonPositiveInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:nonPositiveInteger("-999999999999999999") ne xs:nonPositiveInteger("-999999999999999999")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalnpi2args-7">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:nonPositiveInteger(mid range) $arg2 = xs:nonPositiveInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:nonPositiveInteger("-475688437271870490") ne xs:nonPositiveInteger("-999999999999999999")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalnpi2args-8">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:nonPositiveInteger(upper bound) $arg2 = xs:nonPositiveInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:nonPositiveInteger("0") ne xs:nonPositiveInteger("-999999999999999999")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalnpi2args-9">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:nonPositiveInteger(lower bound) $arg2 = xs:nonPositiveInteger(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:nonPositiveInteger("-999999999999999999") ne xs:nonPositiveInteger("-475688437271870490")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalnpi2args-10">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:nonPositiveInteger(lower bound) $arg2 = xs:nonPositiveInteger(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:nonPositiveInteger("-999999999999999999") ne xs:nonPositiveInteger("0")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalnni2args-1">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:nonNegativeInteger(lower bound) $arg2 = xs:nonNegativeInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:nonNegativeInteger("0") eq xs:nonNegativeInteger("0")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalnni2args-2">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:nonNegativeInteger(mid range) $arg2 = xs:nonNegativeInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:nonNegativeInteger("303884545991464527") eq xs:nonNegativeInteger("0")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalnni2args-3">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:nonNegativeInteger(upper bound) $arg2 = xs:nonNegativeInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:nonNegativeInteger("999999999999999999") eq xs:nonNegativeInteger("0")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalnni2args-4">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:nonNegativeInteger(lower bound) $arg2 = xs:nonNegativeInteger(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:nonNegativeInteger("0") eq xs:nonNegativeInteger("303884545991464527")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalnni2args-5">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:nonNegativeInteger(lower bound) $arg2 = xs:nonNegativeInteger(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:nonNegativeInteger("0") eq xs:nonNegativeInteger("999999999999999999")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalnni2args-6">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:nonNegativeInteger(lower bound) $arg2 = xs:nonNegativeInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:nonNegativeInteger("0") ne xs:nonNegativeInteger("0")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalnni2args-7">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:nonNegativeInteger(mid range) $arg2 = xs:nonNegativeInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:nonNegativeInteger("303884545991464527") ne xs:nonNegativeInteger("0")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalnni2args-8">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:nonNegativeInteger(upper bound) $arg2 = xs:nonNegativeInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:nonNegativeInteger("999999999999999999") ne xs:nonNegativeInteger("0")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalnni2args-9">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:nonNegativeInteger(lower bound) $arg2 = xs:nonNegativeInteger(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:nonNegativeInteger("0") ne xs:nonNegativeInteger("303884545991464527")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalnni2args-10">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:nonNegativeInteger(lower bound) $arg2 = xs:nonNegativeInteger(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:nonNegativeInteger("0") ne xs:nonNegativeInteger("999999999999999999")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalsht2args-1">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:short(lower bound) $arg2 = xs:short(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:short("-32768") eq xs:short("-32768")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalsht2args-2">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:short(mid range) $arg2 = xs:short(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:short("-5324") eq xs:short("-32768")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalsht2args-3">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:short(upper bound) $arg2 = xs:short(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:short("32767") eq xs:short("-32768")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalsht2args-4">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:short(lower bound) $arg2 = xs:short(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:short("-32768") eq xs:short("-5324")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalsht2args-5">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:short(lower bound) $arg2 = xs:short(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:short("-32768") eq xs:short("32767")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalsht2args-6">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:short(lower bound) $arg2 = xs:short(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:short("-32768") ne xs:short("-32768")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalsht2args-7">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:short(mid range) $arg2 = xs:short(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:short("-5324") ne xs:short("-32768")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalsht2args-8">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:short(upper bound) $arg2 = xs:short(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:short("32767") ne xs:short("-32768")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalsht2args-9">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:short(lower bound) $arg2 = xs:short(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:short("-32768") ne xs:short("-5324")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equalsht2args-10">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = xs:short(lower bound) $arg2 = xs:short(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>xs:short("-32768") ne xs:short("32767")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="op-numeric-equal-emptyseq">
      <description> Evaluates The "op:numeric-equal" operator with the arguments set as follows: $arg1 = () $arg2 = () </description>
      <created by="Ravi Chennoju" on="2006-03-09"/>
      <test>() eq ()</test>
      <result>
         <any-of>
            <assert-empty/>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-1">
      <description> A test whose essence is: `xs:integer(1) eq xs:integer(1)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:integer(1) eq xs:integer(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-2">
      <description> A test whose essence is: `xs:integer(1) ne xs:integer(2)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:integer(1) ne xs:integer(2)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-3">
      <description> A test whose essence is: `xs:integer(1) eq xs:integer(1)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:integer(1) eq xs:integer(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-4">
      <description> A test whose essence is: `xs:integer(-1) eq xs:integer(-1)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:integer(-1) eq xs:integer(-1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-5">
      <description> A test whose essence is: `xs:integer(1) ne xs:integer(2)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:integer(1) ne xs:integer(2)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-6">
      <description> A test whose essence is: `xs:decimal(1.1) eq xs:decimal(1.1)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:decimal(1.1) eq xs:decimal(1.1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-7">
      <description> A test whose essence is: `xs:decimal(1.1) ne xs:decimal(2.1)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:decimal(1.1) ne xs:decimal(2.1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-8">
      <description> A test whose essence is: `xs:decimal(1.1) eq xs:decimal(1.1)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:decimal(1.1) eq xs:decimal(1.1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-9">
      <description> A test whose essence is: `xs:decimal(-1.1) eq xs:decimal(-1.1)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:decimal(-1.1) eq xs:decimal(-1.1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-10">
      <description> A test whose essence is: `xs:decimal(1.1) ne xs:decimal(2.1)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:decimal(1.1) ne xs:decimal(2.1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-11">
      <description> A test whose essence is: `xs:integer(2) ne xs:decimal(2.6)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:integer(2) ne xs:decimal(2.6)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-12">
      <description> A test whose essence is: `xs:double(1.1) eq xs:double(1.1)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:double(1.1) eq xs:double(1.1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-13">
      <description> A test whose essence is: `xs:double(-1.1) eq xs:double(-1.1)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:double(-1.1) eq xs:double(-1.1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-14">
      <description> A test whose essence is: `xs:double(1.1) ne xs:double(2.1)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:double(1.1) ne xs:double(2.1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-15">
      <description> A test whose essence is: `xs:double(-1) ne xs:double(1)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:double(-1) ne xs:double(1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-16">
      <description> A test whose essence is: `xs:double("NaN") ne xs:double("NaN")`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:double("NaN") ne xs:double("NaN")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-17">
      <description> A test whose essence is: `xs:double("NaN") ne xs:double(0)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:double("NaN") ne xs:double(0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-18">
      <description> A test whose essence is: `xs:double(0) ne xs:double("NaN")`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:double(0) ne xs:double("NaN")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-19">
      <description> A test whose essence is: `xs:double("-INF") eq xs:double("-INF")`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:double("-INF") eq xs:double("-INF")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-20">
      <description> A test whose essence is: `xs:double("INF") eq xs:double("INF")`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:double("INF") eq xs:double("INF")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-21">
      <description> A test whose essence is: `xs:double("-INF") ne xs:double("INF")`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:double("-INF") ne xs:double("INF")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-22">
      <description> A test whose essence is: `xs:double("INF") ne xs:double("-INF")`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:double("INF") ne xs:double("-INF")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-23">
      <description> A test whose essence is: `xs:double("INF") ne xs:double("0")`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:double("INF") ne xs:double("0")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-24">
      <description> A test whose essence is: `xs:double("-INF") ne xs:double("0")`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:double("-INF") ne xs:double("0")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-25">
      <description> A test whose essence is: `xs:double("0") ne xs:double("INF")`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:double("0") ne xs:double("INF")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-26">
      <description> A test whose essence is: `xs:double("0") ne xs:double("-INF")`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:double("0") ne xs:double("-INF")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-27">
      <description> A test whose essence is: `xs:float(1.1) eq xs:float(1.1)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:float(1.1) eq xs:float(1.1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-28">
      <description> A test whose essence is: `xs:float(-1.1) eq xs:float(-1.1)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:float(-1.1) eq xs:float(-1.1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-29">
      <description> A test whose essence is: `xs:float(1.1) ne xs:float(2.1)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:float(1.1) ne xs:float(2.1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-30">
      <description> A test whose essence is: `xs:float("NaN") ne xs:float("NaN")`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:float("NaN") ne xs:float("NaN")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-31">
      <description> A test whose essence is: `xs:float("NaN") ne xs:float(0)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:float("NaN") ne xs:float(0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-32">
      <description> A test whose essence is: `xs:float(0) ne xs:float("NaN")`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:float(0) ne xs:float("NaN")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-33">
      <description> A test whose essence is: `xs:float("-INF") eq xs:float("-INF")`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:float("-INF") eq xs:float("-INF")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-34">
      <description> A test whose essence is: `xs:float("INF") eq xs:float("INF")`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:float("INF") eq xs:float("INF")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-35">
      <description> A test whose essence is: `xs:float("-INF") ne xs:float("INF")`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:float("-INF") ne xs:float("INF")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-36">
      <description> A test whose essence is: `xs:float("INF") ne xs:float("-INF")`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:float("INF") ne xs:float("-INF")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-37">
      <description> A test whose essence is: `xs:float("INF") ne xs:float("0")`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:float("INF") ne xs:float("0")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-38">
      <description> A test whose essence is: `xs:float("-INF") ne xs:float("0")`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:float("-INF") ne xs:float("0")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-39">
      <description> A test whose essence is: `xs:float("0") ne xs:float("INF")`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:float("0") ne xs:float("INF")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-40">
      <description> A test whose essence is: `xs:float("0") ne xs:float("-INF")`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:float("0") ne xs:float("-INF")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-41">
      <description> An expression involving the 'eq' operator that trigger certain optimization paths in some implementations. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(remove(remove((current-time(), 1), 1), 1)) eq 0</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-42">
      <description> Test that fn:count combined with expressions that might disable compile time evaluations(optimization) as well as the 'eq' operator, is conformant. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not(0 eq count((1, 2, timezone-from-time(current-time()))))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-43">
      <description> Test that fn:count combined with expressions that might disable compile time evaluations(optimization) as well as the '=' operator, is conformant. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>0 ne count((1, 2, timezone-from-time(current-time())))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-44">
      <description> Test automatic xs:untypedAtomic conversion. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>(xs:untypedAtomic("3"), 3) eq 3</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-45">
      <description> Test automatic xs:untypedAtomic conversion. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(xs:untypedAtomic("1") to 3) eq 3</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-46">
      <description> Test automatic xs:untypedAtomic conversion. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>xs:untypedAtomic("three") + 3</test>
      <result>
         <error code="FORG0001"/>
      </result>
   </test-case>

   <test-case name="K-NumericEqual-47">
      <description> A syntactically invalid test. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>1 := 3</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K2-NumericEqual-1">
      <description> Compare an xs:integer to a processing instuction node. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[1 eq <?target 1?>]]></test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="K2-NumericEqual-2">
      <description> Compare an xs:integer to a processing instuction node(#2). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<?target 1?> eq 1]]></test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="K2-NumericEqual-3">
      <description> Compare an xs:integer to a comment. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[1 eq <!--1-->]]></test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="K2-NumericEqual-4">
      <description> Compare an xs:integer to a comment(#2). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<!--1--> eq 1]]></test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="K2-NumericEqual-5">
      <description> Compare an xs:integer to a text node. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>1 eq text {"1"}</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="K2-NumericEqual-6">
      <description> Compare an xs:integer to a text node(#2). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>text {"1"} eq 1</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
      
   <test-case name="cbcl-numeric-equal-001">
      <description> test comparison of xs:double </description>
      <created by="Tim Mills" on="2008-05-21"/>
      <dependency type="spec" value="XQ10+"/>      
      <test>
      	declare function local:square($arg as xs:double) as xs:double { $arg * $arg }; 
      	not( local:square(1e0) eq local:square(2e0) )</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   

   <test-case name="cbcl-numeric-equal-002">
      <description> test comparison of xs:float </description>
      <created by="Tim Mills" on="2008-05-21"/>
      <dependency type="spec" value="XQ10+"/>      
      <test>
      	declare function local:square($arg as xs:float) as xs:float { $arg * $arg }; 
      	not( local:square(xs:float(1e0)) eq local:square(xs:float(2e0)) )</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   

   <test-case name="cbcl-numeric-equal-003">
      <description> test comparison of xs:decimal </description>
      <created by="Tim Mills" on="2008-05-21"/>
      <dependency type="spec" value="XQ10+"/>      
      <test>
      	declare function local:square($arg as xs:decimal) as xs:decimal { $arg * $arg }; 
      	not( local:square(1.0) eq local:square(2.0) )</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   

   <test-case name="cbcl-numeric-equal-004">
      <description> test comparison of xs:integer </description>
      <created by="Tim Mills" on="2008-05-21"/>
      <dependency type="spec" value="XQ10+"/>     
      <test>
      	declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; 
      	not( local:square(1) eq local:square(2) )</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   

   <test-case name="cbcl-numeric-equal-005">
      <description> test comparison of xs:double </description>
      <created by="Tim Mills" on="2008-05-21"/>
      <dependency type="spec" value="XQ10+"/>      
      <test>
      	declare function local:square($arg as xs:double) as xs:double { $arg * $arg }; 
      	not( local:square(1e0) ne local:square(2e0) )</test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   

   <test-case name="cbcl-numeric-equal-006">
      <description> test comparison of xs:float </description>
      <created by="Tim Mills" on="2008-05-21"/>
      <dependency type="spec" value="XQ10+"/>      
      <test>
      	declare function local:square($arg as xs:float) as xs:float { $arg * $arg }; 
      	not( local:square(xs:float(1e0)) ne local:square(xs:float(2e0)) )</test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   

   <test-case name="cbcl-numeric-equal-007">
      <description> test comparison of xs:decimal </description>
      <created by="Tim Mills" on="2008-05-21"/>
      <dependency type="spec" value="XQ10+"/>      
      <test>
      	declare function local:square($arg as xs:decimal) as xs:decimal { $arg * $arg }; 
      	not( local:square(1.0) ne local:square(2.0) )</test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   

   <test-case name="cbcl-numeric-equal-008">
      <description> test comparison of xs:integer </description>
      <created by="Tim Mills" on="2008-05-21"/>
      <dependency type="spec" value="XQ10+"/>      
      <test>
      	declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; 
      	not( local:square(1) ne local:square(2) )</test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   

   <test-case name="cbcl-numeric-equal-009">
      <description> test comparison </description>
      <created by="Tim Mills" on="2008-07-01"/>
      <dependency type="spec" value="XQ10+"/>      
      <test>
      	declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; 
      	let $x := local:square(4) return 0 eq $x - 1</test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   

   <test-case name="cbcl-numeric-equal-010">
      <description> test comparison </description>
      <created by="Tim Mills" on="2008-07-01"/>
      <dependency type="spec" value="XQ10+"/>      
      <test>
      	declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; 
      	let $x := local:square(4) return 0 eq $x + 1</test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   

   <test-case name="cbcl-numeric-equal-011">
      <description> test comparison </description>
      <created by="Tim Mills" on="2008-07-01"/>
      <dependency type="spec" value="XQ10+"/>     
      <test>
      	declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; 
      	let $x := local:square(4) return 4 eq $x + 1</test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   

   <test-case name="cbcl-numeric-equal-012">
      <description> test comparison </description>
      <created by="Tim Mills" on="2008-07-01"/>
      <dependency type="spec" value="XQ10+"/>      
      <test>
      	declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; 
      	let $x := local:square(4) return 4 eq 1 + $x</test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   

   <test-case name="cbcl-numeric-equal-013">
      <description> test comparison </description>
      <created by="Tim Mills" on="2008-07-01"/>
      <dependency type="spec" value="XQ10+"/>      
      <test>
      	declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; 
      	let $x := local:square(4) return -52676506002282294014967032012 eq $x + 52676506002282294014967032012</test>
      <result>
         <any-of>
            <assert-false/>
            <error code="FOAR0002"/>
         </any-of>
      </result>
   </test-case>
   

   <test-case name="cbcl-numeric-equal-014">
      <description> test comparison </description>
      <created by="Tim Mills" on="2008-07-01"/>
      <dependency type="spec" value="XQ10+"/>      
      <test>
      	declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; 
      	let $x := local:square(4) return -52676506002282294014967032012 eq 52676506002282294014967032012 + $x</test>
      <result>
         <any-of>
            <assert-false/>
            <error code="FOAR0002"/>
         </any-of>
      </result>
   </test-case>
   

   <test-case name="cbcl-numeric-equal-015">
      <description> test comparison </description>
      <created by="Tim Mills" on="2008-07-01"/>
      <dependency type="spec" value="XQ10+"/>      
      <test>
      	declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; 
      	let $x := local:square(4) return 4 eq 1 - $x</test>
      <result>
         <any-of>
            <assert-false/>
            <error code="FOAR0002"/>
         </any-of>
      </result>
   </test-case>
   

   <test-case name="cbcl-numeric-equal-016">
      <description> test comparison </description>
      <created by="Tim Mills" on="2008-07-01"/>
      <dependency type="spec" value="XQ10+"/>      
      <test>
      	declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; 
      	let $x := local:square(4) return 4 eq $x - 1</test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   

   <test-case name="cbcl-numeric-equal-017">
      <description> test comparison </description>
      <created by="Tim Mills" on="2008-07-01"/>
      <dependency type="spec" value="XQ10+"/>    
      <test>
      	declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; 
      	let $x := local:square(4) return -52676506002282294014967032012 eq 52676506002282294014967032012 - $x</test>
      <result>
         <any-of>
            <assert-false/>
            <error code="FOAR0002"/>
         </any-of>
      </result>
   </test-case>
   

   <test-case name="cbcl-numeric-equal-018">
      <description> test comparison </description>
      <created by="Tim Mills" on="2008-07-01"/>
      <dependency type="spec" value="XQ10+"/>      
      <test>
      	declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; 
      	let $x := local:square(4) return 52676506002282294014967032012 eq $x - 52676506002282294014967032012</test>
      <result>
         <any-of>
            <assert-false/>
            <error code="FOAR0002"/>
         </any-of>
      </result>
   </test-case>
</test-set>
