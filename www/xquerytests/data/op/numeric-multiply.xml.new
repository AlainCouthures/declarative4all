<?xml version="1.0" encoding="UTF-8"?>
<test-set name="op-numeric-multiply" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">
  <description>Tests for the numeric-multiply() function</description>
  <link document="http://www.w3.org/TR/xpath-functions-30/" idref="func-numeric-multiply" type="spec"/>
  <test-case name="op-numeric-multiplydec2args-1">
    <description> Evaluates The &quot;op:numeric-multiply&quot; operator with the arguments set as follows: $arg1 = xs:decimal(lower bound) $arg2 = xs:decimal(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>xs:decimal(&quot;-1.0000000000&quot;) * xs:decimal(&quot;-999999999999999999&quot;)</test>
    <result-string>xs:decimal(&quot;999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplydec2args-2">
    <description> Evaluates The &quot;op:numeric-multiply&quot; operator with the arguments set as follows: $arg1 = xs:decimal(mid range) $arg2 = xs:decimal(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>xs:decimal(&quot;617375191608514839&quot;) * xs:decimal(&quot;0&quot;)</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplydec2args-3">
    <description> Evaluates The &quot;op:numeric-multiply&quot; operator with the arguments set as follows: $arg1 = xs:decimal(upper bound) $arg2 = xs:decimal(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>xs:decimal(&quot;999999999999999999&quot;) * xs:decimal(&quot;-1.0000000000&quot;)</test>
    <result-string>xs:decimal(&quot;-999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>-999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplydec2args-4">
    <description> Evaluates The &quot;op:numeric-multiply&quot; operator with the arguments set as follows: $arg1 = xs:decimal(lower bound) $arg2 = xs:decimal(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>xs:decimal(&quot;0&quot;) * xs:decimal(&quot;617375191608514839&quot;)</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplydec2args-5">
    <description> Evaluates The &quot;op:numeric-multiply&quot; operator with the arguments set as follows: $arg1 = xs:decimal(lower bound) $arg2 = xs:decimal(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>xs:decimal(&quot;-1.0000000000&quot;) * xs:decimal(&quot;999999999999999999&quot;)</test>
    <result-string>xs:decimal(&quot;-999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>-999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplydbl2args-1">
    <description> Evaluates The &quot;op:numeric-multiply&quot; operator with the arguments set as follows: $arg1 = xs:double(lower bound) $arg2 = xs:double(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>xs:double(&quot;-1.0000000000&quot;) * xs:double(&quot;-1.7976931348623157E308&quot;)</test>
    <result-string>xs:decimal(&quot;1.7976931348623157E308&quot;)</result-string>
    <result>
      <assert-eq>1.7976931348623157E308</assert-eq>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplydbl2args-2">
    <description> Evaluates The &quot;op:numeric-multiply&quot; operator with the arguments set as follows: $arg1 = xs:double(mid range) $arg2 = xs:double(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>xs:double(&quot;0&quot;) * xs:double(&quot;-1.7976931348623157E308&quot;)</test>
    <result-string>xs:decimal(&quot;-0&quot;)</result-string>
    <result>
      <assert-eq>-0</assert-eq>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplydbl2args-3">
    <description> Evaluates The &quot;op:numeric-multiply&quot; operator with the arguments set as follows: $arg1 = xs:double(upper bound) $arg2 = xs:double(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>xs:double(&quot;1.7976931348623157E308&quot;) * xs:double(&quot;-1.0000000000&quot;)</test>
    <result-string>xs:decimal(&quot;-1.7976931348623157E308&quot;)</result-string>
    <result>
      <assert-eq>-1.7976931348623157E308</assert-eq>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplydbl2args-4">
    <description> Evaluates The &quot;op:numeric-multiply&quot; operator with the arguments set as follows: $arg1 = xs:double(lower bound) $arg2 = xs:double(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>xs:double(&quot;-1.7976931348623157E308&quot;) * xs:double(&quot;0&quot;)</test>
    <result-string>xs:decimal(&quot;-0&quot;)</result-string>
    <result>
      <assert-eq>-0</assert-eq>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplydbl2args-5">
    <description> Evaluates The &quot;op:numeric-multiply&quot; operator with the arguments set as follows: $arg1 = xs:double(lower bound) $arg2 = xs:double(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>xs:double(&quot;-1.0000000000&quot;) * xs:double(&quot;1.7976931348623157E308&quot;)</test>
    <result-string>xs:decimal(&quot;-1.7976931348623157E308&quot;)</result-string>
    <result>
      <assert-eq>-1.7976931348623157E308</assert-eq>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplyflt2args-1">
    <description> Evaluates The &quot;op:numeric-multiply&quot; operator with the arguments set as follows: $arg1 = xs:float(lower bound) $arg2 = xs:float(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>xs:float(&quot;-1.0000000000&quot;) * xs:float(&quot;-3.4028235E38&quot;)</test>
    <result-string>xs:float(3.4028235E38)</result-string>
    <result>
      <assert-eq>xs:float(3.4028235E38)</assert-eq>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplyflt2args-2">
    <description> Evaluates The &quot;op:numeric-multiply&quot; operator with the arguments set as follows: $arg1 = xs:float(mid range) $arg2 = xs:float(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>xs:float(&quot;0&quot;) * xs:float(&quot;-3.4028235E38&quot;)</test>
    <result-string>xs:decimal(&quot;-0&quot;)</result-string>
    <result>
      <assert-eq>-0</assert-eq>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplyflt2args-3">
    <description> Evaluates The &quot;op:numeric-multiply&quot; operator with the arguments set as follows: $arg1 = xs:float(upper bound) $arg2 = xs:float(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>xs:float(&quot;3.4028235E38&quot;) * xs:float(&quot;-1.0000000000&quot;)</test>
    <result-string>xs:float(-3.4028235E38)</result-string>
    <result>
      <assert-eq>xs:float(-3.4028235E38)</assert-eq>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplyflt2args-4">
    <description> Evaluates The &quot;op:numeric-multiply&quot; operator with the arguments set as follows: $arg1 = xs:float(lower bound) $arg2 = xs:float(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>xs:float(&quot;-3.4028235E38&quot;) * xs:float(&quot;0&quot;)</test>
    <result-string>xs:decimal(&quot;-0&quot;)</result-string>
    <result>
      <assert-eq>-0</assert-eq>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplyflt2args-5">
    <description> Evaluates The &quot;op:numeric-multiply&quot; operator with the arguments set as follows: $arg1 = xs:float(lower bound) $arg2 = xs:float(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>xs:float(&quot;-1.0000000000&quot;) * xs:float(&quot;3.4028235E38&quot;)</test>
    <result-string>xs:float(-3.4028235E38)</result-string>
    <result>
      <assert-eq>xs:float(-3.4028235E38)</assert-eq>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplyusht2args-1">
    <description> Evaluates The &quot;op:numeric-multiply&quot; operator with the arguments set as follows: $arg1 = xs:unsignedShort(lower bound) $arg2 = xs:unsignedShort(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>xs:unsignedShort(&quot;0&quot;) * xs:unsignedShort(&quot;0&quot;)</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplyusht2args-2">
    <description> Evaluates The &quot;op:numeric-multiply&quot; operator with the arguments set as follows: $arg1 = xs:unsignedShort(mid range) $arg2 = xs:unsignedShort(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>xs:unsignedShort(&quot;44633&quot;) * xs:unsignedShort(&quot;0&quot;)</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplyusht2args-3">
    <description> Evaluates The &quot;op:numeric-multiply&quot; operator with the arguments set as follows: $arg1 = xs:unsignedShort(upper bound) $arg2 = xs:unsignedShort(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>xs:unsignedShort(&quot;65535&quot;) * xs:unsignedShort(&quot;0&quot;)</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplyusht2args-4">
    <description> Evaluates The &quot;op:numeric-multiply&quot; operator with the arguments set as follows: $arg1 = xs:unsignedShort(lower bound) $arg2 = xs:unsignedShort(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>xs:unsignedShort(&quot;0&quot;) * xs:unsignedShort(&quot;44633&quot;)</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplyusht2args-5">
    <description> Evaluates The &quot;op:numeric-multiply&quot; operator with the arguments set as follows: $arg1 = xs:unsignedShort(lower bound) $arg2 = xs:unsignedShort(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>xs:unsignedShort(&quot;0&quot;) * xs:unsignedShort(&quot;65535&quot;)</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplypint2args-1">
    <description> Evaluates The &quot;op:numeric-multiply&quot; operator with the arguments set as follows: $arg1 = xs:positiveInteger(lower bound) $arg2 = xs:positiveInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>xs:positiveInteger(&quot;1&quot;) * xs:positiveInteger(&quot;1&quot;)</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplypint2args-2">
    <description> Evaluates The &quot;op:numeric-multiply&quot; operator with the arguments set as follows: $arg1 = xs:positiveInteger(mid range) $arg2 = xs:positiveInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>xs:positiveInteger(&quot;52704602390610033&quot;) * xs:positiveInteger(&quot;1&quot;)</test>
    <result-string>xs:decimal(&quot;52704602390610033&quot;)</result-string>
    <result>
      <assert-eq>52704602390610033</assert-eq>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplypint2args-3">
    <description> Evaluates The &quot;op:numeric-multiply&quot; operator with the arguments set as follows: $arg1 = xs:positiveInteger(upper bound) $arg2 = xs:positiveInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>xs:positiveInteger(&quot;999999999999999999&quot;) * xs:positiveInteger(&quot;1&quot;)</test>
    <result-string>xs:decimal(&quot;999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplypint2args-4">
    <description> Evaluates The &quot;op:numeric-multiply&quot; operator with the arguments set as follows: $arg1 = xs:positiveInteger(lower bound) $arg2 = xs:positiveInteger(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>xs:positiveInteger(&quot;1&quot;) * xs:positiveInteger(&quot;52704602390610033&quot;)</test>
    <result-string>xs:decimal(&quot;52704602390610033&quot;)</result-string>
    <result>
      <assert-eq>52704602390610033</assert-eq>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplypint2args-5">
    <description> Evaluates The &quot;op:numeric-multiply&quot; operator with the arguments set as follows: $arg1 = xs:positiveInteger(lower bound) $arg2 = xs:positiveInteger(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>xs:positiveInteger(&quot;1&quot;) * xs:positiveInteger(&quot;999999999999999999&quot;)</test>
    <result-string>xs:decimal(&quot;999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplyulng2args-1">
    <description> Evaluates The &quot;op:numeric-multiply&quot; operator with the arguments set as follows: $arg1 = xs:unsignedLong(lower bound) $arg2 = xs:unsignedLong(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>xs:unsignedLong(&quot;0&quot;) * xs:unsignedLong(&quot;0&quot;)</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplyulng2args-2">
    <description> Evaluates The &quot;op:numeric-multiply&quot; operator with the arguments set as follows: $arg1 = xs:unsignedLong(mid range) $arg2 = xs:unsignedLong(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>xs:unsignedLong(&quot;130747108607674654&quot;) * xs:unsignedLong(&quot;0&quot;)</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplyulng2args-3">
    <description> Evaluates The &quot;op:numeric-multiply&quot; operator with the arguments set as follows: $arg1 = xs:unsignedLong(upper bound) $arg2 = xs:unsignedLong(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>xs:unsignedLong(&quot;184467440737095516&quot;) * xs:unsignedLong(&quot;0&quot;)</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplyulng2args-4">
    <description> Evaluates The &quot;op:numeric-multiply&quot; operator with the arguments set as follows: $arg1 = xs:unsignedLong(lower bound) $arg2 = xs:unsignedLong(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>xs:unsignedLong(&quot;0&quot;) * xs:unsignedLong(&quot;130747108607674654&quot;)</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplyulng2args-5">
    <description> Evaluates The &quot;op:numeric-multiply&quot; operator with the arguments set as follows: $arg1 = xs:unsignedLong(lower bound) $arg2 = xs:unsignedLong(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>xs:unsignedLong(&quot;0&quot;) * xs:unsignedLong(&quot;184467440737095516&quot;)</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplynpi2args-1">
    <description> Evaluates The &quot;op:numeric-multiply&quot; operator with the arguments set as follows: $arg1 = xs:nonPositiveInteger(upper bound) $arg2 = xs:nonPositiveInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>xs:nonPositiveInteger(&quot;0&quot;) * xs:nonPositiveInteger(&quot;-999999999999999999&quot;)</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplynpi2args-2">
    <description> Evaluates The &quot;op:numeric-multiply&quot; operator with the arguments set as follows: $arg1 = xs:nonPositiveInteger(lower bound) $arg2 = xs:nonPositiveInteger(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>xs:nonPositiveInteger(&quot;-999999999999999999&quot;) * xs:nonPositiveInteger(&quot;0&quot;)</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplynni2args-1">
    <description> Evaluates The &quot;op:numeric-multiply&quot; operator with the arguments set as follows: $arg1 = xs:nonNegativeInteger(lower bound) $arg2 = xs:nonNegativeInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>xs:nonNegativeInteger(&quot;0&quot;) * xs:nonNegativeInteger(&quot;0&quot;)</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplynni2args-2">
    <description> Evaluates The &quot;op:numeric-multiply&quot; operator with the arguments set as follows: $arg1 = xs:nonNegativeInteger(mid range) $arg2 = xs:nonNegativeInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>xs:nonNegativeInteger(&quot;303884545991464527&quot;) * xs:nonNegativeInteger(&quot;0&quot;)</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplynni2args-3">
    <description> Evaluates The &quot;op:numeric-multiply&quot; operator with the arguments set as follows: $arg1 = xs:nonNegativeInteger(upper bound) $arg2 = xs:nonNegativeInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>xs:nonNegativeInteger(&quot;999999999999999999&quot;) * xs:nonNegativeInteger(&quot;0&quot;)</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplynni2args-4">
    <description> Evaluates The &quot;op:numeric-multiply&quot; operator with the arguments set as follows: $arg1 = xs:nonNegativeInteger(lower bound) $arg2 = xs:nonNegativeInteger(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>xs:nonNegativeInteger(&quot;0&quot;) * xs:nonNegativeInteger(&quot;303884545991464527&quot;)</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplynni2args-5">
    <description> Evaluates The &quot;op:numeric-multiply&quot; operator with the arguments set as follows: $arg1 = xs:nonNegativeInteger(lower bound) $arg2 = xs:nonNegativeInteger(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>xs:nonNegativeInteger(&quot;0&quot;) * xs:nonNegativeInteger(&quot;999999999999999999&quot;)</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplymix2args-1">
    <description> Simple multiplication test with () as one operand should return null </description>
    <created by="Ravindranath Chennoju" on="2004-12-13"/>
    <test>1 * ()</test>
    <result-string/>
    <result>
      <any-of>
        <assert-empty/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplymix2args-2">
    <description> Simple multiplication test pass string for second operator </description>
    <created by="Ravindranath Chennoju" on="2004-12-13"/>
    <test>1 * '1'</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplymix2args-3">
    <description> Simple multiplication test, second operator cast string to integer </description>
    <created by="Ravindranath Chennoju" on="2004-12-13"/>
    <test>1 * xs:integer('1')</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplymix2args-4">
    <description> Simple multiplication test, second operator is a node, atomization applied </description>
    <created by="Ravindranath Chennoju" on="2004-12-13"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[1 * <a> 2 </a>]]>
    </test>
    <result-string>xs:decimal(&quot;2&quot;)</result-string>
    <result>
      <assert-eq>2</assert-eq>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplymix2args-5">
    <description> Simple multiplication test, second operator is a node, atomization applied </description>
    <created by="Ravindranath Chennoju" on="2004-12-13"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[1 * <a> <b> 2 </b> </a>]]>
    </test>
    <result-string>xs:decimal(&quot;2&quot;)</result-string>
    <result>
      <assert-eq>2</assert-eq>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplymix2args-6">
    <description> Simple multiplication test, second operator node which is not atomizable </description>
    <created by="Ravindranath Chennoju" on="2004-12-13"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[1 * <a> <b> 2</b> <c> 2</c> </a>]]>
    </test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplymix2args-7">
    <description> Simple multiplication test, two operands are nodes </description>
    <created by="Ravindranath Chennoju" on="2004-12-13"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[<a> 1 </a> * <b> 2 </b>]]>
    </test>
    <result-string>xs:decimal(&quot;2&quot;)</result-string>
    <result>
      <assert-eq>2</assert-eq>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplymix2args-8">
    <description> Simple multiplication test, second operator is a node, atomizable but not castable to integer </description>
    <created by="Ravindranath Chennoju" on="2004-12-13"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[1 * <a> x </a>]]>
    </test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="op-numeric-multiplymix2args-9">
    <description> Simple multiplication test, pass an empty node for second operator </description>
    <created by="Ravindranath Chennoju" on="2004-12-13"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[1 * <a/>]]>
    </test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-NumericMultiply-1">
    <description> A test whose essence is: `xs:double(6) * xs:double(2) eq 12`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(6) * xs:double(2) eq 12</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-NumericMultiply-2">
    <description> A test whose essence is: `xs:decimal(6) * xs:decimal(2) eq 12`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(6) * xs:decimal(2) eq 12</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-NumericMultiply-3">
    <description> A test whose essence is: `xs:integer(6) * xs:integer(2) eq 12`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(6) * xs:integer(2) eq 12</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-NumericMultiply-4">
    <description> A test whose essence is: `xs:float(6) * xs:float(2) eq 12`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(6) * xs:float(2) eq 12</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-NumericMultiply-5">
    <description> A test whose essence is: `(xs:decimal(6) * xs:integer(2)) instance of xs:decimal`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(xs:decimal(6) * xs:integer(2)) instance of xs:decimal</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-NumericMultiply-6">
    <description> A test whose essence is: `(xs:integer(6) * xs:decimal(2)) instance of xs:decimal`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(xs:integer(6) * xs:decimal(2)) instance of xs:decimal</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-NumericMultiply-7">
    <description> A test whose essence is: `(xs:integer(6) * xs:integer(2)) instance of xs:integer`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(xs:integer(6) * xs:integer(2)) instance of xs:integer</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-NumericMultiply-8">
    <description> A test whose essence is: `(xs:decimal(6) * xs:decimal(2)) instance of xs:decimal`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(xs:decimal(6) * xs:decimal(2)) instance of xs:decimal</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-NumericMultiply-9">
    <description> A test whose essence is: `(xs:decimal(6) * xs:float(2)) instance of xs:float`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(xs:decimal(6) * xs:float(2)) instance of xs:float</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-NumericMultiply-10">
    <description> A test whose essence is: `(xs:float(6) * xs:decimal(2)) instance of xs:float`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(xs:float(6) * xs:decimal(2)) instance of xs:float</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-NumericMultiply-11">
    <description> A test whose essence is: `(xs:float(6) * xs:integer(2)) instance of xs:float`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(xs:float(6) * xs:integer(2)) instance of xs:float</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-NumericMultiply-12">
    <description> A test whose essence is: `(xs:integer(6) * xs:float(2)) instance of xs:float`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(xs:integer(6) * xs:float(2)) instance of xs:float</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-NumericMultiply-13">
    <description> A test whose essence is: `(xs:float(6) * xs:float(2)) instance of xs:float`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(xs:float(6) * xs:float(2)) instance of xs:float</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-NumericMultiply-14">
    <description> A test whose essence is: `(xs:decimal(6) * xs:double(2)) instance of xs:double`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(xs:decimal(6) * xs:double(2)) instance of xs:double</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-NumericMultiply-15">
    <description> A test whose essence is: `(xs:double(6) * xs:decimal(2)) instance of xs:double`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(xs:double(6) * xs:decimal(2)) instance of xs:double</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-NumericMultiply-16">
    <description> A test whose essence is: `(xs:double(6) * xs:float(2)) instance of xs:double`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(xs:double(6) * xs:float(2)) instance of xs:double</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-NumericMultiply-17">
    <description> A test whose essence is: `(xs:float(6) * xs:double(2)) instance of xs:double`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(xs:float(6) * xs:double(2)) instance of xs:double</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-NumericMultiply-18">
    <description> A test whose essence is: `(xs:double(6) * xs:integer(2)) instance of xs:double`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(xs:double(6) * xs:integer(2)) instance of xs:double</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-NumericMultiply-19">
    <description> A test whose essence is: `(xs:integer(6) * xs:double(2)) instance of xs:double`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(xs:integer(6) * xs:double(2)) instance of xs:double</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-NumericMultiply-20">
    <description> A test whose essence is: `(xs:double(6) * xs:double(2)) instance of xs:double`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(xs:double(6) * xs:double(2)) instance of xs:double</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-NumericMultiply-21">
    <description> A test whose essence is: `string(xs:float(&quot;NaN&quot;) * 3) eq &quot;NaN&quot;`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>string(xs:float(&quot;NaN&quot;) * 3) eq &quot;NaN&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-NumericMultiply-22">
    <description> A test whose essence is: `string(xs:double(&quot;NaN&quot;) * 3) eq &quot;NaN&quot;`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>string(xs:double(&quot;NaN&quot;) * 3) eq &quot;NaN&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-NumericMultiply-23">
    <description> A test whose essence is: `string(3 * xs:float(&quot;NaN&quot;)) eq &quot;NaN&quot;`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>string(3 * xs:float(&quot;NaN&quot;)) eq &quot;NaN&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-NumericMultiply-24">
    <description> A test whose essence is: `string(3 * xs:double(&quot;NaN&quot;)) eq &quot;NaN&quot;`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>string(3 * xs:double(&quot;NaN&quot;)) eq &quot;NaN&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-NumericMultiply-25">
    <description> Invalid whitespace involving multiplication operator and '/'. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>/*5</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0003&quot;))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="K-NumericMultiply-26">
    <description> Invalid whitespace involving multiplication operator and '/'. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>/ * 5</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0003&quot;))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="K-NumericMultiply-27">
    <description> Invalid whitespace involving multiplication operator and '/'. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>4 + / * 5</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0003&quot;))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="K-NumericMultiply-28">
    <description> Invoke the '*' operator with invalid operands. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>&quot;3&quot; * &quot;3&quot;</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-NumericMultiply-29">
    <description> Invoke the '*' operator with invalid operands. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>1 * &quot;3&quot;</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-NumericMultiply-30">
    <description> A test whose essence is: `(3 * xs:untypedAtomic(3)) eq 9`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(3 * xs:untypedAtomic(3)) eq 9</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-NumericMultiply-31">
    <description> A test whose essence is: `(xs:untypedAtomic(3) * 3) eq 9`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(xs:untypedAtomic(3) * 3) eq 9</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-NumericMultiply-32">
    <description> Operand(s) which are the empty sequence. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(() * ())</test>
    <result-string/>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-NumericMultiply-33">
    <description> Operand(s) which are the empty sequence. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(() * 1)</test>
    <result-string/>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="op-numeric-multiply-1">
    <description> Check dynamic type of numeric multiply on arguments of union of numeric types and untypedAtomic. </description>
    <created by="Oliver Hallam" on="2010-03-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>for $x in (1, xs:decimal(2), xs:float(3), xs:double(4), xs:untypedAtomic(5)) for $y in (1, xs:decimal(2), xs:float(3), xs:double(4), xs:untypedAtomic(5)) return typeswitch ($x * $y) case xs:integer return &quot;integer&quot; case xs:decimal return &quot;decimal&quot; case xs:float return &quot;float&quot; case xs:double return &quot;double&quot; default return error()</test>
    <result-string>xs:string(&quot;integer decimal float double double decimal decimal float double double float float float double double double double double double double double double double double double&quot;)</result-string>
    <result>
      <assert-string-value>integer decimal float double double decimal decimal float double double float float float double double double double double double double double double double double double</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-numeric-multiply-001">
    <description> test multiplication by xs:double NaN </description>
    <created by="Tim Mills" on="2008-05-14"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:square($arg as xs:double) as xs:double { $arg * $arg }; 
      	xs:double('NaN') * local:square(7)</test>
    <result-string>xs:string(&quot;NaN&quot;)</result-string>
    <result>
      <assert-string-value>NaN</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-numeric-multiply-002">
    <description> test multiplication by xs:double NaN </description>
    <created by="Tim Mills" on="2008-05-14"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:square($arg as xs:double) as xs:double { $arg * $arg }; 
      	local:square(7) * xs:double('NaN')</test>
    <result-string>xs:string(&quot;NaN&quot;)</result-string>
    <result>
      <assert-string-value>NaN</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-numeric-multiply-003">
    <description> test multiplication by xs:double 1 </description>
    <created by="Tim Mills" on="2008-05-14"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:square($arg as xs:double) as xs:double { $arg * $arg }; 
      	local:square(7) * 1e0</test>
    <result-string>xs:string(&quot;49&quot;)</result-string>
    <result>
      <assert-string-value>49</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-numeric-multiply-004">
    <description> test multiplication by xs:double 1 </description>
    <created by="Tim Mills" on="2008-05-14"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:square($arg as xs:double) as xs:double { $arg * $arg }; 
      	1e0 * local:square(7)</test>
    <result-string>xs:string(&quot;49&quot;)</result-string>
    <result>
      <assert-string-value>49</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-numeric-multiply-005">
    <description> test multiplication by xs:double -1 </description>
    <created by="Tim Mills" on="2008-05-14"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:square($arg as xs:double) as xs:double { $arg * $arg }; 
      	local:square(7) * -1e0</test>
    <result-string>xs:string(&quot;-49&quot;)</result-string>
    <result>
      <assert-string-value>-49</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-numeric-multiply-006">
    <description> test multiplication by xs:double -1 </description>
    <created by="Tim Mills" on="2008-05-14"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:square($arg as xs:double) as xs:double { $arg * $arg }; 
      	-1e0 * local:square(7)</test>
    <result-string>xs:string(&quot;-49&quot;)</result-string>
    <result>
      <assert-string-value>-49</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-numeric-multiply-007">
    <description> test multiplication by xs:float NaN </description>
    <created by="Tim Mills" on="2008-05-14"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:square($arg as xs:float) as xs:float { $arg * $arg }; 
      	xs:float('NaN') * local:square(7)</test>
    <result-string>xs:string(&quot;NaN&quot;)</result-string>
    <result>
      <assert-string-value>NaN</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-numeric-multiply-008">
    <description> test multiplication by xs:float NaN </description>
    <created by="Tim Mills" on="2008-05-14"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:square($arg as xs:float) as xs:float { $arg * $arg }; 
      	local:square(7) * xs:float('NaN')</test>
    <result-string>xs:string(&quot;NaN&quot;)</result-string>
    <result>
      <assert-string-value>NaN</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-numeric-multiply-009">
    <description> test multiplication by xs:float 1 </description>
    <created by="Tim Mills" on="2008-05-14"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:square($arg as xs:float) as xs:float { $arg * $arg }; 
      	local:square(7) * xs:float(1)</test>
    <result-string>xs:string(&quot;49&quot;)</result-string>
    <result>
      <assert-string-value>49</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-numeric-multiply-010">
    <description> test multiplication by xs:float 1 </description>
    <created by="Tim Mills" on="2008-05-14"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:square($arg as xs:float) as xs:float { $arg * $arg }; 
      	xs:float(1) * local:square(7)</test>
    <result-string>xs:string(&quot;49&quot;)</result-string>
    <result>
      <assert-string-value>49</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-numeric-multiply-011">
    <description> test multiplication by xs:float -1 </description>
    <created by="Tim Mills" on="2008-05-14"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:square($arg as xs:float) as xs:float { $arg * $arg }; 
      	local:square(7) * xs:float(-1)</test>
    <result-string>xs:string(&quot;-49&quot;)</result-string>
    <result>
      <assert-string-value>-49</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-numeric-multiply-012">
    <description> test multiplication by xs:float -1 </description>
    <created by="Tim Mills" on="2008-05-14"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:square($arg as xs:float) as xs:float { $arg * $arg }; 
      	xs:float(-1) * local:square(7)</test>
    <result-string>xs:string(&quot;-49&quot;)</result-string>
    <result>
      <assert-string-value>-49</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-numeric-multiply-013">
    <description> test multiplication by xs:decimal 0 </description>
    <created by="Tim Mills" on="2008-05-14"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:square($arg as xs:decimal) as xs:decimal { $arg * $arg }; 
      	local:square(2.0) * 0.0</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-numeric-multiply-014">
    <description> test multiplication by xs:decimal 0 </description>
    <created by="Tim Mills" on="2008-05-14"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:square($arg as xs:decimal) as xs:decimal { $arg * $arg }; 
      	0.0 * local:square(7.0)</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-numeric-multiply-015">
    <description> test multiplication by xs:decimal 1 </description>
    <created by="Tim Mills" on="2008-05-14"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:square($arg as xs:decimal) as xs:decimal { $arg * $arg }; 
      	local:square(7.0) * 1.0</test>
    <result-string>xs:string(&quot;49&quot;)</result-string>
    <result>
      <assert-string-value>49</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-numeric-multiply-016">
    <description> test multiplication by xs:decimal 1 </description>
    <created by="Tim Mills" on="2008-05-14"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:square($arg as xs:decimal) as xs:decimal { $arg * $arg }; 
      	1.0 * local:square(7.0)</test>
    <result-string>xs:string(&quot;49&quot;)</result-string>
    <result>
      <assert-string-value>49</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-numeric-multiply-017">
    <description> test multiplication by xs:decimal -1 </description>
    <created by="Tim Mills" on="2008-05-14"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:square($arg as xs:decimal) as xs:decimal { $arg * $arg }; 
      	local:square(7.0) * -1.0</test>
    <result-string>xs:string(&quot;-49&quot;)</result-string>
    <result>
      <assert-string-value>-49</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-numeric-multiply-018">
    <description> test multiplication by xs:decimal -1 </description>
    <created by="Tim Mills" on="2008-05-14"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:square($arg as xs:decimal) as xs:decimal { $arg * $arg }; 
      	-1.0 * local:square(7.0)</test>
    <result-string>xs:string(&quot;-49&quot;)</result-string>
    <result>
      <assert-string-value>-49</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-numeric-multiply-019">
    <description> test multiplication by xs:integer 0 </description>
    <created by="Tim Mills" on="2008-05-14"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; 
      	local:square(2) * 0</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-numeric-multiply-020">
    <description> test multiplication by xs:integer 0 </description>
    <created by="Tim Mills" on="2008-05-14"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; 
      	0 * local:square(2)</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-numeric-multiply-021">
    <description> test multiplication by xs:integer 1 </description>
    <created by="Tim Mills" on="2008-05-14"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; 
      	local:square(7) * 1</test>
    <result-string>xs:string(&quot;49&quot;)</result-string>
    <result>
      <assert-string-value>49</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-numeric-multiply-022">
    <description> test multiplication by xs:integer 1 </description>
    <created by="Tim Mills" on="2008-05-14"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; 
      	1 * local:square(7)</test>
    <result-string>xs:string(&quot;49&quot;)</result-string>
    <result>
      <assert-string-value>49</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-numeric-multiply-023">
    <description> test multiplication by xs:integer -1 </description>
    <created by="Tim Mills" on="2008-05-14"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; 
      	local:square(7) * -1</test>
    <result-string>xs:string(&quot;-49&quot;)</result-string>
    <result>
      <assert-string-value>-49</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-numeric-multiply-024">
    <description> test multiplication by xs:integer -1 </description>
    <created by="Tim Mills" on="2008-05-14"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; 
      	-1 * local:square(7)</test>
    <result-string>xs:string(&quot;-49&quot;)</result-string>
    <result>
      <assert-string-value>-49</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-numeric-multiply-025">
    <description> test multiplication of large xs:decimal </description>
    <created by="Tim Mills" on="2008-05-14"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:square($arg as xs:decimal) as xs:decimal { $arg * $arg }; 
      	local:square(9223372036854775808.1) gt 0</test>
    <result-string/>
    <result>
      <any-of>
        <assert-true/>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="cbcl-numeric-multiply-026">
    <description> test multiplication of large xs:integer </description>
    <created by="Tim Mills" on="2008-05-14"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:square($arg as xs:integer) as xs:integer { $arg * $arg }; 
      	local:square(9223372036854775808) gt 0</test>
    <result-string/>
    <result>
      <any-of>
        <assert-true/>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="cbcl-numeric-multiply-027">
    <description> ensure that multiplying xs:integers returns an xs:integer </description>
    <created by="Oliver Hallam" on="2008-05-29"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:integer($x as xs:decimal) { if ($x mod 1 eq 0) then xs:integer($x) else $x }; 
      	(local:integer(2) * local:integer(2)) instance of xs:integer</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
</test-set>