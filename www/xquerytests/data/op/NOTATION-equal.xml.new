<?xml version="1.0" encoding="UTF-8"?>
<test-set name="op-NOTATION-equal" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">
  <description>Tests for the NOTATION-equal() function</description>
  <link document="http://www.w3.org/TR/xpath-functions-30/" idref="func-NOTATION-equal" type="spec"/>
  <dependency type="spec" value="XQ10+"/>
  <dependency type="feature" value="schemaValidation"/>
  <environment name="notation">
    <source file="NOTATION-equal/notation.xml" role="." validation="strict">
      <description>A schema-validated xml file with NOTATION elements</description>
      <created by="Andreas Behm" on="2005-10-10"/>
    </source>
    <schema file="NOTATION-equal/notationschema.xsd" uri="http://www.example.com/notation">
      <description>A Schema for NOTATION data</description>
      <created by="Andreas Behm" on="2005-10-10"/>
    </schema>
  </environment>
  <test-case name="Comp-notation-1">
    <description> notation comparison </description>
    <created by="Andreas Behm" on="2005-10-05"/>
    <environment ref="notation"/>
    <dependency type="feature" value="schemaImport"/>
    <test>import schema namespace myns=&quot;http://www.example.com/notation&quot;; 
         fn:not(exactly-one(//*:NOTATION1[1]) eq exactly-one(//*:NOTATION3[1]))</test>
    <result-string>xs:boolean('false')</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="Comp-notation-2">
    <description> notation comparison </description>
    <created by="Andreas Behm" on="2005-10-05"/>
    <environment ref="notation"/>
    <dependency type="feature" value="schemaImport"/>
    <test>import schema namespace myns=&quot;http://www.example.com/notation&quot;; 
         exactly-one(//*:NOTATION1[1]) eq exactly-one(//*:NOTATION2[1])</test>
    <result-string/>
    <result>
      <any-of>
        <assert-true/>
        <assert-false/>
      </any-of>
    </result>
  </test-case>
  <test-case name="Comp-notation-3">
    <description> notation comparison </description>
    <created by="Andreas Behm" on="2005-10-05"/>
    <environment ref="notation"/>
    <dependency type="feature" value="schemaImport"/>
    <test>import schema namespace myns=&quot;http://www.example.com/notation&quot;; 
         exactly-one(//*:NOTATION1[1]) eq exactly-one(//*:NOTATION4[1])</test>
    <result-string>xs:boolean('false')</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="Comp-notation-4">
    <description> notation comparison using &quot;ne&quot; </description>
    <created by="Carmelo Montanez" on="2006-01-25"/>
    <environment ref="notation"/>
    <dependency type="feature" value="schemaImport"/>
    <test>import schema namespace myns=&quot;http://www.example.com/notation&quot;; 
         exactly-one(//*:NOTATION1[1]) ne exactly-one(//*:NOTATION3[1])</test>
    <result-string>xs:boolean('false')</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="Comp-notation-5">
    <description> notation comparison using &quot;ne&quot; </description>
    <created by="Carmelo Montanez" on="2006-01-25"/>
    <environment ref="notation"/>
    <dependency type="feature" value="schemaImport"/>
    <test>import schema namespace myns=&quot;http://www.example.com/notation&quot;; 
         exactly-one(//*:NOTATION1[1]) ne exactly-one(//*:NOTATION2[1])</test>
    <result-string>xs:boolean('false')</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="Comp-notation-6">
    <description> notation comparison using &quot;ne&quot; </description>
    <created by="Carmelo Montanez" on="2006-01-25"/>
    <environment ref="notation"/>
    <dependency type="feature" value="schemaImport"/>
    <test>import schema namespace myns=&quot;http://www.example.com/notation&quot;; 
         exactly-one(//*:NOTATION1[1]) ne exactly-one(//*:NOTATION4[1])</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="Comp-notation-7">
    <description> Evaluation of Notation Comparison operator (eq) and used expression as argument to fn:not function, returns false. </description>
    <created by="Carmelo Montanez" on="2006-01-25"/>
    <environment ref="notation"/>
    <dependency type="feature" value="schemaImport"/>
    <test>import schema namespace myns=&quot;http://www.example.com/notation&quot;; 
         fn:not(exactly-one(//*:NOTATION1[1]) eq exactly-one(//*:NOTATION3[1]))</test>
    <result-string>xs:boolean('false')</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="Comp-notation-8">
    <description> Evaluation of Notation Comparison operator (eq) and used expression as argument to fn:not function, returns true </description>
    <created by="Carmelo Montanez" on="2006-01-25"/>
    <environment ref="notation"/>
    <dependency type="feature" value="schemaImport"/>
    <test>import schema namespace myns=&quot;http://www.example.com/notation&quot;; 
         fn:not(exactly-one(//*:NOTATION1[1]) eq exactly-one(//*:NOTATION2[1]))</test>
    <result-string>xs:boolean('false')</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="Comp-notation-9">
    <description> Evaluation of Notation Comparison operator (ne) and used expression as argument to fn:not function, returns true. </description>
    <created by="Carmelo Montanez" on="2006-01-26"/>
    <environment ref="notation"/>
    <dependency type="feature" value="schemaImport"/>
    <test>import schema namespace myns=&quot;http://www.example.com/notation&quot;; 
         fn:not(exactly-one(//*:NOTATION1[1]) ne exactly-one(//*:NOTATION3[1]))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="Comp-notation-10">
    <description> Evaluation of Notation Comparison operator (ne) and used expression as argument to fn:not function, returns false. </description>
    <created by="Carmelo Montanez" on="2006-01-26"/>
    <environment ref="notation"/>
    <dependency type="feature" value="schemaImport"/>
    <test>import schema namespace myns=&quot;http://www.example.com/notation&quot;; 
         fn:not(exactly-one(//*:NOTATION1[1]) ne exactly-one(//*:NOTATION2[1]))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="Comp-notation-11">
    <description> Evaluation of Notation Comparison operator (eq) and used expression as argument to fn:boolean function. </description>
    <created by="Carmelo Montanez" on="2006-01-26"/>
    <environment ref="notation"/>
    <dependency type="feature" value="schemaImport"/>
    <test>import schema namespace myns=&quot;http://www.example.com/notation&quot;; 
         fn:boolean(exactly-one(//*:NOTATION1[1]) eq exactly-one(//*:NOTATION2[1]))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="Comp-notation-12">
    <description> Evaluation of Notation Comparison operator (ne) and used expression as argument to fn:boolean function. </description>
    <created by="Carmelo Montanez" on="2006-01-26"/>
    <environment ref="notation"/>
    <dependency type="feature" value="schemaImport"/>
    <test>import schema namespace myns=&quot;http://www.example.com/notation&quot;; 
         fn:boolean(exactly-one(//*:NOTATION1[1]) ne exactly-one(//*:NOTATION2[1]))</test>
    <result-string>xs:boolean('false')</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="Comp-notation-13">
    <description> Evaluation of Notation Comparison operator (eq) and used in boolean expression with &quot;fn:true&quot; and &quot;and&quot; . </description>
    <created by="Carmelo Montanez" on="2006-01-26"/>
    <environment ref="notation"/>
    <dependency type="feature" value="schemaImport"/>
    <test>import schema namespace myns=&quot;http://www.example.com/notation&quot;; 
         (exactly-one(//*:NOTATION1[1]) eq exactly-one(//*:NOTATION2[1])) and fn:true()</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="Comp-notation-14">
    <description> Evaluation of Notation Comparison operator (ne) and used in boolean expression with &quot;fn:true&quot; and &quot;and&quot; . </description>
    <created by="Carmelo Montanez" on="2006-01-26"/>
    <environment ref="notation"/>
    <dependency type="feature" value="schemaImport"/>
    <test>import schema namespace myns=&quot;http://www.example.com/notation&quot;; 
         (exactly-one(//*:NOTATION1[1]) ne exactly-one(//*:NOTATION2[1])) and fn:true()</test>
    <result-string>xs:boolean('false')</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="Comp-notation-15">
    <description> Evaluation of Notation Comparison operator (eq) and used in boolean expression with &quot;fn:true&quot; and &quot;or&quot; . </description>
    <created by="Carmelo Montanez" on="2006-01-26"/>
    <environment ref="notation"/>
    <dependency type="feature" value="schemaImport"/>
    <test>import schema namespace myns=&quot;http://www.example.com/notation&quot;; 
         (exactly-one(//*:NOTATION1[1]) eq exactly-one(//*:NOTATION2[1])) or fn:true()</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="Comp-notation-16">
    <description> Evaluation of Notation Comparison operator (ne) and used in boolean expression with &quot;fn:true&quot; and &quot;or&quot; . </description>
    <created by="Carmelo Montanez" on="2006-01-26"/>
    <environment ref="notation"/>
    <dependency type="feature" value="schemaImport"/>
    <test>import schema namespace myns=&quot;http://www.example.com/notation&quot;; 
         (exactly-one(//*:NOTATION1[1]) ne exactly-one(//*:NOTATION2[1])) or fn:true()</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="Comp-notation-17">
    <description> Evaluation of Notation Comparison operator (eq) and used in boolean expression with &quot;fn:false&quot; and &quot;and&quot; . </description>
    <created by="Carmelo Montanez" on="2006-01-26"/>
    <environment ref="notation"/>
    <dependency type="feature" value="schemaImport"/>
    <test>import schema namespace myns=&quot;http://www.example.com/notation&quot;; 
         (exactly-one(//*:NOTATION1[1]) eq exactly-one(//*:NOTATION2[1])) and fn:false()</test>
    <result-string>xs:boolean('false')</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="Comp-notation-18">
    <description> Evaluation of Notation Comparison operator (ne) and used in boolean expression with &quot;fn:false&quot; and &quot;and&quot; . </description>
    <created by="Carmelo Montanez" on="2006-01-26"/>
    <environment ref="notation"/>
    <dependency type="feature" value="schemaImport"/>
    <test>import schema namespace myns=&quot;http://www.example.com/notation&quot;; 
         (exactly-one(//*:NOTATION1[1]) ne exactly-one(//*:NOTATION2[1])) and fn:false()</test>
    <result-string>xs:boolean('false')</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="Comp-notation-19">
    <description> Evaluation of Notation Comparison operator (eq) and used in boolean expression with &quot;fn:false&quot; and &quot;or&quot; . </description>
    <created by="Carmelo Montanez" on="2006-01-26"/>
    <environment ref="notation"/>
    <dependency type="feature" value="schemaImport"/>
    <test>import schema namespace myns=&quot;http://www.example.com/notation&quot;; 
         (exactly-one(//*:NOTATION1[1]) eq exactly-one(//*:NOTATION2[1])) or fn:false()</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="Comp-notation-20">
    <description> Evaluation of Notation Comparison operator (ne) and used in boolean expression with &quot;fn:false&quot; and &quot;or&quot; . </description>
    <created by="Carmelo Montanez" on="2006-01-26"/>
    <environment ref="notation"/>
    <dependency type="feature" value="schemaImport"/>
    <test>import schema namespace myns=&quot;http://www.example.com/notation&quot;; 
         (exactly-one(//*:NOTATION1[1]) ne exactly-one(//*:NOTATION2[1])) or fn:false()</test>
    <result-string>xs:boolean('false')</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="Comp-notation-21">
    <description> Evaluation of expression of Notation Comparison operator (eq) used as argument to &quot;fn:string&quot; function. </description>
    <created by="Carmelo Montanez" on="2006-01-26"/>
    <environment ref="notation"/>
    <dependency type="feature" value="schemaImport"/>
    <test>import schema namespace myns=&quot;http://www.example.com/notation&quot;; 
         exactly-one(//*:NOTATION1[1]) eq exactly-one(//*:NOTATION2[1])
      </test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="Comp-notation-22">
    <description> Evaluation of expression of Notation Comparison operator (ne) used as argument to &quot;fn:string&quot; function. </description>
    <created by="Carmelo Montanez" on="2006-01-26"/>
    <environment ref="notation"/>
    <dependency type="feature" value="schemaImport"/>
    <test>import schema namespace myns=&quot;http://www.example.com/notation&quot;; 
         exactly-one(//*:NOTATION1[1]) ne exactly-one(//*:NOTATION2[1])</test>
    <result-string/>
    <result>
      <any-of>
        <assert-false/>
        <assert-true/>
      </any-of>
    </result>
  </test-case>
</test-set>