<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="misc-Surrogates">
   <description>Tests for the surrogates operator</description>
   <link type="spec" document="http://www.w3.org/TR/xpath-functions-30/"
         idref="func-surrogates"/>
   <link type="spec" document="FuncOps" section-number="7.1" idref="string-types"/>
   
   

   <test-case name="surrogates01">
      <description> string-length() when non-BMP characters are present </description>
      <created by="Michael Kay, Saxonica" on="2006-02-01"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[string-length("abc&#x1D156;def")]]></test>
      <result>
         <assert-eq>7</assert-eq>
      </result>
   </test-case>

   <test-case name="surrogates02">
      <description> substring() when non-BMP characters are present </description>
      <created by="Michael Kay, Saxonica" on="2006-02-01"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[substring("abc&#x1D156;def", 5)]]></test>
      <result>
         <assert-string-value>def</assert-string-value>
      </result>
   </test-case>

   <test-case name="surrogates03">
      <description> substring() when non-BMP characters are present </description>
      <created by="Michael Kay, Saxonica" on="2006-02-01"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[substring("abc&#x1D156;def", 4)]]></test>
      <result>
         <assert-string-value>&#119126;def</assert-string-value>
      </result>
   </test-case>

   <test-case name="surrogates04">
      <description> translate() when non-BMP characters are present </description>
      <created by="Michael Kay, Saxonica" on="2006-02-01"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[translate("abc&#x1D156;def", "&#x1D156;", "#")]]></test>
      <result>
         <assert-string-value>abc#def</assert-string-value>
      </result>
   </test-case>

   <test-case name="surrogates05">
      <description> translate() when non-BMP characters are present </description>
      <created by="Michael Kay, Saxonica" on="2006-02-01"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[translate("abc&#x1D156;def", "&#x1D156;de", "#DE")]]></test>
      <result>
         <assert-string-value>abc#DEf</assert-string-value>
      </result>
   </test-case>

   <test-case name="surrogates06">
      <description> translate() when non-BMP characters are present </description>
      <created by="Michael Kay, Saxonica" on="2006-02-01"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[translate("abc&#x1D156;def", "def", "&#x1D156;EF")]]></test>
      <result>
         <assert-string-value>abc&#119126;&#119126;EF</assert-string-value>
      </result>
   </test-case>

   <test-case name="surrogates07">
      <description> string-to-codepoints() when non-BMP characters are present </description>
      <created by="Michael Kay, Saxonica" on="2006-02-01"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[string-to-codepoints("abc&#x1D156;def")]]></test>
      <result>
         <assert-string-value>97 98 99 119126 100 101 102</assert-string-value>
      </result>
   </test-case>

   <test-case name="surrogates08">
      <description> codepoints-to-string() when non-BMP characters are present </description>
      <created by="Michael Kay, Saxonica" on="2006-02-01"/>
      <test>codepoints-to-string((97, 98, 99, 119126, 100, 101, 102))</test>
      <result>
         <assert-string-value>abc&#119126;def</assert-string-value>
      </result>
   </test-case>

   <test-case name="surrogates09">
      <description> substring-before() when non-BMP characters are present </description>
      <created by="Michael Kay, Saxonica" on="2006-02-01"/>
<dependency type="spec" value="XQ10+"/>
            <test><![CDATA[substring-before("abc&#x1D156;def", "&#x1D156;")]]></test>
      <result>
         <assert-string-value>abc</assert-string-value>
      </result>
   </test-case>

   <test-case name="surrogates10">
      <description> substring-before() when non-BMP characters are present </description>
      <created by="Michael Kay, Saxonica" on="2006-02-01"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[substring-before("abc&#x1D156;def", "f")]]></test>
      <result>
         <assert-string-value>abc&#119126;de</assert-string-value>
      </result>
   </test-case>

   <test-case name="surrogates11">
      <description> substring-after() when non-BMP characters are present </description>
      <created by="Michael Kay, Saxonica" on="2006-02-01"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[substring-after("abc&#x1D156;def", "&#x1D156;")]]></test>
      <result>
         <assert-string-value>def</assert-string-value>
      </result>
   </test-case>

   <test-case name="surrogates12">
      <description> matches() when non-BMP characters are present </description>
      <created by="Michael Kay, Saxonica" on="2006-02-01"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[matches("abc&#x1D157;def", "abc[&#x1D156;-&#x1D158;]def")]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="surrogates13">
      <description> matches() when non-BMP characters are present </description>
      <created by="Michael Kay, Saxonica" on="2006-02-01"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[matches("abc&#x1D157;def", "abc.def")]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="surrogates14">
      <description> replace() when non-BMP characters are present </description>
      <created by="Michael Kay, Saxonica" on="2006-02-01"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[replace("abc&#119130;def", "[&#119120;-&#119135;]", "&#119135;")]]></test>
      <result>
         <assert-string-value>abc&#119135;def</assert-string-value>
      </result>
   </test-case>

   <test-case name="surrogates15">
      <description> replace() when non-BMP characters are present </description>
      <created by="Michael Kay, Saxonica" on="2006-02-01"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[replace("abc&#x1D157;def", "[^a-f]", "###")]]></test>
      <result>
         <assert-string-value>abc###def</assert-string-value>
      </result>
   </test-case>

   <test-case name="surrogates16">
      <description>Leading surrogate = edge value of 56319. Test case from Gunther Rademacher</description>
      <created by="Michael Kay, Saxonica" on="2012-01-14"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[string-to-codepoints(substring("&#x10FC00;A", 2, 1))]]></test>
      <result>
         <assert-eq>65</assert-eq>
      </result>
   </test-case>
   
   
   <test-case name="surrogates01a">
      <description> string-length() when non-BMP characters are present </description>
      <created by="Michael Kay, Saxonica" on="2006-02-01"/>
      <dependency type="spec" value="XP20+"/>
      <test>string-length("abc&#x1D156;def")</test>
      <result>
         <assert-eq>7</assert-eq>
      </result>
   </test-case>

   <test-case name="surrogates02a">
      <description> substring() when non-BMP characters are present </description>
      <created by="Michael Kay, Saxonica" on="2006-02-01"/>
      <dependency type="spec" value="XP20+"/>
      <test>substring("abc&#x1D156;def", 5)</test>
      <result>
         <assert-string-value>def</assert-string-value>
      </result>
   </test-case>

   <test-case name="surrogates03a">
      <description> substring() when non-BMP characters are present </description>
      <created by="Michael Kay, Saxonica" on="2006-02-01"/>
      <dependency type="spec" value="XP20+"/>
      <test>substring("abc&#x1D156;def", 4)</test>
      <result>
         <assert-string-value>&#119126;def</assert-string-value>
      </result>
   </test-case>

   <test-case name="surrogates04a">
      <description> translate() when non-BMP characters are present </description>
      <created by="Michael Kay, Saxonica" on="2006-02-01"/>
      <dependency type="spec" value="XP20+"/>
      <test>translate("abc&#x1D156;def", "&#x1D156;", "#")</test>
      <result>
         <assert-string-value>abc#def</assert-string-value>
      </result>
   </test-case>

   <test-case name="surrogates05a">
      <description> translate() when non-BMP characters are present </description>
      <created by="Michael Kay, Saxonica" on="2006-02-01"/>
      <dependency type="spec" value="XP20+"/>
      <test>translate("abc&#x1D156;def", "&#x1D156;de", "#DE")</test>
      <result>
         <assert-string-value>abc#DEf</assert-string-value>
      </result>
   </test-case>

   <test-case name="surrogates06a">
      <description> translate() when non-BMP characters are present </description>
      <created by="Michael Kay, Saxonica" on="2006-02-01"/>
      <dependency type="spec" value="XP20+"/>
      <test>translate("abc&#x1D156;def", "def", "&#x1D156;EF")</test>
      <result>
         <assert-string-value>abc&#119126;&#119126;EF</assert-string-value>
      </result>
   </test-case>

   <test-case name="surrogates07a">
      <description> string-to-codepoints() when non-BMP characters are present </description>
      <created by="Michael Kay, Saxonica" on="2006-02-01"/>
      <dependency type="spec" value="XP20+"/>
      <test>string-to-codepoints("abc&#x1D156;def")</test>
      <result>
         <assert-string-value>97 98 99 119126 100 101 102</assert-string-value>
      </result>
   </test-case>

   <test-case name="surrogates08a">
      <description> codepoints-to-string() when non-BMP characters are present </description>
      <created by="Michael Kay, Saxonica" on="2006-02-01"/>
      <test>codepoints-to-string((97, 98, 99, 119126, 100, 101, 102))</test>
      <result>
         <assert-string-value>abc&#119126;def</assert-string-value>
      </result>
   </test-case>

   <test-case name="surrogates09a">
      <description> substring-before() when non-BMP characters are present </description>
      <created by="Michael Kay, Saxonica" on="2006-02-01"/>
      <dependency type="spec" value="XP20+"/>
      <test>substring-before("abc&#x1D156;def", "&#x1D156;")</test>
      <result>
         <assert-string-value>abc</assert-string-value>
      </result>
   </test-case>

   <test-case name="surrogates10a">
      <description> substring-before() when non-BMP characters are present </description>
      <created by="Michael Kay, Saxonica" on="2006-02-01"/>
      <dependency type="spec" value="XP20+"/>
      <test>substring-before("abc&#x1D156;def", "f")</test>
      <result>
         <assert-string-value>abc&#119126;de</assert-string-value>
      </result>
   </test-case>

   <test-case name="surrogates11a">
      <description> substring-after() when non-BMP characters are present </description>
      <created by="Michael Kay, Saxonica" on="2006-02-01"/>
      <dependency type="spec" value="XP20+"/>
      <test>substring-after("abc&#x1D156;def", "&#x1D156;")</test>
      <result>
         <assert-string-value>def</assert-string-value>
      </result>
   </test-case>

   <test-case name="surrogates12a">
      <description> matches() when non-BMP characters are present </description>
      <created by="Michael Kay, Saxonica" on="2006-02-01"/>
      <dependency type="spec" value="XP20+"/>
      <test>matches("abc&#x1D157;def", "abc[&#x1D156;-&#x1D158;]def")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="surrogates13a">
      <description> matches() when non-BMP characters are present </description>
      <created by="Michael Kay, Saxonica" on="2006-02-01"/>
      <dependency type="spec" value="XP20+"/>
      <test>matches("abc&#x1D157;def", "abc.def")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="surrogates14a">
      <description> replace() when non-BMP characters are present </description>
      <created by="Michael Kay, Saxonica" on="2006-02-01"/>
      <dependency type="spec" value="XP20+"/>
      <test>replace("abc&#119130;def", "[&#119120;-&#119135;]", "&#119135;")</test>
      <result>
         <assert-string-value>abc&#119135;def</assert-string-value>
      </result>
   </test-case>

   <test-case name="surrogates15a">
      <description> replace() when non-BMP characters are present </description>
      <created by="Michael Kay, Saxonica" on="2006-02-01"/>
      <dependency type="spec" value="XP20+"/>
      <test>replace("abc&#x1D157;def", "[^a-f]", "###")</test>
      <result>
         <assert-string-value>abc###def</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="surrogates16a">
      <description>Leading surrogate = edge value of 56319. Test case from Gunther Rademacher</description>
      <created by="Michael Kay, Saxonica" on="2012-01-14"/>
      <dependency type="spec" value="XP20+"/>
      <test>string-to-codepoints(substring("&#x10FC00;A", 2, 1))</test>
      <result>
         <assert-eq>65</assert-eq>
      </result>
   </test-case>
</test-set>