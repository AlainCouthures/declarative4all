<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog"
          name="misc-ErrorsAndOptimization">
   <description>Tests for the ErrorsAndOptimization</description>
   <link type="spec" document="http://www.w3.org/TR/xquery-30/"
         idref="doc-xquery30-ErrorsAndOptimization"/>
   <link type="spec" document="XQuery" section-number="2.3.4" idref="id-errors-and-opt"/>

   <test-case name="errors-and-optimization-1">
      <description> Conditional and typeswitch expressions must not raise a dynamic error in respect of subexpressions occurring in a branch that is not selected </description>
      <created by="Jonathan Robie" on="2010-02-18"/>
      <test>if (true()) then 1 else error(QName('http://www.example.com/errors', 'err:oops'), "Oops, this error should not be raised!")</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="errors-and-optimization-2">
      <description> Conditional expressions must not return the value delivered by a branch unless that branch is selected. </description>
      <created by="Jonathan Robie" on="2010-02-18"/>
      <test>if (true()) then 1 div 0 else 1</test>
      <result>
         <error code="FOAR0001"/>
      </result>
   </test-case>

   <test-case name="errors-and-optimization-3">
      <description> To avoid unexpected errors caused by expression rewrite, tests that are designed to prevent dynamic errors should be expressed using conditional or typeswitch expressions. </description>
      <created by="Jonathan Robie" on="2010-02-18"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[count( let $N := <n x="this ain't no date"/> return $N[if (@x castable as xs:date) then xs:date(@x) gt xs:date("2000-01-01") else false()] )]]></test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="errors-and-optimization-4">
      <description> If a processor evaluates an operand E (wholly or in part), then it is required to establish that the actual value of the operand E does not violate any constraints on its cardinality. </description>
      <created by="Jonathan Robie" on="2010-02-18"/>
      <test>string-length(("one", "two"))</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="errors-and-optimization-5">
      <description> If a processor evaluates an operand E (wholly or in part), then it is required to establish that the actual value of the operand E does not violate any constraints on its cardinality. </description>
      <created by="Jonathan Robie" on="2010-02-18"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $e := (1,2) return $e eq 0</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="errors-and-optimization-6">
      <description> Expressions must not be rewritten in such a way as to create or remove static errors. </description>
      <created by="Jonathan Robie" on="2010-02-18"/>
      <test>for $s in "var:QName" return QName($s)</test>
      <result>
         <error code="XPST0017"/>
      </result>
   </test-case>

   <test-case name="errors-and-optimization-7">
      <description> Expressions must not be rewritten in such a way as to create or remove static errors. </description>
      <created by="Jonathan Robie" on="2010-02-18"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>if (true()) then 1 else let $unbound:var := 2 return $unbound:var</test>
      <result>
         <error code="XPST0081"/>
      </result>
   </test-case>
</test-set>
