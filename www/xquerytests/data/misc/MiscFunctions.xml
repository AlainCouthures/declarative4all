<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="misc-MiscFunctions">
   <description>Tests for the MiscFunctions operator</description>
   <link type="spec" document="http://www.w3.org/TR/xpath-functions-30/"
         idref="func-MiscFunctions"/>
   <link type="spec" document="FuncOps" section-number="15.5.2" idref="func-id"/>
   
   <environment name="id-idref">
      <source role="." file="../fn/id/id.xml" validation="strict">
         <description>A DTD validated xml file, that contains data for the ID/IDREF function tests.</description>
         <created by="Carmelo Montanez" on="2005-11-27"/>
      </source>
      <schema uri="http://www.w3.org/XQueryTest/ididrefs"
              file="../fn/id/id.xsd">
         <description>A schema for the id/idref functions tests</description>
         <created by="Carmelo Montanez" on="2005-11-27"/>
      </schema>
   </environment>
   
   <environment name="id-idref3">
      <source role="." file="../fn/id/id2.xml" validation="strict">
         <description>More data for id and idref related functions (schema-based).</description>
         <created by="Michael Kay" on="2009-03-06"/>
      </source>
      <schema uri="http://www.w3.org/XQueryTest/ididrefs"
              file="../fn/id/id.xsd">
         <description>A schema for the id/idref functions tests</description>
         <created by="Carmelo Montanez" on="2005-11-27"/>
      </schema>
   </environment>
   
   <dependency type="spec" value="XQ10+"/>
   <dependency type="feature" value="schemaImport"/>

   <test-case name="fn-id-5">
      <description> Evaluation of fn:id with given IDREF matching a single element. </description>
      <created by="Carmelo Montanez" on="2005-11-27"/>
      <environment ref="id-idref"/>
      <test>import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:id("id1", /ids:IDS[1])</test>
      <result>
         <assert-xml><![CDATA[<elementwithid-1 xmlns = "http://www.w3.org/XQueryTest/ididrefs" xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance" anId="id1"/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fn-id-6">
      <description> Evaluation of fn:id with given IDREF not matching a single element. USes fn:count to avoid empty file. </description>
      <created by="Carmelo Montanez" on="2005-11-27"/>
      <environment ref="id-idref"/>
      <test>import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:count(fn:id("nomatchingid", /ids:IDS[1]))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-id-7">
      <description> Evaluation of fn:id with given IDREF matching same element. </description>
      <created by="Carmelo Montanez" on="2005-11-27"/>
      <environment ref="id-idref"/>
      <test>import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:id("id2 id2", /ids:IDS[1])</test>
      <result>
         <assert-xml><![CDATA[<elementwithid-2 xmlns = "http://www.w3.org/XQueryTest/ididrefs" xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance" anId="id2"/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fn-id-8">
      <description> Evaluation of fn:id with multiple IDREF matching multiple elements. </description>
      <created by="Carmelo Montanez" on="2005-11-27"/>
      <environment ref="id-idref"/>
      <test>import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:id("id1 id2", /ids:IDS[1])</test>
      <result>
         <any-of>
            <assert-xml><![CDATA[<elementwithid-1 xmlns = "http://www.w3.org/XQueryTest/ididrefs" xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance" anId="id1"/><elementwithid-2 xmlns = "http://www.w3.org/XQueryTest/ididrefs" xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance" anId="id2"/>]]></assert-xml>
            <assert-xml><![CDATA[<elementwithid-2 anId="id1"/><elementwithid-1 anId="id2"/>]]></assert-xml>
         </any-of>
      </result>
   </test-case>

   <test-case name="fn-id-9">
      <description> Evaluation of fn:id with multiple IDREF, but only one matching one element. </description>
      <created by="Carmelo Montanez" on="2005-11-27"/>
      <environment ref="id-idref"/>
      <test>import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:id("id1 nomatching", /ids:IDS[1])</test>
      <result>
         <assert-xml><![CDATA[<elementwithid-1 xmlns = "http://www.w3.org/XQueryTest/ididrefs" xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance" anId="id1"/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fn-id-10">
      <description> Evaluation of fn:id with multiple IDREF, but none matching one element. Uses fn:count to avoid empty file. </description>
      <created by="Carmelo Montanez" on="2005-11-27"/>
      <environment ref="id-idref"/>
      <test>import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:count(fn:id("nomatching1 nomatching2", /ids:IDS[1]))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-id-11">
      <description> Evaluation of fn:id with IDREF set to empty string. Uses fn:count to avoid empty file. </description>
      <created by="Carmelo Montanez" on="2005-11-27"/>
      <environment ref="id-idref"/>
      <test>import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:count(fn:id("", /ids:IDS[1]))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-id-12">
      <description> Evaluation of fn:id function that give first argument as argument to fn:substring. </description>
      <created by="Carmelo Montanez" on="2005-11-27"/>
      <environment ref="id-idref"/>
      <test>import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:id(fn:substring("1id3",2), /ids:IDS[1])</test>
      <result>
         <assert-xml><![CDATA[<elementwithid-3 xmlns = "http://www.w3.org/XQueryTest/ididrefs" xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance" anId="id3"/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fn-id-13">
      <description> Evaluation of fn:id, where the same IDREF makes refence to the same element. </description>
      <created by="Carmelo Montanez" on="2005-11-27"/>
      <environment ref="id-idref"/>
      <test>import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:id("id4", /ids:IDS[1])</test>
      <result>
         <assert-xml><![CDATA[<elementwithid-4 xmlns = "http://www.w3.org/XQueryTest/ididrefs" xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance" anId="id4"/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fn-id-14">
      <description> Evaluation of fn:id for which the given IDREF contains a prefix. Use fn:count to avoid empty file. </description>
      <created by="Carmelo Montanez" on="2005-11-27"/>
      <environment ref="id-idref"/>
      <test>import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:count(fn:id("p1:id5", /ids:IDS[1]))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-id-15">
      <description> Evaluation of fn:id for which IDREF list have the same value for all its members. </description>
      <created by="Carmelo Montanez" on="2005-11-27"/>
      <environment ref="id-idref"/>
      <test>import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:id("id1 id1", /ids:IDS[1])</test>
      <result>
         <assert-xml><![CDATA[<elementwithid-1 xmlns = "http://www.w3.org/XQueryTest/ididrefs" xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance" anId="id1"/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fn-id-16">
      <description> Evaluation of fn:id for which IDREF list have the same value for all its members but different case. </description>
      <created by="Carmelo Montanez" on="2005-11-27"/>
      <environment ref="id-idref"/>
      <test>import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:id("id1 ID1", /ids:IDS[1])</test>
      <result>
         <assert-xml><![CDATA[<elementwithid-1 xmlns = "http://www.w3.org/XQueryTest/ididrefs" xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance" anId="id1"/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fn-id-17">
      <description> Evaluation of fn:id for which IDREF uses the fn lower case function. </description>
      <created by="Carmelo Montanez" on="2005-11-27"/>
      <environment ref="id-idref"/>
      <test>import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:id(fn:lower-case("ID1"), /ids:IDS[1])</test>
      <result>
         <assert-xml><![CDATA[<elementwithid-1 xmlns = "http://www.w3.org/XQueryTest/ididrefs" xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance" anId="id1"/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fn-id-18">
      <description> Evaluation of fn:id for which IDREF uses the fn:upper-case function. </description>
      <created by="Carmelo Montanez" on="2005-11-27"/>
      <environment ref="id-idref"/>
      <test>import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:id(fn:upper-case("id5"), /ids:IDS[1])</test>
      <result>
         <assert-xml><![CDATA[<elementwithid-6 xmlns = "http://www.w3.org/XQueryTest/ididrefs" xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance" anId="ID5"/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fn-id-19">
      <description> Evaluation of fn:id for which $arg uses the fn:concat function. </description>
      <created by="Carmelo Montanez" on="2005-11-27"/>
      <environment ref="id-idref"/>
      <test>import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:id(fn:concat("i","d1"), /ids:IDS[1])</test>
      <result>
         <assert-xml><![CDATA[<elementwithid-1 xmlns = "http://www.w3.org/XQueryTest/ididrefs" xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance" anId="id1"/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fn-id-20">
      <description> Evaluation of fn:id for which $arg uses the xs:string function. </description>
      <created by="Carmelo Montanez" on="2005-11-27"/>
      <environment ref="id-idref"/>
      <test>import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:id(xs:string("id1"), /ids:IDS[1])</test>
      <result>
         <assert-xml><![CDATA[<elementwithid-1 xmlns = "http://www.w3.org/XQueryTest/ididrefs" xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance" anId="id1"/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fn-id-21">
      <description> Evaluation of fn:id for which $arg uses the fn:string-join function. </description>
      <created by="Carmelo Montanez" on="2005-11-27"/>
      <environment ref="id-idref"/>
      <test>import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:id(fn:string-join(("id","1"),""), /ids:IDS[1])</test>
      <result>
         <assert-xml><![CDATA[<elementwithid-1 xmlns = "http://www.w3.org/XQueryTest/ididrefs" xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance" anId="id1"/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fn-id-23">
      <description> Evaluation of fn:id together with declare ordering. </description>
      <created by="Carmelo Montanez" on="2005-11-27"/>
      <environment ref="id-idref"/>
      <test>declare ordering ordered; import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:id("id1 id2", /ids:IDS[1])</test>
      <result>
         <assert-xml><![CDATA[<elementwithid-1 xmlns = "http://www.w3.org/XQueryTest/ididrefs" xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance" anId="id1"/><elementwithid-2 xmlns = "http://www.w3.org/XQueryTest/ididrefs" xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance" anId="id2"/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fn-idref-5">
      <description> Evaluation of fn:idref with given ID matching a single element. </description>
      <created by="Carmelo Montanez" on="2006-02-10"/>
      <environment ref="id-idref"/>
      <test>import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:idref("id1",/ids:IDS[1])</test>
      <result>
         <assert-xml><![CDATA[<elementwithidref-1 xmlns = "http://www.w3.org/XQueryTest/ididrefs" xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance">id1</elementwithidref-1>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fn-idref-6">
      <description> Evaluation of fn:idref with given ID not matching a single element. Uses fn:count to avoid empty file. </description>
      <created by="Carmelo Montanez" on="2006-02-10"/>
      <environment ref="id-idref"/>
      <test>import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:count(fn:idref("nomatchingid", /ids:IDS[1]))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-idref-7">
      <description> Evaluation of fn:idref with given ID matching multiple elements. </description>
      <created by="Carmelo Montanez" on="2006-02-10"/>
      <environment ref="id-idref"/>
      <test>import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:idref("id4", /ids:IDS[1])</test>
      <result>
         <assert-xml><![CDATA[<elementwithidref-4 xmlns = "http://www.w3.org/XQueryTest/ididrefs" xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance">id4</elementwithidref-4><elementwithidref-6 xmlns = "http://www.w3.org/XQueryTest/ididrefs" xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance">id4</elementwithidref-6>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fn-idref-8">
      <description> Evaluation of fn:idref with multiple ID matching multiple elements. </description>
      <created by="Carmelo Montanez" on="2006-02-10"/>
      <environment ref="id-idref"/>
      <test>import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:idref(("id1", "id2"), /ids:IDS[1])</test>
      <result>
         <assert-xml><![CDATA[<elementwithidref-1 xmlns = "http://www.w3.org/XQueryTest/ididrefs" xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance">id1</elementwithidref-1><elementwithidref-2 xmlns = "http://www.w3.org/XQueryTest/ididrefs" xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance">id2</elementwithidref-2>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fn-idref-9">
      <description> Evaluation of fn:idref with multiple ID, but only one matching one element. </description>
      <created by="Carmelo Montanez" on="2006-02-10"/>
      <environment ref="id-idref"/>
      <test>import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:idref(("id1", "nomatching"), /ids:IDS[1])</test>
      <result>
         <assert-xml><![CDATA[<elementwithidref-1 xmlns = "http://www.w3.org/XQueryTest/ididrefs" xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance">id1</elementwithidref-1>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fn-idref-10">
      <description> Evaluation of fn:idref with multiple ID, but none matching one element. Uses fn:count to avoid empty file. </description>
      <created by="Carmelo Montanez" on="2006-02-10"/>
      <environment ref="id-idref"/>
      <test>import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:count(fn:idref("nomatching1 nomatching2", /ids:IDS[1]))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-idref-11">
      <description> Evaluation of fn:idref with ID set to empty string. Uses fn:count to avoid empty file. </description>
      <created by="Carmelo Montanez" on="2006-02-10"/>
      <environment ref="id-idref"/>
      <test>import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:count(fn:idref("", /ids:IDS[1]))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-idref-12">
      <description> Evaluation of fn:idref used as ar argument to function fn:node-name() </description>
      <created by="Carmelo Montanez" on="2006-02-10"/>
      <environment ref="id-idref"/>
      <test>import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:node-name(fn:idref("id2", /ids:IDS[1]))</test>
      <result>
         <assert-string-value>elementwithidref-2</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-idref-13">
      <description> Evaluation of fn:idref used as part of a node expression ("is" operand). Compare same elements. </description>
      <created by="Carmelo Montanez" on="2006-02-10"/>
      <environment ref="id-idref"/>
      <test>import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; (fn:idref("id1", /ids:IDS[1])) is (fn:idref("id1", /ids:IDS[1]))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fn-idref-14">
      <description> Evaluation of fn:idref used as part of a node expression ("is" operand). Compare different elements. </description>
      <created by="Carmelo Montanez" on="2006-02-10"/>
      <environment ref="id-idref"/>
      <test>import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; (fn:idref("id1", /ids:IDS[1])) is (fn:idref("id2", /ids:IDS[1]))</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fn-idref-15">
      <description> Evaluation of fn:idref for which ID list have the same value for all its members. </description>
      <created by="Carmelo Montanez" on="2006-02-10"/>
      <environment ref="id-idref"/>
      <test>import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:idref(("id1","id1"), /ids:IDS[1])</test>
      <result>
         <assert-xml><![CDATA[<elementwithidref-1 xmlns = "http://www.w3.org/XQueryTest/ididrefs" xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance">id1</elementwithidref-1>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fn-idref-16">
      <description> Evaluation of fn:idref for which ID list have the same value for all its members but different case. </description>
      <created by="Carmelo Montanez" on="2006-02-10"/>
      <environment ref="id-idref"/>
      <test>import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:idref(("id1","ID1"), /ids:IDS[1])</test>
      <result>
         <assert-xml><![CDATA[<elementwithidref-1 xmlns = "http://www.w3.org/XQueryTest/ididrefs" xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance">id1</elementwithidref-1>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fn-idref-17">
      <description> Evaluation of fn:idref for which ID uses the fn lower case function. </description>
      <created by="Carmelo Montanez" on="2006-02-10"/>
      <environment ref="id-idref"/>
      <test>import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:idref(fn:lower-case("ID1"), /ids:IDS[1])</test>
      <result>
         <assert-xml><![CDATA[<elementwithidref-1 xmlns = "http://www.w3.org/XQueryTest/ididrefs" xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance">id1</elementwithidref-1>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fn-idref-18">
      <description> Evaluation of fn:idref for which ID uses the fn:upper-case function. </description>
      <created by="Carmelo Montanez" on="2006-02-10"/>
      <environment ref="id-idref"/>
      <test>import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:idref(fn:upper-case("id5"), /ids:IDS[1])</test>
      <result>
         <assert-xml><![CDATA[<elementwithidref-5 xmlns = "http://www.w3.org/XQueryTest/ididrefs" xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance">ID5</elementwithidref-5>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fn-idref-19">
      <description> Evaluation of fn:idref for which $arg uses the fn:concat function. </description>
      <created by="Carmelo Montanez" on="2006-02-10"/>
      <environment ref="id-idref"/>
      <test>import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:idref(fn:concat("i","d1"), /ids:IDS[1])</test>
      <result>
         <assert-xml><![CDATA[<elementwithidref-1 xmlns = "http://www.w3.org/XQueryTest/ididrefs" xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance">id1</elementwithidref-1>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fn-idref-20">
      <description> Evaluation of fn:idref for which $arg uses the xs:string function. </description>
      <created by="Carmelo Montanez" on="2006-02-10"/>
      <environment ref="id-idref"/>
      <test>import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:idref(xs:string("id1"), /ids:IDS[1])</test>
      <result>
         <assert-xml><![CDATA[<elementwithidref-1 xmlns = "http://www.w3.org/XQueryTest/ididrefs" xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance">id1</elementwithidref-1>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fn-idref-21">
      <description> Evaluation of fn:idref for which $arg uses the fn:string-join function. </description>
      <created by="Carmelo Montanez" on="2006-02-10"/>
      <environment ref="id-idref"/>
      <test>import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; fn:idref(fn:string-join(("id","1"),""), /ids:IDS[1])</test>
      <result>
         <assert-xml><![CDATA[<elementwithidref-1 xmlns = "http://www.w3.org/XQueryTest/ididrefs" xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance">id1</elementwithidref-1>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fn-idref-23">
      <description> Evaluation of fn:idref with declare ordering. </description>
      <created by="Carmelo Montanez" on="2006-03-14"/>
      <environment ref="id-idref"/>
      <test>
        declare ordering ordered; 
        import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; 
        fn:idref("id4", /ids:IDS[1])
      </test>
      <result>
         <assert-xml><![CDATA[<elementwithidref-4 xmlns = "http://www.w3.org/XQueryTest/ididrefs" xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance">id4</elementwithidref-4><elementwithidref-6 xmlns = "http://www.w3.org/XQueryTest/ididrefs" xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance">id4</elementwithidref-6>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fn-idref-30">
      <description> Evaluation of fn:idref with various types derived from IDREF or IDREFS. </description>
      <created by="Michael Kay" on="2009-03-06"/>
      <environment ref="id-idref3"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; 
        <out xmlns="http://www.w3.org/XQueryTest/ididrefs" 
            xmlns:i="http://www.w3.org/XQueryTest/ididrefs" 
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">{ 
            for $z in tokenize("alpha beta gamma delta epsilon zeta eta theta iota kappa lambda mu", "\s") 
            return element {$z} {idref($z, (/))[self::attribute()], idref($z, (/))[self::element()]} }
        </out>
      ]]></test>
      <result>
         <assert-xml><![CDATA[<out xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:i="http://www.w3.org/XQueryTest/ididrefs" xmlns="http://www.w3.org/XQueryTest/ididrefs"><alpha i:IDREF-Union="gamma 976 delta alpha"><IDREF-List>epsilon mu alpha</IDREF-List><IDREF-List-content>epsilon mu alpha</IDREF-List-content></alpha><beta i:Restricted-IDREF="beta"><List-of-Restricted-IDREF>lambda beta iota</List-of-Restricted-IDREF><List-of-Restricted-IDREF-content>lambda beta iota</List-of-Restricted-IDREF-content></beta><gamma i:IDREF-Union="gamma 976 delta alpha"><IDREFS>gamma kappa</IDREFS><IDREFS-content>gamma kappa</IDREFS-content></gamma><delta i:IDREFS="delta eta" i:IDREF-Union="gamma 976 delta alpha"><IDREF-Union>eta 234 delta</IDREF-Union><IDREF-Union-content>eta 234 delta</IDREF-Union-content></delta><epsilon i:IDREF="epsilon"><IDREF-List>epsilon mu alpha</IDREF-List><IDREF-List-content>epsilon mu alpha</IDREF-List-content></epsilon><zeta i:IDREF-List="zeta iota"><IDREF>zeta</IDREF><IDREF-content>zeta</IDREF-content></zeta><eta i:IDREFS="delta eta"><IDREF-Union>eta 234 delta</IDREF-Union><IDREF-Union-content>eta 234 delta</IDREF-Union-content></eta><theta/><iota i:IDREF-List="zeta iota"><Restricted-IDREF>iota</Restricted-IDREF><List-of-Restricted-IDREF>lambda beta iota</List-of-Restricted-IDREF><Restricted-IDREF-content>iota</Restricted-IDREF-content><List-of-Restricted-IDREF-content>lambda beta iota</List-of-Restricted-IDREF-content></iota><kappa i:List-of-Restricted-IDREF="lambda kappa"><IDREFS>gamma kappa</IDREFS><IDREFS-content>gamma kappa</IDREFS-content></kappa><lambda i:List-of-Restricted-IDREF="lambda kappa"><List-of-Restricted-IDREF>lambda beta iota</List-of-Restricted-IDREF><List-of-Restricted-IDREF-content>lambda beta iota</List-of-Restricted-IDREF-content></lambda><mu><IDREF-List>epsilon mu alpha</IDREF-List><IDREF-List-content>epsilon mu alpha</IDREF-List-content></mu></out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fn-idref-31">
      <description> Evaluation of fn:idref with various types derived from IDREF or IDREFS. tests Erratum E29 - use of a list-valued element/attribute as input to idref() </description>
      <created by="Michael Kay" on="2009-03-06"/>
      <environment ref="id-idref3"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        import schema namespace ids="http://www.w3.org/XQueryTest/ididrefs"; 
        <out xmlns="http://www.w3.org/XQueryTest/ididrefs" 
            xmlns:i="http://www.w3.org/XQueryTest/ididrefs" 
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">{ 
            for $z in (//i:IDREFS-content, //i:IDREF-List-content, //i:W/@i:Restricted-IDREF) 
            for $s in distinct-values(tokenize(normalize-space(string($z)), '\s')) 
            order by $s 
            return <e val="{$s}"> {idref($s, (/))[self::attribute()], idref($s, (/))[self::element()]} </e> }
        </out>
      ]]></test>
      <result>
         <assert-xml><![CDATA[<out xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:i="http://www.w3.org/XQueryTest/ididrefs" xmlns="http://www.w3.org/XQueryTest/ididrefs"><e val="alpha" i:IDREF-Union="gamma 976 delta alpha"><IDREF-List>epsilon mu alpha</IDREF-List><IDREF-List-content>epsilon mu alpha</IDREF-List-content></e><e val="beta" i:Restricted-IDREF="beta"><List-of-Restricted-IDREF>lambda beta iota</List-of-Restricted-IDREF><List-of-Restricted-IDREF-content>lambda beta iota</List-of-Restricted-IDREF-content></e><e val="epsilon" i:IDREF="epsilon"><IDREF-List>epsilon mu alpha</IDREF-List><IDREF-List-content>epsilon mu alpha</IDREF-List-content></e><e val="gamma" i:IDREF-Union="gamma 976 delta alpha"><IDREFS>gamma kappa</IDREFS><IDREFS-content>gamma kappa</IDREFS-content></e><e val="kappa" i:List-of-Restricted-IDREF="lambda kappa"><IDREFS>gamma kappa</IDREFS><IDREFS-content>gamma kappa</IDREFS-content></e><e val="mu"><IDREF-List>epsilon mu alpha</IDREF-List><IDREF-List-content>epsilon mu alpha</IDREF-List-content></e></out>]]></assert-xml>
      </result>
   </test-case>


</test-set>