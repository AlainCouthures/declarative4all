<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="misc-CombinedErrorCodes">
   <description>Tests for the CombinedErrorCodes operator</description>
   <link type="spec" document="http://www.w3.org/TR/xpath-functions-30/"
         idref="func-CombinedErrorCodes"/>
   <link type="spec" document="XQuery" section-number="5.2.5" idref="id-module-feature"/>
   
   <dependency type="spec" value="XQ10+"/>

    <environment name="orderdata">
      <source role="." file="../prod/OrderByClause/orderData.xml" validation="strict">
         <description>A Schema validated xml file, that contains values for some of the order by tests generated by NIST.</description>
         <created by="Carmelo Montanez" on="2005-06-01"/>
      </source>
      <schema uri="http://www.w3.org/XQueryTestOrderBy" file="../prod/OrderByClause/orderData.xsd">
         <description>A Schema for orderData.xml</description>
         <created by="Carmelo Montanez" on="2005-06-01"/>
      </schema>
   </environment>
   
   <environment name="namespace-sensitive" >
        <schema uri="http://www.xqsharp.com/test/namespace-sensitive" file="CombinedErrorCodes/namespace-sensitive.xsd">
            <description></description>
            <created by="Tim Mills" on="2008-01-01"/>
        </schema>
        <source role="." validation="strict" file="CombinedErrorCodes/namespace-sensitive.xml">
         	<description></description>
         	<created by="Tim Mills" on="2008-01-01"/>
        </source>
   </environment>  

   <!-- deleted. Having an invalid schema here is testing the test driver, not the XQuery implementation.
        And the error code seems to have disappeared in XQuery 3.0
   <environment name="xqst0012">
      <schema uri="http://www.example.org/2007/schema/XQST0012" file="CombinedErrorCodes/XQST0012.xsd">
	    <description>A schema used to test XQST0012.</description>
	    <created by="Tim Mills" on="2008-05-16"/>
      </schema>
   </environment>-->

    <environment name="xqst0036">
      <schema uri="http://www.example.org/2007/schema/XQST0036" file="CombinedErrorCodes/XQST0036.xsd">
	<description>A schema used to test XQST0036.</description>
	<created by="Tim Mills" on="2008-05-16"/>
      </schema>
   </environment>

    <environment name="foty0012">
      <schema uri="http://www.example.org/2007/schema/FOTY0012" file="CombinedErrorCodes/FOTY0012.xsd">
	<description>A schema used to test FOTY0012.</description>
	<created by="Tim Mills" on="2008-05-16"/>
      </schema>
   </environment>

    <environment name="xqdy0027">
      <schema uri="http://www.example.org/2007/schema/XQDY0027" file="CombinedErrorCodes/XQDY0027.xsd">
	<description>A schema used to test XQDY0027.</description>
	<created by="Tim Mills" on="2008-05-16"/>
      </schema>
   </environment>

    <environment name="xqdy0084">
      <schema uri="http://www.example.org/2007/schema/XQDY0084" file="CombinedErrorCodes/XQDY0084.xsd">
	<description>A schema used to test XQDY0084.</description>
	<created by="Tim Mills" on="2008-05-16"/>
      </schema>
   </environment>

   <test-case name="combined-errors-1">
      <description> Evaluates simple module import to generate error code if feature not supported. </description>
      <created by="Carmelo Montanez" on="2006-06-06"/>
      <module uri="http://www.w3.org/TestModules/defs" file="CombinedErrorCodes/moduleDefs-lib.xq"/>
      <module uri="http://www.w3.org/TestModules/test1" file="CombinedErrorCodes/test1-lib.xq"/>
      <test>import module namespace defs="http://www.w3.org/TestModules/defs"; "ABC"</test>
      <result>
         <any-of>
            <assert-string-value>ABC</assert-string-value>
            <error code="XQST0016"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="combined-errors-2">
      <description> Simple evaluation to test for import schema support. </description>
      <created by="Carmelo Montanez" on="2006-06-06"/>
      <modified by="O'Neil Delpratt" on="2011-09-06" change="add environment for schema"/>
      <environment ref="atomic" />
      <test>import schema namespace atomic="http://www.w3.org/XQueryTest"; "ABC"</test>
      <result>
         <any-of>
            <assert-string-value>ABC</assert-string-value>
            <error code="XQST0009"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="combined-errors-3">
      <description> Evaluates simple Schema Validation feature to generate error code if feature not supported. </description>
      <created by="Carmelo Montanez" on="2006-06-06"/>
      <modified by="O'Neil Delpratt" on="2011-09-06" change="add environment for schema"/>
      <modified by="O'Neil Delpratt" on="2011-10-14" change="dependency moved after enironment tag. Bug #14461"/>
      <environment ref="orderdata"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare default element namespace "http://www.w3.org/XQueryTestOrderBy"; 
        import schema "http://www.w3.org/XQueryTestOrderBy"; 
        validate strict {<Strings><orderData>one string</orderData></Strings>}]]></test>
      <result>
         <any-of>
            <assert-xml><![CDATA[<Strings xmlns="http://www.w3.org/XQueryTestOrderBy"><orderData>one string</orderData></Strings>]]></assert-xml>
            <error code="XQST0075"/>
            <error code="XQST0009"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="combined-errors-4">
      <description> Evaluates simple full axis feature (preceding axis) to generate error code if feature not supported. </description>
      <created by="Carmelo Montanez" on="2006-06-06"/>
      <environment ref="works-mod"/>
      <test>/works[1]/employee[2]/preceding::employee</test>
      <result>
         <any-of>
            <assert-xml><![CDATA[<employee name="Jane Doe 1" gender="female">
   <empnum>E1</empnum>
   <pnum>P1</pnum>
   <hours>40</hours>
  </employee>]]></assert-xml>
            <error code="XPST0010"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K-CombinedErrorCodes-1">
      <description> Schema import binding to no namespace, and no location hint. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>import schema "http://example.com/NSNOTRECOGNIZED"; 1 eq 1</test>
      <result>
         <any-of>
            <error code="XQST0009"/>
            <error code="XQST0059"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K-CombinedErrorCodes-2">
      <description> Schema import binding to no namespace, but has a location hint. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>import schema "http://example.com/NSNOTRECOGNIZED" at "http://example.com/DOESNOTEXIST"; 1 eq 1</test>
      <result>
         <any-of>
            <error code="XQST0009"/>
            <error code="XQST0059"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K-CombinedErrorCodes-3">
      <description> Schema import binding to no namespace, but has three location hints. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>import schema "http://example.com/NSNOTRECOGNIZED" at "http://example.com/DOESNOTEXIST", "http://example.com/2", "http://example.com/3"; 1 eq 1</test>
      <result>
         <any-of>
            <error code="XQST0009"/>
            <error code="XQST0059"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K-CombinedErrorCodes-4">
      <description> Schema import binding to no namespace, but has three location hints. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>import schema "http://example.com/NSNOTRECOGNIZED" at "http://example.com/DOESNOTEXIST", "http://example.com/2", "http://example.com/3"; 1 eq 1</test>
      <result>
         <any-of>
            <error code="XQST0009"/>
            <error code="XQST0059"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K-CombinedErrorCodes-5">
      <description> Schema import binding to a namespace, and has three location hints. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>import schema namespace prefix = "http://example.com/NSNOTRECOGNIZED" at "http://example.com/DOESNOTEXIST", "http://example.com/2DOESNOTEXIST", "http://example.com/3DOESNOTEXIST"; 1 eq 1</test>
      <result>
         <any-of>
            <error code="XQST0009"/>
            <error code="XQST0059"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K-CombinedErrorCodes-6">
      <description> Schema import binding to the default element namespace, and has three location hints. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>import schema default element namespace "http://example.com/NSNOTRECOGNIZED" at "http://example.com/DOESNOTEXIST", "http://example.com/2DOESNOTEXIST", "http://example.com/3DOESNOTEXIST"; 1 eq 1</test>
      <result>
         <any-of>
            <error code="XQST0009"/>
            <error code="XQST0059"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K-CombinedErrorCodes-7">
      <description> ':=' cannot be used to assing namespaces in 'import schema'. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>import schema namespace NCName := "http://example.com/Dummy"; 1</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="K-CombinedErrorCodes-9">
      <description> A 'validate' expression with an invalid operand. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>validate { 1 }</test>
      <result>
         <any-of>
            <error code="XQTY0030"/>
            <error code="XQST0075"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K-CombinedErrorCodes-10">
      <description> A 'validate' expression with an invalid operand. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>validate { () }</test>
      <result>
         <any-of>
            <error code="XQTY0030"/>
            <error code="XQST0075"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K-CombinedErrorCodes-11">
      <description> A 'validate' expression with an invalid operand. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>validate lax { 1 }</test>
      <result>
         <any-of>
            <error code="XQTY0030"/>
            <error code="XQST0075"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K-CombinedErrorCodes-12">
      <description> A 'validate' expression with an invalid operand. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>validate strict { 1 }</test>
      <result>
         <any-of>
            <error code="XQTY0030"/>
            <error code="XQST0075"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K-CombinedErrorCodes-13">
      <description> A 'validate' expression with an invalid operand. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>validate lax { }</test>
      <result>
         <any-of>
            <error code="XPST0003"/>
            <error code="XQST0075"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K-CombinedErrorCodes-14">
      <description> A 'validate' expression with an invalid operand. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>validate strict { }</test>
      <result>
         <any-of>
            <error code="XPST0003"/>
            <error code="XQST0075"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K-CombinedErrorCodes-15">
      <description> A 'validate' expression with an invalid operand. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>validate { }</test>
      <result>
         <any-of>
            <error code="XPST0003"/>
            <error code="XQST0075"/>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="FOAR0001_1">
      <description> check that decimal division by zero throws FOAR0001 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>1.0 div 0.0</test>
      <result>
         <error code="FOAR0001"/>
      </result>
   </test-case>
   

   <test-case name="FOAR0001_2">
      <description> check that integer division by zero throws FOAR0001 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>1 div 0</test>
      <result>
         <error code="FOAR0001"/>
      </result>
   </test-case>
   

   <test-case name="FOAR0001_3">
      <description> check that double integer division by zero throws FOAR0001 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>1.0e0 idiv 0.0e0</test>
      <result>
         <error code="FOAR0001"/>
      </result>
   </test-case>
   

   <test-case name="FOAR0001_4">
      <description> check that float integer division by zero throws FOAR0001 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>xs:float(1.0e0) idiv xs:float(0.0e0)</test>
      <result>
         <error code="FOAR0001"/>
      </result>
   </test-case>
   

   <test-case name="FOAR0001_5">
      <description> check that decimal integer division by zero throws FOAR0001 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>1.0 idiv 0.0</test>
      <result>
         <error code="FOAR0001"/>
      </result>
   </test-case>
   

   <test-case name="FOAR0001_6">
      <description> check that integer integer division by zero throws FOAR0001 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>1 div 0</test>
      <result>
         <error code="FOAR0001"/>
      </result>
   </test-case>
   

   <test-case name="FOAR0001_7">
      <description> check that integer mod ivision by zero throws FOAR0001 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>1 mod 0</test>
      <result>
         <error code="FOAR0001"/>
      </result>
   </test-case>
   

   <test-case name="FOAR0001_8">
      <description> check that decimal mod by zero throws FOAR0001 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>1.0 mod 0.0</test>
      <result>
         <error code="FOAR0001"/>
      </result>
   </test-case>
   

   <test-case name="FOAR0001_9">
      <description> check that yearMonthDuration div by zero throws FOAR0001 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>xs:yearMonthDuration('P1Y2M') div xs:yearMonthDuration('P0Y0M')</test>
      <result>
         <error code="FOAR0001"/>
      </result>
   </test-case>
   

   <test-case name="FOAR0002_1">
      <description> check that underflow/overflow throws FOAR0002 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <modified by="Michael Kay" on="2012-12-20" change="The specification also allows INF"/>
      <test>2e308</test>
      <result>
        <any-of>
           <error code="FOAR0002"/>
           <assert-string-value>INF</assert-string-value>
        </any-of>
      </result>
   </test-case>
   

   <test-case name="FOAR0002_3">
      <description> Evaluates The "op:numeric-integer-divide" operator for error condition. </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>(0 div 0E0) idiv xs:integer(2)</test>
      <result>
         <error code="FOAR0002"/>
      </result>
   </test-case>
   

   <test-case name="FOAR0002_4">
      <description> Evaluates The "op:numeric-integer-divide" operator for error condition. </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>xs:double('INF') idiv xs:integer(2)</test>
      <result>
         <error code="FOAR0002"/>
      </result>
   </test-case>
   

   <test-case name="FOAR0002-5">
      <description> check that duration functions throw FOAR0002 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <modified by="O'Neil Delpratt" on="2013-05-02" change="Added error code FODT0002. See bug issue #21900" />
      <test>xs:dayTimeDuration('P5999999999999999999DT00H00M01S') div xs:dayTimeDuration('P0DT00H00M0.000001S')</test>
      <result>
         <any-of>
            <error code="FOAR0002"/>
            <error code="FODT0002"/>
         </any-of>
      </result>
   </test-case>
   

   <test-case name="FOCA0001_1">
      <description> check that values too large for decimal throws FOCA0001 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <modified by="Michael Kay" on="2012-12-20" change="success is also allowed!"/>
      <test>xs:decimal(1e308)</test>
      <result>
         <any-of>
           <error code="FOCA0001"/>
           <all-of>
             <assert-type>xs:decimal</assert-type>
             <!-- allow for the fact that the xs:double is approximate -->
             <assert>string-length(string($result)) = (308, 309)</assert>
             <assert>starts-with(string($result), '1000000000') or starts-with(string($result), '999999999')</assert>
           </all-of>  
         </any-of>
      </result>
   </test-case>
   

   <test-case name="FOCA0002_1">
      <description> check that invalid lexical values throw FOCA0001 </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <test>xs:float('INF') cast as xs:integer</test>
      <result>
         <error code="FOCA0002"/>
      </result>
   </test-case>
   

   <test-case name="FOCA0002_2">
      <description> check that invalid lexical values throw FOCA0002 </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <test>QName("http://www.w3.org/", "1")</test>
      <result>
         <error code="FOCA0002"/>
      </result>
   </test-case>
   

   <test-case name="FOCA0002_3">
      <description> check that invalid lexical values throw FOCA0002 </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <test>QName("", "prefix:localName")</test>
      <result>
         <error code="FOCA0002"/>
      </result>
   </test-case>
   

   <test-case name="FOCA0002_4">
      <description> check that invalid lexical values throw FOCA0002 </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <test>QName("http://www.w3.org/", "1prefix:localName")</test>
      <result>
         <error code="FOCA0002"/>
      </result>
   </test-case>
   

   <test-case name="FOCA0002_5">
      <description> check that invalid lexical values throw FOCA0002 </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <test>QName("http://www.w3.org/", "prefix:2localName")</test>
      <result>
         <error code="FOCA0002"/>
      </result>
   </test-case>
   

   <test-case name="FOCA0002_6">
      <description> check that invalid lexical values throw FOCA0002 </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <test>QName("", "2localName")</test>
      <result>
         <error code="FOCA0002"/>
      </result>
   </test-case>
   

   <test-case name="FOCA0002_7">
      <description> check that invalid lexical values throw FOCA0002 </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[resolve-QName("2localName", <localName />)]]></test>
      <result>
         <error code="FOCA0002"/>
      </result>
   </test-case>
   

   <test-case name="FOCA0002_8">
      <description> check that invalid lexical values throw FOCA0002 </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[resolve-QName("1prefix:localName", <localName />)]]></test>
      <result>
         <error code="FOCA0002"/>
      </result>
   </test-case>
   

   <test-case name="FOCA0002_9">
      <description> check that invalid lexical values throw FOCA0002 </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[resolve-QName("2localName", <localName />)]]></test>
      <result>
         <error code="FOCA0002"/>
      </result>
   </test-case>
   

   <test-case name="FOCA0003_1">
      <description> check that large integers throw FOCA0003 </description>
      <created by="Tim Mills" on="2008-05-16"/>     
      <modified by="Michael Kay" on="2012-12-20" change="success is also allowed"/>      
      <test>xs:integer(xs:double(1e308))</test>
      <result>
         <any-of>
           <error code="FOCA0003"/>
           <all-of>
             <assert-type>xs:integer</assert-type>
             <!-- allow for the fact that the xs:double is approximate -->
             <assert>string-length(string($result)) = (308, 309)</assert>
             <assert>starts-with(string($result), '1000000000') or starts-with(string($result), '999999999')</assert>
           </all-of>
         </any-of>  
      </result>
   </test-case>
   

   <test-case name="FOCA0005_1">
      <description> check that using NaN throws FOCA0005 </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <test>xs:dayTimeDuration('P3DT10H30M') div xs:double('NaN')</test>
      <result>
         <error code="FOCA0005"/>
      </result>
   </test-case>
   

   <test-case name="FOCA0005_2">
      <description> check that using NaN throws FOCA0005 </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <test>xs:dayTimeDuration('P3DT10H30M') * xs:double('NaN')</test>
      <result>
         <error code="FOCA0005"/>
      </result>
   </test-case>
   

   <test-case name="FOCA0005_3">
      <description> check that using NaN throws FOCA0005 </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <test>xs:dayTimeDuration('P3DT10H30M') div xs:double('NaN')</test>
      <result>
         <error code="FOCA0005"/>
      </result>
   </test-case>
   

   <test-case name="FOCA0005_4">
      <description> check that using NaN throws FOCA0005 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <test>xs:dayTimeDuration('P3DT10H30M') * xs:double('NaN')</test>
      <result>
         <error code="FOCA0005"/>
      </result>
   </test-case>
   
   
   <test-case name="FOCH0001">
      <description> check that invalid codepoints throw FOCH0001 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>codepoints-to-string(0)</test>
      <result>
         <error code="FOCH0001"/>
      </result>
   </test-case>
   

   <test-case name="FOCH0002_1">
      <description> check that invalid collations throw FOCH0002 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>compare('a', 'b', 'http://www.cbcl.co.u,/collation')</test>
      <result>
         <error code="FOCH0002"/>
      </result>
   </test-case>
   

   <test-case name="FOCH0002_10">
      <description> check that invalid collations throw FOCH0002 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>substring-before('a', 'b', 'http://www.cbcl.co.u,/collation')</test>
      <result>
         <error code="FOCH0002"/>
      </result>
   </test-case>
   

   <test-case name="FOCH0002_2">
      <description> check that invalid collations throw FOCH0002 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>deep-equal('a', 'b', 'http://www.cbcl.co.u,/collation')</test>
      <result>
         <error code="FOCH0002"/>
      </result>
   </test-case>
   

   <test-case name="FOCH0002_3">
      <description> check that invalid collations throw FOCH0002 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>distinct-values(('a', 'b'), 'http://www.cbcl.co.u,/collation')</test>
      <result>
         <error code="FOCH0002"/>
      </result>
   </test-case>
   

   <test-case name="FOCH0002_4">
      <description> check that invalid collations throw FOCH0002 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>ends-with('a', 'b', 'http://www.cbcl.co.u,/collation')</test>
      <result>
         <error code="FOCH0002"/>
      </result>
   </test-case>
   

   <test-case name="FOCH0002_5">
      <description> check that invalid collations throw FOCH0002 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>index-of('a', 'b', 'http://www.cbcl.co.u,/collation')</test>
      <result>
         <error code="FOCH0002"/>
      </result>
   </test-case>
   

   <test-case name="FOCH0002_6">
      <description> check that invalid collations throw FOCH0002 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>max(('a', 'b'), 'http://www.cbcl.co.u,/collation')</test>
      <result>
         <error code="FOCH0002"/>
      </result>
   </test-case>
   

   <test-case name="FOCH0002_7">
      <description> check that invalid collations throw FOCH0002 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>min(('a', 'b'), 'http://www.cbcl.co.u,/collation')</test>
      <result>
         <error code="FOCH0002"/>
      </result>
   </test-case>
   

   <test-case name="FOCH0002_8">
      <description> check that invalid collations throw FOCH0002 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>starts-with('a', 'b', 'http://www.cbcl.co.u,/collation')</test>
      <result>
         <error code="FOCH0002"/>
      </result>
   </test-case>
   

   <test-case name="FOCH0002_9">
      <description> check that invalid collations throw FOCH0002 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>substring-after('a', 'b', 'http://www.cbcl.co.u,/collation')</test>
      <result>
         <error code="FOCH0002"/>
      </result>
   </test-case>
   
   
   <test-case name="FODC0001_1">
      <description> check that fn:id throws FOAR0001 </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[fn:id('id', <a />)]]></test>
      <result>
         <error code="FODC0001"/>
      </result>
   </test-case>
   

   <test-case name="FODC0001_2">
      <description> check that fn:idref throws FOAR0001 </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<a />/fn:idref('id')]]></test>
      <result>
         <error code="FODC0001"/>
      </result>
   </test-case>
   

   <test-case name="FODC0002_1">
      <description> check that fn:doc throws FOAR0002 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>doc('http://www.example.org/notFound.xml')</test>
      <result>
         <error code="FODC0002"/>
      </result>
   </test-case>
   

   <test-case name="FODC0002_2">
      <description> check that fn:doc throws FOAR0002 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>doc('http://www.example.org/notFound.xml')</test>
      <result>
         <error code="FODC0002"/>
      </result>
   </test-case>
   

   <test-case name="FODC0002_3">
      <description> check that fn:doc throws FOAR0002 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>doc('http://www.example.org/notFound.xml')</test>
      <result>
         <error code="FODC0002"/>
      </result>
   </test-case>
   

   <test-case name="FODC0002_4">
      <description> check that fn:collection() throws FODC0002 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>collection()</test>
      <result>
         <error code="FODC0002"/>
      </result>
   </test-case>
   

   <test-case name="FODC0004">
      <description> check that fn:collection throws FODC0004 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>collection('%gg')</test>
      <result>
         <error code="FODC0004"/>
      </result>
   </test-case>
   

   <test-case name="FODC0005-1">
      <description> check that fn:doc throws FODC0005 </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <test>doc('%gg')</test>
      <result>
         <error code="FODC0005"/>
      </result>
   </test-case>
   

   <test-case name="FODC0005-2">
      <description> check that fn:doc-available throws FODC0005 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <modified by="Michael Kay" on="2012-12-20" change="returning false is also acceptable"/>      
      <test>doc-available('%gg')</test>
      <result>
         <any-of>
           <error code="FODC0005"/>
           <assert-false/>
         </any-of>
      </result>
   </test-case>
   
   
   <test-case name="FODT0001-1">
      <description> check that date/time functions throw FODT0001 </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <test>adjust-dateTime-to-timezone( xs:dateTime("25252734927766555-07-28T23:59:59-14:00"), xs:dayTimeDuration("PT14H"))</test>
      <result>
         <error code="FODT0001"/>
      </result>
   </test-case>
   

   <test-case name="FODT0001-10">
      <description> check that date/time operators throw FODT0001 </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <test>xs:date("25252734927766555-07-28-14:00") - xs:yearMonthDuration("-P1Y0M")</test>
      <result>
         <error code="FODT0001"/>
      </result>
   </test-case>
   

   <test-case name="FODT0001-11">
      <description> check that date/time operators throw FODT0001 </description>
      <created by="Tim Mills" on="2008-05-16"/>     
      <test>xs:date("25252734927766555-07-28-14:00") - xs:date("-25252734927766555-07-28-14:00")</test>
      <result>
         <error code="FODT0001"/>
      </result>
   </test-case>
   

   <test-case name="FODT0001-12">
      <description> check that date/time operators throw FODT0001 </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <test>xs:dateTime("25252734927766555-07-28T23:59:59-14:00") - xs:dateTime("-25252734927766555-07-28T23:59:59-14:00")</test>
      <result>
         <error code="FODT0001"/>
      </result>
   </test-case>
   

   <test-case name="FODT0001-2">
      <description> check that date/time functions throw FODT0001 </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <test>adjust-date-to-timezone( xs:date("25252734927766555-07-28-14:00"), xs:dayTimeDuration("PT14H"))</test>
      <result>
         <error code="FODT0001"/>
      </result>
   </test-case>
   

   <test-case name="FODT0001-3">
      <description> check that date/time operators throw FODT0001 </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <test>xs:dateTime("25252734927766555-07-28T23:59:59-14:00") + xs:dayTimeDuration("PT14H")</test>
      <result>
         <error code="FODT0001"/>
      </result>
   </test-case>
   

   <test-case name="FODT0001-4">
      <description> check that date/time operators throw FODT0001 </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <test>xs:date("25252734927766555-07-28-14:00") + xs:dayTimeDuration("PT24H")</test>
      <result>
         <error code="FODT0001"/>
      </result>
   </test-case>
   

   <test-case name="FODT0001-5">
      <description> check that date/time operators throw FODT0001 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>xs:dateTime("25252734927766555-07-28T23:59:59-14:00") - xs:dayTimeDuration("-PT14H")</test>
      <result>
         <error code="FODT0001"/>
      </result>
   </test-case>
   

   <test-case name="FODT0001-6">
      <description> check that date/time operators throw FODT0001 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>xs:date("25252734927766555-07-28-14:00") - xs:dayTimeDuration("-PT24H")</test>
      <result>
         <error code="FODT0001"/>
      </result>
   </test-case>
   

   <test-case name="FODT0001-7">
      <description> check that date/time operators throw FODT0001 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>xs:dateTime("25252734927766555-07-28T23:59:59-14:00") + xs:yearMonthDuration("P1Y0M")</test>
      <result>
         <error code="FODT0001"/>
      </result>
   </test-case>
   

   <test-case name="FODT0001-8">
      <description> check that date/time operators throw FODT0001 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>xs:date("25252734927766555-07-28-14:00") + xs:yearMonthDuration("P1Y0M")</test>
      <result>
         <error code="FODT0001"/>
      </result>
   </test-case>
   

   <test-case name="FODT0001-9">
      <description> check that date/time operators throw FODT0001 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>xs:dateTime("25252734927766555-07-28T23:59:59-14:00") - xs:yearMonthDuration("-P1Y0M")</test>
      <result>
         <error code="FODT0001"/>
      </result>
   </test-case>
   

   <test-case name="FODT0002-1">
      <description> check that duration functions throw FODT0002 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>xs:dayTimeDuration('P5999999999999999999DT00H00M01S') + xs:dayTimeDuration('P4999999999999999999DT00H00M01S')</test>
      <result>
         <error code="FODT0002"/>
      </result>
   </test-case>
   

   <test-case name="FODT0002-2">
      <description> check that duration functions throw FODT0002 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>xs:dayTimeDuration('P5999999999999999999DT00H00M01S') * 2</test>
      <result>
         <error code="FODT0002"/>
      </result>
   </test-case>
   

   <test-case name="FODT0002-3">
      <description> check that duration functions throw FODT0002 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>xs:dayTimeDuration('P5999999999999999999DT00H00M01S') div 0.5</test>
      <result>
         <error code="FODT0002"/>
      </result>
   </test-case>
   

   <test-case name="FODT0002-4">
      <description> check that duration functions throw FODT0002 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>xs:dayTimeDuration('P5999999999999999999DT00H00M01S') - xs:dayTimeDuration('-P5999999999999999999DT00H00M01S')</test>
      <result>
         <error code="FODT0002"/>
      </result>
   </test-case>
   

   <test-case name="FODT0002-6">
      <description> check that duration functions throw FODT0002 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>xs:yearMonthDuration('P768614336404564650Y0M') + xs:yearMonthDuration('P768614336404564650Y1M')</test>
      <result>
         <error code="FODT0002"/>
      </result>
   </test-case>
   

   <test-case name="FODT0002-7">
      <description> check that duration functions throw FODT0002 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>xs:yearMonthDuration('P768614336404564650Y0M') * 2</test>
      <result>
         <error code="FODT0002"/>
      </result>
   </test-case>
   

   <test-case name="FODT0002-8">
      <description> check that duration functions throw FODT0002 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>xs:yearMonthDuration('P768614336404564650Y0M') div 0.5</test>
      <result>
         <error code="FODT0002"/>
      </result>
   </test-case>
   

   <test-case name="FODT0002-9">
      <description> check that duration functions throw FODT0002 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>xs:yearMonthDuration('P768614336404564650Y0M') - xs:yearMonthDuration('-P768614336404564650Y0M')</test>
      <result>
         <error code="FODT0002"/>
      </result>
   </test-case>
   

   <test-case name="FODT0003-1">
      <description> check that bad timezones throw FODT0003 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>adjust-date-to-timezone( xs:date("2001-07-28-14:00"), xs:dayTimeDuration("PT15H"))</test>
      <result>
         <error code="FODT0003"/>
      </result>
   </test-case>
   

   <test-case name="FODT0003-2">
      <description> check that bad timezones throw FODT0003 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>adjust-date-to-timezone( xs:date("2001-07-28-14:00"), xs:dayTimeDuration("-PT15H"))</test>
      <result>
         <error code="FODT0003"/>
      </result>
   </test-case>
   
   
   <test-case name="FOER0000">
      <description> check that fn:error() throws FOER0000 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>error()</test>
      <result>
         <error code="FOER0000"/>
      </result>
   </test-case>
   
   
   <test-case name="FONS0004-1">
      <description> check that missing prefix throws FONS0004 </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[resolve-QName('prefix:localName', <element />)]]></test>
      <result>
         <error code="FONS0004"/>
      </result>
   </test-case>
   

   <test-case name="FONS0004-2">
      <description> check that missing prefix throws FONS0004 </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <test>xs:QName('prefix:localName')</test>
      <result>
         <error code="FONS0004"/>
      </result>
   </test-case>
   
   
   <test-case name="FORG0001">
      <description> check that invalid construction throws FORG0001 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>xs:integer('INF')</test>
      <result>
         <error code="FORG0001"/>
      </result>
   </test-case>
   

   <test-case name="FORG0002">
      <description> check that resolve-uri throws FORG0002 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>declare base-uri "http://www.w3.org/"; resolve-uri("%gg")</test>
      <result>
         <error code="FORG0002"/>
      </result>
   </test-case>
   

   <test-case name="FORG0003">
      <description> check that zero-or-one throws FORG0003 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>zero-or-one( (1, 2, 3) )</test>
      <result>
         <error code="FORG0003"/>
      </result>
   </test-case>
   

   <test-case name="FORG0004">
      <description> check that one-or-more throws FORG0004 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>one-or-more( () )</test>
      <result>
         <error code="FORG0004"/>
      </result>
   </test-case>
   

   <test-case name="FORG0005">
      <description> check that exactly-one throws FORG0005 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>exactly-one( () )</test>
      <result>
         <error code="FORG0005"/>
      </result>
   </test-case>
   

   <test-case name="FORG0006_01">
      <description> check that exactly-one throws FORG0005 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>fn:boolean( xs:date('2007-01-01') )</test>
      <result>
         <any-of>
            <error code="FORG0006"/>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>
   

   <test-case name="FORG0006_02">
      <description> check that fn:avg throws FORG0006-2 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>fn:avg( (xs:yearMonthDuration('P1Y0M'), 1) )</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>
   

   <test-case name="FORG0006_03">
      <description> check that fn:min throws FORG0006-3 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>fn:min( (xs:yearMonthDuration('P1Y0M'), 1) )</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>
   

   <test-case name="FORG0006_04">
      <description> check that fn:max throws FORG0006-3 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>fn:max( (xs:yearMonthDuration('P1Y0M'), 1) )</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>
   

   <test-case name="FORG0006_05">
      <description> check that fn:sum throws FORG0006 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>fn:sum( (xs:yearMonthDuration('P1Y0M'), 1) )</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>
   

   <test-case name="FORG0008">
      <description> check that fn:dateTime can throw FORG0008 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>dateTime(xs:date('2001-01-01-14:00'), xs:time('01:01:01+14:00'))</test>
      <result>
         <error code="FORG0008"/>
      </result>
   </test-case>
   

   <test-case name="FORG0009">
      <description> check resolution against a relative URI </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>resolve-uri('../../', '../../')</test>
      <result>
         <error code="FORG0002"/>
      </result>
   </test-case>
   
   
   <test-case name="FOTY0012">
      <description> Tests generating FOTY0012 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <environment ref="foty0012" />
      <dependency type="spec" value="XQ10+"/>
      <dependency type="feature" value="schemaImport"/>
      <test><![CDATA[import schema namespace foo = "http://www.example.org/2007/schema/FOTY0012"; data(validate strict { <foo:element /> } )]]></test>
      <result>
         <error code="FOTY0012"/>
      </result>
   </test-case>
   
   
   <test-case name="XPDY0002_01">
      <description> check that unassigned context item is reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>.</test>
      <result>
         <error code="XPDY0002"/>
      </result>
   </test-case>
   

   <test-case name="XPDY0002_02">
      <description> check that unassigned context item is reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>declare variable $variable external; $variable</test>
      <result>
         <error code="XPDY0002"/>
      </result>
   </test-case>
   

   <test-case name="XPDY0050">
      <description> check that treat as errors are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>1 treat as node()</test>
      <result>
         <error code="XPDY0050"/>
      </result>
   </test-case>
   
   
   <test-case name="XPTY0004_01">
      <description> test type checking of attribute names </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>attribute { 1 } { 1 }</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0018">
      <description> check that last step of path expressions are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[(<a/>, <b/>)/(if (position() mod 2 = 1) then position() else .)]]></test>
      <result>
         <error code="XPTY0018"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0019_1">
      <description> check that bad steps are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<a/>/1/node()]]></test>
      <result>
         <error code="XPTY0019"/>
      </result>
   </test-case>   

   <test-case name="XPTY0019_2">
      <description> test bad run-time conversions </description>
      <created by="Tim Mills" on="2008-05-16"/>     
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace foo = "http://www.example.org"; declare function foo:something() { (<a />, 1, <b/>, 2) }; foo:something()/a]]></test>
      <result>
         <error code="XPTY0019"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0019_3">
      <description> test bad run-time conversions </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace foo = "http://www.example.org"; declare function foo:something($pos as xs:integer) { if ($pos eq 1) then 1 else <a /> }; let $x := <a><b><c/></b><b><c/></b></a> return $x/b/(foo:something(position()))/a]]></test>
      <result>
         <error code="XPTY0019"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_02">
      <description> test type checking of element names </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>element { 1 } { }</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_03">
      <description> test bad casts </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>() cast as xs:integer</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_04">
      <description> test bad casts </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>(1, 2) cast as xs:integer</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_05">
      <description> test bad 'as' clauses </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>let $x as node() := 1 return $x</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_06">
      <description> test bad 'as' clauses </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>for $x as node() in (1, 2, 3) return $x</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_07">
      <description> test bad document constructions </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>document { attribute {'foo'} {} }</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_08">
      <description> test bad document constructions </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace foo = "http://www.example.org"; declare function foo:content($type as xs:integer) { if ($type eq 1) then attribute {'foo'} {} else <foo /> }; document { foo:content(1) }]]></test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_09">
      <description> test bad order-by comparisons </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <test>for $x in (1, 'hello', xs:date('2007-11-28')) order by $x return $x</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_10">
      <description> test type checking of function calls </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>fn:upper-case(1)</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_11">
      <description> test type checking of function calls </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>fn:tokenize('foo', () )</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_12">
      <description> test type checking of function calls </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>fn:error( () )</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_13">
      <description> test type checking of binary operators </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>"string" eq 1</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_14">
      <description> test type checking of binary operators </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>"string" ne 1</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_15">
      <description> test type checking of binary operators </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>"string" le 1</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_16">
      <description> test type checking of binary operators </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>"string" gt 1</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_17">
      <description> test type checking of binary operators </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>"string" ge 1</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_18">
      <description> test type checking of binary operators </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>"string" ne 1</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_19">
      <description> test type checking of binary operators </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA["string" << 1]]></test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_20">
      <description> test type checking of binary operators </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <test>"string" &gt;&gt; 1</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_21">
      <description> test type checking of binary operators </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>"string" is 1</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_22">
      <description> test type checking of binary operators </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>"string" div 1</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_23">
      <description> test type checking of binary operators </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>"string" idiv 1</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_24">
      <description> test type checking of binary operators </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>"string" * 1</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_25">
      <description> test type checking of binary operators </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>"string" mod 1</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_26">
      <description> test type checking of binary operators </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>"string" - 1</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_27">
      <description> test type checking of binary operators </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>"string" + 1</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_28">
      <description> test bad run-time conversions </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>      
      <test>declare namespace foo = "http://www.example.org"; declare function foo:something($type as xs:integer) { if ($type eq 1) then xs:date('2007-11-28') else 1.0 }; abs(foo:something(1))</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_29">
      <description> test bad run-time conversions </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>     
      <test>declare namespace foo = "http://www.example.org"; declare function foo:something($type as xs:integer) { if ($type eq 1) then xs:date('2007-11-28') else 'foo' }; element { foo:something(1) } { }</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_30">
      <description> test bad run-time conversions </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>     
      <test>declare namespace foo = "http://www.example.org"; declare function foo:something($type as xs:integer) { if ($type eq 1) then xs:date('2007-11-28') else 'foo' }; processing-instruction { foo:something(1) } { }</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_31">
      <description> test bad run-time conversions </description>
      <created by="Tim Mills" on="2008-05-16"/>     
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace foo = "http://www.example.org"; declare function foo:something($type as xs:integer) { if ($type eq 1) then xs:date('2007-11-28') else 'foo' }; <e> { attribute { foo:something(1) } { } } </e>]]></test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_32">
      <description> test bad run-time conversions </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>     
      <test>declare namespace foo = "http://www.example.org"; declare function foo:something($type as xs:integer) { if ($type eq 1) then ('foo', xs:date('2007-11-28'), 'foo') else 'foo' }; let $x as xs:string* := foo:something(1) return $x</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_33">
      <description> test bad run-time conversions </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>      
      <test>declare namespace foo = "http://www.example.org"; declare function foo:something($type as xs:integer) { if ($type eq 1) then xs:date('2007-11-28') else 'foo' }; for $x as xs:string in foo:something(1) return $x</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_34">
      <description> test bad run-time conversions </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>      
      <test>declare namespace foo = "http://www.example.org"; declare function foo:something($type) as xs:integer { $type }; foo:something('foo')</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_35">
      <description> test bad run-time conversions </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>      
      <test>declare namespace foo = "http://www.example.org"; declare function foo:something($type as xs:integer) as xs:integer { if ($type eq 1) then xs:date('2007-11-28') else $type }; foo:something(1)</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_37">
      <description> test bad unary functions </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>-xs:date('2007-11-29')</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_38">
      <description> test bad unary functions </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>      
      <test>declare namespace foo = "http://www.example.org"; declare function foo:something($pos as xs:integer) { if ($pos eq 1) then 1 else xs:date('2007-11-29') }; -foo:something(2)</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_39">
      <description> test bad unary functions </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>      
      <test>declare namespace foo = "http://www.example.org"; declare function foo:something($pos as xs:integer) { if ($pos eq 1) then 1 else xs:date('2007-11-29') }; +foo:something(2)</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_40">
      <description> test bad unary functions </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>+xs:date('2007-11-29')</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_41">
      <description> test bad input to fn:boolean. Error differs depending on type checking mode </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>fn:boolean( (1, 2) )</test>
      <result>
         <any-of>
            <error code="XPTY0004"/>
            <error code="FORG0006"/>
         </any-of>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_42">
      <description> test bad input to fn:string-length </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>fn:string-length(xs:date('2007-11-29'))</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_43">
      <description> test bad input to fn:string-length </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>xs:date(1)</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_44">
      <description> test bad input to fn:string-length </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>1 cast as xs:date</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_45">
      <description> test bad casts </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <dependency type="spec" value="XP10 XQ10"/>
      <test>concat('prefix:', 'localname') cast as xs:QName</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_46">
      <description> test runtime cardinality checks </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <test>(1, 2) + 1</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_47">
      <description> test runtime cardinality checks </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare variable $a := <e><a/><b/><a/></e>; <a>{$a/a eq 1}</a>]]></test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   

   <test-case name="XPTY0004_48">
      <description> test runtime cardinality checks </description>
      <created by="Tim Mills" on="2008-05-16"/>     
      <test>let $i := (1, 3, 2) order by $i return $i</test>
      <result>
         <any-of>
            <assert-string-value>1 3 2</assert-string-value>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>
   

   <test-case name="XPTY0020">
      <description> check that bad context item types are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>     
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<a/>/20[text()]]]></test>
      <result>
         <error code="XPTY0020"/>
      </result>
   </test-case>
   
   
   <test-case name="XQDY0025_1">
      <description> check that attributes clashes are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>     
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $attr1 := attribute attr { 'foo' } return let $attr2 := attribute attr { 'bar' } return <a>{$attr1, $attr2 }</a>]]></test>
      <result>
         <error code="XQDY0025"/>
      </result>
   </test-case>
   

   <test-case name="XQDY0025_2">
      <description> check that attributes clashes are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace prefix = "http://www/w3.org/"; let $attr1 := attribute prefix:attr { 'foo' } return let $attr2 := attribute prefix:attr { 'bar' } return <a>{$attr1, $attr2 }</a>]]></test>
      <result>
         <error code="XQDY0025"/>
      </result>
   </test-case>
   

   <test-case name="XQDY0025_3">
      <description> check that attributes clashes are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace prefix = "http://www/w3.org/"; let $attr1 := attribute attr { 'foo' } return let $attr2 := attribute attr { 'bar' } return <prefix:a>{$attr1, $attr2 }</prefix:a>]]></test>
      <result>
         <error code="XQDY0025"/>
      </result>
   </test-case>
   

   <test-case name="XQDY0025_4">
      <description> check that attributes clashes are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace prefix = "http://www/w3.org/"; let $attr1 := attribute prefix:attr { 'foo' } return let $attr2 := attribute prefix:attr { 'bar' } return <prefix:a>{$attr1, $attr2 }</prefix:a>]]></test>
      <result>
         <error code="XQDY0025"/>
      </result>
   </test-case>
   

   <test-case name="XQDY0026">
      <description> check that bad processing instruction content is reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>     
      <test>processing-instruction target { '?&gt;' }</test>
      <result>
         <error code="XQDY0026"/>
      </result>
   </test-case>
   

   <test-case name="XQDY0027">
      <description> Test generating XQDY0027 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <environment ref="xqdy0027" />
      <dependency type="spec" value="XQ10+"/>
      <dependency type="feature" value="schemaImport"/>
      <test><![CDATA[declare construction preserve; declare copy-namespaces no-preserve,inherit; import schema namespace foo = "http://www.example.org/2007/schema/XQDY0027"; let $x := validate strict { <foo:element attr="foo:notation">foo:qname</foo:element> } return <a>{$x}</a>]]></test>
      <result>
         <error code="XQDY0027"/>
      </result>
   </test-case>
   

   <test-case name="XQDY0041">
      <description> check that bad processing instruction targets reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>     
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<a> { processing-instruction { '1BadName' } { 'content' } } </a>]]></test>
      <result>
         <error code="XQDY0041"/>
      </result>
   </test-case>
   

   <test-case name="XQDY0044_1">
      <description> check that bad attribute names are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>     
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<a> { attribute { 'xmlns' } { 'http://www.w3.org/' } } </a>]]></test>
      <result>
         <error code="XQDY0044"/>
      </result>
   </test-case>
   

   <test-case name="XQDY0061">
      <description> check that bad validate expressions are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <modified by="Tim Mills" on="2013-01-04" change="Added dependency on schema validation"/>
      <dependency type="feature" value="schemaValidation"/>
      <test>validate lax { document {'hello'} }</test>
      <result>
         <error code="XQDY0061"/>
      </result>
   </test-case>
   

   <test-case name="XQDY0064">
      <description> check that bad processing instructions are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<a> { processing-instruction { 'xml' } { 'content' } } </a>]]></test>
      <result>
         <error code="XQDY0064"/>
      </result>
   </test-case>
   

   <test-case name="XQDY0072">
      <description> check that bad comments are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>     
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<a> { comment { ' -- ' } } </a>]]></test>
      <result>
         <error code="XQDY0072"/>
      </result>
   </test-case>
   

   <test-case name="XQDY0074_1">
      <description> check that bad qualified names are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<a> { element { 'prefix:localName' } { } } </a>]]></test>
      <result>
         <error code="XQDY0074"/>
      </result>
   </test-case>
   

   <test-case name="XQDY0074_2">
      <description> check that bad qualified names are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<a> { attribute { 'prefix:localName' } { } } </a>]]></test>
      <result>
         <error code="XQDY0074"/>
      </result>
   </test-case>
   

   <test-case name="XQDY0074_3">
      <description> check that bad qualified names are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<a> { element { '1localName' } { } } </a>]]></test>
      <result>
         <error code="XQDY0074"/>
      </result>
   </test-case>
   

   <test-case name="XQDY0074_4">
      <description> check that bad qualified names are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>    
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<a> { attribute { '1localName' } { } } </a>]]></test>
      <result>
         <error code="XQDY0074"/>
      </result>
   </test-case>
   

   <test-case name="XQDY0084">
      <description> check that strict validate errors are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <environment ref="xqdy0084" />
      <dependency type="spec" value="XQ10+"/>
      <dependency type="feature" value="schemaImport"/>
      <test><![CDATA[import schema namespace foo = "http://www.example.org/2007/schema/XQDY0084"; validate strict { <foo:a /> }]]></test>
      <result>
         <error code="XQDY0084"/>
      </result>
   </test-case>
   

   <test-case name="XQDY0091">
      <description> check that bad xml:id attributes are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <modified by="Michael Kay" on="2012-12-20" change="The spec makes reporting of this error optional"/>      
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<e xml:id=" ab c d "/>]]></test>
      <result>
         <any-of>
           <error code="XQDY0091"/>
           <assert-xml><![CDATA[<e xml:id="ab c d"/>]]></assert-xml>
         </any-of>  
      </result>
   </test-case>
   

   <test-case name="XQDY0092">
      <description> check construction of xml:space attribute with a value other than preserve or default. </description>
      <created by="Tim Mills" on="2008-05-16"/>     
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<a xml:space="space"/>]]></test>
      <result>
	<any-of>
	  <error code="XQDY0092"/>
	  <assert-xml>&lt;a xml:space="space"/&gt;</assert-xml>
	</any-of>
      </result>
   </test-case>
   

   <!-- Deleted, as we don't expect the test driver to handle invalid schemas 
   <test-case name="XQST0012">
      <description> Test generating XQTS0012 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <environment ref="xqst0012" />
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[import schema namespace foo = "http://www.example.org/2007/schema/XQST0012"; data(<foo:element />)]]></test>
      <result>
         <error code="XQST0012"/>
      </result>
   </test-case>-->
   

   <test-case name="XQST0022_1">
      <description> check that bad context item types are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<a xmlns="{1}" />]]></test>
      <result>
         <error code="XQST0022"/>
      </result>
   </test-case>
   

   <test-case name="XQST0022_2">
      <description> check that bad context item types are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<a xmlns:prefix="{1}" />]]></test>
      <result>
         <error code="XQST0022"/>
      </result>
   </test-case>
   

   <test-case name="XQST0031">
      <description> check that invalid encodings are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>xquery version '2.0'; 1+2</test>
      <result>
         <error code="XQST0031"/>
      </result>
   </test-case>
   

   <test-case name="XQST0032">
      <description> check that invalid prolog declarations are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>declare base-uri "http://www.example.org/A"; declare base-uri "http://www.example.org/B"; 1 + 2</test>
      <result>
         <error code="XQST0032"/>
      </result>
   </test-case>
   

   <test-case name="XQST0033">
      <description> check that invalid namespace declarations are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>declare namespace cheddar = 'http://www.example.org/cheddar'; declare namespace cheddar = 'http://www.example.org/cheddar'; 1 + 2</test>
      <result>
         <error code="XQST0033"/>
      </result>
   </test-case>
   

   <test-case name="XQST0034">
      <description> check that function name clashes are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>     
      <test>declare namespace prefix = "http://www.example.org/"; declare function prefix:foo() { 1 }; declare function prefix:foo() { 1 }; 1</test>
      <result>
         <error code="XQST0034"/>
      </result>
   </test-case>
   

   <test-case name="XQST0036_1">
      <description> Test generating XQST0036 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <modified by="Tim Mills" on="2012-11-06" change="XQ10 only. Bug 19880."/>
      <environment ref="xqst0036" />
      <module uri="http://www.example.org/2007/test" file="CombinedErrorCodes/XQST0036_lib1.xq"/>
      <dependency type="spec" value="XQ10"/>
      <dependency type="feature" value="moduleImport" satisfied="true"/>
      <dependency type="feature" value="schemaImport"/>
      <test>import module namespace test = "http://www.example.org/2007/test"; $test:test</test>
      <result>
         <error code="XQST0036"/>
      </result>
   </test-case>
   

   <test-case name="XQST0036_2">
      <description> Test generating XQST0036 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <modified by="Tim Mills" on="2012-11-06" change="XQ10 only. Bug 19880."/>
      <environment ref="xqst0036" />
      <module uri="http://www.example.org/2007/test" file="CombinedErrorCodes/XQST0036_lib2.xq"/>
      <dependency type="spec" value="XQ10"/>
      <dependency type="feature" value="moduleImport" satisfied="true"/>
      <dependency type="feature" value="schemaImport"/>
      <test>import module namespace test = "http://www.example.org/2007/test"; test:bool-to-uppercase(true())</test>
      <result>
         <error code="XQST0036"/>
      </result>
   </test-case>
   

   <test-case name="XQST0036_3">
      <description> Test generating XQST0036 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <modified by="Tim Mills" on="2012-11-06" change="XQ10 only. Bug 19880."/>
      <environment ref="xqst0036" />
      <module uri="http://www.example.org/2007/test" file="CombinedErrorCodes/XQST0036_lib3.xq"/>
      <dependency type="spec" value="XQ10"/>
      <dependency type="feature" value="moduleImport" satisfied="true"/>
      <dependency type="feature" value="schemaImport"/>
      <test>import module namespace test = "http://www.example.org/2007/test"; test:f()</test>
      <result>
         <error code="XQST0036"/>
      </result>
   </test-case>
   

   <test-case name="XQST0036_4">
      <description> Test generating XQST0036 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <modified by="Tim Mills" on="2012-11-06" change="XQ10 only. Bug 19880."/>
      <environment ref="xqst0036" />
      <module uri="http://www.example.org/2007/test" file="CombinedErrorCodes/XQST0036_lib4.xq"/>
      <dependency type="spec" value="XQ10"/>
      <dependency type="feature" value="moduleImport" satisfied="true"/>
      <dependency type="feature" value="schemaImport"/>
      <test>import module namespace test = "http://www.example.org/2007/test"; $test:i</test>
      <result>
         <error code="XQST0036"/>
      </result>
   </test-case>
   

   <test-case name="XQST0036_5">
      <description> Test generating XQST0036 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <modified by="Tim Mills" on="2012-11-06" change="XQ10 only. Bug 19880."/>
      <environment ref="xqst0036" />
      <module uri="http://www.example.org/2007/test" file="CombinedErrorCodes/XQST0036_lib5.xq"/>
      <dependency type="spec" value="XQ10"/>
      <dependency type="feature" value="moduleImport" satisfied="true"/>
      <dependency type="feature" value="schemaImport"/>
      <test>import module namespace test = "http://www.example.org/2007/test"; test:attrs()</test>
      <result>
         <error code="XQST0036"/>
      </result>
   </test-case>
   

   <test-case name="XQST0036_6">
      <description> Test generating XQST0036 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <modified by="Tim Mills" on="2012-11-06" change="XQ10 only. Bug 19880."/>
      <environment ref="xqst0036" />
      <module uri="http://www.example.org/2007/test" file="CombinedErrorCodes/XQST0036_lib6.xq"/>
      <dependency type="spec" value="XQ10"/>
      <dependency type="feature" value="moduleImport" satisfied="true"/>
      <dependency type="feature" value="schemaImport"/>
      <test>import module namespace test = "http://www.example.org/2007/test"; $test:none</test>
      <result>
         <error code="XQST0036"/>
      </result>
   </test-case>
   

   <test-case name="XQST0036_7">
      <description> Test generating XQST0036 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <modified by="Tim Mills" on="2012-11-06" change="XQ10 only. Bug 19880."/>
      <environment ref="xqst0036" />
      <module uri="http://www.example.org/2007/test" file="CombinedErrorCodes/XQST0036_lib7.xq"/>
      <dependency type="spec" value="XQ10"/>
      <dependency type="feature" value="moduleImport" satisfied="true"/>
      <dependency type="feature" value="schemaImport"/>
      <test>import module namespace test = "http://www.example.org/2007/test"; test:attrs()</test>
      <result>
         <error code="XQST0036"/>
      </result>
   </test-case>
   

   <test-case name="XQST0038_1">
      <description> check that invalid prolog declarations are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <test>declare default collation "http://www.w3.org/2005/xpath-functions/collation/codepoint"; declare default collation "http://www.w3.org/2005/xpath-functions/collation/codepoint"; 1 + 2</test>
      <result>
         <error code="XQST0038"/>
      </result>
   </test-case>
   

   <test-case name="XQST0038_3">
      <description> check that invalid prolog declarations are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>declare default collation "http://www.example.org/"; 1 + 2</test>
      <result>
         <error code="XQST0038"/>
      </result>
   </test-case>
   

   <test-case name="XQST0039">
      <description> check that bad function parameter declarations are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>      
      <test>declare namespace prefix = "http://www.w3.org/"; declare function prefix:foo($arg, $arg) { 1 }; 1 + 2</test>
      <result>
         <error code="XQST0039"/>
      </result>
   </test-case>
   

   <test-case name="XQST0040">
      <description> check that duplicate attributes are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<a attr="a" attr="a" />]]></test>
      <result>
         <error code="XQST0040"/>
      </result>
   </test-case>
   

   <test-case name="XQST0045-1">
      <description> check that bad function declarations are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>      
      <test>declare function foo() { 1 }; foo()</test>
      <result>
         <error code="XQST0045"/>
      </result>
   </test-case>
   

   <test-case name="XQST0045-2">
      <description> check that bad function declarations are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>      
      <test>declare function xml:foo() { 1 }; xml:foo()</test>
      <result>
         <error code="XQST0045"/>
      </result>
   </test-case>
   

   <test-case name="XQST0045-3">
      <description> check that bad function declarations are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>     
      <test>declare function xs:foo() { 1 }; xs:foo()</test>
      <result>
         <error code="XQST0045"/>
      </result>
   </test-case>
   

   <test-case name="XQST0045-4">
      <description> check that bad function declarations are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>     
      <test>declare function xsi:foo() { 1 }; xsi:foo()</test>
      <result>
         <error code="XQST0045"/>
      </result>
   </test-case>
   

   <test-case name="XQST0046_01">
      <description> check that bad namespace declarations are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <modified by="Tim Mills" on="2011-11-06" change="Also accept XQST0046"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[base-uri(<a xml:base="%gg" />)]]></test>
      <result>
	<any-of>
	  <error code="XQST0046"/>
	  <error code="FORG0001"/>
	  <assert-string-value>%gg</assert-string-value>
	</any-of>
      </result>
   </test-case>
   

   <test-case name="XQST0046_02">
      <description> check that bad namespace declarations are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <modified by="Tim Mills" on="2011-11-06" change="Resolved Bug 19868"/>
      <modified by="Tim Mills" on="2013-03-11" change="Resolved Bug 19868"/>
      <module uri="http://www.example.org/test" file="CombinedErrorCodes/XQST0046_lib.xq"/>
      <dependency type="feature" value="moduleImport" satisfied="true"/>
      <test>import module "http://www.example.org/test"; true()</test>
      <result>
	<any-of>
	  <error code="XQST0046"/>
	  <error code="XQST0059"/>
	</any-of>
      </result>
   </test-case>
   

   <test-case name="XQST0046_03">
      <description> check that bad namespace declarations are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <modified by="Tim Mills" on="2011-11-06" change="Resolved Bug 19868"/>
      <test>declare namespace foo = "%gg"; true()</test>
      <result>
	<any-of>
	  <error code="XQST0046"/>
	  <assert-true />
	</any-of>
      </result>
   </test-case>
   

   <test-case name="XQST0046_04">
      <description> check that bad namespace declarations are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <modified by="Tim Mills" on="2011-11-06" change="Resolved Bug 19868"/>
      <test>declare default element namespace "%gg"; true()</test>
      <result>
	<any-of>
	  <error code="XQST0046"/>
	  <assert-true />
	</any-of>
      </result>
   </test-case>
   

   <test-case name="XQST0046_05">
      <description> check that bad namespace declarations are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <modified by="Tim Mills" on="2011-11-06" change="Resolved Bug 19868"/>
      <test>declare default function namespace "%gg"; fn:true()</test>
      <result>
	<any-of>
	  <error code="XQST0046"/>
	  <assert-true />
	</any-of>
      </result>
   </test-case>
   

   <test-case name="XQST0046_06">
      <description> check that bad namespace declarations are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <modified by="Tim Mills" on="2011-11-06" change="Resolved Bug 19868"/>
      <test>declare default collation "%gg"; fn:true()</test>
      <result>
	<any-of>
	  <!-- %gg is not a valid URI -->
	  <error code="XQST0046"/>
	  <!-- %gg is not known a statically known collation -->
	  <error code="XQST0038"/>
	  <!-- %gg is a statically known collation (unlikely) -->
	  <assert-true />
	</any-of>
      </result>
   </test-case>
   

   <test-case name="XQST0046_07">
      <description> check that bad namespace declarations are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <modified by="Tim Mills" on="2011-11-06" change="Resolved Bug 19868"/>
      <test>declare base-uri "%gg"; true()</test>
      <result>
	<any-of>
	  <error code="XQST0046"/>
	  <assert-true />
	</any-of>
      </result>
   </test-case>
   

   <test-case name="XQST0046_08">
      <description> check that bad namespace declarations are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <test>import schema "%gg" at "http://www.w3.org/"; 1</test>
      <result>
         <error code="XQST0046"/>
      </result>
   </test-case>
   

   <test-case name="XQST0046_09">
      <description> check that bad namespace declarations are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <module uri="http://www.example.org/test" file="CombinedErrorCodes/XQST0046_lib.xq"/>
      <test>import schema "http://www.w3.org/" at "%gg"; 1</test>
      <result>
	<any-of>
	  <error code="XQST0046"/>
	  <error code="XQST0059"/>
	</any-of>
      </result>
   </test-case>
   

   <test-case name="XQST0046_10">
      <description> check that bad namespace declarations are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <modified by="Tim Mills" on="2011-11-06" change="Resolved Bug 19868"/>
      <module uri="http://www.example.org/test" file="CombinedErrorCodes/XQST0046_lib.xq"/>
      <dependency type="feature" value="moduleImport" satisfied="true"/>
      <test>import module "%gg"; true()</test>
      <result>
	<any-of>
	  <error code="XQST0046"/>
	  <assert-true />
	</any-of>
      </result>
   </test-case>
   

   <test-case name="XQST0046_11">
      <description> check that bad namespace declarations are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <module uri="http://www.example.org/test" file="CombinedErrorCodes/XQST0046_lib.xq"/>
      <dependency type="feature" value="moduleImport" satisfied="true"/>
      <test>import module "http://www.w3.org/" at "%gg"; 1</test>
      <result>
	<any-of>
	  <error code="XQST0046"/>
	  <error code="XQST0059"/>
	</any-of>
      </result>
   </test-case>
   

   <test-case name="XQST0046_12">
      <description> check that invalid collation URIs are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <modified by="Tim Mills" on="2011-11-06" change="Resolved Bug 19868"/>
      <test>for $x in ("a", "a", "a") order by $x collation "%gg" return $x</test>
      <result>
	<any-of>
	  <!-- %gg is not a valid URI -->
	  <error code="XQST0046"/>
	  <!-- %gg is not known a statically known collation -->
	  <error code="XQST0038"/>
	  <!-- %gg is a statically known collation (unlikely) -->
	  <assert-string-value>aaa</assert-string-value>
	</any-of>
      </result>
   </test-case>
   

   <test-case name="XQST0046_13">
      <description> check that bad namespace declarations are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>     
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<a xmlns="%gg" />]]></test>
      <result>
         <error code="XQST0046"/>
      </result>
   </test-case>
   

   <test-case name="XQST0046_14">
      <description> check that bad namespace declarations are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>     
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<a xmlns:foo="%gg" />]]></test>
      <result>
         <error code="XQST0046"/>
      </result>
   </test-case>
   

   <test-case name="XQST0047">
      <description> check that bad module imports are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <module uri="http://www.example.org/foo" file="CombinedErrorCodes/XQST0047_lib.xq"/>
      <dependency type="feature" value="moduleImport" satisfied="true"/>
      <test>import module "http://www.example.org/foo"; import module "http://www.example.org/foo"; 1</test>
      <result>
         <error code="XQST0047"/>
      </result>
   </test-case>
   

   <test-case name="XQST0048">
      <description> check that bad declarations are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <module uri="http://www.example.org/foo" file="CombinedErrorCodes/XQST0048_lib.xq"/>
      <dependency type="feature" value="moduleImport" satisfied="true"/>
      <test>import module namespace foo = "http://www.example.org/foo"; 1</test>
      <result>
         <error code="XQST0048"/>
      </result>
   </test-case>
   

   <test-case name="XQST0049">
      <description> check that bad variable declarations are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>declare variable $foo external; declare variable $foo external; 1</test>
      <result>
         <error code="XQST0049"/>
      </result>
   </test-case>
   

   <test-case name="XQST0054" covers="module-cycles">
      <description> check that cyclic variable definitions are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <dependency type="spec" value="XQ10"/>     
      <test>declare namespace foo = "http://www.example.org/"; declare variable $a := foo:bar(); declare function foo:bar() { $a + 1 }; $a</test>
      <result>
         <error code="XQST0054"/>
      </result>
   </test-case>
   

   <test-case name="XQST0055" covers="module-cycles">
      <description> check that cyclic variable definitions are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>    
      <test>declare copy-namespaces preserve,inherit; declare copy-namespaces preserve,no-inherit; 1</test>
      <result>
         <error code="XQST0055"/>
      </result>
   </test-case>
   

   <test-case name="XQST0057">
      <description> check that bad schema imports are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>import schema namespace foo = "" at "http://www.w3.org/"; 1</test>
      <result>
         <error code="XQST0057"/>
      </result>
   </test-case>
   

   <test-case name="XQST0058">
      <description> check that bad schema imports are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <dependency type="feature" value="schemaImport"/>
     
      <test>import schema namespace foo = "http://www.w3.org/XQueryTest/testcases"; import schema namespace bar = "http://www.w3.org/XQueryTest/testcases"; 1</test>
      <result>
         <error code="XQST0058"/>
      </result>
   </test-case>
   

   <test-case name="XQST0059_1">
      <description> check that missing schema imports are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <dependency type="feature" value="schemaImport"/>
     <test>import schema namespace foo = "http://www.w3.org/" at "DoesNotExist.xsd"; 1</test>
      <result>
         <error code="XQST0059"/>
      </result>
   </test-case>
   

   <test-case name="XQST0059_2">
      <description> check that missing module imports are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <module uri="http://www.example.org" file="CombinedErrorCodes/XQST0059_lib.xq"/>
      <dependency type="feature" value="moduleImport" satisfied="true"/>
      <test>import module namespace foo = "http://www.w3.org/" at "DoesNotExist.xq"; 1</test>
      <result>
         <error code="XQST0059"/>
      </result>
   </test-case>
   

   <test-case name="XQST0059_3">
      <description> check that missing schema imports are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>     
      <dependency type="feature" value="schemaImport"/>
      <test>import schema namespace foo = "http://www.w3.org/"; 1</test>
      <result>
         <error code="XQST0059"/>
      </result>
   </test-case>
   

   <test-case name="XQST0059_4">
      <description> check that missing module imports are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <dependency type="feature" value="moduleImport" satisfied="true"/>
      <test>import module namespace foo = "http://www.w3.org/"; 1</test>
      <result>
         <error code="XQST0059"/>
      </result>
   </test-case>
   

   <test-case name="XQST0059_5">
      <description> Test generating XQST0059 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <module uri="http://www.example.org" file="CombinedErrorCodes/XQST0059_lib.xq"/>
      <dependency type="feature" value="moduleImport" satisfied="true"/>
      <test>import module namespace foo = "http://www.example.org/"; foo:bar()</test>
      <result>
         <error code="XQST0059"/>
      </result>
   </test-case>
   

   <test-case name="XQST0059_6">
      <description> Test generating XQST0059 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <dependency type="feature" value="schemaImport"/>
      
      <test>import schema namespace foo = "http://www.example.org/" at "XQST0059.xsd"; 1</test>
      <result>
         <error code="XQST0059"/>
      </result>
   </test-case>
   

   <test-case name="XQST0060">
      <description> check that bad context item types are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      
      <test>declare default function namespace ""; declare function foo() { 1 }; 1</test>
      <result>
         <error code="XQST0060"/>
      </result>
   </test-case>
   

   <test-case name="XQST0065">
      <description> check that bad context item types are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>declare ordering unordered; declare ordering ordered; 1</test>
      <result>
         <error code="XQST0065"/>
      </result>
   </test-case>
   

   <test-case name="XQST0066_1">
      <description> check that repeated element namespace declarations are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>declare default element namespace "http://www.w3.org/a"; declare default element namespace "http://www.w3.org/b"; 1</test>
      <result>
         <error code="XQST0066"/>
      </result>
   </test-case>
   

   <test-case name="XQST0066_3">
      <description> check that invalid prolog declarations are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>declare default function namespace "http://www.example.org/"; declare default function namespace "http://www.w3.org/2005/xpath-functions/collation/codepoint"; 1 + 2</test>
      <result>
         <error code="XQST0066"/>
      </result>
   </test-case>
   

   <test-case name="XQST0067">
      <description> check that duplicate declarations are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>declare construction strip; declare construction preserve; 1</test>
      <result>
         <error code="XQST0067"/>
      </result>
   </test-case>
   

   <test-case name="XQST0068">
      <description> check that duplicate declarations are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <modified by="Michael Dyck" on="2012-10-29" change="Add missing QueryBody"/>
      
      <test>declare boundary-space strip; declare boundary-space preserve; 1</test>
      <result>
         <error code="XQST0068"/>
      </result>
   </test-case>
   

   <test-case name="XQST0069">
      <description> check that duplicate declarations are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>declare default order empty least; declare default order empty greatest; 1</test>
      <result>
         <error code="XQST0069"/>
      </result>
   </test-case>
   

   <test-case name="XQST0070_1">
      <description> check that invalid prolog declarations are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>import schema namespace xml = "http://www.example.org/"; 1 + 2</test>
      <result>
         <error code="XQST0070"/>
      </result>
   </test-case>
   

   <test-case name="XQST0070_2">
      <description> check that invalid prolog declarations are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <dependency type="feature" value="moduleImport" satisfied="true"/>
      <test>import module namespace xml = "http://www.example.org/"; 1 + 2</test>
      <result>
         <error code="XQST0070"/>
      </result>
   </test-case>
   

   <test-case name="XQST0070_3">
      <description> check that invalid module declarations are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <module uri="http://www.example.org/foo" file="CombinedErrorCodes/XQST0070_lib.xq"/>
      <dependency type="feature" value="moduleImport" satisfied="true"/>
      <test>import module namespace xml = 'http://www.example.org/'; 1 + 2</test>
      <result>
         <error code="XQST0070"/>
      </result>
   </test-case>
   

   <test-case name="XQST0070_4">
      <description> check that invalid prolog declarations are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>declare namespace xml = "http://www.example.org/"; 1 + 2</test>
      <result>
         <error code="XQST0070"/>
      </result>
   </test-case>
   

   <test-case name="XQST0071_1">
      <description> check that duplicate namespaces are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<a xmlns:prefix="http://www.w3.org/" xmlns:prefix="http://www.w3.org/" />]]></test>
      <result>
         <error code="XQST0071"/>
      </result>
   </test-case>
   

   <test-case name="XQST0071_2">
      <description> check that duplicate namespaces are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<a xmlns="http://www.w3.org/" xmlns="http://www.w3.org/" />]]></test>
      <result>
         <error code="XQST0071"/>
      </result>
   </test-case>
   

   <test-case name="XQST0076">
      <description> check that invalid collations are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>for $x in ('a', 'b', 'c') order by $x collation 'http://www.w3.org/' return $x</test>
      <result>
         <error code="XQST0076"/>
      </result>
   </test-case>
   

   <test-case name="XQST0079">
      <description> check that unrecognised pragma is reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>declare namespace prefix = "http://www.w3.org/"; (# prefix:pragma #) { }</test>
      <result>
         <error code="XQST0079"/>
      </result>
   </test-case>
   

   <test-case name="XQST0085">
      <description> check that XML 1.1 namespace undeclarations are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <modified by="O'Neil Delpratt" on="2013-05-01" change="Added xml-version dependency. Relating to bug issue #21730" />
      <dependency type="spec" value="XQ10+"/>
      <dependency type="xml-version" value="1.1" />
      <test><![CDATA[<element xmlns:foo="http://www.w3.org/"> <element xmlns:foo="" /> </element>]]></test>
      <result>
         <error code="XQST0085"/>
      </result>
   </test-case>
   

   <test-case name="XQST0087">
      <description> check that invalid encodings are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>xquery version '1.0' encoding '_utf'; 1+2</test>
      <result>
         <error code="XQST0087"/>
      </result>
   </test-case>
   

   <test-case name="XQST0088_1">
      <description> check that invalid module imports are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <dependency type="feature" value="moduleImport" satisfied="true"/>
      <test>import module namespace cheese = ''; 1 + 2</test>
      <result>
         <error code="XQST0088"/>
      </result>
   </test-case>
   

   <test-case name="XQST0088_2">
      <description> check that invalid module declarations are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <module uri="http://www.example.org/test" file="CombinedErrorCodes/XQST0088_lib.xq"/>
      <dependency type="feature" value="moduleImport" satisfied="true"/>
      <test>import module "http://www.example.org/test"; 1</test>
      <result>
         <error code="XQST0088"/>
      </result>
   </test-case>
   

   <test-case name="XQST0089">
      <description> check that bad for/at expressions are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <test>for $x at $x in (1, 2, 3) return $x</test>
      <result>
         <error code="XQST0089"/>
      </result>
   </test-case>
   

   <test-case name="XQST0090">
      <description> check that bad character references are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<bad-character-reference>&#xa999999999999999a;</bad-character-reference>]]></test>
      <result>
         <error code="XQST0090"/>
      </result>
   </test-case>
   

   <test-case name="XQST0093" covers="module-cycles">
      <description> Test generating XQST0093 </description>
      <created by="Tim Mills" on="2008-05-16"/>
      <module uri="http://www.example.org/foo" file="CombinedErrorCodes/XQST0093_lib1.xq"/>
      <module uri="http://www.example.org/foo" file="CombinedErrorCodes/XQST0093_lib2.xq"/>
      <dependency type="spec" value="XQ10"/>
      <dependency type="feature" value="moduleImport" satisfied="true"/>
      <test>import module namespace foo="http://www.example.org/foo"; $foo:variable2</test>
      <result>
         <error code="XQST0093"/>
      </result>
   </test-case>
   
   <test-case name="XQST0093a" covers="module-cycles">
      <description> Test generating XQST0093 (no longer an error in XQuery 3.0)</description>
      <created by="Tim Mills" on="2008-05-16"/>
      <modified by="Michael Kay" on="2013-01-07" change="no longer an error in XQuery 3.0"/>
      <module uri="http://www.example.org/foo" file="CombinedErrorCodes/XQST0093_lib1.xq"/>
      <module uri="http://www.example.org/foo" file="CombinedErrorCodes/XQST0093_lib2.xq"/>
      <dependency type="spec" value="XQ30+"/>
      <dependency type="feature" value="moduleImport" satisfied="true"/>
      <test>
      	import module namespace foo="http://www.example.org/foo"; 
      	$foo:variable2
      </test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>
   

   <test-case name="XQTY0024_1">
      <description> check that bad element content is reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace prefix = "http://www.w3.org/"; <prefix:a> { <b />, attribute prefix:foo { 'bar' } } </prefix:a>]]></test>
      <result>
         <error code="XQTY0024"/>
      </result>
   </test-case>
   

   <test-case name="XQTY0024_2">
      <description> check that bad element content is reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace prefix = "http://www.w3.org/"; <prefix:a> { <b />, attribute foo { 'bar' } } </prefix:a>]]></test>
      <result>
         <error code="XQTY0024"/>
      </result>
   </test-case>
   

   <test-case name="XQTY0024_3">
      <description> check that bad element content is reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace prefix = "http://www.w3.org/"; <a> { <b />, attribute prefix:foo { 'bar' } } </a>]]></test>
      <result>
         <error code="XQTY0024"/>
      </result>
   </test-case>
   

   <test-case name="XQTY0024_4">
      <description> check that bad element content is reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>
      
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<a> { <b />, attribute foo { 'bar' } } </a>]]></test>
      <result>
         <error code="XQTY0024"/>
      </result>
   </test-case>
   

   <test-case name="XQTY0030">
      <description> check that validate type checks are reported correctly </description>
      <created by="Tim Mills" on="2008-05-16"/>      
      <modified by="Tim Mills" on="2013-01-04" change="Added dependency on schema validation"/>
      <dependency type="feature" value="schemaValidation"/>
      <test>validate strict { () }</test>
      <result>
         <error code="XQTY0030"/>
      </result>
   </test-case>
   

   <test-case name="XQTY0086_1">
      <description> Test generating XQTY0086 </description>
      <created by="Oliver Hallam" on="2009-08-06"/>
      <environment ref="namespace-sensitive"/>
      <dependency type="spec" value="XQ10"/>
      <test><![CDATA[
      	declare construction preserve; 
      	declare copy-namespaces no-preserve,inherit; 
      	declare namespace ns="http://www.xqsharp.com/test/namespace-sensitive"; 
      	<e>{.//ns:sensitive}</e>
      ]]></test>
      <result>
         <error code="XQTY0086"/>
      </result>
   </test-case>
   

   <test-case name="XQTY0086_2">
      <description> Test generating XQTY0086 </description>
      <created by="Oliver Hallam" on="2009-08-06"/>
      <environment ref="namespace-sensitive"/>
      <dependency type="spec" value="XQ10"/>
      <test><![CDATA[
      	declare construction preserve; 
      	declare namespace ns="http://www.xqsharp.com/test/namespace-sensitive"; 
      	<e>{.//ns:sensitive-attribute/@sensitive}</e>
      ]]></test>
      <result>
         <error code="XQTY0086"/>
      </result>
   </test-case>
   

   <test-case name="XQTY0086_3">
      <description> Test generating XQTY0086 </description>
      <created by="Oliver Hallam" on="2009-08-06"/>
      <environment ref="namespace-sensitive"/>
      <dependency type="spec" value="XQ10"/>
      <test><![CDATA[
      	declare construction preserve; 
      	declare copy-namespaces no-preserve,inherit; 
      	declare namespace ns="http://www.xqsharp.com/test/namespace-sensitive"; 
      	<e>{.//ns:sensitive-attribute}</e>
      ]]></test>
      <result>
         <error code="XQTY0086"/>
      </result>
   </test-case>         

   <test-case name="XQST0125_1" covers="inline-function">
      <description>It is a static error if an inline function expression is annotated as %public.</description>
      <created by="Tim Mills" on="2012-10-22"/>
      <dependency type="spec" value="XQ30+"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test><![CDATA[
        let $f := %public function($arg as xs:integer) as xs:integer 
                          { $arg + 1 }
        return $f(1)
      ]]></test>
      <result>
         <error code="XQST0125"/>
      </result>
   </test-case>
   
   <test-case name="XQST0125_2" covers="inline-function">
      <description>It is a static error if an inline function expression is annotated as %private.</description>
      <created by="Tim Mills" on="2012-10-22"/>
      <dependency type="spec" value="XQ30+"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test><![CDATA[
        let $f := %private function($arg as xs:integer) as xs:integer 
                           { $arg + 1 }
        return $f(1)
      ]]></test>
      <result>
         <error code="XQST0125"/>
      </result>
   </test-case>

</test-set>

