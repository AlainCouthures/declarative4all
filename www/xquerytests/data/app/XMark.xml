<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="app-XMark">
   <description>Tests for the EQName</description>


   <environment name="XMarkAuction">
      <source role="." file="XMark/XMarkAuction.xml">
         <description>The XMark auction data</description>
         <created by="Anonymous" on="2000-01-01"/>
      </source>
   </environment>

   <test-case name="XMark-Q1">
      <description> Return the name of the person with ID `person0'. </description>
      <created by="Frans Englich(maintainer, not original author)" on="2007-03-09"/>
      <environment ref="XMarkAuction"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        <XMark-result-Q1> { 
            let $auction := (/)
            return for $b in $auction/site/people/person[@id = "person0"] 
            return $b/name/text() } </XMark-result-Q1>]]></test>
      <result>
         <assert-xml><![CDATA[<XMark-result-Q1>Seongtaek Mattern</XMark-result-Q1>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="XMark-Q2">
      <description> Return the initial increases of all open auctions. </description>
      <created by="Frans Englich(maintainer, not original author)" on="2007-03-09"/>
      <environment ref="XMarkAuction"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        <XMark-result-Q2> { 
            let $auction := (/) 
            return for $b in $auction/site/open_auctions/open_auction 
            return <increase>{$b/bidder[1]/increase/text()}</increase> } </XMark-result-Q2>]]></test>
      <result>
         <assert-xml file="XMark/XMark-Q2.xml"/>
      </result>
   </test-case>

   <test-case name="XMark-Q3">
      <description> Return the IDs of all open auctions whose current increase is at least twice as
         high as the initial increase. </description>
      <created by="Frans Englich(maintainer, not original author)" on="2007-03-09"/>
      <environment ref="XMarkAuction"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[(: Purpose: Return the IDs of all open auctions whose current increase is at least twice as high as the initial increase. :) 
        <XMark-result-Q3> { 
            let $auction := (/) 
            return for $b in $auction/site/open_auctions/open_auction 
            where zero-or-one($b/bidder[1]/increase/text()) * 2.0 <= $b/bidder[last()]/increase/text() 
                return <increase first="{$b/bidder[1]/increase/text()}" last="{$b/bidder[last()]/increase/text()}"/> } 
        </XMark-result-Q3>]]></test>
      <result>
         <assert-xml file="XMark/XMark-Q3.xml"/>
      </result>
   </test-case>

   <test-case name="XMark-Q4">
      <description> List the reserves of those open auctions where a certain person issued a bid
         before another person. </description>
      <created by="Frans Englich(maintainer, not original author)" on="2007-03-09"/>
      <environment ref="XMarkAuction"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[(: Purpose: List the reserves of those open auctions where a certain person issued a bid before another person. :) 
        <XMark-result-Q4> { 
            let $auction := (/) return 
            for $b in $auction/site/open_auctions/open_auction 
            where some $pr1 in $b/bidder/personref[@person = "person20"], $pr2 in $b/bidder/personref[@person = "person51"] satisfies $pr1 << $pr2 
            return <history>{$b/reserve/text()}</history> } 
        </XMark-result-Q4>]]></test>
      <result>
         <assert-xml><![CDATA[<XMark-result-Q4/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="XMark-Q5">
      <description> How many sold items cost more than 40? </description>
      <created by="Frans Englich(maintainer, not original author)" on="2007-03-09"/>
      <environment ref="XMarkAuction"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        <XMark-result-Q5> { 
          let $auction := (/) return count(
            for $i in $auction/site/closed_auctions/closed_auction 
            where $i/price/text() >= 40.0 return $i/price) } 
        </XMark-result-Q5>]]></test>
      <result>
         <assert-xml><![CDATA[<XMark-result-Q5>200</XMark-result-Q5>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="XMark-Q6">
      <description> How many items are listed on all continents? </description>
      <created by="Frans Englich(maintainer, not original author)" on="2007-03-09"/>
      <environment ref="XMarkAuction"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        <XMark-result-Q6> { 
            let $auction := (/) return for $b in $auction//site/regions return count($b//item) } 
        </XMark-result-Q6>]]></test>
      <result>
         <assert-xml><![CDATA[<XMark-result-Q6>647</XMark-result-Q6>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="XMark-Q7">
      <description> How many pieces of prose are in our database? </description>
      <created by="Frans Englich(maintainer, not original author)" on="2007-03-09"/>
      <environment ref="XMarkAuction"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<XMark-result-Q7> { let $auction := (/) return for $p in $auction/site return count($p//description) + count($p//annotation) + count($p//emailaddress) } </XMark-result-Q7>]]></test>
      <result>
         <assert-xml><![CDATA[<XMark-result-Q7>2734</XMark-result-Q7>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="XMark-Q8">
      <description> List the names of persons and the number of items they bought. (joins person,
         closed\_auction). </description>
      <created by="Frans Englich(maintainer, not original author)" on="2007-03-09"/>
      <environment ref="XMarkAuction"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[(: Purpose: List the names of persons and the number of items they bought. (joins person, closed\_auction). :) 
         <XMark-result-Q8> { let $auction := (/) return 
         for $p in $auction/site/people/person 
         let $a := for $t in $auction/site/closed_auctions/closed_auction 
         where $t/buyer/@person = $p/@id return $t 
         return <item person="{$p/name/text()}">{count($a)}</item> } </XMark-result-Q8>]]></test>
      <result>
         <assert-xml file="XMark/XMark-Q8.xml"/>
      </result>
   </test-case>

   <test-case name="XMark-Q9">
      <description> List the names of persons and the names of the items they bought in Europe(joins
         person, closed auction, item). </description>
      <created by="Frans Englich(maintainer, not original author)" on="2007-03-09"/>
      <environment ref="XMarkAuction"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[(: Purpose: List the names of persons and the names of the items 
         they bought in Europe(joins person, closed auction, item). :) 
         <XMark-result-Q9> { 
            let $auction := (/) 
            return let $ca := $auction/site/closed_auctions/closed_auction 
            return let $ei := $auction/site/regions/europe/item 
            for $p in $auction/site/people/person 
            let $a := for $t in $ca where $p/@id = $t/buyer/@person 
            return let $n := for $t2 in $ei where $t/itemref/@item = $t2/@id 
            return $t2 return <item>{$n/name/text()}</item> 
            return <person name="{$p/name/text()}">{$a}</person> } </XMark-result-Q9>]]></test>
      <result>
         <assert-xml file="XMark/XMark-Q9.xml"/>
      </result>
   </test-case>

   <test-case name="XMark-Q10">
      <description> List all persons according to their interest; use French markup in the result. </description>
      <created by="Frans Englich(maintainer, not original author)" on="2007-03-09"/>
      <environment ref="XMarkAuction"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[(: Purpose: List all persons according to their interest; use French markup in the result. :) 
         <XMark-result-Q10> { let $auction := (/) 
            return for $i in distinct-values($auction/site/people/person/profile/interest/@category) 
            let $p := for $t in $auction/site/people/person where $t/profile/interest/@category = $i 
            return <personne> 
                     <statistiques> 
                        <sexe>{$t/profile/gender/text()}</sexe> 
                        <age>{$t/profile/age/text()}</age> 
                        <education>{$t/profile/education/text()}</education> 
                        <revenu>{fn:data($t/profile/@income)}</revenu> 
                     </statistiques> 
                     <coordonnees> 
                        <nom>{$t/name/text()}</nom> 
                        <rue>{$t/address/street/text()}</rue> 
                        <ville>{$t/address/city/text()}</ville> 
                        <pays>{$t/address/country/text()}</pays> 
                        <reseau> 
                           <courrier>{$t/emailaddress/text()}</courrier> 
                           <pagePerso>{$t/homepage/text()}</pagePerso> 
                        </reseau> 
                     </coordonnees> 
                     <cartePaiement>{$t/creditcard/text()}</cartePaiement> 
                   </personne> 
            return <categorie>{<id>{$i}</id>, $p}</categorie> } </XMark-result-Q10>]]></test>
      <result>
         <assert-xml file="XMark/XMark-Q10.xml"/>
      </result>
   </test-case>

   <test-case name="XMark-Q11">
      <description>Purpoose: For each person, list the number of items currently on sale whose price
         does not exceed 0.02% of the person's income. </description>
      <created by="Frans Englich(maintainer, not original author)" on="2007-03-09"/>
      <environment ref="XMarkAuction"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[(: Purpoose: For each person, list the number of items currently on sale 
         whose price does not exceed 0.02% of the person's income. :) 
         <XMark-result-Q11> { 
            let $auction := (/) return 
            for $p in $auction/site/people/person 
            let $l := for $i in $auction/site/open_auctions/open_auction/initial 
            where $p/profile/@income > 5000 * exactly-one($i/text()) 
            return $i return <items name="{$p/name/text()}">{count($l)}</items> } </XMark-result-Q11>]]></test>
      <result>
         <assert-xml file="XMark/XMark-Q11.xml"/>
      </result>
   </test-case>

   <test-case name="XMark-Q12">
      <description> For each richer-than-average person, list the number of items currently on sale
         whose price does not exceed 0.02% of the person's income. </description>
      <created by="Frans Englich(maintainer, not original author)" on="2007-03-09"/>
      <environment ref="XMarkAuction"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[(: Purpose: For each richer-than-average person, list the 
         number of items currently on sale whose price does not exceed 0.02% of the person's income. :) 
         <XMark-result-Q12> { 
            let $auction := (/) return 
            for $p in $auction/site/people/person 
            let $l := for $i in $auction/site/open_auctions/open_auction/initial 
            where $p/profile/@income > 5000.0 * exactly-one($i/text()) 
            return $i where $p/profile/@income > 50000.0 
            return <items person="{$p/profile/@income}">{count($l)}</items> } </XMark-result-Q12>]]></test>
      <result>
         <assert-xml file="XMark/XMark-Q12.xml"/>
      </result>
   </test-case>

   <test-case name="XMark-Q13">
      <description> List the names of items registered in Australia along with their descriptions. </description>
      <created by="Frans Englich(maintainer, not original author)" on="2007-03-09"/>
      <environment ref="XMarkAuction"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[(: Purpose: List the names of items registered in Australia along with their descriptions. :) 
         <XMark-result-Q13> { 
            let $auction := (/) return 
            for $i in $auction/site/regions/australia/item 
            return <item name="{$i/name/text()}">{$i/description}</item> } </XMark-result-Q13>]]></test>
      <result>
         <assert-xml file="XMark/XMark-Q13.xml"/>
      </result>
   </test-case>

   <test-case name="XMark-Q14">
      <description> Return the names of all items whose description contains the word `gold'. </description>
      <created by="Frans Englich(maintainer, not original author)" on="2007-03-09"/>
      <environment ref="XMarkAuction"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[(: Purpose: Return the names of all items whose description contains the word `gold'. :) 
         <XMark-result-Q14> { 
            let $auction := (/) return 
            for $i in $auction/site//item 
            where contains(string(exactly-one($i/description)), "gold") 
            return $i/name/text() } </XMark-result-Q14>]]></test>
      <result>
         <assert-xml file="XMark/XMark-Q14.xml"/>
      </result>
   </test-case>

   <test-case name="XMark-Q15">
      <description> Print the keywords in emphasis in annotations of closed auctions. </description>
      <created by="Frans Englich(maintainer, not original author)" on="2007-03-09"/>
      <environment ref="XMarkAuction"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<XMark-result-Q15> { 
            let $auction := (/) return 
            for $a in $auction/site/closed_auctions/closed_auction/annotation/description/parlist/ 
               listitem/ parlist/ listitem/ text/ emph/ keyword/ text() 
            return <text>{$a}</text> } </XMark-result-Q15>]]></test>
      <result>
         <assert-xml file="XMark/XMark-Q15.xml"/>
      </result>
   </test-case>

   <test-case name="XMark-Q16">
      <description> Return the IDs of those auctions that have one or more keywords in emphasis.
         (cf. Q15) </description>
      <created by="Frans Englich(maintainer, not original author)" on="2007-03-09"/>
      <environment ref="XMarkAuction"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[(: Purpose: Return the IDs of those auctions that have one or more keywords in emphasis. (cf. Q15) :) 
         <XMark-result-Q16> { 
            let $auction := (/) return 
            for $a in $auction/site/closed_auctions/closed_auction 
            where not( empty( $a/annotation/description/parlist/listitem/parlist/listitem/text/emph/ keyword/ text() ) ) 
            return <person id="{$a/seller/@person}"/> } </XMark-result-Q16>]]></test>
      <result>
         <assert-xml file="XMark/XMark-Q16.xml"/>
      </result>
   </test-case>

   <test-case name="XMark-Q17">
      <description> Which persons don't have a homepage? </description>
      <created by="Frans Englich(maintainer, not original author)" on="2007-03-09"/>
      <environment ref="XMarkAuction"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<XMark-result-Q17> { 
            let $auction := (/) 
            return for $p in $auction/site/people/person 
            where empty($p/homepage/text()) 
            return <person name="{$p/name/text()}"/> } </XMark-result-Q17>]]></test>
      <result>
         <assert-xml file="XMark/XMark-Q17.xml"/>
      </result>
   </test-case>

   <test-case name="XMark-Q18">
      <description> Convert the currency of the reserve of all open auctions to another currency.
         convert Dfl to Euro </description>
      <created by="Frans Englich(maintainer, not original author)" on="2007-03-09"/>
      <environment ref="XMarkAuction"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[(: Purpose: Convert the currency of the reserve of all open auctions to another currency. :) 
         declare namespace local = "http://www.example.com/"; 
         declare function local:convert($v as xs:decimal?) as xs:decimal? { 2.20371 * $v }; 
         <XMark-result-Q18> { 
            let $auction := (/) return 
            for $i in $auction/site/open_auctions/open_auction 
            return local:convert(zero-or-one($i/reserve)) } </XMark-result-Q18>]]></test>
      <result>
         <assert-xml file="XMark/XMark-Q18.xml"/>
      </result>
   </test-case>

   <test-case name="XMark-Q19">
      <description> Give an alphabetically ordered list of all items along with their location. </description>
      <created by="Frans Englich(maintainer, not original author)" on="2007-03-09"/>
      <environment ref="XMarkAuction"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[(: Purpose: Give an alphabetically ordered list of all items along with their location. :) 
         <XMark-result-Q19> { 
            let $auction := (/) return 
            for $b in $auction/site/regions//item 
            let $k := $b/name/text() stable order by zero-or-one($b/location) ascending empty greatest 
            return <item name="{$k}">{$b/location/text()}</item> } </XMark-result-Q19>]]></test>
      <result>
         <assert-xml file="XMark/XMark-Q19.xml"/>
      </result>
   </test-case>

   <test-case name="XMark-Q20">
      <description> Group customers by their income and output the cardinality of each group. </description>
      <created by="Frans Englich(maintainer, not original author)" on="2007-03-09"/>
      <environment ref="XMarkAuction"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<XMark-result-Q20> { 
            let $auction := (/) return 
               <result> 
                  <preferred> {count($auction/site/people/person/profile[@income >= 100000.0])} </preferred>
                  <standard> { count( $auction/site/people/person/ profile[@income < 100000.0 and @income >= 30000.0] ) } </standard>
                  <challenge> {count($auction/site/people/person/profile[@income < 30000.0])} </challenge>
                  <na> { count( for $p in $auction/site/people/person where empty($p/profile/@income) return $p ) } </na>
               </result> } </XMark-result-Q20>]]></test>
      <result>
         <assert-xml file="XMark/XMark-Q20.xml"/>
      </result>
   </test-case>

   <test-case name="XMark-All">
      <description> Return the name of the person with ID `person0'. convert Dfl to Euro </description>
      <created by="Frans Englich(maintainer, not original author)" on="2007-03-09"/>
      <environment ref="XMarkAuction"/>
      <dependency type="spec" value="XQ10+"/>
      <test file="XMark/XMark-All.xq"/>
      <result>
         <assert-xml file="XMark/XMark-All.xml"/>
      </result>
   </test-case>
</test-set>
