<?xml version="1.0" encoding="UTF-8"?>
<test-set name="app-UseCaseSTRING" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">
  <description>Tests for the UseCaseSTRING</description>
  <link document="http://www.w3.org/TR/xquery-30/" idref="doc-xquery30-UseCaseSTRING" type="spec"/>
  <link document="UseCases" idref="text-queries-results-q1" section-number="1.6.4.1" type="spec"/>
  <environment name="string">
    <source file="../docs/string.xml" role=".">
      <description>Data for the the XML Query use cases</description>
      <created by="XQuery WG" on="2005-02-11"/>
    </source>
  </environment>
  <environment name="string-and-company-data">
    <source file="../docs/string.xml" role="$string">
      <description>Data for the the XML Query use cases</description>
      <created by="XQuery WG" on="2005-02-11"/>
    </source>
    <source file="../docs/company-data.xml" role="$company-data">
      <description>Data for the the XML Query use cases</description>
      <created by="XQuery WG" on="2005-02-11"/>
    </source>
  </environment>
  <test-case name="string-queries-results-q1">
    <description/>
    <created by="XML Query Group" on="2005-02-03"/>
    <environment ref="string"/>
    <test>//news_item/title[contains(., "Foobar Corporation")]</test>
    <result-string/>
    <result>
      <assert-xml file="UseCaseSTRING/string-queries-results-q1.out"/>
    </result>
  </test-case>
  <test-case name="string-queries-results-q2">
    <description/>
    <created by="XML Query Group" on="2005-02-03"/>
    <environment ref="string-and-company-data"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[
        declare variable $input-context1 := $string;
        declare variable $input-context2 := $company-data;

        declare function local:partners($company as xs:string) as element()*
        {
            let $c := $input-context2//company[name = $company]
            return $c//partner
        };

        let $foobar_partners := local:partners("Foobar Corporation")

        for $item in $input-context1//news_item
        where
          some $t in $item//title satisfies
            (contains(exactly-one($t/text()), "Foobar Corporation")
            and (some $partner in $foobar_partners satisfies
              contains(exactly-one($t/text()), $partner/text())))
          or (some $par in $item//par satisfies
           (contains(string($par), "Foobar Corporation")
             and (some $partner in $foobar_partners satisfies
                contains(string($par), $partner/text()))))
        return
            <news_item>
                { $item/title }
                { $item/date }
            </news_item>
      ]]>
    </test>
    <result-string/>
    <result>
      <assert-xml file="UseCaseSTRING/string-queries-results-q2.out"/>
    </result>
  </test-case>
  <test-case name="string-queries-results-q4">
    <description/>
    <created by="XML Query Group" on="2005-02-03"/>
    <environment ref="string-and-company-data"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
        declare function local:partners($c as xs:string) as element()* { 
            let $c := $company-data//company[name = $c] 
            return $c//partner 
        }; 
        for $item in $string//news_item, 
            $c in $company-data//company 
        let $partners := local:partners(exactly-one($c/name)) 
        where contains(string($item), $c/name) 
          and (some $p in $partners satisfies contains(string($item), $p) and $item/news_agent != $c/name) 
        return $item</test>
    <result-string/>
    <result>
      <assert-xml file="UseCaseSTRING/string-queries-results-q4.out"/>
    </result>
  </test-case>
  <test-case name="string-queries-results-q5">
    <description/>
    <created by="XML Query Group" on="2005-02-03"/>
    <environment ref="string"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[
        for $item in //news_item 
        where contains(string(exactly-one($item/content)), "Gorilla Corporation") 
        return <item_summary> { concat($item/title,". ") } 
                              { concat($item/date,". ") } 
                              { string(($item//par)[1]) } 
               </item_summary>
      ]]>
    </test>
    <result-string/>
    <result>
      <assert-xml file="UseCaseSTRING/string-queries-results-q5.out"/>
    </result>
  </test-case>
</test-set>