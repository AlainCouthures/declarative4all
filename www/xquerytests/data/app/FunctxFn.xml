<?xml version="1.0" encoding="utf-8"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="app-FunctxFn">
   <description>Tests derived from the functx library </description>
     
   <environment name="functx_order">
     <source role="." file="FunctxFn/functx_order.xml">
        <description/>
        <created by="Frans Englich" on="2008-05-16"/>
     </source>
   </environment>
   
   <environment name="functx_catalog">
     <source role="." file="FunctxFn/functx_catalog.xml">
        <description/>
        <created by="Frans Englich" on="2008-05-16"/>
     </source>
   </environment>
   
   <environment name="functx_cats">
     <source role="." file="FunctxFn/functx_cats.xml">
        <description/>
        <created by="Frans Englich" on="2008-05-16"/>
     </source>    
   </environment>
   
   <environment name="functx_prices">
     <source role="." file="FunctxFn/functx_prices.xml">
        <description/>
        <created by="Frans Englich" on="2008-05-16"/>
     </source>    
   </environment>

   <test-case name="functx-fn-abs-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(abs(3.5))</test>
      <result>
         <assert-string-value>3.5</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-abs-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(abs(-4))</test>
      <result>
         <assert-eq>4</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-abs-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(abs(xs:float('-INF')))</test>
      <result>
         <assert-string-value>INF</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-abs-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(abs(3.5), abs(-4), abs(xs:float('-INF')))</test>
      <result>
         <assert-string-value>3.5 4 INF</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-adjust-date-to-timezone-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(adjust-date-to-timezone( xs:date('2006-02-15'), xs:dayTimeDuration('-PT8H')))</test>
      <result>
         <assert-string-value>2006-02-15-08:00</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-adjust-date-to-timezone-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(adjust-date-to-timezone( xs:date('2006-02-15-03:00'), xs:dayTimeDuration('-PT8H')))</test>
      <result>
         <assert-string-value>2006-02-14-08:00</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-adjust-date-to-timezone-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(adjust-date-to-timezone( xs:date('2006-02-15'), ()))</test>
      <result>
         <assert-string-value>2006-02-15</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-adjust-date-to-timezone-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(adjust-date-to-timezone( xs:date('2006-02-15-03:00'), ()))</test>
      <result>
         <assert-string-value>2006-02-15</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-adjust-date-to-timezone-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(adjust-date-to-timezone( xs:date('2006-02-15'), xs:dayTimeDuration('-PT8H')), adjust-date-to-timezone( xs:date('2006-02-15-03:00'), xs:dayTimeDuration('-PT8H')), adjust-date-to-timezone( xs:date('2006-02-15'), ()), adjust-date-to-timezone( xs:date('2006-02-15-03:00'), ()))</test>
      <result>
         <assert-string-value>2006-02-15-08:00 2006-02-14-08:00 2006-02-15 2006-02-15</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-adjust-dateTime-to-timezone-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(adjust-dateTime-to-timezone( xs:dateTime('2006-02-15T17:00:00'), xs:dayTimeDuration('-PT7H')))</test>
      <result>
         <assert-string-value>2006-02-15T17:00:00-07:00</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-adjust-dateTime-to-timezone-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(adjust-dateTime-to-timezone( xs:dateTime('2006-02-15T17:00:00-03:00'), xs:dayTimeDuration('-PT7H')))</test>
      <result>
         <assert-string-value>2006-02-15T13:00:00-07:00</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-adjust-dateTime-to-timezone-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(adjust-dateTime-to-timezone( xs:dateTime('2006-02-15T17:00:00'), ()))</test>
      <result>
         <assert-string-value>2006-02-15T17:00:00</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-adjust-dateTime-to-timezone-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(adjust-dateTime-to-timezone( xs:dateTime('2006-02-15T17:00:00-03:00'), ()))</test>
      <result>
         <assert-string-value>2006-02-15T17:00:00</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-adjust-dateTime-to-timezone-5">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(adjust-dateTime-to-timezone( xs:dateTime('2006-02-15T01:00:00-03:00'), xs:dayTimeDuration('-PT7H')))</test>
      <result>
         <assert-string-value>2006-02-14T21:00:00-07:00</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-adjust-dateTime-to-timezone-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(adjust-dateTime-to-timezone( xs:dateTime('2006-02-15T17:00:00'), xs:dayTimeDuration('-PT7H')), adjust-dateTime-to-timezone( xs:dateTime('2006-02-15T17:00:00-03:00'), xs:dayTimeDuration('-PT7H')), adjust-dateTime-to-timezone( xs:dateTime('2006-02-15T17:00:00'), ()), adjust-dateTime-to-timezone( xs:dateTime('2006-02-15T17:00:00-03:00'), ()), adjust-dateTime-to-timezone( xs:dateTime('2006-02-15T01:00:00-03:00'), xs:dayTimeDuration('-PT7H')))</test>
      <result>
         <assert-string-value>2006-02-15T17:00:00-07:00 2006-02-15T13:00:00-07:00 2006-02-15T17:00:00 2006-02-15T17:00:00 2006-02-14T21:00:00-07:00</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-adjust-time-to-timezone-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(adjust-time-to-timezone( xs:time('17:00:00'), xs:dayTimeDuration('-PT7H')))</test>
      <result>
         <assert-string-value>17:00:00-07:00</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-adjust-time-to-timezone-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(adjust-time-to-timezone( xs:time('17:00:00-03:00'), xs:dayTimeDuration('-PT7H')))</test>
      <result>
         <assert-string-value>13:00:00-07:00</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-adjust-time-to-timezone-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(adjust-time-to-timezone( xs:time('17:00:00'), ()))</test>
      <result>
         <assert-string-value>17:00:00</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-adjust-time-to-timezone-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(adjust-time-to-timezone( xs:time('17:00:00-03:00'), ()))</test>
      <result>
         <assert-string-value>17:00:00</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-adjust-time-to-timezone-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(adjust-time-to-timezone( xs:time('17:00:00'), xs:dayTimeDuration('-PT7H')), adjust-time-to-timezone( xs:time('17:00:00-03:00'), xs:dayTimeDuration('-PT7H')), adjust-time-to-timezone( xs:time('17:00:00'), ()), adjust-time-to-timezone( xs:time('17:00:00-03:00'), ()))</test>
      <result>
         <assert-string-value>17:00:00-07:00 13:00:00-07:00 17:00:00 17:00:00</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-avg-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(avg( (1, 2, 3, 4, 5) ))</test>
      <result>
         <assert-eq>3</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-avg-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(avg( (1, 2, 3, (), 4, 5) ))</test>
      <result>
         <assert-eq>3</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-avg-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(avg( (xs:yearMonthDuration('P4M'), xs:yearMonthDuration('P6M') ) ))</test>
      <result>
         <assert-string-value>P5M</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-avg-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_order"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $ordDoc := (/) return (avg($ordDoc//item/@quantity))</test>
      <result>
         <assert-eq>1.1666666666666667</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-avg-5">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_order"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $ordDoc := (/) return (avg( () ))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-avg-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_order"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $ordDoc := (/) return (avg( (1, 2, 3, 4, 5) ), avg( (1, 2, 3, (), 4, 5) ), avg( (xs:yearMonthDuration('P4M'), xs:yearMonthDuration('P6M') ) ), avg($ordDoc//item/@quantity), avg( () ))</test>
      <result>
         <assert-deep-eq>3, 3, xs:yearMonthDuration('P5M'), 1.1666666666666667</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-base-uri-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_cats"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $cats := (/) return (base-uri($cats//catalog[1]))</test>
      <result>
         <assert-string-value>http://example.org/ACC/</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-base-uri-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_cats"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $cats := (/) return (base-uri($cats//catalog[2]/product))</test>
      <result>
         <assert-string-value>http://example.org/WMN/</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-base-uri-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_cats"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $cats := (/) return (base-uri($cats//catalog[2]/product/@href))</test>
      <result>
         <assert-string-value>http://example.org/WMN/</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-base-uri-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_cats"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $cats := (/) return (base-uri($cats//catalog[1]), base-uri($cats//catalog[2]/product), base-uri($cats//catalog[2]/product/@href))</test>
      <result>
         <assert-string-value>http://example.org/ACC/ http://example.org/WMN/ http://example.org/WMN/</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-boolean-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_order"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $ordDoc := (/) return (boolean( () ))</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="functx-fn-boolean-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_order"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $ordDoc := (/) return (boolean(''))</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="functx-fn-boolean-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_order"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $ordDoc := (/) return (boolean(0))</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="functx-fn-boolean-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_order"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $ordDoc := (/) return (boolean('0'))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-boolean-5">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_order"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $ordDoc := (/) return (boolean('false'))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-boolean-6">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_order"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $ordDoc := (/) return (boolean(xs:float('NaN')))</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="functx-fn-boolean-7">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_order"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $ordDoc := (/) return (boolean($ordDoc/order[1]))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-boolean-8">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_order"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $ordDoc := (/) return (boolean($ordDoc/noSuchChild))</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="functx-fn-boolean-9">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_order"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $ordDoc := (/) return (boolean(<a>false</a>))]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-boolean-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_order"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $ordDoc := (/) return (boolean( () ), boolean(''), boolean(0), boolean('0'), boolean('false'), boolean(xs:float('NaN')), boolean($ordDoc/order[1]), boolean($ordDoc/noSuchChild), boolean(<a>false</a>))]]></test>
      <result>
         <assert-string-value>false false false true true false true false true</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-ceiling-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(ceiling(5))</test>
      <result>
         <assert-eq>5</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-ceiling-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(ceiling(5.1))</test>
      <result>
         <assert-eq>6</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-ceiling-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(ceiling(5.5))</test>
      <result>
         <assert-eq>6</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-ceiling-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(ceiling(-5.5))</test>
      <result>
         <assert-eq>-5</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-ceiling-5">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(ceiling(-5.51))</test>
      <result>
         <assert-eq>-5</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-ceiling-6">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(ceiling( () ))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-ceiling-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(ceiling(5), ceiling(5.1), ceiling(5.5), ceiling(-5.5), ceiling(-5.51), ceiling( () ))</test>
      <result>
         <assert-string-value>5 6 6 -5 -5</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-codepoint-equal-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(codepoint-equal('abc', 'abc'))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-codepoint-equal-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(codepoint-equal('abc', 'ab c'))</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="functx-fn-codepoint-equal-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(codepoint-equal('abc', ()))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-codepoint-equal-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(codepoint-equal('abc', 'abc'), codepoint-equal('abc', 'ab c'), codepoint-equal('abc', ()))</test>
      <result>
         <assert-string-value>true false</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-codepoints-to-string-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(codepoints-to-string((97, 32, 98, 32, 99)))</test>
      <result>
         <assert-string-value>a b c</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-codepoints-to-string-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(codepoints-to-string(97))</test>
      <result>
         <assert-string-value>a</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-codepoints-to-string-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(codepoints-to-string(()))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-codepoints-to-string-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(codepoints-to-string((97, 32, 98, 32, 99)), codepoints-to-string(97), codepoints-to-string(()))</test>
      <result>
         <assert-string-value>a b c a </assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-compare-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(compare('a', 'b'))</test>
      <result>
         <assert-eq>-1</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-compare-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(compare('a', 'a'))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-compare-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(compare('b', 'a'))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-compare-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(compare('ab', 'abc'))</test>
      <result>
         <assert-eq>-1</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-compare-5">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(compare('a', 'B'))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-compare-6">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(compare(upper-case('a'), upper-case('B')))</test>
      <result>
         <assert-eq>-1</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-compare-7">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(compare('a', ()))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-compare-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(compare('a', 'b'), compare('a', 'a'), compare('b', 'a'), compare('ab', 'abc'), compare('a', 'B'), compare(upper-case('a'), upper-case('B')), compare('a', ()))</test>
      <result>
         <assert-string-value>-1 0 1 -1 1 -1</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-concat-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(concat('a', 'b'))</test>
      <result>
         <assert-string-value>ab</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-concat-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(concat('a', 'b', 'c'))</test>
      <result>
         <assert-string-value>abc</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-concat-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(concat('a', (), 'b', '', 'c'))</test>
      <result>
         <assert-string-value>abc</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-concat-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[(concat('a', <x>b</x>, 'c'))]]></test>
      <result>
         <assert-string-value>abc</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-concat-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[(concat('a', 'b'), concat('a', 'b', 'c'), concat('a', (), 'b', '', 'c'), concat('a', <x>b</x>, 'c'))]]></test>
      <result>
         <assert-string-value>ab abc abc abc</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-contains-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(contains('query', 'e'))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-contains-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(contains('query', 'ery'))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-contains-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(contains('query', 'query'))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-contains-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(contains('query', 'x'))</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="functx-fn-contains-5">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(contains('query', ''))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-contains-6">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(contains('query', ()))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-contains-7">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(contains( (), 'q'))</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="functx-fn-contains-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(contains('query', 'e'), contains('query', 'ery'), contains('query', 'query'), contains('query', 'x'), contains('query', ''), contains('query', ()), contains( (), 'q'))</test>
      <result>
         <assert-string-value>true true true false true true false</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-count-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_order"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $ordDoc := (/) return (count( (1, 2, 3) ))</test>
      <result>
         <assert-eq>3</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-count-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_order"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $ordDoc := (/) return (count($ordDoc//item))</test>
      <result>
         <assert-eq>6</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-count-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_order"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $ordDoc := (/) return (count( distinct-values($ordDoc//item/@num)))</test>
      <result>
         <assert-eq>4</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-count-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_order"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $ordDoc := (/) return (count( (1, 2, 3, () ) ))</test>
      <result>
         <assert-eq>3</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-count-5">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_order"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $ordDoc := (/) return (count( () ))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-count-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_order"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $ordDoc := (/) return (count( (1, 2, 3) ), count($ordDoc//item), count( distinct-values($ordDoc//item/@num)), count( (1, 2, 3, () ) ), count( () ))</test>
      <result>
         <assert-string-value>3 6 4 3 0</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-data-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_catalog"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $cat := (/) return (data($cat//product[1]/number))</test>
      <result>
         <assert-string-value>557</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-data-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_catalog"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $cat := (/) return (data($cat//number))</test>
      <result>
         <assert-string-value>557 563 443 784</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-data-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_catalog"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $cat := (/) return (data($cat//product[1]/@dept))</test>
      <result>
         <assert-string-value>WMN</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-data-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_catalog"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $cat := (/) return (data($cat//product[1]/colorChoices))</test>
      <result>
         <assert-string-value>navy black</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-data-5">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_catalog"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $cat := (/) return (data($cat//product[1]))</test>
      <result>
         <assert-string-value normalize-space="true">557 Fleece Pullover navy black</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-data-6">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_catalog"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $cat := (/) return (data($cat//product[4]/desc))</test>
      <result>
         <assert-string-value>Our favorite shirt!</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-data-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_catalog"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $cat := (/) return (data($cat//product[1]/number), data($cat//number), data($cat//product[1]/@dept), data($cat//product[1]/colorChoices), data($cat//product[1]), data($cat//product[4]/desc))</test>
      <result>
         <assert-string-value normalize-space="true">557 557 563 443 784 WMN navy black 557 Fleece Pullover navy black Our favorite shirt!</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-dateTime-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(dateTime(xs:date('2006-08-15'), xs:time('12:30:45-05:00')))</test>
      <result>
         <assert-string-value>2006-08-15T12:30:45-05:00</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-day-from-date-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(day-from-date(xs:date('2006-08-15')))</test>
      <result>
         <assert-eq>15</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-day-from-dateTime-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(day-from-dateTime( xs:dateTime('2006-08-15T10:30:23')))</test>
      <result>
         <assert-eq>15</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-days-from-duration-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(days-from-duration( xs:dayTimeDuration('P5D')))</test>
      <result>
         <assert-eq>5</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-days-from-duration-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(days-from-duration( xs:dayTimeDuration('-PT24H')))</test>
      <result>
         <assert-eq>-1</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-days-from-duration-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(days-from-duration( xs:dayTimeDuration('PT23H')))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-days-from-duration-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(days-from-duration( xs:dayTimeDuration('P1DT36H')))</test>
      <result>
         <assert-eq>2</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-days-from-duration-5">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(days-from-duration( xs:dayTimeDuration('PT1440M')))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-days-from-duration-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(days-from-duration( xs:dayTimeDuration('P5D')), days-from-duration( xs:dayTimeDuration('-PT24H')), days-from-duration( xs:dayTimeDuration('PT23H')), days-from-duration( xs:dayTimeDuration('P1DT36H')), days-from-duration( xs:dayTimeDuration('PT1440M')))</test>
      <result>
         <assert-string-value>5 -1 0 2 1</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-deep-equal-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $prod1 := <product dept='MEN' id='P123'> <number>784</number> </product> return let $prod2 := <product id='P123' dept='MEN'><!--comment--> <number>784</number> </product> return (deep-equal( 1, 1 ))]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-deep-equal-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $prod1 := <product dept='MEN' id='P123'> <number>784</number> </product> return let $prod2 := <product id='P123' dept='MEN'><!--comment--> <number>784</number> </product> return (deep-equal( (1, 1), (1, 1) ))]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-deep-equal-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $prod1 := <product dept='MEN' id='P123'> <number>784</number> </product> return let $prod2 := <product id='P123' dept='MEN'><!--comment--> <number>784</number> </product> return (deep-equal( (1, 2), (1.0, 2.0) ))]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-deep-equal-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $prod1 := <product dept='MEN' id='P123'> <number>784</number> </product> return let $prod2 := <product id='P123' dept='MEN'><!--comment--> <number>784</number> </product> return (deep-equal( (1, 2), (2, 1) ))]]></test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="functx-fn-deep-equal-5">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $prod1 := <product dept='MEN' id='P123'> <number>784</number> </product> return let $prod2 := <product id='P123' dept='MEN'><!--comment--> <number>784</number> </product> return (deep-equal( $prod1, $prod2 ))]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-deep-equal-6">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $prod1 := <product dept='MEN' id='P123'> <number>784</number> </product> return let $prod2 := <product id='P123' dept='MEN'><!--comment--> <number>784</number> </product> return (deep-equal( $prod1/number, $prod2/number ))]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-deep-equal-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $prod1 := <product dept='MEN' id='P123'> <number>784</number> </product> return let $prod2 := <product id='P123' dept='MEN'><!--comment--> <number>784</number> </product> return (deep-equal( 1, 1 ), deep-equal( (1, 1), (1, 1) ), deep-equal( (1, 2), (1.0, 2.0) ), deep-equal( (1, 2), (2, 1) ), deep-equal( $prod1, $prod2 ), deep-equal( $prod1/number, $prod2/number ))]]></test>
      <result>
         <assert-string-value>true true true false true true</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-default-collation-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(default-collation())</test>
      <result>
         <assert-string-value>http://www.w3.org/2005/xpath-functions/collation/codepoint</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-distinct-values-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $in-xml := <in-xml> <a>3</a> <b>5</b> <b>3</b> </in-xml> return (distinct-values( ('a', 'b', 'a') ))]]></test>
      <result>
         <assert-string-value>a b</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-distinct-values-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $in-xml := <in-xml> <a>3</a> <b>5</b> <b>3</b> </in-xml> return (distinct-values( (1, 2, 3) ))]]></test>
      <result>
         <assert-string-value>1 2 3</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-distinct-values-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $in-xml := <in-xml> <a>3</a> <b>5</b> <b>3</b> </in-xml> return (distinct-values( ('a', 2, 3) ))]]></test>
      <result>
         <assert-string-value>a 2 3</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-distinct-values-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $in-xml := <in-xml> <a>3</a> <b>5</b> <b>3</b> </in-xml> return (distinct-values( (xs:integer('1'), xs:decimal('1.0'), xs:float('1.0E0') ) ))]]></test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-distinct-values-5">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $in-xml := <in-xml> <a>3</a> <b>5</b> <b>3</b> </in-xml> return (distinct-values($in-xml/*))]]></test>
      <result>
         <assert-string-value>3 5</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-distinct-values-6">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $in-xml := <in-xml> <a>3</a> <b>5</b> <b>3</b> </in-xml> return (distinct-values( () ))]]></test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-distinct-values-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $in-xml := <in-xml> <a>3</a> <b>5</b> <b>3</b> </in-xml> return (distinct-values( ('a', 'b', 'a') ), distinct-values( (1, 2, 3) ), distinct-values( ('a', 2, 3) ), distinct-values( (xs:integer('1'), xs:decimal('1.0'), xs:float('1.0E0') ) ), distinct-values($in-xml/*), distinct-values( () ))]]></test>
      <result>
         <assert-string-value>a b 1 2 3 a 2 3 1 3 5</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-doc-available-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_order"/>
      <test>(doc-available( document-uri(/) ))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-empty-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $in-xml := <in-xml> <a></a> <b/> <c>xyz</c> </in-xml> return (empty( ('a', 'b', 'c') ))]]></test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="functx-fn-empty-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $in-xml := <in-xml> <a></a> <b/> <c>xyz</c> </in-xml> return (empty( () ))]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-empty-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $in-xml := <in-xml> <a></a> <b/> <c>xyz</c> </in-xml> return (empty(0))]]></test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="functx-fn-empty-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $in-xml := <in-xml> <a></a> <b/> <c>xyz</c> </in-xml> return (empty($in-xml/a))]]></test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="functx-fn-empty-5">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $in-xml := <in-xml> <a></a> <b/> <c>xyz</c> </in-xml> return (empty($in-xml/b))]]></test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="functx-fn-empty-6">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $in-xml := <in-xml> <a></a> <b/> <c>xyz</c> </in-xml> return (empty($in-xml/c))]]></test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="functx-fn-empty-7">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $in-xml := <in-xml> <a></a> <b/> <c>xyz</c> </in-xml> return (empty($in-xml/foo))]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-empty-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $in-xml := <in-xml> <a></a> <b/> <c>xyz</c> </in-xml> return (empty( ('a', 'b', 'c') ), empty( () ), empty(0), empty($in-xml/a), empty($in-xml/b), empty($in-xml/c), empty($in-xml/foo))]]></test>
      <result>
         <assert-string-value>false true false false false false true</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-encode-for-uri-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(encode-for-uri( 'Sales % Numbers.pdf'))</test>
      <result>
         <assert-string-value>Sales%20%25%20Numbers.pdf</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-encode-for-uri-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(encode-for-uri( 'http://datypic.com/a%20URI#frag'))</test>
      <result>
         <assert-string-value>http%3A%2F%2Fdatypic.com%2Fa%2520URI%23frag</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-encode-for-uri-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(encode-for-uri( 'Sales % Numbers.pdf'), encode-for-uri( 'http://datypic.com/a%20URI#frag'))</test>
      <result>
         <assert-string-value>Sales%20%25%20Numbers.pdf http%3A%2F%2Fdatypic.com%2Fa%2520URI%23frag</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-ends-with-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(ends-with('query', 'y'))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-ends-with-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(ends-with('query', 'query'))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-ends-with-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(ends-with('query', ''))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-ends-with-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(ends-with('query ', 'y'))</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="functx-fn-ends-with-5">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(ends-with('', 'y'))</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="functx-fn-ends-with-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(ends-with('query', 'y'), ends-with('query', 'query'), ends-with('query', ''), ends-with('query ', 'y'), ends-with('', 'y'))</test>
      <result>
         <assert-string-value>true true true false false</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-escape-html-uri-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(escape-html-uri( 'http://datypic.com/a%20URI#frag'))</test>
      <result>
         <assert-string-value>http://datypic.com/a%20URI#frag</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-escape-html-uri-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(escape-html-uri('http://datypic.com'))</test>
      <result>
         <assert-string-value>http://datypic.com</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-escape-html-uri-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(escape-html-uri( 'http://datypic.com/a%20URI#frag'), escape-html-uri('http://datypic.com'))</test>
      <result>
         <assert-string-value>http://datypic.com/a%20URI#frag http://datypic.com</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-exactly-one-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(exactly-one('a'))</test>
      <result>
         <assert-string-value>a</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-exists-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(exists( ('a', 'b', 'c') ))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-exists-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(exists( '' ))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-exists-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(exists( () ))</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="functx-fn-exists-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(exists( false() ))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-exists-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(exists( ('a', 'b', 'c') ), exists( '' ), exists( () ), exists( false() ))</test>
      <result>
         <assert-string-value>true true false true</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-false-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(false())</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="functx-fn-floor-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(floor(5))</test>
      <result>
         <assert-eq>5</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-floor-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(floor(5.1))</test>
      <result>
         <assert-eq>5</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-floor-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(floor(5.7))</test>
      <result>
         <assert-eq>5</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-floor-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(floor(-5.1))</test>
      <result>
         <assert-eq>-6</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-floor-5">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(floor(-5.7))</test>
      <result>
         <assert-eq>-6</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-floor-6">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(floor( () ))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-floor-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(floor(5), floor(5.1), floor(5.7), floor(-5.1), floor(-5.7), floor( () ))</test>
      <result>
         <assert-string-value>5 5 5 -6 -6</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-hours-from-dateTime-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(hours-from-dateTime( xs:dateTime('2006-08-15T10:30:23')))</test>
      <result>
         <assert-eq>10</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-hours-from-dateTime-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(hours-from-dateTime( xs:dateTime('2006-08-15T10:30:23-05:00')))</test>
      <result>
         <assert-eq>10</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-hours-from-dateTime-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(hours-from-dateTime( xs:dateTime('2006-08-15T10:30:23')), hours-from-dateTime( xs:dateTime('2006-08-15T10:30:23-05:00')))</test>
      <result>
         <assert-string-value>10 10</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-hours-from-duration-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(hours-from-duration( xs:dayTimeDuration('P1DT5H')))</test>
      <result>
         <assert-eq>5</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-hours-from-duration-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(hours-from-duration( xs:dayTimeDuration('-PT36H')))</test>
      <result>
         <assert-eq>-12</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-hours-from-duration-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(hours-from-duration( xs:dayTimeDuration('PT1H90M')))</test>
      <result>
         <assert-eq>2</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-hours-from-duration-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(hours-from-duration( xs:dayTimeDuration('PT2H59M')))</test>
      <result>
         <assert-eq>2</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-hours-from-duration-5">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(hours-from-duration( xs:dayTimeDuration('PT3600S')))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-hours-from-duration-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(hours-from-duration( xs:dayTimeDuration('P1DT5H')), hours-from-duration( xs:dayTimeDuration('-PT36H')), hours-from-duration( xs:dayTimeDuration('PT1H90M')), hours-from-duration( xs:dayTimeDuration('PT2H59M')), hours-from-duration( xs:dayTimeDuration('PT3600S')))</test>
      <result>
         <assert-string-value>5 -12 2 2 1</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-hours-from-time-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(hours-from-time( xs:time('10:30:23')))</test>
      <result>
         <assert-eq>10</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-hours-from-time-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(hours-from-time( xs:time('10:30:23-05:00')))</test>
      <result>
         <assert-eq>10</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-hours-from-time-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(hours-from-time( xs:time('10:30:23')), hours-from-time( xs:time('10:30:23-05:00')))</test>
      <result>
         <assert-string-value>10 10</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-index-of-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(index-of( ('a', 'b', 'c'), 'a'))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-index-of-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(index-of( ('a', 'b', 'c'), 'd'))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-index-of-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(index-of( (4, 5, 6, 4), 4))</test>
      <result>
         <assert-string-value>1 4</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-index-of-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(index-of( (4, 5, 6, 4), 04.0))</test>
      <result>
         <assert-string-value>1 4</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-index-of-5">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(index-of( ('a', 5, 6), 'a'))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-index-of-6">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(index-of( (), 'a'))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-index-of-7">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[(index-of( (<a>1</a>, <b>1</b>), <c>1</c> ))]]></test>
      <result>
         <assert-string-value>1 2</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-index-of-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[(index-of( ('a', 'b', 'c'), 'a'), index-of( ('a', 'b', 'c'), 'd'), index-of( (4, 5, 6, 4), 4), index-of( (4, 5, 6, 4), 04.0), index-of( ('a', 5, 6), 'a'), index-of( (), 'a'), index-of( (<a>1</a>, <b>1</b>), <c>1</c> ))]]></test>
      <result>
         <assert-string-value>1 1 4 1 4 1 1 2</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-insert-before-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(insert-before( ('a', 'b', 'c'), 1, ('x', 'y')))</test>
      <result>
         <assert-string-value>x y a b c</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-insert-before-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(insert-before( ('a', 'b', 'c'), 2, ('x', 'y')))</test>
      <result>
         <assert-string-value>a x y b c</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-insert-before-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(insert-before( ('a', 'b', 'c'), 10, ('x', 'y')))</test>
      <result>
         <assert-string-value>a b c x y</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-insert-before-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(insert-before( ('a', 'b', 'c'), 0, ('x', 'y')))</test>
      <result>
         <assert-string-value>x y a b c</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-insert-before-5">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(insert-before( ('a', 'b', 'c'), 2, ()))</test>
      <result>
         <assert-string-value>a b c</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-insert-before-6">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(insert-before( (), 3, ('a', 'b', 'c') ))</test>
      <result>
         <assert-string-value>a b c</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-insert-before-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(insert-before( ('a', 'b', 'c'), 1, ('x', 'y')), insert-before( ('a', 'b', 'c'), 2, ('x', 'y')), insert-before( ('a', 'b', 'c'), 10, ('x', 'y')), insert-before( ('a', 'b', 'c'), 0, ('x', 'y')), insert-before( ('a', 'b', 'c'), 2, ()), insert-before( (), 3, ('a', 'b', 'c') ))</test>
      <result>
         <assert-string-value>x y a b c a x y b c a b c x y x y a b c a b c a b c</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-iri-to-uri-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(iri-to-uri( 'http://datypic.com/Sales Numbers.pdf'))</test>
      <result>
         <assert-string-value>http://datypic.com/Sales%20Numbers.pdf</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-lang-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $in-xml := <desclist xml:lang="en"> <desc xml:lang="en-US"> <line>A line of text.</line> </desc> <desc xml:lang="fr"> <line>Une ligne de texte.</line> </desc> </desclist> return ($in-xml// desc[lang('en')])]]></test>
      <result>
         <assert-xml><![CDATA[<desc xml:lang="en-US"><line>A line of text.</line></desc>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="functx-fn-lang-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $in-xml := <desclist xml:lang="en"> <desc xml:lang="en-US"> <line>A line of text.</line> </desc> <desc xml:lang="fr"> <line>Une ligne de texte.</line> </desc> </desclist> return ($in-xml// desc[lang('en-US')])]]></test>
      <result>
         <assert-xml><![CDATA[<desc xml:lang="en-US"><line>A line of text.</line></desc>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="functx-fn-lang-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $in-xml := <desclist xml:lang="en"> <desc xml:lang="en-US"> <line>A line of text.</line> </desc> <desc xml:lang="fr"> <line>Une ligne de texte.</line> </desc> </desclist> return ($in-xml// desc[lang('fr')])]]></test>
      <result>
         <assert-xml><![CDATA[<desc xml:lang="fr"><line>Une ligne de texte.</line></desc>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="functx-fn-lang-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $in-xml := <desclist xml:lang="en"> <desc xml:lang="en-US"> <line>A line of text.</line> </desc> <desc xml:lang="fr"> <line>Une ligne de texte.</line> </desc> </desclist> return ($in-xml// desc/line[lang('en')])]]></test>
      <result>
         <assert-xml><![CDATA[<line>A line of text.</line>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="functx-fn-lang-5">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $in-xml := <desclist xml:lang="en"> <desc xml:lang="en-US"> <line>A line of text.</line> </desc> <desc xml:lang="fr"> <line>Une ligne de texte.</line> </desc> </desclist> return ($in-xml[lang('en-US')])]]></test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-lang-6">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $in-xml := <desclist xml:lang="en"> <desc xml:lang="en-US"> <line>A line of text.</line> </desc> <desc xml:lang="fr"> <line>Une ligne de texte.</line> </desc> </desclist> return ($in-xml// desc[lang('FR')])]]></test>
      <result>
         <assert-xml><![CDATA[<desc xml:lang="fr"><line>Une ligne de texte.</line></desc>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="functx-fn-lang-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $in-xml := <desclist xml:lang="en"> <desc xml:lang="en-US"> <line>A line of text.</line> </desc> <desc xml:lang="fr"> <line>Une ligne de texte.</line> </desc> </desclist> return ($in-xml// desc[lang('en')], $in-xml// desc[lang('en-US')], $in-xml// desc[lang('fr')], $in-xml// desc/line[lang('en')], $in-xml[lang('en-US')], $in-xml// desc[lang('FR')])]]></test>
      <result>
         <assert-xml><![CDATA[<desc xml:lang="en-US"><line>A line of text.</line></desc><desc xml:lang="en-US"><line>A line of text.</line></desc><desc xml:lang="fr"><line>Une ligne de texte.</line></desc><line>A line of text.</line><desc xml:lang="fr"><line>Une ligne de texte.</line></desc>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="functx-fn-last-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_catalog"/>
      <test>(/ catalog/product[last()])</test>
      <result>
         <assert-xml><![CDATA[<product dept="MEN">
  <number>784</number>
  <name language="en">Cotton Dress Shirt</name>
  <colorChoices>white gray</colorChoices>
  <desc>Our <i>favorite</i> shirt!</desc>
 </product>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="functx-fn-local-name-from-QName-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(local-name-from-QName( QName('http://datypic.com/prod', 'number')))</test>
      <result>
         <assert-string-value>number</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-local-name-from-QName-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(local-name-from-QName(QName ('', 'number')))</test>
      <result>
         <assert-string-value>number</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-local-name-from-QName-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(local-name-from-QName( () ))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-local-name-from-QName-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(local-name-from-QName( QName('http://datypic.com/prod', 'number')), local-name-from-QName(QName ('', 'number')), local-name-from-QName( () ))</test>
      <result>
         <assert-string-value>number number</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-local-name-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace pre = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (local-name($in-xml))]]></test>
      <result>
         <assert-string-value>noNamespace</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-local-name-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace pre = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (local-name($in-xml//pre:prefixed))]]></test>
      <result>
         <assert-string-value>prefixed</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-local-name-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace pre = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (local-name($in-xml//unpre:unprefixed))]]></test>
      <result>
         <assert-string-value>unprefixed</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-local-name-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace pre = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (local-name($in-xml//@pre:prefAttr))]]></test>
      <result>
         <assert-string-value>prefAttr</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-local-name-5">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace pre = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (local-name($in-xml//@noNSAttr))]]></test>
      <result>
         <assert-string-value>noNSAttr</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-local-name-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace pre = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (local-name($in-xml), local-name($in-xml//pre:prefixed), local-name($in-xml//unpre:unprefixed), local-name($in-xml//@pre:prefAttr), local-name($in-xml//@noNSAttr))]]></test>
      <result>
         <assert-string-value>noNamespace prefixed unprefixed prefAttr noNSAttr</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-lower-case-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(lower-case('QUERY'))</test>
      <result>
         <assert-string-value>query</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-lower-case-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(lower-case('Query'))</test>
      <result>
         <assert-string-value>query</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-lower-case-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(lower-case('QUERY123'))</test>
      <result>
         <assert-string-value>query123</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-lower-case-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(lower-case('QUERY'), lower-case('Query'), lower-case('QUERY123'))</test>
      <result>
         <assert-string-value>query query query123</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-matches-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $address := '123 Main Street Traverse City, MI 49684' return (matches('query', 'q'))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-matches-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $address := '123 Main Street Traverse City, MI 49684' return (matches('query', 'ue'))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-matches-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $address := '123 Main Street Traverse City, MI 49684' return (matches('query', '^qu'))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-matches-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $address := '123 Main Street Traverse City, MI 49684' return (matches('query', 'qu$'))</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="functx-fn-matches-5">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $address := '123 Main Street Traverse City, MI 49684' return (matches('query', '[ux]'))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-matches-6">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $address := '123 Main Street Traverse City, MI 49684' return (matches('query', 'q.*'))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-matches-7">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $address := '123 Main Street Traverse City, MI 49684' return (matches('query', '[a-z]{5}'))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-matches-8">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $address := '123 Main Street Traverse City, MI 49684' return (matches((), 'q' ))</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="functx-fn-matches-9">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $address := '123 Main Street&#xa;Traverse City, MI 49684' return (matches($address, 'Street.*City'))</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="functx-fn-matches-10">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $address := '123 Main Street Traverse City, MI 49684' return (matches($address, 'Street.*City', 's'))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-matches-11">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $address := '123 Main Street&#xa;Traverse City, MI 49684' return (matches($address, 'Street$'))</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="functx-fn-matches-12">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $address := '123 Main Street&#xa;Traverse City, MI 49684' return (matches($address, 'Street$', 'm'))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-matches-13">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $address := '123 Main Street&#xa;Traverse City, MI 49684' return (matches($address, 'street'))</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="functx-fn-matches-14">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $address := '123 Main Street&#xa;Traverse City, MI 49684' return (matches($address, 'street', 'i'))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-matches-15">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $address := '123 Main Street&#xa;Traverse City, MI 49684' return (matches($address, 'Main Street'))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-matches-16">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $address := '123 Main Street&#xa;Traverse City, MI 49684' return (matches($address, 'Main Street', 'x'))</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="functx-fn-matches-17">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $address := '123 Main Street&#xa;Traverse City, MI 49684' return (matches($address, 'Main \s Street', 'x'))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-matches-18">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $address := '123 Main Street&#xa;Traverse City, MI 49684' return (matches($address, 'street$', 'im'))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-matches-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>
        let $address := '123 Main Street&#xa;Traverse City, MI 49684' 
        return (matches('query', 'q'), matches('query', 'ue'), matches('query', '^qu'), 
            matches('query', 'qu$'), matches('query', '[ux]'), matches('query', 'q.*'), 
            matches('query', '[a-z]{5}'), matches((), 'q' ), matches($address, 'Street.*City'), 
            matches($address, 'Street.*City', 's'), matches($address, 'Street$'), 
            matches($address, 'Street$', 'm'), matches($address, 'street'), 
            matches($address, 'street', 'i'), matches($address, 'Main Street'), 
            matches($address, 'Main Street', 'x'), matches($address, 'Main \s Street', 'x'), 
            matches($address, 'street$', 'im'))</test>
      <result>
         <assert-string-value>true true true false true true true false false true false true false true true false true true</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-max-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_order"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $ordDoc := (/) return (max( (2, 1, 5, 4, 3) ))</test>
      <result>
         <assert-eq>5</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-max-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_order"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $ordDoc := (/) return (max( ('a', 'b', 'c') ))</test>
      <result>
         <assert-string-value>c</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-max-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_order"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $ordDoc := (/) return (max( 2 ))</test>
      <result>
         <assert-eq>2</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-max-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_order"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $ordDoc := (/) return (max($ordDoc//item/string(@dept)))</test>
      <result>
         <assert-string-value>WMN</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-max-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_order"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $ordDoc := (/) return (max( (2, 1, 5, 4, 3) ), max( ('a', 'b', 'c') ), max( 2 ), max($ordDoc//item/string(@dept)))</test>
      <result>
         <assert-string-value>5 c 2 WMN</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-min-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_order"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $ordDoc := (/) return (min( (2.0, 1, 3.5, 4) ))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-min-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_order"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $ordDoc := (/) return (min( ('a', 'b', 'c') ))</test>
      <result>
         <assert-string-value>a</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-min-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_order"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $ordDoc := (/) return (min($ordDoc//item//string(@color)))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-min-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_order"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $ordDoc := (/) return (min($ordDoc//item/@color/string(.)))</test>
      <result>
         <assert-string-value>beige</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-min-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_order"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $ordDoc := (/) return (min( (2.0, 1, 3.5, 4) ), min( ('a', 'b', 'c') ), min($ordDoc//item//string(@color)), min($ordDoc//item/@color/string(.)))</test>
      <result>
         <assert-string-value>1 a  beige</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-minutes-from-dateTime-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(minutes-from-dateTime( xs:dateTime('2006-08-15T10:30:23')))</test>
      <result>
         <assert-eq>30</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-minutes-from-duration-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(minutes-from-duration( xs:dayTimeDuration('PT30M')))</test>
      <result>
         <assert-eq>30</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-minutes-from-duration-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(minutes-from-duration( xs:dayTimeDuration('-PT90M')))</test>
      <result>
         <assert-eq>-30</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-minutes-from-duration-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(minutes-from-duration( xs:dayTimeDuration('PT1M90S')))</test>
      <result>
         <assert-eq>2</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-minutes-from-duration-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(minutes-from-duration( xs:dayTimeDuration('PT3H')))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-minutes-from-duration-5">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(minutes-from-duration( xs:dayTimeDuration('PT60M')))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-minutes-from-duration-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(minutes-from-duration( xs:dayTimeDuration('PT30M')), minutes-from-duration( xs:dayTimeDuration('-PT90M')), minutes-from-duration( xs:dayTimeDuration('PT1M90S')), minutes-from-duration( xs:dayTimeDuration('PT3H')), minutes-from-duration( xs:dayTimeDuration('PT60M')))</test>
      <result>
         <assert-string-value>30 -30 2 0 0</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-minutes-from-time-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(minutes-from-time(xs:time('10:30:23')))</test>
      <result>
         <assert-eq>30</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-month-from-date-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(month-from-date(xs:date('2006-08-15')))</test>
      <result>
         <assert-eq>8</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-month-from-dateTime-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(month-from-dateTime( xs:dateTime('2006-08-15T10:30:23')))</test>
      <result>
         <assert-eq>8</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-months-from-duration-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(months-from-duration( xs:yearMonthDuration('P3M')))</test>
      <result>
         <assert-eq>3</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-months-from-duration-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(months-from-duration( xs:yearMonthDuration('-P18M')))</test>
      <result>
         <assert-eq>-6</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-months-from-duration-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(months-from-duration( xs:yearMonthDuration('P1Y')))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-months-from-duration-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(months-from-duration( xs:yearMonthDuration('P12M')))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-months-from-duration-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(months-from-duration( xs:yearMonthDuration('P3M')), months-from-duration( xs:yearMonthDuration('-P18M')), months-from-duration( xs:yearMonthDuration('P1Y')), months-from-duration( xs:yearMonthDuration('P12M')))</test>
      <result>
         <assert-string-value>3 -6 0 0</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-name-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace pre2 = "http://datypic.com/pre";
         declare namespace unpre2 = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (name($in-xml))]]></test>
      <result>
         <assert-string-value>noNamespace</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-name-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace pre2 = "http://datypic.com/pre";
         declare namespace unpre2 = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (name($in-xml//pre2:prefixed))]]></test>
      <result>
         <assert-string-value>pre:prefixed</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-name-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace pre2 = "http://datypic.com/pre";
         declare namespace unpre2 = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (name($in-xml//unpre2:unprefixed))]]></test>
      <result>
         <assert-string-value>unprefixed</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-name-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace pre2 = "http://datypic.com/pre";
         declare namespace unpre2 = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (name($in-xml//@pre2:prefAttr))]]></test>
      <result>
         <assert-string-value>pre:prefAttr</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-name-5">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace pre2 = "http://datypic.com/pre";
         declare namespace unpre2 = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (name($in-xml//@noNSAttr))]]></test>
      <result>
         <assert-string-value>noNSAttr</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-name-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace pre2 = "http://datypic.com/pre";
         declare namespace unpre2 = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (name($in-xml), name($in-xml//pre2:prefixed), name($in-xml//unpre2:unprefixed), name($in-xml//@pre2:prefAttr), name($in-xml//@noNSAttr))]]></test>
      <result>
         <assert-string-value>noNamespace pre:prefixed unprefixed pre:prefAttr noNSAttr</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-namespace-uri-for-prefix-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace pre = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (namespace-uri-for-prefix( '', $in-xml))]]></test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-namespace-uri-for-prefix-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace pre = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (namespace-uri-for-prefix( 'pre',$in-xml//pre:prefixed))]]></test>
      <result>
         <assert-string-value>http://datypic.com/pre</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-namespace-uri-for-prefix-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace pre = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (namespace-uri-for-prefix( '',$in-xml//unpre:unprefixed))]]></test>
      <result>
         <assert-string-value>http://datypic.com/unpre</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-namespace-uri-for-prefix-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace pre = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (namespace-uri-for-prefix( 'pre',$in-xml//unpre:unprefixed))]]></test>
      <result>
         <assert-string-value>http://datypic.com/pre</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-namespace-uri-for-prefix-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <modified by="O'Neil Delpratt" on="2011-10-07" change="return was not consistent with it's equivalent XQTS test-case"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace pre = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := 
         <noNamespace> 
            <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> 
                <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> 
            </pre:prefixed> 
        </noNamespace> 
        return (namespace-uri-for-prefix('', $in-xml),
                namespace-uri-for-prefix('pre',$in-xml//pre:prefixed),
                namespace-uri-for-prefix('',$in-xml//unpre:unprefixed),
                namespace-uri-for-prefix('pre',$in-xml//unpre:unprefixed))
      ]]></test>
      <result>
         <assert-string-value>http://datypic.com/pre http://datypic.com/unpre http://datypic.com/pre</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-namespace-uri-from-QName-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(namespace-uri-from-QName( QName ('http://datypic.com/pre', 'prefixed')))</test>
      <result>
         <assert-string-value>http://datypic.com/pre</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-namespace-uri-from-QName-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(namespace-uri-from-QName( QName ('', 'unprefixed')))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-namespace-uri-from-QName-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(namespace-uri-from-QName( () ))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-namespace-uri-from-QName-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(namespace-uri-from-QName( QName ('http://datypic.com/pre', 'prefixed')), namespace-uri-from-QName( QName ('', 'unprefixed')), namespace-uri-from-QName( () ))</test>
      <result>
         <assert-string-value>http://datypic.com/pre </assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-namespace-uri-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace pre = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (namespace-uri($in-xml))]]></test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-namespace-uri-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace pre = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (namespace-uri($in-xml//pre:prefixed))]]></test>
      <result>
         <assert-string-value>http://datypic.com/pre</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-namespace-uri-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace pre = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (namespace-uri($in-xml//unpre:unprefixed))]]></test>
      <result>
         <assert-string-value>http://datypic.com/unpre</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-namespace-uri-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace pre = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (namespace-uri($in-xml//@pre:prefAttr))]]></test>
      <result>
         <assert-string-value>http://datypic.com/pre</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-namespace-uri-5">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace pre = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (namespace-uri($in-xml//@noNSAttr))]]></test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-namespace-uri-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace pre = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (namespace-uri($in-xml), namespace-uri($in-xml//pre:prefixed), namespace-uri($in-xml//unpre:unprefixed), namespace-uri($in-xml//@pre:prefAttr), namespace-uri($in-xml//@noNSAttr))]]></test>
      <result>
         <assert-string-value> http://datypic.com/pre http://datypic.com/unpre http://datypic.com/pre </assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-nilled-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $in-xml := <root xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> <child>12</child> <child xsi:nil="true"></child> <child></child> <child/> <child xsi:nil="false"></child> </root> return (nilled($in-xml//child[1]))]]></test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="functx-fn-nilled-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $in-xml := <root xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> <child>12</child> <child xsi:nil="true"></child> <child></child> <child/> <child xsi:nil="false"></child> </root> return (nilled($in-xml//child[3]))]]></test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="functx-fn-nilled-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $in-xml := <root xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> <child>12</child> <child xsi:nil="true"></child> <child></child> <child/> <child xsi:nil="false"></child> </root> return (nilled($in-xml//child[4]))]]></test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="functx-fn-nilled-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $in-xml := <root xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> <child>12</child> <child xsi:nil="true"></child> <child></child> <child/> <child xsi:nil="false"></child> </root> return (nilled($in-xml//child[5]))]]></test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="functx-fn-nilled-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $in-xml := <root xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> <child>12</child> <child xsi:nil="true"></child> <child></child> <child/> <child xsi:nil="false"></child> </root> return (nilled($in-xml//child[1]), nilled($in-xml//child[3]), nilled($in-xml//child[4]), nilled($in-xml//child[5]))]]></test>
      <result>
         <assert-string-value>false false false false</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-node-name-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace pre2 = "http://datypic.com/pre";
         declare namespace unpre2 = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (node-name($in-xml))]]></test>
      <result>
         <assert-string-value>noNamespace</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-node-name-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace pre2 = "http://datypic.com/pre";
         declare namespace unpre2 = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (node-name($in-xml/pre2:prefixed))]]></test>
      <result>
         <assert-string-value>pre:prefixed</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-node-name-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace pre2 = "http://datypic.com/pre";
         declare namespace unpre2 = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (node-name($in-xml//unpre2:unprefixed))]]></test>
      <result>
         <assert-string-value>unprefixed</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-node-name-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace pre2 = "http://datypic.com/pre";
         declare namespace unpre2 = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (node-name($in-xml//@pre2:prefAttr))]]></test>
      <result>
         <assert-string-value>pre:prefAttr</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-node-name-5">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace pre2 = "http://datypic.com/pre";
         declare namespace unpre2 = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (node-name($in-xml//@noNSAttr))]]></test>
      <result>
         <assert-string-value>noNSAttr</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-node-name-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace pre2 = "http://datypic.com/pre";
         declare namespace unpre2 = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (node-name($in-xml), node-name($in-xml/pre2:prefixed), node-name($in-xml//unpre2:unprefixed), node-name($in-xml//@pre2:prefAttr), node-name($in-xml//@noNSAttr))]]></test>
      <result>
         <assert-string-value>noNamespace pre:prefixed unprefixed pre:prefAttr noNSAttr</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-normalize-space-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(normalize-space('query'))</test>
      <result>
         <assert-string-value>query</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-normalize-space-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(normalize-space(' query '))</test>
      <result>
         <assert-string-value>query</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-normalize-space-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(normalize-space('xml query'))</test>
      <result>
         <assert-string-value>xml query</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-normalize-space-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(normalize-space('xml query'))</test>
      <result>
         <assert-string-value>xml query</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-normalize-space-5">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(normalize-space('xml query'))</test>
      <result>
         <assert-string-value>xml query</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-normalize-space-6">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(normalize-space(''))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-normalize-space-7">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(normalize-space(' '))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-normalize-space-8">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(normalize-space(()))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-normalize-space-9">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[(normalize-space( <element> query </element>))]]></test>
      <result>
         <assert-string-value>query</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-normalize-space-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[(normalize-space('query'), normalize-space(' query '), normalize-space('xml query'), normalize-space('xml query'), normalize-space('xml query'), normalize-space(''), normalize-space(' '), normalize-space(()), normalize-space( <element> query </element>))]]></test>
      <result>
         <assert-string-value>query query xml query xml query xml query    query</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-normalize-unicode-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(normalize-unicode('query'))</test>
      <result>
         <assert-string-value>query</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-normalize-unicode-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(normalize-unicode('query', ''))</test>
      <result>
         <assert-string-value>query</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-normalize-unicode-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(normalize-unicode('query'), normalize-unicode('query', ''))</test>
      <result>
         <assert-string-value>query query</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-not-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(not(32 &gt;
         20))</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="functx-fn-not-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_catalog"/>
      <test>(not((/) //product))</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="functx-fn-not-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(not(true()))</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="functx-fn-not-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(not(()))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-not-5">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(not(''))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-not-6">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(not(0))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-not-7">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[(not(<e>false</e>))]]></test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="functx-fn-not-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_catalog"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[(not(32 > 20), not((/) //product), not(true()), not(()), not(''), not(0), not(<e>false</e>))]]></test>
      <result>
         <assert-string-value>false false false true true true false</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-number-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_prices"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $priceDoc := (/) return (number( $priceDoc//prod[1]/price))</test>
      <result>
         <assert-string-value>29.99</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-number-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_prices"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $priceDoc := (/) return (number( $priceDoc//prod[1]/@currency))</test>
      <result>
         <assert-string-value>NaN</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-number-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_prices"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $priceDoc := (/) return (number('29.99'))</test>
      <result>
         <assert-string-value>29.99</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-number-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_prices"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $priceDoc := (/) return (number('ABC'))</test>
      <result>
         <assert-string-value>NaN</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-number-5">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_prices"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $priceDoc := (/) return (number( () ))</test>
      <result>
         <assert-string-value>NaN</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-number-6">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_prices"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $priceDoc := (/) return ($priceDoc// prod/price[number() &gt;
         35])</test>
      <result>
         <assert-xml><![CDATA[<price currency="USD">69.99</price><price currency="USD">39.99</price>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="functx-fn-number-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_prices"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $priceDoc := (/) return (number( $priceDoc//prod[1]/price), number( $priceDoc//prod[1]/@currency), number('29.99'), number('ABC'), number( () ), $priceDoc// prod/price[number() &gt;
         35])</test>
      <result>
         <assert-xml><![CDATA[29.99 NaN 29.99 NaN NaN<price currency="USD">69.99</price><price currency="USD">39.99</price>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="functx-fn-one-or-more-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(one-or-more('a'))</test>
      <result>
         <assert-string-value>a</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-one-or-more-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(one-or-more( ('a', 'b') ))</test>
      <result>
         <assert-string-value>a b</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-one-or-more-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(one-or-more('a'), one-or-more( ('a', 'b') ))</test>
      <result>
         <assert-string-value>a a b</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-position-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $in-xml := <in-xml> <a>1</a> <c>2</c> <a>3</a> <a>4</a> <a>5</a> </in-xml> return ($in-xml/*[position() > 2])]]></test>
      <result>
         <assert-xml><![CDATA[<a>3</a><a>4</a><a>5</a>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="functx-fn-position-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $in-xml := <in-xml> <a>1</a> <c>2</c> <a>3</a> <a>4</a> <a>5</a> </in-xml> return ($in-xml/a[position() > 2])]]></test>
      <result>
         <assert-xml><![CDATA[<a>4</a><a>5</a>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="functx-fn-position-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $in-xml := <in-xml> <a>1</a> <c>2</c> <a>3</a> <a>4</a> <a>5</a> </in-xml> return ($in-xml/a[position() = 3])]]></test>
      <result>
         <assert-xml><![CDATA[<a>4</a>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="functx-fn-position-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $in-xml := <in-xml> <a>1</a> <c>2</c> <a>3</a> <a>4</a> <a>5</a> </in-xml> return ($in-xml/*[position() > 2], $in-xml/a[position() > 2], $in-xml/a[position() = 3])]]></test>
      <result>
         <assert-xml><![CDATA[<a>3</a><a>4</a><a>5</a><a>4</a><a>5</a><a>4</a>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="functx-fn-prefix-from-QName-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace pre2 = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (prefix-from-QName( node-name($in-xml)))]]></test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-prefix-from-QName-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace pre2 = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (prefix-from-QName( node-name($in-xml//pre2:prefixed)))]]></test>
      <result>
         <assert-string-value>pre</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-prefix-from-QName-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace pre2 = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (prefix-from-QName( node-name($in-xml//unpre:unprefixed)))]]></test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-prefix-from-QName-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace pre2 = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (prefix-from-QName( node-name($in-xml//@pre2:prefAttr)))]]></test>
      <result>
         <assert-string-value>pre</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-prefix-from-QName-5">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace pre2 = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (prefix-from-QName( node-name($in-xml//@noNSAttr)))]]></test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-prefix-from-QName-6">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace pre2 = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (prefix-from-QName( node-name(<pre2:new>xyz</pre2:new>)))]]></test>
      <result>
         <assert-string-value>pre2</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-prefix-from-QName-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace pre2 = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (prefix-from-QName( node-name($in-xml)), prefix-from-QName( node-name($in-xml//pre2:prefixed)), prefix-from-QName( node-name($in-xml//unpre:unprefixed)), prefix-from-QName( node-name($in-xml//@pre2:prefAttr)), prefix-from-QName( node-name($in-xml//@noNSAttr)), prefix-from-QName( node-name(<pre2:new>xyz</pre2:new>)))]]></test>
      <result>
         <assert-string-value>pre pre pre2</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-QName-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(QName('http://datypic.com/prod','product'))</test>
      <result>
         <assert-string-value>product</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-QName-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(QName('http://datypic.com/prod', 'pre:product'))</test>
      <result>
         <assert-string-value>pre:product</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-QName-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(QName('', 'product'))</test>
      <result>
         <assert-string-value>product</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-QName-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(QName('http://datypic.com/prod','product'), QName('http://datypic.com/prod', 'pre:product'), QName('', 'product'))</test>
      <result>
         <assert-string-value>product pre:product product</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-remove-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(remove( ('a', 'b', 'c'), 2) )</test>
      <result>
         <assert-string-value>a c</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-remove-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(remove( ('a', 'b', 'c'), 10))</test>
      <result>
         <assert-string-value>a b c</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-remove-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(remove( ('a', 'b', 'c'), 0))</test>
      <result>
         <assert-string-value>a b c</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-remove-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(remove( ('a', 'b', 'c'), 2) , remove( ('a', 'b', 'c'), 10), remove( ('a', 'b', 'c'), 0))</test>
      <result>
         <assert-string-value>a c a b c a b c</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-replace-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(replace('query', 'r', 'as'))</test>
      <result>
         <assert-string-value>queasy</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-replace-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(replace('query', 'qu', 'quack'))</test>
      <result>
         <assert-string-value>quackery</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-replace-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(replace('query', '[ry]', 'l'))</test>
      <result>
         <assert-string-value>quell</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-replace-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(replace('query', '[ry]+', 'l'))</test>
      <result>
         <assert-string-value>quel</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-replace-5">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(replace('query', 'z', 'a'))</test>
      <result>
         <assert-string-value>query</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-replace-6">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(replace('query', 'query', ''))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-replace-7">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(replace( (), 'r', 'as'))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-replace-8">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(replace('Chapter', '(Chap)|(Chapter)', 'x'))</test>
      <result>
         <assert-string-value>xter</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-replace-9">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(replace('reluctant', 'r.*t', 'X'))</test>
      <result>
         <assert-string-value>X</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-replace-10">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(replace('reluctant', 'r.*?t', 'X'))</test>
      <result>
         <assert-string-value>Xant</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-replace-11">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(replace('aaah', 'a{2,3}', 'X'))</test>
      <result>
         <assert-string-value>Xh</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-replace-12">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(replace('aaah', 'a{2,3}?', 'X'))</test>
      <result>
         <assert-string-value>Xah</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-replace-13">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(replace('aaaah', 'a{2,3}', 'X'))</test>
      <result>
         <assert-string-value>Xah</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-replace-14">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(replace('aaaah', 'a{2,3}?', 'X'))</test>
      <result>
         <assert-string-value>XXh</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-replace-15">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(replace('Chap 2...Chap 3...Chap 4...', 'Chap (\d)', 'Sec $1.0'))</test>
      <result>
         <assert-string-value>Sec 2.0...Sec 3.0...Sec 4.0...</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-replace-16">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(replace('abc123', '([a-z])', '$1x'))</test>
      <result>
         <assert-string-value>axbxcx123</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-replace-17">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(replace('2315551212', '(\d{3})(\d{3})(\d{4})', '($1) $2-$3'))</test>
      <result>
         <assert-string-value>(231) 555-1212</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-replace-18">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(replace('2006-10-18', '\d{2}(\d{2})-(\d{2})-(\d{2})', '$2/$3/$1'))</test>
      <result>
         <assert-string-value>10/18/06</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-replace-19">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(replace('25', '(\d+)', '\$$1.00'))</test>
      <result>
         <assert-string-value>$25.00</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-replace-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(replace('query', 'r', 'as'), replace('query', 'qu', 'quack'), replace('query', '[ry]', 'l'), replace('query', '[ry]+', 'l'), replace('query', 'z', 'a'), replace('query', 'query', ''), replace( (), 'r', 'as'), replace('Chapter', '(Chap)|(Chapter)', 'x'), replace('reluctant', 'r.*t', 'X'), replace('reluctant', 'r.*?t', 'X'), replace('aaah', 'a{2,3}', 'X'), replace('aaah', 'a{2,3}?', 'X'), replace('aaaah', 'a{2,3}', 'X'), replace('aaaah', 'a{2,3}?', 'X'), replace('Chap 2...Chap 3...Chap 4...', 'Chap (\d)', 'Sec $1.0'), replace('abc123', '([a-z])', '$1x'), replace('2315551212', '(\d{3})(\d{3})(\d{4})', '($1) $2-$3'), replace('2006-10-18', '\d{2}(\d{2})-(\d{2})-(\d{2})', '$2/$3/$1'), replace('25', '(\d+)', '\$$1.00'))</test>
      <result>
         <assert-string-value>queasy quackery quell quel query   xter X Xant Xh Xah Xah XXh Sec 2.0...Sec 3.0...Sec 4.0... axbxcx123 (231) 555-1212 10/18/06 $25.00</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-resolve-QName-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace ord = "http://datypic.com/ord";
         declare namespace dty = "http://datypic.com";
         declare namespace dty2 = "http://datypic.com/ns2";
         let $root := <root> <order xmlns:ord="http://datypic.com/ord" xmlns="http://datypic.com"> <!-- ... --> </order> </root> return (resolve-QName('myName', $root))]]></test>
      <result>
         <assert-string-value>myName</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-resolve-QName-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace ord = "http://datypic.com/ord";
         declare namespace dty = "http://datypic.com";
         declare namespace dty2 = "http://datypic.com/ns2";
         let $root := <root> <order xmlns:ord="http://datypic.com/ord" xmlns="http://datypic.com"> <!-- ... --> </order> </root> return (resolve-QName('myName', $root/dty:order))]]></test>
      <result>
         <assert-string-value>myName</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-resolve-QName-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace ord = "http://datypic.com/ord";
         declare namespace dty = "http://datypic.com";
         declare namespace dty2 = "http://datypic.com/ns2";
         let $root := <root> <order xmlns:ord="http://datypic.com/ord" xmlns="http://datypic.com"> <!-- ... --> </order> </root> return (resolve-QName( 'ord:myName', $root/dty:order))]]></test>
      <result>
         <assert-string-value>ord:myName</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-resolve-QName-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare namespace ord = "http://datypic.com/ord";
         declare namespace dty = "http://datypic.com";
         declare namespace dty2 = "http://datypic.com/ns2";
         let $root := <root> <order xmlns:ord="http://datypic.com/ord" xmlns="http://datypic.com"> <!-- ... --> </order> </root> return (resolve-QName('myName', $root), resolve-QName('myName', $root/dty:order), resolve-QName( 'ord:myName', $root/dty:order))]]></test>
      <result>
         <assert-string-value>myName myName ord:myName</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-resolve-uri-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(resolve-uri('prod', 'http://datypic.com/'))</test>
      <result>
         <assert-string-value>http://datypic.com/prod</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-resolve-uri-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(resolve-uri('prod2', 'http://datypic.com/prod1'))</test>
      <result>
         <assert-string-value>http://datypic.com/prod2</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-resolve-uri-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(resolve-uri( 'http://example.org','http://datypic.com'))</test>
      <result>
         <assert-string-value>http://example.org</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-resolve-uri-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(resolve-uri( 'http://datypic.com', '../base'))</test>
      <result>
        <any-of>
         <assert-string-value>http://datypic.com</assert-string-value>
         <error code="FORG0002"/>
        </any-of>
      </result>
   </test-case>

   <test-case name="functx-fn-resolve-uri-5">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(resolve-uri( '', 'http://datypic.com'))</test>
      <result>
         <assert-string-value>http://datypic.com</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-resolve-uri-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(resolve-uri('prod', 'http://datypic.com/'), resolve-uri('prod2', 'http://datypic.com/prod1'), resolve-uri( 'http://example.org','http://datypic.com'), resolve-uri( 'http://datypic.com', '../base'), resolve-uri( '', 'http://datypic.com'))</test>
      <result>
         <assert-string-value>http://datypic.com/prod http://datypic.com/prod2 http://example.org http://datypic.com http://datypic.com</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-reverse-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(reverse( (1, 2, 3, 4, 5) ))</test>
      <result>
         <assert-string-value>5 4 3 2 1</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-reverse-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(reverse( (6, 2, 4) ))</test>
      <result>
         <assert-string-value>4 2 6</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-reverse-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(reverse( () ))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-reverse-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(reverse( (1, 2, 3, 4, 5) ), reverse( (6, 2, 4) ), reverse( () ))</test>
      <result>
         <assert-string-value>5 4 3 2 1 4 2 6</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-root-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_order"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $in-xml := <a><x>123</x></a> return (root( (/) //item[1]))]]></test>
      <result>
         <assert-xml><![CDATA[<order num="00299432" date="2006-09-15" cust="0221A">
  <item dept="WMN" num="557" quantity="1" color="beige"/>
  <item dept="ACC" num="563" quantity="1"/>
  <item dept="ACC" num="443" quantity="2"/>
  <item dept="MEN" num="784" quantity="1" color="blue/white"/>
  <item dept="MEN" num="784" quantity="1" color="blue/red"/>
  <item dept="WMN" num="557" quantity="1" color="sage"/>
</order>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="functx-fn-root-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $in-xml := <a><x>123</x></a> return (root($in-xml/x))]]></test>
      <result>
         <assert-xml><![CDATA[<a><x>123</x></a>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="functx-fn-root-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_order"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $in-xml := <a><x>123</x></a> return (root( (/) //item[1]), root($in-xml/x))]]></test>
      <result>
         <assert-xml><![CDATA[<order num="00299432" date="2006-09-15" cust="0221A">
  <item dept="WMN" num="557" quantity="1" color="beige"/>
  <item dept="ACC" num="563" quantity="1"/>
  <item dept="ACC" num="443" quantity="2"/>
  <item dept="MEN" num="784" quantity="1" color="blue/white"/>
  <item dept="MEN" num="784" quantity="1" color="blue/red"/>
  <item dept="WMN" num="557" quantity="1" color="sage"/>
</order><a><x>123</x></a>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="functx-fn-round-half-to-even-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(round-half-to-even(5.5))</test>
      <result>
         <assert-eq>6</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-round-half-to-even-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(round-half-to-even(6.5))</test>
      <result>
         <assert-eq>6</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-round-half-to-even-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(round-half-to-even(9372.253, 2))</test>
      <result>
         <assert-string-value>9372.25</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-round-half-to-even-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(round-half-to-even(9372.253, 0))</test>
      <result>
         <assert-eq>9372</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-round-half-to-even-5">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(round-half-to-even(9372.253, -3))</test>
      <result>
         <assert-eq>9000</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-round-half-to-even-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(round-half-to-even(5.5), round-half-to-even(6.5), round-half-to-even(9372.253, 2), round-half-to-even(9372.253, 0), round-half-to-even(9372.253, -3))</test>
      <result>
         <assert-string-value>6 6 9372.25 9372 9000</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-round-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(round(5))</test>
      <result>
         <assert-eq>5</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-round-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(round(5.1))</test>
      <result>
         <assert-eq>5</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-round-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(round(5.5))</test>
      <result>
         <assert-eq>6</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-round-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(round(-5.5))</test>
      <result>
         <assert-eq>-5</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-round-5">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(round(-5.51))</test>
      <result>
         <assert-eq>-6</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-round-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(round(5), round(5.1), round(5.5), round(-5.5), round(-5.51))</test>
      <result>
         <assert-string-value>5 5 6 -5 -6</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-seconds-from-dateTime-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(seconds-from-dateTime( xs:dateTime('2006-08-15T10:30:23.5')))</test>
      <result>
         <assert-string-value>23.5</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-seconds-from-duration-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(seconds-from-duration( xs:dayTimeDuration('PT30.5S')))</test>
      <result>
         <assert-string-value>30.5</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-seconds-from-duration-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(seconds-from-duration( xs:dayTimeDuration('-PT90.5S')))</test>
      <result>
         <assert-string-value>-30.5</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-seconds-from-duration-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(seconds-from-duration( xs:dayTimeDuration('PT1M')))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-seconds-from-duration-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(seconds-from-duration( xs:dayTimeDuration('PT60S')))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-seconds-from-duration-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(seconds-from-duration( xs:dayTimeDuration('PT30.5S')), seconds-from-duration( xs:dayTimeDuration('-PT90.5S')), seconds-from-duration( xs:dayTimeDuration('PT1M')), seconds-from-duration( xs:dayTimeDuration('PT60S')))</test>
      <result>
         <assert-string-value>30.5 -30.5 0 0</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-seconds-from-time-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(seconds-from-time(xs:time('10:30:23.5')))</test>
      <result>
         <assert-string-value>23.5</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-starts-with-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(starts-with('query', 'que'))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-starts-with-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(starts-with('query', 'query'))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-starts-with-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(starts-with('query', 'u'))</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="functx-fn-starts-with-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(starts-with('query', ''))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-starts-with-5">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(starts-with('', 'query'))</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="functx-fn-starts-with-6">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(starts-with('', ''))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-starts-with-7">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(starts-with('query', ()))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-starts-with-8">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(starts-with(' query', 'q'))</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="functx-fn-starts-with-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(starts-with('query', 'que'), starts-with('query', 'query'), starts-with('query', 'u'), starts-with('query', ''), starts-with('', 'query'), starts-with('', ''), starts-with('query', ()), starts-with(' query', 'q'))</test>
      <result>
         <assert-string-value>true true false true false true true false</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-string-join-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(string-join( ('a', 'b', 'c'), ''))</test>
      <result>
         <assert-string-value>abc</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-string-join-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(string-join( ('a', 'b', 'c'), '/*'))</test>
      <result>
         <assert-string-value>a/*b/*c</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-string-join-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(string-join( ('a', '', 'c'), '/*'))</test>
      <result>
         <assert-string-value>a/*/*c</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-string-join-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(string-join( 'a', '/*'))</test>
      <result>
         <assert-string-value>a</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-string-join-5">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(string-join((), '/*'))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-string-join-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(string-join( ('a', 'b', 'c'), ''), string-join( ('a', 'b', 'c'), '/*'), string-join( ('a', '', 'c'), '/*'), string-join( 'a', '/*'), string-join((), '/*'))</test>
      <result>
         <assert-string-value>abc a/*b/*c a/*/*c a </assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-string-length-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(string-length('query'))</test>
      <result>
         <assert-eq>5</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-string-length-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(string-length(' &#xa;query&#xa; '))</test>
      <result>
         <assert-eq>9</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-string-length-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(string-length(normalize-space(' query ')))</test>
      <result>
         <assert-eq>5</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-string-length-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(string-length('xml query'))</test>
      <result>
         <assert-eq>9</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-string-length-5">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(string-length(''))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-string-length-6">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(string-length(()))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-string-length-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(string-length('query'), string-length(' &#xa;query &#xa; '), string-length(normalize-space('  &#xa;query &#xa; ')), string-length('xml query'), string-length(''), string-length(()))</test>
      <result>
         <assert-string-value>5 10 5 9 0 0</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-string-to-codepoints-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(string-to-codepoints('abc'))</test>
      <result>
         <assert-string-value>97 98 99</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-string-to-codepoints-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(string-to-codepoints('a'))</test>
      <result>
         <assert-eq>97</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-string-to-codepoints-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(string-to-codepoints(''))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-string-to-codepoints-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(string-to-codepoints('abc'), string-to-codepoints('a'), string-to-codepoints(''))</test>
      <result>
         <assert-string-value>97 98 99 97</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-string-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $in-xml-2 := <product dept="MEN"> <number>784</number> <name language="en">Cotton Dress Shirt</name> <colorChoices>white gray</colorChoices> <desc>Our <i>favorite</i> shirt!</desc> </product> return (string($in-xml-2/number))]]></test>
      <result>
         <assert-string-value>784</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-string-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $in-xml-2 := <product dept="MEN"> <number>784</number> <name language="en">Cotton Dress Shirt</name> <colorChoices>white gray</colorChoices> <desc>Our <i>favorite</i> shirt!</desc> </product> return (string($in-xml-2/desc))]]></test>
      <result>
         <assert-string-value>Our favorite shirt!</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-string-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $in-xml-2 := <product dept="MEN"> <number>784</number> <name language="en">Cotton Dress Shirt</name> <colorChoices>white gray</colorChoices> <desc>Our <i>favorite</i> shirt!</desc> </product> return (string($in-xml-2/@dept))]]></test>
      <result>
         <assert-string-value>MEN</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-string-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $in-xml-2 := <product dept="MEN"> <number>784</number> <name language="en">Cotton Dress Shirt</name> <colorChoices>white gray</colorChoices> <desc>Our <i>favorite</i> shirt!</desc> </product> return (string($in-xml-2/number), string($in-xml-2/desc), string($in-xml-2/@dept))]]></test>
      <result>
         <assert-string-value>784 Our favorite shirt! MEN</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-subsequence-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(subsequence( ('a', 'b', 'c', 'd', 'e'), 3) )</test>
      <result>
         <assert-string-value>c d e</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-subsequence-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(subsequence( ('a', 'b', 'c', 'd', 'e'), 3, 2))</test>
      <result>
         <assert-string-value>c d</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-subsequence-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(subsequence( ('a', 'b', 'c', 'd', 'e'), 3, 10))</test>
      <result>
         <assert-string-value>c d e</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-subsequence-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(subsequence( ('a', 'b', 'c', 'd', 'e'), 10))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-subsequence-5">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(subsequence( ('a', 'b', 'c', 'd', 'e'), -2, 5))</test>
      <result>
         <assert-string-value>a b</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-subsequence-6">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(subsequence( (), 3))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-subsequence-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(subsequence( ('a', 'b', 'c', 'd', 'e'), 3) , subsequence( ('a', 'b', 'c', 'd', 'e'), 3, 2), subsequence( ('a', 'b', 'c', 'd', 'e'), 3, 10), subsequence( ('a', 'b', 'c', 'd', 'e'), 10), subsequence( ('a', 'b', 'c', 'd', 'e'), -2, 5), subsequence( (), 3))</test>
      <result>
         <assert-string-value>c d e c d c d e a b</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-substring-after-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(substring-after('query', 'u'))</test>
      <result>
         <assert-string-value>ery</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-substring-after-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(substring-after('queryquery', 'ue'))</test>
      <result>
         <assert-string-value>ryquery</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-substring-after-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(substring-after('query', 'y'))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-substring-after-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(substring-after('query', 'x'))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-substring-after-5">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(substring-after('query', ''))</test>
      <result>
         <assert-string-value>query</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-substring-after-6">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(substring-after('', 'x'))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-substring-after-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(substring-after('query', 'u'), substring-after('queryquery', 'ue'), substring-after('query', 'y'), substring-after('query', 'x'), substring-after('query', ''), substring-after('', 'x'))</test>
      <result>
         <assert-string-value>ery ryquery   query </assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-substring-before-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(substring-before('query', 'r'))</test>
      <result>
         <assert-string-value>que</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-substring-before-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(substring-before('query', 'ery'))</test>
      <result>
         <assert-string-value>qu</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-substring-before-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(substring-before('queryquery', 'ery'))</test>
      <result>
         <assert-string-value>qu</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-substring-before-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(substring-before('query', 'query'))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-substring-before-5">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(substring-before('query', 'x'))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-substring-before-6">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(substring-before('query', ''))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-substring-before-7">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(substring-before('query', ()))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-substring-before-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(substring-before('query', 'r'), substring-before('query', 'ery'), substring-before('queryquery', 'ery'), substring-before('query', 'query'), substring-before('query', 'x'), substring-before('query', ''), substring-before('query', ()))</test>
      <result>
         <assert-string-value>que qu qu    </assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-substring-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(substring('query', 1))</test>
      <result>
         <assert-string-value>query</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-substring-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(substring('query', 3))</test>
      <result>
         <assert-string-value>ery</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-substring-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(substring('query', 1, 1))</test>
      <result>
         <assert-string-value>q</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-substring-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(substring('query', 2, 3))</test>
      <result>
         <assert-string-value>uer</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-substring-5">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(substring('query', 2, 850))</test>
      <result>
         <assert-string-value>uery</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-substring-6">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(substring('query', 6, 2))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-substring-7">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(substring('query', -2))</test>
      <result>
         <assert-string-value>query</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-substring-8">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(substring('query', -2, 5))</test>
      <result>
         <assert-string-value>qu</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-substring-9">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(substring('query', 1, 0))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-substring-10">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(substring('', 1))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-substring-11">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(substring((), 1))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-substring-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(substring('query', 1), substring('query', 3), substring('query', 1, 1), substring('query', 2, 3), substring('query', 2, 850), substring('query', 6, 2), substring('query', -2), substring('query', -2, 5), substring('query', 1, 0), substring('', 1), substring((), 1))</test>
      <result>
         <assert-string-value>query ery q uer uery  query qu   </assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-sum-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_order"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $ordDoc := (/) return (sum( (1, 2, 3) ))</test>
      <result>
         <assert-eq>6</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-sum-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_order"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $ordDoc := (/) return (sum($ordDoc//item/@quantity))</test>
      <result>
         <assert-eq>7</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-sum-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_order"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $ordDoc := (/) return (sum( (xs:yearMonthDuration('P1Y2M'), xs:yearMonthDuration('P2Y3M')) ))</test>
      <result>
         <assert-string-value>P3Y5M</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-sum-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_order"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $ordDoc := (/) return (sum( (1, 2, 3, () ) ))</test>
      <result>
         <assert-eq>6</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-sum-5">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_order"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $ordDoc := (/) return (sum( () ))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-sum-6">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_order"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $ordDoc := (/) return (sum( (), () ))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-sum-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <environment ref="functx_order"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $ordDoc := (/) return (sum( (1, 2, 3) ), sum($ordDoc//item/@quantity), sum( (xs:yearMonthDuration('P1Y2M'), xs:yearMonthDuration('P2Y3M')) ), sum( (1, 2, 3, () ) ), sum( () ), sum( (), () ))</test>
      <result>
         <assert-string-value>6 7 P3Y5M 6 0</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-timezone-from-date-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(timezone-from-date( xs:date('2006-08-15-05:00')))</test>
      <result>
         <assert-string-value>-PT5H</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-timezone-from-date-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(timezone-from-date( xs:date('2006-08-15')))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-timezone-from-date-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(timezone-from-date( xs:date('2006-08-15-05:00')), timezone-from-date( xs:date('2006-08-15')))</test>
      <result>
         <assert-string-value>-PT5H</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-timezone-from-dateTime-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(timezone-from-dateTime( xs:dateTime('2006-08-15T10:30:23-05:00')))</test>
      <result>
         <assert-string-value>-PT5H</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-timezone-from-dateTime-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(timezone-from-dateTime( xs:dateTime('2006-08-15T10:30:23')))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-timezone-from-dateTime-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(timezone-from-dateTime( xs:dateTime('2006-08-15T10:30:23-05:00')), timezone-from-dateTime( xs:dateTime('2006-08-15T10:30:23')))</test>
      <result>
         <assert-string-value>-PT5H</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-timezone-from-time-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(timezone-from-time( xs:time('09:54:00-05:00')))</test>
      <result>
         <assert-string-value>-PT5H</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-timezone-from-time-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(timezone-from-time( xs:time('09:54:00+05:00')))</test>
      <result>
         <assert-string-value>PT5H</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-timezone-from-time-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(timezone-from-time( xs:time('09:54:00Z')))</test>
      <result>
         <assert-string-value>PT0S</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-timezone-from-time-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(timezone-from-time( xs:time('09:54:00')))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-timezone-from-time-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(timezone-from-time( xs:time('09:54:00-05:00')), timezone-from-time( xs:time('09:54:00+05:00')), timezone-from-time( xs:time('09:54:00Z')), timezone-from-time( xs:time('09:54:00')))</test>
      <result>
         <assert-string-value>-PT5H PT5H PT0S</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-tokenize-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(tokenize( 'a b c', '\s'))</test>
      <result>
         <assert-string-value>a b c</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-tokenize-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>string-join(tokenize( 'a    b c', '\s'), '|')</test>
      <result>
         <assert-string-value>a||||b|c</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-tokenize-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(tokenize( 'a b c', '\s+'))</test>
      <result>
         <assert-string-value>a b c</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-tokenize-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(tokenize( ' b c', '\s'))</test>
      <result>
         <assert-string-value> b c</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-tokenize-5">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(tokenize( 'a,b,c', ','))</test>
      <result>
         <assert-string-value>a b c</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-tokenize-6">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(tokenize( 'a,b,,c', ','))</test>
      <result>
         <assert-string-value>a b  c</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-tokenize-7">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(tokenize( 'a, b, c', '[,\s]+'))</test>
      <result>
         <assert-string-value>a b c</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-tokenize-8">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(tokenize( '2006-12-25T12:15:00', '[\-T:]'))</test>
      <result>
         <assert-string-value>2006 12 25 12 15 00</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-tokenize-9">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(tokenize( 'Hello, there.', '\W+'))</test>
      <result>
         <assert-string-value>Hello there </assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-tokenize-10">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(tokenize( (), '\s+'))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-tokenize-11">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(tokenize( 'abc', '\s'))</test>
      <result>
         <assert-string-value>abc</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-tokenize-12">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(tokenize( 'a,xb,xc', ',|,x'))</test>
      <result>
         <assert-string-value>a xb xc</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-tokenize-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(tokenize( 'a b c', '\s'), tokenize( 'a b c', '\s'), tokenize( 'a b c', '\s+'), tokenize( ' b c', '\s'), tokenize( 'a,b,c', ','), tokenize( 'a,b,,c', ','), tokenize( 'a, b, c', '[,\s]+'), tokenize( '2006-12-25T12:15:00', '[\-T:]'), tokenize( 'Hello, there.', '\W+'), tokenize( (), '\s+'), tokenize( 'abc', '\s'), tokenize( 'a,xb,xc', ',|,x'))</test>
      <result>
         <assert-string-value>a b c a b c a b c  b c a b c a b  c a b c 2006 12 25 12 15 00 Hello there  abc a xb xc</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-translate-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(translate('1999/01/02', '/', '-'))</test>
      <result>
         <assert-string-value>1999-01-02</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-translate-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(translate('xml query', 'qlmx', 'QLMX'))</test>
      <result>
         <assert-string-value>XML Query</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-translate-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(translate('xml query', 'qlmx ', 'Q'))</test>
      <result>
         <assert-string-value>Query</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-translate-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(translate('xml query', 'qlmx ', ''))</test>
      <result>
         <assert-string-value>uery</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-translate-5">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(translate('xml query', 'abcd', 'ABCD'))</test>
      <result>
         <assert-string-value>xml query</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-translate-6">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(translate('', 'qlmx ', 'Q'))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-translate-7">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(translate((), 'qlmx ', 'Q'))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-translate-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(translate('1999/01/02', '/', '-'), translate('xml query', 'qlmx', 'QLMX'), translate('xml query', 'qlmx ', 'Q'), translate('xml query', 'qlmx ', ''), translate('xml query', 'abcd', 'ABCD'), translate('', 'qlmx ', 'Q'), translate((), 'qlmx ', 'Q'))</test>
      <result>
         <assert-string-value>1999-01-02 XML Query Query uery xml query  </assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-true-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(true())</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="functx-fn-upper-case-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(upper-case('query'))</test>
      <result>
         <assert-string-value>QUERY</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-upper-case-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(upper-case('QUERY'))</test>
      <result>
         <assert-string-value>QUERY</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-upper-case-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(upper-case('Query'))</test>
      <result>
         <assert-string-value>QUERY</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-upper-case-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(upper-case('query-123'))</test>
      <result>
         <assert-string-value>QUERY-123</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-upper-case-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(upper-case('query'), upper-case('QUERY'), upper-case('Query'), upper-case('query-123'))</test>
      <result>
         <assert-string-value>QUERY QUERY QUERY QUERY-123</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-year-from-date-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(year-from-date(xs:date('2006-08-15')))</test>
      <result>
         <assert-eq>2006</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-year-from-dateTime-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(year-from-dateTime( xs:dateTime('2006-08-15T10:30:23')))</test>
      <result>
         <assert-eq>2006</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-years-from-duration-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(years-from-duration( xs:yearMonthDuration('P3Y')))</test>
      <result>
         <assert-eq>3</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-years-from-duration-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(years-from-duration( xs:yearMonthDuration('P3Y11M')))</test>
      <result>
         <assert-eq>3</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-years-from-duration-3">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(years-from-duration( xs:yearMonthDuration('-P18M')))</test>
      <result>
         <assert-eq>-1</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-years-from-duration-4">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(years-from-duration( xs:yearMonthDuration('P1Y18M')))</test>
      <result>
         <assert-eq>2</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-years-from-duration-5">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(years-from-duration( xs:yearMonthDuration('P12M')))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="functx-fn-years-from-duration-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(years-from-duration( xs:yearMonthDuration('P3Y')), years-from-duration( xs:yearMonthDuration('P3Y11M')), years-from-duration( xs:yearMonthDuration('-P18M')), years-from-duration( xs:yearMonthDuration('P1Y18M')), years-from-duration( xs:yearMonthDuration('P12M')))</test>
      <result>
         <assert-string-value>3 3 -1 2 1</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-zero-or-one-1">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(zero-or-one( () ))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="functx-fn-zero-or-one-2">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(zero-or-one('a'))</test>
      <result>
         <assert-string-value>a</assert-string-value>
      </result>
   </test-case>

   <test-case name="functx-fn-zero-or-one-all">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
      <test>(zero-or-one( () ), zero-or-one('a'))</test>
      <result>
         <assert-string-value>a</assert-string-value>
      </result>
   </test-case>
</test-set>