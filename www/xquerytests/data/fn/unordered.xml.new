<?xml version="1.0" encoding="UTF-8"?>
<test-set name="fn-unordered" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">
  <description>Tests for the unordered() function. (Note: many of these tests will only work if unordered() is implemented as a no-op. The tests are therefore incorrect. I'm leaving them as such until someone cares to challenge the results - Michael Kay 2011-06-30 </description>
  <link document="http://www.w3.org/TR/xpath-functions-30/" idref="func-unordered" type="spec"/>
  <test-case name="fn-unordered-mix-args-001">
    <description> arg: sequence of string </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:unordered( (&quot;c&quot;,1, &quot;xzy&quot;))</test>
    <result-string/>
    <result>
      <assert-permutation>&quot;c&quot;, 1, &quot;xzy&quot;</assert-permutation>
    </result>
  </test-case>
  <test-case name="fn-unordered-mix-args-002">
    <description> arg: sequence of string </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:unordered( (&quot;c&quot;, &quot;b&quot;, &quot;a&quot;) )</test>
    <result-string/>
    <result>
      <assert-permutation>&quot;c&quot;,  &quot;b&quot;, &quot;a&quot;</assert-permutation>
    </result>
  </test-case>
  <test-case name="fn-unordered-mix-args-003">
    <description> arg: sequence of string </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:unordered ( (&quot;a&quot;, &quot;b&quot;, &quot;c&quot;))</test>
    <result-string/>
    <result>
      <assert-permutation>&quot;a&quot;, &quot;b&quot;, &quot;c&quot;</assert-permutation>
    </result>
  </test-case>
  <test-case name="fn-unordered-mix-args-004">
    <description> arg: sequence of string </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:unordered ( (&quot;a&quot;, xs:string(&quot;&quot;), &quot;b&quot;, &quot;c&quot;))</test>
    <result-string/>
    <result>
      <assert-permutation>&quot;a&quot;, &quot;&quot;,  &quot;b&quot;, &quot;c&quot;</assert-permutation>
    </result>
  </test-case>
  <test-case name="fn-unordered-mix-args-005">
    <description> arg: sequence of string  anyURI </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:unordered ( (&quot;a&quot;, xs:anyURI(&quot;www.example.com&quot;), &quot;b&quot;, &quot;c&quot;))</test>
    <result-string/>
    <result>
      <assert-permutation>&quot;a&quot;, &quot;www.example.com&quot;, &quot;b&quot;, &quot;c&quot;</assert-permutation>
    </result>
  </test-case>
  <test-case name="fn-unordered-mix-args-006">
    <description> arg: sequence of string </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:unordered ( (&quot;a&quot;, (), (), &quot;b&quot;, &quot;c&quot;))</test>
    <result-string/>
    <result>
      <assert-permutation>&quot;a&quot;, &quot;b&quot;, &quot;c&quot;</assert-permutation>
    </result>
  </test-case>
  <test-case name="fn-unordered-mix-args-007">
    <description> arg: sequence of string  integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:unordered ( (&quot;a&quot;, xs:integer(&quot;100&quot;), xs:integer(&quot;-100&quot;), &quot;b&quot;, &quot;c&quot;))</test>
    <result-string/>
    <result>
      <assert-permutation>&quot;a&quot;, 100, -100, &quot;b&quot;, &quot;c&quot;</assert-permutation>
    </result>
  </test-case>
  <test-case name="fn-unordered-mix-args-008">
    <description> arg: sequence of string , decimal  integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:unordered ( (&quot;a&quot;, xs:decimal(&quot;-1.000000000001&quot;), xs:integer(&quot;-100&quot;), &quot;b&quot;, &quot;c&quot;))</test>
    <result-string/>
    <result>
      <assert-permutation>&quot;a&quot;, -1.000000000001, -100, &quot;b&quot;, &quot;c&quot;</assert-permutation>
    </result>
  </test-case>
  <test-case name="fn-unordered-mix-args-009">
    <description> arg: sequence of string  float </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:unordered ( (&quot;a&quot;, xs:float(&quot;INF&quot;), &quot;b&quot;, &quot;c&quot;))</test>
    <result-string/>
    <result>
      <assert-permutation>&quot;a&quot;, xs:float(&quot;INF&quot;), &quot;b&quot;, &quot;c&quot;</assert-permutation>
    </result>
  </test-case>
  <test-case name="fn-unordered-mix-args-010">
    <description> arg: sequence of string  float </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:unordered ( (&quot;a&quot;, xs:float(&quot;-INF&quot;), &quot;b&quot;, &quot;c&quot;))</test>
    <result-string/>
    <result>
      <assert-permutation>&quot;a&quot;, xs:float('-INF'), &quot;b&quot;, &quot;c&quot;</assert-permutation>
    </result>
  </test-case>
  <test-case name="fn-unordered-mix-args-011">
    <description> arg: sequence of string  float </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:unordered ( (&quot;a&quot;, xs:float(&quot;NaN&quot;), &quot;b&quot;, &quot;c&quot;))</test>
    <result-string/>
    <result>
      <assert-permutation>&quot;a&quot;, xs:float('NaN'), &quot;b&quot;, &quot;c&quot;</assert-permutation>
    </result>
  </test-case>
  <test-case name="fn-unordered-mix-args-012">
    <description> arg: sequence of string  float </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:unordered ( (&quot;a&quot;, xs:float(&quot;1.01&quot;), &quot;b&quot;, &quot;c&quot;))</test>
    <result-string/>
    <result>
      <assert-permutation>&quot;a&quot;, 1.01, &quot;b&quot;, &quot;c&quot;</assert-permutation>
    </result>
  </test-case>
  <test-case name="fn-unordered-mix-args-013">
    <description> arg: sequence of string  double </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:unordered ( (&quot;a&quot;, xs:double(&quot;NaN&quot;), &quot;b&quot;, &quot;c&quot;))</test>
    <result-string/>
    <result>
      <assert-permutation>&quot;a&quot;, xs:double('NaN'), &quot;b&quot;, &quot;c&quot;</assert-permutation>
    </result>
  </test-case>
  <test-case name="fn-unordered-mix-args-014">
    <description> arg: sequence of string  double </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:unordered ( (&quot;a&quot;, xs:double(&quot;1.01&quot;), &quot;b&quot;, &quot;c&quot;))</test>
    <result-string/>
    <result>
      <assert-permutation>&quot;a&quot;, 1.01, &quot;b&quot;, &quot;c&quot;</assert-permutation>
    </result>
  </test-case>
  <test-case name="fn-unordered-mix-args-015">
    <description> arg: sequence of string  double </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:unordered ( (&quot;a&quot;, xs:double(&quot;-INF&quot;), &quot;b&quot;, &quot;c&quot;))</test>
    <result-string/>
    <result>
      <assert-permutation>&quot;a&quot;, xs:double('-INF'), &quot;b&quot;, &quot;c&quot;</assert-permutation>
    </result>
  </test-case>
  <test-case name="fn-unordered-mix-args-016">
    <description> arg: sequence of string  double </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:unordered ( (&quot;a&quot;, xs:double(&quot;INF&quot;), &quot;b&quot;, &quot;c&quot;))</test>
    <result-string/>
    <result>
      <assert-permutation>&quot;a&quot;, xs:double(&quot;INF&quot;), &quot;b&quot;, &quot;c&quot;</assert-permutation>
    </result>
  </test-case>
  <test-case name="fn-unordered-mix-args-017">
    <description> arg: sequence of string  boolean </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:unordered ( (&quot;a&quot;, xs:boolean(&quot;1&quot;), &quot;b&quot;, &quot;c&quot;))</test>
    <result-string/>
    <result>
      <assert-permutation>&quot;a&quot;, true(), &quot;b&quot;, &quot;c&quot;</assert-permutation>
    </result>
  </test-case>
  <test-case name="fn-unordered-mix-args-018">
    <description> arg: sequence of string  boolean </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:unordered ( (&quot;a&quot;, xs:boolean(&quot;0&quot;), &quot;b&quot;, &quot;c&quot;))</test>
    <result-string/>
    <result>
      <assert-permutation>&quot;a&quot;, false(), &quot;b&quot;, &quot;c&quot;</assert-permutation>
    </result>
  </test-case>
  <test-case name="fn-unordered-mix-args-019">
    <description> arg: sequence of string  boolean </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:unordered ( (&quot;a&quot;, xs:boolean(&quot;true&quot;), &quot;b&quot;, &quot;c&quot;))</test>
    <result-string/>
    <result>
      <assert-permutation>&quot;a&quot;, true(), &quot;b&quot;, &quot;c&quot;</assert-permutation>
    </result>
  </test-case>
  <test-case name="fn-unordered-mix-args-020">
    <description> arg: sequence of string  boolean </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:unordered ( (&quot;a&quot;, xs:boolean(&quot;false&quot;), &quot;b&quot;, &quot;c&quot;))</test>
    <result-string/>
    <result>
      <assert-permutation>&quot;a&quot;, false(), &quot;b&quot;, &quot;c&quot;</assert-permutation>
    </result>
  </test-case>
  <test-case name="fn-unordered-mix-args-021">
    <description> arg: sequence of string  date </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:unordered ( (&quot;a&quot;, xs:date(&quot;1993-03-31&quot;), &quot;b&quot;, &quot;c&quot;))</test>
    <result-string/>
    <result>
      <assert-permutation>&quot;a&quot;, xs:date('1993-03-31'), &quot;b&quot;, &quot;c&quot;</assert-permutation>
    </result>
  </test-case>
  <test-case name="fn-unordered-mix-args-022">
    <description> arg: sequence of string  dateTime </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:unordered ( (&quot;a&quot;, xs:dateTime(&quot;1972-12-31T00:00:00&quot;), &quot;b&quot;, &quot;c&quot;))</test>
    <result-string/>
    <result>
      <assert-permutation>&quot;a&quot;, xs:dateTime(&quot;1972-12-31T00:00:00&quot;), &quot;b&quot;, &quot;c&quot;</assert-permutation>
    </result>
  </test-case>
  <test-case name="fn-unordered-mix-args-023">
    <description> arg: sequence of string  time </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:unordered ( (&quot;a&quot;, xs:time(&quot;12:30:00&quot;), &quot;b&quot;, &quot;c&quot;))</test>
    <result-string/>
    <result>
      <assert-permutation>&quot;a&quot;, xs:time('12:30:00'), &quot;b&quot;, &quot;c&quot;</assert-permutation>
    </result>
  </test-case>
  <test-case name="K-SeqUnorderedFunc-1">
    <description> A test whose essence is: `unordered()`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>unordered()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqUnorderedFunc-2">
    <description> A test whose essence is: `unordered(1, 2)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>unordered(1, 2)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqUnorderedFunc-3">
    <description> A test whose essence is: `unordered(1) eq 1`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>unordered(1) eq 1</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqUnorderedFunc-4">
    <description> A test whose essence is: `count(unordered((1, 2, 3))) eq 3`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>count(unordered((1, 2, 3))) eq 3</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqUnorderedFunc-5">
    <description> A test whose essence is: `count(unordered((1, 2, current-time()))) eq 3`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>count(unordered((1, 2, current-time()))) eq 3</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqUnorderedFunc-6">
    <description> A test whose essence is: `empty(unordered(()))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(unordered(()))</test>
    <result-string/>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-SeqUnorderedFunc-7">
    <description> A test whose essence is: `deep-equal((1, 2, 3), unordered((1, 2, 3)))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal((1, 2, 3), unordered((1, 2, 3)))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqUnorderedFunc-8">
    <description> A test whose essence is: `unordered(error())`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>unordered(error())</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOER0000&quot;))</result-string>
    <result>
      <error code="FOER0000"/>
    </result>
  </test-case>
  <test-case name="cbcl-fn-unordered-001">
    <description> Tests optimizations for unordered </description>
    <created by="Nick Jones" on="2008-06-12"/>
    <test>boolean(unordered(reverse((1 to 10)[. div 2 = 2])))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="cbcl-fn-unordered-002">
    <description> Tries EvaluateOptionalItem on fn:unordered </description>
    <created by="Nick Jones" on="2008-06-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[local-name(unordered(<a><b/><c/></a>/*[1]))]]>
    </test>
    <result-string>xs:string(&quot;b&quot;)</result-string>
    <result>
      <assert-string-value>b</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-fn-unordered-003">
    <description> Tests corner evaluation case </description>
    <created by="Nick Jones" on="2008-06-27"/>
    <test>floor(unordered((1 to 10)[. div 2 = 0]))</test>
    <result-string>xs:string(&quot;&quot;)</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
</test-set>