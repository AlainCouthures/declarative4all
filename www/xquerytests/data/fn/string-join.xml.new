<?xml version="1.0" encoding="UTF-8"?>
<test-set name="fn-string-join" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">
  <description>Tests for the string-join() function</description>
  <link document="http://www.w3.org/TR/xpath-functions-30/" idref="func-string-join" type="spec"/>
  <test-case name="fn-string-join2args-1">
    <description> Evaluates The &quot;string-join&quot; function with the arguments set as follows: $arg1 = xs:string(lower bound) $arg2 = xs:string(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:string-join(xs:string(&quot;This is a characte&quot;),xs:string(&quot;This is a characte&quot;))</test>
    <result-string>xs:string(&quot;This is a characte&quot;)</result-string>
    <result>
      <assert-string-value>This is a characte</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-string-join2args-2">
    <description> Evaluates The &quot;string-join&quot; function with the arguments set as follows: $arg1 = xs:string(mid range) $arg2 = xs:string(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:string-join(xs:string(&quot;This is a characte&quot;),xs:string(&quot;This is a characte&quot;))</test>
    <result-string>xs:string(&quot;This is a characte&quot;)</result-string>
    <result>
      <assert-string-value>This is a characte</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-string-join2args-3">
    <description> Evaluates The &quot;string-join&quot; function with the arguments set as follows: $arg1 = xs:string(upper bound) $arg2 = xs:string(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:string-join(xs:string(&quot;This is a characte&quot;),xs:string(&quot;This is a characte&quot;))</test>
    <result-string>xs:string(&quot;This is a characte&quot;)</result-string>
    <result>
      <assert-string-value>This is a characte</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-string-join2args-4">
    <description> Evaluates The &quot;string-join&quot; function with the arguments set as follows: $arg1 = xs:string(lower bound) $arg2 = xs:string(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:string-join(xs:string(&quot;This is a characte&quot;),xs:string(&quot;This is a characte&quot;))</test>
    <result-string>xs:string(&quot;This is a characte&quot;)</result-string>
    <result>
      <assert-string-value>This is a characte</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-string-join2args-5">
    <description> Evaluates The &quot;string-join&quot; function with the arguments set as follows: $arg1 = xs:string(lower bound) $arg2 = xs:string(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:string-join(xs:string(&quot;This is a characte&quot;),xs:string(&quot;This is a characte&quot;))</test>
    <result-string>xs:string(&quot;This is a characte&quot;)</result-string>
    <result>
      <assert-string-value>This is a characte</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-string-join-1">
    <description> Evaluates The &quot;string-join&quot; function as per example 1 for this frunction in FO sepecs. </description>
    <created by="Carmelo Montanez" on="2005-06-24"/>
    <test>fn:string-join(('Now', 'is', 'the', 'time', '...'), ' ')</test>
    <result-string>xs:string(&quot;Now is the time ...&quot;)</result-string>
    <result>
      <assert-string-value>Now is the time ...</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-string-join-2">
    <description> Evaluates The &quot;string-join&quot; function as per example 2 for this function in the FO specs. </description>
    <created by="Carmelo Montanez" on="2005-06-24"/>
    <test>fn:string-join(('Blow, ', 'blow, ', 'thou ', 'winter ', 'wind!'), '')</test>
    <result-string>xs:string(&quot;Blow, blow, thou winter wind!&quot;)</result-string>
    <result>
      <assert-string-value>Blow, blow, thou winter wind!</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-string-join-3">
    <description> Evaluates The &quot;string-join&quot; function as per example 3 for this function in the FO specs. Use of fn:count to avoid empty file. </description>
    <created by="Carmelo Montanez" on="2005-06-24"/>
    <test>fn:count(fn:string-join((), 'separator'))</test>
    <result-string>xs:string(&quot;1&quot;)</result-string>
    <result>
      <assert-string-value>1</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-string-join-4">
    <description> Evaluates The &quot;string-join&quot; function with the arguments set as follows: $arg1 = () $arg2 = &quot;&quot; </description>
    <created by="Carmelo Montanez" on="2005-06-24"/>
    <test>fn:count(fn:string-join((),&quot;&quot;))</test>
    <result-string>xs:string(&quot;1&quot;)</result-string>
    <result>
      <assert-string-value>1</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-string-join-5">
    <description> Evaluates The &quot;string-join&quot; function with the arguments set as follows: $arg1 = &quot;&quot; $arg2 = &quot;&quot; </description>
    <created by="Carmelo Montanez" on="2005-06-24"/>
    <test>fn:count(fn:string-join(&quot;&quot;,&quot;&quot;))</test>
    <result-string>xs:string(&quot;1&quot;)</result-string>
    <result>
      <assert-string-value>1</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-string-join-6">
    <description> Evaluates The &quot;string-join&quot; function with the arguments set as follows: $arg1 = &quot;&quot; $arg2 = &quot;A Character String&quot;. </description>
    <created by="Carmelo Montanez" on="2005-06-24"/>
    <test>fn:count(fn:string-join(&quot;&quot;,&quot;A Character String&quot;))</test>
    <result-string>xs:string(&quot;1&quot;)</result-string>
    <result>
      <assert-string-value>1</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-string-join-7">
    <description> Evaluates The &quot;string-join&quot; function with the arguments set as follows: $arg1 = () $arg2 = &quot;A Character String&quot; </description>
    <created by="Carmelo Montanez" on="2005-06-24"/>
    <test>fn:count(fn:string-join((),&quot;A Character String&quot;))</test>
    <result-string>xs:string(&quot;1&quot;)</result-string>
    <result>
      <assert-string-value>1</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-string-join-8">
    <description> Evaluates The &quot;string-join&quot; function with the arguments set as follows: $arg1 = &quot;AAAAABBBBBCCCCC&quot; $arg2 = &quot;BBBBB&quot; </description>
    <created by="Carmelo Montanez" on="2005-06-24"/>
    <test>fn:string-join((&quot;AAAAABBBBBCCCCC&quot;),&quot;BBBBB&quot;)</test>
    <result-string>xs:string(&quot;AAAAABBBBBCCCCC&quot;)</result-string>
    <result>
      <assert-string-value>AAAAABBBBBCCCCC</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-string-join-9">
    <description> Evaluates The &quot;string-join&quot; function with the arguments set as follows: $arg1 = (&quot;AAAAABBBBB&quot;) $arg2 = &quot; &quot; </description>
    <created by="Carmelo Montanez" on="2005-06-24"/>
    <test>fn:string-join((&quot;AAAAABBBBB&quot;),&quot; &quot;)</test>
    <result-string>xs:string(&quot;AAAAABBBBB&quot;)</result-string>
    <result>
      <assert-string-value>AAAAABBBBB</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-string-join-10">
    <description> Evaluates The &quot;string-join&quot; function with the arguments set as follows: $arg1 = (&quot; &quot;) $arg2 = &quot; AAAAABBBBB&quot;. Use of count to avoid empty file </description>
    <created by="Carmelo Montanez" on="2005-06-24"/>
    <test>fn:count(fn:string-join((&quot; &quot;),&quot;AAAAABBBBB&quot;))</test>
    <result-string>xs:string(&quot;1&quot;)</result-string>
    <result>
      <assert-string-value>1</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-string-join-11">
    <description> Evaluates The &quot;string-join&quot; function using it as a argument of a fn:not - returns true </description>
    <created by="Carmelo Montanez" on="2005-06-24"/>
    <test>fn:not(fn:string-join((),&quot;A&quot;))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-string-join-12">
    <description> Evaluates The &quot;string-join&quot; function using it as a argument of a fn:not - returns true </description>
    <created by="Carmelo Montanez" on="2005-06-24"/>
    <test>fn:not(fn:string-join((&quot;A&quot;),&quot;B&quot;))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-string-join-13">
    <description> Evaluates The &quot;string-join&quot; function with the arguments set as follows: $arg1 = xs:string(&quot;A&quot;) $arg2 = &quot;A&quot; </description>
    <created by="Carmelo Montanez" on="2005-06-24"/>
    <test>fn:string-join((xs:string(&quot;A&quot;)),&quot;A&quot;)</test>
    <result-string>xs:string(&quot;A&quot;)</result-string>
    <result>
      <assert-string-value>A</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-string-join-14">
    <description> Evaluates The &quot;string-join&quot; function with the arguments set as follows: $arg1 = &quot;A&quot; $arg2 = xs:string(&quot;A&quot;) </description>
    <created by="Carmelo Montanez" on="2005-06-24"/>
    <test>fn:string-join((&quot;A&quot;),xs:string(&quot;A&quot;))</test>
    <result-string>xs:string(&quot;A&quot;)</result-string>
    <result>
      <assert-string-value>A</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-string-join-15">
    <description> Evaluates The &quot;string-join&quot; function with the arguments set as follows: $arg1 = &quot;A&quot; $arg2 = &quot;a&quot; </description>
    <created by="Carmelo Montanez" on="2005-06-24"/>
    <test>fn:string-join((&quot;A&quot;),&quot;a&quot;)</test>
    <result-string>xs:string(&quot;A&quot;)</result-string>
    <result>
      <assert-string-value>A</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-string-join-16">
    <description> Evaluates The &quot;string-join&quot; function with the arguments set as follows: $arg1 = &quot;a&quot; $arg2 = &quot;A&quot; </description>
    <created by="Carmelo Montanez" on="2005-06-24"/>
    <test>fn:string-join((&quot;a&quot;),&quot;A&quot;)</test>
    <result-string>xs:string(&quot;a&quot;)</result-string>
    <result>
      <assert-string-value>a</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-string-join-17">
    <description> Evaluates The &quot;string-join&quot; function with the arguments set as follows: $arg1 = &quot;string-join&quot; $arg2 = &quot;string-join&quot; </description>
    <created by="Carmelo Montanez" on="2005-06-24"/>
    <test>fn:string-join(&quot;string-join&quot;,&quot;string-join&quot;)</test>
    <result-string>xs:string(&quot;string-join&quot;)</result-string>
    <result>
      <assert-string-value>string-join</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-string-join-18">
    <description> Evaluates The &quot;string-join&quot; function with the arguments set as follows: $arg1 = &quot;string-joinstring-join&quot; $arg2 = &quot;string-join&quot; </description>
    <created by="Carmelo Montanez" on="2005-06-24"/>
    <test>fn:string-join((&quot;string-joinstring-join&quot;),&quot;string-join&quot;)</test>
    <result-string>xs:string(&quot;string-joinstring-join&quot;)</result-string>
    <result>
      <assert-string-value>string-joinstring-join</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-string-join-19">
    <description> Evaluates The &quot;string-join&quot; function with the arguments set as follows: $arg1 = &quot;****&quot; $arg2 = &quot;***&quot; </description>
    <created by="Carmelo Montanez" on="2005-06-24"/>
    <test>fn:string-join(&quot;****&quot;,&quot;***&quot;)</test>
    <result-string>xs:string(&quot;****&quot;)</result-string>
    <result>
      <assert-string-value>****</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-string-join-20">
    <description> Evaluates The &quot;string-join&quot; function with the arguments set as follows: $arg1 = &quot;12345&quot; $arg2 = &quot;1234&quot; </description>
    <created by="Carmelo Montanez" on="2005-06-24"/>
    <test>fn:string-join(&quot;12345&quot;,&quot;1234&quot;)</test>
    <result-string>xs:string(&quot;12345&quot;)</result-string>
    <result>
      <assert-string-value>12345</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-string-join-21">
    <description> Evaluates The &quot;string-join&quot; function with the arguments set as follows: $arg1 = &quot;string-join $arg2 = &quot;nioj-gnirts (&quot;string-join&quot; backwards) </description>
    <created by="Carmelo Montanez" on="2005-06-24"/>
    <test>fn:string-join(&quot;string-join&quot;,&quot;nioj-gnirts&quot;)</test>
    <result-string>xs:string(&quot;string-join&quot;)</result-string>
    <result>
      <assert-string-value>string-join</assert-string-value>
    </result>
  </test-case>
  <test-case covers="fn-string-join" name="fn-string-join-22">
    <description> Default second argument is zero-length string in 3.0 </description>
    <created by="Michael Kay" on="2012-07-09"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>fn:string-join((&quot;1&quot;, &quot;2&quot;, &quot;3&quot;))</test>
    <result-string>xs:string(&quot;123&quot;)</result-string>
    <result>
      <assert-string-value>123</assert-string-value>
    </result>
  </test-case>
  <test-case covers="fn-string-join" name="fn-string-join-23">
    <description> Default second argument is zero-length string in 3.0 </description>
    <created by="Michael Kay" on="2012-07-09"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      <![CDATA[
         let $e := <e><a>1</a><b>2</b><c>3</c></e>
         return fn:string-join($e/*)
      ]]>
    </test>
    <result-string>xs:string(&quot;123&quot;)</result-string>
    <result>
      <assert-string-value>123</assert-string-value>
    </result>
  </test-case>
  <test-case covers="fn-string-join" name="fn-string-join-24">
    <description> Default second argument is zero-length string in 3.0 </description>
    <created by="Michael Kay" on="2012-07-09"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      <![CDATA[
         let $e := <e><a>1</a><b></b><c>3</c></e>
         return fn:string-join($e/*)
      ]]>
    </test>
    <result-string>xs:string(&quot;13&quot;)</result-string>
    <result>
      <assert-string-value>13</assert-string-value>
    </result>
  </test-case>
  <test-case covers="fn-string-join" name="fn-string-join-25">
    <description> Default second argument is zero-length string in 3.0 </description>
    <created by="Michael Kay" on="2012-07-09"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      <![CDATA[
         let $e := <e><a>1</a><b></b><c>3</c></e>
         return fn:string-join($e/d)
      ]]>
    </test>
    <result-string>xs:string(&quot;&quot;)</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case covers="fn-string-join" name="fn-string-join-26">
    <description> Default second argument is zero-length string in 3.0 </description>
    <created by="Michael Kay" on="2012-07-09"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      <![CDATA[
         fn:string-join((1 to 9)!string())
      ]]>
    </test>
    <result-string>xs:string(&quot;123456789&quot;)</result-string>
    <result>
      <assert-string-value>123456789</assert-string-value>
    </result>
  </test-case>
  <test-case name="K-StringJoinFunc-1">
    <description> A test whose essence is: `string-join(&quot;a string&quot;)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10 XP20"/>
    <test>string-join(&quot;a string&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case covers="fn-string-join" name="K-StringJoinFunc-1a">
    <description> A test whose essence is: `string-join(&quot;a string&quot;)`. Allowed in 3.0</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ30+ XP30+"/>
    <test>string-join(&quot;a string&quot;)</test>
    <result-string>xs:string(&quot;a string&quot;)</result-string>
    <result>
      <assert-string-value>a string</assert-string-value>
    </result>
  </test-case>
  <test-case name="K-StringJoinFunc-2">
    <description> A test whose essence is: `string-join(&quot;a string&quot;, &quot;a string&quot;, &quot;wrong param&quot;)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>string-join(&quot;a string&quot;, &quot;a string&quot;, &quot;wrong param&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-StringJoinFunc-3">
    <description> A test whose essence is: `string-join(('Now', 'is', 'the', 'time', '...'), ' ') eq &quot;Now is the time ...&quot;`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>string-join(('Now', 'is', 'the', 'time', '...'), ' ') eq &quot;Now is the time ...&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-StringJoinFunc-4">
    <description> A test whose essence is: `string-join((&quot;abc&quot;, &quot;def&quot;), &quot;&quot;) eq &quot;abcdef&quot;`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>string-join((&quot;abc&quot;, &quot;def&quot;), &quot;&quot;) eq &quot;abcdef&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-StringJoinFunc-5">
    <description> A test whose essence is: `string-join(('Blow, ', 'blow, ', 'thou ', 'winter ', 'wind!'), '') eq &quot;Blow, blow, thou winter wind!&quot;`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>string-join(('Blow, ', 'blow, ', 'thou ', 'winter ', 'wind!'), '') eq &quot;Blow, blow, thou winter wind!&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-StringJoinFunc-6">
    <description> A test whose essence is: `string-join((), 'separator') eq &quot;&quot;`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>string-join((), 'separator') eq &quot;&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-StringJoinFunc-7">
    <description> A test whose essence is: `string-join(&quot;a string&quot;, ())`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>string-join(&quot;a string&quot;, ())</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="cbcl-fn-string-join-001">
    <description> Test boolean fn:string-join on various cases </description>
    <created by="Nick Jones" on="2008-06-12"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
        declare function local:repeat($count as xs:integer, $arg as xs:string) as xs:string* { if ($count le 0) then &quot;&quot; else for $x in 1 to $count return $arg };
        string-join( for $x in 0 to 4 return local:repeat($x, 'a') , ' ') and string-join( for $x in 0 to 4 return local:repeat($x, 'a') , '')</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
</test-set>