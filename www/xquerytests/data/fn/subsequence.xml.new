<?xml version="1.0" encoding="UTF-8"?>
<test-set name="fn-subsequence" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">
  <description>Tests for the subsequence() function</description>
  <link document="http://www.w3.org/TR/xpath-functions-30/" idref="func-subsequence" type="spec"/>
  <test-case name="fn-subsequence-mix-args-001">
    <description> arg1: sequence of string, arg2  arg3: integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:subsequence( (&quot;a&quot;, &quot;b&quot;, &quot;c&quot;), 1, 1)</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;a&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-subsequence-mix-args-002">
    <description> arg1: sequence of string, arg2  arg3: integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:subsequence( (&quot;a&quot;, &quot;b&quot;, &quot;c&quot;), 3, 12)</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;c&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-subsequence-mix-args-003">
    <description> arg1: sequence of string, arg2  arg3: integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:subsequence( (&quot;a&quot;, xs:string(&quot;&quot;),&quot;b&quot;, &quot;c&quot;), 1, 3)</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;a&quot;, &quot;&quot;, &quot;b&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-subsequence-mix-args-004">
    <description> arg1: sequence of string, arg2  arg3: integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:subsequence( (&quot;a&quot;, xs:string(&quot;hello&quot;),&quot;b&quot;, &quot;c&quot;), 1, 3)</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;a&quot;, &quot;hello&quot;, &quot;b&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-subsequence-mix-args-005">
    <description> arg1: sequence of string  anyURI, arg2  arg3: integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:subsequence( (&quot;a&quot;, xs:anyURI(&quot;www.example.com&quot;),&quot;b&quot;, &quot;c&quot;), 1, 3)</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;a&quot;, &quot;www.example.com&quot;, &quot;b&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-subsequence-mix-args-006">
    <description> arg1: sequence of string, arg2  arg3: integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:subsequence( (&quot;a&quot;, (), (), &quot;b&quot;, &quot;c&quot;), 1, 3)</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;a&quot;, &quot;b&quot;, &quot;c&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-subsequence-mix-args-007">
    <description> arg1: sequence of string  integer, arg2  arg3: integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:subsequence( (&quot;a&quot;, xs:integer(&quot;100&quot;), xs:integer(&quot;-100&quot;), &quot;b&quot;, &quot;c&quot;),2,4)</test>
    <result-string/>
    <result>
      <assert-deep-eq>100, -100, &quot;b&quot;, &quot;c&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-subsequence-mix-args-008">
    <description> arg1: sequence of string,decimal  integer, arg2  arg3: integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:subsequence( (&quot;a&quot;, xs:decimal(&quot;-1.000000000001&quot;), xs:integer(&quot;-100&quot;), &quot;b&quot;, &quot;c&quot;), 2,3)</test>
    <result-string/>
    <result>
      <assert-deep-eq>-1.000000000001, -100, &quot;b&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-subsequence-mix-args-009">
    <description> arg1: sequence of string  float , arg2  arg3: integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:subsequence( (&quot;a&quot;, xs:float(&quot;INF&quot;), &quot;b&quot;, &quot;c&quot;),-2,3)</test>
    <result-string/>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case name="fn-subsequence-mix-args-010">
    <description> arg1: sequence of string  float , arg2  arg3: integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:subsequence ( (&quot;a&quot;, xs:float(&quot;-INF&quot;), &quot;b&quot;, &quot;c&quot;), 1,2)</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;a&quot;, xs:float(&quot;-INF&quot;)</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-subsequence-mix-args-011">
    <description> arg1: sequence of string  float , arg2  arg3: integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:subsequence ( (&quot;a&quot;, xs:float(&quot;NaN&quot;), &quot;b&quot;, &quot;c&quot;), 0, 2)</test>
    <result-string/>
    <result>
      <assert-eq>&quot;a&quot;</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-subsequence-mix-args-012">
    <description> arg1: sequence of string  float , arg2  arg3: integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:subsequence ( (&quot;a&quot;, xs:float(&quot;1.01&quot;), &quot;b&quot;, &quot;c&quot;), 2,4)</test>
    <result-string/>
    <result>
      <assert-deep-eq>1.01, &quot;b&quot;, &quot;c&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-subsequence-mix-args-013">
    <description> arg1: sequence of string  double , arg2  arg3: integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:subsequence ( (&quot;a&quot;, xs:double(&quot;NaN&quot;), &quot;b&quot;, &quot;c&quot;), 2, 20)</test>
    <result-string/>
    <result>
      <assert-deep-eq>xs:double('NaN'), &quot;b&quot;, &quot;c&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-subsequence-mix-args-014">
    <description> arg1: sequence of string  double , arg2  arg3: integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:subsequence ( (&quot;a&quot;, xs:double(&quot;1.01&quot;), &quot;b&quot;, &quot;c&quot;), 2,3)</test>
    <result-string/>
    <result>
      <assert-deep-eq>1.01, &quot;b&quot;, &quot;c&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-subsequence-mix-args-015">
    <description> arg1: sequence of string  double , arg2  arg3: integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:subsequence ( (&quot;a&quot;, xs:double(&quot;-INF&quot;), &quot;b&quot;, &quot;c&quot;), 2,2)</test>
    <result-string/>
    <result>
      <assert-deep-eq>xs:double('-INF'), &quot;b&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-subsequence-mix-args-016">
    <description> arg1: sequence of string  double , arg2  arg3: integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:subsequence ( (&quot;a&quot;, xs:double(&quot;INF&quot;), &quot;b&quot;, &quot;c&quot;), 2, 1)</test>
    <result-string/>
    <result>
      <assert-eq>xs:double(&quot;INF&quot;)</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-subsequence-mix-args-017">
    <description> arg1: sequence of string  boolean, arg2  arg3: integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:subsequence ( (&quot;a&quot;, xs:boolean(&quot;1&quot;), &quot;b&quot;, &quot;c&quot;), 1,2)</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;a&quot;, true()</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-subsequence-mix-args-018">
    <description> arg1: sequence of string  boolean, arg2  arg3: integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:subsequence ( (&quot;a&quot;, xs:boolean(&quot;0&quot;), &quot;b&quot;, &quot;c&quot;), 2,1)</test>
    <result-string>xs:boolean('false')</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-subsequence-mix-args-019">
    <description> arg1: sequence of string  boolean, arg2  arg3: integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:subsequence ( (&quot;a&quot;, xs:boolean(&quot;true&quot;), &quot;b&quot;, &quot;c&quot;), 1,2)</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;a&quot;, true()</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-subsequence-mix-args-020">
    <description> arg1: sequence of string  boolean, arg2  arg3: integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:subsequence ( (&quot;a&quot;, xs:boolean(&quot;false&quot;), &quot;b&quot;, &quot;c&quot;), 1, 3)</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;a&quot;, false(), &quot;b&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-subsequence-mix-args-021">
    <description> arg1: sequence of string  date , arg2  arg3: integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:subsequence ( (&quot;a&quot;, xs:date(&quot;1993-03-31&quot;), &quot;b&quot;, &quot;c&quot;), 1,2)</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;a&quot;, xs:date('1993-03-31')</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-subsequence-mix-args-022">
    <description> arg1: sequence of string  dateTime, arg2  arg3: integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:subsequence ( (&quot;a&quot;, xs:dateTime(&quot;1972-12-31T00:00:00&quot;), &quot;b&quot;, &quot;c&quot;), 0,2)</test>
    <result-string/>
    <result>
      <assert-eq>&quot;a&quot;</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-subsequence-mix-args-023">
    <description> arg1: sequence of string  time , arg2  arg3: integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:subsequence ( (&quot;a&quot;, xs:time(&quot;12:30:00&quot;), &quot;b&quot;, &quot;c&quot;), 1, 2)</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;a&quot;, xs:time('12:30:00')</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-subsequence-mix-args-024">
    <description> subsequence(X, -INF, +INF Returns () because -INF + INF = NaN, and position() lt NaN is false. See XSLT test case bug 837 (member only bugzilla) </description>
    <created by="Michael Kay" on="2010-06-18"/>
    <test>fn:subsequence (1 to 10, xs:double('-INF'), xs:double('INF'))</test>
    <result-string/>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-1">
    <description> A test whose essence is: `subsequence()`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-2">
    <description> A test whose essence is: `subsequence(1)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence(1)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-3">
    <description> A test whose essence is: `subsequence(1, 1, 1, 1)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence(1, 1, 1, 1)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-4">
    <description> A test whose essence is: `empty(subsequence((), 2, 3))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(subsequence((), 2, 3))</test>
    <result-string/>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-5">
    <description> A test whose essence is: `empty(subsequence((1, 2, 3), 2, -10))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(subsequence((1, 2, 3), 2, -10))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-6">
    <description> A test whose essence is: `count(subsequence((1, 2, 3, &quot;four&quot;), 4)) eq 1`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>count(subsequence((1, 2, 3, &quot;four&quot;), 4)) eq 1</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-7">
    <description> A test whose essence is: `count(subsequence((1, 2, 3, &quot;four&quot;), 4, 1)) eq 1`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>count(subsequence((1, 2, 3, &quot;four&quot;), 4, 1)) eq 1</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-8">
    <description> A test whose essence is: `subsequence((1, 2, 3.1, &quot;four&quot;), 4)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence((1, 2, 3.1, &quot;four&quot;), 4)</test>
    <result-string/>
    <result>
      <assert-eq>&quot;four&quot;</assert-eq>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-9">
    <description> A test whose essence is: `subsequence((1, 2, 3.1, &quot;four&quot;), 4, 1)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence((1, 2, 3.1, &quot;four&quot;), 4, 1)</test>
    <result-string/>
    <result>
      <assert-eq>&quot;four&quot;</assert-eq>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-10">
    <description> A test whose essence is: `subsequence((1, 2, 3.1, &quot;four&quot;), 3, 1) instance of xs:decimal`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence((1, 2, 3.1, &quot;four&quot;), 3, 1) instance of xs:decimal</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-11">
    <description> A test whose essence is: `subsequence((1, 2, 3.1, &quot;four&quot;), 1, 1)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence((1, 2, 3.1, &quot;four&quot;), 1, 1)</test>
    <result-string/>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-12">
    <description> A test whose essence is: `empty(subsequence((1, 2, 3, &quot;four&quot;), 4, -3))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(subsequence((1, 2, 3, &quot;four&quot;), 4, -3))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-13">
    <description> A test whose essence is: `empty(subsequence((1, 2, 3, &quot;four&quot;), -4, -3))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(subsequence((1, 2, 3, &quot;four&quot;), -4, -3))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-14">
    <description> A test whose essence is: `subsequence((1, 2, 3), 1, 1) eq 1`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence((1, 2, 3), 1, 1) eq 1</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-15">
    <description> A test whose essence is: `subsequence((1, 2, 3), 1, 1) eq 1`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence((1, 2, 3), 1, 1) eq 1</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-16">
    <description> A test whose essence is: `subsequence((1, 2, 3), 3) eq 3`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence((1, 2, 3), 3) eq 3</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-17">
    <description> A test whose essence is: `count(subsequence((1, 2, 3), 1, 1)) eq 1`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>count(subsequence((1, 2, 3), 1, 1)) eq 1</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-18">
    <description> A test whose essence is: `count(subsequence((1, 2, 3), 1, 3)) eq 3`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>count(subsequence((1, 2, 3), 1, 3)) eq 3</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-19">
    <description> A test whose essence is: `count(subsequence((1, 2, 3, &quot;four&quot;), 4)) eq 1`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>count(subsequence((1, 2, 3, &quot;four&quot;), 4)) eq 1</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-20">
    <description> A test whose essence is: `count(subsequence(1 to 3, 1, 1)) eq 1`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>count(subsequence(1 to 3, 1, 1)) eq 1</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-21">
    <description> A test whose essence is: `empty(subsequence((1, 2), 4))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(subsequence((1, 2), 4))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-22">
    <description> A test whose essence is: `subsequence((5, 6, 7, 8), 2, 1) eq 6`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence((5, 6, 7, 8), 2, 1) eq 6</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-23">
    <description> A test whose essence is: `count(subsequence((1, 2), 2)) eq 1`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>count(subsequence((1, 2), 2)) eq 1</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-24">
    <description> A test whose essence is: `count(subsequence((1, 2, 3, &quot;four&quot;), 2)) eq 3`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>count(subsequence((1, 2, 3, &quot;four&quot;), 2)) eq 3</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-25">
    <description> A test whose essence is: `count(subsequence((1, 2, 3, &quot;four&quot;), 2, 2)) eq 2`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>count(subsequence((1, 2, 3, &quot;four&quot;), 2, 2)) eq 2</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-26">
    <description> A test whose essence is: `subsequence((1, 2, 3.1, &quot;four&quot;), 1, 1)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence((1, 2, 3.1, &quot;four&quot;), 1, 1)</test>
    <result-string/>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-27">
    <description> A test whose essence is: `1 eq &quot;a string&quot;`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>1 eq &quot;a string&quot;</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-28">
    <description> A test whose essence is: `1 eq subsequence((&quot;1&quot;, 2, 3.1, &quot;four&quot;), 1, 1)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>1 eq subsequence((&quot;1&quot;, 2, 3.1, &quot;four&quot;), 1, 1)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-29">
    <description> A test whose essence is: `subsequence((&quot;1&quot;, 2, 3.1, &quot;four&quot;), 1, 1) eq 1`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence((&quot;1&quot;, 2, 3.1, &quot;four&quot;), 1, 1) eq 1</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-30">
    <description> A test whose essence is: `subsequence(error(), 1, 1)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence(error(), 1, 1)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOER0000&quot;))</result-string>
    <result>
      <error code="FOER0000"/>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-31">
    <description> A test whose essence is: `count(subsequence((1, 2, 2, current-time()), 2, 2)) eq 2`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>count(subsequence((1, 2, 2, current-time()), 2, 2)) eq 2</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-32">
    <description> A test whose essence is: `count(subsequence(remove(current-time(), 1), 1, 1)) eq 0`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>count(subsequence(remove(current-time(), 1), 1, 1)) eq 0</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-33">
    <description> A test whose essence is: `deep-equal(1, subsequence((1, 2, current-time()), 1, 1))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal(1, subsequence((1, 2, current-time()), 1, 1))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-34">
    <description> Using subsequence inside a predicate. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(1)[deep-equal(1, subsequence((1, 2, current-time()), 1, 1))] eq 1</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-35">
    <description> A test whose essence is: `empty(subsequence((current-time(), 1), 4))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(subsequence((current-time(), 1), 4))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-36">
    <description> A test whose essence is: `count(subsequence((current-time(), 1), 4)) eq 0`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>count(subsequence((current-time(), 1), 4)) eq 0</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-37">
    <description> A test whose essence is: `count(subsequence((current-time(), 2 , 3), 1)) eq 3`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>count(subsequence((current-time(), 2 , 3), 1)) eq 3</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-38">
    <description> A test whose essence is: `count(subsequence((current-time(), 2 , 3), 3)) eq 1`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>count(subsequence((current-time(), 2 , 3), 3)) eq 1</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-39">
    <description> A test whose essence is: `count(subsequence((current-time(), 2 , 3, 4), 2, 2)) eq 2`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>count(subsequence((current-time(), 2 , 3, 4), 2, 2)) eq 2</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-40">
    <description> Apply a predicate to the result of fn:subsequence(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence((1, 2, 3, current-time(), 5, 6, 7), 1, 1)[1]</test>
    <result-string/>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-41">
    <description> Apply a predicate to the result of fn:subsequence(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence((1, 2, 3, current-time(), 5, 6, 9), 7)[last()]</test>
    <result-string/>
    <result>
      <assert-eq>9</assert-eq>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-42">
    <description> Apply a predicate to the result of fn:subsequence(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence((1, 2, 3, current-time(), 5, 6, 7), 4)[last() - 1]</test>
    <result-string/>
    <result>
      <assert-eq>6</assert-eq>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-43">
    <description> Apply a predicate to the result of fn:subsequence(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(subsequence((1, 2, 3, current-time(), 5, 6, 7), 4, 1)[last() - 10])</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqSubsequenceFunc-44">
    <description> Apply a predicate to the result of fn:subsequence(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(subsequence((1, 2, 3, current-time(), 5, 6, 7), 1, 1)[2])</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-SeqSubsequenceFunc-1">
    <description> Use fn:subsequence where the input is via variable references. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $start := (current-time(), 2)[2] treat as xs:integer,
                $len := (current-time(), 1)[2] treat as xs:integer
                return subsequence((1, 2, 3), $start, $len)</test>
    <result-string/>
    <result>
      <assert-eq>2</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqSubsequenceFunc-2">
    <description> A zero length. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence((1, 2, 3), 1, 0)</test>
    <result-string/>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case name="K2-SeqSubsequenceFunc-3">
    <description> A negative length. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence((1, 2, 3, 4, 5), 4, -1)</test>
    <result-string/>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case name="K2-SeqSubsequenceFunc-4">
    <description> Ensure rounding is done properly, 1.1. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:subsequence((1,2,3), 1.1, 1)</test>
    <result-string/>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqSubsequenceFunc-5">
    <description> Ensure rounding is done properly, 1.8. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:subsequence((1,2,3), 1.8, 1)</test>
    <result-string/>
    <result>
      <assert-eq>2</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqSubsequenceFunc-6">
    <description> Ensure rounding is done properly, 1.4. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:subsequence((1,2,3), 1.4, 1.4)</test>
    <result-string/>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqSubsequenceFunc-7">
    <description> Ensure rounding is done properly, 1.5. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:subsequence((1,2,3), 1.5, 1.5)</test>
    <result-string/>
    <result>
      <assert-deep-eq>2, 3</assert-deep-eq>
    </result>
  </test-case>
  <test-case covers="inline-function" name="K2-SeqSubsequenceFunc-8">
    <description> Have subsequence inside a function body, to trap bugs related to inference, rewrites and function call sites. This expression typically constant propagates to a sequence of integers. </description>
    <created by="Frans Englich" on="2008-05-08"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <dependency type="feature" value="higherOrderFunctions"/>
    <test>let $f :=function() { subsequence(subsequence((1, 2, 3, 4), 3, 1), 1, 4) } return $f()</test>
    <result-string/>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case covers="inline-function" name="K2-SeqSubsequenceFunc-9">
    <description> Have subsequence inside a function body, to trap bugs related to inference, rewrites and function call sites(#2). This expression typically constant propagates to a sequence of integers. </description>
    <created by="Frans Englich" on="2008-05-08"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <dependency type="feature" value="higherOrderFunctions"/>
    <test>let $f :=function() { subsequence((1, 2, 3), 1) } return $f()</test>
    <result-string/>
    <result>
      <assert-deep-eq>1, 2, 3</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqSubsequenceFunc-10">
    <description> Have a call to subsequence that triggers a type error in an expression which can be const folded(derived from functionbc20_037). </description>
    <created by="Frans Englich" on="2008-11-13"/>
    <test>subsequence((1, 2, 3), 1, &quot;string&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="cbcl-subsequence-001">
    <description> Test fn:subsequence on -INF and INF </description>
    <created by="Oliver Hallam" on="2008-05-09"/>
    <test>
        count(subsequence(1 to 10, xs:double(&quot;-INF&quot;), xs:double(&quot;INF&quot;)))
      </test>
    <result-string>xs:string('0')</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-subsequence-002">
    <description> Test fn:subsequence with length NaN </description>
    <created by="Oliver Hallam" on="2008-05-09"/>
    <test>count(subsequence(1 to 10, 2, xs:double(&quot;NaN&quot;)))</test>
    <result-string>xs:string('0')</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-subsequence-003">
    <description> Test fn:subsequence with starting position NaN </description>
    <created by="Oliver Hallam" on="2008-05-09"/>
    <test>count(subsequence(1 to 10, xs:double(&quot;NaN&quot;), 4))</test>
    <result-string>xs:string('0')</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-subsequence-004">
    <description> Test unbounded fn:subsequence with starting position -INF </description>
    <created by="Oliver Hallam" on="2008-05-09"/>
    <test>count(subsequence(1 to 10, xs:double(&quot;-INF&quot;)))</test>
    <result-string>xs:string('10')</result-string>
    <result>
      <assert-string-value>10</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-subsequence-005">
    <description> Test unbounded fn:subsequence with starting position NaN </description>
    <created by="Oliver Hallam" on="2008-05-09"/>
    <test>count(subsequence(1 to 10, xs:double(&quot;NaN&quot;)))</test>
    <result-string>xs:string('0')</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-subsequence-006">
    <description> Test subsequence optimizations. </description>
    <created by="Oliver Hallam" on="2008-05-14"/>
    <test>
        subsequence((1, 2, for $x in 1 to 10 return 2*$x), 2, year-from-date(current-date()))
      </test>
    <result-string>xs:string('2 2 4 6 8 10 12 14 16 18 20')</result-string>
    <result>
      <assert-string-value>2 2 4 6 8 10 12 14 16 18 20</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-subsequence-007">
    <description> Test subsequence optimizations. </description>
    <created by="Oliver Hallam" on="2008-05-14"/>
    <test>
        subsequence((1, 2, for $x in 1 to 10 return 2*$x), -1, sum((1 to 10)[. mod 10 = 3]))
      </test>
    <result-string>xs:string('1')</result-string>
    <result>
      <assert-string-value>1</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-subsequence-008">
    <description> Test subsequence on length out of int range. </description>
    <created by="Oliver Hallam" on="2008-05-14"/>
    <modified by="O'Neil Delpratt" change="Added error code. Relating to bug issue #19579" on="2013-06-07"/>
    <test>subsequence(1 to 100, 99, 2147483648)</test>
    <result-string/>
    <result>
      <any-of>
        <assert-string-value>99 100</assert-string-value>
        <error code="XPDY0130"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="cbcl-subsequence-009">
    <description> Test subsequence on starting value out of int range. </description>
    <created by="Oliver Hallam" on="2008-05-14"/>
    <test>count(subsequence(1 to 100, -2147483648, 20))</test>
    <result-string>xs:string('0')</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-subsequence-010">
    <description> Test subsequence on largest supported (non-infinite) range. </description>
    <created by="Oliver Hallam" on="2008-05-14"/>
    <modified by="Michael Kay" change="allow correct answer or indeterminate error. See bug 20310." on="2012-12-20"/>
    <modified by="O'Neil Delpratt" change="Added error code. Relating to bug issue #19579" on="2013-06-07"/>
    <test>count(subsequence(1 to 3000000000, -2147483648, 2147483647))</test>
    <result-string/>
    <result>
      <any-of>
        <error code="XPDY0130"/>
        <assert-eq>0</assert-eq>
      </any-of>
    </result>
  </test-case>
  <test-case name="cbcl-subsequence-011">
    <description> Test unbounded subsequence with starting position out of int range. </description>
    <created by="Oliver Hallam" on="2008-05-14"/>
    <modified by="Michael Kay" change="allow correct answer or indeterminate error. See bug 20310." on="2012-12-20"/>
    <test>count(subsequence(1 to 3000000000, -2147483649))</test>
    <result-string/>
    <result>
      <any-of>
        <assert-eq>3000000000</assert-eq>
        <error code="*"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="cbcl-subsequence-012">
    <description> Test unbounded subsequence with starting position out of int range. </description>
    <created by="Oliver Hallam" on="2008-05-14"/>
    <modified by="Michael Kay" change="allow correct answer or indeterminate error. See bug 20310." on="2012-12-20"/>
    <test>count(subsequence(1 to 3000000000, 2147483648))</test>
    <result-string/>
    <result>
      <any-of>
        <assert-eq>852516353</assert-eq>
        <error code="*"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="cbcl-subsequence-013">
    <description> Test unbounded subsequence with largest allowed starting position. </description>
    <created by="Oliver Hallam" on="2008-05-14"/>
    <modified by="Michael Kay" change="allow correct answer or indeterminate error. See bug 20310." on="2012-12-20"/>
    <test>count(subsequence(1 to 3000000000, 2147483647))</test>
    <result-string/>
    <result>
      <any-of>
        <assert-eq>852516354</assert-eq>
        <error code="*"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="cbcl-subsequence-014">
    <description> Test unbounded subsequence with largest allowed starting position. </description>
    <created by="Oliver Hallam" on="2008-05-14"/>
    <modified by="Michael Kay" change="allow correct answer or indeterminate error. See bug 20310." on="2012-12-20"/>
    <test>subsequence(1 to 3000000000, 2147483647, 5)</test>
    <result-string/>
    <result>
      <any-of>
        <assert-string-value>2147483647 2147483648 2147483649 2147483650 2147483651</assert-string-value>
        <error code="*"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="cbcl-subsequence-015">
    <description> Test subsequence on map expression. </description>
    <created by="Oliver Hallam" on="2008-05-15"/>
    <test>subsequence(for $x in (1 to 100) return -$x, 3, 5)</test>
    <result-string>xs:string('-3 -4 -5 -6 -7')</result-string>
    <result>
      <assert-string-value>-3 -4 -5 -6 -7</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-subsequence-016">
    <description> Test subsequence on something that looks a bit like last but isn't </description>
    <created by="Oliver Hallam" on="2008-05-15"/>
    <test>
        subsequence( for $x in 1 to 10 return 1 to $x, count(for $x in 0 to 10 return 1 to $x), 1)
      </test>
    <result-string>xs:string('10')</result-string>
    <result>
      <assert-string-value>10</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-subsequence-017">
    <description> Test subsequence with infinite length starting at first item </description>
    <created by="Oliver Hallam" on="2008-05-15"/>
    <test>
        subsequence(for $x in 1 to 10 return 1 to $x, 1.2, xs:double(&quot;INF&quot;))
      </test>
    <result-string>xs:string('1 1 2 1 2 3 1 2 3 4 1 2 3 4 5 1 2 3 4 5 6 1 2 3 4 5 6 7 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 10')</result-string>
    <result>
      <assert-string-value>1 1 2 1 2 3 1 2 3 4 1 2 3 4 5 1 2 3 4 5 6 1 2 3 4 5 6 7 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 10</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-subsequence-018">
    <description> Test subsequence with infinite length starting after first item </description>
    <created by="Oliver Hallam" on="2008-05-15"/>
    <test>
        subsequence(for $x in 1 to 10 return 1 to $x, 4.2, xs:double(&quot;INF&quot;))
      </test>
    <result-string>xs:string('1 2 3 1 2 3 4 1 2 3 4 5 1 2 3 4 5 6 1 2 3 4 5 6 7 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 10')</result-string>
    <result>
      <assert-string-value>1 2 3 1 2 3 4 1 2 3 4 5 1 2 3 4 5 6 1 2 3 4 5 6 7 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 10</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-subsequence-019">
    <description> Test subsequence that gets the last item </description>
    <created by="Oliver Hallam" on="2008-05-15"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>
        let $y := for $x in 1 to 10 return $x * $x return subsequence($y, count($y), 3)
      </test>
    <result-string>xs:string('100')</result-string>
    <result>
      <assert-string-value>100</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-subsequence-020">
    <description> Tests subsequence with static start and length </description>
    <created by="Nick Jones" on="2008-06-06"/>
    <test>subsequence(for $x in 1 to 10 return $x[. mod 2 = 0],2,4)</test>
    <result-string>xs:string('4 6 8 10')</result-string>
    <result>
      <assert-string-value>4 6 8 10</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-subsequence-021">
    <description> Tests an unbounded subsequence with a static start </description>
    <created by="Nick Jones" on="2008-06-06"/>
    <test>subsequence(for $x in 1 to 10 return $x[. mod 2 = 0],2)</test>
    <result-string>xs:string('4 6 8 10')</result-string>
    <result>
      <assert-string-value>4 6 8 10</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-subsequence-022">
    <description> Test skip on initial subsequence enumerator </description>
    <created by="Nick Jones" on="2008-06-12"/>
    <modified by="Michael Kay" change="remove unnecessary dependency on XQuery" on="2012-12-08"/>
    <test>
      <![CDATA[subsequence((1 to 20)[. mod 2 = 0][position() < 5],2)]]>
    </test>
    <result-string>xs:string('4 6 8')</result-string>
    <result>
      <assert-string-value>4 6 8</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-subsequence-023">
    <description> Test subsequence(for .....) </description>
    <created by="Nick Jones" on="2008-06-12"/>
    <test>subsequence(for $x in 1 to 10 return $x * $x,2)</test>
    <result-string>xs:string('4 9 16 25 36 49 64 81 100')</result-string>
    <result>
      <assert-string-value>4 9 16 25 36 49 64 81 100</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-subsequence-024">
    <description> Test subsequence(...,1,INF) </description>
    <created by="Nick Jones" on="2008-06-13"/>
    <test>
        subsequence((1 to 100)[. mod 2 = 0],1,xs:double(string-join(('I','N','F')[position() mod 2 = 0],'')))
      </test>
    <result-string>xs:string('2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98 100')</result-string>
    <result>
      <assert-string-value>2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98 100</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-subsequence-025">
    <description> Tries to call GetExpressionProperties on static-subsequence. In fact shows an error in variable binding when expanding path expressions </description>
    <created by="Nick Jones" on="2008-06-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[count(<a><b/></a>/*/subsequence(.,1,1)/..)]]>
    </test>
    <result-string>xs:string('1')</result-string>
    <result>
      <assert-string-value>1</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-subsequence-026">
    <description> Tests for subsequence on divided sequence </description>
    <created by="Nick Jones" on="2008-06-17"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>
        let $x := (1 to 10)[. mod 2 = 0] return subsequence((0,$x),3,count($x) div 2)
      </test>
    <result-string>xs:string('4 6 8')</result-string>
    <result>
      <assert-string-value>4 6 8</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-subsequence-027">
    <description> Tests for subsequence on a map expression </description>
    <created by="Nick Jones" on="2008-06-17"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>
        let $z := (1 to 10)[. mod 2 = 0] return subsequence(for $x in $z return floor($x),2,4)
      </test>
    <result-string>xs:string('4 6 8 10')</result-string>
    <result>
      <assert-string-value>4 6 8 10</assert-string-value>
    </result>
  </test-case>
</test-set>