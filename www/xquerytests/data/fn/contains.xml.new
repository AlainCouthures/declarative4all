<?xml version="1.0" encoding="UTF-8"?>
<test-set name="fn-contains" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">
  <description>Tests for the contains() function</description>
  <link document="http://www.w3.org/TR/xpath-functions-30/" idref="func-contains" type="spec"/>
  <test-case name="fn-contains2args-1">
    <description> Evaluates The &quot;contains&quot; function with the arguments set as follows: $arg1 = xs:string(lower bound) $arg2 = xs:string(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:contains(xs:string(&quot;This is a characte&quot;),xs:string(&quot;This is a characte&quot;))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-contains2args-2">
    <description> Evaluates The &quot;contains&quot; function with the arguments set as follows: $arg1 = xs:string(mid range) $arg2 = xs:string(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:contains(xs:string(&quot;This is a characte&quot;),xs:string(&quot;This is a characte&quot;))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-contains2args-3">
    <description> Evaluates The &quot;contains&quot; function with the arguments set as follows: $arg1 = xs:string(upper bound) $arg2 = xs:string(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:contains(xs:string(&quot;This is a characte&quot;),xs:string(&quot;This is a characte&quot;))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-contains2args-4">
    <description> Evaluates The &quot;contains&quot; function with the arguments set as follows: $arg1 = xs:string(lower bound) $arg2 = xs:string(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:contains(xs:string(&quot;This is a characte&quot;),xs:string(&quot;This is a characte&quot;))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-contains2args-5">
    <description> Evaluates The &quot;contains&quot; function with the arguments set as follows: $arg1 = xs:string(lower bound) $arg2 = xs:string(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:contains(xs:string(&quot;This is a characte&quot;),xs:string(&quot;This is a characte&quot;))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-contains-1">
    <description> Evaluates The &quot;contains&quot; function with the arguments set as follows: $arg1 = &quot;&quot; $arg2 = &quot;&quot; </description>
    <created by="Carmelo Montanez" on="2005-05-27"/>
    <test>fn:contains(&quot;&quot;,&quot;&quot;)</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-contains-2">
    <description> Evaluates The &quot;contains&quot; function with the arguments set as follows: $arg1 = &quot;&quot; $arg2 = &quot;A Character String&quot; </description>
    <created by="Carmelo Montanez" on="2005-05-27"/>
    <test>fn:contains(&quot;&quot;,&quot;A Character String&quot;)</test>
    <result-string>xs:boolean('false')</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-contains-3">
    <description> Evaluates The &quot;contains&quot; function with the arguments set as follows: $arg1 = &quot;&quot; $arg2 = &quot;A Character String&quot; </description>
    <created by="Carmelo Montanez" on="2005-05-27"/>
    <test>fn:contains(&quot;A Character String&quot;,&quot;&quot;)</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-contains-4">
    <description> Evaluates The &quot;contains&quot; function with the arguments set as follows: $arg1 = () $arg2 = &quot;&quot; </description>
    <created by="Carmelo Montanez" on="2005-05-27"/>
    <test>fn:contains((),&quot;&quot;)</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-contains-5">
    <description> Evaluates The &quot;contains&quot; function with the arguments set as follows: $arg1 = &quot;&quot; $arg2 = () </description>
    <created by="Carmelo Montanez" on="2005-05-27"/>
    <test>fn:contains(&quot;&quot;,())</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-contains-6">
    <description> Evaluates The &quot;contains&quot; function with the arguments set as follows: $arg1 = &quot;A Character String&quot; $arg2 = () </description>
    <created by="Carmelo Montanez" on="2005-05-27"/>
    <test>fn:contains(&quot;A Character String&quot;,())</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-contains-7">
    <description> Evaluates The &quot;contains&quot; function with the arguments set as follows: $arg1 = () $arg2 = &quot;A Character String&quot; </description>
    <created by="Carmelo Montanez" on="2005-05-27"/>
    <test>fn:contains((),&quot;A Character String&quot;)</test>
    <result-string>xs:boolean('false')</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-contains-8">
    <description> Evaluates The &quot;contains&quot; function with the arguments set as follows: $arg1 = &quot;AAAAABBBBBCCCCC&quot; $arg2 = &quot;BBBBB&quot; </description>
    <created by="Carmelo Montanez" on="2005-05-27"/>
    <test>fn:contains(&quot;AAAAABBBBBCCCCC&quot;,&quot;BBBBB&quot;)</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-contains-9">
    <description> Evaluates The &quot;contains&quot; function with the arguments set as follows: $arg1 = &quot;AAAAABBBBB&quot; $arg2 = &quot; &quot; </description>
    <created by="Carmelo Montanez" on="2005-05-27"/>
    <test>fn:contains(&quot;AAAAABBBBB&quot;,&quot; &quot;)</test>
    <result-string>xs:boolean('false')</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-contains-10">
    <description> Evaluates The &quot;contains&quot; function with the arguments set as follows: $arg1 = &quot; &quot; $arg2 = &quot; AAAAABBBBB&quot; </description>
    <created by="Carmelo Montanez" on="2005-05-27"/>
    <test>fn:contains(&quot; &quot;,&quot;AAAAABBBBB&quot;)</test>
    <result-string>xs:boolean('false')</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-contains-11">
    <description> Evaluates The &quot;contains&quot; function using it as a argument of a fn:not - returns false </description>
    <created by="Carmelo Montanez" on="2005-05-27"/>
    <test>fn:not(fn:contains(&quot;A&quot;,&quot;A&quot;))</test>
    <result-string>xs:boolean('false')</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-contains-12">
    <description> Evaluates The &quot;contains&quot; function using it as a argument of a fn:not - returns true </description>
    <created by="Carmelo Montanez" on="2005-05-27"/>
    <test>fn:not(fn:contains(&quot;A&quot;,&quot;B&quot;))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-contains-13">
    <description> Evaluates The &quot;contains&quot; function with the arguments set as follows: $arg1 = xs:string(&quot;A&quot;) $arg2 = &quot;A&quot; </description>
    <created by="Carmelo Montanez" on="2005-05-27"/>
    <test>fn:contains(xs:string(&quot;A&quot;),&quot;A&quot;)</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-contains-14">
    <description> Evaluates The &quot;contains&quot; function with the arguments set as follows: $arg1 = &quot;A&quot; $arg2 = xs:string(&quot;A&quot;) </description>
    <created by="Carmelo Montanez" on="2005-05-27"/>
    <test>fn:contains(&quot;A&quot;,xs:string(&quot;A&quot;))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-contains-15">
    <description> Evaluates The &quot;contains&quot; function with the arguments set as follows: $arg1 = &quot;A&quot; $arg2 = &quot;a&quot; </description>
    <created by="Carmelo Montanez" on="2005-05-27"/>
    <test>fn:contains(&quot;A&quot;,&quot;a&quot;)</test>
    <result-string>xs:boolean('false')</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-contains-16">
    <description> Evaluates The &quot;contains&quot; function with the arguments set as follows: $arg1 = &quot;a&quot; $arg2 = &quot;A&quot; </description>
    <created by="Carmelo Montanez" on="2005-05-27"/>
    <test>fn:contains(&quot;a&quot;,&quot;A&quot;)</test>
    <result-string>xs:boolean('false')</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="K-ContainsFunc-1">
    <description> A test whose essence is: `contains()`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>contains()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-ContainsFunc-2">
    <description> A test whose essence is: `contains(())`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>contains(())</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-ContainsFunc-3">
    <description> A test whose essence is: `contains((), (), &quot;http://www.w3.org/2005/xpath-functions/collation/codepoint&quot;, &quot;wrong param&quot;)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>contains((), (), &quot;http://www.w3.org/2005/xpath-functions/collation/codepoint&quot;, &quot;wrong param&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-ContainsFunc-4">
    <description> A test whose essence is: `contains(&quot;a string&quot;, &quot;a string&quot;, &quot;http://www.example.com/COLLATION/NOT/SUPPORTED&quot;)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>contains(&quot;a string&quot;, &quot;a string&quot;, &quot;http://www.example.com/COLLATION/NOT/SUPPORTED&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCH0002&quot;))</result-string>
    <result>
      <error code="FOCH0002"/>
    </result>
  </test-case>
  <test-case name="K-ContainsFunc-5">
    <description> A test whose essence is: `contains(&quot;foo&quot;, &quot;foo&quot;, &quot;http://www.w3.org/2005/xpath-functions/collation/codepoint&quot;)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>contains(&quot;foo&quot;, &quot;foo&quot;, &quot;http://www.w3.org/2005/xpath-functions/collation/codepoint&quot;)</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-ContainsFunc-6">
    <description> A test whose essence is: `contains(&quot;tattoo&quot;, &quot;t&quot;)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>contains(&quot;tattoo&quot;, &quot;t&quot;)</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-ContainsFunc-7">
    <description> A test whose essence is: `not(contains(&quot;tattoo&quot;, &quot;ttt&quot;))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(contains(&quot;tattoo&quot;, &quot;ttt&quot;))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-ContainsFunc-8">
    <description> A test whose essence is: `contains(&quot;&quot;, ())`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>contains(&quot;&quot;, ())</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-ContainsFunc-9">
    <description> A test whose essence is: `contains(&quot;a string&quot;, ())`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>contains(&quot;a string&quot;, ())</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-ContainsFunc-10">
    <description> A test whose essence is: `contains(&quot;foo&quot;, &quot;foo&quot;)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>contains(&quot;foo&quot;, &quot;foo&quot;)</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-ContainsFunc-11">
    <description> A test whose essence is: `not(contains(&quot;&quot;, &quot;a string&quot;))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(contains(&quot;&quot;, &quot;a string&quot;))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-ContainsFunc-1">
    <description> Compare two values returned from fn:lower-case(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $vA := (&quot;B STRING&quot;, current-time(), string(&quot;content&quot;))[1] treat as xs:string,
                $vB  := (&quot;b string&quot;, current-time(), string(&quot;content&quot;))[1] treat as xs:string
         return contains(lower-case($vA), lower-case($vB))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-ContainsFunc-2">
    <description> Compare two values returned from fn:upper-case(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $vA := (&quot;B STRING&quot;, current-time(), string(&quot;content&quot;))[1] treat as xs:string,
                $vB := (&quot;b string&quot;, current-time(), string(&quot;content&quot;))[1] treat as xs:string
         return contains(upper-case($vA), upper-case($vB))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-ContainsFunc-3">
    <description> Compare two non-matching values returned from fn:lower-case(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $vA  := (&quot;B STRING&quot;, current-time(), string(&quot;content&quot;))[1] treat as xs:string,
                $vB := (&quot;no match&quot;, current-time(), string(&quot;content&quot;))[1] treat as xs:string
         return contains(lower-case($vA), lower-case($vB))</test>
    <result-string>xs:boolean('false')</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="K2-ContainsFunc-4">
    <description> Compare two non-matching values returned from fn:upper-case(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $vA := (&quot;B STRING&quot;, current-time(), string(&quot;content&quot;))[1] treat as xs:string,
                $vB  := (&quot;no match&quot;, current-time(), string(&quot;content&quot;))[1] treat as xs:string
        return contains(upper-case($vA), upper-case($vB))</test>
    <result-string>xs:boolean('false')</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="K2-ContainsFunc-5">
    <description> Compare two non-matching values returned from fn:lower-case() and fn:upper-case(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $vA := (&quot;B STRING&quot;, current-time(), string(&quot;content&quot;))[1] treat as xs:string,
                $vB := (&quot;b string&quot;, current-time(), string(&quot;content&quot;))[1] treat as xs:string
         return contains(upper-case($vA), lower-case($vB))</test>
    <result-string>xs:boolean('false')</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="K2-ContainsFunc-6">
    <description> Compare two non-matching values returned from fn:lower-case() and fn:upper-case(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $vA := (&quot;B STRING&quot;, current-time(), string(&quot;content&quot;))[1] treat as xs:string,
                $vB := (&quot;b string&quot;, current-time(), string(&quot;content&quot;))[1] treat as xs:string
         return contains(lower-case($vA), upper-case($vB))</test>
    <result-string>xs:boolean('false')</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="cbcl-contains-001">
    <description> test fn:contains with collation and $arg2 as empty string </description>
    <created by="Tim Mills" on="2008-04-11"/>
    <test>fn:boolean(fn:contains('input', '', 'http://www.w3.org/2005/xpath-functions/collation/codepoint'))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="cbcl-contains-002">
    <description> test fn:contains with collation and $arg1 as empty string Author: Tim Mills </description>
    <created by="Oliver Hallam" on="2008-04-11"/>
    <test>fn:boolean(fn:contains('', 'empty', 'http://www.w3.org/2005/xpath-functions/collation/codepoint'))</test>
    <result-string>xs:boolean('false')</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="cbcl-contains-003">
    <description> test evaluation of fn:contains to exactly one item Author: Tim Mills </description>
    <created by="Oliver Hallam" on="2008-04-11"/>
    <test>fn:index-of( ( fn:true(), fn:false()), fn:contains('input', 'in', 'http://www.w3.org/2005/xpath-functions/collation/codepoint'))</test>
    <result-string>xs:string('1')</result-string>
    <result>
      <assert-string-value>1</assert-string-value>
    </result>
  </test-case>
</test-set>