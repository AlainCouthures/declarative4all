<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="fn-ends-with">
   <description>Tests for the ends-with() function</description>
   <link type="spec" document="http://www.w3.org/TR/xpath-functions-30/"
         idref="func-ends-with"/>

   <test-case name="fn-ends-with2args-1">
      <description> Evaluates The "ends-with" function with the arguments set as follows: $arg1 = xs:string(lower bound) $arg2 = xs:string(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:ends-with(xs:string("This is a characte"),xs:string("This is a characte"))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fn-ends-with2args-2">
      <description> Evaluates The "ends-with" function with the arguments set as follows: $arg1 = xs:string(mid range) $arg2 = xs:string(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:ends-with(xs:string("This is a characte"),xs:string("This is a characte"))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fn-ends-with2args-3">
      <description> Evaluates The "ends-with" function with the arguments set as follows: $arg1 = xs:string(upper bound) $arg2 = xs:string(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:ends-with(xs:string("This is a characte"),xs:string("This is a characte"))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fn-ends-with2args-4">
      <description> Evaluates The "ends-with" function with the arguments set as follows: $arg1 = xs:string(lower bound) $arg2 = xs:string(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:ends-with(xs:string("This is a characte"),xs:string("This is a characte"))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fn-ends-with2args-5">
      <description> Evaluates The "ends-with" function with the arguments set as follows: $arg1 = xs:string(lower bound) $arg2 = xs:string(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:ends-with(xs:string("This is a characte"),xs:string("This is a characte"))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fn-ends-with-1">
      <description> Evaluates The "ends-with" function with the arguments set as follows: $arg1 = "" $arg2 = "" </description>
      <created by="Carmelo Montanez" on="2005-05-27"/>
      <test>fn:ends-with("","")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fn-ends-with-2">
      <description> Evaluates The "ends-with" function with the arguments set as follows: $arg1 = "" $arg2 = "A Character String" </description>
      <created by="Carmelo Montanez" on="2005-05-27"/>
      <test>fn:ends-with("","A Character String")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fn-ends-with-3">
      <description> Evaluates The "ends-with" function with the arguments set as follows: $arg1 = "" $arg2 = "A Character String" </description>
      <created by="Carmelo Montanez" on="2005-05-27"/>
      <test>fn:ends-with("A Character String","")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fn-ends-with-4">
      <description> Evaluates The "ends-with" function with the arguments set as follows: $arg1 = () $arg2 = "" </description>
      <created by="Carmelo Montanez" on="2005-05-27"/>
      <test>fn:ends-with((),"")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fn-ends-with-5">
      <description> Evaluates The "ends-with" function with the arguments set as follows: $arg1 = "" $arg2 = () </description>
      <created by="Carmelo Montanez" on="2005-05-27"/>
      <test>fn:ends-with("",())</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fn-ends-with-6">
      <description> Evaluates The "ends-with" function with the arguments set as follows: $arg1 = "A Character String" $arg2 = () </description>
      <created by="Carmelo Montanez" on="2005-05-27"/>
      <test>fn:ends-with("A Character String",())</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fn-ends-with-7">
      <description> Evaluates The "ends-with" function with the arguments set as follows: $arg1 = () $arg2 = "A Character String" </description>
      <created by="Carmelo Montanez" on="2005-05-27"/>
      <test>fn:ends-with((),"A Character String")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fn-ends-with-8">
      <description> Evaluates The "ends-with" function with the arguments set as follows: $arg1 = "AAAAABBBBBCCCCC" $arg2 = "BBBBB" </description>
      <created by="Carmelo Montanez" on="2005-05-27"/>
      <test>fn:ends-with("AAAAABBBBBCCCCC","BBBBB")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fn-ends-with-9">
      <description> Evaluates The "ends-with" function with the arguments set as follows: $arg1 = "AAAAABBBBB" $arg2 = " " </description>
      <created by="Carmelo Montanez" on="2005-05-27"/>
      <test>fn:ends-with("AAAAABBBBB"," ")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fn-ends-with-10">
      <description> Evaluates The "ends-with" function with the arguments set as follows: $arg1 = " " $arg2 = " AAAAABBBBB" </description>
      <created by="Carmelo Montanez" on="2005-05-27"/>
      <test>fn:ends-with(" ","AAAAABBBBB")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fn-ends-with-11">
      <description> Evaluates The "ends-with" function using it as a argument of a fn:not - returns false </description>
      <created by="Carmelo Montanez" on="2005-05-27"/>
      <test>fn:not(fn:ends-with("A","A"))</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fn-ends-with-12">
      <description> Evaluates The "ends-with" function using it as a argument of a fn:not - returns true </description>
      <created by="Carmelo Montanez" on="2005-05-27"/>
      <test>fn:not(fn:ends-with("A","B"))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fn-ends-with-13">
      <description> Evaluates The "ends-with" function with the arguments set as follows: $arg1 = xs:string("A") $arg2 = "A" </description>
      <created by="Carmelo Montanez" on="2005-05-27"/>
      <test>fn:ends-with(xs:string("A"),"A")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fn-ends-with-14">
      <description> Evaluates The "ends-with" function with the arguments set as follows: $arg1 = "A" $arg2 = xs:string("A") </description>
      <created by="Carmelo Montanez" on="2005-05-27"/>
      <test>fn:ends-with("A",xs:string("A"))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fn-ends-with-15">
      <description> Evaluates The "ends-with" function with the arguments set as follows: $arg1 = "A" $arg2 = "a" </description>
      <created by="Carmelo Montanez" on="2005-05-27"/>
      <test>fn:ends-with("A","a")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fn-ends-with-16">
      <description> Evaluates The "ends-with" function with the arguments set as follows: $arg1 = "a" $arg2 = "A" </description>
      <created by="Carmelo Montanez" on="2005-05-27"/>
      <test>fn:ends-with("a","A")</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="K-EndsWithFunc-1">
      <description> A test whose essence is: `ends-with()`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>ends-with()</test>
      <result>
         <error code="XPST0017"/>
      </result>
   </test-case>

   <test-case name="K-EndsWithFunc-2">
      <description> A test whose essence is: `ends-with(())`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>ends-with(())</test>
      <result>
         <error code="XPST0017"/>
      </result>
   </test-case>

   <test-case name="K-EndsWithFunc-3">
      <description> A test whose essence is: `ends-with((), (), "http://www.w3.org/2005/xpath-functions/collation/codepoint", "wrong param")`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>ends-with((), (), "http://www.w3.org/2005/xpath-functions/collation/codepoint", "wrong param")</test>
      <result>
         <error code="XPST0017"/>
      </result>
   </test-case>

   <test-case name="K-EndsWithFunc-4">
      <description> A test whose essence is: `ends-with("a string", "a string", "http://www.example.com/COLLATION/NOT/SUPPORTED")`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>ends-with("a string", "a string", "http://www.example.com/COLLATION/NOT/SUPPORTED")</test>
      <result>
         <error code="FOCH0002"/>
      </result>
   </test-case>

   <test-case name="K-EndsWithFunc-5">
      <description> A test whose essence is: `ends-with("foo", "foo", "http://www.w3.org/2005/xpath-functions/collation/codepoint")`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>ends-with("foo", "foo", "http://www.w3.org/2005/xpath-functions/collation/codepoint")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-EndsWithFunc-6">
      <description> A test whose essence is: `ends-with("tattoo", "tattoo")`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>ends-with("tattoo", "tattoo")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-EndsWithFunc-7">
      <description> A test whose essence is: `not(ends-with("tattoo", "atto"))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not(ends-with("tattoo", "atto"))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-EndsWithFunc-8">
      <description> A test whose essence is: `not(ends-with("tattoo", "atto"))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not(ends-with("tattoo", "atto"))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-EndsWithFunc-9">
      <description> A test whose essence is: `ends-with((), ())`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>ends-with((), ())</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-EndsWithFunc-10">
      <description> A test whose essence is: `not(ends-with ((), "a string"))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not(ends-with ((), "a string"))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-EndsWithFunc-1">
      <description> Compare two values returned from fn:lower-case(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $vA := ("B STRING", current-time(), string("content"))[1] treat as xs:string, 
        $vB := ("b string", current-time(), string("content"))[1] treat as xs:string
        return ends-with(lower-case($vA), lower-case($vB))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-EndsWithFunc-2">
      <description> Compare two values returned from fn:upper-case(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>
         let $vA  := ("B STRING", current-time(), string("content"))[1] treat as xs:string,
         $vB  := ("b string", current-time(), string("content"))[1] treat as xs:string
         return ends-with(upper-case($vA), upper-case($vB))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-EndsWithFunc-3">
      <description> Compare two non-matching values returned from fn:lower-case(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>
         let $vA  := ("B STRING", current-time(), string("content"))[1] treat as xs:string,
         $vB  := ("no match", current-time(), string("content"))[1] treat as xs:string
         return ends-with(lower-case($vA), lower-case($vB))</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="K2-EndsWithFunc-4">
      <description> Compare two non-matching values returned from fn:upper-case(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>
         let $vA  := ("B STRING", current-time(), string("content"))[1] treat as xs:string,
         $vB  := ("no match", current-time(), string("content"))[1] treat as xs:string
         return ends-with(upper-case($vA), upper-case($vB))</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="K2-EndsWithFunc-5">
      <description> Compare two non-matching values returned from fn:lower-case() and fn:upper-case(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>
         let $vA := ("B STRING", current-time(), string("content"))[1] treat as xs:string, 
        $vB := ("b string", current-time(), string("content"))[1] treat as xs:string
        return ends-with(upper-case($vA), lower-case($vB))</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="K2-EndsWithFunc-6">
      <description> Compare two non-matching values returned from fn:lower-case() and fn:upper-case(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>
         let $vA := ("B STRING", current-time(), string("content"))[1] treat as xs:string, 
        $vB := ("b string", current-time(), string("content"))[1] treat as xs:string
        return ends-with(lower-case($vA), upper-case($vB))</test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   
   
   <test-case name="cbcl-ends-with-001">
      <description> test fn:ends-with with collation and empty string </description>
      <created by="Tim Mills" on="2008-04-11"/>      
      <test>fn:boolean(fn:ends-with('input', '', 'http://www.w3.org/2005/xpath-functions/collation/codepoint'))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
</test-set>