<?xml version="1.0" encoding="UTF-8"?>
<test-set covers="fn-function-arity" name="fn-function-arity" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">
  <description>Tests for the function-arity() function</description>
  <link document="http://www.w3.org/TR/xpath-functions-30/" idref="func-function-arity" type="spec"/>
  <dependency type="feature" value="higherOrderFunctions"/>
  <test-case name="fn-function-arity-001">
    <description>Attempts to evaluate the &quot;function-arity&quot; function with no arguments.</description>
    <created by="Tim Mills" on="2011-11-28"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>fn:function-arity()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="fn-function-arity-002">
    <description>Attempts to reference the &quot;function-arity&quot; function with arity zero.</description>
    <created by="Tim Mills" on="2011-11-28"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>fn:function-arity#0</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="fn-function-arity-003">
    <description>Attempts to evaluate the &quot;function-arity&quot; function with two arguments.</description>
    <created by="Tim Mills" on="2011-11-28"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>fn:function-arity( fn:dateTime#2, fn:dateTime#2 )</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="fn-function-arity-004">
    <description>Attempts to reference the &quot;function-arity&quot; function with arity two.</description>
    <created by="Tim Mills" on="2011-11-28"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>fn:function-arity#2</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="fn-function-arity-005">
    <description>Attempts to reference the &quot;function-arity&quot; function with arity one.</description>
    <created by="Tim Mills" on="2011-11-28"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>exists(fn:function-arity#1)</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-function-arity-006">
    <description>Evaluates the &quot;function-arity&quot; function with the argument set as follows: $func = () </description>
    <created by="Tim Mills" on="2011-11-28"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>fn:function-arity( () )</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="fn-function-arity-007">
    <description>Evaluates the &quot;function-arity&quot; function with an argument of type xs:anyAtomicType.</description>
    <created by="Tim Mills" on="2011-11-28"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>fn:function-arity( 1 )</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="fn-function-arity-008">
    <description>Evaluates the &quot;function-arity&quot; function with an argument of type node().</description>
    <created by="Tim Mills" on="2011-11-28"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>fn:function-arity( fn:analyze-string((), &quot;unused&quot;) )</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="fn-function-arity-009">
    <description>Tests the type checking of the argument.</description>
    <created by="Tim Mills" on="2011-11-28"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>fn:function-arity( (fn:concat#2, fn:concat#3) )</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="fn-function-arity-010">
    <description>Tests the type checking of the argument.</description>
    <created by="Tim Mills" on="2011-11-28"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <dependency type="feature" value="staticTyping"/>
    <test>fn:function-arity( if ( fn:current-dateTime() eq
                                    fn:dateTime( fn:current-date(),
                                                 fn:current-time() ))
                               then fn:dateTime#2
                               else 1 )</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="fn-function-arity-011">
    <description>Tests the type checking of the argument.</description>
    <created by="Tim Mills" on="2011-11-28"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>( fn:function-arity( if (current-date() eq xs:date('1900-01-01'))
                                 then fn:dateTime#2
                                 else 1 ),
              fn:function-arity( if (current-date() eq xs:date('1900-01-01'))
                                 then 1
                                 else fn:dateTime#2 ) )</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="fn-function-arity-012">
    <description>Tests the type checking of the argument.</description>
    <created by="Tim Mills" on="2011-11-28"/>
    <dependency type="feature" value="staticTyping"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>fn:function-arity( if ( fn:current-dateTime() eq
                                    fn:dateTime( fn:current-date(),
                                                 fn:current-time() ))
                               then fn:dateTime#2
                               else () )</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="fn-function-arity-013">
    <description>Tests the type checking of the argument.</description>
    <created by="Tim Mills" on="2011-11-28"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>( fn:function-arity( if (current-date() eq xs:date('1900-01-01'))
                                 then fn:dateTime#2
                                 else () ),
              fn:function-arity( if (current-date() eq xs:date('1900-01-01'))
                                 then ()
                                 else fn:dateTime#2 ) )</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="fn-function-arity-014">
    <description>Tests the return type of the &quot;function-arity&quot; function.</description>
    <created by="Tim Mills" on="2011-11-28"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>fn:function-arity( fn:substring#2 )</test>
    <result-string/>
    <result>
      <assert-type>xs:integer</assert-type>
    </result>
  </test-case>
  <test-case name="fn-function-arity-015">
    <description>Evaluates the &quot;function-arity&quot; function with the argument set as follows: $func = fn:dateTime#2 </description>
    <created by="Tim Mills" on="2011-11-28"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>fn:function-arity( fn:dateTime#2 )</test>
    <result-string>xs:string('2')</result-string>
    <result>
      <assert-string-value>2</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-function-arity-016">
    <description>Evaluates the &quot;function-arity&quot; function with the argument set as follows: $func = fn:concat#99 </description>
    <created by="Tim Mills" on="2011-11-28"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>fn:function-arity( fn:concat#99 )</test>
    <result-string>xs:string('99')</result-string>
    <result>
      <assert-string-value>99</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-function-arity-017">
    <description>Evaluates the &quot;function-arity&quot; function with the argument set as follows: $func = fn:concat#340282366920938463463374607431768211456</description>
    <created by="Tim Mills" on="2011-11-28"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>fn:function-arity( fn:concat#340282366920938463463374607431768211456 )</test>
    <result-string/>
    <result>
      <any-of>
        <error code="FOAR0002"/>
        <assert-string-value>340282366920938463463374607431768211456</assert-string-value>
      </any-of>
    </result>
  </test-case>
  <test-case name="fn-function-arity-018">
    <description>Evaluates the &quot;function-arity&quot; function with the argument set as follows: function($node){name($node)} </description>
    <created by="Tim Mills" on="2011-11-28"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>fn:function-arity( function($node){name($node)} )</test>
    <result-string>xs:string('1')</result-string>
    <result>
      <assert-string-value>1</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-function-arity-019">
    <description>Evaluates the &quot;function-arity&quot; function with the argument set as follows: function($arg1, $arg2){subsequence($arg1, $arg2, 1)} </description>
    <created by="Tim Mills" on="2011-11-28"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>fn:function-arity( function($arg1, $arg2)
                               { subsequence($arg1, $arg2, 1) } )</test>
    <result-string>xs:string('2')</result-string>
    <result>
      <assert-string-value>2</assert-string-value>
    </result>
  </test-case>
  <test-case covers="partial-function-application" name="fn-function-arity-020">
    <description>Evaluates the &quot;function-arity&quot; function with the argument refereing to a partial function application.</description>
    <created by="Tim Mills" on="2011-11-28"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>let $initial := fn:substring(?, 1, 1) 
            return fn:function-arity( $initial )</test>
    <result-string>xs:string('1')</result-string>
    <result>
      <assert-string-value>1</assert-string-value>
    </result>
  </test-case>
  <test-case covers="partial-function-application" name="fn-function-arity-021">
    <description>Evaluates the &quot;function-arity&quot; function with the argument refereing to a partial function application.</description>
    <created by="Tim Mills" on="2011-11-28"/>
    <environment ref="math"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>fn:function-arity( math:pow(?, 10) )</test>
    <result-string>xs:string('1')</result-string>
    <result>
      <assert-string-value>1</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-function-arity-022">
    <description>Evaluates the &quot;function-arity&quot; function with the argument refereing a global user-defined function.</description>
    <created by="Tim Mills" on="2011-11-28"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
	declare function local:add($arg1, $arg2, $arg3)
        {
           $arg1 + $arg2 + $arg3
        };

	fn:function-arity( local:add#3 )
      </test>
    <result-string>xs:string('3')</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-function-arity-023">
    <description>Evaluates the &quot;function-arity&quot; function with the argument refereing a partial application of a global user-defined function.</description>
    <created by="Tim Mills" on="2011-11-28"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
	declare function local:add($arg1, $arg2, $arg3)
        {
           $arg1 + $arg2 + $arg3
        };

	fn:function-arity( local:add(1, 2, ?) )
      </test>
    <result-string>xs:string('1')</result-string>
    <result>
      <assert-string-value>1</assert-string-value>
    </result>
  </test-case>
</test-set>