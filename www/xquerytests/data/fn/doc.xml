<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="fn-doc">
   <description>Tests for the doc() function</description>
   <link type="spec" document="http://www.w3.org/TR/xpath-functions-30/"
         idref="func-doc"/>
         
   <environment name="works-mod-uri">
      <source role="." file="../docs/works-mod.xml" uri="http://www.w3.org/fots/docs/works-mod.xml">
         <description>Data for various NIST tests (abbreviated, unabbreviated syntax)</description>
         <created by="Carmelo Montanez" on="2005-03-04"/>
      </source>
      <param name="uri" as="xs:string" select="'http://www.w3.org/fots/docs/works-mod.xml'" declared="false"/>
   </environment>
   
   <environment name="works-and-staff-uri">
      <source file="../docs/works.xml" uri="http://www.w3.org/fots/docs/works.xml">
         <description>Data for various NIST tests</description>
         <created by="Carmelo Montanez" on="2005-03-04"/>
      </source>
      <source file="../docs/staff.xml" uri="http://www.w3.org/fots/docs/staff.xml">
         <description>Data for various NIST tests</description>
         <created by="Carmelo Montanez" on="2005-03-04"/>
      </source>
      <param name="works" as="xs:string" select="'http://www.w3.org/fots/docs/works.xml'" declared="false"/>
      <param name="staff" as="xs:string" select="'http://www.w3.org/fots/docs/staff.xml'" declared="false"/>
   </environment>      

   <test-case name="fn-doc-1">
      <description> Evaluation of fn:doc function with an invalid argument. </description>
      <created by="Carmelo Montanez" on="2005-11-30"/>
      <test>fn:doc("http:\\invalid&gt;URI\someURI")</test>
      <result>
         <any-of>
            <error code="FODC0005"/>
            <error code="FODC0002"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="fn-doc-2">
      <description> Evaluation of fn:doc function with wrong arity. </description>
      <created by="Carmelo Montanez" on="2005-11-30"/>
      <test>fn:doc("argument1","argument2")</test>
      <result>
         <error code="XPST0017"/>
      </result>
   </test-case>

   <test-case name="fn-doc-3">
      <description> Evaluation of fn:doc, which tries to retrieve a non-existent resourse. </description>
      <created by="Carmelo Montanez" on="2005-12-02"/>
      <test>fn:doc("thisfileshouldnotexists.xml")</test>
      <result>
         <error code="FODC0002"/>
      </result>
   </test-case>

   <test-case name="fn-doc-4">
      <description> Evaluation of fn:doc with argument set to empty sequence. </description>
      <created by="Carmelo Montanez" on="2006-01-25"/>
      <test>fn:doc(())</test>
      <result>
         <assert-empty/>
      </result>
   </test-case>

   <test-case name="fn-doc-5">
      <description> Evaluation of fn:doc as per example 1 from the functions and Ops. for this function. </description>
      <created by="Carmelo Montanez" on="2006-01-25"/>
      <environment ref="works-mod-uri"/>
      <test>fn:doc($uri) is fn:doc($uri)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fn-doc-6">
      <description> Evaluation of fn:doc used with different resourses and the "is" operator. </description>
      <created by="Carmelo Montanez" on="2006-01-25"/>
      <environment ref="works-and-staff-uri"/>
      <test>fn:doc($works) is fn:doc($staff)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fn-doc-7">
      <description> Typical usage of fn:doc. Retrieve a part of the resources. </description>
      <created by="Carmelo Montanez" on="2006-01-25"/>
      <environment ref="works-mod-uri"/>
      <test>fn:doc($uri)//day/string()</test>
      <result>
         <assert-deep-eq>"Monday", "Tuesday"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fn-doc-15">
      <description> Evaluation of fn:doc as an argument to the fn:nilled function. </description>
      <created by="Carmelo Montanez" on="2006-01-25"/>
      <environment ref="works-mod-uri"/>
      <test>fn:count(fn:nilled(fn:doc($uri)))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-doc-16">
      <description> Evaluation of fn:doc as an argument to the fn:node-name function. Use fn:count to avoid empty file. </description>
      <created by="Carmelo Montanez" on="2006-01-25"/>
      <environment ref="works-mod-uri"/>
      <test>fn:count(fn:node-name(fn:doc($uri)))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-doc-17">
      <description> Evaluation of fn:doc with argument set to an invalid URI. </description>
      <created by="Carmelo Montanez" on="2006-01-25"/>
      <test>fn:doc("%gg")</test>
      <result>
         <any-of>
           <error code="FODC0002"/>
           <error code="FODC0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="fn-doc-18">
      <description> Evaluation of fn:doc used with "is" operator and the fn:not function. </description>
      <created by="Carmelo Montanez" on="2006-01-25"/>
      <environment ref="works-mod-uri"/>
      <test>fn:not(fn:doc($uri) is fn:doc($uri))</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fn-doc-19">
      <description> Evaluation of fn:doc used with "is" operator and the fn:true function with "and" operator. </description>
      <created by="Carmelo Montanez" on="2006-01-25"/>
      <environment ref="works-mod-uri"/>
      <test>(fn:doc($uri) is fn:doc($uri)) and fn:true()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fn-doc-20">
      <description> Evaluation of fn:doc used with "is" operator and the fn:false function with "and" operator. </description>
      <created by="Carmelo Montanez" on="2006-01-25"/>
      <environment ref="works-mod-uri"/>
      <test>(fn:doc($uri) is fn:doc($uri)) and fn:false()</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fn-doc-21">
      <description> Evaluation of fn:doc used with "is" operator and the fn:true function with "or" operator. </description>
      <created by="Carmelo Montanez" on="2006-01-25"/>
      <environment ref="works-mod-uri"/>
      <test>(fn:doc($uri) is fn:doc($uri)) or fn:true()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fn-doc-22">
      <description> Evaluation of fn:doc used with "is" operator and the fn:false function with "or" operator. </description>
      <created by="Carmelo Montanez" on="2006-01-25"/>
      <environment ref="works-mod-uri"/>
      <test>(fn:doc($uri) is fn:doc($uri)) or fn:false()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-SeqDocFunc-1">
      <description> Invoke fn:doc() on the empty sequence. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(fn:doc(()))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-SeqDocFunc-2">
      <description> Invoke fn:doc() on the empty sequence(#2). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<e>{fn:doc(())}</e>]]></test>
      <result>
         <assert-xml><![CDATA[<e/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="K2-SeqDocFunc-3">
      <description> Load an unexisting file via the file:// protocol. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>fn:doc(xs:untypedAtomic("file:///example.com/does/not/exist/xqts-testing.xml"))</test>
      <result>
         <error code="FODC0002"/>
      </result>
   </test-case>

   <test-case name="K2-SeqDocFunc-4">
      <description> Invoke fn:doc with a relative, Unix-like URI. Since it's relative, and the base-uri may be undefined, XPST0001 is allowed. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>doc("/example.com/example.org/does/not/exist/doesNotExist/works-mod.xml")</test>
      <result>
         <any-of>
            <error code="FODC0002"/>
            <error code="XPST0001"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-SeqDocFunc-5">
      <description> Invoke fn:doc with a relative, Unix-like URI and a declared base-uri. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <modified by="Michael Kay" on="2012-05-23" change="Use .invalid domain. See bug 14557"/>
      <environment>
         <static-base-uri uri="http://www.example.invalid"/>
      </environment>
      <test>doc("/example.com/example.org/does/not/exist/doesNotExist/works-mod.xml")</test>
      <result>
         <error code="FODC0002"/>
      </result>
   </test-case>

   <test-case name="K2-SeqDocFunc-6">
      <description> Invoke fn:doc with a relative, Unix-like URI and a declared base-uri. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <environment>
         <static-base-uri uri="file:///"/>
      </environment>
      <test>doc("/example.com/example.org/does/not/exist/doesNotExist/works-mod.xml")</test>
      <result>
         <error code="FODC0002"/>
      </result>
   </test-case>

   <test-case name="K2-SeqDocFunc-7">
      <description> A windows file path is an invalid URI to fn:doc(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>doc("example.com\example.org\does\not\exist\doesNotExist\works-mod.xml")</test>
      <result>
         <error code="FODC0002"/>
      </result>
   </test-case>

   <test-case name="K2-SeqDocFunc-8">
      <description> A windows file path is an invalid URI to fn:doc()(#2). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>doc("\example.com\example.org\does\not\exist\doesNotExist\works-mod.xml")</test>
      <result>
         <error code="FODC0002"/>
      </result>
   </test-case>

   <test-case name="K2-SeqDocFunc-9">
      <description> A windows file path is an invalid URI to fn:doc()(#3). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>doc("C:\example.com\example.org\does\not\exist\doesNotExist\works-mod.xml")</test>
      <result>
         <any-of>
            <error code="FODC0002"/>
            <error code="FODC0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-SeqDocFunc-10">
      <description> Invoke fn:doc() with a static base-uri that is complete, but doesn't point to a file. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <environment>
         <static-base-uri uri="file:///directory/directory/example.com/www.example.com/thisFileDoesNotExist.xml"/>
      </environment>
      <test>doc("")</test>
      <result>
         <error code="FODC0002"/>
      </result>
   </test-case>

   <test-case name="K2-SeqDocFunc-11">
      <description> Invoke fn:doc() with a static base-uri that points to a non-existent directory. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <environment>
         <static-base-uri uri="file:///directory/directory/example.com/"/>
      </environment>
      <test>doc("")</test>
      <result>
         <error code="FODC0002"/>
      </result>
   </test-case>

   <test-case name="K2-SeqDocFunc-12">
      <description> General query complexity, combined with a call to fn:doc() that is never evaluated. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare variable $fileToOpen := <Variable id="_7" name="constComplex2" type="_11c" context="_1" location="f0:17" file="f0" line="17"/>; 
        empty($fileToOpen//*[let $i := @type return doc($fileToOpen)//*[$i]])
      ]]></test>
      <result>
         <any-of>
            <assert-true/>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-SeqDocFunc-13">
      <description> Never use the result of calls to fn:doc. Since implementations are allowed to dereference the sources in any case, an error is allowed. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>
        declare variable $doc1 := doc("http://example.com"); 
        let $doc2 := doc("ftp://example.com/") 
        for $i in doc("localFile.xml") 
        return (1, 2, 3)</test>
      <result>
         <any-of>
            <assert-string-value>1 2 3</assert-string-value>
            <error code="FODC0002"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="fn-doc-24">
      <description> Open a document that has a text node containing ' ]'. Use a relative URI.</description>
      <created by="Frans Englich" on="2007-12-20"/>
      <environment>
         <source file="id/SpaceBracket.xml" uri="id/SpaceBracket.xml"/>
         <param name="uri" as="xs:string" select="'id/SpaceBracket.xml'"/>
      </environment>
      <test>fn:doc($uri)</test>
      <result>
         <assert-xml><![CDATA[<p> ]</p>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fn-doc-25">
      <description> Open a document that has an element node with an unusual name. </description>
      <created by="Frans Englich" on="2007-12-20"/>
      <environment>
         <source file="id/HighUnicode.xml" uri="id/HighUnicode.xml"/>
         <param name="uri" as="xs:string" select="'id/HighUnicode.xml'"/>
      </environment>
      <test>fn:doc($uri)</test>
      <result>
         <assert-xml>&lt;&#3648;&#3592;&#3617;&#3626;&#3660;>&lt;/&#3648;&#3592;&#3617;&#3626;&#3660;></assert-xml>
      </result>
   </test-case>

   <test-case name="fn-doc-26">
      <description> Open a document that has a text node containing ' ]'. </description>
      <created by="Frans Englich" on="2007-12-21"/>
      <environment>
         <source file="id/HighUnicode2.xml" uri="id/HighUnicode2.xml"/>
         <param name="uri" as="xs:string" select="'id/HighUnicode2.xml'"/>
      </environment>
      <test>fn:doc($uri)</test>
      <result>
         <assert-xml>&lt;&#3648;&#3592;&#3617;&#3626;&#3660;/></assert-xml>
      </result>
   </test-case>

   <test-case name="fn-doc-27">
      <description> Use a series of corner case Unicode codepoints. </description>
      <created by="Frans Englich" on="2007-12-21"/>
      <environment>
         <source file="id/BCisInvalid.xml" uri="id/BCisInvalid.xml"/>
         <param name="uri" as="xs:string" select="'id/BCisInvalid.xml'"/>
      </environment>
      <test>fn:doc($uri)</test>
      <result>
         <error code="FODC0002"/>
      </result>
   </test-case>

   <test-case name="fn-doc-28">
      <description> Open a document which contains the codepoint 188 in an NCName. </description>
      <created by="Frans Englich" on="2007-12-27"/>
      <environment>
         <source file="id/InvalidUmlaut.xml" uri="id/InvalidUmlaut.xml"/>
         <param name="uri" as="xs:string" select="'id/InvalidUmlaut.xml'"/>
      </environment>
      <test>fn:doc($uri)</test>
      <result>
         <error code="FODC0002"/>
      </result>
   </test-case>

   <test-case name="fn-doc-29">
      <description> Use a namespace declaration which is available in the subset. </description>
      <created by="Frans Englich" on="2007-12-27"/>
      <environment>
         <source file="id/NamespaceSuppliedInternally.xml" uri="id/NamespaceSuppliedInternally.xml"/>
         <param name="uri" as="xs:string" select="'id/NamespaceSuppliedInternally.xml'"/>
      </environment>
       <test>fn:doc($uri)</test>
      <result>
         <assert-xml><![CDATA[<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fn-doc-30">
      <description> Open an XML document that has an xml:id attribute duplicated. </description>
      <created by="Frans Englich" on="2008-01-15"/>
      <environment>
         <source file="id/XMLIdDuplicated.xml" uri="id/XMLIdDuplicated.xml"/>
         <param name="uri" as="xs:string" select="'id/XMLIdDuplicated.xml'"/>
      </environment>
      <test>local-name(fn:doc($uri)/*)</test>
      <result>
         <any-of>
            <assert-string-value>schema</assert-string-value>
            <error code="FODC0002"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="fn-doc-31">
      <description> Open an XML document that has an invald xml:id attribute. </description>
      <created by="Frans Englich" on="2008-01-15"/>
      <environment>
         <source file="id/InvalidXMLId.xml" uri="id/InvalidXMLId.xml"/>
         <param name="uri" as="xs:string" select="'id/InvalidXMLId.xml'"/>
      </environment>
      <test>local-name(fn:doc($uri)/*)</test>
      <result>
         <any-of>
            <assert-string-value>schema</assert-string-value>
            <error code="FODC0002"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-SeqDocFunc-14">
      <description> ':/' is an invalid URI, no scheme. </description>
      <created by="Frans Englich" on="2008-01-15"/>
      <test>doc(':/')</test>
      <result>
         <error code="FODC0005"/>
      </result>
   </test-case>

   <test-case name="fn-doc-32">
      <description> Open an XML document that has ISO-8859-1 as encoding. </description>
      <created by="Frans Englich" on="2008-01-15"/>
      <environment>
         <source file="id/Books2.xml" uri="id/Books2.xml"/>
         <param name="uri" as="xs:string" select="'id/Books2.xml'"/>
      </environment>
      <test>string(fn:doc($uri)), string(exactly-one(fn:doc($uri)/*))</test>
      <result>
         <assert-string-value>
  Everyday Italian
  Giada De Laurentiis
 
  Everyday Italian
  Giada De Laurentiis
</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-doc-33">
      <description> A moderately complex query. , local:recurseMetaObject($metaObjects[@superClass = $object/@className], $count + 1) Output an xml:id attribute on each group element, if we have a name. </description>
      <created by="Frans Englich" on="2008-02-19"/>
      <environment>
         <source file="id/QObject.xml" uri="id/QObject.xml"/>
         <param name="uri" as="xs:string" select="'id/QObject.xml'" declared="true"/>
      </environment>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
        declare namespace s = "http://www.w3.org/2000/svg"; 
        declare variable $uri external; 
        declare variable $root := doc($uri)/root/QObject; 
        declare variable $metaObjects := $root/preceding-sibling::metaObjects/metaObject; 
        declare function local:recurseMetaObject($object as element(metaObject), $count as xs:integer) { 
            <s:text x ="{10 * $count}" y="10" font-family="Verdana" font-size="55" fill="blue" >{
                string($object/@className)}</s:text> 
        }; 
        declare function local:drawDiagram($object as element(QObject)) as element(s:g) { 
            <s:g> { if(string($object/@objectName)) 
                    then attribute xml:id {$object/@objectName} 
                    else (), 
                    $metaObjects[@className = $object/@className]/local:recurseMetaObject(., 1) } </s:g> 
        }; 
        <s:svg> { 
            <s:rect x="1" y="1" width="500" height="300" fill="none" stroke="blue" stroke-width="2"/>, 
            <s:rect x="400" y="100" width="400" height="200" fill="yellow" stroke="navy" stroke-width="10" />, 
            for $object in $root//QObject for $i in local:drawDiagram($object) stable order by string($i) return $i 
        } </s:svg>
     ]]></test>
      <result>
         <assert-xml file="doc/fn-doc-33.out"/>
      </result>
   </test-case>

   <test-case name="fn-doc-34">
      <description> A moderately complex query. </description>
      <created by="Frans Englich" on="2008-02-28"/>
      <environment>
         <source file="id/0x010D.xml" uri="id/0x010D.xml"/>
         <param name="uri" as="xs:string" select="'id/0x010D.xml'"/>
      </environment>
      <test>doc($uri)</test>
      <result>
         <assert-xml>&lt;project &#269;reated-by="{{build_number}}"/></assert-xml>
      </result>
   </test-case>

   <test-case name="fn-doc-35">
      <description> Load a not-wellformed XML file. </description>
      <created by="Frans Englich" on="2008-02-28"/>
      <test>doc('id/badxml.xml')</test>
      <result>
         <error code="FODC0002"/>
      </result>
   </test-case>

   <test-case name="fn-doc-36">
      <description> Count text nodes in a document containing character references. </description>
      <created by="Frans Englich" on="2008-02-28"/>
      <environment>
         <source file="id/builtinEntities.xml" uri="id/builtinEntities.xml"/>
         <param name="uri" as="xs:string" select="'id/builtinEntities.xml'"/>
      </environment>
       <test>count(doc($uri)//text())</test>
      <result>
         <assert-eq>9</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-doc-37">
      <description> Use an xml:id attribute that has whitespace, whitespace normalization is performed. </description>
      <created by="Frans Englich" on="2008-05-27"/>
      <environment>
         <source file="id/XMLIdWhitespace.xml" uri="id/XMLIdWhitespace.xml"/>
         <param name="uri" as="xs:string" select="'id/XMLIdWhitespace.xml'"/>
      </environment>
      <dependency type="spec" value="XP30+ XQ10+"/>
      <test>let $result := id("idABC", doc($uri)) return (empty($result), $result)</test>
      <result>
         <any-of>
            <assert-true/>
            <assert-xml><![CDATA[false<xs:attribute xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:atomic="http://www.w3.org/XQueryTest" name="attr" type="xs:IDREFS" use="required" xml:id="idABC"/>]]></assert-xml>
         </any-of>
      </result>
   </test-case>
</test-set>