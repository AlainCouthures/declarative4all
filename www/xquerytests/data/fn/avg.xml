<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="fn-avg">
   <description>Tests for the avg() function</description>
   <link type="spec" document="http://www.w3.org/TR/xpath-functions-30/"
         idref="func-avg"/>

   <test-case name="fn-avgint1args-1">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg = xs:int(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:int("-2147483648")))</test>
      <result>
         <assert-eq>-2147483648</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgint1args-2">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg = xs:int(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:int("-1873914410")))</test>
      <result>
         <assert-eq>-1873914410</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgint1args-3">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg = xs:int(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:int("2147483647")))</test>
      <result>
         <assert-eq>2147483647</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgintg1args-1">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg = xs:integer(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:integer("-999999999999999999")))</test>
      <result>
         <assert-eq>-999999999999999999</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgintg1args-2">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg = xs:integer(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:integer("830993497117024304")))</test>
      <result>
         <assert-eq>830993497117024304</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgintg1args-3">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg = xs:integer(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:integer("999999999999999999")))</test>
      <result>
         <assert-eq>999999999999999999</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgdec1args-1">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg = xs:decimal(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:decimal("-999999999999999999")))</test>
      <result>
         <assert-eq>-999999999999999999</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgdec1args-2">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg = xs:decimal(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:decimal("617375191608514839")))</test>
      <result>
         <assert-eq>617375191608514839</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgdec1args-3">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg = xs:decimal(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:decimal("999999999999999999")))</test>
      <result>
         <assert-eq>999999999999999999</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgdbl1args-1">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg = xs:double(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:double("-1.7976931348623157E308")))</test>
      <result>
         <assert-eq>-1.7976931348623157E308</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgdbl1args-2">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg = xs:double(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:double("0")))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgdbl1args-3">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg = xs:double(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:double("1.7976931348623157E308")))</test>
      <result>
         <assert-eq>1.7976931348623157E308</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgflt1args-1">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg = xs:float(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:float("-3.4028235E38")))</test>
      <result>
         <assert-eq>xs:float('-3.4028235E38')</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgflt1args-2">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg = xs:float(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:float("0")))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgflt1args-3">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg = xs:float(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:float("3.4028235E38")))</test>
      <result>
         <assert-eq>xs:float("3.4028235E38")</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avglng1args-1">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg = xs:long(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:long("-92233720368547758")))</test>
      <result>
         <assert-eq>-92233720368547758</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avglng1args-2">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg = xs:long(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:long("-47175562203048468")))</test>
      <result>
         <assert-eq>-47175562203048468</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avglng1args-3">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg = xs:long(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:long("92233720368547758")))</test>
      <result>
         <assert-eq>92233720368547758</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgusht1args-1">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg = xs:unsignedShort(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:unsignedShort("0")))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgusht1args-2">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg = xs:unsignedShort(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:unsignedShort("44633")))</test>
      <result>
         <assert-eq>44633</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgusht1args-3">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg = xs:unsignedShort(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:unsignedShort("65535")))</test>
      <result>
         <assert-eq>65535</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgnint1args-1">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg = xs:negativeInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:negativeInteger("-999999999999999999")))</test>
      <result>
         <assert-eq>-999999999999999999</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgnint1args-2">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg = xs:negativeInteger(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:negativeInteger("-297014075999096793")))</test>
      <result>
         <assert-eq>-297014075999096793</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgnint1args-3">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg = xs:negativeInteger(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:negativeInteger("-1")))</test>
      <result>
         <assert-eq>-1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgpint1args-1">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg = xs:positiveInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:positiveInteger("1")))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgpint1args-2">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg = xs:positiveInteger(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:positiveInteger("52704602390610033")))</test>
      <result>
         <assert-eq>52704602390610033</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgpint1args-3">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg = xs:positiveInteger(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:positiveInteger("999999999999999999")))</test>
      <result>
         <assert-eq>999999999999999999</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgulng1args-1">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg = xs:unsignedLong(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:unsignedLong("0")))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgulng1args-2">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg = xs:unsignedLong(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:unsignedLong("130747108607674654")))</test>
      <result>
         <assert-eq>130747108607674654</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgulng1args-3">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg = xs:unsignedLong(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:unsignedLong("184467440737095516")))</test>
      <result>
         <assert-eq>184467440737095516</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgnpi1args-1">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg = xs:nonPositiveInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:nonPositiveInteger("-999999999999999999")))</test>
      <result>
         <assert-eq>-999999999999999999</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgnpi1args-2">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg = xs:nonPositiveInteger(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:nonPositiveInteger("-475688437271870490")))</test>
      <result>
         <assert-eq>-475688437271870490</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgnpi1args-3">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg = xs:nonPositiveInteger(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:nonPositiveInteger("0")))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgnni1args-1">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg = xs:nonNegativeInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:nonNegativeInteger("0")))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgnni1args-2">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg = xs:nonNegativeInteger(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:nonNegativeInteger("303884545991464527")))</test>
      <result>
         <assert-eq>303884545991464527</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgnni1args-3">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg = xs:nonNegativeInteger(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:nonNegativeInteger("999999999999999999")))</test>
      <result>
         <assert-eq>999999999999999999</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgsht1args-1">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg = xs:short(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:short("-32768")))</test>
      <result>
         <assert-eq>-32768</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgsht1args-2">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg = xs:short(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:short("-5324")))</test>
      <result>
         <assert-eq>-5324</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgsht1args-3">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg = xs:short(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:short("32767")))</test>
      <result>
         <assert-eq>32767</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgint2args-1">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:int(lower bound) $arg2 = xs:int(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:int("-2147483648"),xs:int("-2147483648")))</test>
      <result>
         <assert-eq>-2147483648</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgint2args-2">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:int(mid range) $arg2 = xs:int(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:int("-1873914410"),xs:int("-2147483648")))</test>
      <result>
         <assert-eq>-2010699029</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgint2args-3">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:int(upper bound) $arg2 = xs:int(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:int("2147483647"),xs:int("-2147483648")))</test>
      <result>
         <assert-eq>-0.5</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgint2args-4">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:int(lower bound) $arg2 = xs:int(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:int("-2147483648"),xs:int("-1873914410")))</test>
      <result>
         <assert-eq>-2010699029</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgint2args-5">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:int(lower bound) $arg2 = xs:int(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:int("-2147483648"),xs:int("2147483647")))</test>
      <result>
         <assert-eq>-0.5</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgintg2args-1">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:integer(lower bound) $arg2 = xs:integer(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:integer("-999999999999999999"),xs:integer("-999999999999999999")))</test>
      <result>
         <assert-eq>-999999999999999999</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgintg2args-2">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:integer(mid range) $arg2 = xs:integer(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:integer("830993497117024304"),xs:integer("-999999999999999999")))</test>
      <result>
         <assert-eq>-84503251441487847.5</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgintg2args-3">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:integer(upper bound) $arg2 = xs:integer(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:integer("999999999999999999"),xs:integer("-999999999999999999")))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgintg2args-4">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:integer(lower bound) $arg2 = xs:integer(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:integer("-999999999999999999"),xs:integer("830993497117024304")))</test>
      <result>
         <assert-eq>-84503251441487847.5</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgintg2args-5">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:integer(lower bound) $arg2 = xs:integer(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:integer("-999999999999999999"),xs:integer("999999999999999999")))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgdec2args-1">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:decimal(lower bound) $arg2 = xs:decimal(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:decimal("-999999999999999999"),xs:decimal("-999999999999999999")))</test>
      <result>
         <assert-eq>-999999999999999999</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgdec2args-2">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:decimal(mid range) $arg2 = xs:decimal(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:decimal("617375191608514839"),xs:decimal("-999999999999999999")))</test>
      <result>
         <assert-eq>-191312404195742580</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgdec2args-3">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:decimal(upper bound) $arg2 = xs:decimal(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:decimal("999999999999999999"),xs:decimal("-999999999999999999")))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgdec2args-4">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:decimal(lower bound) $arg2 = xs:decimal(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:decimal("-999999999999999999"),xs:decimal("617375191608514839")))</test>
      <result>
         <assert-eq>-191312404195742580</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgdec2args-5">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:decimal(lower bound) $arg2 = xs:decimal(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:decimal("-999999999999999999"),xs:decimal("999999999999999999")))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgdbl2args-1">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:double(lower bound) $arg2 = xs:double(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:double("-1.7976931348623157E150"),xs:double("-1.7976931348623157E150"))) eq -1.7976931348623157E150</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fn-avgdbl2args-2">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:double(mid range) $arg2 = xs:double(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:double("0"),xs:double("-1.7976931348623157E308"))) eq -8.9884656743115785E307</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fn-avgdbl2args-3">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:double(upper bound) $arg2 = xs:double(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:double("1.7976931348623157E308"),xs:double("-1.7976931348623157E308")))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgdbl2args-4">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:double(lower bound) $arg2 = xs:double(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:double("-1.7976931348623157E308"),xs:double("0"))) eq -8.9884656743115785E307</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fn-avgdbl2args-5">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:double(lower bound) $arg2 = xs:double(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:double("-1.7976931348623157E308"),xs:double("1.7976931348623157E308")))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgflt2args-1">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:float(lower bound) $arg2 = xs:float(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:float("-3.4028235E38"),xs:float("-3.4028235E38")))</test>
      <result>
         <any-of>
            <assert-string-value>-INF</assert-string-value>
            <assert-eq>-3.4028235E38</assert-eq>
            <error code="FOAR0002"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="fn-avgflt2args-2">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:float(mid range) $arg2 = xs:float(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:float("0"),xs:float("-3.4028235E38")))</test>
      <result>
         <assert-eq>xs:float('-1.7014117E38')</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgflt2args-3">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:float(upper bound) $arg2 = xs:float(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:float("3.4028235E38"),xs:float("-3.4028235E38")))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgflt2args-4">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:float(lower bound) $arg2 = xs:float(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:float("-3.4028235E38"),xs:float("0")))</test>
      <result>
         <assert-eq>xs:float('-1.7014117E38')</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgflt2args-5">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:float(lower bound) $arg2 = xs:float(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:float("-3.4028235E38"),xs:float("3.4028235E38")))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avglng2args-1">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:long(lower bound) $arg2 = xs:long(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:long("-92233720368547758"),xs:long("-92233720368547758")))</test>
      <result>
         <assert-eq>-92233720368547758</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avglng2args-2">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:long(mid range) $arg2 = xs:long(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:long("-47175562203048468"),xs:long("-92233720368547758")))</test>
      <result>
         <assert-eq>-69704641285798113</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avglng2args-3">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:long(upper bound) $arg2 = xs:long(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:long("92233720368547758"),xs:long("-92233720368547758")))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avglng2args-4">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:long(lower bound) $arg2 = xs:long(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:long("-92233720368547758"),xs:long("-47175562203048468")))</test>
      <result>
         <assert-eq>-69704641285798113</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avglng2args-5">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:long(lower bound) $arg2 = xs:long(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:long("-92233720368547758"),xs:long("92233720368547758")))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgusht2args-1">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:unsignedShort(lower bound) $arg2 = xs:unsignedShort(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:unsignedShort("0"),xs:unsignedShort("0")))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgusht2args-2">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:unsignedShort(mid range) $arg2 = xs:unsignedShort(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:unsignedShort("44633"),xs:unsignedShort("0")))</test>
      <result>
         <assert-eq>22316.5</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgusht2args-3">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:unsignedShort(upper bound) $arg2 = xs:unsignedShort(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:unsignedShort("65535"),xs:unsignedShort("0")))</test>
      <result>
         <assert-eq>32767.5</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgusht2args-4">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:unsignedShort(lower bound) $arg2 = xs:unsignedShort(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:unsignedShort("0"),xs:unsignedShort("44633")))</test>
      <result>
         <assert-eq>22316.5</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgusht2args-5">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:unsignedShort(lower bound) $arg2 = xs:unsignedShort(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:unsignedShort("0"),xs:unsignedShort("65535")))</test>
      <result>
         <assert-eq>32767.5</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgnint2args-1">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:negativeInteger(lower bound) $arg2 = xs:negativeInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:negativeInteger("-999999999999999999"),xs:negativeInteger("-999999999999999999")))</test>
      <result>
         <assert-eq>-999999999999999999</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgnint2args-2">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:negativeInteger(mid range) $arg2 = xs:negativeInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:negativeInteger("-297014075999096793"),xs:negativeInteger("-999999999999999999")))</test>
      <result>
         <assert-eq>-648507037999548396</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgnint2args-3">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:negativeInteger(upper bound) $arg2 = xs:negativeInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:negativeInteger("-1"),xs:negativeInteger("-999999999999999999")))</test>
      <result>
         <assert-eq>-500000000000000000</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgnint2args-4">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:negativeInteger(lower bound) $arg2 = xs:negativeInteger(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:negativeInteger("-999999999999999999"),xs:negativeInteger("-297014075999096793")))</test>
      <result>
         <assert-eq>-648507037999548396</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgnint2args-5">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:negativeInteger(lower bound) $arg2 = xs:negativeInteger(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:negativeInteger("-999999999999999999"),xs:negativeInteger("-1")))</test>
      <result>
         <assert-eq>-500000000000000000</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgpint2args-1">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:positiveInteger(lower bound) $arg2 = xs:positiveInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:positiveInteger("1"),xs:positiveInteger("1")))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgpint2args-2">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:positiveInteger(mid range) $arg2 = xs:positiveInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:positiveInteger("52704602390610033"),xs:positiveInteger("1")))</test>
      <result>
         <assert-eq>26352301195305017</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgpint2args-3">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:positiveInteger(upper bound) $arg2 = xs:positiveInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:positiveInteger("999999999999999999"),xs:positiveInteger("1")))</test>
      <result>
         <assert-eq>500000000000000000</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgpint2args-4">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:positiveInteger(lower bound) $arg2 = xs:positiveInteger(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:positiveInteger("1"),xs:positiveInteger("52704602390610033")))</test>
      <result>
         <assert-eq>26352301195305017</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgpint2args-5">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:positiveInteger(lower bound) $arg2 = xs:positiveInteger(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:positiveInteger("1"),xs:positiveInteger("999999999999999999")))</test>
      <result>
         <assert-eq>500000000000000000</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgulng2args-1">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:unsignedLong(lower bound) $arg2 = xs:unsignedLong(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:unsignedLong("0"),xs:unsignedLong("0")))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgulng2args-2">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:unsignedLong(mid range) $arg2 = xs:unsignedLong(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:unsignedLong("130747108607674654"),xs:unsignedLong("0")))</test>
      <result>
         <assert-eq>65373554303837327</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgulng2args-3">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:unsignedLong(upper bound) $arg2 = xs:unsignedLong(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:unsignedLong("184467440737095516"),xs:unsignedLong("0")))</test>
      <result>
         <assert-eq>92233720368547758</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgulng2args-4">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:unsignedLong(lower bound) $arg2 = xs:unsignedLong(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:unsignedLong("0"),xs:unsignedLong("130747108607674654")))</test>
      <result>
         <assert-eq>65373554303837327</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgulng2args-5">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:unsignedLong(lower bound) $arg2 = xs:unsignedLong(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:unsignedLong("0"),xs:unsignedLong("184467440737095516")))</test>
      <result>
         <assert-eq>92233720368547758</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgnpi2args-1">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:nonPositiveInteger(lower bound) $arg2 = xs:nonPositiveInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:nonPositiveInteger("-999999999999999999"),xs:nonPositiveInteger("-999999999999999999")))</test>
      <result>
         <assert-eq>-999999999999999999</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgnpi2args-2">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:nonPositiveInteger(mid range) $arg2 = xs:nonPositiveInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:nonPositiveInteger("-475688437271870490"),xs:nonPositiveInteger("-999999999999999999")))</test>
      <result>
         <assert-eq>-737844218635935244.5</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgnpi2args-3">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:nonPositiveInteger(upper bound) $arg2 = xs:nonPositiveInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:nonPositiveInteger("0"),xs:nonPositiveInteger("-999999999999999999")))</test>
      <result>
         <assert-eq>-499999999999999999.5</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgnpi2args-4">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:nonPositiveInteger(lower bound) $arg2 = xs:nonPositiveInteger(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:nonPositiveInteger("-999999999999999999"),xs:nonPositiveInteger("-475688437271870490")))</test>
      <result>
         <assert-eq>-737844218635935244.5</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgnpi2args-5">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:nonPositiveInteger(lower bound) $arg2 = xs:nonPositiveInteger(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:nonPositiveInteger("-999999999999999999"),xs:nonPositiveInteger("0")))</test>
      <result>
         <assert-eq>-499999999999999999.5</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgnni2args-1">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:nonNegativeInteger(lower bound) $arg2 = xs:nonNegativeInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:nonNegativeInteger("0"),xs:nonNegativeInteger("0")))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgnni2args-2">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:nonNegativeInteger(mid range) $arg2 = xs:nonNegativeInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:nonNegativeInteger("303884545991464527"),xs:nonNegativeInteger("0")))</test>
      <result>
         <assert-eq>151942272995732263.5</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgnni2args-3">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:nonNegativeInteger(upper bound) $arg2 = xs:nonNegativeInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:nonNegativeInteger("999999999999999999"),xs:nonNegativeInteger("0")))</test>
      <result>
         <assert-eq>499999999999999999.5</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgnni2args-4">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:nonNegativeInteger(lower bound) $arg2 = xs:nonNegativeInteger(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:nonNegativeInteger("0"),xs:nonNegativeInteger("303884545991464527")))</test>
      <result>
         <assert-eq>151942272995732263.5</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgnni2args-5">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:nonNegativeInteger(lower bound) $arg2 = xs:nonNegativeInteger(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:nonNegativeInteger("0"),xs:nonNegativeInteger("999999999999999999")))</test>
      <result>
         <assert-eq>499999999999999999.5</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgsht2args-1">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:short(lower bound) $arg2 = xs:short(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:short("-32768"),xs:short("-32768")))</test>
      <result>
         <assert-eq>-32768</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgsht2args-2">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:short(mid range) $arg2 = xs:short(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:short("-5324"),xs:short("-32768")))</test>
      <result>
         <assert-eq>-19046</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgsht2args-3">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:short(upper bound) $arg2 = xs:short(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:short("32767"),xs:short("-32768")))</test>
      <result>
         <assert-eq>-0.5</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgsht2args-4">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:short(lower bound) $arg2 = xs:short(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:short("-32768"),xs:short("-5324")))</test>
      <result>
         <assert-eq>-19046</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avgsht2args-5">
      <description> Evaluates The "avg" function with the arguments set as follows: $arg1 = xs:short(lower bound) $arg2 = xs:short(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:avg((xs:short("-32768"),xs:short("32767")))</test>
      <result>
         <assert-eq>-0.5</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-001">
      <description> arg: seq of integer </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg( (3, 4, 5) )</test>
      <result>
         <assert-eq>4</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-002">
      <description> arg: yearMonthDuration </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( xs:yearMonthDuration("P20Y") , xs:yearMonthDuration("P10M") ))</test>
      <result>
         <assert-string-value>P10Y5M</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-003">
      <description> arg: empty seq </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(())</test>
      <result>
         <assert-empty/>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-004">
      <description> arg: float </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( xs:float('INF'), xs:float('-INF')))</test>
      <result>
         <assert-string-value>NaN</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-005">
      <description> arg: seq of integer, float </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (3, 4, 5), xs:float('NaN') ))</test>
      <result>
         <assert-string-value>NaN</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-006">
      <description> arg: seq of integer </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( fn:string-length("Hello") ))</test>
      <result>
         <assert-eq>5</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-007">
      <description> arg: seq of integer </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( fn:count("Hello") ))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-008">
      <description> arg: seq of integer </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg( ( ( xs:integer("100"), xs:integer("-100"))))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-009">
      <description> arg: seq of integer,decimal </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg( ( ( xs:decimal("-1.000000000001"), xs:integer("-100"))))</test>
      <result>
         <any-of>
            <assert-eq>-50.5000000000005</assert-eq>
            <assert-eq>-50.5</assert-eq>
         </any-of>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-010">
      <description> arg: seq of integer,decimal </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:decimal("1.01"), xs:integer("12") )))</test>
      <result>
         <assert-eq>6.505</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-011">
      <description> arg: seq of integer,float,empty seq </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:float("NaN"), 100, (), 2)))</test>
      <result>
         <assert-string-value>NaN</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-012">
      <description> arg: seq of float,decimal </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:float("-3.4028235E38"), xs:decimal("-999999999999999999") )))</test>
      <result>
         <assert-eq>xs:float("-1.7014117E38")</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-013">
      <description> arg: seq of float,decimal </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:float("0"), xs:decimal("-999999999999999999") ))) eq xs:float("-4.9999999999999999E17")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-014">
      <description> arg: seq of float,decimal </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:float("3.4028235E38"), xs:decimal("-999999999999999999") )))</test>
      <result>
         <assert-eq>xs:float("1.7014117E38")</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-015">
      <description> arg: seq of float,decimal </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:float("-0"), xs:decimal("-999999999999999999") ))) eq xs:float("-4.9999999999999999E17")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-016">
      <description> arg: seq of float,decimal </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:float("NaN"), xs:decimal("-999999999999999999") )))</test>
      <result>
         <assert-string-value>NaN</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-017">
      <description> arg: seq of float,decimal </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:float("INF"), xs:decimal("-999999999999999999") )))</test>
      <result>
         <assert-string-value>INF</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-018">
      <description> arg: seq of float </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:float("1.01"))))</test>
      <result>
         <assert-eq>1.01</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-019">
      <description> arg: seq of float,decimal </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:float("-INF"), xs:decimal("2.34"))))</test>
      <result>
         <assert-string-value>-INF</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-020">
      <description> arg: seq of double,integer </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:double("-1.7976931348623157E308"), xs:integer("-999999999999999999") ) )) eq xs:double("-8.988465674311579E307")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-021">
      <description> arg: seq of double,integer </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:double("0"), xs:integer("-999999999999999999") ) ))</test>
      <result>
         <assert-eq>-5.0E17</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-022">
      <description> arg: seq of double,integer </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:double("1.7976931348623157E308"), xs:integer("-999999999999999999") ) )) eq xs:double("8.988465674311579E307")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-023">
      <description> arg: seq of double,integer </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:double("-0"), xs:integer("-999999999999999999") ) ))</test>
      <result>
         <assert-eq>-5.0E17</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-024">
      <description> arg: seq of double,integer </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:double("-INF"), xs:integer("-999999999999999999") ) ))</test>
      <result>
         <assert-string-value>-INF</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-025">
      <description> arg: seq of double,integer </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:double("NaN"), xs:integer("-999999999999999999") ) ))</test>
      <result>
         <assert-string-value>NaN</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-026">
      <description> arg: seq of double,float </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:double("1.34"), xs:float("INF"))))</test>
      <result>
         <assert-string-value>INF</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-027">
      <description> arg: seq of double,integer </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:double("INF"), 2, 3)))</test>
      <result>
         <assert-string-value>INF</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-028">
      <description> Negative test gives FORG0006 </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg((xs:yearMonthDuration("P20Y") , (3, 4, 5)))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-029">
      <description> Negative test gives FORG0006 </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( fn:empty("Hello")) or fn:boolean(fn:count("Hello")))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-030">
      <description> Negative test gives FORG0006 </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( concat('hi',' all') ))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-031">
      <description> Negative test gives FORG0006 </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( fn:empty("Hello") ))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-032">
      <description> Negative test gives FORG0006 </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( ("a", "b", "c", true()) ))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-033">
      <description> Negative test gives FORG0006 </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:string("xyz"), (), (), "a" , "b") ))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-034">
      <description> Negative test gives FORG0006 </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:anyURI("www.example.com"), "a", (""), "b")))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-035">
      <description> Negative test gives FORG0006 </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:integer("100"), xs:string("abc"))))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-036">
      <description> Negative test gives FORG0006 </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:integer("-999999999999999999") , "a", (), "3") ))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-037">
      <description> Negative test gives FORG0006 </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:integer("830993497117024304"), "a", (), "3") ))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-038">
      <description> Negative test gives FORG0006 </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:integer("999999999999999999"), "a", (), "3") ))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-039">
      <description> Negative test gives FORG0006 </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:decimal("-999999999999999999") , "a", (), "3") ))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-040">
      <description> Negative test gives FORG0006 </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:decimal("617375191608514839"), "a", (), "3") ))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-041">
      <description> Negative test gives FORG0006 </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:decimal("999999999999999999"), "a", (), "3") ))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-042">
      <description> Negative test gives FORG0006 </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:decimal("1.01"), xs:integer("12"), xs:anyURI("www.example.com"))))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-043">
      <description> Negative test gives FORG0006 </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:float("-3.4028235E38"), xs:decimal("-999999999999999999") , "a", (), "3") ))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-044">
      <description> Negative test gives FORG0006 </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:float("0"), xs:decimal("-999999999999999999") , "a", (), "3") ))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-045">
      <description> Negative test gives FORG0006 </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:float("3.4028235E38"), xs:decimal("-999999999999999999") , "a", (), "3") ))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-046">
      <description> Negative test gives FORG0006 </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:float("-0"), xs:decimal("-999999999999999999") , "a", (), "3") ))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-047">
      <description> Negative test gives FORG0006 </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:float("NaN"), xs:decimal("-999999999999999999") , "a", (), "3") ))</test>
      <result>
         <any-of>
            <assert-string-value>NaN</assert-string-value>
            <error code="FORG0006"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-048">
      <description> Negative test gives FORG0006 </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:float("INF"), xs:decimal("-999999999999999999") , "a", (), "3") ))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-049">
      <description> Negative test gives FORG0006 </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:float("1.01"), xs:string("a"))))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-050">
      <description> Negative test gives FORG0006 </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:float("-INF"), xs:decimal("2.34"), "abc")))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-051">
      <description> Negative test gives FORG0006 </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:double("-1.7976931348623157E308"), xs:integer("-999999999999999999") , "a", (), "3") ))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-052">
      <description> Negative test gives FORG0006 </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:double("0"), xs:integer("-999999999999999999") , "a", (), "3") ))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-053">
      <description> Negative test gives FORG0006 </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:double("1.7976931348623157E308"), xs:integer("-999999999999999999") , "a", (), "3") ))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-054">
      <description> Negative test gives FORG0006 </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:double("-0"), xs:integer("-999999999999999999") , "a", (), "3") ))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-055">
      <description> Negative test gives FORG0006 </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:double("-INF"), xs:integer("-999999999999999999") , "a", (), "3") ))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-056">
      <description> Negative test gives FORG0006 </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:double("NaN"), xs:integer("-999999999999999999") , "a", (), "3") ))</test>
      <result>
         <any-of>
            <assert-string-value>NaN</assert-string-value>
            <error code="FORG0006"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-057">
      <description> Negative test gives FORG0006 </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:double("1.34"), xs:float("INF"), true())))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-058">
      <description> Negative test gives FORG0006 </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:boolean("false"), xs:string("xyz"), (), (), "a" , "b")))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-059">
      <description> Negative test gives FORG0006 </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (true(), xs:string("xyz"), (), (), "a" , "b")))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-060">
      <description> Negative test gives FORG0006 </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (false(), xs:string("xyz"), (), (), "a" , "b")))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-061">
      <description> Negative test gives FORG0006 </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:boolean("1"), xs:double("-INF"), "s")))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-062">
      <description> Negative test gives FORG0006 </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:boolean("true"), xs:date("1993-03-31"), 4, "a")))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-063">
      <description> Negative test gives FORG0006 </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:date("1993-03-31"), xs:string("xyz"), (), (), "a" , "b")))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-064">
      <description> Negative test gives FORG0006 </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:dateTime("1972-12-31T00:00:00"), xs:boolean("false"), (), (" ")) ))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-065">
      <description> Negative test gives FORG0006 </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <test>fn:avg(( (xs:time("12:30:00"), xs:decimal("2.000003"), 2)))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="fn-avg-mix-args-066">
      <description> Negative test gives FORG0001 </description>
      <created by="Pulkita Tyagi" on="2006-01-13"/>
      <environment ref="works-mod"/>
      <test>fn:avg(/works/employee[1])</test>
      <result>
         <error code="FORG0001"/>
      </result>
   </test-case>

   <test-case name="K-SeqAVGFunc-1">
      <description> A test whose essence is: `avg()`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>avg()</test>
      <result>
         <error code="XPST0017"/>
      </result>
   </test-case>

   <test-case name="K-SeqAVGFunc-2">
      <description> A test whose essence is: `avg(1, "wrong param")`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>avg(1, "wrong param")</test>
      <result>
         <error code="XPST0017"/>
      </result>
   </test-case>

   <test-case name="K-SeqAVGFunc-3">
      <description> A test whose essence is: `empty(avg(()))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(avg(()))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqAVGFunc-4">
      <description> A test whose essence is: `avg((3, 3, 3)) eq 3`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>avg((3, 3, 3)) eq 3</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqAVGFunc-5">
      <description> A test whose essence is: `avg((-3, -3, -3)) eq -3`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>avg((-3, -3, -3)) eq -3</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqAVGFunc-6">
      <description> A test whose essence is: `avg((xs:float(1), xs:integer(3), xs:float(3))) instance of xs:float`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>avg((xs:float(1), xs:integer(3), xs:float(3))) instance of xs:float</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqAVGFunc-7">
      <description> A test whose essence is: `avg((xs:float(1), xs:integer(3), xs:decimal(3))) instance of xs:float`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>avg((xs:float(1), xs:integer(3), xs:decimal(3))) instance of xs:float</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqAVGFunc-8">
      <description> A test whose essence is: `avg((xs:float(1), xs:integer(3), xs:double(3))) instance of xs:double`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>avg((xs:float(1), xs:integer(3), xs:double(3))) instance of xs:double</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqAVGFunc-9">
      <description> A test whose essence is: `avg((xs:integer(1), xs:integer(3), xs:decimal(3))) instance of xs:decimal`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>avg((xs:integer(1), xs:integer(3), xs:decimal(3))) instance of xs:decimal</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqAVGFunc-10">
      <description> A test whose essence is: `avg((xs:float(1), xs:integer(0), xs:float(5))) eq 2.0`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>avg((xs:float(1), xs:integer(0), xs:float(5))) eq 2.0</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqAVGFunc-11">
      <description> A test whose essence is: `avg((xs:float(1), xs:integer(0), xs:untypedAtomic(-4))) eq -1`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>avg((xs:float(1), xs:integer(0), xs:untypedAtomic(-4))) eq -1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqAVGFunc-12">
      <description> A test whose essence is: `avg((xs:float(1), xs:integer(0), xs:untypedAtomic(3))) instance of xs:double`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>avg((xs:float(1), xs:integer(0), xs:untypedAtomic(3))) instance of xs:double</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqAVGFunc-13">
      <description> A test whose essence is: `avg((xs:untypedAtomic(3), xs:integer(0), xs:decimal(1))) instance of xs:double`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>avg((xs:untypedAtomic(3), xs:integer(0), xs:decimal(1))) instance of xs:double</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqAVGFunc-14">
      <description> A test whose essence is: `string(avg((3, 3, xs:double("NaN")))) eq "NaN"`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>string(avg((3, 3, xs:double("NaN")))) eq "NaN"</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqAVGFunc-15">
      <description> A test whose essence is: `string(avg((3, xs:double("NaN"), 3))) eq "NaN"`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>string(avg((3, xs:double("NaN"), 3))) eq "NaN"</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqAVGFunc-16">
      <description> A test whose essence is: `string(avg((xs:double("NaN"), 3, 3))) eq "NaN"`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>string(avg((xs:double("NaN"), 3, 3))) eq "NaN"</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqAVGFunc-17">
      <description> A test whose essence is: `empty(avg(()))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(avg(()))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqAVGFunc-18">
      <description> A test whose essence is: `empty(avg(((), ())))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(avg(((), ())))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqAVGFunc-19">
      <description> A test whose essence is: `avg((-5, -0, -3, -6)) eq -3.5`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>avg((-5, -0, -3, -6)) eq -3.5</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqAVGFunc-20">
      <description> A test whose essence is: `string(avg((1, 2, 3, xs:float("NaN")))) eq "NaN"`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>string(avg((1, 2, 3, xs:float("NaN")))) eq "NaN"</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqAVGFunc-21">
      <description> A test whose essence is: `string(avg((1, 2, 3, xs:double("NaN")))) eq "NaN"`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>string(avg((1, 2, 3, xs:double("NaN")))) eq "NaN"</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqAVGFunc-22">
      <description> A test whose essence is: `string(avg((xs:double("NaN"), 1, 2, 3))) eq "NaN"`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>string(avg((xs:double("NaN"), 1, 2, 3))) eq "NaN"</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqAVGFunc-23">
      <description> A test whose essence is: `string(avg((xs:float("NaN"), 1, 2, 3))) eq "NaN"`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>string(avg((xs:float("NaN"), 1, 2, 3))) eq "NaN"</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqAVGFunc-24">
      <description> A test whose essence is: `string(avg((1, 2, xs:double("NaN"), 1, 2, 3))) eq "NaN"`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>string(avg((1, 2, xs:double("NaN"), 1, 2, 3))) eq "NaN"</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqAVGFunc-25">
      <description> A test whose essence is: `string(avg((1, 2, xs:float("NaN"), 1, 2, 3))) eq "NaN"`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>string(avg((1, 2, xs:float("NaN"), 1, 2, 3))) eq "NaN"</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqAVGFunc-26">
      <description> A test whose essence is: `avg(xs:untypedAtomic("3")) instance of xs:double`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>avg(xs:untypedAtomic("3")) instance of xs:double</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqAVGFunc-27">
      <description> A test whose essence is: `avg((1, 2, xs:untypedAtomic("3"))) instance of xs:double`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>avg((1, 2, xs:untypedAtomic("3"))) instance of xs:double</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqAVGFunc-28">
      <description> A test whose essence is: `avg((1, 2, xs:untypedAtomic("3"))) eq 2`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>avg((1, 2, xs:untypedAtomic("3"))) eq 2</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqAVGFunc-29">
      <description> A test whose essence is: `avg((xs:float(1), 2, xs:untypedAtomic("3"))) eq 2`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>avg((xs:float(1), 2, xs:untypedAtomic("3"))) eq 2</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqAVGFunc-30">
      <description> A test whose essence is: `avg((xs:float(1), 2, xs:untypedAtomic("3"))) instance of xs:double`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>avg((xs:float(1), 2, xs:untypedAtomic("3"))) instance of xs:double</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqAVGFunc-31">
      <description> A test whose essence is: `avg("a string")`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>avg("a string")</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="K-SeqAVGFunc-32">
      <description> A test whose essence is: `avg(xs:anyURI("a string"))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>avg(xs:anyURI("a string"))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="K-SeqAVGFunc-33">
      <description> A test whose essence is: `avg((1, 2, 3, xs:anyURI("a string"), xs:double("NaN")))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>avg((1, 2, 3, xs:anyURI("a string"), xs:double("NaN")))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="K-SeqAVGFunc-34">
      <description> A test whose essence is: `avg("a string")`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>avg("a string")</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="K-SeqAVGFunc-35">
      <description> A test whose essence is: `avg((xs:untypedAtomic(3), xs:integer(3), xs:string(1)))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>avg((xs:untypedAtomic(3), xs:integer(3), xs:string(1)))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="K-SeqAVGFunc-36">
      <description> A test whose essence is: `avg((xs:string(1), xs:integer(3), xs:untypedAtomic(3)))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>avg((xs:string(1), xs:integer(3), xs:untypedAtomic(3)))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="K-SeqAVGFunc-37">
      <description> A test whose essence is: `avg((xs:float(2), xs:integer(3), "a string", xs:double(2)))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>avg((xs:float(2), xs:integer(3), "a string", xs:double(2)))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="K-SeqAVGFunc-38">
      <description> A test whose essence is: `avg((xs:yearMonthDuration("P20Y"), (3, 4, 5)))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>avg((xs:yearMonthDuration("P20Y"), (3, 4, 5)))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="K-SeqAVGFunc-39">
      <description> A test whose essence is: `avg((xs:yearMonthDuration("P20Y"), xs:yearMonthDuration("P10M"))) eq xs:yearMonthDuration("P125M")`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>avg((xs:yearMonthDuration("P20Y"), xs:yearMonthDuration("P10M"))) eq xs:yearMonthDuration("P125M")</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqAVGFunc-40">
      <description> A test whose essence is: `empty(avg( () ))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(avg( () ))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqAVGFunc-41">
      <description> A test whose essence is: `string(avg((xs:float('INF'), xs:float('-INF')))) eq "NaN"`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>string(avg((xs:float('INF'), xs:float('-INF')))) eq "NaN"</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqAVGFunc-42">
      <description> A test whose essence is: `string(avg(((3, 4, 5), xs:float('NaN')))) eq "NaN"`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>string(avg(((3, 4, 5), xs:float('NaN')))) eq "NaN"</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqAVGFunc-43">
      <description> A test whose essence is: `avg((3, 4, 5)) eq 4.0`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>avg((3, 4, 5)) eq 4.0</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-SeqAVGFunc-1">
      <description> Ensure the return type is correct when type promotion is required. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>avg((xs:float('NaN'), 2, 3, 4, xs:double('NaN'))) instance of xs:double</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-SeqAVGFunc-2">
      <description> Ensure the return type is correct when type promotion is required(#2). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>avg((xs:float('NaN'), 2, 3.3, 4, xs:double('NaN'))) instance of xs:double</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-SeqAVGFunc-3">
      <description> Check the average of two integers. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>avg((1, 1))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-avg-1">
      <description> Evaluation of the fn:avg function with argument to sequence of strings. </description>
      <created by="Carmelo Montanez" on="2005-09-20"/>
      <test>fn:avg(("a","b","c"))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="fn-avg-2">
      <description> Evaluation of the fn:avg function with argument to empty sequence. </description>
      <created by="Carmelo Montanez" on="2005-09-20"/>
      <test>fn:avg(())</test>
      <result>
         <assert-empty/>
      </result>
   </test-case>

   <test-case name="fn-avg-3">
      <description> Test fn:sum on a sequence of xs:dayTimeDuration arguments </description>
      <created by="Oliver Hallam" on="2010-03-15"/>
      <test>avg((xs:dayTimeDuration("P1D"), xs:dayTimeDuration("PT2H"))) instance of xs:dayTimeDuration</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fn-avg-4">
      <description> Test fn:avg on a sequence of xs:dayTimeDuration arguments </description>
      <created by="Oliver Hallam" on="2010-03-15"/>
      <test>avg(for $x in 1 to 10 return xs:dayTimeDuration(concat("PT",$x,"H")))</test>
      <result>
         <assert-string-value>PT5H30M</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-avg-5">
      <description> Test fn:avg on a sequence of xs:yearMonthDuration arguments </description>
      <created by="Oliver Hallam" on="2010-03-15"/>
      <test>avg((xs:yearMonthDuration("P1Y"), xs:yearMonthDuration("P1M"))) instance of xs:yearMonthDuration</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fn-avg-6">
      <description> Test fn:sum on a sequence of xs:yearMonthDuration arguments </description>
      <created by="Oliver Hallam" on="2010-03-15"/>
      <test>avg(for $x in 1 to 9 return xs:yearMonthDuration(concat("P",$x,"M")))</test>
      <result>
         <assert-string-value>P5M</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-avg-7">
      <description> Test fn:sum on a sequence of xs:yearMonthDuration and xs:dayTimeDuration arguments </description>
      <created by="Oliver Hallam" on="2010-03-15"/>
      <test>avg((xs:yearMonthDuration("P1Y"), xs:dayTimeDuration("P1D")))</test>
      <result>
         <any-of>
            <error code="FORG0006"/>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="fn-avg-8">
      <description> Test fn:sum on a sequence of xs:duration arguments </description>
      <created by="Oliver Hallam" on="2010-03-15"/>
      <test>avg(xs:duration("P1Y1M1D"))</test>
      <result>
         <any-of>
            <error code="FORG0006"/>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="cbcl-avg-001">
      <description> Testing fn:avg overflows correctly with xs:decimals </description>
      <created by="Oliver Hallam" on="2008-04-11"/>
      <test>fn:avg((xs:decimal("79000000000000000000000000000"),
                    xs:decimal("79000000000000000000000000000")))
            eq 79000000000000000000000000000
      </test>
      <result>
	<any-of>
	  <assert-true />
	  <error code="FOAR0002"/>
	</any-of>
      </result>
   </test-case>
   
   <test-case name="cbcl-avg-002">
      <description> Test fn:avg overflows correctly with xs:dayTimeDurations</description>
      <created by="Oliver Hallam" on="2008-04-11"/>
      <test>fn:avg((xs:dayTimeDuration("P9223372036854775807D"), xs:dayTimeDuration("P1D")))</test>
      <result>
         <error code="FODT0002"/>
      </result>
   </test-case>
   
   <test-case name="cbcl-avg-003">
      <description>Test fn:avg overflows correctly with xs:yearMonthDurations </description>
      <created by="Oliver Hallam" on="2008-04-11"/>
      <test>fn:avg((xs:yearMonthDuration("P768614336404564650Y"), xs:yearMonthDuration("P1Y")))</test>
      <result>
         <error code="FODT0002"/>
      </result>
   </test-case>
   
   <test-case name="cbcl-avg-004">
      <description>Test fn:avg on xs:dayTimeDurations </description>
      <created by="Oliver Hallam" on="2008-04-11"/>
      <test>fn:avg((xs:dayTimeDuration("P1DT2H"), xs:dayTimeDuration("PT22H"), xs:dayTimeDuration("P1D")))</test>
      <result>
         <assert-string-value>P1D</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="cbcl-avg-005">
      <description>Test fn:avg raises error with xs:dayTimeDurations followed by xs:yearMonthDuration </description>
      <created by="Oliver Hallam" on="2008-04-11"/>
      <test>fn:avg((xs:dayTimeDuration("P1DT2H"), xs:dayTimeDuration("PT22H"), xs:yearMonthDuration("P1M")))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>
   
   <test-case name="cbcl-avg-006">
      <description> Test fn:avg on xs:yearMonthDurations </description>
      <created by="Oliver Hallam" on="2008-04-11"/>
      <test>fn:avg((xs:yearMonthDuration("P1Y1M"), xs:yearMonthDuration("P11M"), xs:yearMonthDuration("P1Y")))</test>
      <result>
         <assert-string-value>P1Y</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="cbcl-avg-007">
      <description>Test fn:avg raises error with xs:yearMonthDurations followed by xs:dayTimeDuration</description>
      <created by="Oliver Hallam" on="2008-04-11"/>
      <test>fn:avg((xs:yearMonthDuration("P1Y1M"), xs:yearMonthDuration("P11M"), xs:dayTimeDuration("P1D")))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>
   
   <test-case name="cbcl-avg-008">
      <description>Test fn:avg on mixed numeric types. </description>
      <created by="Oliver Hallam" on="2008-04-11"/>
      <dependency type="spec" value="XQ10+"/>
      <test>typeswitch (fn:avg((xs:float(1), xs:double(2), xs:float(3)))) case $x as xs:double return $x default return "FAIL"</test>
      <result>
         <assert-string-value>2</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="cbcl-avg-009">
      <description>Test boolean(avg) and avg(()).</description>
      <created by="Oliver Hallam" on="2008-04-11"/>
      <test>boolean(avg(()))</test>
      <result>
         <any-of>
            <assert-false/>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="cbcl-avg-010">
      <description>Test tpe checking is performed when optimizin fn:avg to NaN. </description>
      <created by="Oliver Hallam" on="2008-04-11"/>
      <test>avg((xs:double("NaN"), current-date() - xs:date("1997-01-01") ))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>
   
   <test-case name="cbcl-avg-011">
      <description>Test fn:avg returning double NaN.</description>
      <created by="Oliver Hallam" on="2008-04-11"/>
      <test>avg((xs:double("NaN"), day-from-date(current-date())))</test>
      <result>
         <assert-string-value>NaN</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="cbcl-avg-012">
      <description>Test fn:avg returning float NaN. </description>
      <created by="Oliver Hallam" on="2008-04-11"/>
      <test>avg((xs:float("NaN"), day-from-date(current-date())))</test>
      <result>
         <assert-string-value>NaN</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="cbcl-avg-013">
      <description> Test fn:avg on (). </description>
      <created by="Oliver Hallam" on="2008-04-14"/>
      <test>empty(avg(()))</test>
      <result>
         <any-of>
            <assert-true/>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>   
</test-set>
