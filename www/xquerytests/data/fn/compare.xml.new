<?xml version="1.0" encoding="UTF-8"?>
<test-set name="fn-compare" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">
  <description>Tests for the compare() function</description>
  <link document="http://www.w3.org/TR/xpath-functions-30/" idref="func-compare" type="spec"/>
  <test-case name="fn-compare2args-1">
    <description>Evaluates The &quot;compare&quot; function with the arguments set as follows: $comparand1 = xs:string(lower bound) $comparand2 = xs:string(lower bound)</description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:compare(xs:string(&quot;This is a characte&quot;),xs:string(&quot;This is a characte&quot;))</test>
    <result-string/>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-compare2args-2">
    <description>Evaluates The &quot;compare&quot; function with the arguments set as follows: $comparand1 = xs:string(mid range) $comparand2 = xs:string(lower bound)</description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:compare(xs:string(&quot;This is a characte&quot;),xs:string(&quot;This is a characte&quot;))</test>
    <result-string/>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-compare2args-3">
    <description>Evaluates The &quot;compare&quot; function with the arguments set as follows: $comparand1 = xs:string(upper bound) $comparand2 = xs:string(lower bound)</description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:compare(xs:string(&quot;This is a characte&quot;),xs:string(&quot;This is a characte&quot;))</test>
    <result-string/>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-compare2args-4">
    <description>Evaluates The &quot;compare&quot; function with the arguments set as follows: $comparand1 = xs:string(lower bound) $comparand2 = xs:string(mid range)</description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:compare(xs:string(&quot;This is a characte&quot;),xs:string(&quot;This is a characte&quot;))</test>
    <result-string/>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-compare2args-5">
    <description>Evaluates The &quot;compare&quot; function with the arguments set as follows: $comparand1 = xs:string(lower bound) $comparand2 = xs:string(upper bound)</description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:compare(xs:string(&quot;This is a characte&quot;),xs:string(&quot;This is a characte&quot;))</test>
    <result-string/>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-compare-1">
    <description>Evaluates The &quot;compare&quot; function with the arguments set as follows: $arg1 = &quot;&quot; $arg2 = &quot;&quot;</description>
    <created by="Carmelo Montanez" on="2005-06-01"/>
    <test>fn:compare(&quot;&quot;,&quot;&quot;)</test>
    <result-string/>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-compare-2">
    <description>Evaluates The &quot;compare&quot; function with the arguments set as follows: $arg1 = &quot;&quot; $arg2 = &quot;A Character String&quot;</description>
    <created by="Carmelo Montanez" on="2005-06-01"/>
    <test>fn:compare(&quot;&quot;,&quot;A Character String&quot;)</test>
    <result-string/>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-compare-3">
    <description>Evaluates The &quot;compare&quot; function with the arguments set as follows: $arg1 = &quot;A Character String&quot; $arg2 = &quot;&quot;</description>
    <created by="Carmelo Montanez" on="2005-06-01"/>
    <test>fn:compare(&quot;A Character String&quot;,&quot;&quot;)</test>
    <result-string/>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-compare-4">
    <description>Evaluates The &quot;compare&quot; function with the arguments set as follows: $arg1 = () $arg2 = &quot;&quot;</description>
    <created by="Carmelo Montanez" on="2005-06-01"/>
    <test>fn:count(fn:compare((),&quot;&quot;))</test>
    <result-string/>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-compare-5">
    <description>Evaluates The &quot;compare&quot; function with the arguments set as follows: $arg1 = &quot;&quot; $arg2 = ()</description>
    <created by="Carmelo Montanez" on="2005-06-01"/>
    <test>fn:count(fn:compare(&quot;&quot;,()))</test>
    <result-string/>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-compare-6">
    <description>Evaluates The &quot;compare&quot; function with the arguments set as follows: $arg1 = &quot;A Character String&quot; $arg2 = ()</description>
    <created by="Carmelo Montanez" on="2005-06-01"/>
    <test>fn:count(fn:compare(&quot;A Character String&quot;,()))</test>
    <result-string/>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-compare-7">
    <description>Evaluates The &quot;compare&quot; function with the arguments set as follows: $arg1 = () $arg2 = &quot;A Character String&quot;</description>
    <created by="Carmelo Montanez" on="2005-06-01"/>
    <test>fn:count(fn:compare((),&quot;A Character String&quot;))</test>
    <result-string/>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-compare-8">
    <description>Evaluates The &quot;compare&quot; function with the arguments set as follows: $arg1 = &quot;AAAAABBBBBCCCCC&quot; $arg2 = &quot;BBBBB&quot;</description>
    <created by="Carmelo Montanez" on="2005-06-01"/>
    <test>fn:compare(&quot;AAAAABBBBBCCCCC&quot;,&quot;BBBBB&quot;)</test>
    <result-string/>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-compare-9">
    <description>Evaluates The &quot;compare&quot; function with the arguments set as follows: $arg1 = &quot;AAAAABBBBB&quot; $arg2 = &quot; &quot;</description>
    <created by="Carmelo Montanez" on="2005-06-01"/>
    <test>fn:compare(&quot;AAAAABBBBB&quot;,&quot; &quot;)</test>
    <result-string/>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-compare-10">
    <description>Evaluates The &quot;compare&quot; function with the arguments set as follows: $arg1 = &quot; &quot; $arg2 = &quot; AAAAABBBBB&quot;</description>
    <created by="Carmelo Montanez" on="2005-06-01"/>
    <test>fn:compare(&quot; &quot;,&quot;AAAAABBBBB&quot;)</test>
    <result-string/>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-compare-11">
    <description>Evaluates The &quot;compare&quot; function using it as a argument of a fn:not - returns true</description>
    <created by="Carmelo Montanez" on="2005-06-01"/>
    <test>fn:not(fn:compare(&quot;A&quot;,&quot;A&quot;))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-compare-12">
    <description>Evaluates The &quot;compare&quot; function using it as a argument of a fn:not - returns false</description>
    <created by="Carmelo Montanez" on="2005-06-01"/>
    <test>fn:not(fn:compare(&quot;A&quot;,&quot;B&quot;))</test>
    <result-string>xs:boolean('false')</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-compare-13">
    <description>Evaluates The &quot;compare&quot; function with the arguments set as follows: $arg1 = xs:string(&quot;A&quot;) $arg2 = &quot;A&quot;</description>
    <created by="Carmelo Montanez" on="2005-06-01"/>
    <test>fn:compare(xs:string(&quot;A&quot;),&quot;A&quot;)</test>
    <result-string/>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-compare-14">
    <description>Evaluates The &quot;compare&quot; function with the arguments set as follows: $arg1 = &quot;A&quot; $arg2 = xs:string(&quot;A&quot;)</description>
    <created by="Carmelo Montanez" on="2005-06-01"/>
    <test>fn:compare(&quot;A&quot;,xs:string(&quot;A&quot;))</test>
    <result-string/>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-compare-15">
    <description>Evaluates The &quot;compare&quot; function with the arguments set as follows: $arg1 = &quot;A&quot; $arg2 = &quot;a&quot;</description>
    <created by="Carmelo Montanez" on="2005-06-01"/>
    <test>fn:compare(&quot;A&quot;,&quot;a&quot;)</test>
    <result-string/>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-compare-16">
    <description>Evaluates The &quot;compare&quot; function with the arguments set as follows: $arg1 = &quot;a&quot; $arg2 = &quot;A&quot;</description>
    <created by="Carmelo Montanez" on="2005-06-01"/>
    <test>fn:compare(&quot;a&quot;,&quot;A&quot;)</test>
    <result-string/>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-compare-17">
    <description>Evaluates The &quot;compare&quot; function with the arguments set as follows: $arg1 = &quot;compare&quot; $arg2 = &quot;compare&quot;</description>
    <created by="Carmelo Montanez" on="2005-06-01"/>
    <test>fn:compare(&quot;compare&quot;,&quot;compare&quot;)</test>
    <result-string/>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-compare-18">
    <description>Evaluates The &quot;compare&quot; function with the arguments set as follows: $arg1 = &quot;comparecompare&quot; $arg2 = &quot;compare&quot;</description>
    <created by="Carmelo Montanez" on="2005-06-01"/>
    <test>fn:compare(&quot;comparecompare&quot;,&quot;compare&quot;)</test>
    <result-string/>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-compare-19">
    <description>Evaluates The &quot;compare&quot; function with the arguments set as follows: $arg1 = &quot;****&quot; $arg2 = &quot;***&quot;</description>
    <created by="Carmelo Montanez" on="2005-06-01"/>
    <test>fn:compare(&quot;****&quot;,&quot;***&quot;)</test>
    <result-string/>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-compare-20">
    <description>Evaluates The &quot;compare&quot; function with the arguments set as follows: $arg1 = &quot;12345&quot; $arg2 = &quot;1234&quot;</description>
    <created by="Carmelo Montanez" on="2005-06-01"/>
    <test>fn:compare(&quot;12345&quot;,&quot;1234&quot;)</test>
    <result-string/>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-compare-21">
    <description>Evaluates The &quot;compare&quot; function with the arguments set as follows: $arg1 = &quot;compare&quot; $arg2 = &quot;erapmoc&quot; (&quot;compare&quot; backwards)</description>
    <created by="Carmelo Montanez" on="2005-06-01"/>
    <test>fn:compare(&quot;compare&quot;,&quot;erapmoc&quot;)</test>
    <result-string/>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-compare-22">
    <description>Description Evaluates The &quot;compare&quot; function with a nonexistent collation.</description>
    <created by="Carmelo Montanez" on="2005-11-25"/>
    <test>fn:compare(&quot;a&quot;,&quot;a&quot;,&quot;CollationA&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCH0002&quot;))</result-string>
    <result>
      <error code="FOCH0002"/>
    </result>
  </test-case>
  <test-case name="K-compareFunc-1">
    <description>A test whose essence is: `codepoint-equal()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>codepoint-equal()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-compareFunc-2">
    <description>A test whose essence is: `codepoint-equal(())`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>codepoint-equal(())</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-compareFunc-3">
    <description>A test whose essence is: `codepoint-equal((), (), ())`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>codepoint-equal((), (), ())</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-compareFunc-4">
    <description>A test whose essence is: `empty(codepoint-equal((), &quot;a string&quot;))`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(codepoint-equal((), &quot;a string&quot;))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-compareFunc-5">
    <description>A test whose essence is: `empty(codepoint-equal(&quot;a string&quot;, ()))`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(codepoint-equal(&quot;a string&quot;, ()))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-compareFunc-6">
    <description>A test whose essence is: `codepoint-equal(&quot;a string&quot;, &quot;a string&quot;)`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>codepoint-equal(&quot;a string&quot;, &quot;a string&quot;)</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-compareFunc-7">
    <description>A test whose essence is: `not(codepoint-equal(&quot;cow&quot;, &quot;a string&quot;))`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(codepoint-equal(&quot;cow&quot;, &quot;a string&quot;))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-compareFunc-8">
    <description>A test whose essence is: `compare()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>compare()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-compareFunc-9">
    <description>A test whose essence is: `compare(())`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>compare(())</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-compareFunc-10">
    <description>A test whose essence is: `compare((), (), &quot;http://www.w3.org/2005/xpath-functions/collation/codepoint&quot;, &quot;wrong param&quot;)`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>compare((), (), &quot;http://www.w3.org/2005/xpath-functions/collation/codepoint&quot;, &quot;wrong param&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-compareFunc-11">
    <description>A test whose essence is: `empty(compare((), &quot;a string&quot;))`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(compare((), &quot;a string&quot;))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-compareFunc-12">
    <description>A test whose essence is: `empty(compare(&quot;a string&quot;, ()))`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(compare(&quot;a string&quot;, ()))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-compareFunc-13">
    <description>A test whose essence is: `empty(compare(&quot;a string&quot;, (), &quot;http://www.w3.org/2005/xpath-functions/collation/codepoint&quot;))`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(compare(&quot;a string&quot;, (), &quot;http://www.w3.org/2005/xpath-functions/collation/codepoint&quot;))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-compareFunc-14">
    <description>A test whose essence is: `compare(&quot;str&quot;, &quot;str&quot;) instance of xs:integer`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>compare(&quot;str&quot;, &quot;str&quot;) instance of xs:integer</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-compareFunc-15">
    <description>A test whose essence is: `empty(compare(&quot;a string&quot;, &quot;a string&quot;, &quot;http://www.example.com/COLLATION/NOT/SUPPORTED&quot;))`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(compare(&quot;a string&quot;, &quot;a string&quot;, &quot;http://www.example.com/COLLATION/NOT/SUPPORTED&quot;))</test>
    <result-string/>
    <result>
      <any-of>
        <assert-false/>
        <error code="FOCH0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="compare-001">
    <description>Simple use of compare to compare strings</description>
    <created by="Michael Kay" on="2011-06-29"/>
    <test>compare(&quot;a&quot;, &quot;b&quot;)</test>
    <result-string/>
    <result>
      <all-of>
        <assert-eq>-1</assert-eq>
        <assert-type>xs:integer</assert-type>
      </all-of>
    </result>
  </test-case>
  <test-case name="compare-002">
    <description>Simple use of compare to compare strings</description>
    <created by="Michael Kay" on="2011-06-29"/>
    <test>compare(&quot;b&quot;, &quot;a&quot;)</test>
    <result-string/>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="compare-003">
    <description>Simple use of compare to compare strings</description>
    <created by="Michael Kay" on="2011-06-29"/>
    <test>compare(&quot;b&quot;, &quot;b&quot;)</test>
    <result-string/>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="compare-004">
    <description>compare() with empty sequence as argument</description>
    <created by="Michael Kay" on="2011-06-29"/>
    <test>compare(&quot;b&quot;, ())</test>
    <result-string/>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case name="compare-005">
    <description>compare() with empty sequence as argument</description>
    <created by="Michael Kay" on="2011-06-29"/>
    <test>compare((), &quot;b&quot;)</test>
    <result-string/>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case name="compare-006">
    <description>compare() with empty sequence as argument</description>
    <created by="Michael Kay" on="2011-06-29"/>
    <test>compare((), ())</test>
    <result-string/>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case name="compare-007">
    <description>compare() with non-BMP characters</description>
    <created by="Michael Kay" on="2011-06-29"/>
    <test>compare(&quot;&quot;, &quot;&quot;, &quot;http://www.w3.org/2005/xpath-functions/collation/codepoint&quot;)</test>
    <result-string/>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="compare-008">
    <description>check that Unicode codepoint collation is used, not comparison of UTF16 surrogates</description>
    <created by="Michael Kay" on="2011-06-29"/>
    <test>compare(&quot;&quot;, &quot;&quot;, &quot;http://www.w3.org/2005/xpath-functions/collation/codepoint&quot;)</test>
    <result-string/>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="compare-009">
    <description>check that Unicode codepoint collation is used, not comparison of UTF16 surrogates</description>
    <created by="Michael Kay" on="2011-06-29"/>
    <test>compare(&quot;&quot;, &quot;&quot;, &quot;http://www.w3.org/2005/xpath-functions/collation/codepoint&quot;)</test>
    <result-string/>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="compare-010">
    <description>Use case-blind collation, if supported</description>
    <created by="Michael Kay" on="2011-06-29"/>
    <environment>
      <collation uri="http://www.w3.org/2010/09/qt-fots-catalog/collation/caseblind"/>
    </environment>
    <test>compare(&quot;a&quot;, &quot;A&quot;, &quot;http://www.w3.org/2010/09/qt-fots-catalog/collation/caseblind&quot;)</test>
    <result-string/>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="compare-011">
    <description>compare() only works on strings</description>
    <created by="Michael Kay" on="2012-05-30"/>
    <test>compare(123, 456)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="compare-012">
    <description>compare() only works on strings, but xs:anyURI gets promoted</description>
    <created by="Michael Kay" on="2012-05-30"/>
    <test>compare(xs:anyURI('http://www.example.com/'), 'http://www.example.com/')</test>
    <result-string/>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="compare-013">
    <description>compare() only works on strings, but xs:untypedAtomic gets promoted</description>
    <created by="Michael Kay" on="2012-05-30"/>
    <test>compare(xs:untypedAtomic('http://www.example.com/'), 'http://www.example.com/')</test>
    <result-string/>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-CompareFunc-1">
    <description>Use a complex collation argument.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>compare(&quot;a&quot;, &quot;a&quot;, (&quot;http://www.w3.org/2005/xpath-functions/collation/codepoint&quot;, ()))</test>
    <result-string/>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-CompareFunc-2">
    <description>Use a complex collation argument.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>compare(&quot;a&quot;, &quot;a&quot;, ((), &quot;http://www.w3.org/2005/xpath-functions/collation/codepoint&quot;))</test>
    <result-string/>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-CompareFunc-3">
    <description> Use a complex collation argument. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>compare(&quot;a&quot;, &quot;a&quot;, ((), &quot;http://www.w3.org/2005/xpath-functions/collation/codepoint&quot;, ()))</test>
    <result-string/>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-CompareFunc-4">
    <description> Compare two values returned from fn:lower-case(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $vA := (&quot;B STRING&quot;, current-time())[1] treat as xs:string, 
        $vB  := (&quot;b string&quot;, current-time())[1] treat as xs:string
        return compare(lower-case($vA), lower-case($vB))</test>
    <result-string/>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-CompareFunc-5">
    <description> Compare two values returned from fn:upper-case(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $vA := (&quot;B STRING&quot;, current-time())[1] treat as xs:string, 
                $vB  := (&quot;b string&quot;, current-time())[1] treat as xs:string 
        return compare(upper-case($vA), upper-case($vB))</test>
    <result-string/>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-CompareFunc-6">
    <description> Compare two non-matching values returned from fn:lower-case(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $vA  := (&quot;B STRING&quot;, current-time())[1] treat as xs:string, 
                $vB  := (&quot;no match&quot;, current-time())[1] treat as xs:string 
        return compare(lower-case($vA), lower-case($vB))</test>
    <result-string/>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-CompareFunc-7">
    <description> Compare two non-matching values returned from fn:upper-case(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $vA  := (&quot;B STRING&quot;, current-time())[1] treat as xs:string, 
                $vB  := (&quot;no match&quot;, current-time())[1] treat as xs:string 
        return compare(upper-case($vA), upper-case($vB))</test>
    <result-string/>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-CompareFunc-8">
    <description> Compare two non-matching values returned from fn:lower-case() and fn:upper-case(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $vA  := (&quot;B STRING&quot;, current-time())[1] treat as xs:string, 
                $vB  := (&quot;no match&quot;, current-time())[1] treat as xs:string 
        return compare(upper-case($vA), lower-case($vB))</test>
    <result-string/>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-CompareFunc-9">
    <description> Compare two non-matching values returned from fn:lower-case() and fn:upper-case(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $vA  := (&quot;B STRING&quot;, current-time())[1] treat as xs:string, 
                $vB  := (&quot;no match&quot;, current-time())[1] treat as xs:string 
        return compare(lower-case($vA), upper-case($vB))</test>
    <result-string/>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
</test-set>