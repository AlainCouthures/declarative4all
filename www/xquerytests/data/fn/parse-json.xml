<?xml version="1.0" encoding="UTF-8"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="fn-parse-json">
   <description>
      Tests the parse-json function.
      
      Test coverage of the first argument is reasonably complete. There are few tests yet
      for the options argument.
   </description>
   <link type="spec" document="http://www.w3.org/TR/xpath-functions-11/" idref="func-parse-json"/>
   <dependency type="spec" value="XT30+"/>
   
   <test-case name="fn-parse-json-001">
      <description>Empty object</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json("{}")</test>
      <result>
         <assert-deep-eq>map{}</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="fn-parse-json-002">
      <description>Singleton object, numeric value</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('{"abc":12}')</test>
      <result>
         <assert-deep-eq>map{"abc":=12e0}</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="fn-parse-json-003">
      <description>Singleton object, numeric value</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('{"abc":12e0}')</test>
      <result>
         <assert-deep-eq>map{"abc":=12e0}</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="fn-parse-json-004">
      <description>Singleton object, negative numeric value</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('{"abc":-1.2e0}')</test>
      <result>
         <assert-deep-eq>map{"abc":=-1.2e0}</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="fn-parse-json-005">
      <description>Singleton object, boolean value</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('{"abc":true}')</test>
      <result>
         <assert-deep-eq>map{"abc":=true()}</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="fn-parse-json-006">
      <description>Singleton object, boolean value</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('{"abc":false}')</test>
      <result>
         <assert-deep-eq>map{"abc":=false()}</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="fn-parse-json-007">
      <description>Singleton object, null value</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('{"abc":null}')</test>
      <result>
         <assert-deep-eq>map{"abc":=()}</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="fn-parse-json-008">
      <description>Two-entry object</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('{"abc":true,"xyz":false}')</test>
      <result>
         <assert-deep-eq>map{"abc":=true(),"xyz":=false()}</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="fn-parse-json-009">
      <description>Two-entry object - same with whitespace</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json(' { "abc" : true , "xyz" : false } ')</test>
      <result>
         <assert-deep-eq>map{"abc":=true(),"xyz":=false()}</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="fn-parse-json-010">
      <description>Two-entry object - same with more whitespace</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('    {   "abc"   :   true    ,
            "xyz"   :   false   
            }   ')</test>
      <result>
         <assert-deep-eq>map{"abc":=true(),"xyz":=false()}</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="fn-parse-json-011">
      <description>Empty array</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json("[]")</test>
      <result>
         <all-of>
            <assert-type>map(*)</assert-type>
            <assert-count>1</assert-count>
            <assert>map:size($result) eq 0</assert>
            <assert>map:collation($result) eq "http://saxon.sf.net/json/array-collation"</assert><!-- TEMPORARY -->
         </all-of>
      </result>
   </test-case>
   <test-case name="fn-parse-json-012">
      <description>Single-item array</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json("[12345]")</test>
      <result>
         <all-of>
            <assert-type>map(*)</assert-type>
            <assert-count>1</assert-count>
            <assert>map:contains($result, 1)</assert>
            <assert>map:get($result, 1) eq 12345</assert>
         </all-of>
      </result>
   </test-case>
   <test-case name="fn-parse-json-013">
      <description>Single-item array</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('["abcd"]')</test>
      <result>
         <all-of>
            <assert-type>map(*)</assert-type>
            <assert-count>1</assert-count>
            <assert>map:contains($result, 1)</assert>
            <assert>$result(1) eq "abcd"</assert>
         </all-of>
      </result>
   </test-case>
   <test-case name="fn-parse-json-014">
      <description>Single-item array</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json("[true]")</test>
      <result>
        <all-of>
            <assert-type>map(*)</assert-type>
            <assert-count>1</assert-count>
            <assert>map:contains($result, 1)</assert>
            <assert>$result(1) eq true()</assert>
         </all-of>
      </result>
   </test-case>
   <test-case name="fn-parse-json-015">
      <description>Single-item array</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json("[false]")</test>
      <result>
         <all-of>
            <assert-type>map(*)</assert-type>
            <assert-count>1</assert-count>
            <assert>map:contains($result, 1)</assert>
            <assert>$result(1) eq false()</assert>
         </all-of>
      </result>
   </test-case>
   <test-case name="fn-parse-json-016">
      <description>Single-item array</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json("[null]")</test>
      <result>
         <all-of>
            <assert-type>map(*)</assert-type>
            <assert-count>1</assert-count>
            <assert>map:contains($result, 1)</assert>
            <assert>empty($result(1))</assert>
         </all-of>
      </result>
   </test-case>
   <test-case name="fn-parse-json-017">
      <description>Multi-item array</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('[1,2,3, "abc", "def", true, false, null]')</test>
      <result>
        <all-of>
            <assert-type>map(*)</assert-type>
            <assert-count>1</assert-count>
            <assert>every $i in 1 to 8 satisfies map:contains($result, $i)</assert>
            <assert>every $i in (0, 9, 10) satisfies not(map:contains($result, $i))</assert>
            <assert>$result(1) eq 1</assert>
            <assert>$result(5) eq "def"</assert>
            <assert>$result(7) eq false()</assert>
         </all-of>
      </result>
   </test-case>
   <test-case name="fn-parse-json-018">
      <description>Multi-item array - same with more whitespace</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('
        [   1,     2,  3, 
        "abc",  "def",   true, 
        false,  null ]
        ')</test>
      <result>
         <all-of>
            <assert-type>map(*)</assert-type>
            <assert-count>1</assert-count>
            <assert>every $i in 1 to 8 satisfies map:contains($result, $i)</assert>
            <assert>every $i in (0, 9, 10) satisfies not(map:contains($result, $i))</assert>
            <assert>$result(1) eq 1</assert>
            <assert>$result(5) eq "def"</assert>
            <assert>$result(7) eq false()</assert>
         </all-of>
      </result>
   </test-case>
   <test-case name="fn-parse-json-019">
      <description>Nested empty arrays</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json("[[[],[]]]")</test>
      <result>
        <all-of>
            <assert-type>map(xs:integer, map(xs:integer, map(*)))</assert-type>
            <assert-count>1</assert-count>
            <assert>map:size($result) eq 1</assert>
            <assert>map:size($result(1)) eq 2</assert>
            <assert>map:size($result(1)(2)) eq 0</assert>
         </all-of>
      </result>
   </test-case>
   <test-case name="fn-parse-json-020">
      <description>Nested non-empty arrays</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('[1, 2, [], [1], [1,2], [1,2,3]]')</test>
      <result>        
         <all-of>
            <assert>map:size($result) = 6</assert>
            <assert>$result(6)(3) = 3</assert>
         </all-of>
      </result>
   </test-case>
   <test-case name="fn-parse-json-021">
      <description>Array of objects</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('[{"x":12,"y":5}, {"x":13,"y":6}]')</test>
      <result>
         <all-of><assert>map:size($result) = 2</assert>
         <assert>$result(2)("y") = 6</assert></all-of>
      </result>
   </test-case>
   <test-case name="fn-parse-json-022">
      <description>Object containing arrays</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('{"x":[12,3], "y":[14,9]}')</test>
      <result>
         <all-of><assert>map:size($result) = 2</assert>
         <assert>$result("y")(2) = 9</assert></all-of>
      </result>
   </test-case>
   <test-case name="fn-parse-json-023">
      <description>Number formats</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('[0.123]')</test>
      <result>
         <all-of><assert>$result(1) = 0.123e0</assert>
         <assert>$result(1) instance of xs:double</assert></all-of>
      </result>
   </test-case>
   <test-case name="fn-parse-json-024">
      <description>Number formats</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('[-0.123]')</test>
      <result>
         <all-of><assert>$result(1) = -0.123e0</assert>
         <assert>$result(1) instance of xs:double</assert></all-of>
      </result>
   </test-case>
   <test-case name="fn-parse-json-025">
      <description>Number formats</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('[-0.123e2]')</test>
      <result>
         <all-of><assert>$result(1) = -0.123e2</assert>
         <assert>$result(1) instance of xs:double</assert></all-of>
      </result>
   </test-case>
   <test-case name="fn-parse-json-026">
      <description>Number formats</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('[-0.123e+2]')</test>
      <result>
         <all-of><assert>$result(1) = -0.123e+2</assert>
         <assert>$result(1) instance of xs:double</assert></all-of>
      </result>
   </test-case>
   <test-case name="fn-parse-json-027">
      <description>Number formats</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('[-0.123e-2]')</test>
      <result>
         <all-of><assert>$result(1) = -0.123e-2</assert>
         <assert>$result(1) instance of xs:double</assert></all-of>
      </result>
   </test-case>
   <test-case name="fn-parse-json-028">
      <description>String formats</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('["\\"]')</test>
      <result>
         <all-of><assert>$result(1) = "\"</assert>
         <assert>$result(1) instance of xs:string</assert></all-of>
      </result>
   </test-case>
   <test-case name="fn-parse-json-029">
      <description>String formats</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('["\""]')</test>
      <result>
         <all-of><assert>$result(1) = '"'</assert>
         <assert>$result(1) instance of xs:string</assert></all-of>
      </result>
   </test-case>
   <test-case name="fn-parse-json-030">
      <description>String formats</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('["\r"]')</test>
      <result>
         <all-of><assert>$result(1) = '&#xd;'</assert>
         <assert>$result(1) instance of xs:string</assert></all-of>
      </result>
   </test-case>
   <test-case name="fn-parse-json-031">
      <description>String formats</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('["\n"]')</test>
      <result>
         <all-of><assert>$result(1) = '&#x0a;'</assert>
         <assert>$result(1) instance of xs:string</assert></all-of>
      </result>
   </test-case>
   <test-case name="fn-parse-json-032">
      <description>String formats</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('["\/"]')</test>
      <result>
         <all-of><assert>$result(1) = '/'</assert>
         <assert>$result(1) instance of xs:string</assert></all-of>
      </result>
   </test-case>
   <test-case name="fn-parse-json-033">
      <description>String formats</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('["aa\u0030aa"]')</test>
      <result>
         <all-of><assert>$result(1) = 'aa0aa'</assert>
         <assert>$result(1) instance of xs:string</assert></all-of>
      </result>
   </test-case>
   <test-case name="fn-parse-json-034">
      <description>String formats - surrogate pair</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('["\uD834\udD1E"]')</test>
      <result>
         <all-of><assert>$result(1) = '&#x1D11E;'</assert>
         <assert>$result(1) instance of xs:string</assert></all-of>
      </result>
   </test-case>
   <test-case name="fn-parse-json-035">
      <description>String formats: effect of unescape option</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('["\r"]', map{'unescape':=false()})</test>
      <result>
         <assert>$result(1) = '\r'</assert>
      </result>
   </test-case>
   <test-case name="fn-parse-json-036">
      <description>String formats: effect of unescape option</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('["\r"]', map{'unescape':=true()})</test>
      <result>
         <assert>$result(1) = '&#xd;'</assert>
      </result>
   </test-case>
   <test-case name="fn-parse-json-037">
      <description>String formats: effect of unescape option</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('["\u0000"]', map{'unescape':=false()})</test>
      <result>
         <assert>$result(1) = '\u0000'</assert>
      </result>
   </test-case>
   <test-case name="fn-parse-json-038">
      <description>Anything allowed at Top level under ECMA spec</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('true', map{'spec':='ECMA-262'})</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="fn-parse-json-039">
      <description>Anything allowed at Top level under ECMA spec</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('false', map{'spec':='ECMA-262'})</test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   <test-case name="fn-parse-json-040">
      <description>Anything allowed at Top level under ECMA spec</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('null', map{'spec':='ECMA-262'})</test>
      <result>
         <assert-empty/>
      </result>
   </test-case>
   <test-case name="fn-parse-json-041">
      <description>Anything allowed at Top level under ECMA spec</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('93.7', map{'spec':='ECMA-262'})</test>
      <result>
        <all-of>
          <assert-eq>93.7e0</assert-eq>
          <assert-type>xs:double</assert-type>
        </all-of>
      </result>
   </test-case>
   <test-case name="fn-parse-json-042">
      <description>Anything allowed at Top level under ECMA spec</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('"abcd\n"', map{'spec':='ECMA-262','unescape':=false()})</test>
      <result>
        <all-of>
          <assert-eq>'abcd\n'</assert-eq>
          <assert-type>xs:string</assert-type>
        </all-of>
      </result>
   </test-case>
   
   <!-- "real" JSON files -->
   
   <test-case name="fn-parse-json-101">
      <description>An example JSON file</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json(unparsed-text('parse-json/data001.json'))</test>
      <result>
         <assert-count>1</assert-count>
      </result>
   </test-case>
   <test-case name="fn-parse-json-102">
      <description>An example JSON file</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json(unparsed-text('parse-json/data002.json'))</test>
      <result>
         <assert-count>1</assert-count>
      </result>
   </test-case>
   <test-case name="fn-parse-json-103">
      <description>An example JSON file</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json(unparsed-text('parse-json/data003.json'))</test>
      <result>
         <assert-count>1</assert-count>
      </result>
   </test-case>
   <test-case name="fn-parse-json-104">
      <description>An example JSON file</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json(unparsed-text('parse-json/data004.json'))</test>
      <result>
         <assert-count>1</assert-count>
      </result>
   </test-case>
   <test-case name="fn-parse-json-105">
      <description>An example JSON file</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json(unparsed-text('parse-json/data005.json'))</test>
      <result>
         <assert-count>1</assert-count>
      </result>
   </test-case>
   
    
   <!-- error cases -->
   
   <test-case name="fn-parse-json-901">
      <description>Syntax error</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('[-0.123e-2[')</test>
      <result>
         <error code="FOJS0001"/>
      </result>
   </test-case>
   <test-case name="fn-parse-json-902">
      <description>Syntax error</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('[false')</test>
      <result>
         <error code="FOJS0001"/>
      </result>
   </test-case>
   <test-case name="fn-parse-json-903">
      <description>Syntax error</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('[falsehood]')</test>
      <result>
         <error code="FOJS0001"/>
      </result>
   </test-case>
   <test-case name="fn-parse-json-904">
      <description>Syntax error</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('[(5)]')</test>
      <result>
         <error code="FOJS0001"/>
      </result>
   </test-case>
   <test-case name="fn-parse-json-905">
      <description>Syntax error</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('[{5}]')</test>
      <result>
         <error code="FOJS0001"/>
      </result>
   </test-case>
   <test-case name="fn-parse-json-906">
      <description>Syntax error</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('[{x:23}]')</test>
      <result>
         <error code="FOJS0001"/>
      </result>
   </test-case>
   <test-case name="fn-parse-json-907">
      <description>Syntax error</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('23,24')</test>
      <result>
         <error code="FOJS0001"/>
      </result>
   </test-case>
   <test-case name="fn-parse-json-908">
      <description>Syntax error</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('["abc]')</test>
      <result>
         <error code="FOJS0001"/>
      </result>
   </test-case>
   <test-case name="fn-parse-json-909">
      <description>Syntax error</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('[1,2,3,]')</test>
      <result>
         <error code="FOJS0001"/>
      </result>
   </test-case>
   <test-case name="fn-parse-json-910">
      <description>Syntax error</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('{"a":=13}')</test>
      <result>
         <error code="FOJS0001"/>
      </result>
   </test-case>
   <test-case name="fn-parse-json-911">
      <description>Syntax error</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('{"a":13,,"b":15}')</test>
      <result>
         <error code="FOJS0001"/>
      </result>
   </test-case>
   <test-case name="fn-parse-json-912">
      <description>Syntax error</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('{"a":13')</test>
      <result>
         <error code="FOJS0001"/>
      </result>
   </test-case>
   <test-case name="fn-parse-json-913">
      <description>Syntax error</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('{"a":{"b":12}')</test>
      <result>
         <error code="FOJS0001"/>
      </result>
   </test-case>
   <test-case name="fn-parse-json-914">
      <description>Syntax error</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('{"a":{"b":12}}}')</test>
      <result>
         <error code="FOJS0001"/>
      </result>
   </test-case>
   <test-case name="fn-parse-json-915">
      <description>Syntax error</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('["\"]')</test>
      <result>
         <error code="FOJS0001"/>
      </result>
   </test-case>
   <test-case name="fn-parse-json-916">
      <description>Syntax error</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('["\1"]')</test>
      <result>
         <error code="FOJS0001"/>
      </result>
   </test-case>
   <test-case name="fn-parse-json-917">
      <description>Syntax error</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('["\u2"]')</test>
      <result>
         <error code="FOJS0001"/>
      </result>
   </test-case>
   <test-case name="fn-parse-json-918">
      <description>Syntax error</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('["\u123u"]')</test>
      <result>
         <error code="FOJS0001"/>
      </result>
   </test-case>
   <test-case name="fn-parse-json-919">
      <description>Syntax error: invalid character under XML 1.0</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <dependency type="xml-version" value="1.0"/>
      <test>parse-json('["\b"]')</test>
      <result>
         <error code="FOJS0001"/>
      </result>
   </test-case>
   <test-case name="fn-parse-json-920">
      <description>Syntax error</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('["\x20"]')</test>
      <result>
         <error code="FOJS0001"/>
      </result>
   </test-case>
   <test-case name="fn-parse-json-921">
      <description>String formats: \s is not allowed by the RFC</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('["\s"]')</test>
      <result>
         <error code="FOJS0001"/>
      </result>
   </test-case>
   <test-case name="fn-parse-json-922">
      <description>String formats - unpaired surrogate</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('["\uD834"]')</test>
      <result>
         <error code="FOJS0001"/>
      </result>
   </test-case>
   <test-case name="fn-parse-json-923">
      <description>String formats - surrogate pair</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('["\udD1E"]')</test>
      <result>
         <error code="FOJS0001"/>
      </result>
   </test-case>
   <test-case name="fn-parse-json-924">
      <description>String formats: effect of unescape option: invalid XML character</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('["\u0000"]', map{'unescape':=true()})</test>
      <result>
         <error code="FOJS0001"/>
      </result>
   </test-case>
   <test-case name="fn-parse-json-925">
      <description>Anything not allowed at Top level under RFC spec</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('true', map{'spec':='RFC4627'})</test>
      <result>
         <error code="FOJS0001"/>
      </result>
   </test-case>
   <test-case name="fn-parse-json-926">
      <description>Anything not allowed at Top level under RFC spec</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('false', map{'spec':='RFC4627'})</test>
      <result>
         <error code="FOJS0001"/>
      </result>
   </test-case>
   <test-case name="fn-parse-json-927">
      <description>Anything not allowed at Top level under RFC spec</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('null', map{'spec':='RFC4627'})</test>
      <result>
         <error code="FOJS0001"/>
      </result>
   </test-case>
   <test-case name="fn-parse-json-928">
      <description>Anything not allowed at Top level under RFC spec</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('93.7', map{'spec':='RFC4627'})</test>
      <result>
        <error code="FOJS0001"/>
      </result>
   </test-case>
   <test-case name="fn-parse-json-929">
      <description>Anything not allowed at Top level under RFC spec</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('"abcd\n"', map{'spec':='RFC4627','unescape':=false()})</test>
      <result>
        <error code="FOJS0001"/>
      </result>
   </test-case>
   <test-case name="fn-parse-json-930">
      <description>Invalid number</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('[.3]')</test>
      <result>
        <error code="FOJS0001"/>
      </result>
   </test-case>
   <test-case name="fn-parse-json-931">
      <description>Invalid number</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('[01]')</test>
      <result>
        <error code="FOJS0001"/>
      </result>
   </test-case>
   <test-case name="fn-parse-json-932">
      <description>Invalid number</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('[00.00]')</test>
      <result>
        <error code="FOJS0001"/>
      </result>
   </test-case>
   <test-case name="fn-parse-json-933">
      <description>Invalid number</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('[+23]')</test>
      <result>
        <error code="FOJS0001"/>
      </result>
   </test-case>
   <test-case name="fn-parse-json-934">
      <description>Invalid number</description>
      <created by="Michael Kay, Saxonica" on="2011-03-31"/>
      <test>parse-json('[1.234f0]')</test>
      <result>
        <error code="FOJS0001"/>
      </result>
   </test-case>

</test-set>