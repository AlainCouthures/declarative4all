<?xml version="1.0" encoding="UTF-8"?>
<test-set name="fn-concat" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">
  <description/>
  <link document="http://www.w3.org/TR/xpath-functions-30/" idref="func-concat" type="spec"/>
  <test-case name="fn-concatint2args-1">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:int(lower bound) $arg2 = xs:int(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:int(&quot;-2147483648&quot;),xs:int(&quot;-2147483648&quot;))</test>
    <result-string>xs:string(&quot;-2147483648-2147483648&quot;)</result-string>
    <result>
      <assert-string-value>-2147483648-2147483648</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatint2args-2">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:int(mid range) $arg2 = xs:int(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:int(&quot;-1873914410&quot;),xs:int(&quot;-2147483648&quot;))</test>
    <result-string>xs:string(&quot;-1873914410-2147483648&quot;)</result-string>
    <result>
      <assert-string-value>-1873914410-2147483648</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatint2args-3">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:int(upper bound) $arg2 = xs:int(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:int(&quot;2147483647&quot;),xs:int(&quot;-2147483648&quot;))</test>
    <result-string>xs:string(&quot;2147483647-2147483648&quot;)</result-string>
    <result>
      <assert-string-value>2147483647-2147483648</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatint2args-4">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:int(lower bound) $arg2 = xs:int(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:int(&quot;-2147483648&quot;),xs:int(&quot;-1873914410&quot;))</test>
    <result-string>xs:string(&quot;-2147483648-1873914410&quot;)</result-string>
    <result>
      <assert-string-value>-2147483648-1873914410</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatint2args-5">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:int(lower bound) $arg2 = xs:int(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:int(&quot;-2147483648&quot;),xs:int(&quot;2147483647&quot;))</test>
    <result-string>xs:string(&quot;-21474836482147483647&quot;)</result-string>
    <result>
      <assert-string-value>-21474836482147483647</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatintg2args-1">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:integer(lower bound) $arg2 = xs:integer(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:integer(&quot;-999999999999999999&quot;),xs:integer(&quot;-999999999999999999&quot;))</test>
    <result-string>xs:string(&quot;-999999999999999999-999999999999999999&quot;)</result-string>
    <result>
      <assert-string-value>-999999999999999999-999999999999999999</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatintg2args-2">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:integer(mid range) $arg2 = xs:integer(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:integer(&quot;830993497117024304&quot;),xs:integer(&quot;-999999999999999999&quot;))</test>
    <result-string>xs:string(&quot;830993497117024304-999999999999999999&quot;)</result-string>
    <result>
      <assert-string-value>830993497117024304-999999999999999999</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatintg2args-3">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:integer(upper bound) $arg2 = xs:integer(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:integer(&quot;999999999999999999&quot;),xs:integer(&quot;-999999999999999999&quot;))</test>
    <result-string>xs:string(&quot;999999999999999999-999999999999999999&quot;)</result-string>
    <result>
      <assert-string-value>999999999999999999-999999999999999999</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatintg2args-4">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:integer(lower bound) $arg2 = xs:integer(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:integer(&quot;-999999999999999999&quot;),xs:integer(&quot;830993497117024304&quot;))</test>
    <result-string>xs:string(&quot;-999999999999999999830993497117024304&quot;)</result-string>
    <result>
      <assert-string-value>-999999999999999999830993497117024304</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatintg2args-5">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:integer(lower bound) $arg2 = xs:integer(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:integer(&quot;-999999999999999999&quot;),xs:integer(&quot;999999999999999999&quot;))</test>
    <result-string>xs:string(&quot;-999999999999999999999999999999999999&quot;)</result-string>
    <result>
      <assert-string-value>-999999999999999999999999999999999999</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatdec2args-1">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:decimal(lower bound) $arg2 = xs:decimal(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:decimal(&quot;-999999999999999999&quot;),xs:decimal(&quot;-999999999999999999&quot;))</test>
    <result-string>xs:string(&quot;-999999999999999999-999999999999999999&quot;)</result-string>
    <result>
      <assert-string-value>-999999999999999999-999999999999999999</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatdec2args-2">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:decimal(mid range) $arg2 = xs:decimal(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:decimal(&quot;617375191608514839&quot;),xs:decimal(&quot;-999999999999999999&quot;))</test>
    <result-string>xs:string(&quot;617375191608514839-999999999999999999&quot;)</result-string>
    <result>
      <assert-string-value>617375191608514839-999999999999999999</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatdec2args-3">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:decimal(upper bound) $arg2 = xs:decimal(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:decimal(&quot;999999999999999999&quot;),xs:decimal(&quot;-999999999999999999&quot;))</test>
    <result-string>xs:string(&quot;999999999999999999-999999999999999999&quot;)</result-string>
    <result>
      <assert-string-value>999999999999999999-999999999999999999</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatdec2args-4">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:decimal(lower bound) $arg2 = xs:decimal(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:decimal(&quot;-999999999999999999&quot;),xs:decimal(&quot;617375191608514839&quot;))</test>
    <result-string>xs:string(&quot;-999999999999999999617375191608514839&quot;)</result-string>
    <result>
      <assert-string-value>-999999999999999999617375191608514839</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatdec2args-5">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:decimal(lower bound) $arg2 = xs:decimal(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:decimal(&quot;-999999999999999999&quot;),xs:decimal(&quot;999999999999999999&quot;))</test>
    <result-string>xs:string(&quot;-999999999999999999999999999999999999&quot;)</result-string>
    <result>
      <assert-string-value>-999999999999999999999999999999999999</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatdbl2args-1">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:double(lower bound) $arg2 = xs:double(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:double(&quot;-1.7976931348623157E308&quot;),xs:double(&quot;-1.7976931348623157E308&quot;))</test>
    <result-string>xs:string(&quot;-1.7976931348623157E308-1.7976931348623157E308&quot;)</result-string>
    <result>
      <assert-string-value>-1.7976931348623157E308-1.7976931348623157E308</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatdbl2args-2">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:double(mid range) $arg2 = xs:double(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:double(&quot;0&quot;),xs:double(&quot;-1.7976931348623157E308&quot;))</test>
    <result-string>xs:string(&quot;0-1.7976931348623157E308&quot;)</result-string>
    <result>
      <assert-string-value>0-1.7976931348623157E308</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatdbl2args-3">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:double(upper bound) $arg2 = xs:double(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:double(&quot;1.7976931348623157E308&quot;),xs:double(&quot;-1.7976931348623157E308&quot;))</test>
    <result-string>xs:string(&quot;1.7976931348623157E308-1.7976931348623157E308&quot;)</result-string>
    <result>
      <assert-string-value>1.7976931348623157E308-1.7976931348623157E308</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatdbl2args-4">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:double(lower bound) $arg2 = xs:double(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:double(&quot;-1.7976931348623157E308&quot;),xs:double(&quot;0&quot;))</test>
    <result-string>xs:string(&quot;-1.7976931348623157E3080&quot;)</result-string>
    <result>
      <assert-string-value>-1.7976931348623157E3080</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatdbl2args-5">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:double(lower bound) $arg2 = xs:double(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:double(&quot;-1.7976931348623157E308&quot;),xs:double(&quot;1.7976931348623157E308&quot;))</test>
    <result-string>xs:string(&quot;-1.7976931348623157E3081.7976931348623157E308&quot;)</result-string>
    <result>
      <assert-string-value>-1.7976931348623157E3081.7976931348623157E308</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatflt2args-1">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:float(lower bound) $arg2 = xs:float(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:float(&quot;-3.4028235E38&quot;),xs:float(&quot;-3.4028235E38&quot;))</test>
    <result-string>xs:string(&quot;-3.4028235E38-3.4028235E38&quot;)</result-string>
    <result>
      <assert-string-value>-3.4028235E38-3.4028235E38</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatflt2args-2">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:float(mid range) $arg2 = xs:float(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:float(&quot;0&quot;),xs:float(&quot;-3.4028235E38&quot;))</test>
    <result-string>xs:string(&quot;0-3.4028235E38&quot;)</result-string>
    <result>
      <assert-string-value>0-3.4028235E38</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatflt2args-3">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:float(upper bound) $arg2 = xs:float(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:float(&quot;3.4028235E38&quot;),xs:float(&quot;-3.4028235E38&quot;))</test>
    <result-string>xs:string(&quot;3.4028235E38-3.4028235E38&quot;)</result-string>
    <result>
      <assert-string-value>3.4028235E38-3.4028235E38</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatflt2args-4">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:float(lower bound) $arg2 = xs:float(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:float(&quot;-3.4028235E38&quot;),xs:float(&quot;0&quot;))</test>
    <result-string>xs:string(&quot;-3.4028235E380&quot;)</result-string>
    <result>
      <assert-string-value>-3.4028235E380</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatflt2args-5">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:float(lower bound) $arg2 = xs:float(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:float(&quot;-3.4028235E38&quot;),xs:float(&quot;3.4028235E38&quot;))</test>
    <result-string>xs:string(&quot;-3.4028235E383.4028235E38&quot;)</result-string>
    <result>
      <assert-string-value>-3.4028235E383.4028235E38</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatlng2args-1">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:long(lower bound) $arg2 = xs:long(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:long(&quot;-92233720368547758&quot;),xs:long(&quot;-92233720368547758&quot;))</test>
    <result-string>xs:string(&quot;-92233720368547758-92233720368547758&quot;)</result-string>
    <result>
      <assert-string-value>-92233720368547758-92233720368547758</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatlng2args-2">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:long(mid range) $arg2 = xs:long(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:long(&quot;-47175562203048468&quot;),xs:long(&quot;-92233720368547758&quot;))</test>
    <result-string>xs:string(&quot;-47175562203048468-92233720368547758&quot;)</result-string>
    <result>
      <assert-string-value>-47175562203048468-92233720368547758</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatlng2args-3">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:long(upper bound) $arg2 = xs:long(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:long(&quot;92233720368547758&quot;),xs:long(&quot;-92233720368547758&quot;))</test>
    <result-string>xs:string(&quot;92233720368547758-92233720368547758&quot;)</result-string>
    <result>
      <assert-string-value>92233720368547758-92233720368547758</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatlng2args-4">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:long(lower bound) $arg2 = xs:long(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:long(&quot;-92233720368547758&quot;),xs:long(&quot;-47175562203048468&quot;))</test>
    <result-string>xs:string(&quot;-92233720368547758-47175562203048468&quot;)</result-string>
    <result>
      <assert-string-value>-92233720368547758-47175562203048468</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatlng2args-5">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:long(lower bound) $arg2 = xs:long(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:long(&quot;-92233720368547758&quot;),xs:long(&quot;92233720368547758&quot;))</test>
    <result-string>xs:string(&quot;-9223372036854775892233720368547758&quot;)</result-string>
    <result>
      <assert-string-value>-9223372036854775892233720368547758</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatusht2args-1">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:unsignedShort(lower bound) $arg2 = xs:unsignedShort(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:unsignedShort(&quot;0&quot;),xs:unsignedShort(&quot;0&quot;))</test>
    <result-string>xs:string(&quot;00&quot;)</result-string>
    <result>
      <assert-string-value>00</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatusht2args-2">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:unsignedShort(mid range) $arg2 = xs:unsignedShort(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:unsignedShort(&quot;44633&quot;),xs:unsignedShort(&quot;0&quot;))</test>
    <result-string>xs:string(&quot;446330&quot;)</result-string>
    <result>
      <assert-string-value>446330</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatusht2args-3">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:unsignedShort(upper bound) $arg2 = xs:unsignedShort(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:unsignedShort(&quot;65535&quot;),xs:unsignedShort(&quot;0&quot;))</test>
    <result-string>xs:string(&quot;655350&quot;)</result-string>
    <result>
      <assert-string-value>655350</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatusht2args-4">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:unsignedShort(lower bound) $arg2 = xs:unsignedShort(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:unsignedShort(&quot;0&quot;),xs:unsignedShort(&quot;44633&quot;))</test>
    <result-string>xs:string(&quot;044633&quot;)</result-string>
    <result>
      <assert-string-value>044633</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatusht2args-5">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:unsignedShort(lower bound) $arg2 = xs:unsignedShort(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:unsignedShort(&quot;0&quot;),xs:unsignedShort(&quot;65535&quot;))</test>
    <result-string>xs:string(&quot;065535&quot;)</result-string>
    <result>
      <assert-string-value>065535</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatnint2args-1">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:negativeInteger(lower bound) $arg2 = xs:negativeInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:negativeInteger(&quot;-999999999999999999&quot;),xs:negativeInteger(&quot;-999999999999999999&quot;))</test>
    <result-string>xs:string(&quot;-999999999999999999-999999999999999999&quot;)</result-string>
    <result>
      <assert-string-value>-999999999999999999-999999999999999999</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatnint2args-2">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:negativeInteger(mid range) $arg2 = xs:negativeInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:negativeInteger(&quot;-297014075999096793&quot;),xs:negativeInteger(&quot;-999999999999999999&quot;))</test>
    <result-string>xs:string(&quot;-297014075999096793-999999999999999999&quot;)</result-string>
    <result>
      <assert-string-value>-297014075999096793-999999999999999999</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatnint2args-3">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:negativeInteger(upper bound) $arg2 = xs:negativeInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:negativeInteger(&quot;-1&quot;),xs:negativeInteger(&quot;-999999999999999999&quot;))</test>
    <result-string>xs:string(&quot;-1-999999999999999999&quot;)</result-string>
    <result>
      <assert-string-value>-1-999999999999999999</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatnint2args-4">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:negativeInteger(lower bound) $arg2 = xs:negativeInteger(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:negativeInteger(&quot;-999999999999999999&quot;),xs:negativeInteger(&quot;-297014075999096793&quot;))</test>
    <result-string>xs:string(&quot;-999999999999999999-297014075999096793&quot;)</result-string>
    <result>
      <assert-string-value>-999999999999999999-297014075999096793</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatnint2args-5">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:negativeInteger(lower bound) $arg2 = xs:negativeInteger(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:negativeInteger(&quot;-999999999999999999&quot;),xs:negativeInteger(&quot;-1&quot;))</test>
    <result-string>xs:string(&quot;-999999999999999999-1&quot;)</result-string>
    <result>
      <assert-string-value>-999999999999999999-1</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatpint2args-1">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:positiveInteger(lower bound) $arg2 = xs:positiveInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:positiveInteger(&quot;1&quot;),xs:positiveInteger(&quot;1&quot;))</test>
    <result-string>xs:string(&quot;11&quot;)</result-string>
    <result>
      <assert-string-value>11</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatpint2args-2">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:positiveInteger(mid range) $arg2 = xs:positiveInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:positiveInteger(&quot;52704602390610033&quot;),xs:positiveInteger(&quot;1&quot;))</test>
    <result-string>xs:string(&quot;527046023906100331&quot;)</result-string>
    <result>
      <assert-string-value>527046023906100331</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatpint2args-3">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:positiveInteger(upper bound) $arg2 = xs:positiveInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:positiveInteger(&quot;999999999999999999&quot;),xs:positiveInteger(&quot;1&quot;))</test>
    <result-string>xs:string(&quot;9999999999999999991&quot;)</result-string>
    <result>
      <assert-string-value>9999999999999999991</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatpint2args-4">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:positiveInteger(lower bound) $arg2 = xs:positiveInteger(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:positiveInteger(&quot;1&quot;),xs:positiveInteger(&quot;52704602390610033&quot;))</test>
    <result-string>xs:string(&quot;152704602390610033&quot;)</result-string>
    <result>
      <assert-string-value>152704602390610033</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatpint2args-5">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:positiveInteger(lower bound) $arg2 = xs:positiveInteger(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:positiveInteger(&quot;1&quot;),xs:positiveInteger(&quot;999999999999999999&quot;))</test>
    <result-string>xs:string(&quot;1999999999999999999&quot;)</result-string>
    <result>
      <assert-string-value>1999999999999999999</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatulng2args-1">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:unsignedLong(lower bound) $arg2 = xs:unsignedLong(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:unsignedLong(&quot;0&quot;),xs:unsignedLong(&quot;0&quot;))</test>
    <result-string>xs:string(&quot;00&quot;)</result-string>
    <result>
      <assert-string-value>00</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatulng2args-2">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:unsignedLong(mid range) $arg2 = xs:unsignedLong(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:unsignedLong(&quot;130747108607674654&quot;),xs:unsignedLong(&quot;0&quot;))</test>
    <result-string>xs:string(&quot;1307471086076746540&quot;)</result-string>
    <result>
      <assert-string-value>1307471086076746540</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatulng2args-3">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:unsignedLong(upper bound) $arg2 = xs:unsignedLong(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:unsignedLong(&quot;184467440737095516&quot;),xs:unsignedLong(&quot;0&quot;))</test>
    <result-string>xs:string(&quot;1844674407370955160&quot;)</result-string>
    <result>
      <assert-string-value>1844674407370955160</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatulng2args-4">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:unsignedLong(lower bound) $arg2 = xs:unsignedLong(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:unsignedLong(&quot;0&quot;),xs:unsignedLong(&quot;130747108607674654&quot;))</test>
    <result-string>xs:string(&quot;0130747108607674654&quot;)</result-string>
    <result>
      <assert-string-value>0130747108607674654</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatulng2args-5">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:unsignedLong(lower bound) $arg2 = xs:unsignedLong(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:unsignedLong(&quot;0&quot;),xs:unsignedLong(&quot;184467440737095516&quot;))</test>
    <result-string>xs:string(&quot;0184467440737095516&quot;)</result-string>
    <result>
      <assert-string-value>0184467440737095516</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatnpi2args-1">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:nonPositiveInteger(lower bound) $arg2 = xs:nonPositiveInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:nonPositiveInteger(&quot;-999999999999999999&quot;),xs:nonPositiveInteger(&quot;-999999999999999999&quot;))</test>
    <result-string>xs:string(&quot;-999999999999999999-999999999999999999&quot;)</result-string>
    <result>
      <assert-string-value>-999999999999999999-999999999999999999</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatnpi2args-2">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:nonPositiveInteger(mid range) $arg2 = xs:nonPositiveInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:nonPositiveInteger(&quot;-475688437271870490&quot;),xs:nonPositiveInteger(&quot;-999999999999999999&quot;))</test>
    <result-string>xs:string(&quot;-475688437271870490-999999999999999999&quot;)</result-string>
    <result>
      <assert-string-value>-475688437271870490-999999999999999999</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatnpi2args-3">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:nonPositiveInteger(upper bound) $arg2 = xs:nonPositiveInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:nonPositiveInteger(&quot;0&quot;),xs:nonPositiveInteger(&quot;-999999999999999999&quot;))</test>
    <result-string>xs:string(&quot;0-999999999999999999&quot;)</result-string>
    <result>
      <assert-string-value>0-999999999999999999</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatnpi2args-4">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:nonPositiveInteger(lower bound) $arg2 = xs:nonPositiveInteger(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:nonPositiveInteger(&quot;-999999999999999999&quot;),xs:nonPositiveInteger(&quot;-475688437271870490&quot;))</test>
    <result-string>xs:string(&quot;-999999999999999999-475688437271870490&quot;)</result-string>
    <result>
      <assert-string-value>-999999999999999999-475688437271870490</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatnpi2args-5">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:nonPositiveInteger(lower bound) $arg2 = xs:nonPositiveInteger(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:nonPositiveInteger(&quot;-999999999999999999&quot;),xs:nonPositiveInteger(&quot;0&quot;))</test>
    <result-string>xs:string(&quot;-9999999999999999990&quot;)</result-string>
    <result>
      <assert-string-value>-9999999999999999990</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatnni2args-1">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:nonNegativeInteger(lower bound) $arg2 = xs:nonNegativeInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:nonNegativeInteger(&quot;0&quot;),xs:nonNegativeInteger(&quot;0&quot;))</test>
    <result-string>xs:string(&quot;00&quot;)</result-string>
    <result>
      <assert-string-value>00</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatnni2args-2">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:nonNegativeInteger(mid range) $arg2 = xs:nonNegativeInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:nonNegativeInteger(&quot;303884545991464527&quot;),xs:nonNegativeInteger(&quot;0&quot;))</test>
    <result-string>xs:string(&quot;3038845459914645270&quot;)</result-string>
    <result>
      <assert-string-value>3038845459914645270</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatnni2args-3">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:nonNegativeInteger(upper bound) $arg2 = xs:nonNegativeInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:nonNegativeInteger(&quot;999999999999999999&quot;),xs:nonNegativeInteger(&quot;0&quot;))</test>
    <result-string>xs:string(&quot;9999999999999999990&quot;)</result-string>
    <result>
      <assert-string-value>9999999999999999990</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatnni2args-4">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:nonNegativeInteger(lower bound) $arg2 = xs:nonNegativeInteger(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:nonNegativeInteger(&quot;0&quot;),xs:nonNegativeInteger(&quot;303884545991464527&quot;))</test>
    <result-string>xs:string(&quot;0303884545991464527&quot;)</result-string>
    <result>
      <assert-string-value>0303884545991464527</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatnni2args-5">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:nonNegativeInteger(lower bound) $arg2 = xs:nonNegativeInteger(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:nonNegativeInteger(&quot;0&quot;),xs:nonNegativeInteger(&quot;999999999999999999&quot;))</test>
    <result-string>xs:string(&quot;0999999999999999999&quot;)</result-string>
    <result>
      <assert-string-value>0999999999999999999</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatsht2args-1">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:short(lower bound) $arg2 = xs:short(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:short(&quot;-32768&quot;),xs:short(&quot;-32768&quot;))</test>
    <result-string>xs:string(&quot;-32768-32768&quot;)</result-string>
    <result>
      <assert-string-value>-32768-32768</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatsht2args-2">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:short(mid range) $arg2 = xs:short(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:short(&quot;-5324&quot;),xs:short(&quot;-32768&quot;))</test>
    <result-string>xs:string(&quot;-5324-32768&quot;)</result-string>
    <result>
      <assert-string-value>-5324-32768</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatsht2args-3">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:short(upper bound) $arg2 = xs:short(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:short(&quot;32767&quot;),xs:short(&quot;-32768&quot;))</test>
    <result-string>xs:string(&quot;32767-32768&quot;)</result-string>
    <result>
      <assert-string-value>32767-32768</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatsht2args-4">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:short(lower bound) $arg2 = xs:short(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:short(&quot;-32768&quot;),xs:short(&quot;-5324&quot;))</test>
    <result-string>xs:string(&quot;-32768-5324&quot;)</result-string>
    <result>
      <assert-string-value>-32768-5324</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concatsht2args-5">
    <description> Evaluates The &quot;concat&quot; function with the arguments set as follows: $arg1 = xs:short(lower bound) $arg2 = xs:short(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:concat(xs:short(&quot;-32768&quot;),xs:short(&quot;32767&quot;))</test>
    <result-string>xs:string(&quot;-3276832767&quot;)</result-string>
    <result>
      <assert-string-value>-3276832767</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concat-1">
    <description>Evaluation of concat function as per example 1 (for this function) from the FO specs. </description>
    <created by="Carmelo Montanez" on="2005-08-11"/>
    <test>fn:concat('un', 'grateful')</test>
    <result-string>xs:string(&quot;ungrateful&quot;)</result-string>
    <result>
      <assert-string-value>ungrateful</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concat-2">
    <description>Evaluation of concat function as per example 2 (for this function) from the FO specs. </description>
    <created by="Carmelo Montanez" on="2005-08-11"/>
    <test>fn:concat('Thy ', (), 'old ', &quot;groans&quot;, &quot;&quot;, ' ring', ' yet', ' in', ' my', ' ancient',' ears.')</test>
    <result-string>xs:string(&quot;Thy old groans ring yet in my ancient ears.&quot;)</result-string>
    <result>
      <assert-string-value>Thy old groans ring yet in my ancient ears.</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concat-3">
    <description>Evaluation of concat function as per example 3 (for this function) from the FO specs. </description>
    <created by="Carmelo Montanez" on="2005-08-11"/>
    <test>fn:concat('Ciao!',())</test>
    <result-string>xs:string(&quot;Ciao!&quot;)</result-string>
    <result>
      <assert-string-value>Ciao!</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concat-4">
    <description>Evaluation of concat function as per example 4 (for this function) from the FO specs. </description>
    <created by="Carmelo Montanez" on="2005-08-11"/>
    <test>fn:concat('Ingratitude, ', 'thou ', 'marble-hearted', ' fiend!')</test>
    <result-string>xs:string(&quot;Ingratitude, thou marble-hearted fiend!&quot;)</result-string>
    <result>
      <assert-string-value>Ingratitude, thou marble-hearted fiend!</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concat-5">
    <description>Evaluation of concat function that uses only upper case letters as part of argument </description>
    <created by="Carmelo Montanez" on="2005-08-11"/>
    <test>fn:concat(&quot;AB&quot;,&quot;CD&quot;)</test>
    <result-string>xs:string(&quot;ABCD&quot;)</result-string>
    <result>
      <assert-string-value>ABCD</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concat-6">
    <description>Evaluation of concat function that uses only lower case letters as part of argument </description>
    <created by="Carmelo Montanez" on="2005-08-11"/>
    <test>fn:concat(&quot;abc&quot;,&quot;de&quot;)</test>
    <result-string>xs:string(&quot;abcde&quot;)</result-string>
    <result>
      <assert-string-value>abcde</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concat-7">
    <description>Evaluation of concat function that uses both upper and lower case letters as part of argument </description>
    <created by="Carmelo Montanez" on="2005-08-11"/>
    <test>fn:concat(&quot;ABCDE&quot;,&quot;abcde&quot;)</test>
    <result-string>xs:string(&quot;ABCDEabcde&quot;)</result-string>
    <result>
      <assert-string-value>ABCDEabcde</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concat-8">
    <description>Evaluation of concat function that uses the empty string as part of argument Uses &quot;fn:count&quot; to avoid the empty file </description>
    <created by="Carmelo Montanez" on="2005-08-11"/>
    <test>fn:count(fn:concat(&quot;&quot;,&quot;&quot;))</test>
    <result-string>xs:string(&quot;1&quot;)</result-string>
    <result>
      <assert-string-value>1</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concat-9">
    <description>Evaluation of concat function that uses the &quot;upper-case&quot; function as part of argument </description>
    <created by="Carmelo Montanez" on="2005-08-11"/>
    <test>fn:concat(fn:upper-case(&quot;Abc&quot;),fn:upper-case(&quot;DH&quot;))</test>
    <result-string>xs:string(&quot;ABCDH&quot;)</result-string>
    <result>
      <assert-string-value>ABCDH</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concat-10">
    <description>Evaluation of concat function with argument set to &quot;*****&quot; </description>
    <created by="Carmelo Montanez" on="2005-08-11"/>
    <test>fn:concat(&quot;**&quot;,&quot;***&quot;)</test>
    <result-string>xs:string(&quot;*****&quot;)</result-string>
    <result>
      <assert-string-value>*****</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concat-11">
    <description>Evaluation of concat function with argument that uses another concat function </description>
    <created by="Carmelo Montanez" on="2005-08-11"/>
    <test>fn:concat(fn:concat(&quot;zzz&quot;,&quot;zz&quot;),&quot;123&quot;)</test>
    <result-string>xs:string(&quot;zzzzz123&quot;)</result-string>
    <result>
      <assert-string-value>zzzzz123</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concat-12">
    <description>Evaluation of concat function as an argument to the &quot;fn:boolean&quot; function </description>
    <created by="Carmelo Montanez" on="2005-08-11"/>
    <test>fn:boolean(fn:concat(&quot;ab&quot;,&quot;cde&quot;))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-concat-13">
    <description>Evaluation of concat function as an argument to the &quot;fn:string&quot; function </description>
    <created by="Carmelo Montanez" on="2005-08-11"/>
    <test>fn:string(fn:concat(&quot;abc&quot;,&quot;de&quot;))</test>
    <result-string>xs:string(&quot;abcde&quot;)</result-string>
    <result>
      <assert-string-value>abcde</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concat-14">
    <description>Evaluation of concat function as an argument to the &quot;fn:not&quot; function </description>
    <created by="Carmelo Montanez" on="2005-08-11"/>
    <test>fn:not(fn:concat(&quot;ab&quot;,&quot;cde&quot;))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-concat-15">
    <description>Evaluation of concat function with argument set to &quot;%$&quot;,#@!&quot; </description>
    <created by="Carmelo Montanez" on="2005-08-11"/>
    <test>fn:concat(&quot;%$&quot;,&quot;#@!&quot;)</test>
    <result-string>xs:string(&quot;%$#@!&quot;)</result-string>
    <result>
      <assert-string-value>%$#@!</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concat-16">
    <description>Evaluation of concat function with argument set to &quot;concat&quot;,&quot;concat&quot; </description>
    <created by="Carmelo Montanez" on="2005-08-11"/>
    <test>fn:concat(&quot;concat&quot;,&quot;concat&quot;)</test>
    <result-string>xs:string(&quot;concatconcat&quot;)</result-string>
    <result>
      <assert-string-value>concatconcat</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-concat-17">
    <description>Evaluation of concat function as part of a boolean expression </description>
    <created by="Carmelo Montanez" on="2005-08-11"/>
    <test>fn:concat(&quot;abc&quot;,&quot;abc&quot;) and fn:concat(&quot;abc&quot;,&quot;abc&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case covers="named-function-ref" name="fn-concat-18">
    <description>Can't have a function item as an argument to concat </description>
    <created by="Michael Kay" on="2011-06-24"/>
    <modified by="Michael Kay" change="see bug 14904" on="2012-05-17"/>
    <dependency type="feature" value="higherOrderFunctions"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>fn:concat(&quot;abc&quot;,&quot;abc&quot;, fn:concat#3)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOTY0013&quot;))</result-string>
    <result>
      <error code="FOTY0013"/>
    </result>
  </test-case>
  <test-case name="K-ConcatFunc-1">
    <description> A test whose essence is: `concat()`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>concat()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-ConcatFunc-2">
    <description> A test whose essence is: `concat(&quot;a string&quot;)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>concat(&quot;a string&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-ConcatFunc-3">
    <description> A test whose essence is: `concat(&quot;ab&quot;, &quot;c&quot;) eq &quot;abc&quot;`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>concat(&quot;ab&quot;, &quot;c&quot;) eq &quot;abc&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-ConcatFunc-4">
    <description> A test whose essence is: `concat(&quot;ab&quot;, &quot;c&quot;) instance of xs:string`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>concat(&quot;ab&quot;, &quot;c&quot;) instance of xs:string</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-ConcatFunc-5">
    <description> A test whose essence is: `concat((), ()) instance of xs:string`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>concat((), ()) instance of xs:string</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-ConcatFunc-6">
    <description> A test whose essence is: `concat((), ()) eq &quot;&quot;`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>concat((), ()) eq &quot;&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-ConcatFunc-7">
    <description> A test whose essence is: `concat('a', 'b', 'c', (), 'd', 'e', 'f', 'g', 'h', ' ', 'i', 'j', 'k l') eq &quot;abcdefgh ijk l&quot;`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>concat('a', 'b', 'c', (), 'd', 'e', 'f', 'g', 'h', ' ', 'i', 'j', 'k l') eq &quot;abcdefgh ijk l&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-ConcatFunc-8">
    <description> A test whose essence is: `concat(1, 2, 3) eq &quot;123&quot;`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>concat(1, 2, 3) eq &quot;123&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-ConcatFunc-9">
    <description> A test whose essence is: `concat(1, &quot;2&quot;, 3) eq &quot;123&quot;`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>concat(1, &quot;2&quot;, 3) eq &quot;123&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-ConcatFunc-1">
    <description> Invalid amount of arguments to fn:concat(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>concat((&quot;a&quot;, &quot;b&quot;), &quot;c&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K2-ConcatFunc-2">
    <description> Invalid amount of arguments to fn:concat(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>concat(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, (&quot;a&quot;, &quot;b&quot;), &quot;c&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K2-ConcatFunc-3">
    <description> Invalid arguments to fn:concat(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>concat(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;c&quot;, (&quot;a&quot;, &quot;b&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="cbcl-concat-001">
    <description> test fn:boolean(fn:concat()) where concat returns empty string </description>
    <created by="Tim Mills" on="2008-04-11"/>
    <test>fn:boolean(fn:concat('', ''))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
</test-set>