<?xml version="1.0" encoding="UTF-8"?>
<test-set name="fn-tokenize" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">
  <description>Tests the fn:tokenize() function</description>
  <link document="http://www.w3.org/TR/xpath-functions-30/" idref="func-tokenize" type="spec"/>
  <test-case name="fn-tokenize-1">
    <description> Evaluation of tokenize function where pattern matches the zero length string. Given on example 3 for this function in the Func and Ops specs. </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize(&quot;abba&quot;, &quot;.?&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORX0003&quot;))</result-string>
    <result>
      <error code="FORX0003"/>
    </result>
  </test-case>
  <test-case name="fn-tokenize-2">
    <description> Evaluation of tokenize function whith an invalid value for the flags </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize(&quot;The cat sat on the mat&quot;, &quot;\s+&quot;, &quot;t&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORX0001&quot;))</result-string>
    <result>
      <error code="FORX0001"/>
    </result>
  </test-case>
  <test-case name="fn-tokenize-3">
    <description> Evaluation of tokenize function with pattern set to &quot;\s+&quot; as per example 1 for this functions from the Func and Ops specs. </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize(&quot;The cat sat on the mat&quot;, &quot;\s+&quot;)</test>
    <result-string>xs:string(&quot;The cat sat on the mat&quot;)</result-string>
    <result>
      <assert-string-value>The cat sat on the mat</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-tokenize-4">
    <description> Evaluation of tokenize function with pattern set to &quot;\s*&quot; as per example 2 for this functions from the Func and Ops specs. </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize(&quot;1, 15, 24, 50&quot;, &quot;,\s*&quot;)</test>
    <result-string>xs:string(&quot;1 15 24 50&quot;)</result-string>
    <result>
      <assert-string-value>1 15 24 50</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-tokenize-5">
    <description> Evaluation of tokenize function with pattern set to &quot;\s*br\s*&quot; and flag set to &quot;i&quot; as per example 4 for this functions from the Func and Ops specs. </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>
      <![CDATA[fn:tokenize("Some unparsed <br> HTML <BR> text", "\s*<br>\s*", "i")]]>
    </test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;Some unparsed&quot;, &quot;HTML&quot;, &quot;text&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-6">
    <description> Evaluation of tokenize function with pattern with flags arguments set to empty string. </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>
      <![CDATA[fn:tokenize("Some unparsed <br> HTML <BR> text", "\s*<br>\s*", "")]]>
    </test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;Some unparsed&quot;, &quot;HTML BR text&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-7">
    <description> Evaluation of tokenize function with $input set to empty sequence Uses fn:count to avoid empty file. </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:count(fn:tokenize((), &quot;\s+&quot;))</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-8">
    <description> Evaluation of tokenize function with $input set to zero length string. Uses fn:count to avoid empty file. </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:count(fn:tokenize(&quot;&quot;, &quot;\s+&quot;))</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-9">
    <description> Evaluation of tokenize function with two patterms matching the input string. </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>string-join(fn:tokenize(&quot;abracadabra&quot;, &quot;(ab)|(a)&quot;), '#')</test>
    <result-string>xs:string(&quot;#r#c#d#r#&quot;)</result-string>
    <result>
      <assert-string-value>#r#c#d#r#</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-tokenize-10">
    <description> Evaluation of tokenize function with pattern that does not match the input string. </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize(&quot;abracadabra&quot;, &quot;ww&quot;)</test>
    <result-string>xs:string(&quot;abracadabra&quot;)</result-string>
    <result>
      <assert-string-value>abracadabra</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-tokenize-11">
    <description> Evaluation of tokenize function with pattern set to &quot;^a&quot;. </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize(&quot;abracadabra&quot;, &quot;^a&quot;)</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;&quot;, &quot;bracadabra&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-12">
    <description> Evaluation of tokenize function with pattern set to &quot;\^&quot;. </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize(&quot;abracadabra^abracadabra&quot;, &quot;\^&quot;)</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;abracadabra&quot;, &quot;abracadabra&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-13">
    <description> Evaluation of tokenize function with pattern set to &quot;\?&quot; for an input string that contains &quot;?&quot;. </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize(&quot;abracadabra?abracadabra&quot;, &quot;\?&quot;)</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;abracadabra&quot;, &quot;abracadabra&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-14">
    <description> Evaluation of tokenize function with pattern set to &quot;\*&quot; for an input string that contains &quot;*&quot;. </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize(&quot;abracadabra*abracadabra&quot;, &quot;\*&quot;)</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;abracadabra&quot;, &quot;abracadabra&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-15">
    <description> Evaluation of tokenize function with pattern set to &quot;\+&quot; for an input string that contains &quot;+&quot;. </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize(&quot;abracadabra+abracadabra&quot;, &quot;\+&quot;)</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;abracadabra&quot;, &quot;abracadabra&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-16">
    <description> Evaluation of tokenize function with pattern set to &quot;\{&quot; for an input string that contains &quot;}&quot;. </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize(&quot;abracadabra{abracadabra&quot;, &quot;\{&quot;)</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;abracadabra&quot;, &quot;abracadabra&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-17">
    <description> Evaluation of tokenize function with pattern set to &quot;\}&quot; for an input string that contains &quot;}&quot;. </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize(&quot;abracadabra}abracadabra&quot;, &quot;\}&quot;)</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;abracadabra&quot;, &quot;abracadabra&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-18">
    <description> Evaluation of tokenize function with pattern set to &quot;\(&quot; for an input string that contains &quot;(&quot;. </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize(&quot;abracadabra(abracadabra&quot;, &quot;\(&quot;)</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;abracadabra&quot;, &quot;abracadabra&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-19">
    <description> Evaluation of tokenize function with pattern set to &quot;\)&quot; for an input string that contains &quot;)&quot;. </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize(&quot;abracadabra)abracadabra&quot;, &quot;\)&quot;)</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;abracadabra&quot;, &quot;abracadabra&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-20">
    <description> Evaluation of tokenize function with pattern set to &quot;\[&quot; for an input string that contains &quot;[&quot;. </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize(&quot;abracadabra[abracadabra&quot;, &quot;\[&quot;)</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;abracadabra&quot;, &quot;abracadabra&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-21">
    <description> Evaluation of tokenize function with pattern set to &quot;\]&quot; for an input string that contains &quot;]&quot;. </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize(&quot;abracadabra]abracadabra&quot;, &quot;\]&quot;)</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;abracadabra&quot;, &quot;abracadabra&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-22">
    <description> Evaluation of tokenize function with pattern set to &quot;\-&quot; for an input string that contains &quot;-&quot;. </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize(&quot;abracadabra-abracadabra&quot;, &quot;\-&quot;)</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;abracadabra&quot;, &quot;abracadabra&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-23">
    <description> Evaluation of tokenize function with pattern set to &quot;\.&quot; for an input string that contains &quot;.&quot;. </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize(&quot;abracadabra.abracadabra&quot;, &quot;\.&quot;)</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;abracadabra&quot;, &quot;abracadabra&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-24">
    <description> Evaluation of tokenize function with pattern set to &quot;\|&quot; for an input string that contains &quot;|&quot;. </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize(&quot;abracadabra|abracadabra&quot;, &quot;\|&quot;)</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;abracadabra&quot;, &quot;abracadabra&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-25">
    <description> Evaluation of tokenize function with pattern set to &quot;\\&quot; for an input string that contains &quot;\&quot;. </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize(&quot;abracadabra\abracadabra&quot;, &quot;\\&quot;)</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;abracadabra&quot;, &quot;abracadabra&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-26">
    <description> Evaluation of tokenize function with pattern set to &quot;\t&quot; for an input string that contains the tab character. </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize(&quot;abracadabra	abracadabra&quot;, &quot;\t&quot;)</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;abracadabra&quot;, &quot;abracadabra&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-27">
    <description> Evaluation of tokenize function with pattern set to &quot;\n&quot; for an input string that contains the newline character. </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize(&quot;abracadabra
abracadabra&quot;, &quot;\n&quot;)</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;abracadabra&quot;, &quot;abracadabra&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-28">
    <description> Evaluation of tokenize function with pattern set to &quot;aa{1}&quot; (exact quantity) for an input string that contains the &quot;aa&quot; string. </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize(&quot;abracadabraabracadabra&quot;, &quot;aa{1}&quot;)</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;abracadabr&quot;, &quot;bracadabra&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-29">
    <description> Evaluation of tokenize function with pattern set to &quot;aa{1,}&quot; (min quantity) for an input string that contains the &quot;aa&quot; string twice. </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize(&quot;abracadabraabracadabraabracadabra&quot;, &quot;aa{1,}&quot;)</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;abracadabr&quot;, &quot;bracadabr&quot;, &quot;bracadabra&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-30">
    <description> Evaluation of tokenize function with pattern set to &quot;aa{1,2}&quot; (range quantity) for an input string that contains the &quot;aa&quot; string twice. </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize(&quot;abracadabraabracadabraabracadabra&quot;, &quot;aa{1,2}&quot;)</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;abracadabr&quot;, &quot;bracadabr&quot;, &quot;bracadabra&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case covers="regex-q-flag" name="fn-tokenize-31">
    <description> Evaluation of tokenize function with regex 'q' flag. </description>
    <created by="Michael Kay" on="2012-07-09"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>fn:tokenize(&quot;abc.def.gh.ijk&quot;, &quot;.&quot;, &quot;q&quot;)</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;abc&quot;, &quot;def&quot;, &quot;gh&quot;, &quot;ijk&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case covers="regex-q-flag" name="fn-tokenize-32">
    <description> Evaluation of tokenize function with regex 'q' and &quot;i&quot; flags. </description>
    <created by="Michael Kay" on="2012-07-09"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>fn:tokenize(&quot;A.BRA.CADA.BRA&quot;, &quot;a.&quot;, &quot;qi&quot;)</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;&quot;, &quot;BR&quot;, &quot;CAD&quot;, &quot;BRA&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case covers="regex-non-capturing" name="fn-tokenize-33">
    <description> Evaluation of tokenize function with non-capturing group in the regex. </description>
    <created by="Michael Kay" on="2012-07-12"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>fn:tokenize(&quot;ABRACADABRA&quot;, &quot;A(?:B)&quot;)</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;&quot;, &quot;RACAD&quot;, &quot;RA&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case covers="regex-dot-matching-cr" name="fn-tokenize-34">
    <description> &quot;.&quot; does NOT match CR in default mode</description>
    <created by="Tim Mills" on="2012-09-25"/>
    <test>fn:tokenize(concat('Mary', codepoints-to-string(13), 'Jones'), 'y.J')</test>
    <result-string>xs:string(&quot;concat('Mary', codepoints-to-string(13), 'Jones')&quot;)</result-string>
    <result>
      <assert-eq>concat('Mary', codepoints-to-string(13), 'Jones')</assert-eq>
    </result>
  </test-case>
  <test-case covers="regex-dot-matching-cr" name="fn-tokenize-35">
    <description> &quot;.&quot; does match CR in dot-all mode</description>
    <created by="Tim Mills" on="2012-09-25"/>
    <test>fn:tokenize(concat('Mary', codepoints-to-string(13), 'Jones'), 'y.J', 's')</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;Mar&quot;, &quot;ones&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-36">
    <description> Regex must be one that does not match a zero-length string </description>
    <created by="Michael Kay" on="2013-05-03"/>
    <test>fn:tokenize(concat('Mary', codepoints-to-string(10), 'Jones'), '^', 'm')</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORX0003&quot;))</result-string>
    <result>
      <error code="FORX0003"/>
    </result>
  </test-case>
  <test-case name="fn-tokenize-37">
    <description> Regex must be one that does not match a zero-length string </description>
    <created by="Michael Kay" on="2013-05-03"/>
    <test>fn:tokenize(concat('Mary', codepoints-to-string(10), 'Jones'), '$', 'm')</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORX0003&quot;))</result-string>
    <result>
      <error code="FORX0003"/>
    </result>
  </test-case>
  <test-case name="fn-tokenize-38">
    <description> Regex must be one that does not match a zero-length string </description>
    <created by="Michael Kay" on="2013-05-03"/>
    <test>fn:tokenize(concat('Mary', codepoints-to-string(10), 'Jones'), '^[\s]*$', 'm')</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORX0003&quot;))</result-string>
    <result>
      <error code="FORX0003"/>
    </result>
  </test-case>
  <test-case name="K-TokenizeFunc-1">
    <description> fn:tokenize takes at least two arguments. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>tokenize(&quot;input&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-TokenizeFunc-2">
    <description> The pattern can't be the empty sequence. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>tokenize(&quot;input&quot;, ())</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-TokenizeFunc-3">
    <description> The flags argument cannot contain whitespace. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>tokenize(&quot;input&quot;, &quot;pattern&quot;, &quot; &quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORX0001&quot;))</result-string>
    <result>
      <error code="FORX0001"/>
    </result>
  </test-case>
  <test-case name="K-TokenizeFunc-4">
    <description> The flags argument cannot contain 'X'. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>tokenize(&quot;input&quot;, &quot;pattern&quot;, &quot;X&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORX0001&quot;))</result-string>
    <result>
      <error code="FORX0001"/>
    </result>
  </test-case>
  <test-case name="K-TokenizeFunc-5">
    <description> Only three arguments are accepted. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>tokenize(&quot;input&quot;, &quot;pattern&quot;, &quot;&quot;, ())</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K2-TokenizeFunc-1">
    <description> fn:tokenize with a positional predicate. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:tokenize((&quot;abracadabra&quot;, current-time())[1] treat as xs:string, &quot;(ab)|(a)&quot;)[last()] eq &quot;&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-TokenizeFunc-2">
    <description> fn:tokenize with a positional predicate. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(fn:tokenize((&quot;abracadabra&quot;, current-time())[1] treat as xs:string, &quot;(ab)|(a)&quot;)[last() + 1])</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-TokenizeFunc-3">
    <description> fn:tokenize with a positional predicate(#2). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:tokenize((&quot;abracadabra&quot;, current-time())[1] treat as xs:string, &quot;(ab)|(a)&quot;)[last() - 1]</test>
    <result-string>xs:string(&quot;r&quot;)</result-string>
    <result>
      <assert-string-value>r</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-TokenizeFunc-4">
    <description> fn:tokenize with a positional predicate(#3). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:tokenize((&quot;abracadabra&quot;, current-time())[1] treat as xs:string, &quot;(ab)|(a)&quot;)[last() - 3]</test>
    <result-string>xs:string(&quot;c&quot;)</result-string>
    <result>
      <assert-string-value>c</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-TokenizeFunc-5">
    <description> Tokenize a sequence of words. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal(fn:tokenize(&quot;The cat sat on the mat&quot;, &quot;\s+&quot;), (&quot;The&quot;, &quot;cat&quot;, &quot;sat&quot;, &quot;on&quot;, &quot;the&quot;, &quot;mat&quot;)), count(fn:tokenize(&quot;The cat sat on the mat&quot;, &quot;\s+&quot;)), count(fn:tokenize(&quot; The cat sat on the mat &quot;, &quot;\s+&quot;)), fn:tokenize(&quot;The cat sat on the mat&quot;, &quot;\s+&quot;)</test>
    <result-string>xs:string(&quot;true 6 8 The cat sat on the mat&quot;)</result-string>
    <result>
      <assert-string-value>true 6 8 The cat sat on the mat</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-TokenizeFunc-6">
    <description> A regexp that some Java versions have trouble with. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>replace('APXterms6', '\w{3}\d*([^TKR0-9]+).*$', '$1')</test>
    <result-string>xs:string(&quot;terms&quot;)</result-string>
    <result>
      <assert-string-value>terms</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-TokenizeFunc-7">
    <description> Tokenize on a single whitespace. </description>
    <created by="Frans Englich" on="2008-05-08"/>
    <test>count(tokenize(&quot;a b&quot;, &quot; &quot;)), count(tokenize(&quot;a b&quot;, &quot;\s&quot;)), string-join(tokenize(&quot;a b&quot;, &quot; &quot;), '|'), string-join(tokenize(&quot;a b&quot;, &quot;\s&quot;), '|'), tokenize(&quot;a b&quot;, &quot; &quot;), tokenize(&quot;a b&quot;, &quot;\s&quot;)</test>
    <result-string>xs:string(&quot;2 2 a|b a|b a b a b&quot;)</result-string>
    <result>
      <assert-string-value>2 2 a|b a|b a b a b</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-fn-tokenize-001">
    <description> Test boolean on tokenize </description>
    <created by="Nick Jones" on="2008-06-12"/>
    <test>
      for $x in xs:string(zero-or-one((1 to 10)[. mod 2 = -1])) return tokenize($x,',')
      </test>
    <result-string>xs:string(&quot;&quot;)</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="cbcl-fn-tokenize-002">
    <description> Test invalid regex expression </description>
    <created by="Nick Jones" on="2008-06-13"/>
    <test>
      tokenize(string-join(for $x in (1 to 10)[. mod 2 = 0] return string($x),','),'[')
      </test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORX0002&quot;))</result-string>
    <result>
      <error code="FORX0002"/>
    </result>
  </test-case>
  <test-case name="cbcl-fn-tokenize-003">
    <description> Test tokenize on empty string </description>
    <created by="Nick Jones" on="2008-06-13"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[
      tokenize(string-join(for $x in (1 to 10)[. mod 2 < 0] return string($x),','),',')
      ]]>
    </test>
    <result-string>xs:string(&quot;&quot;)</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
</test-set>