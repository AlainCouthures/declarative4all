<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="fn-id">
   <description>Tests for the id() function</description>
   <link type="spec" document="http://www.w3.org/TR/xpath-functions-30/" idref="func-id"/>
   
   <environment name="id-idref-dtd">
      <source role="." file="id/iddtd.xml">
         <description>A DTD validated xml file, that contains data for the ID/IDREF function tests.</description>
         <created by="Carmelo Montanez" on="2005-11-27"/>
      </source>
   </environment>
   
   <environment name="UsingXMLId">
      <source role="." file="id/UsingXMLId.xml">
         <description>This happens to be a schema, but its interest is in the xml:id attributes.</description>
         <created by="Frans Englich" on="2000-01-01"/>
      </source>
   </environment>
   
   <environment name="XMLIdMany">
      <source role="." file="id/XMLIDMany.xml">
         <description>A file with many xml:id attributes, some of them invalid.</description>
         <created by="Frans Englich" on="2000-01-01"/>
      </source>
   </environment>
   
   <environment name="auction-xq">
      <source role="." file="../docs/auction.xml">
         <description>Data for the the XML Query NS use cases: version for XQuery tests</description>
         <created by="XQuery WG" on="2005-02-11"/>
      </source>
   </environment>        
   
   <test-case name="fn-id-1">
      <description>Evaluation of fn:id with incorrect arity.</description>
      <created by="Carmelo Montanez" on="2005-11-27"/>
      <environment ref="id-idref-dtd"/>
      <test>fn:id("argument 1", / ,"Argument 3")</test>
      <result>
         <error code="XPST0017"/>
      </result>
   </test-case>

   <test-case name="fn-id-2">
      <description>Evaluation of fn:id with context item not a node.</description>
      <created by="Carmelo Montanez" on="2005-11-27"/>
      <modified by="O'Neil Delpratt" on="2011-09-08" change="error code" />
      <test>(1 to 5)[fn:id("argument1")]</test>
      <result>
            <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="fn-id-3">
      <description>Evaluation of fn:id with second argument not a node.</description>
      <created by="Carmelo Montanez" on="2005-11-27"/>
      <test>fn:id("argument1", "A")</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="fn-id-4">
      <description>Evaluation of fn:id with node not being from document where root is the document element.</description>
      <created by="Carmelo Montanez" on="2005-11-27"/>
      <modified by="Michael Kay" on="2011-08-10" change="remove dependency on special fots:copy() function"/>
      <environment ref="auction-xq"/>
      <module uri="http://www.w3.org/QT3/copy" file="id/copy.xq"/>
      <dependency type="spec" value="XQ10+"/>
      <test>
        import module namespace copy="http://www.w3.org/QT3/copy";
        let $var := copy:copy(/*) return fn:id("argument1", $var)
      </test>
      <result>
         <error code="FODC0001"/>
      </result>
   </test-case>

   <test-case name="fn-id-dtd-5">
      <description>Evaluation of fn:id with given IDREF matching a single element.</description>
      <created by="Carmelo Montanez" on="2006-06-23"/>
      <modified by="Michael Kay" on="2013-05-01" change="add dependency as per bug 21414"/>
      <environment ref="id-idref-dtd"/>
      <dependency type="feature" value="infoset-dtd"/>
      <test>fn:id("id1", /IDS[1])/string(@anId)</test>
      <result>
         <assert-string-value>id1</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-id-dtd-6">
      <description>Evaluation of fn:id with given IDREF not matching a single element.</description>
      <created by="Carmelo Montanez" on="2006-06-23"/>
      <environment ref="id-idref-dtd"/>
      <test>fn:count(fn:id("nomatchingid", /IDS[1]))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-id-dtd-7">
      <description>Evaluation of fn:id with given IDREF matching same element.</description>
      <created by="Carmelo Montanez" on="2006-06-23"/>
      <modified by="Michael Kay" on="2013-05-01" change="add dependency as per bug 21414"/>
      <environment ref="id-idref-dtd"/>
      <dependency type="feature" value="infoset-dtd"/>
      <test>fn:id("id2 id2", /IDS[1])/name()</test>
      <result>
         <assert-string-value>elementwithid-2</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-id-dtd-8">
      <description>Evaluation of fn:id with multiple IDREF matching multiple elements.</description>
      <created by="Carmelo Montanez" on="2006-06-23"/>
      <modified by="Michael Kay" on="2013-05-01" change="add dependency as per bug 21414"/>
      <environment ref="id-idref-dtd"/>
      <dependency type="feature" value="infoset-dtd"/>
      <test>fn:id("id1 id2", /IDS[1])/name()</test>
      <result>
         <assert-string-value>elementwithid-1 elementwithid-2</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-id-dtd-9">
      <description>Evaluation of fn:id with multiple IDREF, but only one matching one element.</description>
      <created by="Carmelo Montanez" on="2006-06-23"/>
      <modified by="Michael Kay" on="2013-05-01" change="add dependency as per bug 21414"/>
      <environment ref="id-idref-dtd"/>
      <dependency type="feature" value="infoset-dtd"/>
      <test>fn:id("id1 nomatching", /IDS[1])/name()</test>
      <result>
         <assert-string-value>elementwithid-1</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-id-dtd-10">
      <description>Evaluation of fn:id with multiple IDREF, but none matching one element.</description>
      <created by="Carmelo Montanez" on="2006-06-23"/>
      <environment ref="id-idref-dtd"/>
      <test>fn:count(fn:id("nomatching1 nomatching2", /IDS[1]))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-id-dtd-11">
      <description>Evaluation of fn:id with IDREF set to empty string.</description>
      <created by="Carmelo Montanez" on="2006-06-23"/>
      <environment ref="id-idref-dtd"/>
      <test>fn:id("", /IDS[1])</test>
      <result>
         <assert-empty/>
      </result>
   </test-case>

   <test-case name="fn-id-dtd-12">
      <description>Evaluation of fn:id function that give first argument as argument to fn:substring.</description>
      <created by="Carmelo Montanez" on="2006-06-23"/>
      <modified by="Michael Kay" on="2013-05-01" change="add dependency as per bug 21414"/>
      <environment ref="id-idref-dtd"/>
      <dependency type="feature" value="infoset-dtd"/>
      <test>fn:id(fn:substring("1id3",2), /IDS[1])/name()</test>
      <result>
         <assert-string-value>elementwithid-3</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-id-dtd-13">
      <description>Evaluation of fn:id, where the same IDREF makes reference to the same element.</description>
      <created by="Carmelo Montanez" on="2006-06-23"/>
      <modified by="Michael Kay" on="2013-05-01" change="add dependency as per bug 21414"/>
      <environment ref="id-idref-dtd"/>
      <dependency type="feature" value="infoset-dtd"/>
      <test>fn:id("id4", /IDS[1])/name()</test>
      <result>
         <assert-string-value>elementwithid-4</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-id-dtd-14">
      <description>Evaluation of fn:id for which the given IDREF contains a prefix.</description>
      <created by="Carmelo Montanez" on="2006-06-23"/>
      <environment ref="id-idref-dtd"/>
      <test>fn:id("p1:id5", /IDS[1])</test>
      <result>
         <assert-empty/>
      </result>
   </test-case>

   <test-case name="fn-id-dtd-15">
      <description>Evaluation of fn:id for which IDREF list have the same value for all its members.</description>
      <created by="Carmelo Montanez" on="2006-06-23"/>
      <environment ref="id-idref-dtd"/>
      <dependency type="feature" value="infoset-dtd"/>
      <test>fn:id("id1 id1", /IDS[1])/name()</test>
      <result>
         <assert-string-value>elementwithid-1</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-id-dtd-16">
      <description>Evaluation of fn:id for which IDREF list have the same value for all its members but different case.</description>
      <created by="Carmelo Montanez" on="2006-06-23"/>
      <modified by="Michael Kay" on="2013-05-01" change="add dependency as per bug 21414"/>
      <environment ref="id-idref-dtd"/>
      <dependency type="feature" value="infoset-dtd"/>
      <test>fn:id("id1 ID1", /IDS[1])/name()</test>
      <result>
         <assert-string-value>elementwithid-1</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-id-dtd-17">
      <description>Evaluation of fn:id for which IDREF uses the fn lower case function.</description>
      <created by="Carmelo Montanez" on="2006-06-23"/>
      <environment ref="id-idref-dtd"/>
      <dependency type="feature" value="infoset-dtd"/>
      <test>fn:id(fn:lower-case("ID1"), /IDS[1])/name()</test>
      <result>
         <assert-string-value>elementwithid-1</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-id-dtd-18">
      <description>Evaluation of fn:id for which IDREF uses the fn:upper-case function.</description>
      <created by="Carmelo Montanez" on="2006-06-23"/>
      <modified by="Michael Kay" on="2013-05-01" change="add dependency as per bug 21414"/>
      <environment ref="id-idref-dtd"/>
      <dependency type="feature" value="infoset-dtd"/>
      <test>fn:id(fn:upper-case("id5"), /IDS[1])/name()</test>
      <result>
         <assert-string-value>elementwithid-6</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-id-dtd-19">
      <description>Evaluation of fn:id for which $arg uses the fn:concat function.</description>
      <created by="Carmelo Montanez" on="2006-06-23"/>
      <modified by="Michael Kay" on="2013-05-01" change="add dependency as per bug 21414"/>
      <environment ref="id-idref-dtd"/>
      <dependency type="feature" value="infoset-dtd"/>
      <test>fn:id(fn:concat("i","d1"), /IDS[1])/name()</test>
      <result>
         <assert-string-value>elementwithid-1</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-id-dtd-20">
      <description>Evaluation of fn:id for which $arg uses the xs:string function.</description>
      <created by="Carmelo Montanez" on="2006-06-23"/>
      <modified by="Michael Kay" on="2013-05-01" change="add dependency as per bug 21414"/>
      <environment ref="id-idref-dtd"/>
      <dependency type="feature" value="infoset-dtd"/>
      <test>fn:id(xs:string("id1"), /IDS[1])/name()</test>
      <result>
         <assert-string-value>elementwithid-1</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-id-dtd-21">
      <description>Evaluation of fn:id for which $arg uses the fn:string-join function.</description>
      <created by="Carmelo Montanez" on="2006-06-23"/>
      <modified by="Michael Kay" on="2013-05-01" change="add dependency as per bug 21414"/>
      <environment ref="id-idref-dtd"/>
      <dependency type="feature" value="infoset-dtd"/>
      <test>fn:id(fn:string-join(("id","1"),""), /IDS[1])/name()</test>
      <result>
         <assert-string-value>elementwithid-1</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-id-22">
      <description>Evaluation of fn:id with context item not a node and second argument set to ".".</description>
      <created by="Carmelo Montanez" on="2006-02-08"/>
      <modified by="O'Neil Delpratt" on="2011-09-08" change="error code" />
      <test>(1 to 5)[ fn:id("argument1",.)]</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="fn-id-dtd-23">
      <description>Evaluation of fn:id together with declare ordering.</description>
      <created by="Carmelo Montanez" on="2006-06-23"/>
      <modified by="Michael Kay" on="2013-05-01" change="add dependency as per bug 21414"/>
      <environment ref="id-idref-dtd"/>
      <dependency type="spec" value="XQ10+"/>
      <dependency type="feature" value="infoset-dtd"/>
      <test>declare ordering ordered; fn:id("id1 id2", /IDS[1])/name()</test>
      <result>
         <assert-string-value>elementwithid-1 elementwithid-2</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-SeqIDFunc-1">
      <description>Wrong arguments to fn:id().</description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>id((), ())</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="K2-SeqIDFunc-2">
      <description>Wrong arguments to fn:id().</description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>(1, 2, 3)[id("ncname", .)]</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="K2-SeqIDFunc-3">
      <description>Wrong arguments to fn:id().</description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>(1, 2, 3)[id("ncname")]</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="K2-SeqIDFunc-4">
      <description>Use an invalid target node.</description>
      <created by="Frans Englich" on="2007-11-26"/>
      <modified by="Michael Kay" on="2011-08-10" change="remove dependency on special fots:copy() function"/>
      <environment ref="auction-xq"/>
      <module uri="http://www.w3.org/QT3/copy" file="id/copy.xq"/>
      <dependency type="spec" value="XQ10+"/>
      <test>
        import module namespace copy="http://www.w3.org/QT3/copy";
        id("id", copy:copy((//comment())[1]))
      </test>
      <result>
         <error code="FODC0001"/>
      </result>
   </test-case>

   <test-case name="K2-SeqIDFunc-5">
      <description>Use an invalid target node.</description>
      <created by="Frans Englich" on="2007-11-26"/>
      <modified by="Michael Kay" on="2011-08-10" change="remove dependency on special fots:copy() function"/>
      <environment ref="auction-xq"/>
      <module uri="http://www.w3.org/QT3/copy" file="id/copy.xq"/>
      <dependency type="spec" value="XQ10+"/>
      <test>
        import module namespace copy="http://www.w3.org/QT3/copy";
        id("id", copy:copy((//processing-instruction())[1]))
      </test>
      <result>
         <error code="FODC0001"/>
      </result>
   </test-case>

   <test-case name="K2-SeqIDFunc-6">
      <description>Use an invalid target node</description>
      <created by="Frans Englich" on="2007-11-26"/>
      <modified by="Michael Kay" on="2011-08-10" change="remove dependency on special fots:copy() function"/>
      <environment ref="auction-xq"/>
      <module uri="http://www.w3.org/QT3/copy" file="id/copy.xq"/>
      <dependency type="spec" value="XQ10+"/>
      <test>
        import module namespace copy="http://www.w3.org/QT3/copy";
        id("id", copy:copy(/*))
      </test>
      <result>
         <error code="FODC0001"/>
      </result>
   </test-case>

   <test-case name="K2-SeqIDFunc-7">
      <description>Use an invalid target node</description>
      <created by="Frans Englich" on="2007-11-26"/>
      <modified by="Michael Kay" on="2011-08-10" change="remove dependency on special fots:copy() function"/>
      <environment ref="auction-xq"/>
      <module uri="http://www.w3.org/QT3/copy" file="id/copy.xq"/>
      <dependency type="spec" value="XQ10+"/>
      <test>
        import module namespace copy="http://www.w3.org/QT3/copy";
        id("id", (copy:copy(/*)//*:NegativeComments)[last()])
      </test>
      <result>
         <error code="FODC0001"/>
      </result>
   </test-case>

   <test-case name="K2-SeqIDFunc-8">
      <description>Use an invalid target node.</description>
      <created by="Frans Englich" on="2007-11-26"/>
      <modified by="Michael Kay" on="2011-08-10" change="remove dependency on special fots:copy() function"/>
      <modified by="O'Neil Delpratt" on="2011-09-08" change="reverted back to the original test-case in XQTS"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $i := <e><e/><e/><e/><e/><e/><e/><e/><b xml:id="foo"/><e/></e>return id("foo", $i)]]></test>
      <result>
         <error code="FODC0001"/>
      </result>
   </test-case>

   <test-case name="K2-SeqIDFunc-9">
      <description>Use a constructed document node with xml:id.</description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $i := document {<e> <e/> <e/> <e/> <e/> <e/> <e/> <e/> <b xml:id="foo"/> <e/> </e>} return id("foo", $i)/name()]]></test>
      <result>
         <assert-string-value>b</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-SeqIDFunc-10">
      <description>Select elements with xml:id, and trigger node sorting.</description>
      <created by="Frans Englich" on="2008-01-15"/>
      <environment ref="UsingXMLId"/>
      <test>for $i in id(("short", "positiveInteger")) return $i/@name/string()</test>
      <result>
         <assert-string-value>positiveInteger short</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-SeqIDFunc-11">
      <description>Select elements with xml:id, and trigger node sorting.</description>
      <created by="Frans Englich" on="2008-01-15"/>
      <modified by="Michael Kay" on="2013-05-01" change="add dependency as per bug 21414"/>
      <modified by="Michael Kay" on="2013-05-21" change="remove dependency as per bug 21414"/>
      <environment ref="UsingXMLId"/>
      <test>id(("short"), //xs:element/@name[. = "positiveInteger"])/@name</test>
      <result>
         <assert-string-value>short</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-SeqIDFunc-12">
      <description>Select elements with xml:id, trigger node sorting, and use an invalid NCName in the lookup.</description>
      <created by="Frans Englich" on="2008-01-15"/>
      <modified by="Michael Kay" on="2013-05-01" change="add dependency as per bug 21414"/>
      <modified by="Michael Kay" on="2013-05-21" change="remove dependency as per bug 21414"/>
      <environment ref="UsingXMLId"/>
      <test>id((".", "short", "123"), //xs:element/@name[. = "positiveInteger"])/@name</test>
      <result>
         <assert-string-value>short</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-SeqIDFunc-13">
      <description>Use on xml:id with input strings which contains many IDREFs, and invalid ones too.</description>
      <created by="Frans Englich" on="2008-11-13"/>
      <environment ref="XMLIdMany"/>
      <test>fn:id(//b/@ref)/data(exactly-one(@*))</test>
      <result>
         <assert-string-value>a b c d e f i</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-SeqIDFunc-14">
      <description>Select elements with xml:id, and trigger node sorting: space-separated id list</description>
      <created by="Michael Kay" on="2011-07-01"/>
      <environment ref="UsingXMLId"/>
      <test>for $i in id(("short positiveInteger")) return $i/@name/string()</test>
      <result>
         <assert-string-value>positiveInteger short</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-SeqIDFunc-15">
      <description>Use on xml:id with input strings which contains many IDREFs, and invalid ones too; tab-separated id list</description>
      <created by="Michael Kay" on="2011-07-01"/>
      <environment ref="XMLIdMany"/>
      <test>fn:id(string-join(reverse(//b/@ref), '	'))/data(exactly-one(@*))</test>
      <result>
         <assert-string-value>a b c d e f i</assert-string-value>
      </result>
   </test-case>
   
   
   <test-case name="cbcl-id-001">
      <description> test fn:id on the empty sequence </description>
      <created by="Tim Mills" on="2008-04-15"/>      
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
      	declare function local:generate($arg as xs:integer?) as xs:string* { if ($arg = 0) then () else 'id1', 'id2' }; 
      	let $doc := document { <root /> } return fn:empty( fn:id( local:generate(0), $doc) )
      ]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   

   <test-case name="cbcl-id-002">
      <description> test fn:id on the empty sequence </description>
      <created by="Tim Mills" on="2008-04-15"/>     
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
      	let $doc := document { <root /> } return fn:empty( fn:id( (), $doc) )
      ]]></test>
      <result>
         <any-of>
            <assert-true/>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>
   

   <test-case name="cbcl-id-003">
      <description> test fn:id in an axis expression </description>
      <created by="Tim Mills" on="2008-04-15"/>      
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
      	declare function local:generate($arg as xs:integer?) as xs:string* { if ($arg = 0) then () else 'id1', 'id2' }; 
      	let $doc := document { <root /> } return fn:empty( $doc/fn:id( local:generate(0)) )
      ]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
</test-set>