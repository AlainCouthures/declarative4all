<?xml version="1.0" encoding="UTF-8"?>
<test-set name="fn-document-uri" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">
  <description>Tests for the document-uri() function</description>
  <link document="http://www.w3.org/TR/xpath-functions-30/" idref="func-document-uri" type="spec"/>
  <environment name="TopMany">
    <source file="../prod/AxisStep/TopMany.xml" role=".">
      <description>Like TreeCompass, but with comments and PIs off the root. PI targets vary.
            All text nodes must have non-whitespace characters.</description>
      <created by="David Marston" on="2003-03-25"/>
    </source>
  </environment>
  <environment name="works-mod-uri">
    <source file="../docs/works-mod.xml" role="." uri="http://www.w3.org/fots/docs/works-mod.xml">
      <description>Data for various NIST tests (abbreviated, unabbreviated syntax)</description>
      <created by="Carmelo Montanez" on="2005-03-04"/>
    </source>
    <param as="xs:string" declared="false" name="uri" select="'http://www.w3.org/fots/docs/works-mod.xml'"/>
  </environment>
  <test-case name="fn-document-uri-1">
    <description> Evaluation of fn:document-uri with incorrect arity. </description>
    <created by="Carmelo Montanez" on="2005-11-28"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[fn:document-uri(<element1>contenty</element1>,"Argument 2")]]>
    </test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="fn-document-uri-2">
    <description> Evaluation of fn:document-uri with argument set to empty sequence. Use the fn:count to avoid the empty file. </description>
    <created by="Carmelo Montanez" on="2005-11-28"/>
    <dependency type="spec" value="XQ10+"/>
    <test>fn:count(fn:document-uri(()))</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-document-uri-3">
    <description> Evaluation of fn:document-uri with argument set to a computed element node. Use the fn:count to avoid the empty file. </description>
    <created by="Carmelo Montanez" on="2005-11-28"/>
    <dependency type="spec" value="XQ10+"/>
    <test>fn:count(fn:document-uri(element anElement {&quot;some content&quot;}))</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-document-uri-4">
    <description> Evaluation of fn:document-uri with argument set to a computed comment node. Use the fn:count to avoid the empty file. </description>
    <created by="Carmelo Montanez" on="2005-11-28"/>
    <dependency type="spec" value="XQ10+"/>
    <test>fn:count(fn:document-uri(comment {&quot;a comment node&quot;}))</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-document-uri-5">
    <description> Evaluation of fn:document-uri with argument set to a computed text node. Use the fn:count to avoid the empty file. </description>
    <created by="Carmelo Montanez" on="2005-11-28"/>
    <dependency type="spec" value="XQ10+"/>
    <test>fn:count(fn:document-uri(text {&quot;a text node&quot;}))</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-document-uri-6">
    <description> Evaluation of fn:document-uri with argument set to a computed attribute node. Use the fn:count to avoid the empty file. </description>
    <created by="Carmelo Montanez" on="2005-11-28"/>
    <dependency type="spec" value="XQ10+"/>
    <test>fn:count(fn:document-uri(attribute anAttribute {&quot;an attribute node&quot;}))</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-document-uri-7">
    <description> Evaluation of fn:document-uri with argument set to a computed PI node. Use the fn:count to avoid the empty file. </description>
    <created by="Carmelo Montanez" on="2005-11-28"/>
    <dependency type="spec" value="XQ10+"/>
    <test>fn:count(fn:document-uri(processing-instruction {&quot;PITarget&quot;} {&quot;PIContent&quot;}))</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-document-uri-8">
    <description> Evaluation of fn:document-uri with argument set to a directly constructed PI node. Use the fn:count to avoid the empty file. </description>
    <created by="Carmelo Montanez" on="2005-11-28"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[fn:count(fn:document-uri(<?audio-output beep?>))]]>
    </test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-document-uri-9">
    <description> Evaluation of fn:document-uri with argument set to a directly constructed comment node. Use the fn:count to avoid the empty file. </description>
    <created by="Carmelo Montanez" on="2005-11-28"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[fn:count(fn:document-uri(<!-- A comment node -->))]]>
    </test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-document-uri-10">
    <description> Evaluation of fn:document-uri with argument set to a directly constructed element node. Use the fn:count to avoid the empty file. </description>
    <created by="Carmelo Montanez" on="2005-11-28"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[fn:count(fn:document-uri(<anElement>element content</anElement>))]]>
    </test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-document-uri-11">
    <description> Evaluation of fn:document-uri with argument set to a directly constructed document node. Use the fn:count to avoid the empty file. </description>
    <created by="Carmelo Montanez" on="2005-11-28"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[fn:count(fn:document-uri(document {<anElement>element content</anElement>}))]]>
    </test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-document-uri-12">
    <description> Evaluation of fn:document-uri with argument set to document node from xml file. </description>
    <created by="Carmelo Montanez" on="2005-11-28"/>
    <modified by="O'Neil Delpratt" change="environment ref uri for source file" on="2011-09-08"/>
    <environment ref="works-mod-uri"/>
    <test>fn:contains(fn:document-uri(fn:doc($uri)),$uri) or (fn:document-uri(fn:doc($uri)) = &quot;&quot;)</test>
    <result-string/>
    <result>
      <any-of>
        <assert-true/>
        <assert-false/>
      </any-of>
    </result>
  </test-case>
  <test-case name="fn-document-uri-13">
    <description> Evaluation of fn:document-uri with argument set to element node from xml file. Use fn:count to avoid empty file. </description>
    <created by="Carmelo Montanez" on="2005-11-28"/>
    <environment ref="works-mod"/>
    <test>fn:count(fn:document-uri(/works[1]/employee[1]))</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-document-uri-14">
    <description> Evaluation of fn:document-uri with argument set to an attribute node from xml file. Use fn:count to avoid empty file. </description>
    <created by="Carmelo Montanez" on="2005-11-28"/>
    <environment ref="works-mod"/>
    <test>fn:count(fn:document-uri(/works[1]/employee[1]/@name))</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-document-uri-15">
    <description> Evaluation of fn:document-uri used as argument to an fn:string-length function. </description>
    <created by="Carmelo Montanez" on="2005-11-28"/>
    <environment ref="works-mod-uri"/>
    <test>fn:string-length(fn:string(fn:contains(fn:document-uri(fn:doc($uri)),$uri)))</test>
    <result-string/>
    <result>
      <any-of>
        <assert-eq>4</assert-eq>
        <assert-eq>5</assert-eq>
      </any-of>
    </result>
  </test-case>
  <test-case name="fn-document-uri-16">
    <description> Evaluation of fn:document-uri used as argument to an fn:upper-case function. </description>
    <created by="Carmelo Montanez" on="2005-11-28"/>
    <environment ref="works-mod-uri"/>
    <test>fn:upper-case(fn:string(fn:contains(fn:document-uri(fn:doc($uri)),$uri)))</test>
    <result-string/>
    <result>
      <any-of>
        <assert-string-value>TRUE</assert-string-value>
        <assert-string-value>FALSE</assert-string-value>
      </any-of>
    </result>
  </test-case>
  <test-case name="fn-document-uri-17">
    <description> Evaluation of fn:document-uri used as argument to an fn:lower-case function. </description>
    <created by="Carmelo Montanez" on="2005-11-28"/>
    <environment ref="works-mod-uri"/>
    <test>fn:lower-case(fn:string(fn:contains(fn:document-uri(fn:doc($uri)),$uri)))</test>
    <result-string/>
    <result>
      <any-of>
        <assert-string-value>true</assert-string-value>
        <assert-string-value>false</assert-string-value>
      </any-of>
    </result>
  </test-case>
  <test-case name="fn-document-uri-18">
    <description> Evaluation of fn:document-uri used as argument to an fn:concat function. </description>
    <created by="Carmelo Montanez" on="2005-11-28"/>
    <modified by="O'Neil Delpratt" change="environment ref uri for source file" on="2011-09-08"/>
    <environment ref="works-mod-uri"/>
    <test>fn:concat(fn:string(fn:contains(fn:document-uri(fn:doc($uri)),$uri)),&quot; A String&quot;)</test>
    <result-string/>
    <result>
      <any-of>
        <assert-string-value>true A String</assert-string-value>
        <assert-string-value>false A String</assert-string-value>
      </any-of>
    </result>
  </test-case>
  <test-case name="fn-document-uri-19">
    <description>Evaluation of fn:document-uri used as argument to an fn:string-join function.</description>
    <created by="Carmelo Montanez" on="2005-11-28"/>
    <modified by="O'Neil Delpratt" change="environment ref uri for source file" on="2011-09-08"/>
    <environment ref="works-mod-uri"/>
    <test>fn:string-join((fn:string(fn:contains(fn:document-uri(fn:doc($uri)),$uri)),&quot; A String&quot;),&quot;&quot;)</test>
    <result-string/>
    <result>
      <any-of>
        <assert-string-value>true A String</assert-string-value>
        <assert-string-value>false A String</assert-string-value>
      </any-of>
    </result>
  </test-case>
  <test-case name="fn-document-uri-20">
    <description> Evaluation of fn:document-uri used as argument to an fn:substring-before function. </description>
    <created by="Carmelo Montanez" on="2005-11-28"/>
    <environment ref="works-mod"/>
    <test>fn:substring-before(fn:string(fn:contains(fn:document-uri(/),&quot;works-mod&quot;)),&quot;e&quot;)</test>
    <result-string>xs:string(&quot;tru&quot;)</result-string>
    <result>
      <assert-string-value>tru</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-document-uri-21">
    <description> Evaluation of fn:document-uri used as argument to an fn:substring-after function. Use string. </description>
    <created by="Carmelo Montanez" on="2005-11-28"/>
    <environment ref="works-mod"/>
    <test>fn:substring-after(fn:string(fn:contains(fn:document-uri(/),&quot;works-mod&quot;)),&quot;t&quot;)</test>
    <result-string>xs:string(&quot;rue&quot;)</result-string>
    <result>
      <assert-string-value>rue</assert-string-value>
    </result>
  </test-case>
  <test-case covers="fn-document-uri" name="fn-document-uri-22">
    <description> Evaluation of fn:document-uri#0 with context item set to a computed attribute node. </description>
    <created by="Tim Mills" on="2013-01-19"/>
    <dependency type="spec" value="XQ30+"/>
    <test>(attribute anAttribute {&quot;an attribute node&quot;})/document-uri()</test>
    <result-string>()</result-string>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case covers="fn-document-uri" name="fn-document-uri-23">
    <description> Evaluation of fn:document-uri#0 with context item set to a computed PI node. </description>
    <created by="Tim Mills" on="2013-01-19"/>
    <dependency type="spec" value="XQ30+"/>
    <test>(processing-instruction {&quot;PITarget&quot;} {&quot;PIContent&quot;})/document-uri()</test>
    <result-string>()</result-string>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case covers="fn-document-uri" name="fn-document-uri-24">
    <description> Evaluation of fn:document-uri#0 with context item set to a directly constructed PI node. </description>
    <created by="Tim Mills" on="2013-01-19"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      <![CDATA[(<?audio-output beep?>)/document-uri()]]>
    </test>
    <result-string>()</result-string>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case covers="fn-document-uri" name="fn-document-uri-25">
    <description> Evaluation of fn:document-uri#0 with context item set to a directly constructed comment node. </description>
    <created by="Tim Mills" on="2013-01-19"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      <![CDATA[(<!-- A comment node -->)/document-uri()]]>
    </test>
    <result-string>()</result-string>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case covers="fn-document-uri" name="fn-document-uri-26">
    <description> Evaluation of fn:document-uri#0 with context item set to a directly constructed element node. </description>
    <created by="Tim Mills" on="2013-01-19"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      <![CDATA[(<anElement>element content</anElement>)/document-uri()]]>
    </test>
    <result-string>()</result-string>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case covers="fn-document-uri" name="fn-document-uri-27">
    <description> Evaluation of fn:document-uri#0 with context item set to a directly constructed document node. </description>
    <created by="Tim Mills" on="2013-01-19"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      <![CDATA[(document {<anElement>element content</anElement>})/document-uri()]]>
    </test>
    <result-string>()</result-string>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case covers="fn-document-uri" name="fn-document-uri-28">
    <description> Evaluation of fn:document-uri#0 with context item set to document node from xml file. </description>
    <created by="Tim Mills" on="2013-01-19"/>
    <environment ref="works-mod-uri"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>fn:contains((fn:doc($uri))/document-uri(),$uri) or ((fn:doc($uri))/document-uri() = &quot;&quot;)</test>
    <result-string/>
    <result>
      <any-of>
        <assert-true/>
        <assert-false/>
      </any-of>
    </result>
  </test-case>
  <test-case covers="fn-document-uri" name="fn-document-uri-29">
    <description> Evaluation of fn:document-uri#0 with context item set to element node from xml file. Use fn:count to avoid empty file. </description>
    <created by="Tim Mills" on="2013-01-19"/>
    <environment ref="works-mod"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>fn:count((/works[1]/employee[1])/document-uri())</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case covers="fn-document-uri" name="fn-document-uri-30">
    <description> Evaluation of fn:document-uri#0 with context item set to an attribute node from xml file. Use fn:count to avoid empty file. </description>
    <created by="Tim Mills" on="2013-01-19"/>
    <environment ref="works-mod"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>fn:count((/works[1]/employee[1]/@name)/document-uri())</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case covers="fn-document-uri" name="fn-document-uri-31">
    <description> Evaluation of fn:document-uri#0 used as argument to an fn:string-length function. </description>
    <created by="Tim Mills" on="2013-01-19"/>
    <environment ref="works-mod-uri"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>fn:string-length(fn:string(fn:contains((fn:doc($uri))/document-uri(),$uri)))</test>
    <result-string/>
    <result>
      <any-of>
        <assert-eq>4</assert-eq>
        <assert-eq>5</assert-eq>
      </any-of>
    </result>
  </test-case>
  <test-case covers="fn-document-uri" name="fn-document-uri-32">
    <description> Evaluation of fn:document-uri#0 used as argument to an fn:upper-case function. </description>
    <created by="Tim Mills" on="2013-01-19"/>
    <environment ref="works-mod-uri"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>fn:upper-case(fn:string(fn:contains((fn:doc($uri))/document-uri(),$uri)))</test>
    <result-string/>
    <result>
      <any-of>
        <assert-string-value>TRUE</assert-string-value>
        <assert-string-value>FALSE</assert-string-value>
      </any-of>
    </result>
  </test-case>
  <test-case covers="fn-document-uri" name="fn-document-uri-33">
    <description> Evaluation of fn:document-uri#0 used as argument to an fn:lower-case function. </description>
    <created by="Tim Mills" on="2013-01-19"/>
    <environment ref="works-mod-uri"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>fn:lower-case(fn:string(fn:contains((fn:doc($uri))/document-uri(),$uri)))</test>
    <result-string/>
    <result>
      <any-of>
        <assert-string-value>true</assert-string-value>
        <assert-string-value>false</assert-string-value>
      </any-of>
    </result>
  </test-case>
  <test-case covers="fn-document-uri" name="fn-document-uri-34">
    <description> Evaluation of fn:document-uri#0 used as argument to an fn:concat function. </description>
    <created by="Tim Mills" on="2013-01-19"/>
    <environment ref="works-mod-uri"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>fn:concat(fn:string(fn:contains((fn:doc($uri))/document-uri(),$uri)),&quot; A String&quot;)</test>
    <result-string/>
    <result>
      <any-of>
        <assert-string-value>true A String</assert-string-value>
        <assert-string-value>false A String</assert-string-value>
      </any-of>
    </result>
  </test-case>
  <test-case covers="fn-document-uri" name="fn-document-uri-35">
    <description>Evaluation of fn:document-uri#0 used as argument to an fn:string-join function.</description>
    <created by="Tim Mills" on="2013-01-19"/>
    <environment ref="works-mod-uri"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>fn:string-join((fn:string(fn:contains((fn:doc($uri))/document-uri(),$uri)),&quot; A String&quot;),&quot;&quot;)</test>
    <result-string/>
    <result>
      <any-of>
        <assert-string-value>true A String</assert-string-value>
        <assert-string-value>false A String</assert-string-value>
      </any-of>
    </result>
  </test-case>
  <test-case covers="fn-document-uri" name="fn-document-uri-36">
    <description> Evaluation of fn:document-uri#0 used as argument to an fn:substring-before function. </description>
    <created by="Tim Mills" on="2013-01-19"/>
    <environment ref="works-mod"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>fn:substring-before(fn:string(fn:contains((/)/document-uri(),&quot;works-mod&quot;)),&quot;e&quot;)</test>
    <result-string>xs:string(&quot;tru&quot;)</result-string>
    <result>
      <assert-string-value>tru</assert-string-value>
    </result>
  </test-case>
  <test-case covers="fn-document-uri" name="fn-document-uri-37">
    <description> Evaluation of fn:document-uri#0 used as argument to an fn:substring-after function. Use string. </description>
    <created by="Tim Mills" on="2013-01-19"/>
    <environment ref="works-mod"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>fn:substring-after(fn:string(fn:contains((/)/document-uri(),&quot;works-mod&quot;)),&quot;t&quot;)</test>
    <result-string>xs:string(&quot;rue&quot;)</result-string>
    <result>
      <assert-string-value>rue</assert-string-value>
    </result>
  </test-case>
  <test-case name="K-DocumentURIFunc-1">
    <description> A test whose essence is: `document-uri((), &quot;wrong param&quot;)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>document-uri((), &quot;wrong param&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case covers="fn-document-uri" name="K-DocumentURIFunc-2">
    <description> A test whose essence is: `document-uri()`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O'Neil Delpratt" change="Bug fix related to bug #14854: Added dependency" on="2012-05-22"/>
    <dependency type="spec" value="XP20 XQ10"/>
    <test>document-uri()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case covers="fn-document-uri" name="K-DocumentURIFunc-2a">
    <description> A test whose essence is: `document-uri()`. </description>
    <created by="O'Neil Delpratt" on="2012-05-22"/>
    <environment ref="works-mod-uri"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>ends-with(document-uri(),&quot;works-mod.xml&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case covers="fn-document-uri" name="K-DocumentURIFunc-2b">
    <description> A test whose essence is: `document-uri()`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ30+"/>
    <test>document-uri()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPDY0002&quot;))</result-string>
    <result>
      <error code="XPDY0002"/>
    </result>
  </test-case>
  <test-case name="K-DocumentURIFunc-3">
    <description> A test whose essence is: `empty(document-uri(()))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(document-uri(()))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-DocumentURIFunc-1">
    <description> Invoke on a comment node. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[empty(document-uri(<!-- comment -->))]]>
    </test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-DocumentURIFunc-2">
    <description> Invoke on an attribute node. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>empty(document-uri(attribute name {&quot;content&quot;}))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-DocumentURIFunc-3">
    <description> Invoke on a processing instruction node. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[empty(document-uri(<?target data?>))]]>
    </test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-DocumentURIFunc-4">
    <description> Invoke on a processing instruction node. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>empty(document-uri(processing-instruction name {123}))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-DocumentURIFunc-5">
    <description> Invoke on a text node. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>empty(document-uri(text {123}))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-DocumentURIFunc-6">
    <description> Invoke on a single element node. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[empty(document-uri(<elem/>))]]>
    </test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-DocumentURIFunc-7">
    <description> Invoke on a single attribute node. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[empty(document-uri(<elem attr="f"/>/@attr))]]>
    </test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-DocumentURIFunc-8">
    <description> Invoke on a single document node. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>empty(document-uri(document {1}))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-DocumentURIFunc-9">
    <description> Invoke on a tree document node. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $i := document { <e> <a/> <a/> <a/> <b/> <b/> <a/> <a/> </e> } return empty(document-uri($i))]]>
    </test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-DocumentURIFunc-10">
    <description> Invoke on a tree document node with fn:root(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $i := document { <e> <a/> <a/> <a/> <b/> <b/> <a/> <a/> </e> } return empty(document-uri(root(($i/a/b)[1])))]]>
    </test>
    <result-string/>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K2-DocumentURIFunc-11">
    <description> Ensure that the return value of document-uri() is of correct type. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <environment ref="TopMany"/>
    <dependency type="spec" value="XQ10+"/>
    <test>for $i in (1, document-uri(.), 3) return typeswitch($i) case xs:anyURI return &quot;xs:anyURI&quot; case xs:integer return &quot;int&quot; default return &quot;FAILURE&quot;</test>
    <result-string>xs:string(&quot;int xs:anyURI int&quot;)</result-string>
    <result>
      <assert-string-value>int xs:anyURI int</assert-string-value>
    </result>
  </test-case>
  <test-case covers="fn-document-uri" name="fn-document-uri-0-ok">
    <description>fn:document-uri with zero arguments given context via a predicate - predicate should be () and hense false in all cases except the document root</description>
    <created by="Liam Quin" on="2012-10-14"/>
    <environment ref="works-mod-uri"/>
    <dependency type="spec" value="XQ30+"/>
    <test>empty(//works[fn:document-uri()])</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
</test-set>