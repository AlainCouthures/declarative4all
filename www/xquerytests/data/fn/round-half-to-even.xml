<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="fn-round-half-to-even">
   <description>Tests for the round-half-to-even() function</description>
   <link type="spec" document="http://www.w3.org/TR/xpath-functions-30/"
         idref="func-round-half-to-even"/>

   <test-case name="fn-round-half-to-evenint1args-1">
      <description> Evaluates The "round-half-to-even" function with the arguments set as follows: $arg = xs:int(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:round-half-to-even(xs:int("-2147483648"))</test>
      <result>
         <assert-eq>-2147483648</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-evenint1args-2">
      <description> Evaluates The "round-half-to-even" function with the arguments set as follows: $arg = xs:int(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:round-half-to-even(xs:int("-1873914410"))</test>
      <result>
         <assert-eq>-1873914410</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-evenint1args-3">
      <description> Evaluates The "round-half-to-even" function with the arguments set as follows: $arg = xs:int(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:round-half-to-even(xs:int("2147483647"))</test>
      <result>
         <assert-eq>2147483647</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-evenintg1args-1">
      <description> Evaluates The "round-half-to-even" function with the arguments set as follows: $arg = xs:integer(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:round-half-to-even(xs:integer("-999999999999999999"))</test>
      <result>
         <assert-eq>-999999999999999999</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-evenintg1args-2">
      <description> Evaluates The "round-half-to-even" function with the arguments set as follows: $arg = xs:integer(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:round-half-to-even(xs:integer("830993497117024304"))</test>
      <result>
         <assert-eq>830993497117024304</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-evenintg1args-3">
      <description> Evaluates The "round-half-to-even" function with the arguments set as follows: $arg = xs:integer(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:round-half-to-even(xs:integer("999999999999999999"))</test>
      <result>
         <assert-eq>999999999999999999</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-evendec1args-1">
      <description> Evaluates The "round-half-to-even" function with the arguments set as follows: $arg = xs:decimal(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:round-half-to-even(xs:decimal("-999999999999999999"))</test>
      <result>
         <assert-eq>-999999999999999999</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-evendec1args-2">
      <description> Evaluates The "round-half-to-even" function with the arguments set as follows: $arg = xs:decimal(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:round-half-to-even(xs:decimal("617375191608514839"))</test>
      <result>
         <assert-eq>617375191608514839</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-evendec1args-3">
      <description> Evaluates The "round-half-to-even" function with the arguments set as follows: $arg = xs:decimal(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:round-half-to-even(xs:decimal("999999999999999999"))</test>
      <result>
         <assert-eq>999999999999999999</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-evendbl1args-1">
      <description> Evaluates The "round-half-to-even" function with the arguments set as follows: $arg = xs:double(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:round-half-to-even(xs:double("-1.7976931348623157E308"))</test>
      <result>
         <any-of>
            <assert-eq>-1.7976931348623157E308</assert-eq>
            <error code="FOCA0001"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-evendbl1args-2">
      <description> Evaluates The "round-half-to-even" function with the arguments set as follows: $arg = xs:double(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:round-half-to-even(xs:double("0"))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-evendbl1args-3">
      <description> Evaluates The "round-half-to-even" function with the arguments set as follows: $arg = xs:double(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:round-half-to-even(xs:double("1.7976931348623157E308"))</test>
      <result>
         <any-of>
            <assert-eq>1.7976931348623157E308</assert-eq>
            <error code="FOCA0001"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-evenflt1args-1">
      <description> Evaluates The "round-half-to-even" function with the arguments set as follows: $arg = xs:float(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:round-half-to-even(xs:float("-3.4028235E38"))</test>
      <result>
         <any-of>
            <assert-eq>xs:float("-3.4028235E38")</assert-eq>
            <error code="FOCA0001"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-evenflt1args-2">
      <description> Evaluates The "round-half-to-even" function with the arguments set as follows: $arg = xs:float(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:round-half-to-even(xs:float("0"))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-evenflt1args-3">
      <description> Evaluates The "round-half-to-even" function with the arguments set as follows: $arg = xs:float(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:round-half-to-even(xs:float("3.4028235E38"))</test>
      <result>
         <any-of>
            <assert-eq>xs:float("3.4028235E38")</assert-eq>
            <error code="FOCA0001"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-evenlng1args-1">
      <description> Evaluates The "round-half-to-even" function with the arguments set as follows: $arg = xs:long(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:round-half-to-even(xs:long("-92233720368547758"))</test>
      <result>
         <assert-eq>-92233720368547758</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-evenlng1args-2">
      <description> Evaluates The "round-half-to-even" function with the arguments set as follows: $arg = xs:long(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:round-half-to-even(xs:long("-47175562203048468"))</test>
      <result>
         <assert-eq>-47175562203048468</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-evenlng1args-3">
      <description> Evaluates The "round-half-to-even" function with the arguments set as follows: $arg = xs:long(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:round-half-to-even(xs:long("92233720368547758"))</test>
      <result>
         <assert-eq>92233720368547758</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-evenusht1args-1">
      <description> Evaluates The "round-half-to-even" function with the arguments set as follows: $arg = xs:unsignedShort(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:round-half-to-even(xs:unsignedShort("0"))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-evenusht1args-2">
      <description> Evaluates The "round-half-to-even" function with the arguments set as follows: $arg = xs:unsignedShort(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:round-half-to-even(xs:unsignedShort("44633"))</test>
      <result>
         <assert-eq>44633</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-evenusht1args-3">
      <description> Evaluates The "round-half-to-even" function with the arguments set as follows: $arg = xs:unsignedShort(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:round-half-to-even(xs:unsignedShort("65535"))</test>
      <result>
         <assert-eq>65535</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-evennint1args-1">
      <description> Evaluates The "round-half-to-even" function with the arguments set as follows: $arg = xs:negativeInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:round-half-to-even(xs:negativeInteger("-999999999999999999"))</test>
      <result>
         <assert-eq>-999999999999999999</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-evennint1args-2">
      <description> Evaluates The "round-half-to-even" function with the arguments set as follows: $arg = xs:negativeInteger(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:round-half-to-even(xs:negativeInteger("-297014075999096793"))</test>
      <result>
         <assert-eq>-297014075999096793</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-evennint1args-3">
      <description> Evaluates The "round-half-to-even" function with the arguments set as follows: $arg = xs:negativeInteger(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:round-half-to-even(xs:negativeInteger("-1"))</test>
      <result>
         <assert-eq>-1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-evenpint1args-1">
      <description> Evaluates The "round-half-to-even" function with the arguments set as follows: $arg = xs:positiveInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:round-half-to-even(xs:positiveInteger("1"))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-evenpint1args-2">
      <description> Evaluates The "round-half-to-even" function with the arguments set as follows: $arg = xs:positiveInteger(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:round-half-to-even(xs:positiveInteger("52704602390610033"))</test>
      <result>
         <assert-eq>52704602390610033</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-evenpint1args-3">
      <description> Evaluates The "round-half-to-even" function with the arguments set as follows: $arg = xs:positiveInteger(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:round-half-to-even(xs:positiveInteger("999999999999999999"))</test>
      <result>
         <assert-eq>999999999999999999</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-evenulng1args-1">
      <description> Evaluates The "round-half-to-even" function with the arguments set as follows: $arg = xs:unsignedLong(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:round-half-to-even(xs:unsignedLong("0"))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-evenulng1args-2">
      <description> Evaluates The "round-half-to-even" function with the arguments set as follows: $arg = xs:unsignedLong(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:round-half-to-even(xs:unsignedLong("130747108607674654"))</test>
      <result>
         <assert-eq>130747108607674654</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-evenulng1args-3">
      <description> Evaluates The "round-half-to-even" function with the arguments set as follows: $arg = xs:unsignedLong(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:round-half-to-even(xs:unsignedLong("184467440737095516"))</test>
      <result>
         <assert-eq>184467440737095516</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-evennpi1args-1">
      <description> Evaluates The "round-half-to-even" function with the arguments set as follows: $arg = xs:nonPositiveInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:round-half-to-even(xs:nonPositiveInteger("-999999999999999999"))</test>
      <result>
         <assert-eq>-999999999999999999</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-evennpi1args-2">
      <description> Evaluates The "round-half-to-even" function with the arguments set as follows: $arg = xs:nonPositiveInteger(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:round-half-to-even(xs:nonPositiveInteger("-475688437271870490"))</test>
      <result>
         <assert-eq>-475688437271870490</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-evennpi1args-3">
      <description> Evaluates The "round-half-to-even" function with the arguments set as follows: $arg = xs:nonPositiveInteger(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:round-half-to-even(xs:nonPositiveInteger("0"))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-evennni1args-1">
      <description> Evaluates The "round-half-to-even" function with the arguments set as follows: $arg = xs:nonNegativeInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:round-half-to-even(xs:nonNegativeInteger("0"))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-evennni1args-2">
      <description> Evaluates The "round-half-to-even" function with the arguments set as follows: $arg = xs:nonNegativeInteger(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:round-half-to-even(xs:nonNegativeInteger("303884545991464527"))</test>
      <result>
         <assert-eq>303884545991464527</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-evennni1args-3">
      <description> Evaluates The "round-half-to-even" function with the arguments set as follows: $arg = xs:nonNegativeInteger(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:round-half-to-even(xs:nonNegativeInteger("999999999999999999"))</test>
      <result>
         <assert-eq>999999999999999999</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-evensht1args-1">
      <description> Evaluates The "round-half-to-even" function with the arguments set as follows: $arg = xs:short(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:round-half-to-even(xs:short("-32768"))</test>
      <result>
         <assert-eq>-32768</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-evensht1args-2">
      <description> Evaluates The "round-half-to-even" function with the arguments set as follows: $arg = xs:short(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:round-half-to-even(xs:short("-5324"))</test>
      <result>
         <assert-eq>-5324</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-evensht1args-3">
      <description> Evaluates The "round-half-to-even" function with the arguments set as follows: $arg = xs:short(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:round-half-to-even(xs:short("32767"))</test>
      <result>
         <assert-eq>32767</assert-eq>
      </result>
   </test-case>

   <test-case name="K-RoundEvenFunc-1">
      <description> A test whose essence is: `round-half-to-even()`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>round-half-to-even()</test>
      <result>
         <error code="XPST0017"/>
      </result>
   </test-case>

   <test-case name="K-RoundEvenFunc-2">
      <description> A test whose essence is: `round-half-to-even(1.1, 3, "wrong param")`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>round-half-to-even(1.1, 3, "wrong param")</test>
      <result>
         <error code="XPST0017"/>
      </result>
   </test-case>

   <test-case name="K-RoundEvenFunc-3">
      <description> A test whose essence is: `empty(round-half-to-even(()))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(round-half-to-even(()))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-RoundEvenFunc-4">
      <description> A test whose essence is: `empty(round-half-to-even((), 3))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(round-half-to-even((), 3))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-RoundEvenFunc-5">
      <description> A test whose essence is: `round-half-to-even("a string")`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>round-half-to-even("a string")</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="K2-RoundEvenFunc-1">
      <description> Invoked fn:round-half-to-even() on 1. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>round-half-to-even(1) eq 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-RoundEvenFunc-2">
      <description> Invoked fn:round-half-to-even() on 1.0. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>round-half-to-even(1.0) eq 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-RoundEvenFunc-3">
      <description> Invoked fn:round-half-to-even() on 0.5. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>round-half-to-even(0.5) eq 0</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-RoundEvenFunc-4">
      <description> Invoked fn:round-half-to-even() on 1.5. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>round-half-to-even(1.5) eq 2</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-RoundEvenFunc-5">
      <description> Invoked fn:round-half-to-even() on 2.5. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>round-half-to-even(2.5) eq 2</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-RoundEvenFunc-6">
      <description> Invoked fn:round-half-to-even() on a large double. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>round-half-to-even(3.567812E+3, 2) eq 3567.81E0</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-RoundEvenFunc-7">
      <description> Invoked fn:round-half-to-even() on a large double with 2 in precision. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>round-half-to-even(4.7564E-3, 2) eq 0.0E0</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-RoundEvenFunc-8">
      <description> Invoked fn:round-half-to-even() on a large double with -2 in precision. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>round-half-to-even(35612.25, -2) eq 35600</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-RoundEvenFunc-9">
      <description> Invoked fn:round-half-to-even() on xs:double -0. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>round-half-to-even(xs:double("-0"))</test>
      <result>
         <assert-eq>-0</assert-eq>
      </result>
   </test-case>

   <test-case name="K2-RoundEvenFunc-10">
      <description> Invoked fn:round-half-to-even() on xs:float -0. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>round-half-to-even(xs:float("-0"))</test>
      <result>
         <assert-eq>-0</assert-eq>
      </result>
   </test-case>

   <test-case name="K2-RoundEvenFunc-11">
      <description> Invoked fn:round-half-to-even() on xs:double NaN. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>round-half-to-even(xs:double("NaN"))</test>
      <result>
         <assert-string-value>NaN</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-RoundEvenFunc-12">
      <description> Invoked fn:round-half-to-even() on xs:float NaN. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>round-half-to-even(xs:float("NaN"))</test>
      <result>
         <assert-string-value>NaN</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-RoundEvenFunc-13">
      <description> Invoked fn:round-half-to-even() on xs:double -INF. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>round-half-to-even(xs:double("-INF"))</test>
      <result>
         <assert-string-value>-INF</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-RoundEvenFunc-14">
      <description> Invoked fn:round-half-to-even() on xs:float -INF. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>round-half-to-even(xs:float("-INF"))</test>
      <result>
         <assert-string-value>-INF</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-RoundEvenFunc-15">
      <description> Invoked fn:round-half-to-even() on xs:double INF. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>round-half-to-even(xs:double("INF"))</test>
      <result>
         <assert-string-value>INF</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-RoundEvenFunc-16">
      <description> Invoked fn:round-half-to-even() on xs:float INF. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>round-half-to-even(xs:float("INF"))</test>
      <result>
         <assert-string-value>INF</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-RoundEvenFunc-17">
      <description> Ensure the return type is properly inferred for unsignedShort. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>round-half-to-even(xs:unsignedShort("0")) instance of xs:unsignedShort</test>
      <result>
         <any-of>
            <assert-false/>
            <assert-true/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-RoundEvenFunc-18">
      <description> Ensure the return type is properly inferred for unsignedLong. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>round-half-to-even(xs:unsignedLong("0")) instance of xs:unsignedLong</test>
      <result>
         <any-of>
            <assert-false/>
            <assert-true/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-RoundEvenFunc-19">
      <description> Ensure the return type is properly inferred for unsignedInt. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>round-half-to-even(xs:unsignedInt("0")) instance of xs:unsignedInt</test>
      <result>
         <any-of>
            <assert-false/>
            <assert-true/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-RoundEvenFunc-20">
      <description> Ensure the return type is properly inferred for unsignedByte. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>round-half-to-even(xs:unsignedByte("0")) instance of xs:unsignedByte</test>
      <result>
         <any-of>
            <assert-false/>
            <assert-true/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-RoundEvenFunc-21">
      <description> Ensure the return type is properly inferred for positiveInteger. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>round-half-to-even(xs:positiveInteger("1")) instance of xs:positiveInteger</test>
      <result>
         <any-of>
            <assert-false/>
            <assert-true/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-RoundEvenFunc-22">
      <description> Ensure the return type is properly inferred for nonPositiveInteger. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>round-half-to-even(xs:nonPositiveInteger("0")) instance of xs:nonPositiveInteger</test>
      <result>
         <any-of>
            <assert-false/>
            <assert-true/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-RoundEvenFunc-23">
      <description> Ensure the return type is properly inferred for nonNegativeInteger. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>round-half-to-even(xs:nonNegativeInteger("0")) instance of xs:nonNegativeInteger</test>
      <result>
         <any-of>
            <assert-false/>
            <assert-true/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-RoundEvenFunc-24">
      <description> Ensure the return type is properly inferred for negativeInteger. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>round-half-to-even(xs:negativeInteger("-1")) instance of xs:negativeInteger</test>
      <result>
         <any-of>
            <assert-false/>
            <assert-true/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-RoundEvenFunc-25">
      <description> Ensure the return type is properly inferred for long. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>round-half-to-even(xs:long("0")) instance of xs:long</test>
      <result>
         <any-of>
            <assert-false/>
            <assert-true/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-RoundEvenFunc-26">
      <description> Ensure the return type is properly inferred for int. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>round-half-to-even(xs:int("0")) instance of xs:int</test>
      <result>
         <any-of>
            <assert-false/>
            <assert-true/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-RoundEvenFunc-27">
      <description> Ensure the return type is properly inferred for short. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>round-half-to-even(xs:short("0")) instance of xs:short</test>
      <result>
         <any-of>
            <assert-false/>
            <assert-true/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K2-RoundEvenFunc-28">
      <description> Ensure the return type is properly inferred for byte. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>round-half-to-even(xs:byte("0")) instance of xs:byte</test>
      <result>
         <any-of>
            <assert-false/>
            <assert-true/>
         </any-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-even-1">
      <description> check dynamic type of fn:round-half-to-even on argument of union of numeric types. </description>
      <created by="Oliver Hallam" on="2010-03-15"/>
      <test>for $x in (1, xs:decimal(2), xs:float(3), xs:double(4)) 
            return if ((round-half-to-even($x)) instance of xs:integer) then "integer" 
           else if ((round-half-to-even($x)) instance of xs:decimal) then "decimal" 
           else if ((round-half-to-even($x)) instance of xs:float) then "float"
           else if ((round-half-to-even($x)) instance of xs:double) then "double" 
           else error()</test>
      <result>
         <assert-deep-eq>"integer", "decimal", "float", "double"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-even-2">
      <description> check dynamic type of fn:round-half-to-even on argument of union of numeric types. </description>
      <created by="Oliver Hallam" on="2010-03-15"/>
      <test>for $x in (1, xs:decimal(2), xs:float(3), xs:double(4)) 
            return if ((round-half-to-even($x,1)) instance of xs:integer) then "integer" 
           else if ((round-half-to-even($x,1)) instance of xs:decimal) then "decimal" 
           else if ((round-half-to-even($x,1)) instance of xs:float) then "float"
           else if ((round-half-to-even($x,1)) instance of xs:double) then "double" 
           else error()</test>
      <result>
         <assert-deep-eq>"integer", "decimal", "float", "double"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-even-3">
      <description>Positive second argument - decimal</description>
      <created by="Michael Kay" on="2011-07-01"/>
      <test>round-half-to-even(1.234567, 2)</test>
      <result>
         <all-of>
            <assert-eq>1.23</assert-eq>
            <assert-type>xs:decimal</assert-type>
         </all-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-even-4">
      <description>Positive second argument - double</description>
      <created by="Michael Kay" on="2011-07-01"/>
      <test>round-half-to-even(1.000005e0, 2)</test>
      <result>
         <all-of>
            <assert-eq>1</assert-eq>
            <assert-type>xs:double</assert-type>
         </all-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-even-5">
      <description>Positive second argument - float</description>
      <created by="Michael Kay" on="2011-07-01"/>
      <test>round-half-to-even(xs:float('1.000005e0'), 2)</test>
      <result>
         <all-of>
            <assert-eq>1</assert-eq>
            <assert-type>xs:float</assert-type>
         </all-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-even-6">
      <description>Negative second argument - decimal</description>
      <created by="Michael Kay" on="2011-07-01"/>
      <test>round-half-to-even(4561.234567, -2)</test>
      <result>
         <all-of>
            <assert-eq>4600</assert-eq>
            <assert-type>xs:decimal</assert-type>
         </all-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-even-7">
      <description>Negative second argument - double</description>
      <created by="Michael Kay" on="2011-07-01"/>
      <test>round-half-to-even(4561.000005e0, -2)</test>
      <result>
         <all-of>
            <assert-eq>4600</assert-eq>
            <assert-type>xs:double</assert-type>
         </all-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-even-8">
      <description>Negative second argument - float</description>
      <created by="Michael Kay" on="2011-07-01"/>
      <test>round-half-to-even(xs:float('4561.000005e0'), -2)</test>
      <result>
         <all-of>
            <assert-eq>4600</assert-eq>
            <assert-type>xs:float</assert-type>
         </all-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-even-9">
      <description>Negative second argument - integer</description>
      <created by="Michael Kay" on="2011-07-01"/>
      <test>round-half-to-even(4561234567, -2)</test>
      <result>
         <all-of>
            <assert-eq>4561234600</assert-eq>
            <assert-type>xs:integer</assert-type>
         </all-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-even-10">
      <description>Zero second argument - decimal</description>
      <created by="Michael Kay" on="2011-07-01"/>
      <test>round-half-to-even(4561.234567, 0)</test>
      <result>
         <all-of>
            <assert-eq>4561</assert-eq>
            <assert-type>xs:decimal</assert-type>
         </all-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-even-11">
      <description>Zero second argument - double</description>
      <created by="Michael Kay" on="2011-07-01"/>
      <test>round-half-to-even(4561.000005e0, 0)</test>
      <result>
         <all-of>
            <assert-eq>4561</assert-eq>
            <assert-type>xs:double</assert-type>
         </all-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-even-12">
      <description>Zero second argument - float</description>
      <created by="Michael Kay" on="2011-07-01"/>
      <test>round-half-to-even(xs:float('4561.000005e0'), 0)</test>
      <result>
         <all-of>
            <assert-eq>4561</assert-eq>
            <assert-type>xs:float</assert-type>
         </all-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-even-13">
      <description>Zero second argument - integer</description>
      <created by="Michael Kay" on="2011-07-01"/>
      <test>round-half-to-even(4561234567, 0)</test>
      <result>
         <all-of>
            <assert-eq>4561234567</assert-eq>
            <assert-type>xs:integer</assert-type>
         </all-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-even-14">
      <description>Positive second argument - halfway case - float. The expected result is surprising; it arises because 0.05 is not exactly representable as an xs:float</description>
      <created by="Michael Kay" on="2011-07-01"/>
      <test>round-half-to-even(xs:float('0.05'), 1)</test>
      <result>
         <all-of>
            <assert-eq>0.1</assert-eq>
            <assert-type>xs:float</assert-type>
         </all-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-even-15">
      <description>Positive second argument - halfway case - float. The expected result is surprising; it arises because -0.05 is not exactly representable as an xs:float</description>
      <created by="Michael Kay" on="2011-07-01"/>
      <test>round-half-to-even(xs:float('-0.05'), 1)</test>
      <result>
         <all-of>
            <assert-eq>-0.1</assert-eq>
            <assert-type>xs:float</assert-type>
         </all-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-even-16">
      <description>Positive second argument - halfway case - float</description>
      <created by="Michael Kay" on="2011-07-01"/>
      <test>round-half-to-even(xs:float('3.75'), 1)</test>
      <result>
         <all-of>
            <assert-eq>3.8</assert-eq>
            <assert-type>xs:float</assert-type>
         </all-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-even-17">
      <description>Positive second argument - halfway case - decimal</description>
      <created by="Michael Kay" on="2011-07-01"/>
      <test>round-half-to-even(123.355, 2)</test>
      <result>
         <all-of>
            <assert-eq>123.36</assert-eq>
            <assert-type>xs:decimal</assert-type>
         </all-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-even-18">
      <description>Positive second argument - halfway case - decimal</description>
      <created by="Michael Kay" on="2011-07-01"/>
      <test>round-half-to-even(123.365, 2)</test>
      <result>
         <all-of>
            <assert-eq>123.36</assert-eq>
            <assert-type>xs:decimal</assert-type>
         </all-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-even-19">
      <description>Positive second argument - halfway case - decimal</description>
      <created by="Michael Kay" on="2011-07-01"/>
      <test>round-half-to-even(123.375, 2)</test>
      <result>
         <all-of>
            <assert-eq>123.38</assert-eq>
            <assert-type>xs:decimal</assert-type>
         </all-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-even-20">
      <description>Positive second argument - halfway case - decimal</description>
      <created by="Michael Kay" on="2011-07-01"/>
      <test>round-half-to-even(123.385, 2)</test>
      <result>
         <all-of>
            <assert-eq>123.38</assert-eq>
            <assert-type>xs:decimal</assert-type>
         </all-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-even-21">
      <description>Positive second argument - halfway case - decimal</description>
      <created by="Michael Kay" on="2011-07-01"/>
      <test>round-half-to-even(-123.355, 2)</test>
      <result>
         <all-of>
            <assert-eq>-123.36</assert-eq>
            <assert-type>xs:decimal</assert-type>
         </all-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-even-22">
      <description>Positive second argument - halfway case - decimal</description>
      <created by="Michael Kay" on="2011-07-01"/>
      <test>round-half-to-even(-123.365, 2)</test>
      <result>
         <all-of>
            <assert-eq>-123.36</assert-eq>
            <assert-type>xs:decimal</assert-type>
         </all-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-even-23">
      <description>Positive second argument - halfway case - decimal</description>
      <created by="Michael Kay" on="2011-07-01"/>
      <test>round-half-to-even(-123.375, 2)</test>
      <result>
         <all-of>
            <assert-eq>-123.38</assert-eq>
            <assert-type>xs:decimal</assert-type>
         </all-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-even-24">
      <description>Positive second argument - halfway case - decimal</description>
      <created by="Michael Kay" on="2011-07-01"/>
      <test>round-half-to-even(-123.385, 2)</test>
      <result>
         <all-of>
            <assert-eq>-123.38</assert-eq>
            <assert-type>xs:decimal</assert-type>
         </all-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-even-24a">
      <description>Negative second argument - halfway case - decimal</description>
      <created by="Michael Kay" on="2011-07-01"/>
      <test>round-half-to-even(12350.00, -2)</test>
      <result>
         <all-of>
            <assert-eq>12400</assert-eq>
            <assert-type>xs:decimal</assert-type>
         </all-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-even-25">
      <description>Negative second argument - halfway case - decimal</description>
      <created by="Michael Kay" on="2011-07-01"/>
      <test>round-half-to-even(-12350.00, -2)</test>
      <result>
         <all-of>
            <assert-eq>-12400</assert-eq>
            <assert-type>xs:decimal</assert-type>
         </all-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-even-26">
      <description>Negative second argument - halfway case - decimal</description>
      <created by="Michael Kay" on="2011-07-01"/>
      <test>round-half-to-even(12450.00, -2)</test>
      <result>
         <all-of>
            <assert-eq>12400</assert-eq>
            <assert-type>xs:decimal</assert-type>
         </all-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-even-27">
      <description>Negative second argument - halfway case - decimal</description>
      <created by="Michael Kay" on="2011-07-01"/>
      <test>round-half-to-even(-12450.00, -2)</test>
      <result>
         <all-of>
            <assert-eq>-12400</assert-eq>
            <assert-type>xs:decimal</assert-type>
         </all-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-even-28">
      <description>Negative second argument - halfway case - decimal</description>
      <created by="Michael Kay" on="2011-07-01"/>
      <test>round-half-to-even(12550.00, -2)</test>
      <result>
         <all-of>
            <assert-eq>12600</assert-eq>
            <assert-type>xs:decimal</assert-type>
         </all-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-even-29">
      <description>Negative second argument - halfway case - decimal</description>
      <created by="Michael Kay" on="2011-07-01"/>
      <test>round-half-to-even(-12550.00, -2)</test>
      <result>
         <all-of>
            <assert-eq>-12600</assert-eq>
            <assert-type>xs:decimal</assert-type>
         </all-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-even-30">
      <description>Negative second argument - halfway case - integer</description>
      <created by="Michael Kay" on="2011-07-01"/>
      <test>round-half-to-even(12350, -2)</test>
      <result>
         <all-of>
            <assert-eq>12400</assert-eq>
            <assert-type>xs:decimal</assert-type>
         </all-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-even-31">
      <description>Negative second argument - halfway case - integer</description>
      <created by="Michael Kay" on="2011-07-01"/>
      <test>round-half-to-even(-12350, -2)</test>
      <result>
         <all-of>
            <assert-eq>-12400</assert-eq>
            <assert-type>xs:decimal</assert-type>
         </all-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-even-32">
      <description>Negative second argument - halfway case - integer</description>
      <created by="Michael Kay" on="2011-07-01"/>
      <test>round-half-to-even(12450, -2)</test>
      <result>
         <all-of>
            <assert-eq>12400</assert-eq>
            <assert-type>xs:decimal</assert-type>
         </all-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-even-33">
      <description>Negative second argument - halfway case - integer</description>
      <created by="Michael Kay" on="2011-07-01"/>
      <test>round-half-to-even(-12450, -2)</test>
      <result>
         <all-of>
            <assert-eq>-12400</assert-eq>
            <assert-type>xs:decimal</assert-type>
         </all-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-even-34">
      <description>Negative second argument - halfway case - integer</description>
      <created by="Michael Kay" on="2011-07-01"/>
      <test>round-half-to-even(12550, -2)</test>
      <result>
         <all-of>
            <assert-eq>12600</assert-eq>
            <assert-type>xs:decimal</assert-type>
         </all-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-even-35">
      <description>Negative second argument - halfway case - integer</description>
      <created by="Michael Kay" on="2011-07-01"/>
      <test>round-half-to-even(-12550, -2)</test>
      <result>
         <all-of>
            <assert-eq>-12600</assert-eq>
            <assert-type>xs:decimal</assert-type>
         </all-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-even-36">
      <description>Negative second argument - halfway case - double</description>
      <created by="Michael Kay" on="2011-07-01"/>
      <test>round-half-to-even(12350e0, -2)</test>
      <result>
         <all-of>
            <assert-eq>12400</assert-eq>
            <assert-type>xs:double</assert-type>
         </all-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-even-37">
      <description>Negative second argument - halfway case - double</description>
      <created by="Michael Kay" on="2011-07-01"/>
      <test>round-half-to-even(-12350e0, -2)</test>
      <result>
         <all-of>
            <assert-eq>-12400</assert-eq>
            <assert-type>xs:double</assert-type>
         </all-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-even-38">
      <description>Negative second argument - halfway case - double</description>
      <created by="Michael Kay" on="2011-07-01"/>
      <test>round-half-to-even(12450e0, -2)</test>
      <result>
         <all-of>
            <assert-eq>12400</assert-eq>
            <assert-type>xs:double</assert-type>
         </all-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-even-39">
      <description>Negative second argument - halfway case - double</description>
      <created by="Michael Kay" on="2011-07-01"/>
      <test>round-half-to-even(-12450e0, -2)</test>
      <result>
         <all-of>
            <assert-eq>-12400</assert-eq>
            <assert-type>xs:double</assert-type>
         </all-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-even-40">
      <description>Negative second argument - halfway case - double</description>
      <created by="Michael Kay" on="2011-07-01"/>
      <test>round-half-to-even(12550e0, -2)</test>
      <result>
         <all-of>
            <assert-eq>12600</assert-eq>
            <assert-type>xs:double</assert-type>
         </all-of>
      </result>
   </test-case>

   <test-case name="fn-round-half-to-even-41">
      <description>Negative second argument - halfway case - double</description>
      <created by="Michael Kay" on="2011-07-01"/>
      <test>round-half-to-even(-12550e0, -2)</test>
      <result>
         <all-of>
            <assert-eq>-12600</assert-eq>
            <assert-type>xs:double</assert-type>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="cbcl-round-half-to-even-001">
      <description> test fn:found-half-to-even on xs:double with large $precision argment </description>
      <created by="Tim Mills" on="2008-05-02"/>
      <test>fn:round-half-to-even(3.567812E+3, 4294967296)</test>
      <result>
         <assert-string-value>3567.812</assert-string-value>
      </result>
   </test-case>

   <test-case name="cbcl-round-half-to-even-002">
      <description> test fn:found-half-to-even on integer with positive precision </description>
      <created by="Tim Mills" on="2008-05-02"/>
      <test>fn:round-half-to-even(12345, 2)</test>
      <result>
         <assert-string-value>12345</assert-string-value>
      </result>
   </test-case>

   <test-case name="cbcl-round-half-to-even-003">
      <description> test fn:found-half-to-even on integer with negative precision </description>
      <created by="Tim Mills" on="2008-05-02"/>
      <test>fn:round-half-to-even(12345, -2)</test>
      <result>
         <assert-string-value>12300</assert-string-value>
      </result>
   </test-case>

   <test-case name="cbcl-round-half-to-even-004">
      <description> test fn:found-half-to-even on short with positive precision </description>
      <created by="Tim Mills" on="2008-05-02"/>
      <test>fn:round-half-to-even(xs:short(12345), 2)</test>
      <result>
         <assert-string-value>12345</assert-string-value>
      </result>
   </test-case>

   <test-case name="cbcl-round-half-to-even-005">
      <description> test fn:found-half-to-even on short with negative precision </description>
      <created by="Tim Mills" on="2008-05-02"/>
      <test>fn:round-half-to-even(xs:short(12345), -2)</test>
      <result>
         <assert-string-value>12300</assert-string-value>
      </result>
   </test-case>

   <test-case name="cbcl-round-half-to-even-006">
      <description> test fn:found-half-to-even on decimal with positive precision </description>
      <created by="Tim Mills" on="2008-05-02"/>
      <test>fn:round-half-to-even(12345.6, 2)</test>
      <result>
         <assert-string-value>12345.6</assert-string-value>
      </result>
   </test-case>

   <test-case name="cbcl-round-half-to-even-007">
      <description> test fn:found-half-to-even on decimal with negative precision </description>
      <created by="Tim Mills" on="2008-05-02"/>
      <test>fn:round-half-to-even(12345.6, -2)</test>
      <result>
         <assert-string-value>12300</assert-string-value>
      </result>
   </test-case>

   <test-case name="cbcl-round-half-to-even-008">
      <description> test fn:found-half-to-even on float with positive precision </description>
      <created by="Tim Mills" on="2008-05-02"/>
      <test>fn:round-half-to-even(xs:float(12345.6), 2)</test>
      <result>
         <assert-string-value>12345.6</assert-string-value>
      </result>
   </test-case>

   <test-case name="cbcl-round-half-to-even-009">
      <description> test fn:found-half-to-even on float with negative precision </description>
      <created by="Tim Mills" on="2008-05-02"/>
      <test>fn:round-half-to-even(xs:float(12345.6), -2)</test>
      <result>
         <assert-string-value>12300</assert-string-value>
      </result>
   </test-case>

   <test-case name="cbcl-round-half-to-even-010">
      <description> test fn:found-half-to-even on double with positive precision </description>
      <created by="Tim Mills" on="2008-05-02"/>
      <test>fn:round-half-to-even(123456e-2, 2)</test>
      <result>
         <assert-string-value>1234.56</assert-string-value>
      </result>
   </test-case>

   <test-case name="cbcl-round-half-to-even-011">
      <description> test fn:found-half-to-even on double with negative precision </description>
      <created by="Tim Mills" on="2008-05-02"/>
      <test>fn:round-half-to-even(123456e-2, -2)</test>
      <result>
         <assert-string-value>1200</assert-string-value>
      </result>
   </test-case>

   <test-case name="cbcl-round-half-to-even-012">
      <description> test fn:found-half-to-even on xs:decimal with large $precision argment </description>
      <created by="Tim Mills" on="2008-05-02"/>
      <test>fn:round-half-to-even(3.567812, 4294967296)</test>
      <result>
         <assert-string-value>3.567812</assert-string-value>
      </result>
   </test-case>

   <test-case name="cbcl-round-half-to-even-013">
      <description> test EBV of fn:found-half-to-even with invalid type for argument 2 </description>
      <created by="Tim Mills" on="2008-05-02"/>
      <test>fn:boolean(fn:round-half-to-even(5, 1))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="cbcl-round-half-to-even-014">
      <description> test fn:found-half-to-even with invalid type for argument 2 </description>
      <created by="Tim Mills" on="2008-05-02"/>
      <test>fn:round-half-to-even(123456e-2, "two")</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
</test-set>