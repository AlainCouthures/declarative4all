<?xml version="1.0" encoding="UTF-8"?>
<test-set name="fn-round" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">
  <description>Tests for the round() function</description>
  <link document="http://www.w3.org/TR/xpath-functions-11/" idref="func-round" type="spec"/>
  <environment name="emptydoc"/>
  <environment name="e0">
    <source file="abs/e0.xml" role=".">
      <description>A simple file containing e0/e</description>
      <created by="Michael Kay" on="2010-12-08"/>
    </source>
  </environment>
  <environment name="e1">
    <source file="abs/e1.xml" role=".">
      <description>A simple file containing e1/e</description>
      <created by="Michael Kay" on="2010-12-08"/>
    </source>
  </environment>
  <environment name="e-1">
    <source file="abs/e-1.xml" role=".">
      <description>A simple file containing         <![CDATA[<e>-1</e>]]>
</description>
      <created by="Michael Kay" on="2010-12-08"/>
    </source>
  </environment>
  <test-case name="fn-roundint1args-1">
    <description> Evaluates The &quot;round&quot; function with the arguments set as follows: $arg = xs:int(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:round(xs:int(&quot;-2147483648&quot;))</test>
    <result-string/>
    <result>
      <all-of>
        <assert-eq>-2147483648</assert-eq>
        <assert-type>xs:integer</assert-type>
      </all-of>
    </result>
  </test-case>
  <test-case name="fn-roundint1args-2">
    <description> Evaluates The &quot;round&quot; function with the arguments set as follows: $arg = xs:int(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:round(xs:int(&quot;-1873914410&quot;))</test>
    <result-string>xs:decimal(&quot;-1873914410&quot;)</result-string>
    <result>
      <assert-eq>-1873914410</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-roundint1args-3">
    <description> Evaluates The &quot;round&quot; function with the arguments set as follows: $arg = xs:int(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:round(xs:int(&quot;2147483647&quot;))</test>
    <result-string>xs:decimal(&quot;2147483647&quot;)</result-string>
    <result>
      <assert-eq>2147483647</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-roundintg1args-1">
    <description> Evaluates The &quot;round&quot; function with the arguments set as follows: $arg = xs:integer(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:round(xs:integer(&quot;-999999999999999999&quot;))</test>
    <result-string>xs:decimal(&quot;-999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>-999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-roundintg1args-2">
    <description> Evaluates The &quot;round&quot; function with the arguments set as follows: $arg = xs:integer(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:round(xs:integer(&quot;830993497117024304&quot;))</test>
    <result-string>xs:decimal(&quot;830993497117024304&quot;)</result-string>
    <result>
      <assert-eq>830993497117024304</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-roundintg1args-3">
    <description> Evaluates The &quot;round&quot; function with the arguments set as follows: $arg = xs:integer(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:round(xs:integer(&quot;999999999999999999&quot;))</test>
    <result-string>xs:decimal(&quot;999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-rounddec1args-1">
    <description> Evaluates The &quot;round&quot; function with the arguments set as follows: $arg = xs:decimal(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:round(xs:decimal(&quot;-999999999999999999&quot;))</test>
    <result-string>xs:decimal(&quot;-999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>-999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-rounddec1args-2">
    <description> Evaluates The &quot;round&quot; function with the arguments set as follows: $arg = xs:decimal(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:round(xs:decimal(&quot;617375191608514839&quot;))</test>
    <result-string/>
    <result>
      <all-of>
        <assert-eq>617375191608514839</assert-eq>
        <assert-type>xs:decimal</assert-type>
      </all-of>
    </result>
  </test-case>
  <test-case name="fn-rounddec1args-3">
    <description> Evaluates The &quot;round&quot; function with the arguments set as follows: $arg = xs:decimal(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:round(xs:decimal(&quot;999999999999999999&quot;))</test>
    <result-string>xs:decimal(&quot;999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-rounddbl1args-1">
    <description> Evaluates The &quot;round&quot; function with the arguments set as follows: $arg = xs:double(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:round(xs:double(&quot;-1.7976931348623157E308&quot;))</test>
    <result-string>xs:decimal(&quot;-1.7976931348623157E308&quot;)</result-string>
    <result>
      <assert-eq>-1.7976931348623157E308</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-rounddbl1args-2">
    <description> Evaluates The &quot;round&quot; function with the arguments set as follows: $arg = xs:double(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:round(xs:double(&quot;0&quot;))</test>
    <result-string/>
    <result>
      <all-of>
        <assert-eq>0</assert-eq>
        <assert-type>xs:double</assert-type>
      </all-of>
    </result>
  </test-case>
  <test-case name="fn-rounddbl1args-3">
    <description> Evaluates The &quot;round&quot; function with the arguments set as follows: $arg = xs:double(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:round(xs:double(&quot;1.7976931348623157E308&quot;))</test>
    <result-string>xs:decimal(&quot;1.7976931348623157E308&quot;)</result-string>
    <result>
      <assert-eq>1.7976931348623157E308</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-roundflt1args-1">
    <description> Evaluates The &quot;round&quot; function with the arguments set as follows: $arg = xs:float(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:round(xs:float(&quot;-3.4028235E38&quot;))</test>
    <result-string>xs:float(&quot;-3.4028235E38&quot;)</result-string>
    <result>
      <assert-eq>xs:float(&quot;-3.4028235E38&quot;)</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-roundflt1args-2">
    <description> Evaluates The &quot;round&quot; function with the arguments set as follows: $arg = xs:float(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:round(xs:float(&quot;0&quot;))</test>
    <result-string/>
    <result>
      <all-of>
        <assert-type>xs:float</assert-type>
        <assert-eq>0</assert-eq>
      </all-of>
    </result>
  </test-case>
  <test-case name="fn-roundflt1args-3">
    <description> Evaluates The &quot;round&quot; function with the arguments set as follows: $arg = xs:float(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:round(xs:float(&quot;3.4028235E38&quot;))</test>
    <result-string>xs:float(&quot;3.4028235E38&quot;)</result-string>
    <result>
      <assert-eq>xs:float(&quot;3.4028235E38&quot;)</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-roundlng1args-1">
    <description> Evaluates The &quot;round&quot; function with the arguments set as follows: $arg = xs:long(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:round(xs:long(&quot;-92233720368547758&quot;))</test>
    <result-string>xs:decimal(&quot;-92233720368547758&quot;)</result-string>
    <result>
      <assert-eq>-92233720368547758</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-roundlng1args-2">
    <description> Evaluates The &quot;round&quot; function with the arguments set as follows: $arg = xs:long(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:round(xs:long(&quot;-47175562203048468&quot;))</test>
    <result-string>xs:decimal(&quot;-47175562203048468&quot;)</result-string>
    <result>
      <assert-eq>-47175562203048468</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-roundlng1args-3">
    <description> Evaluates The &quot;round&quot; function with the arguments set as follows: $arg = xs:long(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:round(xs:long(&quot;92233720368547758&quot;))</test>
    <result-string>xs:decimal(&quot;92233720368547758&quot;)</result-string>
    <result>
      <assert-eq>92233720368547758</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-roundusht1args-1">
    <description> Evaluates The &quot;round&quot; function with the arguments set as follows: $arg = xs:unsignedShort(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:round(xs:unsignedShort(&quot;0&quot;))</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-roundusht1args-2">
    <description> Evaluates The &quot;round&quot; function with the arguments set as follows: $arg = xs:unsignedShort(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:round(xs:unsignedShort(&quot;44633&quot;))</test>
    <result-string>xs:decimal(&quot;44633&quot;)</result-string>
    <result>
      <assert-eq>44633</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-roundusht1args-3">
    <description> Evaluates The &quot;round&quot; function with the arguments set as follows: $arg = xs:unsignedShort(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:round(xs:unsignedShort(&quot;65535&quot;))</test>
    <result-string>xs:decimal(&quot;65535&quot;)</result-string>
    <result>
      <assert-eq>65535</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-roundnint1args-1">
    <description> Evaluates The &quot;round&quot; function with the arguments set as follows: $arg = xs:negativeInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:round(xs:negativeInteger(&quot;-999999999999999999&quot;))</test>
    <result-string>xs:decimal(&quot;-999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>-999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-roundnint1args-2">
    <description> Evaluates The &quot;round&quot; function with the arguments set as follows: $arg = xs:negativeInteger(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:round(xs:negativeInteger(&quot;-297014075999096793&quot;))</test>
    <result-string>xs:decimal(&quot;-297014075999096793&quot;)</result-string>
    <result>
      <assert-eq>-297014075999096793</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-roundnint1args-3">
    <description> Evaluates The &quot;round&quot; function with the arguments set as follows: $arg = xs:negativeInteger(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:round(xs:negativeInteger(&quot;-1&quot;))</test>
    <result-string>xs:decimal(&quot;-1&quot;)</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-roundpint1args-1">
    <description> Evaluates The &quot;round&quot; function with the arguments set as follows: $arg = xs:positiveInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:round(xs:positiveInteger(&quot;1&quot;))</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-roundpint1args-2">
    <description> Evaluates The &quot;round&quot; function with the arguments set as follows: $arg = xs:positiveInteger(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:round(xs:positiveInteger(&quot;52704602390610033&quot;))</test>
    <result-string>xs:decimal(&quot;52704602390610033&quot;)</result-string>
    <result>
      <assert-eq>52704602390610033</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-roundpint1args-3">
    <description> Evaluates The &quot;round&quot; function with the arguments set as follows: $arg = xs:positiveInteger(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:round(xs:positiveInteger(&quot;999999999999999999&quot;))</test>
    <result-string>xs:decimal(&quot;999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-roundulng1args-1">
    <description> Evaluates The &quot;round&quot; function with the arguments set as follows: $arg = xs:unsignedLong(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:round(xs:unsignedLong(&quot;0&quot;))</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-roundulng1args-2">
    <description> Evaluates The &quot;round&quot; function with the arguments set as follows: $arg = xs:unsignedLong(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:round(xs:unsignedLong(&quot;130747108607674654&quot;))</test>
    <result-string>xs:decimal(&quot;130747108607674654&quot;)</result-string>
    <result>
      <assert-eq>130747108607674654</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-roundulng1args-3">
    <description> Evaluates The &quot;round&quot; function with the arguments set as follows: $arg = xs:unsignedLong(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:round(xs:unsignedLong(&quot;184467440737095516&quot;))</test>
    <result-string>xs:decimal(&quot;184467440737095516&quot;)</result-string>
    <result>
      <assert-eq>184467440737095516</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-roundnpi1args-1">
    <description> Evaluates The &quot;round&quot; function with the arguments set as follows: $arg = xs:nonPositiveInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:round(xs:nonPositiveInteger(&quot;-999999999999999999&quot;))</test>
    <result-string>xs:decimal(&quot;-999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>-999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-roundnpi1args-2">
    <description> Evaluates The &quot;round&quot; function with the arguments set as follows: $arg = xs:nonPositiveInteger(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:round(xs:nonPositiveInteger(&quot;-475688437271870490&quot;))</test>
    <result-string>xs:decimal(&quot;-475688437271870490&quot;)</result-string>
    <result>
      <assert-eq>-475688437271870490</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-roundnpi1args-3">
    <description> Evaluates The &quot;round&quot; function with the arguments set as follows: $arg = xs:nonPositiveInteger(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:round(xs:nonPositiveInteger(&quot;0&quot;))</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-roundnni1args-1">
    <description> Evaluates The &quot;round&quot; function with the arguments set as follows: $arg = xs:nonNegativeInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:round(xs:nonNegativeInteger(&quot;0&quot;))</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-roundnni1args-2">
    <description> Evaluates The &quot;round&quot; function with the arguments set as follows: $arg = xs:nonNegativeInteger(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:round(xs:nonNegativeInteger(&quot;303884545991464527&quot;))</test>
    <result-string>xs:decimal(&quot;303884545991464527&quot;)</result-string>
    <result>
      <assert-eq>303884545991464527</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-roundnni1args-3">
    <description> Evaluates The &quot;round&quot; function with the arguments set as follows: $arg = xs:nonNegativeInteger(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:round(xs:nonNegativeInteger(&quot;999999999999999999&quot;))</test>
    <result-string>xs:decimal(&quot;999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-roundsht1args-1">
    <description> Evaluates The &quot;round&quot; function with the arguments set as follows: $arg = xs:short(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:round(xs:short(&quot;-32768&quot;))</test>
    <result-string>xs:decimal(&quot;-32768&quot;)</result-string>
    <result>
      <assert-eq>-32768</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-roundsht1args-2">
    <description> Evaluates The &quot;round&quot; function with the arguments set as follows: $arg = xs:short(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:round(xs:short(&quot;-5324&quot;))</test>
    <result-string>xs:decimal(&quot;-5324&quot;)</result-string>
    <result>
      <assert-eq>-5324</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-roundsht1args-3">
    <description> Evaluates The &quot;round&quot; function with the arguments set as follows: $arg = xs:short(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:round(xs:short(&quot;32767&quot;))</test>
    <result-string>xs:decimal(&quot;32767&quot;)</result-string>
    <result>
      <assert-eq>32767</assert-eq>
    </result>
  </test-case>
  <test-case name="K-RoundFunc-1">
    <description> A test whose essence is: `round()`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>round()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-RoundFunc-2">
    <description> A test whose essence is: `round(1, 2)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O'Neil Delpratt" change="Bug fix related to bug #14854: Modified dependency" on="2012-05-22"/>
    <dependency type="spec" value="XP20 XQ10"/>
    <test>round(1, 2)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case covers="fn-round" name="K-RoundFunc-2a">
    <description> A test whose essence is: `round(1, 2)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>round(1, 2)</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K-RoundFunc-3">
    <description> A test whose essence is: `empty(round(()))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(round(()))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-RoundFunc-4">
    <description> A test whose essence is: `round(1) eq 1`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>round(1) eq 1</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-RoundFunc-5">
    <description> A test whose essence is: `round(1.1) eq 1`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>round(1.1) eq 1</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-RoundFunc-6">
    <description> A test whose essence is: `round(xs:double(1)) eq 1`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>round(xs:double(1)) eq 1</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-RoundFunc-7">
    <description> A test whose essence is: `round(xs:float(1)) eq 1`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>round(xs:float(1)) eq 1</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-RoundFunc-8">
    <description> A test whose essence is: `round(2.4999) eq 2`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>round(2.4999) eq 2</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-RoundFunc-9">
    <description> A test whose essence is: `round(-2.5) eq -2`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>round(-2.5) eq -2</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-1">
    <description> Ensure the return type is properly inferred for unsignedShort. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <environment ref="e0"/>
    <test>round(xs:unsignedShort(.)) instance of xs:unsignedShort</test>
    <result-string/>
    <result>
      <any-of>
        <assert-false/>
        <assert-true/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-2">
    <description> Ensure the return type is properly inferred for unsignedLong. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <environment ref="e0"/>
    <test>round(xs:unsignedLong(.)) instance of xs:unsignedLong</test>
    <result-string/>
    <result>
      <any-of>
        <assert-false/>
        <assert-true/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-3">
    <description> Ensure the return type is properly inferred for unsignedInt. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <environment ref="e0"/>
    <test>round(xs:unsignedInt(.)) instance of xs:unsignedInt</test>
    <result-string/>
    <result>
      <any-of>
        <assert-false/>
        <assert-true/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-4">
    <description> Ensure the return type is properly inferred for unsignedByte. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <environment ref="e0"/>
    <test>round(xs:unsignedByte(.)) instance of xs:unsignedByte</test>
    <result-string/>
    <result>
      <any-of>
        <assert-false/>
        <assert-true/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-5">
    <description> Ensure the return type is properly inferred for positiveInteger. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O'Neil Delpratt" change="environment variable e0 to e-1" on="2011-09-06"/>
    <modified by="O'Neil Delpratt" change="environment variable e-1 to e1" on="2012-05-25"/>
    <environment ref="e1"/>
    <test>round(xs:positiveInteger(.)) instance of xs:positiveInteger</test>
    <result-string/>
    <result>
      <any-of>
        <assert-false/>
        <assert-true/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-6">
    <description> Ensure the return type is properly inferred for nonPositiveInteger. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <environment ref="e0"/>
    <test>round(xs:nonPositiveInteger(.)) instance of xs:nonPositiveInteger</test>
    <result-string/>
    <result>
      <any-of>
        <assert-false/>
        <assert-true/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-7">
    <description> Ensure the return type is properly inferred for nonNegativeInteger. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <environment ref="e0"/>
    <test>round(xs:nonNegativeInteger(.)) instance of xs:nonNegativeInteger</test>
    <result-string/>
    <result>
      <any-of>
        <assert-false/>
        <assert-true/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-8">
    <description> Ensure the return type is properly inferred for negativeInteger. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O'Neil Delpratt" change="environment variable e0 to e-1" on="2011-09-06"/>
    <environment ref="e-1"/>
    <test>round(xs:negativeInteger(.)) instance of xs:negativeInteger</test>
    <result-string/>
    <result>
      <any-of>
        <assert-false/>
        <assert-true/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-9">
    <description> Ensure the return type is properly inferred for long. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <environment ref="e0"/>
    <test>round(xs:long(.)) instance of xs:long</test>
    <result-string/>
    <result>
      <any-of>
        <assert-false/>
        <assert-true/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-10">
    <description> Ensure the return type is properly inferred for int. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <environment ref="e0"/>
    <test>round(xs:int(.)) instance of xs:int</test>
    <result-string/>
    <result>
      <any-of>
        <assert-false/>
        <assert-true/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-11">
    <description> Ensure the return type is properly inferred for short. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <environment ref="e0"/>
    <test>round(xs:short(.)) instance of xs:short</test>
    <result-string/>
    <result>
      <any-of>
        <assert-false/>
        <assert-true/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-12">
    <description> Ensure the return type is properly inferred for byte. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <environment ref="e0"/>
    <test>round(xs:byte(.)) instance of xs:byte</test>
    <result-string/>
    <result>
      <any-of>
        <assert-false/>
        <assert-true/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-13">
    <description> Invoke on xs:double INF. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>round(xs:double(&quot;INF&quot;))</test>
    <result-string>xs:string(&quot;INF&quot;)</result-string>
    <result>
      <assert-string-value>INF</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-14">
    <description> Invoke on xs:double -INF. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>round(xs:double(&quot;-INF&quot;))</test>
    <result-string>xs:string(&quot;-INF&quot;)</result-string>
    <result>
      <assert-string-value>-INF</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-15">
    <description> Invoke on xs:double 0. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>round(xs:double(&quot;0&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-16">
    <description> Invoke on xs:double -0. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>round(xs:double(&quot;-0&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-17">
    <description> Invoke on xs:float INF. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>round(xs:float(&quot;INF&quot;))</test>
    <result-string>xs:string(&quot;INF&quot;)</result-string>
    <result>
      <assert-string-value>INF</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-18">
    <description> Invoke on xs:float -INF. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>round(xs:float(&quot;-INF&quot;))</test>
    <result-string>xs:string(&quot;-INF&quot;)</result-string>
    <result>
      <assert-string-value>-INF</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-19">
    <description> Invoke on xs:float 0. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>round(xs:float(&quot;0&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-20">
    <description> Invoke on xs:float -0. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>round(xs:float(&quot;-0&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-21">
    <description> Invoke on xs:float NaN. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;NaN&quot;))</test>
    <result-string>xs:string(&quot;NaN&quot;)</result-string>
    <result>
      <assert-string-value>NaN</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-22">
    <description> Invoke on xs:double NaN. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;NaN&quot;))</test>
    <result-string>xs:string(&quot;NaN&quot;)</result-string>
    <result>
      <assert-string-value>NaN</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-23">
    <description> Invoke on 0.01, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;0.01&quot;))</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-24">
    <description> Invoke on 0.01, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;0.01&quot;))</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-25">
    <description> Invoke on -0.01, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;-0.01&quot;))</test>
    <result-string>xs:decimal(&quot;-0&quot;)</result-string>
    <result>
      <assert-eq>-0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-26">
    <description> Invoke on -0.01, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;-0.01&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-27">
    <description> Invoke on 0.04, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;0.04&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-28">
    <description> Invoke on 0.04, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;0.04&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-29">
    <description> Invoke on -0.04, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;-0.04&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-30">
    <description> Invoke on -0.04, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;-0.04&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-31">
    <description> Invoke on 0.05, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;0.05&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-32">
    <description> Invoke on 0.05, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;0.05&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-33">
    <description> Invoke on -0.05, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;-0.05&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-34">
    <description> Invoke on -0.05, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;-0.05&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-35">
    <description> Invoke on 0.06, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;0.06&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-36">
    <description> Invoke on 0.06, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;0.06&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-37">
    <description> Invoke on -0.06, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;-0.06&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-38">
    <description> Invoke on -0.06, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;-0.06&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-39">
    <description> Invoke on 0.09, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;0.09&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-40">
    <description> Invoke on 0.09, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;0.09&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-41">
    <description> Invoke on -0.09, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;-0.09&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-42">
    <description> Invoke on -0.09, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;-0.09&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-43">
    <description> Invoke on 0.00, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;0.00&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-44">
    <description> Invoke on 0.00, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;0.00&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-45">
    <description> Invoke on -0.00, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;-0.00&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-46">
    <description> Invoke on -0.00, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;-0.00&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-47">
    <description> Invoke on 0.11, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;0.11&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-48">
    <description> Invoke on 0.11, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;0.11&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-49">
    <description> Invoke on -0.11, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;-0.11&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-50">
    <description> Invoke on -0.11, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;-0.11&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-51">
    <description> Invoke on 0.14, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;0.14&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-52">
    <description> Invoke on 0.14, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;0.14&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-53">
    <description> Invoke on -0.14, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;-0.14&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-54">
    <description> Invoke on -0.14, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;-0.14&quot;))</test>
    <result-string/>
    <result>
      <all-of>
        <assert-type>xs:double</assert-type>
        <assert-string-value>-0</assert-string-value>
      </all-of>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-55">
    <description> Invoke on 0.15, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;0.15&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-56">
    <description> Invoke on 0.15, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;0.15&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-57">
    <description> Invoke on -0.15, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;-0.15&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-58">
    <description> Invoke on -0.15, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;-0.15&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-59">
    <description> Invoke on 0.16, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;0.16&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-60">
    <description> Invoke on 0.16, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;0.16&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-61">
    <description> Invoke on -0.16, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;-0.16&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-62">
    <description> Invoke on -0.16, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;-0.16&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-63">
    <description> Invoke on 0.19, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;0.19&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-64">
    <description> Invoke on 0.19, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;0.19&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-65">
    <description> Invoke on -0.19, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;-0.19&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-66">
    <description> Invoke on -0.19, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;-0.19&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-67">
    <description> Invoke on 0.10, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;0.10&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-68">
    <description> Invoke on 0.10, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;0.10&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-69">
    <description> Invoke on -0.10, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;-0.10&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-70">
    <description> Invoke on -0.10, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;-0.10&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-71">
    <description> Invoke on 0.41, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;0.41&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-72">
    <description> Invoke on 0.41, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;0.41&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-73">
    <description> Invoke on -0.41, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;-0.41&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-74">
    <description> Invoke on -0.41, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;-0.41&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-75">
    <description> Invoke on 0.44, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;0.44&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-76">
    <description> Invoke on 0.44, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;0.44&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-77">
    <description> Invoke on -0.44, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;-0.44&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-78">
    <description> Invoke on -0.44, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;-0.44&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-79">
    <description> Invoke on 0.45, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;0.45&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-80">
    <description> Invoke on 0.45, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;0.45&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-81">
    <description> Invoke on -0.45, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;-0.45&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-82">
    <description> Invoke on -0.45, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;-0.45&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-83">
    <description> Invoke on 0.46, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;0.46&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-84">
    <description> Invoke on 0.46, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;0.46&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-85">
    <description> Invoke on -0.46, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;-0.46&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-86">
    <description> Invoke on -0.46, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;-0.46&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-87">
    <description> Invoke on 0.49, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;0.49&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-88">
    <description> Invoke on 0.49, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;0.49&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-89">
    <description> Invoke on -0.49, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;-0.49&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-90">
    <description> Invoke on -0.49, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;-0.49&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-91">
    <description> Invoke on 0.40, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;0.40&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-92">
    <description> Invoke on 0.40, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;0.40&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-93">
    <description> Invoke on -0.40, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;-0.40&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-94">
    <description> Invoke on -0.40, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;-0.40&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-95">
    <description> Invoke on 0.51, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;0.51&quot;))</test>
    <result-string>xs:string(&quot;1&quot;)</result-string>
    <result>
      <assert-string-value>1</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-96">
    <description> Invoke on 0.51, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;0.51&quot;))</test>
    <result-string>xs:string(&quot;1&quot;)</result-string>
    <result>
      <assert-string-value>1</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-97">
    <description> Invoke on -0.51, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;-0.51&quot;))</test>
    <result-string>xs:decimal(&quot;-1&quot;)</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-98">
    <description> Invoke on -0.51, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;-0.51&quot;))</test>
    <result-string>xs:decimal(&quot;-1&quot;)</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-99">
    <description> Invoke on 0.54, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;0.54&quot;))</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-100">
    <description> Invoke on 0.54, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;0.54&quot;))</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-101">
    <description> Invoke on -0.54, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;-0.54&quot;))</test>
    <result-string>xs:decimal(&quot;-1&quot;)</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-102">
    <description> Invoke on -0.54, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;-0.54&quot;))</test>
    <result-string>xs:decimal(&quot;-1&quot;)</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-103">
    <description> Invoke on 0.55, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;0.55&quot;))</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-104">
    <description> Invoke on 0.55, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;0.55&quot;))</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-105">
    <description> Invoke on -0.55, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;-0.55&quot;))</test>
    <result-string>xs:decimal(&quot;-1&quot;)</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-106">
    <description> Invoke on -0.55, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;-0.55&quot;))</test>
    <result-string>xs:decimal(&quot;-1&quot;)</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-107">
    <description> Invoke on 0.56, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;0.56&quot;))</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-108">
    <description> Invoke on 0.56, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;0.56&quot;))</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-109">
    <description> Invoke on -0.56, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;-0.56&quot;))</test>
    <result-string>xs:decimal(&quot;-1&quot;)</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-110">
    <description> Invoke on -0.56, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;-0.56&quot;))</test>
    <result-string>xs:decimal(&quot;-1&quot;)</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-111">
    <description> Invoke on 0.59, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;0.59&quot;))</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-112">
    <description> Invoke on 0.59, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;0.59&quot;))</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-113">
    <description> Invoke on -0.59, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;-0.59&quot;))</test>
    <result-string>xs:decimal(&quot;-1&quot;)</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-114">
    <description> Invoke on -0.59, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;-0.59&quot;))</test>
    <result-string>xs:decimal(&quot;-1&quot;)</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-115">
    <description> Invoke on 0.50, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;0.50&quot;))</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-116">
    <description> Invoke on 0.50, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;0.50&quot;))</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-117">
    <description> Invoke on -0.50, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;-0.50&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-118">
    <description> Invoke on -0.50, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;-0.50&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-119">
    <description> Invoke on 0.61, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;0.61&quot;))</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-120">
    <description> Invoke on 0.61, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;0.61&quot;))</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-121">
    <description> Invoke on -0.61, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;-0.61&quot;))</test>
    <result-string>xs:decimal(&quot;-1&quot;)</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-122">
    <description> Invoke on -0.61, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;-0.61&quot;))</test>
    <result-string>xs:decimal(&quot;-1&quot;)</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-123">
    <description> Invoke on 0.64, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;0.64&quot;))</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-124">
    <description> Invoke on 0.64, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;0.64&quot;))</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-125">
    <description> Invoke on -0.64, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;-0.64&quot;))</test>
    <result-string>xs:decimal(&quot;-1&quot;)</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-126">
    <description> Invoke on -0.64, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;-0.64&quot;))</test>
    <result-string>xs:decimal(&quot;-1&quot;)</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-127">
    <description> Invoke on 0.65, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;0.65&quot;))</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-128">
    <description> Invoke on 0.65, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;0.65&quot;))</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-129">
    <description> Invoke on -0.65, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;-0.65&quot;))</test>
    <result-string>xs:decimal(&quot;-1&quot;)</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-130">
    <description> Invoke on -0.65, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;-0.65&quot;))</test>
    <result-string>xs:decimal(&quot;-1&quot;)</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-131">
    <description> Invoke on 0.66, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;0.66&quot;))</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-132">
    <description> Invoke on 0.66, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;0.66&quot;))</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-133">
    <description> Invoke on -0.66, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;-0.66&quot;))</test>
    <result-string>xs:decimal(&quot;-1&quot;)</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-134">
    <description> Invoke on -0.66, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;-0.66&quot;))</test>
    <result-string>xs:decimal(&quot;-1&quot;)</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-135">
    <description> Invoke on 0.69, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;0.69&quot;))</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-136">
    <description> Invoke on 0.69, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;0.69&quot;))</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-137">
    <description> Invoke on -0.69, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;-0.69&quot;))</test>
    <result-string>xs:decimal(&quot;-1&quot;)</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-138">
    <description> Invoke on -0.69, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;-0.69&quot;))</test>
    <result-string>xs:decimal(&quot;-1&quot;)</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-139">
    <description> Invoke on 0.60, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;0.60&quot;))</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-140">
    <description> Invoke on 0.60, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;0.60&quot;))</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-141">
    <description> Invoke on -0.60, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;-0.60&quot;))</test>
    <result-string>xs:decimal(&quot;-1&quot;)</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-142">
    <description> Invoke on -0.60, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;-0.60&quot;))</test>
    <result-string>xs:decimal(&quot;-1&quot;)</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-143">
    <description> Invoke on 0.91, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;0.91&quot;))</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-144">
    <description> Invoke on 0.91, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;0.91&quot;))</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-145">
    <description> Invoke on -0.91, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;-0.91&quot;))</test>
    <result-string>xs:decimal(&quot;-1&quot;)</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-146">
    <description> Invoke on -0.91, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;-0.91&quot;))</test>
    <result-string>xs:decimal(&quot;-1&quot;)</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-147">
    <description> Invoke on 0.94, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;0.94&quot;))</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-148">
    <description> Invoke on 0.94, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;0.94&quot;))</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-149">
    <description> Invoke on -0.94, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;-0.94&quot;))</test>
    <result-string>xs:decimal(&quot;-1&quot;)</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-150">
    <description> Invoke on -0.94, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;-0.94&quot;))</test>
    <result-string>xs:decimal(&quot;-1&quot;)</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-151">
    <description> Invoke on 0.95, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;0.95&quot;))</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-152">
    <description> Invoke on 0.95, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;0.95&quot;))</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-153">
    <description> Invoke on -0.95, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;-0.95&quot;))</test>
    <result-string>xs:decimal(&quot;-1&quot;)</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-154">
    <description> Invoke on -0.95, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;-0.95&quot;))</test>
    <result-string>xs:decimal(&quot;-1&quot;)</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-155">
    <description> Invoke on 0.96, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;0.96&quot;))</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-156">
    <description> Invoke on 0.96, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;0.96&quot;))</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-157">
    <description> Invoke on -0.96, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;-0.96&quot;))</test>
    <result-string>xs:decimal(&quot;-1&quot;)</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-158">
    <description> Invoke on -0.96, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;-0.96&quot;))</test>
    <result-string>xs:decimal(&quot;-1&quot;)</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-159">
    <description> Invoke on 0.99, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;0.99&quot;))</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-160">
    <description> Invoke on 0.99, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;0.99&quot;))</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-161">
    <description> Invoke on -0.99, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;-0.99&quot;))</test>
    <result-string>xs:decimal(&quot;-1&quot;)</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-162">
    <description> Invoke on -0.99, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;-0.99&quot;))</test>
    <result-string>xs:decimal(&quot;-1&quot;)</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-163">
    <description> Invoke on 0.90, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;0.90&quot;))</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-164">
    <description> Invoke on 0.90, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;0.90&quot;))</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-165">
    <description> Invoke on -0.90, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;-0.90&quot;))</test>
    <result-string>xs:decimal(&quot;-1&quot;)</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-166">
    <description> Invoke on -0.90, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;-0.90&quot;))</test>
    <result-string>xs:decimal(&quot;-1&quot;)</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-167">
    <description> Invoke on 0.101, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;0.101&quot;))</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-168">
    <description> Invoke on 0.101, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;0.101&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-169">
    <description> Invoke on -0.101, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;-0.101&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-170">
    <description> Invoke on -0.101, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;-0.101&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-171">
    <description> Invoke on 0.104, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;0.104&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-172">
    <description> Invoke on 0.104, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;0.104&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-173">
    <description> Invoke on -0.104, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;-0.104&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-174">
    <description> Invoke on -0.104, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;-0.104&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-175">
    <description> Invoke on 0.105, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;0.105&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-176">
    <description> Invoke on 0.105, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;0.105&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-177">
    <description> Invoke on -0.105, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;-0.105&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-178">
    <description> Invoke on -0.105, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;-0.105&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-179">
    <description> Invoke on 0.106, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;0.106&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-180">
    <description> Invoke on 0.106, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;0.106&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-181">
    <description> Invoke on -0.106, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;-0.106&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-182">
    <description> Invoke on -0.106, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;-0.106&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-183">
    <description> Invoke on 0.109, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;0.109&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-184">
    <description> Invoke on 0.109, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;0.109&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-185">
    <description> Invoke on -0.109, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;-0.109&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-186">
    <description> Invoke on -0.109, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;-0.109&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-187">
    <description> Invoke on 0.100, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;0.100&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-188">
    <description> Invoke on 0.100, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;0.100&quot;))</test>
    <result-string>xs:string(&quot;0&quot;)</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-189">
    <description> Invoke on -0.100, type xs:float. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:float(&quot;-0.100&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RoundFunc-190">
    <description> Invoke on -0.100, type xs:double. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:round(xs:double(&quot;-0.100&quot;))</test>
    <result-string>xs:string(&quot;-0&quot;)</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-round-1">
    <description> check dynamic type of fn:round on argument of union of numeric types. </description>
    <created by="Oliver Hallam" on="2010-03-15"/>
    <test>for $x in (1, xs:decimal(2), xs:float(3), xs:double(4)) 
            return if ((round($x)) instance of xs:integer) then &quot;integer&quot; 
           else if ((round($x)) instance of xs:decimal) then &quot;decimal&quot; 
           else if ((round($x)) instance of xs:float) then &quot;float&quot;
           else if ((round($x)) instance of xs:double) then &quot;double&quot; 
           else error()</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;integer&quot;, &quot;decimal&quot;, &quot;float&quot;, &quot;double&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-round-decimal-2">
    <description> round() applied to xs:decimal </description>
    <created by="Michael Kay" on="2011-06-21"/>
    <test>fn:round(xs:decimal(&quot;12.1&quot;))</test>
    <result-string/>
    <result>
      <all-of>
        <assert-eq>12</assert-eq>
        <assert-type>xs:decimal</assert-type>
      </all-of>
    </result>
  </test-case>
  <test-case name="fn-round-decimal-3">
    <description> round() applied to xs:decimal </description>
    <created by="Michael Kay" on="2011-06-21"/>
    <test>fn:round(xs:decimal(&quot;12.7&quot;))</test>
    <result-string/>
    <result>
      <all-of>
        <assert-eq>13</assert-eq>
        <assert-type>xs:decimal</assert-type>
      </all-of>
    </result>
  </test-case>
  <test-case name="fn-round-decimal-4">
    <description> round() applied to xs:decimal </description>
    <created by="Michael Kay" on="2011-06-21"/>
    <test>fn:round(xs:decimal(&quot;12.5&quot;))</test>
    <result-string/>
    <result>
      <all-of>
        <assert-eq>13</assert-eq>
        <assert-type>xs:decimal</assert-type>
      </all-of>
    </result>
  </test-case>
  <test-case name="fn-round-decimal-5">
    <description> round() applied to xs:decimal </description>
    <created by="Michael Kay" on="2011-06-21"/>
    <test>fn:round(xs:decimal(&quot;-12.7&quot;))</test>
    <result-string/>
    <result>
      <all-of>
        <assert-eq>-13</assert-eq>
        <assert-type>xs:decimal</assert-type>
      </all-of>
    </result>
  </test-case>
  <test-case name="fn-round-decimal-6">
    <description> round() applied to xs:decimal </description>
    <created by="Michael Kay" on="2011-06-21"/>
    <test>fn:round(xs:decimal(&quot;-12.1&quot;))</test>
    <result-string/>
    <result>
      <all-of>
        <assert-eq>-12</assert-eq>
        <assert-type>xs:decimal</assert-type>
      </all-of>
    </result>
  </test-case>
  <test-case name="fn-round-decimal-7">
    <description> round() applied to xs:decimal </description>
    <created by="Michael Kay" on="2011-06-21"/>
    <test>fn:round(xs:decimal(&quot;-12.5&quot;))</test>
    <result-string/>
    <result>
      <all-of>
        <assert-eq>-12</assert-eq>
        <assert-type>xs:decimal</assert-type>
      </all-of>
    </result>
  </test-case>
  <test-case covers="fn-round" name="fn-round-decimal-8">
    <description> round() applied to xs:decimal </description>
    <created by="Michael Kay" on="2011-06-21"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>fn:round(-12.567, 2)</test>
    <result-string/>
    <result>
      <all-of>
        <assert-eq>-12.57</assert-eq>
        <assert-type>xs:decimal</assert-type>
      </all-of>
    </result>
  </test-case>
  <test-case covers="fn-round" name="fn-round-decimal-9">
    <description> round() applied to xs:decimal </description>
    <created by="Michael Kay" on="2011-06-21"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>fn:round(-12.567, 4)</test>
    <result-string/>
    <result>
      <all-of>
        <assert-eq>-12.567</assert-eq>
        <assert-type>xs:decimal</assert-type>
      </all-of>
    </result>
  </test-case>
  <test-case covers="fn-round" name="fn-round-decimal-10">
    <description> round() applied to xs:decimal </description>
    <created by="Michael Kay" on="2011-06-21"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>fn:round(-12.567, 0)</test>
    <result-string/>
    <result>
      <all-of>
        <assert-eq>-13</assert-eq>
        <assert-type>xs:decimal</assert-type>
      </all-of>
    </result>
  </test-case>
  <test-case covers="fn-round" name="fn-round-decimal-11">
    <description> round() applied to xs:decimal </description>
    <created by="Michael Kay" on="2011-06-21"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>fn:round(-1234.567, -2)</test>
    <result-string/>
    <result>
      <all-of>
        <assert-eq>-1200</assert-eq>
        <assert-type>xs:decimal</assert-type>
      </all-of>
    </result>
  </test-case>
  <test-case covers="fn-round" name="fn-round-decimal-12">
    <description> round() applied to xs:decimal </description>
    <created by="Michael Kay" on="2011-06-21"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>fn:round(1.567, -3)</test>
    <result-string/>
    <result>
      <all-of>
        <assert-eq>0</assert-eq>
        <assert-type>xs:decimal</assert-type>
      </all-of>
    </result>
  </test-case>
  <test-case covers="fn-round" name="fn-round2args-1">
    <description>Tests the two-argument form of round()</description>
    <created by="Norman Walsh" on="2011-07-28"/>
    <modified by="Michael Kay" change="add dependency, change expected type" on="2011-07-29"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>fn:round(1.125, 2)</test>
    <result-string/>
    <result>
      <all-of>
        <assert-eq>1.13</assert-eq>
        <assert-type>xs:decimal</assert-type>
      </all-of>
    </result>
  </test-case>
  <test-case covers="fn-round" name="fn-round2args-2">
    <description>Tests the two-argument form of round()</description>
    <created by="Norman Walsh" on="2011-07-28"/>
    <modified by="Michael Kay" change="add dependency" on="2011-07-29"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>fn:round(8452, -2)</test>
    <result-string>xs:decimal(&quot;8500&quot;)</result-string>
    <result>
      <assert-eq>8500</assert-eq>
    </result>
  </test-case>
  <test-case covers="fn-round" name="fn-round2args-3">
    <description>Tests the two-argument form of round()</description>
    <created by="Norman Walsh" on="2011-07-28"/>
    <modified by="Michael Kay" change="add dependency" on="2011-07-29"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>fn:round(3.1415e0, 2)</test>
    <result-string>xs:double(&quot;3.14e0&quot;)</result-string>
    <result>
      <assert-eq>3.14e0</assert-eq>
    </result>
  </test-case>
  <test-case covers="fn-round" name="fn-round2args-4">
    <description>Tests the two-argument form of round()</description>
    <created by="Norman Walsh" on="2011-07-28"/>
    <modified by="Michael Kay" change="add dependency, make test name unique, change expected result" on="2011-07-29"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>fn:round(35.425, 2)</test>
    <result-string>xs:decimal(&quot;35.43&quot;)</result-string>
    <result>
      <assert-eq>35.43</assert-eq>
    </result>
  </test-case>
</test-set>