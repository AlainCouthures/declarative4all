<?xml version="1.0" encoding="UTF-8"?>
<test-set name="fn-parse-json" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">
  <description>
      Tests the parse-json function.
      
      Test coverage of the first argument is reasonably complete. There are few tests yet
      for the options argument.
   </description>
  <link document="http://www.w3.org/TR/xpath-functions-11/" idref="func-parse-json" type="spec"/>
  <dependency type="spec" value="XT30+"/>
  <test-case name="fn-parse-json-001">
    <description>Empty object</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json(&quot;{}&quot;)</test>
    <result-string/>
    <result>
      <assert-deep-eq>map{}</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-parse-json-002">
    <description>Singleton object, numeric value</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('{&quot;abc&quot;:12}')</test>
    <result-string/>
    <result>
      <assert-deep-eq>map{&quot;abc&quot;:=12e0}</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-parse-json-003">
    <description>Singleton object, numeric value</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('{&quot;abc&quot;:12e0}')</test>
    <result-string/>
    <result>
      <assert-deep-eq>map{&quot;abc&quot;:=12e0}</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-parse-json-004">
    <description>Singleton object, negative numeric value</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('{&quot;abc&quot;:-1.2e0}')</test>
    <result-string/>
    <result>
      <assert-deep-eq>map{&quot;abc&quot;:=-1.2e0}</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-parse-json-005">
    <description>Singleton object, boolean value</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('{&quot;abc&quot;:true}')</test>
    <result-string/>
    <result>
      <assert-deep-eq>map{&quot;abc&quot;:=true()}</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-parse-json-006">
    <description>Singleton object, boolean value</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('{&quot;abc&quot;:false}')</test>
    <result-string/>
    <result>
      <assert-deep-eq>map{&quot;abc&quot;:=false()}</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-parse-json-007">
    <description>Singleton object, null value</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('{&quot;abc&quot;:null}')</test>
    <result-string/>
    <result>
      <assert-deep-eq>map{&quot;abc&quot;:=()}</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-parse-json-008">
    <description>Two-entry object</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('{&quot;abc&quot;:true,&quot;xyz&quot;:false}')</test>
    <result-string/>
    <result>
      <assert-deep-eq>map{&quot;abc&quot;:=true(),&quot;xyz&quot;:=false()}</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-parse-json-009">
    <description>Two-entry object - same with whitespace</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json(' { &quot;abc&quot; : true , &quot;xyz&quot; : false } ')</test>
    <result-string/>
    <result>
      <assert-deep-eq>map{&quot;abc&quot;:=true(),&quot;xyz&quot;:=false()}</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-parse-json-010">
    <description>Two-entry object - same with more whitespace</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('    {   &quot;abc&quot;   :   true    ,
            &quot;xyz&quot;   :   false   
            }   ')</test>
    <result-string/>
    <result>
      <assert-deep-eq>map{&quot;abc&quot;:=true(),&quot;xyz&quot;:=false()}</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-parse-json-011">
    <description>Empty array</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json(&quot;[]&quot;)</test>
    <result-string/>
    <result>
      <all-of>
        <assert-type>map(*)</assert-type>
        <assert-count>1</assert-count>
        <assert>map:size($result) eq 0</assert>
        <assert>map:collation($result) eq &quot;http://saxon.sf.net/json/array-collation&quot;</assert>
        <!-- TEMPORARY -->
      </all-of>
    </result>
  </test-case>
  <test-case name="fn-parse-json-012">
    <description>Single-item array</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json(&quot;[12345]&quot;)</test>
    <result-string/>
    <result>
      <all-of>
        <assert-type>map(*)</assert-type>
        <assert-count>1</assert-count>
        <assert>map:contains($result, 1)</assert>
        <assert>map:get($result, 1) eq 12345</assert>
      </all-of>
    </result>
  </test-case>
  <test-case name="fn-parse-json-013">
    <description>Single-item array</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('[&quot;abcd&quot;]')</test>
    <result-string/>
    <result>
      <all-of>
        <assert-type>map(*)</assert-type>
        <assert-count>1</assert-count>
        <assert>map:contains($result, 1)</assert>
        <assert>$result(1) eq &quot;abcd&quot;</assert>
      </all-of>
    </result>
  </test-case>
  <test-case name="fn-parse-json-014">
    <description>Single-item array</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json(&quot;[true]&quot;)</test>
    <result-string/>
    <result>
      <all-of>
        <assert-type>map(*)</assert-type>
        <assert-count>1</assert-count>
        <assert>map:contains($result, 1)</assert>
        <assert>$result(1) eq true()</assert>
      </all-of>
    </result>
  </test-case>
  <test-case name="fn-parse-json-015">
    <description>Single-item array</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json(&quot;[false]&quot;)</test>
    <result-string/>
    <result>
      <all-of>
        <assert-type>map(*)</assert-type>
        <assert-count>1</assert-count>
        <assert>map:contains($result, 1)</assert>
        <assert>$result(1) eq false()</assert>
      </all-of>
    </result>
  </test-case>
  <test-case name="fn-parse-json-016">
    <description>Single-item array</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json(&quot;[null]&quot;)</test>
    <result-string/>
    <result>
      <all-of>
        <assert-type>map(*)</assert-type>
        <assert-count>1</assert-count>
        <assert>map:contains($result, 1)</assert>
        <assert>empty($result(1))</assert>
      </all-of>
    </result>
  </test-case>
  <test-case name="fn-parse-json-017">
    <description>Multi-item array</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('[1,2,3, &quot;abc&quot;, &quot;def&quot;, true, false, null]')</test>
    <result-string/>
    <result>
      <all-of>
        <assert-type>map(*)</assert-type>
        <assert-count>1</assert-count>
        <assert>every $i in 1 to 8 satisfies map:contains($result, $i)</assert>
        <assert>every $i in (0, 9, 10) satisfies not(map:contains($result, $i))</assert>
        <assert>$result(1) eq 1</assert>
        <assert>$result(5) eq &quot;def&quot;</assert>
        <assert>$result(7) eq false()</assert>
      </all-of>
    </result>
  </test-case>
  <test-case name="fn-parse-json-018">
    <description>Multi-item array - same with more whitespace</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('
        [   1,     2,  3, 
        &quot;abc&quot;,  &quot;def&quot;,   true, 
        false,  null ]
        ')</test>
    <result-string/>
    <result>
      <all-of>
        <assert-type>map(*)</assert-type>
        <assert-count>1</assert-count>
        <assert>every $i in 1 to 8 satisfies map:contains($result, $i)</assert>
        <assert>every $i in (0, 9, 10) satisfies not(map:contains($result, $i))</assert>
        <assert>$result(1) eq 1</assert>
        <assert>$result(5) eq &quot;def&quot;</assert>
        <assert>$result(7) eq false()</assert>
      </all-of>
    </result>
  </test-case>
  <test-case name="fn-parse-json-019">
    <description>Nested empty arrays</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json(&quot;[[[],[]]]&quot;)</test>
    <result-string/>
    <result>
      <all-of>
        <assert-type>map(xs:integer, map(xs:integer, map(*)))</assert-type>
        <assert-count>1</assert-count>
        <assert>map:size($result) eq 1</assert>
        <assert>map:size($result(1)) eq 2</assert>
        <assert>map:size($result(1)(2)) eq 0</assert>
      </all-of>
    </result>
  </test-case>
  <test-case name="fn-parse-json-020">
    <description>Nested non-empty arrays</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('[1, 2, [], [1], [1,2], [1,2,3]]')</test>
    <result-string/>
    <result>
      <all-of>
        <assert>map:size($result) = 6</assert>
        <assert>$result(6)(3) = 3</assert>
      </all-of>
    </result>
  </test-case>
  <test-case name="fn-parse-json-021">
    <description>Array of objects</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('[{&quot;x&quot;:12,&quot;y&quot;:5}, {&quot;x&quot;:13,&quot;y&quot;:6}]')</test>
    <result-string/>
    <result>
      <all-of>
        <assert>map:size($result) = 2</assert>
        <assert>$result(2)(&quot;y&quot;) = 6</assert>
      </all-of>
    </result>
  </test-case>
  <test-case name="fn-parse-json-022">
    <description>Object containing arrays</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('{&quot;x&quot;:[12,3], &quot;y&quot;:[14,9]}')</test>
    <result-string/>
    <result>
      <all-of>
        <assert>map:size($result) = 2</assert>
        <assert>$result(&quot;y&quot;)(2) = 9</assert>
      </all-of>
    </result>
  </test-case>
  <test-case name="fn-parse-json-023">
    <description>Number formats</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('[0.123]')</test>
    <result-string/>
    <result>
      <all-of>
        <assert>$result(1) = 0.123e0</assert>
        <assert>$result(1) instance of xs:double</assert>
      </all-of>
    </result>
  </test-case>
  <test-case name="fn-parse-json-024">
    <description>Number formats</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('[-0.123]')</test>
    <result-string/>
    <result>
      <all-of>
        <assert>$result(1) = -0.123e0</assert>
        <assert>$result(1) instance of xs:double</assert>
      </all-of>
    </result>
  </test-case>
  <test-case name="fn-parse-json-025">
    <description>Number formats</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('[-0.123e2]')</test>
    <result-string/>
    <result>
      <all-of>
        <assert>$result(1) = -0.123e2</assert>
        <assert>$result(1) instance of xs:double</assert>
      </all-of>
    </result>
  </test-case>
  <test-case name="fn-parse-json-026">
    <description>Number formats</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('[-0.123e+2]')</test>
    <result-string/>
    <result>
      <all-of>
        <assert>$result(1) = -0.123e+2</assert>
        <assert>$result(1) instance of xs:double</assert>
      </all-of>
    </result>
  </test-case>
  <test-case name="fn-parse-json-027">
    <description>Number formats</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('[-0.123e-2]')</test>
    <result-string/>
    <result>
      <all-of>
        <assert>$result(1) = -0.123e-2</assert>
        <assert>$result(1) instance of xs:double</assert>
      </all-of>
    </result>
  </test-case>
  <test-case name="fn-parse-json-028">
    <description>String formats</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('[&quot;\\&quot;]')</test>
    <result-string/>
    <result>
      <all-of>
        <assert>$result(1) = &quot;\&quot;</assert>
        <assert>$result(1) instance of xs:string</assert>
      </all-of>
    </result>
  </test-case>
  <test-case name="fn-parse-json-029">
    <description>String formats</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('[&quot;\&quot;&quot;]')</test>
    <result-string/>
    <result>
      <all-of>
        <assert>$result(1) = '&quot;'</assert>
        <assert>$result(1) instance of xs:string</assert>
      </all-of>
    </result>
  </test-case>
  <test-case name="fn-parse-json-030">
    <description>String formats</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('[&quot;\r&quot;]')</test>
    <result-string/>
    <result>
      <all-of>
        <assert>$result(1) = ''</assert>
        <assert>$result(1) instance of xs:string</assert>
      </all-of>
    </result>
  </test-case>
  <test-case name="fn-parse-json-031">
    <description>String formats</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('[&quot;\n&quot;]')</test>
    <result-string/>
    <result>
      <all-of>
        <assert>$result(1) = ''</assert>
        <assert>$result(1) instance of xs:string</assert>
      </all-of>
    </result>
  </test-case>
  <test-case name="fn-parse-json-032">
    <description>String formats</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('[&quot;\/&quot;]')</test>
    <result-string/>
    <result>
      <all-of>
        <assert>$result(1) = '/'</assert>
        <assert>$result(1) instance of xs:string</assert>
      </all-of>
    </result>
  </test-case>
  <test-case name="fn-parse-json-033">
    <description>String formats</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('[&quot;aa\u0030aa&quot;]')</test>
    <result-string/>
    <result>
      <all-of>
        <assert>$result(1) = 'aa0aa'</assert>
        <assert>$result(1) instance of xs:string</assert>
      </all-of>
    </result>
  </test-case>
  <test-case name="fn-parse-json-034">
    <description>String formats - surrogate pair</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('[&quot;\uD834\udD1E&quot;]')</test>
    <result-string/>
    <result>
      <all-of>
        <assert>$result(1) = ''</assert>
        <assert>$result(1) instance of xs:string</assert>
      </all-of>
    </result>
  </test-case>
  <test-case name="fn-parse-json-035">
    <description>String formats: effect of unescape option</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('[&quot;\r&quot;]', map{'unescape':=false()})</test>
    <result-string/>
    <result>
      <assert>$result(1) = '\r'</assert>
    </result>
  </test-case>
  <test-case name="fn-parse-json-036">
    <description>String formats: effect of unescape option</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('[&quot;\r&quot;]', map{'unescape':=true()})</test>
    <result-string/>
    <result>
      <assert>$result(1) = ''</assert>
    </result>
  </test-case>
  <test-case name="fn-parse-json-037">
    <description>String formats: effect of unescape option</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('[&quot;\u0000&quot;]', map{'unescape':=false()})</test>
    <result-string/>
    <result>
      <assert>$result(1) = '\u0000'</assert>
    </result>
  </test-case>
  <test-case name="fn-parse-json-038">
    <description>Anything allowed at Top level under ECMA spec</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('true', map{'spec':='ECMA-262'})</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-parse-json-039">
    <description>Anything allowed at Top level under ECMA spec</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('false', map{'spec':='ECMA-262'})</test>
    <result-string>xs:boolean('false')</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-parse-json-040">
    <description>Anything allowed at Top level under ECMA spec</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('null', map{'spec':='ECMA-262'})</test>
    <result-string/>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case name="fn-parse-json-041">
    <description>Anything allowed at Top level under ECMA spec</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('93.7', map{'spec':='ECMA-262'})</test>
    <result-string/>
    <result>
      <all-of>
        <assert-eq>93.7e0</assert-eq>
        <assert-type>xs:double</assert-type>
      </all-of>
    </result>
  </test-case>
  <test-case name="fn-parse-json-042">
    <description>Anything allowed at Top level under ECMA spec</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('&quot;abcd\n&quot;', map{'spec':='ECMA-262','unescape':=false()})</test>
    <result-string/>
    <result>
      <all-of>
        <assert-eq>'abcd\n'</assert-eq>
        <assert-type>xs:string</assert-type>
      </all-of>
    </result>
  </test-case>
  <!-- "real" JSON files -->
  <test-case name="fn-parse-json-101">
    <description>An example JSON file</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json(unparsed-text('parse-json/data001.json'))</test>
    <result-string/>
    <result>
      <assert-count>1</assert-count>
    </result>
  </test-case>
  <test-case name="fn-parse-json-102">
    <description>An example JSON file</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json(unparsed-text('parse-json/data002.json'))</test>
    <result-string/>
    <result>
      <assert-count>1</assert-count>
    </result>
  </test-case>
  <test-case name="fn-parse-json-103">
    <description>An example JSON file</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json(unparsed-text('parse-json/data003.json'))</test>
    <result-string/>
    <result>
      <assert-count>1</assert-count>
    </result>
  </test-case>
  <test-case name="fn-parse-json-104">
    <description>An example JSON file</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json(unparsed-text('parse-json/data004.json'))</test>
    <result-string/>
    <result>
      <assert-count>1</assert-count>
    </result>
  </test-case>
  <test-case name="fn-parse-json-105">
    <description>An example JSON file</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json(unparsed-text('parse-json/data005.json'))</test>
    <result-string/>
    <result>
      <assert-count>1</assert-count>
    </result>
  </test-case>
  <!-- error cases -->
  <test-case name="fn-parse-json-901">
    <description>Syntax error</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('[-0.123e-2[')</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOJS0001&quot;))</result-string>
    <result>
      <error code="FOJS0001"/>
    </result>
  </test-case>
  <test-case name="fn-parse-json-902">
    <description>Syntax error</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('[false')</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOJS0001&quot;))</result-string>
    <result>
      <error code="FOJS0001"/>
    </result>
  </test-case>
  <test-case name="fn-parse-json-903">
    <description>Syntax error</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('[falsehood]')</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOJS0001&quot;))</result-string>
    <result>
      <error code="FOJS0001"/>
    </result>
  </test-case>
  <test-case name="fn-parse-json-904">
    <description>Syntax error</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('[(5)]')</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOJS0001&quot;))</result-string>
    <result>
      <error code="FOJS0001"/>
    </result>
  </test-case>
  <test-case name="fn-parse-json-905">
    <description>Syntax error</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('[{5}]')</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOJS0001&quot;))</result-string>
    <result>
      <error code="FOJS0001"/>
    </result>
  </test-case>
  <test-case name="fn-parse-json-906">
    <description>Syntax error</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('[{x:23}]')</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOJS0001&quot;))</result-string>
    <result>
      <error code="FOJS0001"/>
    </result>
  </test-case>
  <test-case name="fn-parse-json-907">
    <description>Syntax error</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('23,24')</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOJS0001&quot;))</result-string>
    <result>
      <error code="FOJS0001"/>
    </result>
  </test-case>
  <test-case name="fn-parse-json-908">
    <description>Syntax error</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('[&quot;abc]')</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOJS0001&quot;))</result-string>
    <result>
      <error code="FOJS0001"/>
    </result>
  </test-case>
  <test-case name="fn-parse-json-909">
    <description>Syntax error</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('[1,2,3,]')</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOJS0001&quot;))</result-string>
    <result>
      <error code="FOJS0001"/>
    </result>
  </test-case>
  <test-case name="fn-parse-json-910">
    <description>Syntax error</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('{&quot;a&quot;:=13}')</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOJS0001&quot;))</result-string>
    <result>
      <error code="FOJS0001"/>
    </result>
  </test-case>
  <test-case name="fn-parse-json-911">
    <description>Syntax error</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('{&quot;a&quot;:13,,&quot;b&quot;:15}')</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOJS0001&quot;))</result-string>
    <result>
      <error code="FOJS0001"/>
    </result>
  </test-case>
  <test-case name="fn-parse-json-912">
    <description>Syntax error</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('{&quot;a&quot;:13')</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOJS0001&quot;))</result-string>
    <result>
      <error code="FOJS0001"/>
    </result>
  </test-case>
  <test-case name="fn-parse-json-913">
    <description>Syntax error</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('{&quot;a&quot;:{&quot;b&quot;:12}')</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOJS0001&quot;))</result-string>
    <result>
      <error code="FOJS0001"/>
    </result>
  </test-case>
  <test-case name="fn-parse-json-914">
    <description>Syntax error</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('{&quot;a&quot;:{&quot;b&quot;:12}}}')</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOJS0001&quot;))</result-string>
    <result>
      <error code="FOJS0001"/>
    </result>
  </test-case>
  <test-case name="fn-parse-json-915">
    <description>Syntax error</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('[&quot;\&quot;]')</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOJS0001&quot;))</result-string>
    <result>
      <error code="FOJS0001"/>
    </result>
  </test-case>
  <test-case name="fn-parse-json-916">
    <description>Syntax error</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('[&quot;\1&quot;]')</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOJS0001&quot;))</result-string>
    <result>
      <error code="FOJS0001"/>
    </result>
  </test-case>
  <test-case name="fn-parse-json-917">
    <description>Syntax error</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('[&quot;\u2&quot;]')</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOJS0001&quot;))</result-string>
    <result>
      <error code="FOJS0001"/>
    </result>
  </test-case>
  <test-case name="fn-parse-json-918">
    <description>Syntax error</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('[&quot;\u123u&quot;]')</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOJS0001&quot;))</result-string>
    <result>
      <error code="FOJS0001"/>
    </result>
  </test-case>
  <test-case name="fn-parse-json-919">
    <description>Syntax error: invalid character under XML 1.0</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <dependency type="xml-version" value="1.0"/>
    <test>parse-json('[&quot;\b&quot;]')</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOJS0001&quot;))</result-string>
    <result>
      <error code="FOJS0001"/>
    </result>
  </test-case>
  <test-case name="fn-parse-json-920">
    <description>Syntax error</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('[&quot;\x20&quot;]')</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOJS0001&quot;))</result-string>
    <result>
      <error code="FOJS0001"/>
    </result>
  </test-case>
  <test-case name="fn-parse-json-921">
    <description>String formats: \s is not allowed by the RFC</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('[&quot;\s&quot;]')</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOJS0001&quot;))</result-string>
    <result>
      <error code="FOJS0001"/>
    </result>
  </test-case>
  <test-case name="fn-parse-json-922">
    <description>String formats - unpaired surrogate</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('[&quot;\uD834&quot;]')</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOJS0001&quot;))</result-string>
    <result>
      <error code="FOJS0001"/>
    </result>
  </test-case>
  <test-case name="fn-parse-json-923">
    <description>String formats - surrogate pair</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('[&quot;\udD1E&quot;]')</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOJS0001&quot;))</result-string>
    <result>
      <error code="FOJS0001"/>
    </result>
  </test-case>
  <test-case name="fn-parse-json-924">
    <description>String formats: effect of unescape option: invalid XML character</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('[&quot;\u0000&quot;]', map{'unescape':=true()})</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOJS0001&quot;))</result-string>
    <result>
      <error code="FOJS0001"/>
    </result>
  </test-case>
  <test-case name="fn-parse-json-925">
    <description>Anything not allowed at Top level under RFC spec</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('true', map{'spec':='RFC4627'})</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOJS0001&quot;))</result-string>
    <result>
      <error code="FOJS0001"/>
    </result>
  </test-case>
  <test-case name="fn-parse-json-926">
    <description>Anything not allowed at Top level under RFC spec</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('false', map{'spec':='RFC4627'})</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOJS0001&quot;))</result-string>
    <result>
      <error code="FOJS0001"/>
    </result>
  </test-case>
  <test-case name="fn-parse-json-927">
    <description>Anything not allowed at Top level under RFC spec</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('null', map{'spec':='RFC4627'})</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOJS0001&quot;))</result-string>
    <result>
      <error code="FOJS0001"/>
    </result>
  </test-case>
  <test-case name="fn-parse-json-928">
    <description>Anything not allowed at Top level under RFC spec</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('93.7', map{'spec':='RFC4627'})</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOJS0001&quot;))</result-string>
    <result>
      <error code="FOJS0001"/>
    </result>
  </test-case>
  <test-case name="fn-parse-json-929">
    <description>Anything not allowed at Top level under RFC spec</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('&quot;abcd\n&quot;', map{'spec':='RFC4627','unescape':=false()})</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOJS0001&quot;))</result-string>
    <result>
      <error code="FOJS0001"/>
    </result>
  </test-case>
  <test-case name="fn-parse-json-930">
    <description>Invalid number</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('[.3]')</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOJS0001&quot;))</result-string>
    <result>
      <error code="FOJS0001"/>
    </result>
  </test-case>
  <test-case name="fn-parse-json-931">
    <description>Invalid number</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('[01]')</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOJS0001&quot;))</result-string>
    <result>
      <error code="FOJS0001"/>
    </result>
  </test-case>
  <test-case name="fn-parse-json-932">
    <description>Invalid number</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('[00.00]')</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOJS0001&quot;))</result-string>
    <result>
      <error code="FOJS0001"/>
    </result>
  </test-case>
  <test-case name="fn-parse-json-933">
    <description>Invalid number</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('[+23]')</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOJS0001&quot;))</result-string>
    <result>
      <error code="FOJS0001"/>
    </result>
  </test-case>
  <test-case name="fn-parse-json-934">
    <description>Invalid number</description>
    <created by="Michael Kay, Saxonica" on="2011-03-31"/>
    <test>parse-json('[1.234f0]')</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOJS0001&quot;))</result-string>
    <result>
      <error code="FOJS0001"/>
    </result>
  </test-case>
</test-set>