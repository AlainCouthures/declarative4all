<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="fn-normalize-unicode">
   <description>Tests for the normalize-unicode() function</description>
   <link type="spec" document="http://www.w3.org/TR/xpath-functions-30/"
         idref="func-normalize-unicode"/>

   <test-case name="fn-normalize-unicode1args-1">
      <description>Test normalize-unicode with simple text input </description>
      <created by="Joanne Tong" on="2005-09-29"/>
      <test>normalize-unicode('Nothing to normalize.')</test>
      <result>
         <assert-string-value>Nothing to normalize.</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-normalize-unicode1args-2">
      <description>Test normalize-unicode with empty sequence argument </description>
      <created by="Joanne Tong" on="2005-09-29"/>
      <test>normalize-unicode(())</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="fn-normalize-unicode1args-3">
      <description>Test fn:normalize-unicode on combining characters for LATIN CAPITAL LETTER A WITH RING (w/ ACUTE) and ANGSTROM SIGN </description>
      <created by="Joanne Tong" on="2005-09-29"/>
      <test>matches('&#506;', normalize-unicode('A&#778;&#769;'))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fn-normalize-unicode1args-4">
      <description>Test fn:normalize-unicode on combining characters for LATIN CAPITAL LETTER A WITH RING (w/ ACUTE) and ANGSTROM SIGN </description>
      <created by="Joanne Tong" on="2005-09-29"/>
      <test>matches('&#197;', normalize-unicode('A&#778;'))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fn-normalize-unicode1args-5">
      <description>Test fn:normalize-unicode on combining characters for LATIN CAPITAL LETTER A WITH RING (w/ ACUTE) and ANGSTROM SIGN </description>
      <created by="Joanne Tong" on="2005-09-29"/>
      <test>matches('A&#778;', normalize-unicode('A&#778;'))</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fn-normalize-unicode1args-6">
      <description>Test fn:normalize-unicode on combining characters for LATIN CAPITAL LETTER A WITH RING (w/ ACUTE) and ANGSTROM SIGN </description>
      <created by="Joanne Tong" on="2005-09-29"/>
      <test>(normalize-unicode('&#197;') eq normalize-unicode('&#8491;'))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fn-normalize-unicode1args-7">
      <description>Test normalize-unicode with invalid argument types </description>
      <created by="Joanne Tong" on="2005-09-29"/>
      <test>normalize-unicode(12)</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="fn-normalize-unicode1args-8">
      <description>Test normalize-unicode with incorrect arity </description>
      <created by="Joanne Tong" on="2005-09-29"/>
      <test>normalize-unicode('','','')</test>
      <result>
         <error code="XPST0017"/>
      </result>
   </test-case>

   <test-case name="fn-normalize-unicode2args-1">
      <description>Test normalize-unicode with simple text input and NFC </description>
      <created by="Joanne Tong" on="2005-09-29"/>
      <test>normalize-unicode('Nothing to normalize.', 'NFC')</test>
      <result>
         <assert-string-value>Nothing to normalize.</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-normalize-unicode2args-2">
      <description>Test normalize-unicode with simple text input and NFC spelled differently </description>
      <created by="Joanne Tong" on="2005-09-29"/>
      <test>normalize-unicode('Nothing to normalize.', 'nFc')</test>
      <result>
         <assert-string-value>Nothing to normalize.</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-normalize-unicode2args-3">
      <description>Test normalize-unicode with empty sequence argument and NFC </description>
      <created by="Joanne Tong" on="2005-09-29"/>
      <test>normalize-unicode((), 'NFC')</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="fn-normalize-unicode2args-4">
      <description>Test fn:normalize-unicode where the second argument is the zero-length string, no normalization is performed </description>
      <created by="Joanne Tong" on="2005-09-29"/>
      <test>(normalize-unicode('&#197;', '') eq normalize-unicode('&#8491;', ''))</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fn-normalize-unicode2args-5">
      <description>Test normalize-unicode with invalid argument types </description>
      <created by="Joanne Tong" on="2005-09-29"/>
      <test>normalize-unicode('',())</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="fn-normalize-unicode2args-6">
      <description>Test normalize-unicode with invalid argument types </description>
      <created by="Joanne Tong" on="2005-09-29"/>
      <test>normalize-unicode('',12)</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="fn-normalize-unicode-1">
      <description> Evaluation of fn:normalize-unicode to ensure that " NFC " is the same as "NFC". </description>
      <created by="Carmelo Montanez" on="2005-11-29"/>
      <test>fn:concat(fn:normalize-unicode("&#197;"," NFC "),fn:normalize-unicode("&#197;","NFC"))</test>
      <result>
         <assert-string-value>&#197;&#197;</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-normalize-unicode-2">
      <description> Evaluation of fn:normalize-unicode with a normalization form that attempts to raise a non-implemented form </description>
      <created by="Carmelo Montanez" on="2005-11-29"/>
      <test>fn:normalize-unicode("&#232;","chancesareyoudonotsupportthis123ifyoudowaoo")</test>
      <result>
         <error code="FOCH0003"/>
      </result>
   </test-case>

   <test-case name="fn-normalize-unicode-3">
      <description> Evaluation of fn:normalize-unicode with nothing to normalize and used as argument to fn:upper-case </description>
      <created by="Carmelo Montanez" on="2005-11-29"/>
      <test>fn:upper-case(fn:normalize-unicode("normalizedstring"))</test>
      <result>
         <assert-string-value>NORMALIZEDSTRING</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-normalize-unicode-4">
      <description> Evaluation of fn:normalize-unicode with nothing to normalize and used as argument to fn:lower-case </description>
      <created by="Carmelo Montanez" on="2005-11-29"/>
      <test>fn:lower-case(fn:normalize-unicode("NORMALIZEDSTRING"))</test>
      <result>
         <assert-string-value>normalizedstring</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-normalize-unicode-5">
      <description> Evaluation of fn:normalize-unicode with nothing to normalize and used as argument to fn:string-length </description>
      <created by="Carmelo Montanez" on="2005-11-29"/>
      <test>fn:string-length(fn:normalize-unicode("NORMALIZEDSTRING"))</test>
      <result>
         <assert-string-value>16</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-normalize-unicode-6">
      <description> Evaluation of fn:normalize-unicode with nothing to normalize and used as argument to fn:concat </description>
      <created by="Carmelo Montanez" on="2005-11-29"/>
      <test>fn:concat(fn:normalize-unicode("NORMALIZEDSTRING"),"another string")</test>
      <result>
         <assert-string-value>NORMALIZEDSTRINGanother string</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-normalize-unicode-7">
      <description> Evaluation of fn:normalize-unicode with nothing to normalize and used as argument to fn:substring </description>
      <created by="Carmelo Montanez" on="2005-11-29"/>
      <test>fn:substring(fn:normalize-unicode("NORMALIZEDSTRING"),5)</test>
      <result>
         <assert-string-value>ALIZEDSTRING</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-normalize-unicode-8">
      <description> Evaluation of fn:normalize-unicode with noncharacter argument </description>
      <created by="Oliver Hallam" on="2009-12-08"/>
      <test>string-to-codepoints(normalize-unicode('&#64976;'))</test>
      <result>
         <assert-string-value>64976</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-normalize-unicode-9">
      <description> Evaluation of fn:normalize-unicode with noncharacters in argument </description>
      <created by="Oliver Hallam" on="2009-12-08"/>
      <test>string-to-codepoints(fn:normalize-unicode('e&#770;&#64976;e&#770;&#64976;e&#770;'))</test>
      <result>
         <assert-deep-eq>234, 64976, 234, 64976, 234</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fn-normalize-unicode-10">
      <description> Evaluation of fn:normalize-unicode with noncharacters in argument </description>
      <created by="Oliver Hallam" on="2009-12-08"/>
      <test>string-to-codepoints(fn:normalize-unicode('e&#64976;&#770;'))</test>
      <result>
         <assert-deep-eq>101, 64976, 770</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fn-normalize-unicode-11">
      <description> Bug 7935: normalize-unicode() applied to unassigned codepoints 
        Result should be empty, indicating that normalization is idempotent on these 
        characters derived from the Unicode 5.2 database - essentially a list of characters 
        that are legal in XML but undefined in Unicode 5.2 </description>
      <created by="Michael Kay" on="2010-01-12"/>
      <dependency type="spec" value="XQ10+"/>
      <test file="normalize-unicode/fn-normalize-unicode-11.xq"/>
      <result>
         <assert-xml><![CDATA[<out/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="K-NormalizeUnicodeFunc-1">
      <description> A test whose essence is: `normalize-unicode()`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>normalize-unicode()</test>
      <result>
         <error code="XPST0017"/>
      </result>
   </test-case>

   <test-case name="K-NormalizeUnicodeFunc-2">
      <description> A test whose essence is: `normalize-unicode("a string", "NFC", "wrong param")`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>normalize-unicode("a string", "NFC", "wrong param")</test>
      <result>
         <error code="XPST0017"/>
      </result>
   </test-case>

   <test-case name="K-NormalizeUnicodeFunc-3">
      <description> A test whose essence is: `normalize-unicode("a string", "example.com/notSupported/")`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>normalize-unicode("a string", "example.com/notSupported/")</test>
      <result>
         <error code="FOCH0003"/>
      </result>
   </test-case>

   <test-case name="K-NormalizeUnicodeFunc-4">
      <description> A test whose essence is: `normalize-unicode("foo") eq "foo"`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>normalize-unicode("foo") eq "foo"</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NormalizeUnicodeFunc-5">
      <description> A test whose essence is: `normalize-unicode("foo", "NFC") eq "foo"`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>normalize-unicode("foo", "NFC") eq "foo"</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NormalizeUnicodeFunc-6">
      <description> A test whose essence is: `normalize-unicode("foo", "NFD") eq "foo"`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="unicode-normalization-form" value="NFD"/>
      <test>normalize-unicode("foo", "NFD") eq "foo"</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NormalizeUnicodeFunc-7">
      <description> A test whose essence is: `normalize-unicode("foo", "NFKD") eq "foo"`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="unicode-normalization-form" value="NFKD"/>
      <test>normalize-unicode("foo", "NFKD") eq "foo"</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NormalizeUnicodeFunc-8">
      <description> A test whose essence is: `normalize-unicode("foo", "NFKC") eq "foo"`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="unicode-normalization-form" value="NFKC"/>
      <test>normalize-unicode("foo", "NFKC") eq "foo"</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NormalizeUnicodeFunc-9">
      <description> A test whose essence is: `normalize-unicode("f oo", "") eq "f oo"`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>normalize-unicode("f oo", "") eq "f oo"</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NormalizeUnicodeFunc-10">
      <description> A test whose essence is: `normalize-unicode("foo", "") eq "foo"`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>normalize-unicode("foo", "") eq "foo"</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NormalizeUnicodeFunc-11">
      <description> A test whose essence is: `normalize-unicode("f oo") eq "f oo"`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>normalize-unicode("f oo") eq "f oo"</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NormalizeUnicodeFunc-12">
      <description> A test whose essence is: `normalize-unicode("f oo", "NFC") eq "f oo"`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>normalize-unicode("f oo", "NFC") eq "f oo"</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NormalizeUnicodeFunc-13">
      <description> Static typing implementations may raise XPTY0004. See http://www.w3.org/Bugs/Public/show_bug.cgi?id=4551 for details. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>normalize-unicode(("a string", error()), "NFC")</test>
      <result>
         <any-of>
            <error code="FOER0000"/>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>
   
   <test-case name="cbcl-fn-normalize-unicode-001">
      <description> tests FULLY-NORMALIZED </description>
      <created by="Nick Jones" on="2008-06-13"/>      
      <modified by="Michael Kay" on="2012-10-30"/>     
      <dependency type="unicode-normalization-form" value="FULLY-NORMALIZED"/>
      <test>normalize-unicode("blah","FULLY-NORMALIZED")</test>
      <result>
	    <assert-string-value>blah</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="cbcl-fn-normalize-unicode-001a">
      <description> tests FULLY-NORMALIZED; alternative version of test for processors
         that do not implement this normalization form </description>
      <created by="Nick Jones" on="2008-06-13"/>      
      <modified by="Michael Kay" on="2012-10-30"/>     
      <dependency type="unicode-normalization-form" value="FULLY-NORMALIZED" satisfied="false"/>
      <test>normalize-unicode("blah","FULLY-NORMALIZED")</test>
      <result>
	    <error code="FOCH0003"/>
      </result>
   </test-case>
   

   <test-case name="cbcl-fn-normalize-unicode-002">
      <description> Tests boolean(normalize-unicode(...)) </description>
      <created by="Nick Jones" on="2008-06-13"/>      
      <test>boolean(normalize-unicode("blah","NFC"))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   

   <test-case name="cbcl-fn-normalize-unicode-003">
      <description> Tests boolean(normalize-unicode(....)) with an error thrown </description>
      <created by="Nick Jones" on="2008-06-13"/>      
      <test>boolean(normalize-unicode("blah","ZZZ"))</test>
      <result>
         <error code="FOCH0003"/>
      </result>
   </test-case>
   

   <test-case name="cbcl-fn-normalize-unicode-004">
      <description> tests normalize-unicode on empty </description>
      <created by="Nick Jones" on="2008-06-13"/>      
      <test>normalize-unicode((),"NFC")</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>
   

   <test-case name="cbcl-fn-normalize-unicode-005">
      <description> Tests normalize-unicode on empty </description>
      <created by="Nick Jones" on="2008-06-13"/>      
      <test>normalize-unicode("","NFC")</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>
   
   <test-case name="cbcl-fn-normalize-unicode-006">
      <description> Tests a composing character by itself </description>
      <created by="Nick Jones" on="2008-06-16"/>     
      <modified by="Michael Kay" on="2012-10-30"/>     
      <dependency type="unicode-normalization-form" value="FULLY-NORMALIZED"/>
      <test>normalize-unicode(codepoints-to-string(2494),"FULLY-NORMALIZED")</test>
      <result>
	    <assert-string-value> &#2494;</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="cbcl-fn-normalize-unicode-006a">
      <description> Tests a composing character by itself; alternative version of test
        for processors that do not implement FULLY-NORMALIZED </description>
      <created by="Nick Jones" on="2008-06-16"/>
      <modified by="Michael Kay" on="2012-10-30"/>     
      <dependency type="unicode-normalization-form" value="FULLY-NORMALIZED" satisfied="false"/>
      <test>normalize-unicode(codepoints-to-string(2494),"FULLY-NORMALIZED")</test>
      <result>
	    <error code="FOCH0003"/>
      </result>
   </test-case>
</test-set>
