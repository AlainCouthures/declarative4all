<?xml version="1.0" encoding="UTF-8"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="fn-filter" covers="fn-filter">
    <description>Tests for the higher-order fn:filter function</description>
    <link type="spec" document="http://www.w3.org/TR/xpath-functions-30/" idref="func-filter"/>
    

    <dependency type="spec" value="XP30+ XQ30+"/>
    <dependency type="feature" value="higherOrderFunctions"/>
    
    <test-case name="filter-001" covers="partial-function-application">
        <description>Basic test using starts-with()</description>
        <created by="Michael Kay" on="2010-02-10"/>
        <test>filter(("apple", "pear", "apricot", "advocado", "orange"),starts-with(?, "a"))</test>
        <result>
            <assert-deep-eq>"apple", "apricot", "advocado"</assert-deep-eq>
        </result>
    </test-case>
    <test-case name="filter-002">
        <description>Test using an inline user-defined function</description>
        <created by="Michael Kay" on="2010-02-10"/>
        <test>filter((12, 4, 46, 23, -8), function($x){$x gt 10})</test>
        <result>
            <assert-deep-eq>12, 46, 23</assert-deep-eq>
        </result>
    </test-case>
    <test-case name="filter-003">
        <description>Test using an inline user-defined function</description>
        <created by="Michael Kay" on="2010-02-10"/>
        <environment>
            <source role="." file="filter/filter003.xml">
                <description/>
                <created by="Michael Kay" on="2010-02-10"/>
            </source>
        </environment>
        <dependency type="spec" value="XQ30+"/>
        <test>let $data := (/employees)
              return filter($data/emp, function($x as element(emp)){xs:int($x/@salary) lt 300})</test>
        <result>
                <all-of>
                    <assert-count>3</assert-count>
                    <assert-type>element(emp)*</assert-type>
                    <assert>$result/@name = 'john'</assert>
                    <assert>$result/@name = 'anne'</assert>
                    <assert>$result/@name = 'kumar'</assert>
                </all-of>
        </result>
    </test-case>
    <test-case name="filter-004">
        <description>Test using an inline user-defined function</description>
        <created by="Michael Kay" on="2010-02-10"/>
        <test>(1 to 20)[. = filter(1 to position(), function($x){$x idiv 2 * 2 = $x})]</test>
        <result>
                <assert-deep-eq>2, 4, 6, 8, 10, 12, 14, 16, 18, 20</assert-deep-eq>
        </result>
    </test-case>
    <test-case name="filter-005">
        <description>implement eg:index-of-node()</description>
        <created by="Michael Kay" on="2010-02-10"/>
        <environment>
            <source role="." file="filter/filter005.xml">
                <description/>
                <created by="Michael Kay" on="2010-02-10"/>
            </source>
        </environment>
        <test>let $index-of-node := function($seqParam as node()*, $srchParam as node()) as xs:integer* 
                                    { filter( 1 to count($seqParam), function($this as xs:integer) as xs:boolean
                                              {$seqParam[$this] is $srchParam} ) },
            $nodes := /*/*,
            $perm := ($nodes[1], $nodes[2], $nodes[3], $nodes[1], $nodes[2], $nodes[4], $nodes[2], $nodes[1]) 
            return $index-of-node($perm, $nodes[2]) </test>
        <result>
                <assert-deep-eq>2, 5, 7</assert-deep-eq>
        </result>
    </test-case>
    <test-case name="filter-901">
        <description>filter function - not a boolean</description>
        <created by="Michael Kay" on="2010-02-10"/>
        <test>filter(("apple", "pear", "apricot", "advocado", "orange"), normalize-space#1)</test>
        <result>
                <error code="XPTY0004"/>
        </result>
    </test-case>
    <test-case name="filter-902">
        <description>filter function - returns empty sequence </description>
        <created by="Michael Kay" on="2010-02-10"/>
        <test>filter(("apple", "pear", "apricot", "advocado", "orange"), function($x){if(starts-with($x,'a')) then true() else ()})</test>
        <result>
                <error code="XPTY0004"/>
        </result>
    </test-case>
    <test-case name="filter-903">
        <description>filter function - returns non-singleton sequence</description>
        <created by="Michael Kay" on="2010-02-10"/>
        <test>filter( ("apple", "pear", "apricot", "advocado", "orange"), function($x){if(starts-with($x,'a')) then (true(), true()) else false()})</test>
        <result>
                <error code="XPTY0004"/>
        </result>
    </test-case>
    <test-case name="filter-904" covers="partial-function-application">
        <description>filter function - item in sequence is of wrong type</description>
        <created by="Michael Kay" on="2010-02-10"/>
        <test>filter(("apple", "pear", "apricot", "advocado", "orange", current-date()), ends-with(?, 'e'))</test>
        <result>
                <error code="XPTY0004"/>
        </result>
    </test-case>
    
   <test-case name="fn-filter-001">
      <description>Attempts to evaluate the "filter" function with no arguments.</description>
      <created by="Tim Mills" on="2012-05-01"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>fn:filter()</test>
      <result>
         <error code="XPST0017" />
      </result>
   </test-case>

   <test-case name="fn-filter-002">
      <description>Attempts to reference the "filter" function with arity zero.</description>
      <created by="Tim Mills" on="2012-05-01"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>fn:filter#0</test>
      <result>
         <error code="XPST0017" />
      </result>
   </test-case>

   <test-case name="fn-filter-003">
      <description>Attempts to evaluate the "filter" function with one argument.</description>
      <created by="Tim Mills" on="2012-05-01"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>fn:filter( fn:boolean#1 )</test>
      <result>
         <error code="XPST0017" />
      </result>
   </test-case>

   <test-case name="fn-filter-004">
      <description>Attempts to reference the "filter" function with arity one.</description>
      <created by="Tim Mills" on="2012-05-01"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>fn:filter#1</test>
      <result>
         <error code="XPST0017" />
      </result>
   </test-case>

   <test-case name="fn-filter-005">
      <description>Attempts to reference the "filter" function with arity two.</description>
      <created by="Tim Mills" on="2012-05-01"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>fn:exists( fn:filter#2 )</test>
      <result>
         <assert-true />
      </result>
   </test-case>

   <test-case name="fn-filter-006">
      <description>Tests the type checking of the $f argument.</description>
      <created by="Tim Mills" on="2012-05-01"/>
      <dependency type="feature" value="staticTyping"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>( fn:filter( (), if ( fn:current-dateTime() eq
                            fn:dateTime( fn:current-date(),
                                         fn:current-time() ))
                         then fn:exists#1
                         else 1 ),
              fn:filter( (), if ( fn:current-dateTime() eq
                            fn:dateTime( fn:current-date(),
                                         fn:current-time() ))
                         then 1
                         else fn:exists#1 ) )</test>
      <result>
         <error code="XPTY0004" />
      </result>
   </test-case>

   <test-case name="fn-filter-007">
      <description>Tests the type checking of the $f argument.</description>
      <created by="Tim Mills" on="2012-05-01"/>
      <dependency type="feature" value="staticTyping"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>fn:filter( (), if ( fn:current-dateTime() eq
                          fn:dateTime( fn:current-date(),
                                       fn:current-time() ))
                       then fn:exists#1
                       else 1 )</test>
      <result>
         <error code="XPTY0004" />
      </result>
   </test-case>

   <test-case name="fn-filter-008">
      <description>Tests the type checking of the $f argument.</description>
      <created by="Tim Mills" on="2012-05-01"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <dependency type="feature" value="staticTyping"/>
      <test>fn:filter( (), fn:true() )</test>
      <result>
         <error code="XPTY0004" />
      </result>
   </test-case>

   <test-case name="fn-filter-009">
      <description>Tests the type checking of the $f argument.</description>
      <created by="Tim Mills" on="2012-05-01"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <dependency type="feature" value="staticTyping"/>
      <test>fn:filter( (), fn:true() )</test>
      <result>
         <error code="XPTY0004" />
      </result>
   </test-case>

   <test-case name="fn-filter-010">
      <description>Tests the type checking of the $f argument.</description>
      <created by="Tim Mills" on="2012-05-01"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>fn:filter( (), function($a as item()) as xs:boolean* { fn:boolean($a), fn:boolean($a) } )</test>
      <result>
	<any-of>
	  <error code="XPST0005" />
	  <assert-empty />
	</any-of>
      </result>
   </test-case>

   <test-case name="fn-filter-011">
      <description>Tests the type checking of the $f argument.</description>
      <created by="Tim Mills" on="2012-05-01"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>fn:filter( (), function($a as item()) as xs:boolean? { () } )</test>
      <result>
	<any-of>
	  <error code="XPST0005" />
	  <assert-empty />
	</any-of>
      </result>
   </test-case>

   <test-case name="fn-filter-012">
      <description>Tests the type checking of the $f argument.</description>
      <created by="Tim Mills" on="2012-05-01"/>
      <modified by="Tim Mills" on="2012-05-31" change="See bug 17250"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>fn:filter( (), fn:string#1 )</test>
      <result>
	<any-of>
	  <error code="XPTY0004" />
	  <error code="XPST0005" />
	  <assert-empty />
	</any-of>
      </result>
   </test-case>

   <test-case name="fn-filter-013">
      <description>Evaluates the "filter" function with $seq set to a mix of item types </description>
      <created by="Tim Mills" on="2012-05-01"/>
      <environment>
         <source role="." file="filter/fn-filter-012.xml">
            <description/>
            <created by="Tim Mills" on="2012-05-01"/>
         </source>
      </environment>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>fn:filter( (//node(), 1, "string", 3.14, 2.7e0, fn:exists#1), function($arg) { $arg instance of function(*) } )</test>
      <result>
	     <assert-count>1</assert-count>
      </result>
   </test-case>

   <test-case name="fn-filter-014">
      <description>Evaluates the "filter" function with $f set to a function which _could_ (but doesn't) return a non-boolean value </description>
      <created by="Tim Mills" on="2012-05-01"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>fn:filter( 1 to 10, function($arg) { if ($arg eq 100) then () else fn:true()})</test>
      <result>
	<assert-count>10</assert-count>
      </result>
   </test-case>

   <test-case name="fn-filter-015">
      <description>Evaluates the "filter" function with $f set to a function which _could_ (and does) return a non-boolean value </description>
      <created by="Tim Mills" on="2012-05-01"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>fn:filter( 1 to 10, function($arg) { if ($arg eq 10) then () else fn:true()})</test>
      <result>
         <error code="XPTY0004" />
      </result>
   </test-case>

   <test-case name="fn-filter-016">
      <description>Evaluates the "filter" function with $f set to a function which _could_ (but doesn't) return a non-boolean value </description>
      <created by="Tim Mills" on="2012-05-01"/>
      <dependency type="feature" value="staticTyping"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>fn:filter( 1 to 10, function($arg) { if ($arg eq 100) then () else fn:true()})</test>
      <result>
         <error code="XPTY0004" />
      </result>
   </test-case>

   <test-case name="fn-filter-017">
      <description>Evaluates the "filter" function with $f set to a function which _could_ (but doesn't) return a non-boolean value </description>
      <created by="Tim Mills" on="2012-05-01"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>fn:filter( 1 to 10, function($arg) { if ($arg eq 100) then 0 else fn:true()})</test>
      <result>
	<assert-count>10</assert-count>
      </result>
   </test-case>

   <test-case name="fn-filter-018">
      <description>Evaluates the "filter" function with $f set to a function which _could_ (and does) return a non-boolean value </description>
      <created by="Tim Mills" on="2012-05-01"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>fn:filter( 1 to 10, function($arg) { if ($arg eq 10) then 0 else fn:true()})</test>
      <result>
         <error code="XPTY0004" />
      </result>
   </test-case>

   <test-case name="fn-filter-019">
      <description>Evaluates the "filter" function with $f set to a function which _could_ (but doesn't) return a non-boolean value </description>
      <created by="Tim Mills" on="2012-05-01"/>
      <dependency type="feature" value="staticTyping"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>fn:filter( 1 to 10, function($arg) { if ($arg eq 100) then 0 else fn:true()})</test>
      <result>
         <error code="XPTY0004" />
      </result>
   </test-case>

   <test-case name="fn-filter-020">
      <description>Evaluates the "filter" function with $f set to a function which _could_ (but doesn't) return a non-boolean value </description>
      <created by="Tim Mills" on="2012-05-01"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>fn:filter( 1 to 10, function($arg) { if ($arg eq 100) then (fn:true(), fn:false()) else fn:true()})</test>
      <result>
	<assert-count>10</assert-count>
      </result>
   </test-case>

   <test-case name="fn-filter-021">
      <description>Evaluates the "filter" function with $f set to a function which _could_ (and does) return a non-boolean value </description>
      <created by="Tim Mills" on="2012-05-01"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>fn:filter( 1 to 10, function($arg) { if ($arg eq 10) then (fn:true(), fn:false()) else fn:true()})</test>
      <result>
         <error code="XPTY0004" />
      </result>
   </test-case>

   <test-case name="fn-filter-022">
      <description>Evaluates the "filter" function with $f set to a function which _could_ (but doesn't) return a non-boolean value </description>
      <created by="Tim Mills" on="2012-05-01"/>
      <dependency type="feature" value="staticTyping"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>fn:filter( 1 to 10, function($arg) { if ($arg eq 100) then (fn:true(), fn:false()) else fn:true()})</test>
      <result>
         <error code="XPTY0004" />
      </result>
   </test-case>

   <test-case name="fn-filter-023">
      <description>Evaluates the "filter" function with $f set to a function which expects integers, but is supplied with strings.</description>
      <created by="Tim Mills" on="2012-05-01"/>
      <dependency type="feature" value="staticTyping"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>fn:filter( ("1", "2", "3"), function($arg as xs:integer) as xs:boolean { $arg eq 100 } )</test>
      <result>
         <error code="XPTY0004" />
      </result>
   </test-case>

</test-set>
