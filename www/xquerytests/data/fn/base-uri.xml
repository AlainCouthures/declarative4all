<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="fn-base-uri">
   <description>Tests for the base-uri() function</description>
   <link type="spec" document="http://www.w3.org/TR/xpath-functions-30/"
         idref="func-base-uri"/>
         
   <environment name="TopMany">
      <source role="." file="../prod/AxisStep/TopMany.xml">
         <description>Like TreeCompass, but with comments and PIs off the root. PI targets vary.
            All text nodes must have non-whitespace characters.</description>
         <created by="David Marston" on="2003-03-25"/>   
      </source>
   </environment>      

   <test-case name="fn-base-uri-1" covers="fn-base-uri">
      <description> Evaluation of base-uri function with no arguments and no context item </description>
      <created by="Carmelo Montanez" on="2005-11-21"/>
      <dependency type="spec" value="XQ10+"/>
      <test>declare namespace eg = "http://example.org"; declare function eg:noContextFunction() { fn:base-uri() }; declare variable $input-context1 external; eg:noContextFunction()</test>
      <result>
         <error code="XPDY0002"/>
      </result>
   </test-case>

   <test-case name="fn-base-uri-2" covers="fn-base-uri">
      <description> Evaluation of base-uri function with context item not a node </description>
      <created by="Carmelo Montanez" on="2005-11-21"/>
      <test>(1 to 100)[fn:base-uri()]</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="fn-base-uri-3" covers="fn-base-uri">
      <description> Evaluation of base-uri function with argument set to empty sequence Use fn:count to avoid empty file. </description>
      <created by="Carmelo Montanez" on="2005-11-21"/>
      <test>fn:count(fn:base-uri(()))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-base-uri-4">
      <description> Evaluation of base-uri function with argument set to a directly constructed comment </description>
      <created by="Carmelo Montanez" on="2005-11-21"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[fn:base-uri(<!-- A comment -->)]]></test>
      <result>
         <assert-empty/>
      </result>
   </test-case>

   <test-case name="fn-base-uri-5">
      <description> Evaluation of base-uri function with argument set to a computed constructed comment </description>
      <created by="Carmelo Montanez" on="2005-11-21"/>
      <dependency type="spec" value="XQ10+"/>
      <test>fn:base-uri(comment {"A Comment Node "})</test>
      <result>
         <assert-empty/>
      </result>
   </test-case>

   <test-case name="fn-base-uri-6">
      <description> Evaluation of base-uri function with argument set to a computed constructed Text node. </description>
      <created by="Carmelo Montanez" on="2005-11-21"/>
      <dependency type="spec" value="XQ10+"/>
      <test>fn:base-uri(text {"A Text Node"})</test>
      <result>
         <assert-empty/>
      </result>
   </test-case>

   <test-case name="fn-base-uri-7">
      <description> Evaluation of base-uri function with argument set to a computed constructed Element node with not base-xml argument. </description>
      <created by="Carmelo Montanez" on="2005-11-22"/>
      <dependency type="spec" value="XQ10+"/>
      <test>fn:count(fn:base-uri(element anElement {"An Element Node"}))</test>
      <result>
         <any-of>
            <assert-eq>1</assert-eq>
            <assert-eq>0</assert-eq>
         </any-of>
      </result>
   </test-case>

   <test-case name="fn-base-uri-8">
      <description> Evaluation of base-uri function with argument set to a directly constructed Element node with not base-xml argument. Use fn:count to avoid empty file. </description>
      <created by="Carmelo Montanez" on="2005-11-22"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[fn:count(fn:base-uri(<anElement>Element content</anElement>))]]></test>
      <result>
         <any-of>
            <assert-eq>1</assert-eq>
            <assert-eq>0</assert-eq>
         </any-of>
      </result>
   </test-case>

   <test-case name="fn-base-uri-9">
      <description> Evaluation of base-uri function with argument set to a directly constructed Element node with base-xml argument. Use fn:string </description>
      <created by="Carmelo Montanez" on="2005-11-22"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[fn:string(fn:base-uri(<anElement xml:base="http://example.com/examples">Element content</anElement>))]]></test>
      <result>
         <assert-string-value>http://example.com/examples</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-base-uri-10">
      <description> Evaluation of base-uri function with argument set to a directly constructed Element node with base-xml argument (no escaping). Use fn:string </description>
      <created by="Carmelo Montanez" on="2005-11-22"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[fn:string(fn:base-uri(<anElement xml:base="http://www.example.com">Element content</anElement>))]]></test>
      <result>
         <assert-string-value>http://www.example.com</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-base-uri-11">
      <description> Evaluation of base-uri function with argument set to a computed constructed Document node with no base-xml argument. Use fn:count </description>
      <created by="Carmelo Montanez" on="2005-11-22"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[fn:count(fn:base-uri(document {<aDocument>some content</aDocument>}))]]></test>
      <result>
         <any-of>
            <assert-eq>0</assert-eq>
            <assert-eq>1</assert-eq>
         </any-of>
      </result>
   </test-case>

   <test-case name="fn-base-uri-12">
      <description> Evaluation of base-uri function with argument set to a computed constructed Document node argument. Uses declared base uri property Use fn:string </description>
      <created by="Carmelo Montanez" on="2005-11-22"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare base-uri "http://example.org"; 
            fn:string(fn:base-uri(document {<aDocument>some content</aDocument>}))]]></test>
      <result>
         <assert-string-value>http://example.org</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-base-uri-13">
      <description> Evaluation of base-uri function with argument set to a directly constructed element node argument. Should not declared base uri property Use fn:string </description>
      <created by="Carmelo Montanez" on="2005-11-22"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare base-uri "http://example.org"; fn:string(fn:base-uri(<anElement>some content</anElement>))]]></test>
      <result>
         <assert-string-value>http://example.org</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-base-uri-14">
      <description> Evaluation of base-uri function with argument set to a computed constructed attribute node argument. </description>
      <created by="Carmelo Montanez" on="2005-11-22"/>
      <dependency type="spec" value="XQ10+"/>
      <test>fn:base-uri(attribute anAttribute{"attribute value"})</test>
      <result>
         <assert-empty/>
      </result>
   </test-case>

   <test-case name="fn-base-uri-15">
      <description> Evaluation of base-uri function with argument set to a directly constructed PI node argument. </description>
      <created by="Carmelo Montanez" on="2005-11-22"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[fn:base-uri(<?format role="output" ?>)]]></test>
      <result>
         <assert-empty/>
      </result>
   </test-case>

   <test-case name="fn-base-uri-16">
      <description> Evaluation of base-uri function with argument set to a computed constructed PI node argument. Use fn:count to avoid empty file </description>
      <created by="Carmelo Montanez" on="2005-11-22"/>
      <dependency type="spec" value="XQ10+"/>
      <test>fn:base-uri(processing-instruction {"PItarget"} {"PIcontent"})</test>
      <result>
         <assert-empty/>
      </result>
   </test-case>

   <test-case name="fn-base-uri-17">
      <description> Evaluation of base-uri function with argument set to a computed constructed PI node argument. Use fn:count to avoid empty file. Should not use the declare base-uri </description>
      <created by="Carmelo Montanez" on="2005-11-22"/>
      <dependency type="spec" value="XQ10+"/>
      <test>
         declare base-uri "http://example.org"; 
         fn:base-uri(processing-instruction {"PItarget"} {"PIcontent"})</test>
      <result>
         <assert-empty/>
      </result>
   </test-case>

   <test-case name="fn-base-uri-18">
      <description> Evaluation of base-uri function with argument set to a directly constructed element node (via FLOWR expr). Use the declare base-uri </description>
      <created by="Carmelo Montanez" on="2005-11-22"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare base-uri "http://example.org"; 
        let $var := <anElement>With some contexnt</anElement> 
        return fn:string(fn:base-uri($var))]]></test>
      <result>
         <assert-string-value>http://example.org</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-base-uri-19">
      <description> Evaluation of base-uri function with argument set to a directly constructed element node (via FLOWR expr). Use the xml-base attribute </description>
      <created by="Carmelo Montanez" on="2005-11-22"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $var := <anElement xml:base="http://www.examples.com">With some content</anElement> 
        return fn:string(fn:base-uri($var))]]></test>
      <result>
         <assert-string-value>http://www.examples.com</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-base-uri-20">
      <description> Evaluation of base-uri function with argument set to a directly constructed element node (via FLOWR expr). Use the xml-base attribute and should ignore declared base uri property. </description>
      <created by="Carmelo Montanez" on="2005-11-22"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare base-uri "http://example.org"; 
        let $var := <anElement xml:base="http://www.examples.com">With some content</anElement> 
        return fn:string(fn:base-uri($var))]]></test>
      <result>
         <assert-string-value>http://www.examples.com</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-base-uri-21">
      <description> Evaluation of base-uri function with argument set to a directly constructed comment node (via FLOWR expr). Should ignore declared base uri property. </description>
      <created by="Carmelo Montanez" on="2005-11-22"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare base-uri "http://example.org"; 
        let $var := <!-- A Comment --> return fn:base-uri($var)]]></test>
      <result>
         <assert-empty/>
      </result>
   </test-case>

   <test-case name="fn-base-uri-22">
      <description> Evaluation of base-uri function using the "." and no context item. </description>
      <created by="Carmelo Montanez" on="2006-02-07"/>
      <dependency type="spec" value="XQ10+"/>
      <test>declare namespace eg = "http://example.org"; 
        declare function eg:noContextFunction() { fn:base-uri(.) }; 
        eg:noContextFunction()</test>
      <result>
         <error code="XPDY0002"/>
      </result>
   </test-case>

   <test-case name="fn-base-uri-23">
      <description> Evaluation of base-uri function with argument set to a directly constructed Element node with base-xml argument that needs escaping. Uses fn:string. </description>
      <created by="Carmelo Montanez" on="2006-03-10"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[fn:string(fn:base-uri(<anElement xml:base="http://example.com/examples">Element content</anElement>))]]></test>
      <result>
         <assert-string-value>http://example.com/examples</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-base-uri-24" covers="fn-base-uri">
      <description> Evaluation of base-uri#0 function with context item set to a directly constructed comment </description>
      <created by="Tim Mills" on="2013-01-18"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[(<!-- A comment -->)/base-uri()]]></test>
      <result>
         <assert-empty/>
      </result>
   </test-case>

   <test-case name="fn-base-uri-25" covers="fn-base-uri">
      <description> Evaluation of base-uri#0 function with context item set to a computed constructed comment </description>
      <created by="Tim Mills" on="2013-01-18"/>
      <dependency type="spec" value="XQ30+"/>
      <test>(comment {"A Comment Node "})/fn:base-uri()</test>
      <result>
         <assert-empty/>
      </result>
   </test-case>

   <test-case name="fn-base-uri-26" covers="fn-base-uri">
      <description> Evaluation of base-uri#0 function with context item set to a computed constructed Text node. </description>
      <created by="Tim Mills" on="2013-01-18"/>
      <dependency type="spec" value="XQ30+"/>
      <test>(text {"A Text Node"})/fn:base-uri()</test>
      <result>
         <assert-empty/>
      </result>
   </test-case>

   <test-case name="fn-base-uri-27" covers="fn-base-uri">
      <description> Evaluation of base-uri#0 function with context item set to a computed constructed Element node with not base-xml argument. </description>
      <created by="Tim Mills" on="2013-01-18"/>
      <dependency type="spec" value="XQ30+"/>
      <test>fn:count((element anElement {"An Element Node"})/base-uri())</test>
      <result>
         <any-of>
            <assert-eq>1</assert-eq>
            <assert-eq>0</assert-eq>
         </any-of>
      </result>
   </test-case>

   <test-case name="fn-base-uri-28" covers="fn-base-uri">
      <description> Evaluation of base-uri#0 function with context item set to a directly constructed Element node with not base-xml argument. Use fn:count to avoid empty file. </description>
      <created by="Tim Mills" on="2013-01-18"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[fn:count((<anElement>Element content</anElement>)/fn:base-uri())]]></test>
      <result>
         <any-of>
            <assert-eq>1</assert-eq>
            <assert-eq>0</assert-eq>
         </any-of>
      </result>
   </test-case>

   <test-case name="fn-base-uri-29" covers="fn-base-uri">
      <description> Evaluation of base-uri#0 function with context item set to a directly constructed Element node with base-xml argument. Use fn:string </description>
      <created by="Tim Mills" on="2013-01-18"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[fn:string((<anElement xml:base="http://example.com/examples">Element content</anElement>)/fn:base-uri())]]></test>
      <result>
         <assert-string-value>http://example.com/examples</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-base-uri-30" covers="fn-base-uri">
      <description> Evaluation of base-uri#0 function with context item set to a directly constructed Element node with base-xml argument (no escaping). Use fn:string </description>
      <created by="Tim Mills" on="2013-01-18"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[fn:string((<anElement xml:base="http://www.example.com">Element content</anElement>)/base-uri())]]></test>
      <result>
         <assert-string-value>http://www.example.com</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-base-uri-31" covers="fn-base-uri">
      <description> Evaluation of base-uri#0 function with context item set to a computed constructed Document node with no base-xml argument. Use fn:count </description>
      <created by="Tim Mills" on="2013-01-18"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[fn:count((document {<aDocument>some content</aDocument>})/base-uri())]]></test>
      <result>
         <any-of>
            <assert-eq>0</assert-eq>
            <assert-eq>1</assert-eq>
         </any-of>
      </result>
   </test-case>

   <test-case name="fn-base-uri-32" covers="fn-base-uri">
      <description> Evaluation of base-uri#0 function with context item set to a computed constructed Document node argument. Uses declared base uri property Use fn:string </description>
      <created by="Tim Mills" on="2013-01-18"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[declare base-uri "http://example.org"; 
            fn:string((document {<aDocument>some content</aDocument>})/base-uri())]]></test>
      <result>
         <assert-string-value>http://example.org</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-base-uri-33" covers="fn-base-uri">
      <description> Evaluation of base-uri#0 function with context item set to a directly constructed element node argument. Should not declared base uri property Use fn:string </description>
      <created by="Tim Mills" on="2013-01-18"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[declare base-uri "http://example.org"; fn:string((<anElement>some content</anElement>)/fn:base-uri())]]></test>
      <result>
         <assert-string-value>http://example.org</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-base-uri-34" covers="fn-base-uri">
      <description> Evaluation of base-uri#0 function with context item set to a computed constructed attribute node argument. </description>
      <created by="Tim Mills" on="2013-01-18"/>
      <dependency type="spec" value="XQ30+"/>
      <test>(attribute anAttribute{"attribute value"})/fn:base-uri()</test>
      <result>
         <assert-empty/>
      </result>
   </test-case>

   <test-case name="fn-base-uri-35" covers="fn-base-uri">
      <description> Evaluation of base-uri#0 function with context item set to a directly constructed PI node argument. </description>
      <created by="Tim Mills" on="2013-01-18"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[(<?format role="output" ?>)/fn:base-uri()]]></test>
      <result>
         <assert-empty/>
      </result>
   </test-case>

   <test-case name="fn-base-uri-36" covers="fn-base-uri">
      <description> Evaluation of base-uri#0 function with context item set to a computed constructed PI node argument. Use fn:count to avoid empty file </description>
      <created by="Tim Mills" on="2013-01-18"/>
      <dependency type="spec" value="XQ30+"/>
      <test>(processing-instruction {"PItarget"} {"PIcontent"})/base-uri()</test>
      <result>
         <assert-empty/>
      </result>
   </test-case>

   <test-case name="fn-base-uri-37" covers="fn-base-uri">
      <description> Evaluation of base-uri#0 function with context item set to a computed constructed PI node argument. Use fn:count to avoid empty file. Should not use the declare base-uri </description>
      <created by="Tim Mills" on="2013-01-18"/>
      <dependency type="spec" value="XQ30+"/>
      <test>
         declare base-uri "http://example.org"; 
         (processing-instruction {"PItarget"} {"PIcontent"})/base-uri()</test>
      <result>
         <assert-empty/>
      </result>
   </test-case>

   <test-case name="fn-base-uri-38" covers="fn-base-uri">
      <description> Evaluation of base-uri#0 function with context item set to a directly constructed element node (via FLOWR expr). Use the declare base-uri </description>
      <created by="Tim Mills" on="2013-01-18"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[declare base-uri "http://example.org"; 
        let $var := <anElement>With some contexnt</anElement> 
        return fn:string(($var)/base-uri())]]></test>
      <result>
         <assert-string-value>http://example.org</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-base-uri-39" covers="fn-base-uri">
      <description> Evaluation of base-uri#0 function with context item set to a directly constructed element node (via FLOWR expr). Use the xml-base attribute </description>
      <created by="Tim Mills" on="2013-01-18"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[let $var := <anElement xml:base="http://www.examples.com">With some content</anElement> 
        return fn:string(($var)/base-uri())]]></test>
      <result>
         <assert-string-value>http://www.examples.com</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-base-uri-40" covers="fn-base-uri">
      <description> Evaluation of base-uri#0 function with context item set to a directly constructed element node (via FLOWR expr). Use the xml-base attribute and should ignore declared base uri property. </description>
      <created by="Tim Mills" on="2013-01-18"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[declare base-uri "http://example.org"; 
        let $var := <anElement xml:base="http://www.examples.com">With some content</anElement> 
        return fn:string(($var)/base-uri())]]></test>
      <result>
         <assert-string-value>http://www.examples.com</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-base-uri-41" covers="fn-base-uri">
      <description> Evaluation of base-uri#0 function with context item set to a directly constructed comment node (via FLOWR expr). Should ignore declared base uri property. </description>
      <created by="Tim Mills" on="2013-01-18"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[declare base-uri "http://example.org"; 
        let $var := <!-- A Comment --> return ($var)/base-uri()]]></test>
      <result>
         <assert-empty/>
      </result>
   </test-case>

   <test-case name="fn-base-uri-42" covers="fn-base-uri">
      <description> Evaluation of base-uri#0 function using undefined context item. </description>
      <created by="Tim Mills" on="2013-01-18"/>
      <dependency type="spec" value="XQ30+"/>
      <test>declare namespace eg = "http://example.org"; 
        declare function eg:noContextFunction() { fn:base-uri() }; 
        eg:noContextFunction()</test>
      <result>
         <error code="XPDY0002"/>
      </result>
   </test-case>

   <test-case name="fn-base-uri-43" covers="fn-base-uri">
      <description> Evaluation of base-uri#0 function with context item set to a directly constructed Element node with base-xml argument that needs escaping. Uses fn:string. </description>
      <created by="Tim Mills" on="2013-01-18"/>
      <dependency type="spec" value="XQ30+"/>
      <test><![CDATA[fn:string((<anElement xml:base="http://example.com/examples">Element content</anElement>)/fn:base-uri())]]></test>
      <result>
         <assert-string-value>http://example.com/examples</assert-string-value>
      </result>
   </test-case>


   <test-case name="K-BaseURIFunc-1">
      <description> A test whose essence is: `base-uri((), "wrong param")`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>base-uri((), "wrong param")</test>
      <result>
         <error code="XPST0017"/>
      </result>
   </test-case>

   <test-case name="K-BaseURIFunc-2">
      <description> A test whose essence is: `empty(base-uri(()))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(base-uri(()))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-BaseURIFunc-1">
      <description> Invoke on a comment node. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[empty(document-uri(<!-- comment -->))]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-BaseURIFunc-2">
      <description> Invoke on an attribute node. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>empty(document-uri(attribute name {"content"}))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-BaseURIFunc-3">
      <description> Invoke on a processing instruction node. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[empty(document-uri(<?target data?>))]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-BaseURIFunc-4">
      <description> Invoke on a processing instruction node. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>empty(document-uri(processing-instruction name {123}))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-BaseURIFunc-5">
      <description> Invoke on a text node. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>empty(document-uri(text {123}))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-BaseURIFunc-6">
      <description> Invoke on a single element node. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[empty(document-uri(<elem/>))]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-BaseURIFunc-7">
      <description> Invoke on a single attribute node. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[empty(document-uri(<elem attr="f"/>/@attr))]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-BaseURIFunc-8">
      <description> Invoke on a single document node. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>empty(document-uri(document {1}))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-BaseURIFunc-9">
      <description> Ensure processing-instructions pick up the correct xml:base value. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $i := <e xml:base="http://www.example.com/"><?target data?></e> 
        return base-uri($i/processing-instruction()[1])]]></test>
      <result>
         <assert-string-value>http://www.example.com/</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-BaseURIFunc-10">
      <description> Ensure computed processing-instructions pick up the correct xml:base value. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $i := <e xml:base="http://www.example.com/">{processing-instruction target {"data"}}</e> return base-uri($i/processing-instruction()[1])]]></test>
      <result>
         <assert-string-value>http://www.example.com/</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-BaseURIFunc-11">
      <description> Ensure comments pick up the correct xml:base value. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $i := <e xml:base="http://www.example.com/"><!-- content --></e> return base-uri($i/comment()[1])]]></test>
      <result>
         <assert-string-value>http://www.example.com/</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-BaseURIFunc-12">
      <description> Ensure computed comments pick up the correct xml:base value. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $i := <e xml:base="http://www.example.com/">{comment {"content"}}</e> return base-uri($i/comment()[1])]]></test>
      <result>
         <assert-string-value>http://www.example.com/</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-BaseURIFunc-13">
      <description> Ensure computed comments don't pick up the base-uri from the static context. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>declare base-uri "http://www.example.com"; empty(base-uri(comment {"content"}))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-BaseURIFunc-14">
      <description> Ensure computed comments don't pick up the base-uri from the static context. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare base-uri "http://www.example.com"; empty(base-uri(<!-- comment -->))]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-BaseURIFunc-15">
      <description> Ensure computed processing-instructions don't pick up the base-uri from the static context. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>declare base-uri "http://www.example.com"; empty(base-uri(processing-instruction target {"data"}))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-BaseURIFunc-16">
      <description> Ensure processing-instructions don't pick up the base-uri from the static context. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare base-uri "http://www.example.com"; empty(base-uri(<?target data?>))]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-BaseURIFunc-17">
      <description> Ensure computed attributes don't pick up the base-uri from the static context. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>declare base-uri "http://www.example.com"; empty(base-uri(attribute name {"data"}))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-BaseURIFunc-18">
      <description> Ensure computed attributes pick up the base-uri from parent. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare base-uri "http://www.example.com"; let $i := <e attr="foo"></e> return base-uri($i/@attr)]]></test>
      <result>
         <assert-string-value>http://www.example.com</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-BaseURIFunc-19">
      <description> Ensure computed attributes pick up the resolved base-uri of the parent. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare base-uri "http://www.example.com/"; let $i := <e xml:base = "foo/../xml" attr="foo"> </e> return base-uri($i/@attr)]]></test>
      <result>
         <assert-string-value>http://www.example.com/xml</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-BaseURIFunc-20">
      <description> Ensure computed attributes pick up the resolved base-uri of the parent(#2). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare base-uri "http://www.example.com/"; let $i := <e xml:base = "foo/../xml" attr="foo"> </e> return base-uri($i/@xml:base)]]></test>
      <result>
         <assert-string-value>http://www.example.com/xml</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-BaseURIFunc-21">
      <description> Ensure that the return value of document-uri() is of correct type. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <environment ref="TopMany"/>
      <dependency type="spec" value="XQ10+"/>
      <test>for $i in (1, base-uri(.), 3) return 
        typeswitch($i) 
        case xs:anyURI return "xs:anyURI" 
        case xs:integer return "xs:integer" 
        default return "FAILURE"</test>
      <result>
         <assert-string-value>xs:integer xs:anyURI xs:integer</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-BaseURIFunc-22">
      <description> Ensure that the base URI is empty for direct PI constructors. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[declare base-uri "http://example.com/baseURI"; empty(base-uri(<?target data?>))]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-BaseURIFunc-23">
      <description> Ensure that the base URI is empty for computed PI constructors. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>declare base-uri "http://example.com/baseURI"; empty(base-uri(processing-instruction target {"data"}))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-BaseURIFunc-24">
      <description> Ensure that the base URI is empty for direct PI constructors, with no base-uri declaration. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[empty(base-uri(<?target data?>))]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-BaseURIFunc-25">
      <description> Ensure that the base URI is empty for computed PI constructors, with no base-uri declaration. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>empty(base-uri(processing-instruction target {"data"}))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-BaseURIFunc-26">
      <description> Ensure that the base URI is empty for computed attribute constructors, with no base-uri declaration. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>empty(base-uri(attribute name {"value"}))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-BaseURIFunc-27">
      <description> Ensure that the base URI is set for computed documents. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>declare base-uri "http://example.com/BASEURI"; base-uri(document {()})</test>
      <result>
         <assert-string-value>http://example.com/BASEURI</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-BaseURIFunc-28">
      <description> Check the document URI and base URI simultaneously for a computed document node. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>declare base-uri "http://example.com/"; let $i := document {()} return ("Base URI:", base-uri($i), "Document URI:", document-uri($i))</test>
      <result>
         <assert-string-value>Base URI: http://example.com/ Document URI:</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-BaseURIFunc-29">
      <description> Use an URI in an xml:base element that is a valid URI, but an invalid HTTP URL. Since implementations aren't required to validate specific schemes but allowed to, this may either raise an error or return the URI. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[let $i := fn:base-uri(<anElement xml:base="http:\\example.com\\examples">Element content</anElement>) return $i eq "http:\\example.com\\examples" or empty($i)]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-BaseURIFunc-30">
      <description> Use an empty xml:base attribute. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[fn:base-uri(<anElement xml:base="http://example.com/examples"><b xml:base=""/>Element content</anElement>/b)]]></test>
      <result>
         <assert-string-value>http://example.com/examples</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-BaseURIFunc-31">
      <description> Compute the base URI from a processing instruction. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[fn:base-uri(exactly-one(<anElement xml:base="http://example.com/examples"><?target data?></anElement>/processing-instruction()))]]></test>
      <result>
         <assert-string-value>http://example.com/examples</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-BaseURIFunc-32">
      <description> Compute the base URI from a comment. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[fn:base-uri(exactly-one(<anElement xml:base="http://example.com/examples"><!-- a comment --></anElement>/comment()))]]></test>
      <result>
         <assert-string-value>http://example.com/examples</assert-string-value>
      </result>
   </test-case>

   <test-case name="K2-BaseURIFunc-33">
      <description> Ensure recursive resolution works. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[<e xml:base="http://example.com/ABC/"> <a xml:base="../"> <b xml:base="DEF/file.test"/> </a> </e>/a/b/base-uri()]]></test>
      <result>
         <assert-string-value>http://example.com/DEF/file.test</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="cbcl-base-uri-001">
      <description>The base-uri property of the copied node, and of each of its descendants, 
      is set to be the same as that of its new parent, unless it (the child node) has an xml:base attribute, 
      in which case its base-uri property is set to the value of that attribute, resolved (if it is relative) 
      against the base-uri property of its new parent node. 
      </description>
      <created by="Tim Mills" on="2007-02-27"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
      	let $d := document { <root xml:base="http://www.w3.org/"><implicit-base><child /></implicit-base><explicit-base xml:base="http://www.w3.org/TR/xquery"><child /></explicit-base></root> } 
      	return let $y := <copy xml:base="http://www.example.org"> { $d/root/explicit-base } </copy> return fn:base-uri(($y/explicit-base)[1])
      ]]></test>
      <result>
         <assert-string-value>http://www.w3.org/TR/xquery</assert-string-value>
      </result>
   </test-case>
   <test-case name="cbcl-base-uri-002">
      <description>
      The base-uri property of the copied node, and of each of its descendants, is set to be the same as 
      that of its new parent, unless it (the child node) has an xml:base attribute, in which case its 
      base-uri property is set to the value of that attribute, resolved (if it is relative) against 
      the base-uri property of its new parent node. 
	  </description>
      <created by="Tim Mills" on="2007-02-27"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
      let $d := document { <root xml:base="http://www.w3.org/"> <implicit-base><child /></implicit-base> <explicit-base xml:base="http://www.w3.org/TR/xquery"><child /></explicit-base> </root> } 
      return let $y := <copy xml:base="http://www.example.org"> { $d/root/explicit-base } </copy> 
      return fn:base-uri(($y/explicit-base/child)[1])
      ]]></test>
      <result>
         <assert-string-value>http://www.w3.org/TR/xquery</assert-string-value>
      </result>
   </test-case>
   <test-case name="cbcl-base-uri-003">
      <description>
      The base-uri property of the copied node, and of each of its descendants, is set to be the 
      same as that of its new parent, unless it (the child node) has an xml:base attribute, 
      in which case its base-uri property is set to the value of that attribute, resolved 
      (if it is relative) against the base-uri property of its new parent node. 
      </description>
      <created by="Tim Mills" on="2007-02-27"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
      let $d := document { <root xml:base="http://www.w3.org/"> <implicit-base><child /></implicit-base> <explicit-base xml:base="http://www.w3.org/TR/xquery"><child /></explicit-base> </root> } 
      return let $y := <copy xml:base="http://www.example.org"> { $d/root/implicit-base } </copy> 
      return fn:base-uri(($y/implicit-base)[1])
      ]]></test>
      <result>
         <assert-string-value>http://www.example.org</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="cbcl-base-uri-004">
      <description>
      The base-uri property of the copied node, and of each of its descendants, is set to be the 
      same as that of its new parent, unless it (the child node) has an xml:base attribute, 
      in which case its base-uri property is set to the value of that attribute, resolved 
      (if it is relative) against the base-uri property of its new parent node. 
	  </description>
      <created by="Tim Mills" on="2007-02-27"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[
      let $d := document { <root xml:base="http://www.w3.org/"> <implicit-base><child /></implicit-base> <explicit-base xml:base="http://www.w3.org/TR/xquery"><child /></explicit-base> </root> } 
      return let $y := <copy xml:base="http://www.example.org"> { $d/root/implicit-base } </copy> 
      return fn:base-uri(($y/implicit-base/child)[1])
      ]]></test>
      <result>
         <assert-string-value>http://www.example.org</assert-string-value>
      </result>
   </test-case>
   
</test-set>
