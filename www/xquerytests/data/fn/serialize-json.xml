<?xml version="1.0" encoding="UTF-8"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="fn-serialize-json">
   <description>
      Tests the serialize-json function.
    </description>
   
   <link type="spec" document="http://www.w3.org/TR/xpath-functions-11/" idref="func-serialize-json"/>
   
   <dependency type="spec" value="XT30+"/>
   
   <test-case name="fn-serialize-json-001">
      <description>Empty object</description>
      <created by="Michael Kay, Saxonica" on="2011-04-06"/>
      <test>serialize-json(map{})</test>
      <result>
         <assert>translate($result,' &#x9;&#xa;&#xd;', '') = '{}'</assert>
         <!-- failing - produces "[]" -->
      </result>
   </test-case>
   <test-case name="fn-serialize-json-002">
      <description>Empty object</description>
      <created by="Michael Kay, Saxonica" on="2011-04-06"/>
      <test>serialize-json((), map{"spec":="ECMA-262"})</test>
      <result>
         <assert>translate($result,' &#x9;&#xa;&#xd;', '') = 'null'</assert>
       </result>
   </test-case>
   <test-case name="fn-serialize-json-003">
      <description>Empty object</description>
      <created by="Michael Kay, Saxonica" on="2011-04-06"/>
      <test>serialize-json(12.5, map{"spec":="ECMA-262"})</test>
      <result>
         <assert>number($result) = 12.5</assert>
       </result>
   </test-case>
   <test-case name="fn-serialize-json-004">
      <description>Boolean value</description>
      <created by="Michael Kay, Saxonica" on="2011-04-06"/>
      <test>normalize-space(serialize-json(true(), map{"spec":="ECMA-262"}))</test>
      <result>
         <assert-string-value>true</assert-string-value>
       </result>
   </test-case>
   <test-case name="fn-serialize-json-005">
      <description>Boolean value</description>
      <created by="Michael Kay, Saxonica" on="2011-04-06"/>
      <test>normalize-space(serialize-json(false(), map{"spec":="ECMA-262"}))</test>
      <result>
         <assert-string-value>false</assert-string-value>
       </result>
   </test-case>
   <test-case name="fn-serialize-json-006">
      <description>Singleton object</description>
      <created by="Michael Kay, Saxonica" on="2011-04-06"/>
      <test>serialize-json(map{'abc':=23})</test>
      <result>
         <assert>translate($result,' &#x9;&#xa;&#xd;', '') = '{"abc":23}'</assert>
      </result>
   </test-case>
   <test-case name="fn-serialize-json-007">
      <description>Two-entry object</description>
      <created by="Michael Kay, Saxonica" on="2011-04-06"/>
      <test>let $r := serialize-json(map{'abc':=23, 'xyz':=49}, map{"spec":="RFC4627"})
            return translate($r,' &#x9;&#xa;&#xd;', '')</test>
      <result>
         <all-of>
           <assert>starts-with($result, '{')</assert>
           <assert>contains($result, '"abc":23')</assert>
           <assert>contains($result, '"xyz":49')</assert>
           <assert>ends-with($result, '}')</assert>
           <assert-type>xs:string</assert-type>
           <assert-count>1</assert-count>
           <assert>parse-json($result)("abc") = 23</assert>
         </all-of>
      </result>
   </test-case>
   
   <test-case name="fn-serialize-json-008">
      <description>JSON array</description>
      <created by="Michael Kay, Saxonica" on="2011-04-06"/>
      <test>let $r := serialize-json(parse-json('[1, 2, 3, "four", true, false, null]'), map{"spec":="RFC4627"})
            return translate($r,' &#x9;&#xa;&#xd;', '')</test>
      <result>
         <assert-string-value>[1,2,3,"four",true,false,null]</assert-string-value>
      </result>
   </test-case>
   <test-case name="fn-serialize-json-009">
      <description>Serialize XDM sequence</description>
      <created by="Michael Kay, Saxonica" on="2011-04-06"/>
      <test>let $r := serialize-json((1, 2, 3, "four", true(), false()), map{"spec":="RFC4627"})
            return translate($r,' &#x9;&#xa;&#xd;', '')</test>
      <result>
         <assert-string-value>[1,2,3,"four",true,false]</assert-string-value>
      </result>
   </test-case>
   <test-case name="fn-serialize-json-010">
      <description>Serialize nested arrays</description>
      <created by="Michael Kay, Saxonica" on="2011-04-06"/>
      <test>let $r := serialize-json(parse-json('[[1, 2], [3, 4], [5, 6], [7], [], [null]]'))
            return translate($r,' &#x9;&#xa;&#xd;', '')</test>
      <result>
         <assert-string-value>[[1,2],[3,4],[5,6],[7],[],[null]]</assert-string-value>
      </result>
   </test-case>
   <test-case name="fn-serialize-json-011">
      <description>Map containing a sequence</description>
      <created by="Michael Kay, Saxonica" on="2011-04-06"/>
      <test>let $r := serialize-json(map{"abc":=(1 to 10)}, map{"spec":="RFC4627"})
            return translate($r,' &#x9;&#xa;&#xd;', '')</test>
      <result>
         <assert-string-value>{"abc":[1,2,3,4,5,6,7,8,9,10]}</assert-string-value>
      </result>
   </test-case>
   <test-case name="fn-serialize-json-012">
      <description>Sequence of maps</description>
      <created by="Michael Kay, Saxonica" on="2011-04-06"/>
      <test>let $r := serialize-json((map{"abc":=1},map{"def":=2},map{"ghi":=3}))
            return translate($r,' &#x9;&#xa;&#xd;', '')</test>
      <result>
         <assert-string-value>[{"abc":1},{"def":2},{"ghi":3}]</assert-string-value>
      </result>
   </test-case>
   <test-case name="fn-serialize-json-013">
      <description>Nested maps</description>
      <created by="Michael Kay, Saxonica" on="2011-04-06"/>
      <test>let $r := serialize-json((map{"abc":=map{"abc":=1}},map{"def":=map{"def":=2}},map{"ghi":=map{"ghi":=3}}), map{"spec":="RFC4627"})
            return translate($r,' &#x9;&#xa;&#xd;', '')</test>
      <result>
         <assert-string-value>[{"abc":{"abc":1}},{"def":{"def":2}},{"ghi":{"ghi":3}}]</assert-string-value>
      </result>
   </test-case>
   <test-case name="fn-serialize-json-014">
      <description>Non-BMP string</description>
      <created by="Michael Kay, Saxonica" on="2011-04-06"/>
      <test>let $r := serialize-json('&#x1D11E;', map{"spec":="ECMA-262"})
            return translate(normalize-space($r), 'abcdef', 'ABCDEF')</test>
      <result>
         <assert-string-value>"\uD834\uDD1E"</assert-string-value>
      </result>
   </test-case>
   <test-case name="fn-serialize-json-015">
      <description>String with newline</description>
      <created by="Michael Kay, Saxonica" on="2011-04-06"/>
      <test>let $r := serialize-json('&#xa;', map{"spec":="ECMA-262"})
            return translate(normalize-space($r), 'abcdef', 'ABCDEF')</test>
      <result>
         <any-of>
            <assert-string-value>"\n"</assert-string-value>
            <assert-string-value>"\u0010"</assert-string-value>
         </any-of>
      </result>
   </test-case>
   <test-case name="fn-serialize-json-016">
      <description>Nested maps with indent="no" - require no optional space</description>
      <created by="Michael Kay, Saxonica" on="2011-04-06"/>
      <test>serialize-json((map{"abc":=map{"abc":=1}},map{"def":=map{"def":=2}},map{"ghi":=map{"ghi":=3}}),
        map{"indent":=false()})</test>
      <result>
         <assert-string-value>[{"abc":{"abc":1}},{"def":{"def":2}},{"ghi":{"ghi":3}}]</assert-string-value>
      </result>
   </test-case>
   <test-case name="fn-serialize-json-017">
      <description>Nested maps with indent="yes" - (we can't check that it's actually indented)</description>
      <created by="Michael Kay, Saxonica" on="2011-04-06"/>
      <test>let $r := serialize-json((map{"abc":=map{"abc":=1}},map{"def":=map{"def":=2}},map{"ghi":=map{"ghi":=3}}),
              map{"indent":=true(), "spec":="RFC4627"})
            return translate($r,' &#x9;&#xa;&#xd;', '')</test>
      <result>
         <assert-string-value>[{"abc":{"abc":1}},{"def":{"def":2}},{"ghi":{"ghi":3}}]</assert-string-value>
      </result>
   </test-case>
   <test-case name="fn-serialize-json-018">
      <description>Decimal number</description>
      <created by="Michael Kay, Saxonica" on="2011-04-06"/>
      <test>parse-json(serialize-json(12.34, map{"spec":="ECMA-262"}), map{"spec":="ECMA-262"})</test>
      <result>
        <all-of>
         <assert>$result eq xs:double('12.34')</assert>
         <assert>$result instance of xs:double</assert>
        </all-of>
      </result>
   </test-case>
   <test-case name="fn-serialize-json-019">
      <description>Exponential number</description>
      <created by="Michael Kay, Saxonica" on="2011-04-06"/>
      <test>parse-json(serialize-json(12.34e-30, map{"spec":="ECMA-262"}), map{"spec":="ECMA-262"})</test>
      <result>
        <all-of>
         <assert>$result eq 12.34e-30</assert>
         <assert>$result instance of xs:double</assert>
        </all-of>
      </result>
   </test-case>
   <test-case name="fn-serialize-json-020">
      <description>String with escaping</description>
      <created by="Michael Kay, Saxonica" on="2011-04-06"/>
      <test>serialize-json("abc""def", map{"spec":="ECMA-262","escape":=true()})</test>
      <result>
        <all-of>
         <assert>$result eq '"abc\"def"'</assert>
         <assert>$result instance of xs:string</assert>
        </all-of>
      </result>
   </test-case>
   <test-case name="fn-serialize-json-021">
      <description>String with no escaping</description>
      <created by="Michael Kay, Saxonica" on="2011-04-06"/>
      <test>serialize-json("abc\\def", map{"spec":="ECMA-262","escape":=false()})</test>
      <result>
        <all-of>
         <assert>$result eq '"abc\\def"'</assert>
         <assert>$result instance of xs:string</assert>
        </all-of>
      </result>
   </test-case>
   <test-case name="fn-serialize-json-022">
      <description>NaN, INF, -INF</description>
      <created by="Michael Kay, Saxonica" on="2011-04-06"/>
      <test>let $r := serialize-json((number('NaN'), number('INF'), number('-INF')))
            return translate($r,' &#x9;&#xa;&#xd;', '')</test>
      <result>
        <assert-string-value>["NaN","INF","-INF"]</assert-string-value>
      </result>
   </test-case>
   <test-case name="fn-serialize-json-023">
      <description>untypedAtomic input</description>
      <created by="Michael Kay, Saxonica" on="2011-04-06"/>
      <test>let $r := serialize-json((0,0,xs:untypedAtomic("abcd")))
            return translate($r,' &#x9;&#xa;&#xd;', '')</test>
      <result>
        <assert-string-value>[0,0,"abcd"]</assert-string-value>
      </result>
   </test-case>
   <test-case name="fn-serialize-json-024">
      <description>sparse array</description>
      <created by="Michael Kay, Saxonica" on="2011-04-06"/>
      <test>let $r := serialize-json(map{1:="a",2:="b",4:="d",10:="j",7:="g"})
            return translate($r,' &#x9;&#xa;&#xd;', '')</test>
      <result>
        <assert-string-value>["a","b",null,"d",null,null,"g",null,null,"j"]</assert-string-value>
      </result>
   </test-case>
   
   <!-- Use of fallback function -->
   
   <test-case name="fn-serialize-json-100">
      <description>Fallback converts date to string</description>
      <created by="Michael Kay, Saxonica" on="2011-04-06"/>
      <test>let $r := serialize-json((0,0,xs:date('2011-04-06')), map{"fallback":=function($v){string($v)}})
        return translate($r,' &#x9;&#xa;&#xd;', '')</test>
      <result>
        <assert-string-value>[0,0,"2011-04-06"]</assert-string-value>
      </result>
   </test-case>
   <test-case name="fn-serialize-json-101">
      <description>Fallback converts date to string</description>
      <created by="Michael Kay, Saxonica" on="2011-04-06"/>
      <test>let $r := serialize-json(map{"a":=xs:date('2011-04-06')}, map{"fallback":=function($v){string($v)}})
        return translate($r,' &#x9;&#xa;&#xd;', '')</test>
      <result>
        <assert-string-value>{"a":"2011-04-06"}</assert-string-value>
      </result>
   </test-case>
   <test-case name="fn-serialize-json-102">
      <description>Fallback converts nodes to lexical XML</description>
      <created by="Michael Kay, Saxonica" on="2011-04-06"/>
      <environment>
         <source file="serialize-json/doc001.xml" uri="http://www.w3.org/fots/serialize-json/doc001.xml"/>
         <param name="uri" as="xs:string" select="'http://www.w3.org/fots/serialize-json/doc001.xml'"/>
      </environment>
      <test>let $r := serialize-json(map{"a":=doc($uri)}, map{"fallback":=function($v){serialize($v)}})
        return translate($r,' &#x9;&#xa;&#xd;', '')</test>
      <result>
        <assert-string-value><![CDATA[{"a":"<?xmlversion=\"1.0\"encoding=\"UTF-8\"?><a>text</a>"}]]></assert-string-value>
      </result>
   </test-case>
   <test-case name="fn-serialize-json-103">
      <description>Fallback applied to a map</description>
      <created by="Michael Kay, Saxonica" on="2011-04-06"/>
      <test>let $r := serialize-json((0,0,map{true():="gogogo"}), map{"fallback":=function($v){if ($v instance of map(xs:boolean, item()*)) then "a-boolean-map" else $v}})
        return translate($r,' &#x9;&#xa;&#xd;', '')</test>
      <result>
        <assert-string-value>[0,0,"a-boolean-map"]</assert-string-value>
      </result>
   </test-case>
   <test-case name="fn-serialize-json-104">
      <description>Recursive fallback</description>
      <created by="Michael Kay, Saxonica" on="2011-04-06"/>
      <test>let $r := serialize-json((0,0,map{false():=map{false():="ok"}}), 
           map{"fallback":=function($v){
                 if ($v instance of map(xs:boolean, item()*)) 
                 then map:new(for $k in map:keys($v) return map:entry(string($k), map:get($v, $k)))  
                 else $v}})
        return translate($r,' &#x9;&#xa;&#xd;', '')</test>
      <result>
        <assert-string-value>[0,0,{"false":{"false":"ok"}}]</assert-string-value>
      </result>
   </test-case>
   
   <!-- Error cases -->
   
   <test-case name="fn-serialize-json-901">
      <description>Top level not a map, using RFC spec</description>
      <created by="Michael Kay, Saxonica" on="2011-04-06"/>
      <test>serialize-json("abcd", map{"spec":="RFC4627"})</test>
      <result>
        <error code="FOJS0002"/>
      </result>
   </test-case>
   <test-case name="fn-serialize-json-902">
      <description>Top level not a map, using RFC spec</description>
      <created by="Michael Kay, Saxonica" on="2011-04-06"/>
      <test>serialize-json(true(), map{"spec":="RFC4627"})</test>
      <result>
        <error code="FOJS0002"/>
      </result>
   </test-case>
   <test-case name="fn-serialize-json-903">
      <description>Top level not a map, using RFC spec</description>
      <created by="Michael Kay, Saxonica" on="2011-04-06"/>
      <test>serialize-json((), map{"spec":="RFC4627"})</test>
      <result>
        <error code="FOJS0002"/>
      </result>
   </test-case>
   <test-case name="fn-serialize-json-904">
      <description>Cannot serialize a date value</description>
      <created by="Michael Kay, Saxonica" on="2011-04-06"/>
      <test>serialize-json((0,0,xs:date('2011-04-06')))</test>
      <result>
        <error code="FOJS0002"/>
      </result>
   </test-case>
   <test-case name="fn-serialize-json-905">
      <description>Cannot serialize a URI value</description>
      <created by="Michael Kay, Saxonica" on="2011-04-06"/>
      <test>serialize-json(map{"uri":=xs:anyURI('http://www.w3.org/')})</test>
      <result>
        <error code="FOJS0002"/>
      </result>
   </test-case>
   <test-case name="fn-serialize-json-906">
      <description>Bad indent option</description>
      <created by="Michael Kay, Saxonica" on="2011-04-06"/>
      <test>serialize-json((1,2,3),map:entry("indent",23))</test>
      <result>
        <error code="FOJS0002"/>
      </result>
   </test-case>
   <test-case name="fn-serialize-json-907">
      <description>Bad indent option</description>
      <created by="Michael Kay, Saxonica" on="2011-04-06"/>
      <test>serialize-json((1,2,3),map:entry("indent","true"))</test>
      <result>
        <error code="FOJS0002"/>
      </result>
   </test-case>
   <test-case name="fn-serialize-json-908">
      <description>Bad indent option</description>
      <created by="Michael Kay, Saxonica" on="2011-04-06"/>
      <test>serialize-json((1,2,3),map:entry("indent",(true(),false())))</test>
      <result>
        <error code="FOJS0002"/>
      </result>
   </test-case>
   <test-case name="fn-serialize-json-909">
      <description>sparse array with negative keys</description>
      <created by="Michael Kay, Saxonica" on="2011-04-06"/>
      <test>let $r := serialize-json(map{1:="a",2:="b",4:="d",10:="j",7:="g",-1:="$$$"})
            return translate($r,' &#x9;&#xa;&#xd;', '')</test>
      <result>
        <error code="FOJS0002"/>
      </result>
   </test-case>
   <test-case name="fn-serialize-json-910">
      <description>sparse array with zero key</description>
      <created by="Michael Kay, Saxonica" on="2011-04-06"/>
      <test>let $r := serialize-json(map{1:="a",2:="b",4:="d",10:="j",7:="g",0:="$$$"})
            return translate($r,' &#x9;&#xa;&#xd;', '')</test>
      <result>
        <error code="FOJS0002"/>
      </result>
   </test-case>
   <test-case name="fn-serialize-json-911">
      <description>Bad escape option</description>
      <created by="Michael Kay, Saxonica" on="2011-04-06"/>
      <test>serialize-json((1,2,3),map:entry("escape",map{}))</test>
      <result>
        <error code="FOJS0002"/>
      </result>
   </test-case>
   


</test-set>