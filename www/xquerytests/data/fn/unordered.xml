<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="fn-unordered">
   <description>Tests for the unordered() function. (Note: many of these tests will only work if unordered() is implemented as a no-op. The tests are therefore incorrect. I'm leaving them as such until someone cares to challenge the results - Michael Kay 2011-06-30 </description>
   <link type="spec" document="http://www.w3.org/TR/xpath-functions-30/"
         idref="func-unordered"/>

   <test-case name="fn-unordered-mix-args-001">
      <description> arg: sequence of string </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:unordered( ("c",1, "xzy"))</test>
      <result>
         <assert-permutation>"c", 1, "xzy"</assert-permutation>
      </result>
   </test-case>

   <test-case name="fn-unordered-mix-args-002">
      <description> arg: sequence of string </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:unordered( ("c", "b", "a") )</test>
      <result>
         <assert-permutation>"c",  "b", "a"</assert-permutation>
      </result>
   </test-case>

   <test-case name="fn-unordered-mix-args-003">
      <description> arg: sequence of string </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:unordered ( ("a", "b", "c"))</test>
      <result>
         <assert-permutation>"a", "b", "c"</assert-permutation>
      </result>
   </test-case>

   <test-case name="fn-unordered-mix-args-004">
      <description> arg: sequence of string </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:unordered ( ("a", xs:string(""), "b", "c"))</test>
      <result>
         <assert-permutation>"a", "",  "b", "c"</assert-permutation>
      </result>
   </test-case>

   <test-case name="fn-unordered-mix-args-005">
      <description> arg: sequence of string &amp; anyURI </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:unordered ( ("a", xs:anyURI("www.example.com"), "b", "c"))</test>
      <result>
         <assert-permutation>"a", "www.example.com", "b", "c"</assert-permutation>
      </result>
   </test-case>

   <test-case name="fn-unordered-mix-args-006">
      <description> arg: sequence of string </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:unordered ( ("a", (), (), "b", "c"))</test>
      <result>
         <assert-permutation>"a", "b", "c"</assert-permutation>
      </result>
   </test-case>

   <test-case name="fn-unordered-mix-args-007">
      <description> arg: sequence of string &amp; integer </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:unordered ( ("a", xs:integer("100"), xs:integer("-100"), "b", "c"))</test>
      <result>
         <assert-permutation>"a", 100, -100, "b", "c"</assert-permutation>
      </result>
   </test-case>

   <test-case name="fn-unordered-mix-args-008">
      <description> arg: sequence of string , decimal &amp; integer </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:unordered ( ("a", xs:decimal("-1.000000000001"), xs:integer("-100"), "b", "c"))</test>
      <result>
         <assert-permutation>"a", -1.000000000001, -100, "b", "c"</assert-permutation>
      </result>
   </test-case>

   <test-case name="fn-unordered-mix-args-009">
      <description> arg: sequence of string &amp; float </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:unordered ( ("a", xs:float("INF"), "b", "c"))</test>
      <result>
         <assert-permutation>"a", xs:float("INF"), "b", "c"</assert-permutation>
      </result>
   </test-case>

   <test-case name="fn-unordered-mix-args-010">
      <description> arg: sequence of string &amp; float </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:unordered ( ("a", xs:float("-INF"), "b", "c"))</test>
      <result>
         <assert-permutation>"a", xs:float('-INF'), "b", "c"</assert-permutation>
      </result>
   </test-case>

   <test-case name="fn-unordered-mix-args-011">
      <description> arg: sequence of string &amp; float </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:unordered ( ("a", xs:float("NaN"), "b", "c"))</test>
      <result>
         <assert-permutation>"a", xs:float('NaN'), "b", "c"</assert-permutation>
      </result>
   </test-case>

   <test-case name="fn-unordered-mix-args-012">
      <description> arg: sequence of string &amp; float </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:unordered ( ("a", xs:float("1.01"), "b", "c"))</test>
      <result>
         <assert-permutation>"a", 1.01, "b", "c"</assert-permutation>
      </result>
   </test-case>

   <test-case name="fn-unordered-mix-args-013">
      <description> arg: sequence of string &amp; double </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:unordered ( ("a", xs:double("NaN"), "b", "c"))</test>
      <result>
         <assert-permutation>"a", xs:double('NaN'), "b", "c"</assert-permutation>
      </result>
   </test-case>

   <test-case name="fn-unordered-mix-args-014">
      <description> arg: sequence of string &amp; double </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:unordered ( ("a", xs:double("1.01"), "b", "c"))</test>
      <result>
         <assert-permutation>"a", 1.01, "b", "c"</assert-permutation>
      </result>
   </test-case>

   <test-case name="fn-unordered-mix-args-015">
      <description> arg: sequence of string &amp; double </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:unordered ( ("a", xs:double("-INF"), "b", "c"))</test>
      <result>
         <assert-permutation>"a", xs:double('-INF'), "b", "c"</assert-permutation>
      </result>
   </test-case>

   <test-case name="fn-unordered-mix-args-016">
      <description> arg: sequence of string &amp; double </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:unordered ( ("a", xs:double("INF"), "b", "c"))</test>
      <result>
         <assert-permutation>"a", xs:double("INF"), "b", "c"</assert-permutation>
      </result>
   </test-case>

   <test-case name="fn-unordered-mix-args-017">
      <description> arg: sequence of string &amp; boolean </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:unordered ( ("a", xs:boolean("1"), "b", "c"))</test>
      <result>
         <assert-permutation>"a", true(), "b", "c"</assert-permutation>
      </result>
   </test-case>

   <test-case name="fn-unordered-mix-args-018">
      <description> arg: sequence of string &amp; boolean </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:unordered ( ("a", xs:boolean("0"), "b", "c"))</test>
      <result>
         <assert-permutation>"a", false(), "b", "c"</assert-permutation>
      </result>
   </test-case>

   <test-case name="fn-unordered-mix-args-019">
      <description> arg: sequence of string &amp; boolean </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:unordered ( ("a", xs:boolean("true"), "b", "c"))</test>
      <result>
         <assert-permutation>"a", true(), "b", "c"</assert-permutation>
      </result>
   </test-case>

   <test-case name="fn-unordered-mix-args-020">
      <description> arg: sequence of string &amp; boolean </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:unordered ( ("a", xs:boolean("false"), "b", "c"))</test>
      <result>
         <assert-permutation>"a", false(), "b", "c"</assert-permutation>
      </result>
   </test-case>

   <test-case name="fn-unordered-mix-args-021">
      <description> arg: sequence of string &amp; date </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:unordered ( ("a", xs:date("1993-03-31"), "b", "c"))</test>
      <result>
         <assert-permutation>"a", xs:date('1993-03-31'), "b", "c"</assert-permutation>
      </result>
   </test-case>

   <test-case name="fn-unordered-mix-args-022">
      <description> arg: sequence of string &amp; dateTime </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:unordered ( ("a", xs:dateTime("1972-12-31T00:00:00"), "b", "c"))</test>
      <result>
         <assert-permutation>"a", xs:dateTime("1972-12-31T00:00:00"), "b", "c"</assert-permutation>
      </result>
   </test-case>

   <test-case name="fn-unordered-mix-args-023">
      <description> arg: sequence of string &amp; time </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:unordered ( ("a", xs:time("12:30:00"), "b", "c"))</test>
      <result>
         <assert-permutation>"a", xs:time('12:30:00'), "b", "c"</assert-permutation>
      </result>
   </test-case>

   <test-case name="K-SeqUnorderedFunc-1">
      <description> A test whose essence is: `unordered()`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>unordered()</test>
      <result>
         <error code="XPST0017"/>
      </result>
   </test-case>

   <test-case name="K-SeqUnorderedFunc-2">
      <description> A test whose essence is: `unordered(1, 2)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>unordered(1, 2)</test>
      <result>
         <error code="XPST0017"/>
      </result>
   </test-case>

   <test-case name="K-SeqUnorderedFunc-3">
      <description> A test whose essence is: `unordered(1) eq 1`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>unordered(1) eq 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqUnorderedFunc-4">
      <description> A test whose essence is: `count(unordered((1, 2, 3))) eq 3`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(unordered((1, 2, 3))) eq 3</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqUnorderedFunc-5">
      <description> A test whose essence is: `count(unordered((1, 2, current-time()))) eq 3`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(unordered((1, 2, current-time()))) eq 3</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqUnorderedFunc-6">
      <description> A test whose essence is: `empty(unordered(()))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(unordered(()))</test>
      <result>
         <any-of>
            <assert-true/>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K-SeqUnorderedFunc-7">
      <description> A test whose essence is: `deep-equal((1, 2, 3), unordered((1, 2, 3)))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>deep-equal((1, 2, 3), unordered((1, 2, 3)))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqUnorderedFunc-8">
      <description> A test whose essence is: `unordered(error())`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>unordered(error())</test>
      <result>
         <error code="FOER0000"/>
      </result>
   </test-case>
   
   <test-case name="cbcl-fn-unordered-001">
      <description> Tests optimizations for unordered </description>
      <created by="Nick Jones" on="2008-06-12"/>
      <test>boolean(unordered(reverse((1 to 10)[. div 2 = 2])))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="cbcl-fn-unordered-002">
      <description> Tries EvaluateOptionalItem on fn:unordered </description>
      <created by="Nick Jones" on="2008-06-16"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[local-name(unordered(<a><b/><c/></a>/*[1]))]]></test>
      <result>
         <assert-string-value>b</assert-string-value>
      </result>
   </test-case>

   <test-case name="cbcl-fn-unordered-003">
      <description> Tests corner evaluation case </description>
      <created by="Nick Jones" on="2008-06-27"/>
      <test>floor(unordered((1 to 10)[. div 2 = 0]))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>
</test-set>