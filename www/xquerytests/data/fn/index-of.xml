<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="fn-index-of">
   <description>Tests for the index-of function</description>
   <link type="spec" document="http://www.w3.org/TR/xpath-functions-30/"
         idref="func-index-of"/>
   <link type="spec" document="FuncOps" section-number="15.1.3" idref="func-index-of"/>
   
   <environment name="bib">
      <source role="." file="../docs/bib.xml">
         <description>Data for the the XML Query XMP use cases</description>
         <created by="XQuery WG" on="2005-02-11"/>
      </source>      
   </environment>

   <test-case name="fn-indexof-mix-args-001">
      <description> arg1: Sequence of integers , arg2: integer </description>
      <created by="Pulkita Tyagi" on="2005-05-25"/>
      <test>fn:index-of ((10, 20, 30, 30, 20, 10), 20)</test>
      <result>
         <assert-string-value>2 5</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-indexof-mix-args-002">
      <description> arg1: Sequence of integers , arg2: integer </description>
      <created by="Pulkita Tyagi" on="2005-05-25"/>
      <test>fn:index-of ((10, 20, 30, 40), 35)</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="fn-indexof-mix-args-003">
      <description> arg1: Sequence of string , arg2: string </description>
      <created by="Pulkita Tyagi" on="2005-05-25"/>
      <test>fn:index-of (("a", "sport", "and", "a", "pastime"), "a")</test>
      <result>
         <assert-string-value>1 4</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-indexof-mix-args-004">
      <description> arg1: Sequence of string , arg2: string </description>
      <created by="Pulkita Tyagi" on="2005-05-25"/>
      <test>fn:index-of(("sport", "", "and", "", "", "pastime"), "")</test>
      <result>
         <assert-string-value>2 4 5</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-indexof-mix-args-005">
      <description> arg1: empty Sequence , arg2: string </description>
      <created by="Pulkita Tyagi" on="2005-05-25"/>
      <test>fn:index-of((),"")</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="fn-indexof-mix-args-006">
      <description> arg1: Sequence of string , arg2: string </description>
      <created by="Pulkita Tyagi" on="2005-05-25"/>
      <test>fn:index-of(("sport"), "")</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="fn-indexof-mix-args-007">
      <description> arg1: empty Sequence , arg2: untypedAtomic </description>
      <created by="Pulkita Tyagi" on="2005-05-25"/>
      <test>fn:index-of((),fn:exactly-one(xs:untypedAtomic('')))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="fn-indexof-mix-args-008">
      <description> arg1: Sequence of float , arg2: float </description>
      <created by="Pulkita Tyagi" on="2005-05-25"/>
      <test>fn:index-of((xs:float('NaN')), fn:exactly-one(xs:float('NaN')))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="fn-indexof-mix-args-009">
      <description> arg1: Sequence of double , arg2: double </description>
      <created by="Pulkita Tyagi" on="2005-05-25"/>
      <test>fn:index-of((xs:double('NaN')), fn:exactly-one(xs:double('NaN')))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="fn-indexof-mix-args-010">
      <description> arg1: Sequence of double, arg2: double </description>
      <created by="Pulkita Tyagi" on="2005-05-25"/>
      <test>fn:index-of((xs:double('INF')), fn:exactly-one(xs:double('INF')))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-indexof-mix-args-011">
      <description> arg1: Sequence of double, arg2: double </description>
      <created by="Pulkita Tyagi" on="2005-05-25"/>
      <test>fn:index-of((xs:double('-INF')), fn:exactly-one(xs:double('-INF')))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-indexof-mix-args-012">
      <description> arg1: Sequence of decimal, arg2: decimal </description>
      <created by="Pulkita Tyagi" on="2005-05-25"/>
      <test>fn:index-of((xs:decimal('9.99999999999999999999999999')), fn:exactly-one(xs:decimal('9.99999999999999999999999999')))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-indexof-mix-args-013">
      <description> arg1: Sequence of decimal, arg2: decimal </description>
      <created by="Pulkita Tyagi" on="2005-05-25"/>
      <test>fn:index-of((xs:decimal('9.99999999999999999999999999')), fn:exactly-one(xs:decimal('9.9999999999999999999999999')))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="fn-indexof-mix-args-014">
      <description> arg1: Sequence of positiveInteger, arg2: positiveInteger </description>
      <created by="Pulkita Tyagi" on="2005-05-25"/>
      <test>fn:index-of((xs:positiveInteger('1'),xs:positiveInteger('2')), fn:exactly-one(xs:positiveInteger('2')))</test>
      <result>
         <assert-eq>2</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-indexof-mix-args-015">
      <description> arg1: Sequence of negativeInteger, arg2: negativeInteger </description>
      <created by="Pulkita Tyagi" on="2005-05-25"/>
      <test>fn:index-of((xs:negativeInteger('-2'), xs:negativeInteger('-1')), fn:exactly-one(xs:negativeInteger('-1')))</test>
      <result>
         <assert-eq>2</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-indexof-mix-args-016">
      <description> Use a nested sequence in the sequence to search </description>
      <created by="Ravindranath Chennoju" on="2005-05-25"/>
      <test>fn:index-of((1, (1,2,3)),1)</test>
      <result>
         <assert-string-value>1 2</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-indexof-mix-args-017">
      <description> Use multiple nested sequence in the sequence to search </description>
      <created by="Ravindranath Chennoju" on="2005-05-25"/>
      <test>fn:index-of(((1),(1), (2,1), (0,1)),1)</test>
      <result>
         <assert-string-value>1 2 4 6</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-indexof-mix-args-018">
      <description> Use external variable for the sequence parameter </description>
      <created by="Ravindranath Chennoju" on="2005-05-25"/>
      <environment ref="bib"/>
      <test>fn:index-of((/bib/book/publisher), "Addison-Wesley")</test>
      <result>
         <assert-string-value>1 2</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-indexof-mix-args-019">
      <description> Use external variable both in sequence and search parameter </description>
      <created by="Ravindranath Chennoju" on="2005-05-25"/>
      <environment ref="bib"/>
      <test>fn:index-of((/bib/book/publisher), /bib/book[1]/publisher[1]/text() cast as xs:string)</test>
      <result>
         <assert-string-value>1 2</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-indexof-mix-args-020">
      <description> Use empty string with other strings in sequence </description>
      <created by="Ravindranath Chennoju" on="2005-05-25"/>
      <test>fn:index-of(("sport", "", "and", "", "", "pastime"), "")</test>
      <result>
         <assert-string-value>2 4 5</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-indexof-mix-args-021">
      <description> Use empty string with integers in the sequence parameter </description>
      <created by="Ravindranath Chennoju" on="2005-05-25"/>
      <test>fn:index-of( ("", 1, ""), "")</test>
      <result>
         <assert-string-value>1 3</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-indexof-mix-args-022">
      <description> Use no search parameter </description>
      <created by="Ravindranath Chennoju" on="2005-05-25"/>
      <test>fn:index-of((1,2,3,4))</test>
      <result>
         <error code="XPST0017"/>
      </result>
   </test-case>

   <test-case name="K-SeqIndexOfFunc-1">
      <description> A test whose essence is: `index-of()`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>index-of()</test>
      <result>
         <error code="XPST0017"/>
      </result>
   </test-case>

   <test-case name="K-SeqIndexOfFunc-2">
      <description> A test whose essence is: `index-of(1)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>index-of(1)</test>
      <result>
         <error code="XPST0017"/>
      </result>
   </test-case>

   <test-case name="K-SeqIndexOfFunc-3">
      <description> A test whose essence is: `index-of((1, 2, 3), 1, ())`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>index-of((1, 2, 3), 1, ())</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="K-SeqIndexOfFunc-4">
      <description> A test whose essence is: `index-of("a string", "a string", "http://www.example.com/COLLATION/NOT/SUPPORTED")`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>index-of("a string", "a string", "http://www.example.com/COLLATION/NOT/SUPPORTED")</test>
      <result>
         <error code="FOCH0002"/>
      </result>
   </test-case>

   <test-case name="K-SeqIndexOfFunc-5">
      <description> A test whose essence is: `index-of("a string", "a string", "http://www.w3.org/2005/xpath-functions/collation/codepoint", "wrong param")`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>index-of("a string", "a string", "http://www.w3.org/2005/xpath-functions/collation/codepoint", "wrong param")</test>
      <result>
         <error code="XPST0017"/>
      </result>
   </test-case>

   <test-case name="K-SeqIndexOfFunc-6">
      <description> A test whose essence is: `index-of("a string", "a string", "http://www.w3.org/2005/xpath-functions/collation/codepoint")`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>index-of("a string", "a string", "http://www.w3.org/2005/xpath-functions/collation/codepoint")</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="K-SeqIndexOfFunc-7">
      <description> A test whose essence is: `empty(index-of(xs:double("NaN"), xs:float("NaN")))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(index-of(xs:double("NaN"), xs:float("NaN")))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqIndexOfFunc-8">
      <description> A test whose essence is: `empty(index-of(xs:float("NaN"), xs:double("NaN")))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(index-of(xs:float("NaN"), xs:double("NaN")))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqIndexOfFunc-9">
      <description> A test whose essence is: `empty(index-of(xs:float("NaN"), xs:float("NaN")))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(index-of(xs:float("NaN"), xs:float("NaN")))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqIndexOfFunc-10">
      <description> A test whose essence is: `empty(index-of(xs:double("NaN"), xs:double("NaN")))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(index-of(xs:double("NaN"), xs:double("NaN")))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqIndexOfFunc-11">
      <description> A test whose essence is: `empty(index-of(4, "4"))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(index-of(4, "4"))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqIndexOfFunc-12">
      <description> A test whose essence is: `index-of(4, 4)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>index-of(4, 4)</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="K-SeqIndexOfFunc-13">
      <description> A test whose essence is: `empty(index-of((), 4))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(index-of((), 4))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqIndexOfFunc-14">
      <description> A test whose essence is: `index-of(4, 4)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>index-of(4, 4)</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="K-SeqIndexOfFunc-15">
      <description> A test whose essence is: `deep-equal((1, 2, 3, 4, 5, 6), index-of((4, 4, 4, 4, 4, 4), 4))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>deep-equal((1, 2, 3, 4, 5, 6), index-of((4, 4, 4, 4, 4, 4), 4))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqIndexOfFunc-16">
      <description> A test whose essence is: `empty(index-of(xs:anyURI("example.com/"), xs:hexBinary("FF")))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(index-of(xs:anyURI("example.com/"), xs:hexBinary("FF")))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqIndexOfFunc-17">
      <description> A test whose essence is: `index-of(xs:untypedAtomic("example.com/"), xs:anyURI("example.com/"))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>index-of(xs:untypedAtomic("example.com/"), xs:anyURI("example.com/"))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="K-SeqIndexOfFunc-18">
      <description> A test whose essence is: `deep-equal(index-of((1, 2, "three", 5, 5, 6), 5), (4, 5))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>deep-equal(index-of((1, 2, "three", 5, 5, 6), 5), (4, 5))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqIndexOfFunc-19">
      <description> A test whose essence is: `empty(index-of((10, 20, 30, 40), 35))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(index-of((10, 20, 30, 40), 35))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqIndexOfFunc-20">
      <description> A test whose essence is: `deep-equal(index-of((10, 20, 30, 30, 20, 10), 20), (2, 5))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>deep-equal(index-of((10, 20, 30, 30, 20, 10), 20), (2, 5))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqIndexOfFunc-21">
      <description> A test whose essence is: `deep-equal(index-of(("a", "sport", "and", "a", "pastime"), "a"), (1, 4))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>deep-equal(index-of(("a", "sport", "and", "a", "pastime"), "a"), (1, 4))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqIndexOfFunc-22">
      <description> A test whose essence is: `count(index-of((1, 2, 3, 2, 1), 2)) eq 2`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(index-of((1, 2, 3, 2, 1), 2)) eq 2</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqIndexOfFunc-23">
      <description> A test whose essence is: `count(index-of((1, 2, 3, 2, 1), 1)) eq 2`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(index-of((1, 2, 3, 2, 1), 1)) eq 2</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqIndexOfFunc-24">
      <description> A test whose essence is: `count(index-of((1, 2, 3, 2, 1), 3)) eq 1`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(index-of((1, 2, 3, 2, 1), 3)) eq 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqIndexOfFunc-25">
      <description> A test whose essence is: `count(index-of((1, 2, 3, 2, 1), 4)) eq 0`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(index-of((1, 2, 3, 2, 1), 4)) eq 0</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="cbcl-fn-indexof-1">
      <description> Test an index-of on a range expression </description>
      <created by="Nick Jones" on="2008-05-30"/>
      <test>index-of(1 to 5,4)</test>
      <result>
         <assert-string-value>4</assert-string-value>
      </result>
   </test-case>

   <test-case name="cbcl-fn-indexof-2">
      <description> Test optimization of index-of to equal </description>
      <created by="Nick Jones" on="2008-06-06"/>
      <test>index-of(exactly-one((1 to 10)[. div 5 = 1]),5)</test>
      <result>
         <assert-string-value>1</assert-string-value>
      </result>
   </test-case>

   <test-case name="cbcl-fn-indexof-3">
      <description> Test boolean of indexof </description>
      <created by="Nick Jones" on="2008-06-12"/>
      <test>boolean(index-of((1 to 10)[. mod 2 = 0],4))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="cbcl-fn-indexof-4">
      <description> Tests false boolean of indexof </description>
      <created by="Nick Jones" on="2008-06-12"/>
      <test>boolean(index-of((1 to 10)[. mod 2 = 0],5))</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="cbcl-fn-indexof-5">
      <description> Tests fn:index-of of a range value followed by an sequence </description>
      <created by="Nick Jones" on="2008-06-16"/>
      <test>index-of((1 to 10,(1 to 10)[. mod 2 = 0]),4)</test>
      <result>
         <assert-string-value>4 12</assert-string-value>
      </result>
   </test-case>

   <test-case name="cbcl-fn-indexof-006">
      <description> Tests corner case </description>
      <created by="Nick Jones" on="2008-06-27"/>
      <test>index-of(1 to 10,(1 to 10)[. div 2 = 0][1])</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
</test-set>