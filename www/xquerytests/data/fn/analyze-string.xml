<?xml version="1.0" encoding="UTF-8"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="fn-analyze-string" covers="fn-analyze-string">
   <description>Tests for the analyze-string() function</description>
   <link type="spec" document="http://www.w3.org/TR/xpath-functions-30/"
         idref="func-analyze-string"/>
   <dependency type="spec" value="XP30+ XQ30+"/>      

   <environment name="analyze-string-schema">
      <schema uri="http://www.w3.org/2005/xpath-functions" 
              file="analyze-string/analyze-string.xsd">
	<description>The schema for analyze-string-result elements defined in Functions and Operators 3.0.</description>
      </schema>
   </environment>      

   <test-case name="analyzeString-001">
      <description> analyze-string with empty string</description>
      <created by="Michael Kay" on="2009-10-18"/>
      <modified by="Michael Kay" on="2011-11-17" change="fix bug 14822"/>
      <test>analyze-string("", "abc")</test>
      <result>
            <assert-xml ignore-prefixes="true"><![CDATA[<fn:analyze-string-result xmlns:fn="http://www.w3.org/2005/xpath-functions"/>]]></assert-xml>
      </result>
   </test-case>
   <test-case name="analyzeString-002">
      <description> analyze-string with empty sequence </description>
      <created by="Michael Kay" on="2009-10-18"/>
      <modified by="Michael Kay" on="2011-11-17" change="fix bug 14822"/>
      <test>analyze-string((), "abc")</test>
      <result>
         <assert-xml ignore-prefixes="true"><![CDATA[<fn:analyze-string-result xmlns:fn="http://www.w3.org/2005/xpath-functions"/>]]></assert-xml>
      </result>
   </test-case>
   <test-case name="analyzeString-002a">
      <description> analyze-string with empty sequence </description>
      <created by="Michael Kay" on="2009-10-18"/>
      <modified by="Michael Kay" on="2011-11-17" change="fix bug 14822"/>
      <test>count(analyze-string((), "abc"))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>
   <test-case name="analyzeString-003">
      <description> analyze-string with a mix of matching and non-matching strings</description>
      <created by="Michael Kay" on="2009-10-18"/>
      <modified by="Michael Kay" on="2011-11-17" change="fix bug 14822"/>
      <test>analyze-string("banana", "a")</test>
      <result>
         <assert-xml ignore-prefixes="true"><![CDATA[<fn:analyze-string-result xmlns:fn="http://www.w3.org/2005/xpath-functions"><fn:non-match>b</fn:non-match><fn:match>a</fn:match><fn:non-match>n</fn:non-match><fn:match>a</fn:match><fn:non-match>n</fn:non-match><fn:match>a</fn:match></fn:analyze-string-result>]]></assert-xml>
      </result>
   </test-case>
   <test-case name="analyzeString-004">
      <description> analyze-string with a single non-matching string</description>
      <created by="Michael Kay" on="2009-10-18"/>
      <modified by="Michael Kay" on="2011-11-17" change="fix bug 14822"/>
      <test>analyze-string("banana", "custard")</test>
      <result>
         <assert-xml ignore-prefixes="true"><![CDATA[<fn:analyze-string-result xmlns:fn="http://www.w3.org/2005/xpath-functions"><fn:non-match>banana</fn:non-match></fn:analyze-string-result>]]></assert-xml>
      </result>
   </test-case>
   <test-case name="analyzeString-005">
      <description> analyze-string with a single matching string</description>
      <created by="Michael Kay" on="2009-10-18"/>
      <modified by="Michael Kay" on="2011-11-17" change="fix bug 14822"/>
      <test>analyze-string("banana", ".+")</test>
      <result>
         <assert-xml ignore-prefixes="true"><![CDATA[<fn:analyze-string-result xmlns:fn="http://www.w3.org/2005/xpath-functions"><fn:match>banana</fn:match></fn:analyze-string-result>]]></assert-xml>
      </result>
   </test-case>
   <test-case name="analyzeString-006">
      <description> analyze-string with a adjacent matching strings</description>
      <created by="Michael Kay" on="2009-10-18"/>
      <modified by="Michael Kay" on="2011-11-17" change="fix bug 14822"/>
      <test>analyze-string("banana", "an")</test>
      <result>
         <any-of>
            <assert-xml ignore-prefixes="true"><![CDATA[<fn:analyze-string-result xmlns:fn="http://www.w3.org/2005/xpath-functions"><fn:non-match>b</fn:non-match><fn:match>an</fn:match><fn:match>an</fn:match><fn:non-match>a</fn:non-match></fn:analyze-string-result>]]></assert-xml>
            </any-of>
      </result>
   </test-case>
   <test-case name="analyzeString-007">
      <description> analyze-string with a single captured group</description>
      <created by="Michael Kay" on="2009-10-18"/>
      <modified by="Michael Kay" on="2011-11-17" change="fix bug 14822"/>
      <test>analyze-string("banana", "a(n)")</test>
      <result>
         <assert-xml ignore-prefixes="true"><![CDATA[<fn:analyze-string-result xmlns:fn="http://www.w3.org/2005/xpath-functions"><fn:non-match>b</fn:non-match><fn:match>a<fn:group nr="1">n</fn:group></fn:match><fn:match>a<fn:group nr="1">n</fn:group></fn:match><fn:non-match>a</fn:non-match></fn:analyze-string-result>]]></assert-xml>
      </result>
   </test-case>
   <test-case name="analyzeString-008">
      <description> analyze-string with nested captured groups</description>
      <created by="Michael Kay" on="2009-10-18"/>
      <modified by="Michael Kay" on="2011-11-17" change="fix bug 14822"/>
      <test>analyze-string("banana", "(a(n?))")</test>
      <result>
         <assert-xml ignore-prefixes="true"><![CDATA[<fn:analyze-string-result xmlns:fn="http://www.w3.org/2005/xpath-functions"><fn:non-match>b</fn:non-match><fn:match><fn:group nr="1">a<fn:group nr="2">n</fn:group></fn:group></fn:match><fn:match><fn:group nr="1">a<fn:group nr="2">n</fn:group></fn:group></fn:match><fn:match><fn:group nr="1">a<fn:group nr="2"/></fn:group></fn:match></fn:analyze-string-result>]]></assert-xml>
      </result>
   </test-case>
   <test-case name="analyzeString-009">
      <description> analyze-string, groups in alternatives </description>
      <created by="Michael Kay" on="2009-10-18"/>
      <modified by="Michael Kay" on="2011-11-17" change="fix bug 14822"/>
      <test>analyze-string("how now brown cow", "(how)|(now)|(brown)|(cow)")</test>
      <result>
         <assert-xml ignore-prefixes="true"><![CDATA[<fn:analyze-string-result xmlns:fn="http://www.w3.org/2005/xpath-functions"><fn:match><fn:group nr="1">how</fn:group></fn:match><fn:non-match> </fn:non-match><fn:match><fn:group nr="2">now</fn:group></fn:match><fn:non-match> </fn:non-match><fn:match><fn:group nr="3">brown</fn:group></fn:match><fn:non-match> </fn:non-match><fn:match><fn:group nr="4">cow</fn:group></fn:match></fn:analyze-string-result>]]></assert-xml>
      </result>
   </test-case>
   <test-case name="analyzeString-010">
      <description> analyze-string, with i flag </description>
      <created by="Michael Kay" on="2009-10-18"/>
      <modified by="Michael Kay" on="2011-11-17" change="fix bug 14822"/>
      <test>analyze-string("how now brown cow", "(HOW)|(NOW)|(BROWN)|(COW)", "i")</test>
      <result>
         <assert-xml ignore-prefixes="true"><![CDATA[<fn:analyze-string-result xmlns:fn="http://www.w3.org/2005/xpath-functions"><fn:match><fn:group nr="1">how</fn:group></fn:match><fn:non-match> </fn:non-match><fn:match><fn:group nr="2">now</fn:group></fn:match><fn:non-match> </fn:non-match><fn:match><fn:group nr="3">brown</fn:group></fn:match><fn:non-match> </fn:non-match><fn:match><fn:group nr="4">cow</fn:group></fn:match></fn:analyze-string-result>]]></assert-xml>
      </result>
   </test-case>
   <test-case name="analyzeString-011">
      <description> analyze-string, with i and x flag </description>
      <created by="Michael Kay" on="2009-10-18"/>
      <modified by="Michael Kay" on="2011-11-17" change="fix bug 14822"/>
      <test>analyze-string("how now brown cow", " (HOW) | (NOW) &#xa;| (BROWN) | (COW) ", "ix")</test>
      <result>
         <assert-xml ignore-prefixes="true"><![CDATA[<fn:analyze-string-result xmlns:fn="http://www.w3.org/2005/xpath-functions"><fn:match><fn:group nr="1">how</fn:group></fn:match><fn:non-match> </fn:non-match><fn:match><fn:group nr="2">now</fn:group></fn:match><fn:non-match> </fn:non-match><fn:match><fn:group nr="3">brown</fn:group></fn:match><fn:non-match> </fn:non-match><fn:match><fn:group nr="4">cow</fn:group></fn:match></fn:analyze-string-result>]]></assert-xml>
      </result>
   </test-case>
   <test-case name="analyzeString-012">
      <description> analyze-string, with flags set to empty string</description>
      <created by="Michael Kay" on="2009-10-18"/>
      <modified by="Michael Kay" on="2011-11-17" change="fix bug 14822"/>
      <test>analyze-string("how now brown cow", "(.*?ow\s+)+", "")</test>
      <result>
         <assert-xml ignore-prefixes="true"><![CDATA[<fn:analyze-string-result xmlns:fn="http://www.w3.org/2005/xpath-functions"><fn:match>how <fn:group nr="1">now </fn:group></fn:match><fn:non-match>brown cow</fn:non-match></fn:analyze-string-result>]]></assert-xml>
      </result>
   </test-case>
   <test-case name="analyzeString-013">
      <description> analyze-string, with "s" flag</description>
      <created by="Michael Kay" on="2009-10-18"/>
      <modified by="Michael Kay" on="2011-11-17" change="fix bug 14822"/>
      <test>let $in := 
"Mary had a little lamb,
it's fleece was black as soot,
and everywhere that Mary went,
it put its sooty foot."
            return analyze-string($in, "Mary.*foot", "s")</test>
      <result>
            <assert-xml ignore-prefixes="true"><![CDATA[<fn:analyze-string-result xmlns:fn="http://www.w3.org/2005/xpath-functions"><fn:match>Mary had a little lamb,
it's fleece was black as soot,
and everywhere that Mary went,
it put its sooty foot</fn:match><fn:non-match>.</fn:non-match></fn:analyze-string-result>]]></assert-xml>
      </result>
   </test-case>
   <test-case name="analyzeString-014">
      <description> analyze-string, multiple lines without "s" flag </description>
      <created by="Michael Kay" on="2009-10-18"/>
      <modified by="Michael Kay" on="2011-11-17" change="fix bug 14822"/>
      <test>let $in := 
"Mary had a little lamb,
it's fleece was black as soot,
and everywhere that Mary went,
it put its sooty foot."
            return analyze-string($in, ".+", "")</test>
      <result>
         <any-of>
            <assert-xml ignore-prefixes="true"><![CDATA[<fn:analyze-string-result xmlns:fn="http://www.w3.org/2005/xpath-functions"><fn:match>Mary had a little lamb,</fn:match><fn:non-match>
</fn:non-match><fn:match>it's fleece was black as soot,</fn:match><fn:non-match>
</fn:non-match><fn:match>and everywhere that Mary went,</fn:match><fn:non-match>
</fn:non-match><fn:match>it put its sooty foot.</fn:match></fn:analyze-string-result>]]></assert-xml>
            </any-of>
      </result>
   </test-case>
   <test-case name="analyzeString-015">
      <description> analyze-string, multiple lines with "m" flag </description>
      <created by="Michael Kay" on="2009-10-18"/>
      <modified by="Michael Kay" on="2011-11-17" change="fix bug 14822"/>
      <test>let $in := 
"Mary had a little lamb,
it's fleece was black as soot,
and everywhere that Mary went,
it put its sooty foot."
            return analyze-string($in, "^.+$", "m")</test>
      <result>
         <any-of>
            <assert-xml ignore-prefixes="true"><![CDATA[<fn:analyze-string-result xmlns:fn="http://www.w3.org/2005/xpath-functions"><fn:match>Mary had a little lamb,</fn:match><fn:non-match>
</fn:non-match><fn:match>it's fleece was black as soot,</fn:match><fn:non-match>
</fn:non-match><fn:match>and everywhere that Mary went,</fn:match><fn:non-match>
</fn:non-match><fn:match>it put its sooty foot.</fn:match></fn:analyze-string-result>]]></assert-xml>
            </any-of>
      </result>
   </test-case>
   <test-case name="analyzeString-016">
      <description>
 analyze-string, multiple lines with "m" flag 
</description>
      <created by="Michael Kay" on="2009-10-18"/>
      <modified by="Michael Kay" on="2011-11-17" change="fix bug 14822"/>
      <test>let $in := 
"Mary had a little lamb,
it's fleece was black as soot,
and everywhere that Mary went,
it put its sooty foot."
            return analyze-string($in, "^.+$", "")</test>
      <result>
         <any-of>
            <assert-xml ignore-prefixes="true"><![CDATA[<fn:analyze-string-result xmlns:fn="http://www.w3.org/2005/xpath-functions"><fn:non-match>Mary had a little lamb,
it's fleece was black as soot,
and everywhere that Mary went,
it put its sooty foot.</fn:non-match></fn:analyze-string-result>]]></assert-xml>
            </any-of>
      </result>
   </test-case>
   <test-case name="analyzeString-017">
      <description> subtle distinction in the positioning of an empty captured group </description>
      <created by="Michael Kay" on="2009-10-18"/>
      <modified by="Michael Kay" on="2011-11-17" change="fix bug 14822"/>
      <test>analyze-string("banana", "(b)(x?)")</test>
      <result>
         <assert-xml ignore-prefixes="true"><![CDATA[<fn:analyze-string-result xmlns:fn="http://www.w3.org/2005/xpath-functions"><fn:match><fn:group nr="1">b</fn:group><fn:group nr="2"/></fn:match><fn:non-match>anana</fn:non-match></fn:analyze-string-result>]]></assert-xml>
      </result>
   </test-case>
   <test-case name="analyzeString-017a">
      <description> subtle distinction in the positioning of an empty captured group</description>
      <created by="Michael Kay" on="2009-10-18"/><modified by="Michael Kay" on="2011-11-17" change="fix bug 14822"/>
      <test>analyze-string("banana", "(b(x?))")</test>
      <result>
         <assert-xml ignore-prefixes="true"><![CDATA[<fn:analyze-string-result xmlns:fn="http://www.w3.org/2005/xpath-functions"><fn:match><fn:group nr="1">b<fn:group nr="2"/></fn:group></fn:match><fn:non-match>anana</fn:non-match></fn:analyze-string-result>]]></assert-xml>
      </result>
   </test-case>
   <test-case name="analyzeString-018" covers="regex-non-capturing">
      <description> non-capturing group indicated by "(?:...)" </description>
      <created by="Michael Kay" on="2009-10-18"/>
      <modified by="Michael Kay" on="2011-11-17" change="fix bug 14822"/>
      <test>analyze-string("banana", "(?:b(an)*a)")</test>
      <result>
        <assert-xml ignore-prefixes="true"><![CDATA[<fn:analyze-string-result xmlns:fn="http://www.w3.org/2005/xpath-functions"><fn:match>ban<fn:group nr="1">an</fn:group>a</fn:match></fn:analyze-string-result>]]></assert-xml>
      </result>
   </test-case>
   <test-case name="analyzeString-019" covers="regex-q-flag">
      <description> "q" flag suppresses grouping</description>
      <created by="Michael Kay" on="2009-10-18"/>
      <modified by="Michael Kay" on="2011-11-17" change="fix bug 14822"/>
      <test>analyze-string("((banana))", "(banana)", "q")</test>
      <result>
         <assert-xml ignore-prefixes="true"><![CDATA[<fn:analyze-string-result xmlns:fn="http://www.w3.org/2005/xpath-functions"><fn:non-match>(</fn:non-match><fn:match>(banana)</fn:match><fn:non-match>)</fn:non-match></fn:analyze-string-result>]]></assert-xml>
      </result>
   </test-case>
   <test-case name="analyzeString-020">
      <description> test typing of result of analyze-string: with no import-schema </description>
      <created by="Michael Kay" on="2009-10-18"/>
      <modified by="Michael Kay" on="2011-11-17" change="fix bug 14822"/>
      <dependency type="feature" value="schemaValidation"/>
      <test>
        let $result := analyze-string("banana", "(b)(anana)") 
        return ($result//@nr)[1] instance of attribute(nr, xs:positiveInteger)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="analyzeString-021">
      <description> test typing of result of analyze-string: with no import-schema </description>
      <created by="Michael Kay" on="2009-10-18"/>
      <modified by="Michael Kay" on="2011-11-17" change="fix bug 14822"/>
      <dependency type="feature" value="schemaValidation"/>
      <test>let $result := analyze-string("banana", "(b)(anana)") return $result instance of element(*, xs:untyped)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   <test-case name="analyzeString-022">
      <description> test string value of result of analyze-string </description>
      <created by="Michael Kay" on="2009-10-18"/>
      <modified by="Michael Kay" on="2011-11-17" change="fix bug 14822"/>
      <test>let $result := analyze-string("banana", "(b)(anana)") return string($result)</test>
      <result>
            <assert-string-value>banana</assert-string-value>
      </result>
   </test-case>
   <test-case name="analyzeString-023">
      <description> test string value of result of analyze-string </description>
      <created by="Michael Kay" on="2009-10-18"/><modified by="Michael Kay" on="2011-11-17" change="fix bug 14822"/>
      <test>let $result := analyze-string("banana", "(b)(anana)") return string($result/fn:match[1])</test>
      <result>
         <assert-string-value>banana</assert-string-value>
      </result>
   </test-case>
   <test-case name="analyzeString-024">
      <description> test typed value of result of analyze-string: referencing a name defined in the schema </description>
      <created by="Michael Kay" on="2009-10-18"/>
      <modified by="Michael Kay" on="2011-11-17" change="fix bug 14822"/>
      <modified by="O'Neil Delpratt" on="2012-08-17" change="fix bug 14873"/>
      <environment ref="analyze-string-schema" />
      <dependency type="spec" value="XQ30+"/>
      <dependency type="feature" value="schemaValidation"/>
      <dependency type="feature" value="schemaImport"/>
      <test>
        import schema "http://www.w3.org/2005/xpath-functions";
        let $result := analyze-string("banana", "(b)(anana)") 
        return $result/fn:match[1] instance of schema-element(fn:match)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="analyzeString-025">
      <description> test typing of result of analyze-string: with import-schema </description>
      <created by="Tim Mills" on="2012-03-22"/>
      <environment ref="analyze-string-schema" />
      <dependency type="spec" value="XQ30+"/>
      <dependency type="feature" value="schemaImport"/>
      <dependency type="feature" value="schemaValidation"/>
      <test>
	import schema "http://www.w3.org/2005/xpath-functions";
        analyze-string("banana", "(b)(anana)") instance of schema-element(fn:analyze-string-result)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="analyzeString-026" covers="regex-dot-matching-cr">
      <description> "." does NOT match CR in default mode</description>
      <created by="Tim Mills" on="2012-09-25"/>
      <dependency type="spec" value="XQ30+"/>
      <test>exactly-one(fn:analyze-string(concat('Mary', codepoints-to-string(13), 'Jones'), 'y.J')/fn:non-match)/string()</test>
      <result>
	<assert-eq>concat('Mary', codepoints-to-string(13), 'Jones')</assert-eq>
      </result>
   </test-case>
   <test-case name="analyzeString-027" covers="regex-dot-matching-cr">
      <description> "." does NOT match CR in default mode</description>
      <created by="Tim Mills" on="2012-09-25"/>
      <dependency type="spec" value="XQ30+"/>
      <test>exactly-one(fn:analyze-string(concat('Mary', codepoints-to-string(13), 'Jones'), 'y.J', 's')/fn:match)/string()</test>
      <result>
	<assert-eq>concat('y', codepoints-to-string(13), 'J')</assert-eq>
      </result>
   </test-case>
   <test-case name="analyzeString-901">
      <description> analyze-string, error, bad regex pattern</description>
      <created by="Michael Kay" on="2009-10-18"/>
      <modified by="Michael Kay" on="2011-11-17" change="fix bug 14822"/>
      <modified by="O'Neil Delpratt" on="2012-05-22" change="Bug fix related to bug #14936: Changed test first argument"/>
      <test>analyze-string("abc", ")-(")</test>
      <result>
            <error code="FORX0002"/>
      </result>
   </test-case>
   <test-case name="analyzeString-902">
      <description> analyze-string, error, bad flags </description>
      <created by="Michael Kay" on="2009-10-18"/>
      <modified by="Michael Kay" on="2011-11-17" change="fix bug 14822"/>
      <test>analyze-string("abc", "abc", "w")</test>
      <result>
            <error code="FORX0001"/>
      </result>
   </test-case>
   <test-case name="analyzeString-903">
      <description> analyze-string, error, pattern matches a zero-length string </description>
      <created by="Michael Kay" on="2009-10-18"/>
      <modified by="Michael Kay" on="2011-11-17" change="fix bug 14822"/>
      <test>analyze-string("abc", "a|b|c?")</test>
      <result>
            <error code="FORX0003"/>
      </result>
   </test-case>
</test-set>
