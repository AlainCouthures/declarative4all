<?xml version="1.0" encoding="UTF-8"?>
<test-set name="fn-deep-equal" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">
  <description>Tests for the deep-equal() function</description>
  <link document="http://www.w3.org/TR/xpath-functions-30/" idref="func-deep-equal" type="spec"/>
  <environment name="bib">
    <source file="../docs/bib.xml" role=".">
      <description>Data for the the XML Query XMP use cases</description>
      <created by="XQuery WG" on="2005-02-11"/>
    </source>
  </environment>
  <environment name="perverse">
    <schema file="deep-equal/perverse.xsd" uri="http://www.w3.org/XQueryTest/perversity">
      <description>A Schema having mixed, elementOnly, and empty elements with the same name</description>
      <created by="Michael Kay" on="2012-05-30"/>
    </schema>
  </environment>
  <test-case name="fn-deep-equalint2args-1">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:int(lower bound) $parameter2 = xs:int(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:int(&quot;-2147483648&quot;)),(xs:int(&quot;-2147483648&quot;)))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalint2args-2">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:int(mid range) $parameter2 = xs:int(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:int(&quot;-1873914410&quot;)),(xs:int(&quot;-2147483648&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalint2args-3">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:int(upper bound) $parameter2 = xs:int(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:int(&quot;2147483647&quot;)),(xs:int(&quot;-2147483648&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalint2args-4">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:int(lower bound) $parameter2 = xs:int(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:int(&quot;-2147483648&quot;)),(xs:int(&quot;-1873914410&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalint2args-5">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:int(lower bound) $parameter2 = xs:int(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:int(&quot;-2147483648&quot;)),(xs:int(&quot;2147483647&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalintg2args-1">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:integer(lower bound) $parameter2 = xs:integer(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:integer(&quot;-999999999999999999&quot;)),(xs:integer(&quot;-999999999999999999&quot;)))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalintg2args-2">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:integer(mid range) $parameter2 = xs:integer(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:integer(&quot;830993497117024304&quot;)),(xs:integer(&quot;-999999999999999999&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalintg2args-3">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:integer(upper bound) $parameter2 = xs:integer(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:integer(&quot;999999999999999999&quot;)),(xs:integer(&quot;-999999999999999999&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalintg2args-4">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:integer(lower bound) $parameter2 = xs:integer(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:integer(&quot;-999999999999999999&quot;)),(xs:integer(&quot;830993497117024304&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalintg2args-5">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:integer(lower bound) $parameter2 = xs:integer(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:integer(&quot;-999999999999999999&quot;)),(xs:integer(&quot;999999999999999999&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equaldec2args-1">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:decimal(lower bound) $parameter2 = xs:decimal(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:decimal(&quot;-999999999999999999&quot;)),(xs:decimal(&quot;-999999999999999999&quot;)))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-deep-equaldec2args-2">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:decimal(mid range) $parameter2 = xs:decimal(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:decimal(&quot;617375191608514839&quot;)),(xs:decimal(&quot;-999999999999999999&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equaldec2args-3">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:decimal(upper bound) $parameter2 = xs:decimal(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:decimal(&quot;999999999999999999&quot;)),(xs:decimal(&quot;-999999999999999999&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equaldec2args-4">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:decimal(lower bound) $parameter2 = xs:decimal(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:decimal(&quot;-999999999999999999&quot;)),(xs:decimal(&quot;617375191608514839&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equaldec2args-5">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:decimal(lower bound) $parameter2 = xs:decimal(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:decimal(&quot;-999999999999999999&quot;)),(xs:decimal(&quot;999999999999999999&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equaldbl2args-1">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:double(lower bound) $parameter2 = xs:double(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:double(&quot;-1.7976931348623157E308&quot;)),(xs:double(&quot;-1.7976931348623157E308&quot;)))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-deep-equaldbl2args-2">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:double(mid range) $parameter2 = xs:double(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:double(&quot;0&quot;)),(xs:double(&quot;-1.7976931348623157E308&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equaldbl2args-3">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:double(upper bound) $parameter2 = xs:double(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:double(&quot;1.7976931348623157E308&quot;)),(xs:double(&quot;-1.7976931348623157E308&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equaldbl2args-4">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:double(lower bound) $parameter2 = xs:double(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:double(&quot;-1.7976931348623157E308&quot;)),(xs:double(&quot;0&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equaldbl2args-5">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:double(lower bound) $parameter2 = xs:double(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:double(&quot;-1.7976931348623157E308&quot;)),(xs:double(&quot;1.7976931348623157E308&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalflt2args-1">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:float(lower bound) $parameter2 = xs:float(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:float(&quot;-3.4028235E38&quot;)),(xs:float(&quot;-3.4028235E38&quot;)))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalflt2args-2">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:float(mid range) $parameter2 = xs:float(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:float(&quot;0&quot;)),(xs:float(&quot;-3.4028235E38&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalflt2args-3">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:float(upper bound) $parameter2 = xs:float(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:float(&quot;3.4028235E38&quot;)),(xs:float(&quot;-3.4028235E38&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalflt2args-4">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:float(lower bound) $parameter2 = xs:float(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:float(&quot;-3.4028235E38&quot;)),(xs:float(&quot;0&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalflt2args-5">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:float(lower bound) $parameter2 = xs:float(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:float(&quot;-3.4028235E38&quot;)),(xs:float(&quot;3.4028235E38&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equallng2args-1">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:long(lower bound) $parameter2 = xs:long(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:long(&quot;-92233720368547758&quot;)),(xs:long(&quot;-92233720368547758&quot;)))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-deep-equallng2args-2">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:long(mid range) $parameter2 = xs:long(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:long(&quot;-47175562203048468&quot;)),(xs:long(&quot;-92233720368547758&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equallng2args-3">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:long(upper bound) $parameter2 = xs:long(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:long(&quot;92233720368547758&quot;)),(xs:long(&quot;-92233720368547758&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equallng2args-4">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:long(lower bound) $parameter2 = xs:long(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:long(&quot;-92233720368547758&quot;)),(xs:long(&quot;-47175562203048468&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equallng2args-5">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:long(lower bound) $parameter2 = xs:long(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:long(&quot;-92233720368547758&quot;)),(xs:long(&quot;92233720368547758&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalusht2args-1">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:unsignedShort(lower bound) $parameter2 = xs:unsignedShort(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:unsignedShort(&quot;0&quot;)),(xs:unsignedShort(&quot;0&quot;)))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalusht2args-2">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:unsignedShort(mid range) $parameter2 = xs:unsignedShort(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:unsignedShort(&quot;44633&quot;)),(xs:unsignedShort(&quot;0&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalusht2args-3">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:unsignedShort(upper bound) $parameter2 = xs:unsignedShort(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:unsignedShort(&quot;65535&quot;)),(xs:unsignedShort(&quot;0&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalusht2args-4">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:unsignedShort(lower bound) $parameter2 = xs:unsignedShort(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:unsignedShort(&quot;0&quot;)),(xs:unsignedShort(&quot;44633&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalusht2args-5">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:unsignedShort(lower bound) $parameter2 = xs:unsignedShort(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:unsignedShort(&quot;0&quot;)),(xs:unsignedShort(&quot;65535&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalnint2args-1">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:negativeInteger(lower bound) $parameter2 = xs:negativeInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:negativeInteger(&quot;-999999999999999999&quot;)),(xs:negativeInteger(&quot;-999999999999999999&quot;)))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalnint2args-2">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:negativeInteger(mid range) $parameter2 = xs:negativeInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:negativeInteger(&quot;-297014075999096793&quot;)),(xs:negativeInteger(&quot;-999999999999999999&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalnint2args-3">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:negativeInteger(upper bound) $parameter2 = xs:negativeInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:negativeInteger(&quot;-1&quot;)),(xs:negativeInteger(&quot;-999999999999999999&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalnint2args-4">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:negativeInteger(lower bound) $parameter2 = xs:negativeInteger(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:negativeInteger(&quot;-999999999999999999&quot;)),(xs:negativeInteger(&quot;-297014075999096793&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalnint2args-5">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:negativeInteger(lower bound) $parameter2 = xs:negativeInteger(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:negativeInteger(&quot;-999999999999999999&quot;)),(xs:negativeInteger(&quot;-1&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalpint2args-1">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:positiveInteger(lower bound) $parameter2 = xs:positiveInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:positiveInteger(&quot;1&quot;)),(xs:positiveInteger(&quot;1&quot;)))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalpint2args-2">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:positiveInteger(mid range) $parameter2 = xs:positiveInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:positiveInteger(&quot;52704602390610033&quot;)),(xs:positiveInteger(&quot;1&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalpint2args-3">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:positiveInteger(upper bound) $parameter2 = xs:positiveInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:positiveInteger(&quot;999999999999999999&quot;)),(xs:positiveInteger(&quot;1&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalpint2args-4">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:positiveInteger(lower bound) $parameter2 = xs:positiveInteger(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:positiveInteger(&quot;1&quot;)),(xs:positiveInteger(&quot;52704602390610033&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalpint2args-5">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:positiveInteger(lower bound) $parameter2 = xs:positiveInteger(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:positiveInteger(&quot;1&quot;)),(xs:positiveInteger(&quot;999999999999999999&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalulng2args-1">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:unsignedLong(lower bound) $parameter2 = xs:unsignedLong(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:unsignedLong(&quot;0&quot;)),(xs:unsignedLong(&quot;0&quot;)))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalulng2args-2">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:unsignedLong(mid range) $parameter2 = xs:unsignedLong(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:unsignedLong(&quot;130747108607674654&quot;)),(xs:unsignedLong(&quot;0&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalulng2args-3">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:unsignedLong(upper bound) $parameter2 = xs:unsignedLong(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:unsignedLong(&quot;184467440737095516&quot;)),(xs:unsignedLong(&quot;0&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalulng2args-4">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:unsignedLong(lower bound) $parameter2 = xs:unsignedLong(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:unsignedLong(&quot;0&quot;)),(xs:unsignedLong(&quot;130747108607674654&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalulng2args-5">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:unsignedLong(lower bound) $parameter2 = xs:unsignedLong(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:unsignedLong(&quot;0&quot;)),(xs:unsignedLong(&quot;184467440737095516&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalnpi2args-1">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:nonPositiveInteger(lower bound) $parameter2 = xs:nonPositiveInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:nonPositiveInteger(&quot;-999999999999999999&quot;)),(xs:nonPositiveInteger(&quot;-999999999999999999&quot;)))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalnpi2args-2">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:nonPositiveInteger(mid range) $parameter2 = xs:nonPositiveInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:nonPositiveInteger(&quot;-475688437271870490&quot;)),(xs:nonPositiveInteger(&quot;-999999999999999999&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalnpi2args-3">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:nonPositiveInteger(upper bound) $parameter2 = xs:nonPositiveInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:nonPositiveInteger(&quot;0&quot;)),(xs:nonPositiveInteger(&quot;-999999999999999999&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalnpi2args-4">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:nonPositiveInteger(lower bound) $parameter2 = xs:nonPositiveInteger(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:nonPositiveInteger(&quot;-999999999999999999&quot;)),(xs:nonPositiveInteger(&quot;-475688437271870490&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalnpi2args-5">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:nonPositiveInteger(lower bound) $parameter2 = xs:nonPositiveInteger(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:nonPositiveInteger(&quot;-999999999999999999&quot;)),(xs:nonPositiveInteger(&quot;0&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalnni2args-1">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:nonNegativeInteger(lower bound) $parameter2 = xs:nonNegativeInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:nonNegativeInteger(&quot;0&quot;)),(xs:nonNegativeInteger(&quot;0&quot;)))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalnni2args-2">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:nonNegativeInteger(mid range) $parameter2 = xs:nonNegativeInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:nonNegativeInteger(&quot;303884545991464527&quot;)),(xs:nonNegativeInteger(&quot;0&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalnni2args-3">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:nonNegativeInteger(upper bound) $parameter2 = xs:nonNegativeInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:nonNegativeInteger(&quot;999999999999999999&quot;)),(xs:nonNegativeInteger(&quot;0&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalnni2args-4">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:nonNegativeInteger(lower bound) $parameter2 = xs:nonNegativeInteger(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:nonNegativeInteger(&quot;0&quot;)),(xs:nonNegativeInteger(&quot;303884545991464527&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalnni2args-5">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:nonNegativeInteger(lower bound) $parameter2 = xs:nonNegativeInteger(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:nonNegativeInteger(&quot;0&quot;)),(xs:nonNegativeInteger(&quot;999999999999999999&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalsht2args-1">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:short(lower bound) $parameter2 = xs:short(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:short(&quot;-32768&quot;)),(xs:short(&quot;-32768&quot;)))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalsht2args-2">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:short(mid range) $parameter2 = xs:short(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:short(&quot;-5324&quot;)),(xs:short(&quot;-32768&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalsht2args-3">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:short(upper bound) $parameter2 = xs:short(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:short(&quot;32767&quot;)),(xs:short(&quot;-32768&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalsht2args-4">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:short(lower bound) $parameter2 = xs:short(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:short(&quot;-32768&quot;)),(xs:short(&quot;-5324&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equalsht2args-5">
    <description> Evaluates The &quot;deep-equal&quot; function with the arguments set as follows: $parameter1 = xs:short(lower bound) $parameter2 = xs:short(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:deep-equal((xs:short(&quot;-32768&quot;)),(xs:short(&quot;32767&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equal-mix-args-001">
    <description> The order of elements in sequence is important </description>
    <created by="Pulkita Tyagi" on="2005-05-24"/>
    <test>fn:deep-equal( (1,2) , (2,1))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equal-mix-args-002">
    <description> Two sequences are fn:deep-equal if items have same value and same order </description>
    <created by="Pulkita Tyagi" on="2005-05-24"/>
    <test>fn:deep-equal( (1,2) , (1,2))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-deep-equal-mix-args-003">
    <description> comparing arguments of type string </description>
    <created by="Pulkita Tyagi" on="2005-05-24"/>
    <test>fn:deep-equal( xs:string(&quot;A&quot;) , &quot;A&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-deep-equal-mix-args-004">
    <description> arg of type string, but case is different </description>
    <created by="Pulkita Tyagi" on="2005-05-24"/>
    <test>fn:deep-equal( xs:string(&quot;A&quot;) , &quot;a&quot;)</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equal-mix-args-005">
    <description> arg1: string, arg2: sequence with 1 element of type string </description>
    <created by="Pulkita Tyagi" on="2005-05-24"/>
    <test>fn:deep-equal( xs:string(&quot;A&quot;) , (&quot;A&quot;))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-deep-equal-mix-args-006">
    <description> Comparing null strings </description>
    <created by="Pulkita Tyagi" on="2005-05-24"/>
    <test>fn:deep-equal( xs:string(&quot;&quot;) , (&quot;&quot;))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-deep-equal-mix-args-007">
    <description> Comparing null sequences </description>
    <created by="Pulkita Tyagi" on="2005-05-24"/>
    <test>fn:deep-equal( () , ())</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-deep-equal-mix-args-008">
    <description> Comparing nested null  a null sequence </description>
    <created by="Pulkita Tyagi" on="2005-05-24"/>
    <test>fn:deep-equal( (()) , ())</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-deep-equal-mix-args-009">
    <description> Comparing arg1: sequence with a space with agr2: empty sequence </description>
    <created by="Pulkita Tyagi" on="2005-05-24"/>
    <test>fn:deep-equal( ( ) , ())</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-deep-equal-mix-args-010">
    <description> Comparing strings with different value </description>
    <created by="Pulkita Tyagi" on="2005-05-24"/>
    <test>fn:deep-equal(xs:string(&quot;abc&quot;), xs:string(&quot;cba&quot;))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equal-mix-args-011">
    <description> Comparing arg1: anyURI, arg2: string </description>
    <created by="Pulkita Tyagi" on="2005-05-24"/>
    <test>fn:deep-equal( xs:anyURI(&quot;www.example.com&quot;) , &quot;www.example.com&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-deep-equal-mix-args-012">
    <description> Comparing arg1:anyURI and arg2:string </description>
    <created by="Pulkita Tyagi" on="2005-05-24"/>
    <test>fn:deep-equal( xs:anyURI(&quot;www.example.com&quot;) , xs:string(&quot;www.example.com&quot;))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-deep-equal-mix-args-013">
    <description> Comparing arg1:integer and arg2:decimal </description>
    <created by="Pulkita Tyagi" on="2005-05-24"/>
    <test>fn:deep-equal( xs:integer(1) , xs:decimal(1.0))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-deep-equal-mix-args-014">
    <description> Comapring integer args with different values </description>
    <created by="Pulkita Tyagi" on="2005-05-24"/>
    <test>fn:deep-equal( xs:integer(1) , xs:integer(-1))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equal-mix-args-015">
    <description> Comparing arg1:integer and arg2:float </description>
    <created by="Pulkita Tyagi" on="2005-05-24"/>
    <test>fn:deep-equal( xs:integer(1) , xs:float(1.0))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-deep-equal-mix-args-016">
    <description> Comparing arg1:integer, arg2:double </description>
    <created by="Pulkita Tyagi" on="2005-05-24"/>
    <test>fn:deep-equal( xs:integer(1) , xs:double(1.0))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-deep-equal-mix-args-017">
    <description> Comparing arg1:decimal , arg2:float </description>
    <created by="Pulkita Tyagi" on="2005-05-24"/>
    <test>fn:deep-equal( xs:decimal(1.01) , xs:float(1.01))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-deep-equal-mix-args-018">
    <description> Comparing arg1:decimal, arg2:double </description>
    <created by="Pulkita Tyagi" on="2005-05-24"/>
    <test>fn:deep-equal( xs:decimal(1.01) , xs:double(1.01))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-deep-equal-mix-args-019">
    <description> Comparing arg1:float , arg2:double </description>
    <created by="Pulkita Tyagi" on="2005-05-24"/>
    <test>fn:deep-equal( xs:float(1.01) , xs:double(1.01))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equal-mix-args-020">
    <description> Comparing arg1:float, arg2:double values INF </description>
    <created by="Pulkita Tyagi" on="2005-05-24"/>
    <test>fn:deep-equal( xs:float(&quot;INF&quot;) , xs:double(&quot;INF&quot;))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-deep-equal-mix-args-021">
    <description> Comparing arg1:float, arg2:double values -INF </description>
    <created by="Pulkita Tyagi" on="2005-05-24"/>
    <test>fn:deep-equal( xs:float(&quot;-INF&quot;) , xs:double(&quot;-INF&quot;))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-deep-equal-mix-args-022">
    <description> Comparing arg1:float, arg2:double values NaN </description>
    <created by="Pulkita Tyagi" on="2005-05-24"/>
    <test>fn:deep-equal( xs:float(&quot;NaN&quot;) , xs:double(&quot;NaN&quot;))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-deep-equal-mix-args-023">
    <description> Comparing two boolean args </description>
    <created by="Pulkita Tyagi" on="2005-05-24"/>
    <test>fn:deep-equal( xs:boolean(&quot;1&quot;) , xs:boolean(&quot;true&quot;))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-deep-equal-mix-args-024">
    <description> Comparing two boolean args </description>
    <created by="Pulkita Tyagi" on="2005-05-24"/>
    <test>fn:deep-equal( xs:boolean(&quot;true&quot;) , xs:boolean(&quot;true&quot;))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-deep-equal-mix-args-025">
    <description> Comparing arg1:boolean arg2:value returned by true fn </description>
    <created by="Pulkita Tyagi" on="2005-05-24"/>
    <test>fn:deep-equal( xs:boolean(&quot;true&quot;) , true())</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-deep-equal-mix-args-026">
    <description> Comparing two boolean args </description>
    <created by="Pulkita Tyagi" on="2005-05-24"/>
    <test>fn:deep-equal( xs:boolean(&quot;0&quot;) , xs:boolean(&quot;false&quot;))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-deep-equal-mix-args-027">
    <description> Comparing arg1:boolean arg2:value of false fn </description>
    <created by="Pulkita Tyagi" on="2005-05-24"/>
    <test>fn:deep-equal( xs:boolean(&quot;false&quot;) , false())</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-deep-equal-mix-args-028">
    <description> Comparing arg1:date, arg2: string </description>
    <created by="Pulkita Tyagi" on="2005-05-24"/>
    <test>fn:deep-equal( xs:date(&quot;1993-03-31&quot;) , &quot;1993-03-31&quot;)</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equal-mix-args-029">
    <description> Comparing arg1:date, arg2: string </description>
    <created by="Pulkita Tyagi" on="2005-05-24"/>
    <test>fn:deep-equal( xs:date(&quot;1993-03-31&quot;) , xs:string(&quot;1993-03-31&quot;))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equal-mix-args-030">
    <description> Comparing arg1:dateTime, arg2: string </description>
    <created by="Pulkita Tyagi" on="2005-05-24"/>
    <test>fn:deep-equal(xs:dateTime(&quot;1972-12-31T00:00:00&quot;), &quot;1972-12-31T00:00:00&quot;)</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equal-mix-args-031">
    <description> Comparing arg1:time, arg2: string </description>
    <created by="Pulkita Tyagi" on="2005-05-24"/>
    <test>fn:deep-equal(xs:time(&quot;12:30:00&quot;), &quot;12:30:00&quot;)</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equal-node-args-1">
    <description> Apply deep-equal to nodes </description>
    <created by="Andrew Eisenberg" on="2006-09-25"/>
    <environment ref="bib"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[fn:deep-equal(<a> {/bib/node()} </a>/node(), <b> {/bib/node()} </b>/node() )]]>
    </test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-deep-equal-node-args-2">
    <description> Apply deep-equal to nodes </description>
    <created by="Andrew Eisenberg" on="2006-09-25"/>
    <environment ref="bib"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[fn:deep-equal(<a> {/bib/node(), /bib/node()} </a>/node(), <b> {/bib/node(), <difference/>, /bib/node()} </b>/node() )]]>
    </test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equal-node-args-3">
    <description> Apply deep-equal to nodes </description>
    <created by="Andrew Eisenberg" on="2006-09-25"/>
    <environment ref="bib"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[fn:deep-equal(<a> {/node(), /node()} </a>/node(), <b> {/node(), 'difference', /node()} </b>/node() )]]>
    </test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equal-node-args-4">
    <description> Apply deep-equal to nodes </description>
    <created by="Andrew Eisenberg" on="2006-09-25"/>
    <environment ref="bib"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[fn:deep-equal(<a> {/node(), <diff x='1'/>, /node()} </a>/node(), <b> {/node(), <diff x='2'/>, /node()} </b>/node() )]]>
    </test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-deep-equal-node-args-5">
    <description> Apply deep-equal to nodes </description>
    <created by="Andrew Eisenberg" on="2006-09-25"/>
    <environment ref="bib"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[fn:deep-equal(<a> {/node(), <diff x='1'/>, /node()} </a>/node(), <b> {/node(), <diff xx='1'/>, /node()} </b>/node() )]]>
    </test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-1">
    <description> A test whose essence is: `deep-equal()`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-2">
    <description> A test whose essence is: `deep-equal(&quot;a string&quot;)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal(&quot;a string&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-3">
    <description> A test whose essence is: `deep-equal(&quot;a string&quot;, &quot;a string&quot;, &quot;http://www.w3.org/2005/xpath-functions/collation/codepoint&quot;, &quot;wrong param&quot;)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal(&quot;a string&quot;, &quot;a string&quot;, &quot;http://www.w3.org/2005/xpath-functions/collation/codepoint&quot;, &quot;wrong param&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-4">
    <description> A test whose essence is: `deep-equal(&quot;a string&quot;, &quot;a string&quot;, &quot;http://www.example.com/COLLATION/NOT/SUPPORTED&quot;)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal(&quot;a string&quot;, &quot;a string&quot;, &quot;http://www.example.com/COLLATION/NOT/SUPPORTED&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCH0002&quot;))</result-string>
    <result>
      <error code="FOCH0002"/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-5">
    <description> A test whose essence is: `deep-equal(&quot;a string&quot;, &quot;a string&quot;, ())`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal(&quot;a string&quot;, &quot;a string&quot;, ())</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-6">
    <description> A test whose essence is: `deep-equal(&quot;a string&quot;, &quot;a string&quot;, &quot;http://www.w3.org/2005/xpath-functions/collation/codepoint&quot;)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal(&quot;a string&quot;, &quot;a string&quot;, &quot;http://www.w3.org/2005/xpath-functions/collation/codepoint&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-7">
    <description> A test whose essence is: `deep-equal((), ()) eq true()`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal((), ()) eq true()</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-8">
    <description> A test whose essence is: `deep-equal(xs:float(&quot;NaN&quot;), xs:float(&quot;NaN&quot;))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal(xs:float(&quot;NaN&quot;), xs:float(&quot;NaN&quot;))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-9">
    <description> A test whose essence is: `deep-equal(xs:double(&quot;NaN&quot;), xs:double(&quot;NaN&quot;))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal(xs:double(&quot;NaN&quot;), xs:double(&quot;NaN&quot;))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-10">
    <description> A test whose essence is: `deep-equal(xs:float(&quot;NaN&quot;), xs:double(&quot;NaN&quot;))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal(xs:float(&quot;NaN&quot;), xs:double(&quot;NaN&quot;))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-11">
    <description> A test whose essence is: `deep-equal(xs:double(&quot;NaN&quot;), xs:float(&quot;NaN&quot;))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal(xs:double(&quot;NaN&quot;), xs:float(&quot;NaN&quot;))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-12">
    <description> A test whose essence is: `not(deep-equal(xs:float(&quot;NaN&quot;), xs:float(0)))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(deep-equal(xs:float(&quot;NaN&quot;), xs:float(0)))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-13">
    <description> A test whose essence is: `not(deep-equal(xs:float(0), xs:float(&quot;NaN&quot;)))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(deep-equal(xs:float(0), xs:float(&quot;NaN&quot;)))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-14">
    <description> A test whose essence is: `not(deep-equal(xs:double(0), xs:double(&quot;NaN&quot;)))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(deep-equal(xs:double(0), xs:double(&quot;NaN&quot;)))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-15">
    <description> A test whose essence is: `not(deep-equal(xs:double(&quot;NaN&quot;), xs:double(0)))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(deep-equal(xs:double(&quot;NaN&quot;), xs:double(0)))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-16">
    <description> A test whose essence is: `not(deep-equal(xs:decimal(&quot;1&quot;), xs:anyURI(&quot;example.com&quot;)))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(deep-equal(xs:decimal(&quot;1&quot;), xs:anyURI(&quot;example.com&quot;)))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-17">
    <description> A test whose essence is: `not(deep-equal(QName(&quot;example.com&quot;, &quot;ncname&quot;), 3e2))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(deep-equal(QName(&quot;example.com&quot;, &quot;ncname&quot;), 3e2))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-18">
    <description> A test whose essence is: `not(deep-equal((1, 2, xs:anyURI(&quot;example.com&quot;)), (1, 2, 3)))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(deep-equal((1, 2, xs:anyURI(&quot;example.com&quot;)), (1, 2, 3)))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-19">
    <description> A test whose essence is: `not(deep-equal((1, xs:decimal(&quot;2.2&quot;), 3), (1, 2, 3)))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(deep-equal((1, xs:decimal(&quot;2.2&quot;), 3), (1, 2, 3)))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-20">
    <description> A test whose essence is: `not(deep-equal((true(), 2, 3), (1, 2, 3)))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(deep-equal((true(), 2, 3), (1, 2, 3)))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-21">
    <description> A test whose essence is: `not(deep-equal((1, 2, 3), (1, 2, QName(&quot;example.com&quot;, &quot;ncname&quot;))))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(deep-equal((1, 2, 3), (1, 2, QName(&quot;example.com&quot;, &quot;ncname&quot;))))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-22">
    <description> A test whose essence is: `not(deep-equal((1, 2, 3), (1, xs:hexBinary(&quot;FF&quot;), 3)))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(deep-equal((1, 2, 3), (1, xs:hexBinary(&quot;FF&quot;), 3)))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-23">
    <description> A test whose essence is: `not(deep-equal((1, 2, 3), (xs:base64Binary(&quot;FFFF&quot;), 2, 3)))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(deep-equal((1, 2, 3), (xs:base64Binary(&quot;FFFF&quot;), 2, 3)))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-24">
    <description> A test whose essence is: `deep-equal((1, 2, xs:base64Binary(&quot;FFFF&quot;)), (1, 2, xs:base64Binary(&quot;FFFF&quot;)))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal((1, 2, xs:base64Binary(&quot;FFFF&quot;)), (1, 2, xs:base64Binary(&quot;FFFF&quot;)))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-25">
    <description> A test whose essence is: `deep-equal((1, 1, 1), (1, 1, 1))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal((1, 1, 1), (1, 1, 1))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-26">
    <description> A test whose essence is: `not(deep-equal((1, 1, 3), (1, 1, 1)))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(deep-equal((1, 1, 3), (1, 1, 1)))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-27">
    <description> A test whose essence is: `not(deep-equal((1, 3, 1), (1, 1, 1)))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(deep-equal((1, 3, 1), (1, 1, 1)))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-28">
    <description> A test whose essence is: `not(deep-equal((3, 1, 1), (1, 1, 1)))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(deep-equal((3, 1, 1), (1, 1, 1)))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-29">
    <description> A test whose essence is: `not(deep-equal((1, 1, 1), (3, 1, 1)))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(deep-equal((1, 1, 1), (3, 1, 1)))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-30">
    <description> A test whose essence is: `not(deep-equal((1, 1, 1), (1, 3, 1)))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(deep-equal((1, 1, 1), (1, 3, 1)))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-31">
    <description> A test whose essence is: `not(deep-equal((1, 1, 1), (1, 1, 3)))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(deep-equal((1, 1, 1), (1, 1, 3)))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-32">
    <description> A test whose essence is: `deep-equal(index-of(20, 20), (1))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal(index-of(20, 20), (1))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-33">
    <description> A test whose essence is: `deep-equal(index-of((20, 40), 20), (1))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal(index-of((20, 40), 20), (1))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-34">
    <description> A test whose essence is: `deep-equal(index-of((20, 20), 20), (1, 2))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal(index-of((20, 20), 20), (1, 2))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-35">
    <description> A test whose essence is: `deep-equal(index-of((20, 40, 20), 20), (1, 3))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal(index-of((20, 40, 20), 20), (1, 3))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-36">
    <description> A test whose essence is: `deep-equal((1, 1, &quot;str&quot;), (1, 1, &quot;str&quot;))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal((1, 1, &quot;str&quot;), (1, 1, &quot;str&quot;))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-37">
    <description> A test whose essence is: `deep-equal((1, &quot;str&quot;, 1), (1, &quot;str&quot;, 1))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal((1, &quot;str&quot;, 1), (1, &quot;str&quot;, 1))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-38">
    <description> A test whose essence is: `deep-equal((&quot;str&quot;, 1, 1), (&quot;str&quot;, 1, 1))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal((&quot;str&quot;, 1, 1), (&quot;str&quot;, 1, 1))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-39">
    <description> A test whose essence is: `deep-equal((1, 1, ()), (1, 1, ()))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal((1, 1, ()), (1, 1, ()))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-40">
    <description> A test whose essence is: `deep-equal((1, (), 1), (1, (), 1))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal((1, (), 1), (1, (), 1))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-41">
    <description> A test whose essence is: `deep-equal(((), 1, 1), ((), 1, 1))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal(((), 1, 1), ((), 1, 1))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-42">
    <description> A test whose essence is: `not(deep-equal((1, 1, ()), (1, 1, 1)))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(deep-equal((1, 1, ()), (1, 1, 1)))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-43">
    <description> A test whose essence is: `not(deep-equal((1, (), 1), (1, 1, 1)))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(deep-equal((1, (), 1), (1, 1, 1)))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-44">
    <description> A test whose essence is: `not(deep-equal(((), 1, 1), (1, 1, 1)))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(deep-equal(((), 1, 1), (1, 1, 1)))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-45">
    <description> A test whose essence is: `not(deep-equal((1, 1, 1), (1, 1, ())))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(deep-equal((1, 1, 1), (1, 1, ())))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-46">
    <description> A test whose essence is: `not(deep-equal((1, 1, 1), (1, (), 1)))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(deep-equal((1, 1, 1), (1, (), 1)))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-47">
    <description> A test whose essence is: `not(deep-equal((1, 1, 1), ((), 1, 1)))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(deep-equal((1, 1, 1), ((), 1, 1)))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-48">
    <description> A test whose essence is: `not(deep-equal((1, 1), (1, 1, 1)))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(deep-equal((1, 1), (1, 1, 1)))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-49">
    <description> A test whose essence is: `not(deep-equal((1, 1, 1), (1, 1)))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(deep-equal((1, 1, 1), (1, 1)))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-50">
    <description> A test whose essence is: `not(deep-equal((), (1, 1, 1)))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(deep-equal((), (1, 1, 1)))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-51">
    <description> A test whose essence is: `not(deep-equal((1, 1, 1), ()))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(deep-equal((1, 1, 1), ()))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-52">
    <description> A test whose essence is: `deep-equal((), reverse(0 to -5))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal((), reverse(0 to -5))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-53">
    <description> A test whose essence is: `deep-equal((), 0 to -5)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal((), 0 to -5)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-54">
    <description> A test whose essence is: `deep-equal(reverse(0 to -5), ())`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal(reverse(0 to -5), ())</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-55">
    <description> A test whose essence is: `deep-equal(0 to -5, ())`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal(0 to -5, ())</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-56">
    <description>Use case-blind collation, if supported</description>
    <created by="Michael Kay" on="2012-05-30"/>
    <environment>
      <collation uri="http://www.w3.org/2010/09/qt-fots-catalog/collation/caseblind"/>
    </environment>
    <test>deep-equal((&quot;a&quot;, &quot;A&quot;), (&quot;A&quot;, &quot;a&quot;), &quot;http://www.w3.org/2010/09/qt-fots-catalog/collation/caseblind&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-57">
    <description>Use case-blind collation, if supported</description>
    <created by="Michael Kay" on="2012-05-30"/>
    <environment>
      <collation uri="http://www.w3.org/2010/09/qt-fots-catalog/collation/caseblind"/>
    </environment>
    <test>deep-equal((&quot;a&quot;, &quot;A&quot;), (&quot;A&quot;, &quot;b&quot;), &quot;http://www.w3.org/2010/09/qt-fots-catalog/collation/caseblind&quot;)</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-58">
    <description>Use case-blind collation, if supported, within attribute nodes</description>
    <created by="Michael Kay" on="2012-05-30"/>
    <environment>
      <collation uri="http://www.w3.org/2010/09/qt-fots-catalog/collation/caseblind"/>
    </environment>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[
         deep-equal(<a><b x="abc"/></a>, <a><b x="ABC"/></a>,
             "http://www.w3.org/2010/09/qt-fots-catalog/collation/caseblind")
      ]]>
    </test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-59">
    <description>Use case-blind collation, if supported, within element nodes</description>
    <created by="Michael Kay" on="2012-05-30"/>
    <environment>
      <collation uri="http://www.w3.org/2010/09/qt-fots-catalog/collation/caseblind"/>
    </environment>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[
         deep-equal(<a><b>abc</b></a>, <a><b>ABC</b></a>,
             "http://www.w3.org/2010/09/qt-fots-catalog/collation/caseblind")
      ]]>
    </test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-60">
    <description>Use case-blind collation, if supported, doesn't apply to names</description>
    <created by="Michael Kay" on="2012-05-30"/>
    <environment>
      <collation uri="http://www.w3.org/2010/09/qt-fots-catalog/collation/caseblind"/>
    </environment>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[
         deep-equal(<a><b>abc</b></a>, <a><B>abc</B></a>,
             "http://www.w3.org/2010/09/qt-fots-catalog/collation/caseblind")
      ]]>
    </test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="K-SeqDeepEqualFunc-61">
    <description>Use case-blind collation, if supported, doesn't apply to attribute names</description>
    <created by="Michael Kay" on="2012-05-30"/>
    <environment>
      <collation uri="http://www.w3.org/2010/09/qt-fots-catalog/collation/caseblind"/>
    </environment>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[
         deep-equal(<a><b x="abc"/></a>, <a><b X="abc"/></a>,
             "http://www.w3.org/2010/09/qt-fots-catalog/collation/caseblind")
      ]]>
    </test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case covers="partial-function-application" name="K-SeqDeepEqualFunc-62">
    <description>Use case-blind collation, if supported, partially applied</description>
    <created by="Michael Kay" on="2012-05-30"/>
    <environment>
      <collation uri="http://www.w3.org/2010/09/qt-fots-catalog/collation/caseblind"/>
    </environment>
    <dependency type="spec" value="XQ30+"/>
    <test>
      <![CDATA[
         let $deep := deep-equal(?, ?, "http://www.w3.org/2010/09/qt-fots-catalog/collation/caseblind")
         return $deep(<a><b>abc</b></a>, <a><b>ABC</b></a>)
      ]]>
    </test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case covers="named-function-ref" name="K-SeqDeepEqualFunc-63">
    <description>Use case-blind collation, if supported, in dynamic call</description>
    <created by="Michael Kay" on="2012-05-30"/>
    <environment>
      <collation uri="http://www.w3.org/2010/09/qt-fots-catalog/collation/caseblind"/>
    </environment>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="higherOrderFunctions"/>
    <test>
      <![CDATA[
         let $deep := deep-equal#3 
         return $deep(<a><b>abc</b></a>, <a><b>ABC</b></a>, 
                      "http://www.w3.org/2010/09/qt-fots-catalog/collation/caseblind")
      ]]>
    </test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-SeqDeepEqualFunc-1">
    <description> Two date/time values that never will compare equal. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(deep-equal(current-time(), current-date()))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-SeqDeepEqualFunc-2">
    <description> A date and node value that never will compare equal. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[deep-equal(current-time(), <e/>)]]>
    </test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="K2-SeqDeepEqualFunc-3">
    <description> A date and node value that never will compare equal(#2). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[deep-equal(<e/>, current-time())]]>
    </test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="K2-SeqDeepEqualFunc-4">
    <description> Time values that never will compare equal. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal((current-time(), current-time(), current-time()), (current-time(), current-time()))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="K2-SeqDeepEqualFunc-5">
    <description> Comparing mixed content. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[deep-equal((1, <e/>, 2), (1, <e/>, 2))]]>
    </test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-SeqDeepEqualFunc-6">
    <description> Comparing mixed content(#2). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[deep-equal((1, <a/>, 2), (1, <b/>, 2))]]>
    </test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="K2-SeqDeepEqualFunc-7">
    <description> Comparing mixed content(#3). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[deep-equal((<a/>, <b/>, 4), (<a/>, <b/>, 2))]]>
    </test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="K2-SeqDeepEqualFunc-8">
    <description> fn:deep-equal() takes two arguments, not zero. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K2-SeqDeepEqualFunc-9">
    <description> fn:deep-equal() takes two arguments, not one. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal((1, 2, 3))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K2-SeqDeepEqualFunc-10">
    <description> fn:deep-equal() with two sequence of nodes. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[deep-equal((<a/>, <b/>, <c/>), (<a/>, <b/>, <c/>))]]>
    </test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-SeqDeepEqualFunc-11">
    <description> fn:deep-equal() with two sequence of nodes(#2). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[deep-equal((<a/>, <b/>, <c/>), (<a/>, <b/>, <a/>))]]>
    </test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="K2-SeqDeepEqualFunc-12">
    <description> fn:deep-equal() with two sequence of nodes(#3). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[deep-equal((<a/>, <b/>), (<a/>, <b/>, <c/>))]]>
    </test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="K2-SeqDeepEqualFunc-13">
    <description> fn:deep-equal() with two sequence of nodes(#4). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[deep-equal((<a/>, <b/>, <c/>), (<a/>, <b/>))]]>
    </test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="K2-SeqDeepEqualFunc-14">
    <description> Ensure processing instructions are ignored if children of a document node. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $d1 := document { <?target data?>, text{"some text"}}; declare variable $d2 := document {text{"some text"}}; deep-equal($d1, $d2)]]>
    </test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-SeqDeepEqualFunc-15">
    <description> Ensure processing instructions are ignored if children of a document node(#2). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $d1 := document {()}; declare variable $d2 := document {<?target data?>}; deep-equal($d1, $d2)]]>
    </test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-SeqDeepEqualFunc-16">
    <description> Ensure processing instructions are ignored if children of a document node. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $d1 := document { <?target data?>, text{"some text"}}; declare variable $d2 := document {text{"some text"}}; deep-equal($d1, $d2)]]>
    </test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-SeqDeepEqualFunc-17">
    <description> Ensure processing instructions are ignored if children of a document node(#2). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $d1 := document {()}; declare variable $d2 := document {<?target data?>}; deep-equal($d1, $d2)]]>
    </test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-SeqDeepEqualFunc-18">
    <description> fn:deep-equal() with mixed content. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[deep-equal(<e>1</e>, 1)]]>
    </test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="K2-SeqDeepEqualFunc-19">
    <description> fn:deep-equal() with mixed content(#2). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[deep-equal(1, <e>1</e>)]]>
    </test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="K2-SeqDeepEqualFunc-20">
    <description> One of the operands has two text nodes, and hence it evaluate to false. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $d1 := <e a="1" b="2">te<?target data?>xt</e>; declare variable $d2 := <e b="2" a="1">text</e>; deep-equal($d1, $d2), deep-equal($d2, $d1)]]>
    </test>
    <result-string>xs:string(&quot;false false&quot;)</result-string>
    <result>
      <assert-string-value>false false</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqDeepEqualFunc-21">
    <description> Processing instructions inside elements are ignored. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $d1 := <e a="1" b="2"><?target data?>text</e>; declare variable $d2 := <e b="2" a="1">text</e>; deep-equal($d1, $d2), deep-equal($d2, $d1)]]>
    </test>
    <result-string>xs:string(&quot;true true&quot;)</result-string>
    <result>
      <assert-string-value>true true</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqDeepEqualFunc-22">
    <description> One of the operands has two text nodes besides the comment, and hence it evaluate to false. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $d1 := <e a="1" b="2">te<!-- content -->xt</e>; declare variable $d2 := <e b="2" a="1">text</e>; deep-equal($d1, $d2), deep-equal($d2, $d1)]]>
    </test>
    <result-string>xs:string(&quot;false false&quot;)</result-string>
    <result>
      <assert-string-value>false false</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqDeepEqualFunc-23">
    <description> Comments inside elements are ignored. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $d1 := <e a="1" b="2"><!-- content -->text</e>; declare variable $d2 := <e b="2" a="1">text</e>; deep-equal($d1, $d2), deep-equal($d2, $d1)]]>
    </test>
    <result-string>xs:string(&quot;true true&quot;)</result-string>
    <result>
      <assert-string-value>true true</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqDeepEqualFunc-24">
    <description> Compare attribute nodes. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>deep-equal(attribute name {&quot;content&quot;}, attribute name {&quot;content&quot;})</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-SeqDeepEqualFunc-25">
    <description> Compare attribute nodes in a weird order. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>deep-equal((attribute name2 {&quot;content&quot;}, attribute name {&quot;content&quot;}), (attribute name {&quot;content&quot;}, attribute name2 {&quot;content&quot;}))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="K2-SeqDeepEqualFunc-26">
    <description> Compare operands with attributes nodes of different size. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>deep-equal((attribute name {&quot;content&quot;}, attribute name {&quot;content&quot;}), (attribute name {&quot;content&quot;}))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="K2-SeqDeepEqualFunc-27">
    <description> Compare operands with attributes nodes of different size(#2). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>deep-equal((attribute name {&quot;content&quot;}, attribute name {&quot;content&quot;}), attribute name {&quot;content&quot;})</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="K2-SeqDeepEqualFunc-28">
    <description> Test deep-equalness of two attribute nodes. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>deep-equal(attribute name {}, attribute name {})</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-SeqDeepEqualFunc-29">
    <description> Test deep-equalness of two attribute nodes. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>deep-equal(attribute name {&quot;content&quot;}, attribute name {&quot;content&quot;})</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-SeqDeepEqualFunc-30">
    <description> Test deep-equalness of two attribute nodes that has the same name, but different string values. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>deep-equal(attribute name {&quot;content&quot;}, attribute name {})</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="K2-SeqDeepEqualFunc-31">
    <description> Test deep-equalness of two attribute nodes that has same text content but different names. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>deep-equal(attribute name {}, attribute name2 {})</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="K2-SeqDeepEqualFunc-32">
    <description> Test deep-equalness of two attribute nodes that has identical text content but different names. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>deep-equal(attribute name {&quot;content &quot;}, attribute name2 {&quot;content &quot;})</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="K2-SeqDeepEqualFunc-33">
    <description> Namespace prefixes and namespace nodes are ignored</description>
    <created by="Michael Kay" on="2012-05-30"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[
        deep-equal(<e xmlns="http://www.example.com/ns"/>, <p:e xmlns:p="http://www.example.com/ns"/>)
      ]]>
    </test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-SeqDeepEqualFunc-34">
    <description> Parent node is ignored</description>
    <created by="Michael Kay" on="2012-05-30"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[
        deep-equal(<e><a>12</a></e>/*, <f><a>12</a></f>/*)
      ]]>
    </test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-SeqDeepEqualFunc-35">
    <description> Type annotation is ignored for atomic values</description>
    <created by="Michael Kay" on="2012-05-30"/>
    <test>
        deep-equal(&quot;a&quot;, xs:NCName(&quot;a&quot;))
      </test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case covers="validate-by-type" name="K2-SeqDeepEqualFunc-36">
    <description> Compare typed value, not string value</description>
    <created by="Michael Kay" on="2012-05-30"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="schemaValidation"/>
    <test>
      <![CDATA[
        deep-equal(validate type xs:integer {<e>2012</e>}, validate type xs:gYear{<e>2012</e>})
      ]]>
    </test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case covers="validate-by-type" name="K2-SeqDeepEqualFunc-37">
    <description> Type annotation is ignored on nodes</description>
    <created by="Michael Kay" on="2012-05-30"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="schemaValidation"/>
    <test>
      <![CDATA[
        deep-equal(validate type xs:integer {<e>2012</e>}, validate type xs:decimal{<e>2012</e>})
      ]]>
    </test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-SeqDeepEqualFunc-38">
    <description>Element with mixed content is not equal to similar element with element-only content</description>
    <created by="Michael Kay" on="2012-05-30"/>
    <modified by="O'Neil Delpratt" change="Bug fix relating to 17267" on="2012-10-09"/>
    <environment ref="perverse"/>
    <dependency type="spec" value="XQ10+"/>
    <dependency type="feature" value="schemaValidation"/>
    <dependency type="feature" value="schemaImport"/>
    <test>
      <![CDATA[
        import schema namespace p = "http://www.w3.org/XQueryTest/perversity";
        let $v := validate strict {<p:elementOnly><p:e/></p:elementOnly>}
        let $w := validate strict {<p:mixed><p:e/></p:mixed>}
        let $x := validate strict {<p:empty><p:e/></p:empty>}
        let $y := validate strict {<p:simple><p:e/></p:simple>}
        return deep-equal($v/p:e, $w/p:e) or deep-equal($w/p:e, $x/p:e) 
        	or deep-equal($v/p:e, $x/p:e) or deep-equal($x/p:e, $y/p:e)
      ]]>
    </test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="K2-SeqDeepEqualFunc-39">
    <description>Element with mixed content is not equal to similar element with simple content</description>
    <created by="Michael Kay" on="2012-05-30"/>
    <modified by="O'Neil Delpratt" change="Bug fix relating to 17267" on="2012-10-09"/>
    <environment ref="perverse"/>
    <dependency type="spec" value="XQ10+"/>
    <dependency type="feature" value="schemaValidation"/>
    <dependency type="feature" value="schemaImport"/>
    <test>
      <![CDATA[
        import schema namespace p = "http://www.w3.org/XQueryTest/perversity";
        let $w := validate strict {<p:mixed><p:e>fraternity</p:e></p:mixed>}
        let $y := validate strict {<p:simple><p:e>fraternity</p:e></p:simple>}
        return deep-equal($w/p:e, $y/p:e)
      ]]>
    </test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="K2-SeqDeepEqualFunc-40">
    <description> Handle dependency on implicit timezone </description>
    <created by="Michael Kay" on="2012-05-30"/>
    <test>
        deep-equal(xs:dateTime('2012-05-30T12:00:00'), xs:dateTime('2012-05-30T12:00:00Z') - implicit-timezone())
      </test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="cbcl-deep-equal-001">
    <description> Test deep-equal ignores processing instructions and comments in elements. </description>
    <created by="Oliver Hallam" on="2008-04-15"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $doc1 := <doc><?processing-instruction content ?></doc> let $doc2 := <doc><!--comment--></doc> return deep-equal($doc1, $doc2)]]>
    </test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="cbcl-deep-equal-002">
    <description> Test deep-equal on processing instructions with different values. </description>
    <created by="Oliver Hallam" on="2008-04-15"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $doc1 := <?cheese brie?> let $doc2 := <?cheese stilton?> return deep-equal($doc1, $doc2)]]>
    </test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="cbcl-deep-equal-003">
    <description> Test deep-equal on processing instructions with different names. </description>
    <created by="Oliver Hallam" on="2008-04-15"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $doc1 := <?foo test?> let $doc2 := <?bar test?> return deep-equal($doc1, $doc2)]]>
    </test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="cbcl-deep-equal-004">
    <description> Test deep-equal on equal processing instructions </description>
    <created by="Oliver Hallam" on="2008-04-15"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $doc1 := <?foo bar?> let $doc2 := <?foo bar?> return deep-equal($doc1, $doc2)]]>
    </test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="cbcl-deep-equal-005">
    <description> Test deep-equal simplifying to fn:empty </description>
    <created by="Oliver Hallam" on="2008-04-15"/>
    <dependency type="spec" value="XQ10+"/>
    <test>declare function local:f($x as xs:integer)as xs:integer* { 1 to $x }; deep-equal((local:f(3), 2, local:f(1)), (local:f(3), 2))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="cbcl-deep-equal-006">
    <description> Test deep-equal simplifying to fn:empty </description>
    <created by="Oliver Hallam" on="2008-04-15"/>
    <dependency type="spec" value="XQ10+"/>
    <test>declare function local:f($x as xs:integer) as xs:integer* { 1 to $x }; deep-equal((local:f(3), 2), (local:f(3), 2, local:f(1)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="cbcl-deep-equal-007">
    <description> Test deep-equal on comparison requiring dynamic context </description>
    <created by="Oliver Hallam" on="2008-04-15"/>
    <test>deep-equal(xs:gMonth(&quot;--12+03:00&quot;), xs:gMonth(&quot;--12&quot;)) eq (implicit-timezone() eq xs:dayTimeDuration(&quot;PT3H&quot;))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="cbcl-deep-equal-008">
    <description> Test that deep equal compares untypedAtomic values correctly </description>
    <created by="Oliver Hallam" on="2008-06-17"/>
    <test>deep-equal((xs:untypedAtomic(&quot;a&quot;), xs:untypedAtomic(&quot;P1Y&quot;), 2.0), (xs:untypedAtomic(&quot;a&quot;), xs:yearMonthDuration(&quot;P12M&quot;), xs:untypedAtomic(&quot; 2&quot;)))</test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="cbcl-deep-equal-009">
    <description> test fn:deep equal (was duplicate cbcl-deep-equal-001)</description>
    <created by="Tim Mills" on="2008-05-02"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[fn:deep-equal(<a b="b" c="c" />, <a b="b" />)]]>
    </test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="cbcl-deep-equal-010">
    <description> Test that deep equal compares untypedAtomic values correctly </description>
    <created by="Tim Mills" on="2012-10-30"/>
    <modified by="Michael Dyck" change="Add dependency on XQ10+ because query contains constructors" on="2012-10-30"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[deep-equal((<a />, xs:untypedAtomic("a"), xs:untypedAtomic("P1Y"), 2.0), (<a />, xs:untypedAtomic("a"), xs:yearMonthDuration("P12M"), xs:untypedAtomic(" 2")))]]>
    </test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
</test-set>