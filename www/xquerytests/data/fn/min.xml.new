<?xml version="1.0" encoding="UTF-8"?>
<test-set name="fn-min" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">
  <description>Tests for the min() function</description>
  <link document="http://www.w3.org/TR/xpath-functions-30/" idref="func-min" type="spec"/>
  <test-case name="fn-minint1args-1">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg = xs:int(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:int(&quot;-2147483648&quot;)))</test>
    <result-string>xs:decimal(&quot;-2147483648&quot;)</result-string>
    <result>
      <assert-eq>-2147483648</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minint1args-2">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg = xs:int(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:int(&quot;-1873914410&quot;)))</test>
    <result-string>xs:decimal(&quot;-1873914410&quot;)</result-string>
    <result>
      <assert-eq>-1873914410</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minint1args-3">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg = xs:int(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:int(&quot;2147483647&quot;)))</test>
    <result-string>xs:decimal(&quot;2147483647&quot;)</result-string>
    <result>
      <assert-eq>2147483647</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minintg1args-1">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg = xs:integer(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:integer(&quot;-999999999999999999&quot;)))</test>
    <result-string>xs:decimal(&quot;-999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>-999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minintg1args-2">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg = xs:integer(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:integer(&quot;830993497117024304&quot;)))</test>
    <result-string>xs:decimal(&quot;830993497117024304&quot;)</result-string>
    <result>
      <assert-eq>830993497117024304</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minintg1args-3">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg = xs:integer(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:integer(&quot;999999999999999999&quot;)))</test>
    <result-string>xs:decimal(&quot;999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-mindec1args-1">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg = xs:decimal(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:decimal(&quot;-999999999999999999&quot;)))</test>
    <result-string>xs:decimal(&quot;-999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>-999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-mindec1args-2">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg = xs:decimal(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:decimal(&quot;617375191608514839&quot;)))</test>
    <result-string>xs:decimal(&quot;617375191608514839&quot;)</result-string>
    <result>
      <assert-eq>617375191608514839</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-mindec1args-3">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg = xs:decimal(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:decimal(&quot;999999999999999999&quot;)))</test>
    <result-string>xs:decimal(&quot;999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-mindbl1args-1">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg = xs:double(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:double(&quot;-1.7976931348623157E308&quot;)))</test>
    <result-string>xs:decimal(&quot;-1.7976931348623157E308&quot;)</result-string>
    <result>
      <assert-eq>-1.7976931348623157E308</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-mindbl1args-2">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg = xs:double(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:double(&quot;0&quot;)))</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-mindbl1args-3">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg = xs:double(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:double(&quot;1.7976931348623157E308&quot;)))</test>
    <result-string>xs:decimal(&quot;1.7976931348623157E308&quot;)</result-string>
    <result>
      <assert-eq>1.7976931348623157E308</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minflt1args-1">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg = xs:float(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:float(&quot;-3.4028235E38&quot;)))</test>
    <result-string>xs:float(&quot;-3.4028235E38&quot;)</result-string>
    <result>
      <assert-eq>xs:float(&quot;-3.4028235E38&quot;)</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minflt1args-2">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg = xs:float(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:float(&quot;0&quot;)))</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minflt1args-3">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg = xs:float(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:float(&quot;3.4028235E38&quot;)))</test>
    <result-string>xs:float(&quot;3.4028235E38&quot;)</result-string>
    <result>
      <assert-eq>xs:float(&quot;3.4028235E38&quot;)</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minlng1args-1">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg = xs:long(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:long(&quot;-92233720368547758&quot;)))</test>
    <result-string>xs:decimal(&quot;-92233720368547758&quot;)</result-string>
    <result>
      <assert-eq>-92233720368547758</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minlng1args-2">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg = xs:long(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:long(&quot;-47175562203048468&quot;)))</test>
    <result-string>xs:decimal(&quot;-47175562203048468&quot;)</result-string>
    <result>
      <assert-eq>-47175562203048468</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minlng1args-3">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg = xs:long(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:long(&quot;92233720368547758&quot;)))</test>
    <result-string>xs:decimal(&quot;92233720368547758&quot;)</result-string>
    <result>
      <assert-eq>92233720368547758</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minusht1args-1">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg = xs:unsignedShort(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:unsignedShort(&quot;0&quot;)))</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minusht1args-2">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg = xs:unsignedShort(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:unsignedShort(&quot;44633&quot;)))</test>
    <result-string>xs:decimal(&quot;44633&quot;)</result-string>
    <result>
      <assert-eq>44633</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minusht1args-3">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg = xs:unsignedShort(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:unsignedShort(&quot;65535&quot;)))</test>
    <result-string>xs:decimal(&quot;65535&quot;)</result-string>
    <result>
      <assert-eq>65535</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minnint1args-1">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg = xs:negativeInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:negativeInteger(&quot;-999999999999999999&quot;)))</test>
    <result-string>xs:decimal(&quot;-999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>-999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minnint1args-2">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg = xs:negativeInteger(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:negativeInteger(&quot;-297014075999096793&quot;)))</test>
    <result-string>xs:decimal(&quot;-297014075999096793&quot;)</result-string>
    <result>
      <assert-eq>-297014075999096793</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minnint1args-3">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg = xs:negativeInteger(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:negativeInteger(&quot;-1&quot;)))</test>
    <result-string>xs:decimal(&quot;-1&quot;)</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minpint1args-1">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg = xs:positiveInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:positiveInteger(&quot;1&quot;)))</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minpint1args-2">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg = xs:positiveInteger(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:positiveInteger(&quot;52704602390610033&quot;)))</test>
    <result-string>xs:decimal(&quot;52704602390610033&quot;)</result-string>
    <result>
      <assert-eq>52704602390610033</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minpint1args-3">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg = xs:positiveInteger(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:positiveInteger(&quot;999999999999999999&quot;)))</test>
    <result-string>xs:decimal(&quot;999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minulng1args-1">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg = xs:unsignedLong(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:unsignedLong(&quot;0&quot;)))</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minulng1args-2">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg = xs:unsignedLong(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:unsignedLong(&quot;130747108607674654&quot;)))</test>
    <result-string>xs:decimal(&quot;130747108607674654&quot;)</result-string>
    <result>
      <assert-eq>130747108607674654</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minulng1args-3">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg = xs:unsignedLong(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:unsignedLong(&quot;184467440737095516&quot;)))</test>
    <result-string>xs:decimal(&quot;184467440737095516&quot;)</result-string>
    <result>
      <assert-eq>184467440737095516</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minnpi1args-1">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg = xs:nonPositiveInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:nonPositiveInteger(&quot;-999999999999999999&quot;)))</test>
    <result-string>xs:decimal(&quot;-999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>-999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minnpi1args-2">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg = xs:nonPositiveInteger(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:nonPositiveInteger(&quot;-475688437271870490&quot;)))</test>
    <result-string>xs:decimal(&quot;-475688437271870490&quot;)</result-string>
    <result>
      <assert-eq>-475688437271870490</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minnpi1args-3">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg = xs:nonPositiveInteger(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:nonPositiveInteger(&quot;0&quot;)))</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minnni1args-1">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg = xs:nonNegativeInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:nonNegativeInteger(&quot;0&quot;)))</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minnni1args-2">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg = xs:nonNegativeInteger(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:nonNegativeInteger(&quot;303884545991464527&quot;)))</test>
    <result-string>xs:decimal(&quot;303884545991464527&quot;)</result-string>
    <result>
      <assert-eq>303884545991464527</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minnni1args-3">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg = xs:nonNegativeInteger(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:nonNegativeInteger(&quot;999999999999999999&quot;)))</test>
    <result-string>xs:decimal(&quot;999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minsht1args-1">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg = xs:short(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:short(&quot;-32768&quot;)))</test>
    <result-string>xs:decimal(&quot;-32768&quot;)</result-string>
    <result>
      <assert-eq>-32768</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minsht1args-2">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg = xs:short(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:short(&quot;-5324&quot;)))</test>
    <result-string>xs:decimal(&quot;-5324&quot;)</result-string>
    <result>
      <assert-eq>-5324</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minsht1args-3">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg = xs:short(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:short(&quot;32767&quot;)))</test>
    <result-string>xs:decimal(&quot;32767&quot;)</result-string>
    <result>
      <assert-eq>32767</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minint2args-1">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:int(lower bound) $arg2 = xs:int(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:int(&quot;-2147483648&quot;),xs:int(&quot;-2147483648&quot;)))</test>
    <result-string>xs:decimal(&quot;-2147483648&quot;)</result-string>
    <result>
      <assert-eq>-2147483648</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minint2args-2">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:int(mid range) $arg2 = xs:int(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:int(&quot;-1873914410&quot;),xs:int(&quot;-2147483648&quot;)))</test>
    <result-string>xs:decimal(&quot;-2147483648&quot;)</result-string>
    <result>
      <assert-eq>-2147483648</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minint2args-3">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:int(upper bound) $arg2 = xs:int(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:int(&quot;2147483647&quot;),xs:int(&quot;-2147483648&quot;)))</test>
    <result-string>xs:decimal(&quot;-2147483648&quot;)</result-string>
    <result>
      <assert-eq>-2147483648</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minint2args-4">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:int(lower bound) $arg2 = xs:int(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:int(&quot;-2147483648&quot;),xs:int(&quot;-1873914410&quot;)))</test>
    <result-string>xs:decimal(&quot;-2147483648&quot;)</result-string>
    <result>
      <assert-eq>-2147483648</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minint2args-5">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:int(lower bound) $arg2 = xs:int(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:int(&quot;-2147483648&quot;),xs:int(&quot;2147483647&quot;)))</test>
    <result-string>xs:decimal(&quot;-2147483648&quot;)</result-string>
    <result>
      <assert-eq>-2147483648</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minintg2args-1">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:integer(lower bound) $arg2 = xs:integer(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:integer(&quot;-999999999999999999&quot;),xs:integer(&quot;-999999999999999999&quot;)))</test>
    <result-string>xs:decimal(&quot;-999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>-999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minintg2args-2">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:integer(mid range) $arg2 = xs:integer(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:integer(&quot;830993497117024304&quot;),xs:integer(&quot;-999999999999999999&quot;)))</test>
    <result-string>xs:decimal(&quot;-999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>-999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minintg2args-3">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:integer(upper bound) $arg2 = xs:integer(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:integer(&quot;999999999999999999&quot;),xs:integer(&quot;-999999999999999999&quot;)))</test>
    <result-string>xs:decimal(&quot;-999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>-999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minintg2args-4">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:integer(lower bound) $arg2 = xs:integer(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:integer(&quot;-999999999999999999&quot;),xs:integer(&quot;830993497117024304&quot;)))</test>
    <result-string>xs:decimal(&quot;-999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>-999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minintg2args-5">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:integer(lower bound) $arg2 = xs:integer(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:integer(&quot;-999999999999999999&quot;),xs:integer(&quot;999999999999999999&quot;)))</test>
    <result-string>xs:decimal(&quot;-999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>-999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-mindec2args-1">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:decimal(lower bound) $arg2 = xs:decimal(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:decimal(&quot;-999999999999999999&quot;),xs:decimal(&quot;-999999999999999999&quot;)))</test>
    <result-string>xs:decimal(&quot;-999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>-999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-mindec2args-2">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:decimal(mid range) $arg2 = xs:decimal(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:decimal(&quot;617375191608514839&quot;),xs:decimal(&quot;-999999999999999999&quot;)))</test>
    <result-string>xs:decimal(&quot;-999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>-999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-mindec2args-3">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:decimal(upper bound) $arg2 = xs:decimal(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:decimal(&quot;999999999999999999&quot;),xs:decimal(&quot;-999999999999999999&quot;)))</test>
    <result-string>xs:decimal(&quot;-999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>-999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-mindec2args-4">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:decimal(lower bound) $arg2 = xs:decimal(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:decimal(&quot;-999999999999999999&quot;),xs:decimal(&quot;617375191608514839&quot;)))</test>
    <result-string>xs:decimal(&quot;-999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>-999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-mindec2args-5">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:decimal(lower bound) $arg2 = xs:decimal(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:decimal(&quot;-999999999999999999&quot;),xs:decimal(&quot;999999999999999999&quot;)))</test>
    <result-string>xs:decimal(&quot;-999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>-999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-mindbl2args-1">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:double(lower bound) $arg2 = xs:double(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:double(&quot;-1.7976931348623157E308&quot;),xs:double(&quot;-1.7976931348623157E308&quot;)))</test>
    <result-string>xs:decimal(&quot;-1.7976931348623157E308&quot;)</result-string>
    <result>
      <assert-eq>-1.7976931348623157E308</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-mindbl2args-2">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:double(mid range) $arg2 = xs:double(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:double(&quot;0&quot;),xs:double(&quot;-1.7976931348623157E308&quot;)))</test>
    <result-string>xs:decimal(&quot;-1.7976931348623157E308&quot;)</result-string>
    <result>
      <assert-eq>-1.7976931348623157E308</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-mindbl2args-3">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:double(upper bound) $arg2 = xs:double(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:double(&quot;1.7976931348623157E308&quot;),xs:double(&quot;-1.7976931348623157E308&quot;)))</test>
    <result-string>xs:decimal(&quot;-1.7976931348623157E308&quot;)</result-string>
    <result>
      <assert-eq>-1.7976931348623157E308</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-mindbl2args-4">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:double(lower bound) $arg2 = xs:double(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:double(&quot;-1.7976931348623157E308&quot;),xs:double(&quot;0&quot;)))</test>
    <result-string>xs:decimal(&quot;-1.7976931348623157E308&quot;)</result-string>
    <result>
      <assert-eq>-1.7976931348623157E308</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-mindbl2args-5">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:double(lower bound) $arg2 = xs:double(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:double(&quot;-1.7976931348623157E308&quot;),xs:double(&quot;1.7976931348623157E308&quot;)))</test>
    <result-string>xs:decimal(&quot;-1.7976931348623157E308&quot;)</result-string>
    <result>
      <assert-eq>-1.7976931348623157E308</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minflt2args-1">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:float(lower bound) $arg2 = xs:float(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:float(&quot;-3.4028235E38&quot;),xs:float(&quot;-3.4028235E38&quot;)))</test>
    <result-string>xs:float(&quot;-3.4028235E38&quot;)</result-string>
    <result>
      <assert-eq>xs:float(&quot;-3.4028235E38&quot;)</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minflt2args-2">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:float(mid range) $arg2 = xs:float(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:float(&quot;0&quot;),xs:float(&quot;-3.4028235E38&quot;)))</test>
    <result-string>xs:float(&quot;-3.4028235E38&quot;)</result-string>
    <result>
      <assert-eq>xs:float(&quot;-3.4028235E38&quot;)</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minflt2args-3">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:float(upper bound) $arg2 = xs:float(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:float(&quot;3.4028235E38&quot;),xs:float(&quot;-3.4028235E38&quot;)))</test>
    <result-string>xs:float(&quot;-3.4028235E38&quot;)</result-string>
    <result>
      <assert-eq>xs:float(&quot;-3.4028235E38&quot;)</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minflt2args-4">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:float(lower bound) $arg2 = xs:float(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:float(&quot;-3.4028235E38&quot;),xs:float(&quot;0&quot;)))</test>
    <result-string>xs:float(&quot;-3.4028235E38&quot;)</result-string>
    <result>
      <assert-eq>xs:float(&quot;-3.4028235E38&quot;)</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minflt2args-5">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:float(lower bound) $arg2 = xs:float(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:float(&quot;-3.4028235E38&quot;),xs:float(&quot;3.4028235E38&quot;)))</test>
    <result-string>xs:float(&quot;-3.4028235E38&quot;)</result-string>
    <result>
      <assert-eq>xs:float(&quot;-3.4028235E38&quot;)</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minlng2args-1">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:long(lower bound) $arg2 = xs:long(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:long(&quot;-92233720368547758&quot;),xs:long(&quot;-92233720368547758&quot;)))</test>
    <result-string>xs:decimal(&quot;-92233720368547758&quot;)</result-string>
    <result>
      <assert-eq>-92233720368547758</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minlng2args-2">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:long(mid range) $arg2 = xs:long(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:long(&quot;-47175562203048468&quot;),xs:long(&quot;-92233720368547758&quot;)))</test>
    <result-string>xs:decimal(&quot;-92233720368547758&quot;)</result-string>
    <result>
      <assert-eq>-92233720368547758</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minlng2args-3">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:long(upper bound) $arg2 = xs:long(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:long(&quot;92233720368547758&quot;),xs:long(&quot;-92233720368547758&quot;)))</test>
    <result-string>xs:decimal(&quot;-92233720368547758&quot;)</result-string>
    <result>
      <assert-eq>-92233720368547758</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minlng2args-4">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:long(lower bound) $arg2 = xs:long(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:long(&quot;-92233720368547758&quot;),xs:long(&quot;-47175562203048468&quot;)))</test>
    <result-string>xs:decimal(&quot;-92233720368547758&quot;)</result-string>
    <result>
      <assert-eq>-92233720368547758</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minlng2args-5">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:long(lower bound) $arg2 = xs:long(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:long(&quot;-92233720368547758&quot;),xs:long(&quot;92233720368547758&quot;)))</test>
    <result-string>xs:decimal(&quot;-92233720368547758&quot;)</result-string>
    <result>
      <assert-eq>-92233720368547758</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minusht2args-1">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:unsignedShort(lower bound) $arg2 = xs:unsignedShort(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:unsignedShort(&quot;0&quot;),xs:unsignedShort(&quot;0&quot;)))</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minusht2args-2">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:unsignedShort(mid range) $arg2 = xs:unsignedShort(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:unsignedShort(&quot;44633&quot;),xs:unsignedShort(&quot;0&quot;)))</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minusht2args-3">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:unsignedShort(upper bound) $arg2 = xs:unsignedShort(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:unsignedShort(&quot;65535&quot;),xs:unsignedShort(&quot;0&quot;)))</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minusht2args-4">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:unsignedShort(lower bound) $arg2 = xs:unsignedShort(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:unsignedShort(&quot;0&quot;),xs:unsignedShort(&quot;44633&quot;)))</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minusht2args-5">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:unsignedShort(lower bound) $arg2 = xs:unsignedShort(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:unsignedShort(&quot;0&quot;),xs:unsignedShort(&quot;65535&quot;)))</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minnint2args-1">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:negativeInteger(lower bound) $arg2 = xs:negativeInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:negativeInteger(&quot;-999999999999999999&quot;),xs:negativeInteger(&quot;-999999999999999999&quot;)))</test>
    <result-string>xs:decimal(&quot;-999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>-999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minnint2args-2">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:negativeInteger(mid range) $arg2 = xs:negativeInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:negativeInteger(&quot;-297014075999096793&quot;),xs:negativeInteger(&quot;-999999999999999999&quot;)))</test>
    <result-string>xs:decimal(&quot;-999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>-999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minnint2args-3">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:negativeInteger(upper bound) $arg2 = xs:negativeInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:negativeInteger(&quot;-1&quot;),xs:negativeInteger(&quot;-999999999999999999&quot;)))</test>
    <result-string>xs:decimal(&quot;-999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>-999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minnint2args-4">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:negativeInteger(lower bound) $arg2 = xs:negativeInteger(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:negativeInteger(&quot;-999999999999999999&quot;),xs:negativeInteger(&quot;-297014075999096793&quot;)))</test>
    <result-string>xs:decimal(&quot;-999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>-999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minnint2args-5">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:negativeInteger(lower bound) $arg2 = xs:negativeInteger(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:negativeInteger(&quot;-999999999999999999&quot;),xs:negativeInteger(&quot;-1&quot;)))</test>
    <result-string>xs:decimal(&quot;-999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>-999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minpint2args-1">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:positiveInteger(lower bound) $arg2 = xs:positiveInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:positiveInteger(&quot;1&quot;),xs:positiveInteger(&quot;1&quot;)))</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minpint2args-2">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:positiveInteger(mid range) $arg2 = xs:positiveInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:positiveInteger(&quot;52704602390610033&quot;),xs:positiveInteger(&quot;1&quot;)))</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minpint2args-3">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:positiveInteger(upper bound) $arg2 = xs:positiveInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:positiveInteger(&quot;999999999999999999&quot;),xs:positiveInteger(&quot;1&quot;)))</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minpint2args-4">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:positiveInteger(lower bound) $arg2 = xs:positiveInteger(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:positiveInteger(&quot;1&quot;),xs:positiveInteger(&quot;52704602390610033&quot;)))</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minpint2args-5">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:positiveInteger(lower bound) $arg2 = xs:positiveInteger(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:positiveInteger(&quot;1&quot;),xs:positiveInteger(&quot;999999999999999999&quot;)))</test>
    <result-string>xs:decimal(&quot;1&quot;)</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minulng2args-1">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:unsignedLong(lower bound) $arg2 = xs:unsignedLong(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:unsignedLong(&quot;0&quot;),xs:unsignedLong(&quot;0&quot;)))</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minulng2args-2">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:unsignedLong(mid range) $arg2 = xs:unsignedLong(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:unsignedLong(&quot;130747108607674654&quot;),xs:unsignedLong(&quot;0&quot;)))</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minulng2args-3">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:unsignedLong(upper bound) $arg2 = xs:unsignedLong(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:unsignedLong(&quot;184467440737095516&quot;),xs:unsignedLong(&quot;0&quot;)))</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minulng2args-4">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:unsignedLong(lower bound) $arg2 = xs:unsignedLong(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:unsignedLong(&quot;0&quot;),xs:unsignedLong(&quot;130747108607674654&quot;)))</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minulng2args-5">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:unsignedLong(lower bound) $arg2 = xs:unsignedLong(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:unsignedLong(&quot;0&quot;),xs:unsignedLong(&quot;184467440737095516&quot;)))</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minnpi2args-1">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:nonPositiveInteger(lower bound) $arg2 = xs:nonPositiveInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:nonPositiveInteger(&quot;-999999999999999999&quot;),xs:nonPositiveInteger(&quot;-999999999999999999&quot;)))</test>
    <result-string>xs:decimal(&quot;-999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>-999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minnpi2args-2">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:nonPositiveInteger(mid range) $arg2 = xs:nonPositiveInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:nonPositiveInteger(&quot;-475688437271870490&quot;),xs:nonPositiveInteger(&quot;-999999999999999999&quot;)))</test>
    <result-string>xs:decimal(&quot;-999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>-999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minnpi2args-3">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:nonPositiveInteger(upper bound) $arg2 = xs:nonPositiveInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:nonPositiveInteger(&quot;0&quot;),xs:nonPositiveInteger(&quot;-999999999999999999&quot;)))</test>
    <result-string>xs:decimal(&quot;-999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>-999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minnpi2args-4">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:nonPositiveInteger(lower bound) $arg2 = xs:nonPositiveInteger(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:nonPositiveInteger(&quot;-999999999999999999&quot;),xs:nonPositiveInteger(&quot;-475688437271870490&quot;)))</test>
    <result-string>xs:decimal(&quot;-999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>-999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minnpi2args-5">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:nonPositiveInteger(lower bound) $arg2 = xs:nonPositiveInteger(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:nonPositiveInteger(&quot;-999999999999999999&quot;),xs:nonPositiveInteger(&quot;0&quot;)))</test>
    <result-string>xs:decimal(&quot;-999999999999999999&quot;)</result-string>
    <result>
      <assert-eq>-999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minnni2args-1">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:nonNegativeInteger(lower bound) $arg2 = xs:nonNegativeInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:nonNegativeInteger(&quot;0&quot;),xs:nonNegativeInteger(&quot;0&quot;)))</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minnni2args-2">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:nonNegativeInteger(mid range) $arg2 = xs:nonNegativeInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:nonNegativeInteger(&quot;303884545991464527&quot;),xs:nonNegativeInteger(&quot;0&quot;)))</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minnni2args-3">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:nonNegativeInteger(upper bound) $arg2 = xs:nonNegativeInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:nonNegativeInteger(&quot;999999999999999999&quot;),xs:nonNegativeInteger(&quot;0&quot;)))</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minnni2args-4">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:nonNegativeInteger(lower bound) $arg2 = xs:nonNegativeInteger(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:nonNegativeInteger(&quot;0&quot;),xs:nonNegativeInteger(&quot;303884545991464527&quot;)))</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minnni2args-5">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:nonNegativeInteger(lower bound) $arg2 = xs:nonNegativeInteger(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:nonNegativeInteger(&quot;0&quot;),xs:nonNegativeInteger(&quot;999999999999999999&quot;)))</test>
    <result-string>xs:decimal(&quot;0&quot;)</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minsht2args-1">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:short(lower bound) $arg2 = xs:short(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:short(&quot;-32768&quot;),xs:short(&quot;-32768&quot;)))</test>
    <result-string>xs:decimal(&quot;-32768&quot;)</result-string>
    <result>
      <assert-eq>-32768</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minsht2args-2">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:short(mid range) $arg2 = xs:short(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:short(&quot;-5324&quot;),xs:short(&quot;-32768&quot;)))</test>
    <result-string>xs:decimal(&quot;-32768&quot;)</result-string>
    <result>
      <assert-eq>-32768</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minsht2args-3">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:short(upper bound) $arg2 = xs:short(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:short(&quot;32767&quot;),xs:short(&quot;-32768&quot;)))</test>
    <result-string>xs:decimal(&quot;-32768&quot;)</result-string>
    <result>
      <assert-eq>-32768</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minsht2args-4">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:short(lower bound) $arg2 = xs:short(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:short(&quot;-32768&quot;),xs:short(&quot;-5324&quot;)))</test>
    <result-string>xs:decimal(&quot;-32768&quot;)</result-string>
    <result>
      <assert-eq>-32768</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-minsht2args-5">
    <description> Evaluates The &quot;min&quot; function with the arguments set as follows: $arg1 = xs:short(lower bound) $arg2 = xs:short(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:min((xs:short(&quot;-32768&quot;),xs:short(&quot;32767&quot;)))</test>
    <result-string>xs:decimal(&quot;-32768&quot;)</result-string>
    <result>
      <assert-eq>-32768</assert-eq>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-1">
    <description> A test whose essence is: `min()`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-2">
    <description> A test whose essence is: `min(&quot;a string&quot;, &quot;http://www.w3.org/2005/xpath-functions/collation/codepoint&quot;, &quot;wrong param&quot;)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min(&quot;a string&quot;, &quot;http://www.w3.org/2005/xpath-functions/collation/codepoint&quot;, &quot;wrong param&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-3">
    <description> A test whose essence is: `empty(min(()))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(min(()))</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-4">
    <description> A test whose essence is: `min((3, 3, 3, 3, 3, 3)) eq 3`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((3, 3, 3, 3, 3, 3)) eq 3</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-5">
    <description> A test whose essence is: `min((3, 1, 1, 1, 1, 1)) eq 1`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((3, 1, 1, 1, 1, 1)) eq 1</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-6">
    <description> A test whose essence is: `min((1, 1, 1, 1, 1, 3)) eq 1`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((1, 1, 1, 1, 1, 3)) eq 1</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-7">
    <description> A test whose essence is: `min((3, 1, 5, 1, 1, 3)) eq 1`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((3, 1, 5, 1, 1, 3)) eq 1</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-8">
    <description> A test whose essence is: `min((3, -5.0, 5, 1, -3, 3)) eq -5.0`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((3, -5.0, 5, 1, -3, 3)) eq -5.0</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-9">
    <description> A test whose essence is: `min(xs:untypedAtomic(&quot;3&quot;)) instance of xs:double`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min(xs:untypedAtomic(&quot;3&quot;)) instance of xs:double</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-10">
    <description> A test whose essence is: `min(xs:untypedAtomic(&quot;3&quot;)) eq 3`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min(xs:untypedAtomic(&quot;3&quot;)) eq 3</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-11">
    <description> A test whose essence is: `min((xs:untypedAtomic(&quot;1&quot;), 3, 2)) instance of xs:double`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((xs:untypedAtomic(&quot;1&quot;), 3, 2)) instance of xs:double</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-12">
    <description> A test whose essence is: `min((3, xs:float(2), xs:untypedAtomic(&quot;1&quot;))) eq 1`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((3, xs:float(2), xs:untypedAtomic(&quot;1&quot;))) eq 1</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-13">
    <description> A test whose essence is: `min((3, xs:float(2), xs:untypedAtomic(&quot;1&quot;))) instance of xs:double`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((3, xs:float(2), xs:untypedAtomic(&quot;1&quot;))) instance of xs:double</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-14">
    <description> A test whose essence is: `min((1, xs:float(2), xs:decimal(3))) instance of xs:float`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((1, xs:float(2), xs:decimal(3))) instance of xs:float</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-15">
    <description> A test whose essence is: `min((3, xs:untypedAtomic(&quot;1&quot;), xs:float(2))) instance of xs:double`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((3, xs:untypedAtomic(&quot;1&quot;), xs:float(2))) instance of xs:double</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-16">
    <description> A test whose essence is: `string(min((1, xs:untypedAtomic(&quot;NaN&quot;), xs:float(2)))) eq &quot;NaN&quot;`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>string(min((1, xs:untypedAtomic(&quot;NaN&quot;), xs:float(2)))) eq &quot;NaN&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-17">
    <description> A test whose essence is: `string(min((xs:float(&quot;NaN&quot;), xs:untypedAtomic(&quot;3&quot;), xs:float(2)))) eq &quot;NaN&quot;`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>string(min((xs:float(&quot;NaN&quot;), xs:untypedAtomic(&quot;3&quot;), xs:float(2)))) eq &quot;NaN&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-18">
    <description> A test whose essence is: `min((xs:float(&quot;NaN&quot;), xs:untypedAtomic(&quot;3&quot;), xs:double(2))) instance of xs:double`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((xs:float(&quot;NaN&quot;), xs:untypedAtomic(&quot;3&quot;), xs:double(2))) instance of xs:double</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-19">
    <description> A test whose essence is: `min((xs:float(&quot;NaN&quot;), 1, 1, 2, xs:double(&quot;NaN&quot;))) instance of xs:double`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((xs:float(&quot;NaN&quot;), 1, 1, 2, xs:double(&quot;NaN&quot;))) instance of xs:double</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-20">
    <description> A test whose essence is: `min((xs:double(&quot;NaN&quot;), 1, 1, 2, xs:float(&quot;NaN&quot;))) instance of xs:double`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((xs:double(&quot;NaN&quot;), 1, 1, 2, xs:float(&quot;NaN&quot;))) instance of xs:double</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-21">
    <description> An xs:string cannot be compared to a numeric, even if a value is NaN. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((xs:float(&quot;NaN&quot;), 1, &quot;a string&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0006&quot;))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-22">
    <description> An xs:string cannot be compared to a numeric, even if a value is NaN. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((&quot;a string&quot;, 1, xs:float(&quot;NaN&quot;)))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0006&quot;))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-23">
    <description> A type error must be reported even if one of other values is NaN. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>max((xs:float(&quot;NaN&quot;), 1, xs:untypedAtomic(&quot;one&quot;)))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-24">
    <description> A type error must be reported even if one of other values is NaN. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>max((xs:untypedAtomic(&quot;one&quot;), 1, xs:float(&quot;NaN&quot;)))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-25">
    <description> A test whose essence is: `string(min((xs:double(&quot;NaN&quot;), xs:double(&quot;NaN&quot;)))) eq &quot;NaN&quot;`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>string(min((xs:double(&quot;NaN&quot;), xs:double(&quot;NaN&quot;)))) eq &quot;NaN&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-26">
    <description> A test whose essence is: `string(min((xs:float(&quot;NaN&quot;), xs:float(&quot;NaN&quot;)))) eq &quot;NaN&quot;`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>string(min((xs:float(&quot;NaN&quot;), xs:float(&quot;NaN&quot;)))) eq &quot;NaN&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-27">
    <description> A test whose essence is: `string(min((3, xs:double(&quot;NaN&quot;)))) eq &quot;NaN&quot;`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>string(min((3, xs:double(&quot;NaN&quot;)))) eq &quot;NaN&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-28">
    <description> A test whose essence is: `string(min((3, xs:float(&quot;NaN&quot;)))) eq &quot;NaN&quot;`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>string(min((3, xs:float(&quot;NaN&quot;)))) eq &quot;NaN&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-29">
    <description> A test whose essence is: `min((3, xs:double(&quot;NaN&quot;))) instance of xs:double`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((3, xs:double(&quot;NaN&quot;))) instance of xs:double</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-30">
    <description> A test whose essence is: `min((3, xs:float(&quot;NaN&quot;))) instance of xs:float`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((3, xs:float(&quot;NaN&quot;))) instance of xs:float</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-31">
    <description> A test whose essence is: `string(min((xs:float(-3), xs:untypedAtomic(&quot;3&quot;), xs:double(&quot;NaN&quot;)))) eq &quot;NaN&quot;`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>string(min((xs:float(-3), xs:untypedAtomic(&quot;3&quot;), xs:double(&quot;NaN&quot;)))) eq &quot;NaN&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-32">
    <description> A test whose essence is: `min((xs:float(-3), xs:untypedAtomic(&quot;3&quot;), xs:double(&quot;NaN&quot;))) instance of xs:double`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((xs:float(-3), xs:untypedAtomic(&quot;3&quot;), xs:double(&quot;NaN&quot;))) instance of xs:double</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-33">
    <description> A test whose essence is: `string(min(xs:float(&quot;NaN&quot;))) eq &quot;NaN&quot;`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>string(min(xs:float(&quot;NaN&quot;))) eq &quot;NaN&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-34">
    <description> A test whose essence is: `string(min(xs:double(&quot;NaN&quot;))) eq &quot;NaN&quot;`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>string(min(xs:double(&quot;NaN&quot;))) eq &quot;NaN&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-35">
    <description> A test whose essence is: `min(xs:untypedAtomic(&quot;three&quot;))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min(xs:untypedAtomic(&quot;three&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0001&quot;))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-36">
    <description> A test whose essence is: `min((xs:untypedAtomic(&quot;3&quot;), &quot;a string&quot;))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((xs:untypedAtomic(&quot;3&quot;), &quot;a string&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0006&quot;))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-37">
    <description> A test whose essence is: `min((&quot;a string&quot;, xs:untypedAtomic(&quot;3&quot;)))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((&quot;a string&quot;, xs:untypedAtomic(&quot;3&quot;)))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0006&quot;))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-38">
    <description> A test whose essence is: `min(QName(&quot;example.com/&quot;, &quot;ncname&quot;))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min(QName(&quot;example.com/&quot;, &quot;ncname&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0006&quot;))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-39">
    <description> A test whose essence is: `min(xs:anyURI(&quot;example.com/&quot;)) eq xs:anyURI(&quot;example.com/&quot;)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min(xs:anyURI(&quot;example.com/&quot;)) eq xs:anyURI(&quot;example.com/&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-40">
    <description> A test whose essence is: `min((xs:anyURI(&quot;example.com/&quot;), xs:anyURI(&quot;example.com/&quot;))) eq xs:anyURI(&quot;example.com/&quot;)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((xs:anyURI(&quot;example.com/&quot;), xs:anyURI(&quot;example.com/&quot;))) eq xs:anyURI(&quot;example.com/&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-41">
    <description> A test whose essence is: `min((&quot;a string&quot;)) eq &quot;a string&quot;`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((&quot;a string&quot;)) eq &quot;a string&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-42">
    <description> A test whose essence is: `min((&quot;a string&quot;, QName(&quot;example.com/&quot;, &quot;ncname&quot;)))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((&quot;a string&quot;, QName(&quot;example.com/&quot;, &quot;ncname&quot;)))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0006&quot;))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-43">
    <description> A test whose essence is: `min((5, 5.0e0)) eq 5.0e0`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((5, 5.0e0)) eq 5.0e0</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-44">
    <description> A test whose essence is: `min((5.0e0, 5)) eq 5.0e0`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((5.0e0, 5)) eq 5.0e0</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-45">
    <description> A test whose essence is: `min((3, 5.0e0)) eq 3`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((3, 5.0e0)) eq 3</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-46">
    <description> A test whose essence is: `min((5.0e0, 3)) eq 3`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((5.0e0, 3)) eq 3</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-47">
    <description> Simple test for min() involving xs:date. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((xs:date(&quot;2005-01-01&quot;), xs:date(&quot;2001-01-01&quot;))) eq xs:date(&quot;2001-01-01&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-48">
    <description> A test whose essence is: `min((3,4,5)) eq 3`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((3,4,5)) eq 3</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-49">
    <description> A test whose essence is: `min((5, 5.0e0)) eq 5.0e0`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((5, 5.0e0)) eq 5.0e0</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-50">
    <description> A test whose essence is: `min((3,4, &quot;Zero&quot;))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((3,4, &quot;Zero&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0006&quot;))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-SeqMINFunc-51">
    <description> A test whose essence is: `min((xs:float(0.0E0), xs:float(-0.0E0))) eq xs:float(&quot;-0&quot;)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((xs:float(0.0E0), xs:float(-0.0E0))) eq xs:float(&quot;-0&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-SeqMINFunc-1">
    <description> Invoke fn:min() on two identical xs:anyURI values. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((xs:anyURI(&quot;http://example.com/A&quot;), xs:anyURI(&quot;http://example.com/A&quot;))) eq xs:anyURI(&quot;http://example.com/A&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-SeqMINFunc-2">
    <description> Invoke fn:min() on two different xs:anyURI values. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((xs:anyURI(&quot;http://example.com/B&quot;), xs:anyURI(&quot;http://example.com/A&quot;))) eq xs:anyURI(&quot;http://example.com/A&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-SeqMINFunc-3">
    <description> Invoke fn:min() on two different xs:anyURI values(#2). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((xs:anyURI(&quot;http://example.com/8&quot;), xs:anyURI(&quot;http://example.com/4&quot;))) eq xs:anyURI(&quot;http://example.com/4&quot;)</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-SeqMINFunc-4">
    <description> Invoke fn:min() with an unsupported collation. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((&quot;str1&quot;, &quot;str2&quot;), &quot;http://example.com/UNSUPPORTED_COLLATION&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FOCH0002&quot;))</result-string>
    <result>
      <error code="FOCH0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqMINFunc-5">
    <description> Invoke fn:min() with an unsupported collation and one xs:anyURI value. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min(xs:anyURI(&quot;str1&quot;), &quot;http://example.com/UNSUPPORTED_COLLATION&quot;)</test>
    <result-string/>
    <result>
      <any-of>
        <assert-eq>str1</assert-eq>
        <error code="FOCH0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K2-SeqMINFunc-6">
    <description> Invoke fn:min() with too many arguments. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((&quot;str1&quot;, &quot;str2&quot;), &quot;http://www.w3.org/2005/xpath-functions/collation/codepoint&quot;, ())</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K2-SeqMINFunc-7">
    <description> fn:min() and xs:double promotion. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((5, 5.0e0)) instance of xs:double</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-SeqMINFunc-8">
    <description> fn:min() and xs:double promotion. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((5.0e0, 5)) instance of xs:double</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-SeqMINFunc-9">
    <description> fn:min() and xs:double promotion. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((3, 5.0e0)) instance of xs:double</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-SeqMINFunc-10">
    <description> fn:min() and xs:double promotion. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((5.0e0, 3)) instance of xs:double</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-SeqMINFunc-11">
    <description> fn:min() and xs:double promotion. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((1, 1, 1, 1, 1.0)) instance of xs:decimal</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-SeqMINFunc-12">
    <description> fn:min() and xs:double promotion. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((1.0, 1, 1, 1, 1)) instance of xs:decimal</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-SeqMINFunc-13">
    <description> fn:min() and xs:double promotion. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((1.0, 1, 1.0, 1, 1)) instance of xs:decimal</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-SeqMINFunc-14">
    <description> fn:min() and xs:double promotion. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min((&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)) eq &quot;a&quot;</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-SeqMINFunc-15">
    <description> Ensure the return type is properly inferred. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>min(xs:unsignedShort(&quot;1&quot;)) instance of xs:unsignedShort</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-min-1">
    <description> Evaluation of the fn:min function with argument to sequence of different types. </description>
    <created by="Carmelo Montanez" on="2005-09-20"/>
    <test>fn:min((3,4,&quot;Zero&quot;))</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0006&quot;))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="fn-min-2">
    <description> Evaluation of type promotion when using mixed typed with fn:min function </description>
    <created by="Carmelo Montanez" on="2006-03-13"/>
    <test>fn:min((xs:integer(5000000),xs:double(3e8)))</test>
    <result-string>xs:decimal(&quot;5.0E6&quot;)</result-string>
    <result>
      <assert-eq>5.0E6</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-min-3">
    <description>Evaluation of type promotion when using mixed typed with fn:min function (used derived types)</description>
    <created by="Carmelo Montanez" on="2006-07-13"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $var := fn:min((xs:long(22),xs:short(10))) return $var instance of xs:integer</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-min-4">
    <description>Test fn:min on a sequence of xs:dayTimeDuration arguments</description>
    <created by="Oliver Hallam" on="2010-03-15"/>
    <test>min((xs:dayTimeDuration(&quot;P1D&quot;), xs:dayTimeDuration(&quot;PT2H&quot;))) instance of xs:dayTimeDuration</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-min-5">
    <description>Test fn:min on a sequence of xs:dayTimeDuration arguments</description>
    <created by="Oliver Hallam" on="2010-03-15"/>
    <test>min(for $x in 1 to 10 return xs:dayTimeDuration(concat(&quot;PT&quot;,$x,&quot;H&quot;)))</test>
    <result-string>xs:string(&quot;PT1H&quot;)</result-string>
    <result>
      <assert-string-value>PT1H</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-min-6">
    <description>Test fn:min on a sequence of xs:yearMonthDuration arguments</description>
    <created by="Oliver Hallam" on="2010-03-15"/>
    <test>min((xs:yearMonthDuration(&quot;P1Y&quot;), xs:yearMonthDuration(&quot;P1M&quot;))) instance of xs:yearMonthDuration</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-min-7">
    <description>Test fn:min on a sequence of xs:yearMonthDuration arguments</description>
    <created by="Oliver Hallam" on="2010-03-15"/>
    <test>min(for $x in 1 to 10 return xs:yearMonthDuration(concat(&quot;P&quot;,$x,&quot;M&quot;)))</test>
    <result-string>xs:string(&quot;P1M&quot;)</result-string>
    <result>
      <assert-string-value>P1M</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-min-8">
    <description>Test fn:min on a sequence of xs:yearMonthDuration and xs:dayTimeDuration arguments</description>
    <created by="Oliver Hallam" on="2010-03-15"/>
    <test>min((xs:yearMonthDuration(&quot;P1Y&quot;), xs:dayTimeDuration(&quot;P1D&quot;)))</test>
    <result-string/>
    <result>
      <any-of>
        <error code="FORG0006"/>
        <error code="XPTY0004"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="fn-min-9">
    <description>Test fn:min on a sequence of xs:duration arguments</description>
    <created by="Oliver Hallam" on="2010-03-15"/>
    <test>min(xs:duration(&quot;P1Y1M1D&quot;))</test>
    <result-string/>
    <result>
      <any-of>
        <error code="FORG0006"/>
        <error code="XPTY0004"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="fn-min-10">
    <description>Test fn:min on a sequence of numeric arguments</description>
    <created by="Oliver Hallam" on="2010-03-15"/>
    <dependency type="spec" value="XQ10+"/>
    <test>for $p in 1 to 4 let $x := (xs:integer(4), xs:decimal(3), xs:float(2), xs:double(1))[position() le $p] return typeswitch (min($x)) case xs:integer return &quot;integer&quot; case xs:decimal return &quot;decimal&quot; case xs:float return &quot;float&quot; case xs:double return &quot;double&quot; default return error()</test>
    <result-string>xs:string(&quot;integer decimal float double&quot;)</result-string>
    <result>
      <assert-string-value>integer decimal float double</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-min-11">
    <description>Test fn:min on a sequence of strings</description>
    <created by="Michael Kay" on="2011-06-29"/>
    <test>min((&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;))</test>
    <result-string>xs:string(&quot;a&quot;)</result-string>
    <result>
      <assert-string-value>a</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-min-12">
    <description>Test fn:min on a sequence of dates</description>
    <created by="Michael Kay" on="2011-06-29"/>
    <test>min((xs:date('1066-10-02'), xs:date('1588-08-08'), xs:date('2011-06-29')))</test>
    <result-string>xs:string(&quot;1066-10-02&quot;)</result-string>
    <result>
      <assert-string-value>1066-10-02</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-min-001">
    <description> test fn:min on xs:boolean arguments </description>
    <created by="Oliver Hallam" on="2008-04-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:f($x as xs:integer) { if ($x = 0) then false() else true() }; 
      	min(for $x in (1,2,3) return local:f($x))
      </test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="cbcl-min-002">
    <description> test fn:min on xs:boolean arguments </description>
    <created by="Oliver Hallam" on="2008-04-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:f($x as xs:integer) { if ($x = 2) then false() else true() }; 
      	min(for $x in (1,2,3) return local:f($x))
      </test>
    <result-string>xs:boolean(&quot;false&quot;)</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="cbcl-min-003">
    <description> test fn:min on xs:boolean arguments </description>
    <created by="Oliver Hallam" on="2008-04-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:f($x as xs:integer) { if ($x = 3) then $x else false() }; 
      	min(for $x in (1,2,3) return local:f($x))
      </test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0006&quot;))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="cbcl-min-004">
    <description> test fn:min with xs:date argument causing type error </description>
    <created by="Oliver Hallam" on="2008-04-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[
      	declare function local:f($x as xs:integer) { if ($x < 3) then current-date() else current-time() }; 
      	min(for $x in (1,2,3) return local:f($x))
      ]]>
    </test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0006&quot;))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="cbcl-min-005">
    <description> test fn:min with xs:dateTime arguments </description>
    <created by="Oliver Hallam" on="2008-04-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:f($x as xs:integer) { if ($x = 2) then xs:dateTime(&quot;1996-12-01T12:00:00&quot;) else current-dateTime() }; 
      	min(for $x in (1,2,3) return local:f($x))
      </test>
    <result-string>xs:string(&quot;1996-12-01T12:00:00&quot;)</result-string>
    <result>
      <assert-string-value>1996-12-01T12:00:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-min-006">
    <description> test fn:min with xs:dateTime argument causing type error </description>
    <created by="Oliver Hallam" on="2008-04-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[
      	declare function local:f($x as xs:integer) { if ($x < 3) then current-dateTime() else xs:dayTimeDuration("PT3S") }; 
      	min(for $x in (1,2,3) return local:f($x))
      ]]>
    </test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0006&quot;))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="cbcl-min-007">
    <description> Test fn:min with xs:dayTimeDuration arguments </description>
    <created by="Oliver Hallam" on="2008-04-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:f($x as xs:integer) { if ($x = 2) then xs:dayTimeDuration(&quot;P1D&quot;) else xs:dayTimeDuration(&quot;PT3S&quot;) }; 
      	min(for $x in (1,2,3) return local:f($x))
      </test>
    <result-string>xs:string(&quot;PT3S&quot;)</result-string>
    <result>
      <assert-string-value>PT3S</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-min-008">
    <description> Test fn:min with xs:dayTimeDuration argument causing type error </description>
    <created by="Oliver Hallam" on="2008-04-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:f($x as xs:integer) { if ($x = 3) then xs:duration(&quot;P1D&quot;) else xs:dayTimeDuration(&quot;PT3S&quot;) }; 
      	min(for $x in (1,2,3) return local:f($x))
      </test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0006&quot;))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="cbcl-min-009">
    <description> Test fn:min with numeric arguments </description>
    <created by="Oliver Hallam" on="2008-04-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:f($x as xs:integer) { (xs:decimal(1.1), xs:float(2.2), xs:double(1.4), xs:integer(2))[$x] }; 
      	min(for $x in (1,2,3) return local:f($x)) instance of xs:double
      </test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="cbcl-min-010">
    <description> Test fn:min with numeric arguments </description>
    <created by="Oliver Hallam" on="2008-04-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:f($x as xs:integer) { (xs:decimal(1.3), xs:float(1.2), xs:double(1.4), xs:integer(2))[$x] }; 
      	min(for $x in (1,2,3) return local:f($x)) instance of xs:double</test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="cbcl-min-011">
    <description> Test fn:min with numeric arguments rasing error </description>
    <created by="Oliver Hallam" on="2008-04-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:f($x as xs:integer) { (xs:decimal(1.1), xs:float(1.2), xs:double(0.4), xs:string(&quot;2&quot;))[$x] }; 
      	min(for $x in (1,4,2,3) return local:f($x))
      </test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0006&quot;))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="cbcl-min-012">
    <description> Test fn:min with numeric arguments </description>
    <created by="Oliver Hallam" on="2008-04-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:f($x as xs:integer) { (xs:decimal(1.1), xs:float(1.2), xs:double(0.4), xs:integer(&quot;-3&quot;))[$x] }; 
      	min(for $x in (4,2,1,3) return local:f($x)) instance of xs:double
      </test>
    <result-string>xs:boolean(&quot;true&quot;)</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="cbcl-min-013">
    <description> test fn:min with xs:time arguments </description>
    <created by="Oliver Hallam" on="2008-04-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:f($x as xs:integer) { if ($x = 2) then xs:time(&quot;12:00:00-01:00&quot;) else xs:time(&quot;12:00:00+01:00&quot;) }; 
      	min(for $x in (1,2,3) return local:f($x))
      </test>
    <result-string>xs:string(&quot;12:00:00+01:00&quot;)</result-string>
    <result>
      <assert-string-value>12:00:00+01:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-min-014">
    <description> test fn:min with xs:time argument causing type error </description>
    <created by="Oliver Hallam" on="2008-04-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[
      	declare function local:f($x as xs:integer) { if ($x < 3) then current-time() else xs:dayTimeDuration("PT3S") }; 
      	min(for $x in (1,2,3) return local:f($x))
      ]]>
    </test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0006&quot;))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="cbcl-min-015">
    <description> Test fn:min with xs:yearMonthDuration arguments </description>
    <created by="Oliver Hallam" on="2008-04-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:f($x as xs:integer) { if ($x = 2) then xs:yearMonthDuration(&quot;P11M&quot;) else xs:yearMonthDuration(&quot;P1Y&quot;) }; 
      	min(for $x in (1,2,3) return local:f($x))
      </test>
    <result-string>xs:string(&quot;P11M&quot;)</result-string>
    <result>
      <assert-string-value>P11M</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-min-016">
    <description> Test fn:min with xs:yearMonthDuration argument causing type error </description>
    <created by="Oliver Hallam" on="2008-04-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:f($x as xs:integer) { if ($x = 3) then xs:duration(&quot;P1Y&quot;) else xs:yearMonthDuration(&quot;P11M&quot;) }; 
      	min(for $x in (1,2,3) return local:f($x))
      </test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0006&quot;))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="cbcl-min-017">
    <description> Test fn:min with invalid type for first argument </description>
    <created by="Oliver Hallam" on="2008-04-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:f($x as xs:integer) as xs:duration { if ($x = 1) then xs:duration(&quot;P1Y&quot;) else xs:yearMonthDuration(&quot;P11M&quot;) }; 
      	min(for $x in (1,2,3) return local:f($x))
      </test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FORG0006&quot;))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="cbcl-min-018">
    <description> Test fn:min on a range expression </description>
    <created by="Oliver Hallam" on="2008-04-22"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:f($x as xs:integer) as xs:integer { $x }; 
      	min(local:f(4) to local:f(10))
      </test>
    <result-string>xs:string(&quot;4&quot;)</result-string>
    <result>
      <assert-string-value>4</assert-string-value>
    </result>
  </test-case>
</test-set>