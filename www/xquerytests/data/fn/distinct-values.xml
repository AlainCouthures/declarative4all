<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="fn-distinct-values">
   <description>Tests for the distinct-values() function</description>
   <link type="spec" document="http://www.w3.org/TR/xpath-functions-30/"
         idref="func-distinct-values"/>

   <test-case name="fn-distinct-valuesint1args-1">
      <description> Evaluates The "distinct-values" function with the arguments set as follows: $arg = xs:int(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:distinct-values((xs:int("-2147483648")))</test>
      <result>
         <assert-eq>-2147483648</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-distinct-valuesint1args-2">
      <description> Evaluates The "distinct-values" function with the arguments set as follows: $arg = xs:int(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:distinct-values((xs:int("-1873914410")))</test>
      <result>
         <assert-eq>-1873914410</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-distinct-valuesint1args-3">
      <description> Evaluates The "distinct-values" function with the arguments set as follows: $arg = xs:int(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:distinct-values((xs:int("2147483647")))</test>
      <result>
         <assert-eq>2147483647</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-distinct-valuesintg1args-1">
      <description> Evaluates The "distinct-values" function with the arguments set as follows: $arg = xs:integer(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:distinct-values((xs:integer("-999999999999999999")))</test>
      <result>
         <assert-eq>-999999999999999999</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-distinct-valuesintg1args-2">
      <description> Evaluates The "distinct-values" function with the arguments set as follows: $arg = xs:integer(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:distinct-values((xs:integer("830993497117024304")))</test>
      <result>
         <assert-eq>830993497117024304</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-distinct-valuesintg1args-3">
      <description> Evaluates The "distinct-values" function with the arguments set as follows: $arg = xs:integer(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:distinct-values((xs:integer("999999999999999999")))</test>
      <result>
         <assert-eq>999999999999999999</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-distinct-valuesdec1args-1">
      <description> Evaluates The "distinct-values" function with the arguments set as follows: $arg = xs:decimal(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:distinct-values((xs:decimal("-999999999999999999")))</test>
      <result>
         <assert-eq>-999999999999999999</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-distinct-valuesdec1args-2">
      <description> Evaluates The "distinct-values" function with the arguments set as follows: $arg = xs:decimal(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:distinct-values((xs:decimal("617375191608514839")))</test>
      <result>
         <assert-eq>617375191608514839</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-distinct-valuesdec1args-3">
      <description> Evaluates The "distinct-values" function with the arguments set as follows: $arg = xs:decimal(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:distinct-values((xs:decimal("999999999999999999")))</test>
      <result>
         <assert-eq>999999999999999999</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-distinct-valuesdbl1args-1">
      <description> Evaluates The "distinct-values" function with the arguments set as follows: $arg = xs:double(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:distinct-values((xs:double("-1.7976931348623157E308")))</test>
      <result>
         <assert-eq>-1.7976931348623157E308</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-distinct-valuesdbl1args-2">
      <description> Evaluates The "distinct-values" function with the arguments set as follows: $arg = xs:double(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:distinct-values((xs:double("0")))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-distinct-valuesdbl1args-3">
      <description> Evaluates The "distinct-values" function with the arguments set as follows: $arg = xs:double(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:distinct-values((xs:double("1.7976931348623157E308")))</test>
      <result>
         <assert-eq>1.7976931348623157E308</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-distinct-valuesflt1args-1">
      <description> Evaluates The "distinct-values" function with the arguments set as follows: $arg = xs:float(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:distinct-values((xs:float("-3.4028235E38")))</test>
      <result>
         <assert-eq>xs:float("-3.4028235E38")</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-distinct-valuesflt1args-2">
      <description> Evaluates The "distinct-values" function with the arguments set as follows: $arg = xs:float(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:distinct-values((xs:float("0")))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-distinct-valuesflt1args-3">
      <description> Evaluates The "distinct-values" function with the arguments set as follows: $arg = xs:float(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:distinct-values((xs:float("3.4028235E38")))</test>
      <result>
         <assert-eq>xs:float("3.4028235E38")</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-distinct-valueslng1args-1">
      <description> Evaluates The "distinct-values" function with the arguments set as follows: $arg = xs:long(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:distinct-values((xs:long("-92233720368547758")))</test>
      <result>
         <assert-eq>-92233720368547758</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-distinct-valueslng1args-2">
      <description> Evaluates The "distinct-values" function with the arguments set as follows: $arg = xs:long(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:distinct-values((xs:long("-47175562203048468")))</test>
      <result>
         <assert-eq>-47175562203048468</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-distinct-valueslng1args-3">
      <description> Evaluates The "distinct-values" function with the arguments set as follows: $arg = xs:long(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:distinct-values((xs:long("92233720368547758")))</test>
      <result>
         <assert-eq>92233720368547758</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-distinct-valuesusht1args-1">
      <description> Evaluates The "distinct-values" function with the arguments set as follows: $arg = xs:unsignedShort(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:distinct-values((xs:unsignedShort("0")))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-distinct-valuesusht1args-2">
      <description> Evaluates The "distinct-values" function with the arguments set as follows: $arg = xs:unsignedShort(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:distinct-values((xs:unsignedShort("44633")))</test>
      <result>
         <assert-eq>44633</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-distinct-valuesusht1args-3">
      <description> Evaluates The "distinct-values" function with the arguments set as follows: $arg = xs:unsignedShort(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:distinct-values((xs:unsignedShort("65535")))</test>
      <result>
         <assert-eq>65535</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-distinct-valuesnint1args-1">
      <description> Evaluates The "distinct-values" function with the arguments set as follows: $arg = xs:negativeInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:distinct-values((xs:negativeInteger("-999999999999999999")))</test>
      <result>
         <assert-eq>-999999999999999999</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-distinct-valuesnint1args-2">
      <description> Evaluates The "distinct-values" function with the arguments set as follows: $arg = xs:negativeInteger(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:distinct-values((xs:negativeInteger("-297014075999096793")))</test>
      <result>
         <assert-eq>-297014075999096793</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-distinct-valuesnint1args-3">
      <description> Evaluates The "distinct-values" function with the arguments set as follows: $arg = xs:negativeInteger(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:distinct-values((xs:negativeInteger("-1")))</test>
      <result>
         <assert-eq>-1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-distinct-valuespint1args-1">
      <description> Evaluates The "distinct-values" function with the arguments set as follows: $arg = xs:positiveInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:distinct-values((xs:positiveInteger("1")))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-distinct-valuespint1args-2">
      <description> Evaluates The "distinct-values" function with the arguments set as follows: $arg = xs:positiveInteger(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:distinct-values((xs:positiveInteger("52704602390610033")))</test>
      <result>
         <assert-eq>52704602390610033</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-distinct-valuespint1args-3">
      <description> Evaluates The "distinct-values" function with the arguments set as follows: $arg = xs:positiveInteger(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:distinct-values((xs:positiveInteger("999999999999999999")))</test>
      <result>
         <assert-eq>999999999999999999</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-distinct-valuesulng1args-1">
      <description> Evaluates The "distinct-values" function with the arguments set as follows: $arg = xs:unsignedLong(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:distinct-values((xs:unsignedLong("0")))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-distinct-valuesulng1args-2">
      <description> Evaluates The "distinct-values" function with the arguments set as follows: $arg = xs:unsignedLong(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:distinct-values((xs:unsignedLong("130747108607674654")))</test>
      <result>
         <assert-eq>130747108607674654</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-distinct-valuesulng1args-3">
      <description> Evaluates The "distinct-values" function with the arguments set as follows: $arg = xs:unsignedLong(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:distinct-values((xs:unsignedLong("184467440737095516")))</test>
      <result>
         <assert-eq>184467440737095516</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-distinct-valuesnpi1args-1">
      <description> Evaluates The "distinct-values" function with the arguments set as follows: $arg = xs:nonPositiveInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:distinct-values((xs:nonPositiveInteger("-999999999999999999")))</test>
      <result>
         <assert-eq>-999999999999999999</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-distinct-valuesnpi1args-2">
      <description> Evaluates The "distinct-values" function with the arguments set as follows: $arg = xs:nonPositiveInteger(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:distinct-values((xs:nonPositiveInteger("-475688437271870490")))</test>
      <result>
         <assert-eq>-475688437271870490</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-distinct-valuesnpi1args-3">
      <description> Evaluates The "distinct-values" function with the arguments set as follows: $arg = xs:nonPositiveInteger(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:distinct-values((xs:nonPositiveInteger("0")))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-distinct-valuesnni1args-1">
      <description> Evaluates The "distinct-values" function with the arguments set as follows: $arg = xs:nonNegativeInteger(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:distinct-values((xs:nonNegativeInteger("0")))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-distinct-valuesnni1args-2">
      <description> Evaluates The "distinct-values" function with the arguments set as follows: $arg = xs:nonNegativeInteger(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:distinct-values((xs:nonNegativeInteger("303884545991464527")))</test>
      <result>
         <assert-eq>303884545991464527</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-distinct-valuesnni1args-3">
      <description> Evaluates The "distinct-values" function with the arguments set as follows: $arg = xs:nonNegativeInteger(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:distinct-values((xs:nonNegativeInteger("999999999999999999")))</test>
      <result>
         <assert-eq>999999999999999999</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-distinct-valuessht1args-1">
      <description> Evaluates The "distinct-values" function with the arguments set as follows: $arg = xs:short(lower bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:distinct-values((xs:short("-32768")))</test>
      <result>
         <assert-eq>-32768</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-distinct-valuessht1args-2">
      <description> Evaluates The "distinct-values" function with the arguments set as follows: $arg = xs:short(mid range) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:distinct-values((xs:short("-5324")))</test>
      <result>
         <assert-eq>-5324</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-distinct-valuessht1args-3">
      <description> Evaluates The "distinct-values" function with the arguments set as follows: $arg = xs:short(upper bound) </description>
      <created by="Carmelo Montanez" on="2004-12-13"/>
      <test>fn:distinct-values((xs:short("32767")))</test>
      <result>
         <assert-eq>32767</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-distinct-values-mixed-args-001">
      <description> arg: sequence of integer &amp; decimal </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:distinct-values((1, 2))</test>
      <result>
         <any-of>
            <assert-string-value>2 1</assert-string-value>
            <assert-string-value>1 2</assert-string-value>
         </any-of>
      </result>
   </test-case>

   <test-case name="fn-distinct-values-mixed-args-002">
      <description> arg: sequence of integer </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:distinct-values(( 1, (1), ((1)) ))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-distinct-values-mixed-args-003">
      <description> arg: sequence of integer &amp; double </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:distinct-values(( 1, 1.0e0))</test>
      <result>
         <all-of>
            <assert-count>1</assert-count>
            <assert-eq>1</assert-eq>
            <any-of>
               <assert-type>xs:integer</assert-type>
               <assert-type>xs:double</assert-type>
            </any-of>
         </all-of>
      </result>
   </test-case>

   <test-case name="fn-distinct-values-mixed-args-004">
      <description> arg: sequence of integer </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:distinct-values(( xs:integer(1), 1))</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-distinct-values-mixed-args-005">
      <description> arg: sequence of integer &amp; double </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:distinct-values(( 0e0, -0, 0, 1 ))</test>
      <result>
         <assert-permutation>1, 0</assert-permutation>
      </result>
   </test-case>

   <test-case name="fn-distinct-values-mixed-args-006">
      <description> arg: sequence of string </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:distinct-values(( "cat", 'CAT' ))</test>
      <result>
         <assert-permutation>"cat", "CAT"</assert-permutation>
      </result>
   </test-case>

   <test-case name="fn-distinct-values-mixed-args-007">
      <description> arg: sequence of string </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:distinct-values(( xs:string("hello"), "hello"))</test>
      <result>
         <assert-string-value>hello</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-distinct-values-mixed-args-008">
      <description> arg: sequence of string </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:distinct-values(( xs:string(""), "", ''))</test>
      <result>
         <assert-string-value/>
      </result>
   </test-case>

   <test-case name="fn-distinct-values-mixed-args-009">
      <description> arg: sequence of integer,decimal,boolean,string </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:distinct-values((1, true(), true(), ()))</test>
      <result>
         <assert-permutation>1, true()</assert-permutation>
      </result>
   </test-case>

   <test-case name="fn-distinct-values-mixed-args-010">
      <description> arg: sequence of decimal </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:distinct-values((xs:decimal('1.2'), xs:decimal('1.2000000000000001')))</test>
      <result>
         <assert-permutation>1.2000000000000001, 1.2</assert-permutation>
      </result>
   </test-case>

   <test-case name="fn-distinct-values-mixed-args-011">
      <description> arg: sequence of decimal &amp; string </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:distinct-values((xs:decimal('1.2'), '1.2'))</test>
      <result>
         <assert-permutation>"1.2", 1.2</assert-permutation>
      </result>
   </test-case>

   <test-case name="fn-distinct-values-mixed-args-012">
      <description> arg: sequence of decimal &amp; float </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:distinct-values((xs:decimal('1.2'), xs:float('1.2')))</test>
      <result>
         <assert-string-value>1.2</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-distinct-values-mixed-args-013">
      <description> arg: sequence of decimal &amp; double </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:distinct-values((xs:decimal('1.2'), xs:double('1.2')))</test>
      <result>
         <assert-string-value>1.2</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-distinct-values-mixed-args-014">
      <description> arg: sequence of float &amp; string </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:distinct-values((xs:float('NaN'), 'NaN'))</test>
      <result>
         <assert-string-value>NaN NaN</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-distinct-values-mixed-args-015">
      <description> arg: sequence of float &amp; string </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:distinct-values((xs:float('INF'), 'INF'))</test>
      <result>
         <assert-string-value>INF INF</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-distinct-values-mixed-args-016">
      <description> arg: sequence of float &amp; string </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:distinct-values((xs:float('-INF'), '-INF'))</test>
      <result>
         <assert-string-value>-INF -INF</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-distinct-values-mixed-args-017">
      <description> arg: sequence of float &amp; float </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:distinct-values((xs:float('INF'), xs:float('INF')))</test>
      <result>
         <assert-string-value>INF</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-distinct-values-mixed-args-018">
      <description> arg: sequence of float &amp; float </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:distinct-values((xs:float('-INF'), xs:float('INF')))</test>
      <result>
         <assert-permutation>xs:float('-INF'), xs:float('INF')</assert-permutation>
      </result>
   </test-case>

   <test-case name="fn-distinct-values-mixed-args-019">
      <description> arg: sequence of float &amp; float </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:distinct-values((xs:float('NaN'), xs:float('NaN')))</test>
      <result>
         <assert-string-value>NaN</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-distinct-values-mixed-args-020">
      <description> arg: sequence of float &amp; float </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:distinct-values((xs:float('NaN'), xs:float('NaN')))</test>
      <result>
         <assert-string-value>NaN</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-distinct-values-mixed-args-021">
      <description> arg: sequence of float &amp; double </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:distinct-values((xs:float('NaN'), xs:double('NaN')))</test>
      <result>
         <assert-string-value>NaN</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-distinct-values-mixed-args-022">
      <description> arg: sequence of float &amp; double </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:distinct-values((xs:float('INF'), xs:double('INF')))</test>
      <result>
         <assert-string-value>INF</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-distinct-values-mixed-args-023">
      <description> arg: sequence of float &amp; double </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:distinct-values((xs:float('-INF'), xs:double('-INF')))</test>
      <result>
         <assert-string-value>-INF</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-distinct-values-mixed-args-024">
      <description> arg: sequence of double &amp; double </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:distinct-values((xs:double('-INF'), xs:double('INF')))</test>
      <result>
         <any-of>
            <assert-string-value>INF -INF</assert-string-value>
            <assert-string-value>-INF INF</assert-string-value>
         </any-of>
      </result>
   </test-case>

   <test-case name="fn-distinct-values-mixed-args-025">
      <description> arg: sequence of double &amp; double </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:distinct-values((xs:double('NaN'), xs:double('NaN')))</test>
      <result>
         <assert-string-value>NaN</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-distinct-values-mixed-args-026">
      <description> arg: sequence of double &amp; double </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:distinct-values((xs:double('NaN'), xs:double('NaN')))</test>
      <result>
         <assert-string-value>NaN</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-distinct-values-mixed-args-027">
      <description> arg: sequence of string </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:distinct-values(("NaN", "-NaN"))</test>
      <result>
         <any-of>
            <assert-string-value>NaN -NaN</assert-string-value>
            <assert-string-value>-NaN NaN</assert-string-value>
         </any-of>
      </result>
   </test-case>

   <test-case name="fn-distinct-values-mixed-args-028">
      <description> arg: sequence of string </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:distinct-values(("-INF", "INF"))</test>
      <result>
         <any-of>
            <assert-string-value>INF -INF</assert-string-value>
            <assert-string-value>-INF INF</assert-string-value>
         </any-of>
      </result>
   </test-case>

   <test-case name="fn-distinct-values-mixed-args-029">
      <description> arg: sequence of boolean </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:distinct-values((xs:boolean('true'), true()))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fn-distinct-values-mixed-args-030">
      <description> arg: sequence of boolean </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:distinct-values((xs:boolean('true'), xs:boolean('1')))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fn-distinct-values-mixed-args-031">
      <description> arg: sequence of boolean </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:distinct-values((xs:boolean('false'), xs:boolean('0')))</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fn-distinct-values-mixed-args-032">
      <description> arg: sequence of boolean </description>
      <created by="Pulkita Tyagi" on="2005-05-26"/>
      <test>fn:distinct-values(( true(), false(), () ))</test>
      <result>
         <assert-permutation>true(), false()</assert-permutation>
      </result>
   </test-case>

   <test-case name="K-SeqDistinctValuesFunc-1">
      <description> A test whose essence is: `distinct-values()`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>distinct-values()</test>
      <result>
         <error code="XPST0017"/>
      </result>
   </test-case>

   <test-case name="K-SeqDistinctValuesFunc-2">
      <description> Invoke fn:distinct-values() with a collation argument, although the function does not perform string comparison. For that reason, output is valid as well. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>deep-equal(distinct-values((1, 2, 3), "http://www.example.com/COLLATION/NOT/SUPPORTED"), (1, 2, 3))</test>
      <result>
         <any-of>
            <assert-true/>
            <error code="FOCH0002"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K-SeqDistinctValuesFunc-3">
      <description> A test whose essence is: `distinct-values("a string", "http://www.w3.org/2005/xpath-functions/collation/codepoint", "wrong param")`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>distinct-values("a string", "http://www.w3.org/2005/xpath-functions/collation/codepoint", "wrong param")</test>
      <result>
         <error code="XPST0017"/>
      </result>
   </test-case>

   <test-case name="K-SeqDistinctValuesFunc-4">
      <description> A test whose essence is: `distinct-values("a string", "http://www.w3.org/2005/xpath-functions/collation/codepoint") eq "a string"`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>distinct-values("a string", "http://www.w3.org/2005/xpath-functions/collation/codepoint") eq "a string"</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqDistinctValuesFunc-5">
      <description> A test whose essence is: `empty(distinct-values(()))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(distinct-values(()))</test>
      <result>
         <any-of>
            <assert-true/>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K-SeqDistinctValuesFunc-6">
      <description> A test whose essence is: `deep-equal(distinct-values( ("1", 1, 2, 1, 1, 3, 1, 1, 3, xs:anyURI("example.com/"), xs:anyURI("example.com/"))), ("1", 1, 2, 3, xs:anyURI("example.com/")))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ10+"/>
      <test>
        declare function local:canon($arg) {
            for $i in 
                for $s in $arg 
                return string($s) 
            order by $i 
            return $i 
        }; 
        deep-equal(
            local:canon(
                distinct-values(("1", 1, 2, 1, 1, 3, 1, 1, 3, xs:anyURI("example.com/"), xs:anyURI("example.com/")))), 
            local:canon(("1", 1, 2, 3, xs:anyURI("example.com/"))))
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqDistinctValuesFunc-7">
      <description> A test whose essence is: `distinct-values((1, 1))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>distinct-values((1, 1))</test>
      <result>
         <any-of>
            <assert-eq>1</assert-eq>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K-SeqDistinctValuesFunc-8">
      <description> A test whose essence is: `distinct-values((-3, -3))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>distinct-values((-3, -3))</test>
      <result>
         <any-of>
            <assert-eq>-3</assert-eq>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K-SeqDistinctValuesFunc-9">
      <description> A test whose essence is: `count(distinct-values((1, 2.0, 3, 2))) eq 3`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(distinct-values((1, 2.0, 3, 2))) eq 3</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqDistinctValuesFunc-10">
      <description> A test whose essence is: `deep-equal(distinct-values((1, 2.0, 3, 2)), (1, 2.0, 3))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>deep-equal(distinct-values((1, 2.0, 3, 2)), (1, 2.0, 3))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqDistinctValuesFunc-11">
      <description> A test whose essence is: `exists(distinct-values((1, 2, 3, 1)))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>exists(distinct-values((1, 2, 3, 1)))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqDistinctValuesFunc-12">
      <description> A test whose essence is: `not(empty(distinct-values((1, 1))))`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>not(empty(distinct-values((1, 1))))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqDistinctValuesFunc-13">
      <description> A test whose essence is: `count(distinct-values((1, 2, 2, current-time()))) eq 3`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(distinct-values((1, 2, 2, current-time()))) eq 3</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqDistinctValuesFunc-14">
      <description> A test whose essence is: `count(distinct-values(())) eq 0`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(distinct-values(())) eq 0</test>
      <result>
         <any-of>
            <assert-true/>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K-SeqDistinctValuesFunc-15">
      <description> fn:distinct-values() applied on an argument of cardinality exactly-one. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(distinct-values(current-time())) eq 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K2-SeqDistinctValuesFunc-1">
      <description> Invoke fn:distinct-values() with an invalid collation. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>fn:distinct-values(("1", "2", "3"), "http://www.example.com/COLLATION/NOT/SUPPORTED")</test>
      <result>
         <error code="FOCH0002"/>
      </result>
   </test-case>

   <test-case name="fn-distinct-values-1">
      <description> Test Bugzilla #5183, [FO] Effect of type promotion in fn:distinct-values </description>
      <created by="Andrew Eisenberg" on="2009-12-24"/>
      <dependency type="spec" value="XQ10+"/>
      <test>
        let $input := (xs:float('1.0'), xs:decimal('1.0000000000100000000001'), 
                       xs:double( '1.00000000001'), xs:float('2.0'), 
                       xs:decimal('2.0000000000100000000001'), xs:double( '2.00000000001')), 
            $distinct := distinct-values($input) 
        return ( (every $n in $input satisfies $n = $distinct) and 
        (every $bool in (for $d1 at $p in $distinct, $d2 in $distinct [position() &gt; $p] return $d1 eq $d2) satisfies not($bool)) )</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fn-distinct-values-2">
      <description>distinct-values() on a somewhat larger set of values</description>
      <created by="Michael Kay" on="2011-07-01"/>
      <test>distinct-values((1 to 300, 100 to 400, 29, 145, 20 to 50, for $x in (30 to 40) return xs:string($x), "foo", "bar"))</test>
      <result>
         <assert-permutation>1 to 400, "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "foo", "bar"</assert-permutation>
      </result>
   </test-case>
   
   
   <test-case name="cbcl-distinct-values-001">
      <description> Test fn:distinct-values on a mixture of numeric types containing several NaN values. </description>
      <created by="Oliver Hallam" on="2008-04-30"/>      
      <test>count(distinct-values((xs:integer("3"), xs:float("3"), xs:float("NaN"), xs:double("3"), xs:double("NaN"), xs:decimal("3"), xs:float("3"))))</test>
      <result>
         <assert-string-value>2</assert-string-value>
      </result>
   </test-case>
   

   <test-case name="cbcl-distinct-values-002">
      <description> test fn:distinct-values with a mix of types </description>
      <created by="Tim Mills" on="2008-06-02"/>
      <dependency type="spec" value="XQ10"/>      
      <test>
      	declare function local:create($arg) as xs:anyAtomicType* {
       		( if ($arg castable as xs:untypedAtomic) 
       		  	then $arg cast as xs:untypedAtomic else () ), 
       		( if ($arg castable as xs:dateTime) 
       		  	then $arg cast as xs:dateTime else () ), 
       		( if ($arg castable as xs:date) 
       		 	then $arg cast as xs:date else () ), 
       		( if ($arg castable as xs:time) 
       			then $arg cast as xs:time else () ), 
       		( if ($arg castable as xs:time) 
       			then $arg cast as xs:time else () ), 
       		( if ($arg castable as xs:duration) 
       			then $arg cast as xs:duration else () ), 
       		( if ($arg castable as xs:yearMonthDuration) 
       			then $arg cast as xs:yearMonthDuration else () ), 
       		( if ($arg castable as xs:dayTimeDuration) 
       			then $arg cast as xs:dayTimeDuration else () ), 
       		( if ($arg castable as xs:float) 
       			then $arg cast as xs:float else () ), 
       		( if ($arg castable as xs:double) 
       			then $arg cast as xs:double else () ), 
       		( if ($arg castable as xs:decimal) 
       			then $arg cast as xs:decimal else () ), 
       		( if ($arg castable as xs:integer) 
       			then $arg cast as xs:integer else () ), 
       		( if ($arg castable as xs:nonPositiveInteger) 
       			then $arg cast as xs:nonPositiveInteger else () ), 
       		( if ($arg castable as xs:negativeInteger) 
       			then $arg cast as xs:negativeInteger else () ), 
       		( if ($arg castable as xs:long) 
       			then $arg cast as xs:long else () ), 
       		( if ($arg castable as xs:int) 
       			then $arg cast as xs:int else () ), 
       		( if ($arg castable as xs:short) 
       			then $arg cast as xs:short else () ), 
       		( if ($arg castable as xs:byte) 
       			then $arg cast as xs:byte else () ), 
       		( if ($arg castable as xs:byte) 
       			then $arg cast as xs:byte else () ), 
       		( if ($arg castable as xs:nonNegativeInteger) 
       			then $arg cast as xs:nonNegativeInteger else () ), 
       		( if ($arg castable as xs:unsignedLong) 
       			then $arg cast as xs:unsignedLong else () ), 
       		( if ($arg castable as xs:unsignedInt) 
       			then $arg cast as xs:unsignedInt else () ), 
       		( if ($arg castable as xs:unsignedShort) 
       			then $arg cast as xs:unsignedShort else () ), 
       		( if ($arg castable as xs:unsignedByte) 
       			then $arg cast as xs:unsignedByte else () ), 
       		( if ($arg castable as xs:positiveInteger) 
       			then $arg cast as xs:positiveInteger else () ), 
       		( if ($arg castable as xs:gYearMonth) 
       			then $arg cast as xs:gYearMonth else () ), 
       		( if ($arg castable as xs:gYear) 
       			then $arg cast as xs:gYear else () ), 
       		( if ($arg castable as xs:gMonthDay) 
       			then $arg cast as xs:gMonthDay else () ), 
       		( if ($arg castable as xs:gDay) 
       			then $arg cast as xs:gDay else () ), 
       		( if ($arg castable as xs:gMonth) 
       			then $arg cast as xs:gMonth else () ), 
       		( if ($arg castable as xs:string) 
       			then $arg cast as xs:string else () ), 
       		( if ($arg castable as xs:normalizedString) 
       			then $arg cast as xs:normalizedString else () ), 
       		( if ($arg castable as xs:token) 
       			then $arg cast as xs:token else () ), 
       		( if ($arg castable as xs:language) 
       			then $arg cast as xs:language else () ), 
       		( if ($arg castable as xs:NMTOKEN) 
       			then $arg cast as xs:NMTOKEN else () ), 
       		( if ($arg castable as xs:Name) 
       			then $arg cast as xs:Name else () ), 
       		( if ($arg castable as xs:NCName) 
       			then $arg cast as xs:NCName else () ), 
       		( if ($arg castable as xs:ID) 
       			then $arg cast as xs:ID else () ), 
       		( if ($arg castable as xs:IDREF) 
       			then $arg cast as xs:IDREF else () ), 
       		( if ($arg castable as xs:ENTITY) 
       			then $arg cast as xs:ENTITY else () ), 
       		( if ($arg castable as xs:boolean) 
       			then $arg cast as xs:boolean else () ), 
       		( if ($arg castable as xs:base64Binary) 
       			then $arg cast as xs:base64Binary else () ), 
       		( if ($arg castable as xs:hexBinary) 
       			then $arg cast as xs:hexBinary else () ), 
       		( if ($arg castable as xs:QName) 
       			then $arg cast as xs:QName else () ) 
       	}; 
       	for $value in fn:distinct-values( ( local:create(0), local:create(-1), local:create(1), local:create(3.141),
       	 	local:create(3.141e0), local:create(3.333), local:create(3.141e0), local:create(3.333e2),
       	  	local:create('NaN'), local:create('zero'), local:create('false'), local:create('true'),
       	   	local:create('http://www.example.com/'), local:create('2008-06-01'), local:create('1972-06-01Z'), 
       	   	local:create('2008-06-01T12:00:00'), local:create('1972-06-01T12:00:00+01:00'), 
       	   	local:create('00:00:00'), local:create('12:00:00'), local:create('2008'), local:create('1972Z'), 
       	   	local:create('--06'), local:create('--12Z'), local:create('2008-06'), local:create('1972-12Z'), 
       	   	local:create('--06-01'), local:create('--12-15Z'), local:create('---01'), local:create('---15Z'), 
       	   	local:create('P20Y15M'), local:create('P10Y15M'), local:create('-P2DT15H0M0S'), 
       	   	local:create('-P1DT15H0M0S'), local:create(fn:QName("http://www.example.com/example", "person")), 
       	   	local:create(fn:QName("http://www.example.com/example", "ht:person")), local:create('-P2DT15H0M0S'), 
       	   	local:create('FFFEFDFC'), local:create('aGVsbG8=') )) 
       	 order by string($value) return $value</test>
      <result>
         <any-of>
            <assert-string-value>---01 ---01 ---15Z ---15Z --06 --06 --06-01 --06-01 --12-15Z --12-15Z --12Z --12Z -1 -1 -P1DT15H -P1DT15H0M0S -P2DT15H -P2DT15H0M0S 0 0 00:00:00 00:00:00 1 1 12:00:00 12:00:00 1972-06-01T12:00:00+01:00 1972-06-01T12:00:00+01:00 1972-06-01Z 1972-06-01Z 1972-12Z 1972-12Z 1972Z 1972Z 2008 2008 2008 2008 2008 2008-06 2008-06 2008-06-01 2008-06-01 2008-06-01T12:00:00 2008-06-01T12:00:00 3 3.141 3.141 3.141 3.333 3.333 3.333 333 333.3 333.3 333.3 FFFEFDFC FFFEFDFC FFFEFDFC NaN NaN P10Y15M P11Y3M P20Y15M P21Y3M aGVsbG8= aGVsbG8= false false ht:person ht:person http://www.example.com/ person true true true zero zero</assert-string-value>
            <assert-string-value>---01 ---01 ---15Z ---15Z --06 --06 --06-01 --06-01 --12-15Z --12-15Z --12Z --12Z -1 -1 -P1DT15H -P1DT15H0M0S -P2DT15H -P2DT15H0M0S 0 0 00:00:00 00:00:00 1 1 12:00:00 12:00:00 1972-06-01T12:00:00+01:00 1972-06-01T12:00:00+01:00 1972-06-01Z 1972-06-01Z 1972-12Z 1972-12Z 1972Z 1972Z 2008 2008 2008 2008 2008 2008-06 2008-06 2008-06-01 2008-06-01 2008-06-01T12:00:00 2008-06-01T12:00:00 3 3.141 3.141 3.141 3.333 3.333 3.333 333 333.3 333.3 333.3 FFFEFDFC FFFEFDFC FFFEFDFC NaN NaN P10Y15M P11Y3M P20Y15M P21Y3M aGVsbG8= aGVsbG8= false false ht:person http://www.example.com/ person person true true true zero zero</assert-string-value>
            <assert-string-value>---01 ---01 ---15Z ---15Z --06 --06 --06-01 --06-01 --12-15Z --12-15Z --12Z --12Z -1 -1 -P1DT15H -P1DT15H0M0S -P2DT15H -P2DT15H0M0S 0 0 00:00:00 00:00:00 1 1 12:00:00 12:00:00 1972-06-01T12:00:00+01:00 1972-06-01T12:00:00+01:00 1972-06-01Z 1972-06-01Z 1972-12Z 1972-12Z 1972Z 1972Z 2008 2008 2008 2008 2008 2008-06 2008-06 2008-06-01 2008-06-01 2008-06-01T12:00:00 2008-06-01T12:00:00 3 3.141 3.141 3.141 3.333 3.333 3.333 333 333.3 333.3 333.3 FFFEFDFC FFFEFDFC FFFEFDFC FFFEFDFC NaN NaN NaN P10Y15M P10Y15M P11Y3M P20Y15M P20Y15M P21Y3M aGVsbG8= aGVsbG8= false false false ht:person http://www.example.com/ person person true true true true zero zero zero</assert-string-value>
         </any-of>
      </result>
   </test-case>

   <test-case name="cbcl-distinct-values-002b">
      <description> test fn:distinct-values with a mix of types </description>
      <created by="Tim Mills" on="2008-06-02"/>
      <dependency type="spec" value="XQ30+"/>
      <test>declare function local:create($arg) as xs:anyAtomicType* { ( if ($arg castable as xs:untypedAtomic) then $arg cast as xs:untypedAtomic else () ), ( if ($arg castable as xs:dateTime) then $arg cast as xs:dateTime else () ), ( if ($arg castable as xs:date) then $arg cast as xs:date else () ), ( if ($arg castable as xs:time) then $arg cast as xs:time else () ), ( if ($arg castable as xs:time) then $arg cast as xs:time else () ), ( if ($arg castable as xs:duration) then $arg cast as xs:duration else () ), ( if ($arg castable as xs:yearMonthDuration) then $arg cast as xs:yearMonthDuration else () ), ( if ($arg castable as xs:dayTimeDuration) then $arg cast as xs:dayTimeDuration else () ), ( if ($arg castable as xs:float) then $arg cast as xs:float else () ), ( if ($arg castable as xs:double) then $arg cast as xs:double else () ), ( if ($arg castable as xs:decimal) then $arg cast as xs:decimal else () ), ( if ($arg castable as xs:integer) then $arg cast as xs:integer else () ), ( if ($arg castable as xs:nonPositiveInteger) then $arg cast as xs:nonPositiveInteger else () ), ( if ($arg castable as xs:negativeInteger) then $arg cast as xs:negativeInteger else () ), ( if ($arg castable as xs:long) then $arg cast as xs:long else () ), ( if ($arg castable as xs:int) then $arg cast as xs:int else () ), ( if ($arg castable as xs:short) then $arg cast as xs:short else () ), ( if ($arg castable as xs:byte) then $arg cast as xs:byte else () ), ( if ($arg castable as xs:byte) then $arg cast as xs:byte else () ), ( if ($arg castable as xs:nonNegativeInteger) then $arg cast as xs:nonNegativeInteger else () ), ( if ($arg castable as xs:unsignedLong) then $arg cast as xs:unsignedLong else () ), ( if ($arg castable as xs:unsignedInt) then $arg cast as xs:unsignedInt else () ), ( if ($arg castable as xs:unsignedShort) then $arg cast as xs:unsignedShort else () ), ( if ($arg castable as xs:unsignedByte) then $arg cast as xs:unsignedByte else () ), ( if ($arg castable as xs:positiveInteger) then $arg cast as xs:positiveInteger else () ), ( if ($arg castable as xs:gYearMonth) then $arg cast as xs:gYearMonth else () ), ( if ($arg castable as xs:gYear) then $arg cast as xs:gYear else () ), ( if ($arg castable as xs:gMonthDay) then $arg cast as xs:gMonthDay else () ), ( if ($arg castable as xs:gDay) then $arg cast as xs:gDay else () ), ( if ($arg castable as xs:gMonth) then $arg cast as xs:gMonth else () ), ( if ($arg castable as xs:string) then $arg cast as xs:string else () ), ( if ($arg castable as xs:normalizedString) then $arg cast as xs:normalizedString else () ), ( if ($arg castable as xs:token) then $arg cast as xs:token else () ), ( if ($arg castable as xs:language) then $arg cast as xs:language else () ), ( if ($arg castable as xs:NMTOKEN) then $arg cast as xs:NMTOKEN else () ), ( if ($arg castable as xs:Name) then $arg cast as xs:Name else () ), ( if ($arg castable as xs:NCName) then $arg cast as xs:NCName else () ), ( if ($arg castable as xs:ID) then $arg cast as xs:ID else () ), ( if ($arg castable as xs:IDREF) then $arg cast as xs:IDREF else () ), ( if ($arg castable as xs:ENTITY) then $arg cast as xs:ENTITY else () ), ( if ($arg castable as xs:boolean) then $arg cast as xs:boolean else () ), ( if ($arg castable as xs:base64Binary) then $arg cast as xs:base64Binary else () ), ( if ($arg castable as xs:hexBinary) then $arg cast as xs:hexBinary else () ), ( if ($arg castable as xs:QName) then $arg cast as xs:QName else () ) }; for $value in fn:distinct-values( ( local:create(0), local:create(-1), local:create(1), local:create(3.141), local:create(3.141e0), local:create(3.333), local:create(3.141e0), local:create(3.333e2), local:create('NaN'), local:create('zero'), local:create('false'), local:create('true'), local:create('http://www.example.com/'), local:create('2008-06-01'), local:create('1972-06-01Z'), local:create('2008-06-01T12:00:00'), local:create('1972-06-01T12:00:00+01:00'), local:create('00:00:00'), local:create('12:00:00'), local:create('2008'), local:create('1972Z'), local:create('--06'), local:create('--12Z'), local:create('2008-06'), local:create('1972-12Z'), local:create('--06-01'), local:create('--12-15Z'), local:create('---01'), local:create('---15Z'), local:create('P20Y15M'), local:create('P10Y15M'), local:create('-P2DT15H0M0S'), local:create('-P1DT15H0M0S'), local:create(fn:QName("http://www.example.com/example", "person")), local:create(fn:QName("http://www.example.com/example", "ht:person")), local:create('-P2DT15H0M0S'), local:create('FFFEFDFC'), local:create('aGVsbG8=') )) order by string($value) return $value</test>
      <result>
	<assert-string-value>---01 ---01 ---15Z ---15Z --06 --06 --06-01 --06-01 --12-15Z --12-15Z --12Z --12Z -1 -1 -P1DT15H -P1DT15H0M0S -P2DT15H -P2DT15H0M0S 0 0 00:00:00 00:00:00 1 1 12:00:00 12:00:00 1972-06-01T12:00:00+01:00 1972-06-01T12:00:00+01:00 1972-06-01Z 1972-06-01Z 1972-12Z 1972-12Z 1972Z 1972Z 2008 2008 2008 2008 2008 2008-06 2008-06 2008-06-01 2008-06-01 2008-06-01T12:00:00 2008-06-01T12:00:00 3 3.141 3.141 3.141 3.333 3.333 3.333 333 333.3 333.3 333.3 FFFEFDFC FFFEFDFC FFFEFDFC FFFEFDFC NaN NaN NaN P10Y15M P10Y15M P11Y3M P20Y15M P20Y15M P21Y3M aGVsbG8= aGVsbG8= false false false ht:person http://www.example.com/ person person true true true true zero zero zero</assert-string-value>
      </result>
   </test-case>
   

   <test-case name="cbcl-distinct-values-003">
      <description> Test with static context dependant values </description>
      <created by="Nick Jones" on="2008-06-13"/>      
      <modified by="Tim Mills" on="2013-03-15" change="Bug 21222" />
      <test>distinct-values(
              (xs:dateTime("2008-01-01T13:00:00"),
               adjust-dateTime-to-timezone(xs:dateTime("2008-01-01T13:00:00"))))</test>
      <result>
         <assert-count>1</assert-count>
      </result>
   </test-case>
   

   <test-case name="cbcl-distinct-values-004">
      <description> test fn:distinct-values with xs:date </description>
      <created by="Tim Mills" on="2008-06-02"/>      
      <dependency type="spec" value="XQ10+"/>
      <test>for $value in fn:distinct-values(( xs:date('2008-06-01'), xs:date('2008-06-01'), xs:date('2012-06-01'), xs:date('1918-11-11Z'), xs:date('1972-06-01Z'), xs:date('1972-06-01Z') )) order by $value return $value</test>
      <result>
         <assert-string-value>1918-11-11Z 1972-06-01Z 2008-06-01 2012-06-01</assert-string-value>
      </result>
   </test-case>
   

   <test-case name="cbcl-distinct-values-005">
      <description> test fn:distinct-values with xs:dateTime </description>
      <created by="Tim Mills" on="2008-06-02"/>      
      <dependency type="spec" value="XQ10+"/>
      <test>for $value in fn:distinct-values(( xs:dateTime('2008-06-01T12:00:00'), xs:dateTime('2008-06-01T12:00:00'), xs:dateTime('2008-06-01T00:00:00'), xs:dateTime('2008-06-02T00:00:00'), xs:dateTime('1918-11-11T11:00:00Z'), xs:dateTime('1972-06-01T13:00:00Z'), xs:dateTime('1972-06-01T13:00:00Z') )) order by $value return $value</test>
      <result>
         <assert-string-value>1918-11-11T11:00:00Z 1972-06-01T13:00:00Z 2008-06-01T00:00:00 2008-06-01T12:00:00 2008-06-02T00:00:00</assert-string-value>
      </result>
   </test-case>
   

   <test-case name="cbcl-distinct-values-006">
      <description> test fn:distinct-values with xs:time </description>
      <created by="Tim Mills" on="2008-06-02"/>      
      <dependency type="spec" value="XQ10+"/>
      <test>for $value in fn:distinct-values(( xs:time('12:00:00'), xs:time('11:00:00'), xs:time('12:00:00'))) order by $value return $value</test>
      <result>
         <assert-string-value>11:00:00 12:00:00</assert-string-value>
      </result>
   </test-case>
   

   <test-case name="cbcl-distinct-values-007">
      <description> test fn:distinct-values with xs:time </description>
      <created by="Tim Mills" on="2008-06-02"/>      
      <dependency type="spec" value="XQ10+"/>
      <test>for $value at $p in ( for $time in fn:distinct-values(( xs:time('12:00:00'), xs:time('12:00:00'), xs:time('20:00:00'), xs:time('01:00:00+12:00'), xs:time('02:00:00+13:00'))) order by $time return $time ) return adjust-time-to-timezone($value, (xs:dayTimeDuration("PT0S")[$p]))</test>
      <result>
         <assert-string-value>13:00:00Z 12:00:00 20:00:00</assert-string-value>
      </result>
   </test-case>
   

   <test-case name="cbcl-distinct-values-008">
      <description> test fn:distinct-values with xs:hexBinary </description>
      <created by="Tim Mills" on="2008-06-13"/>
      <dependency type="spec" value="XQ10+"/>
      <test>for $value in fn:distinct-values(( xs:hexBinary('FFFF'), xs:hexBinary('FFFF'), xs:hexBinary('FFFE'), xs:hexBinary('FF'))) order by string($value) return $value</test>
      <result>
         <assert-string-value>FF FFFE FFFF</assert-string-value>
      </result>
   </test-case>
   

   <test-case name="cbcl-distinct-values-009">
      <description> test fn:distinct-values with xs:base64Binary </description>
      <created by="Tim Mills" on="2008-06-13"/>      
      <dependency type="spec" value="XQ10+"/>
      <test>for $value in fn:distinct-values(( xs:base64Binary('aGVsbG8NCg=='), xs:base64Binary('aGVsbG8NCg=='), xs:base64Binary('aGFsbG8NCg=='), xs:base64Binary('aGkNCg=='))) order by string($value) return $value</test>
      <result>
         <assert-string-value>aGFsbG8NCg== aGVsbG8NCg== aGkNCg==</assert-string-value>
      </result>
   </test-case>
   

   <test-case name="cbcl-distinct-values-010">
      <description> test fn:distinct-values with xs:untypedAtomic </description>
      <created by="Tim Mills" on="2008-06-13"/>      
      <dependency type="spec" value="XQ10+"/>
      <test>for $value in fn:distinct-values(( xs:untypedAtomic('a'), xs:untypedAtomic('a'), xs:untypedAtomic('b'), xs:untypedAtomic(''))) order by string($value) return $value</test>
      <result>
         <assert-string-value> a b</assert-string-value>
      </result>
   </test-case>
   

   <test-case name="cbcl-distinct-values-011">
      <description> test fn:distinct-values with xs:string </description>
      <created by="Tim Mills" on="2008-06-13"/>      
      <dependency type="spec" value="XQ10+"/>
      <test>for $value in fn:distinct-values(( xs:string('a'), xs:string('a'), xs:string('b'), xs:string(''))) order by string($value) return $value</test>
      <result>
         <assert-string-value> a b</assert-string-value>
      </result>
   </test-case>
   

   <test-case name="cbcl-distinct-values-012">
      <description> test fn:distinct-values with xs:gYear </description>
      <created by="Tim Mills" on="2008-06-13"/>
      <dependency type="spec" value="XQ10+"/>
      <test>for $value in fn:distinct-values(( xs:gYear('2008'), xs:gYear('2008'), xs:gYear('1972'))) order by string($value) return $value</test>
      <result>
         <assert-string-value>1972 2008</assert-string-value>
      </result>
   </test-case>
   

   <test-case name="cbcl-distinct-values-013">
      <description> test fn:distinct-values with durations </description>
      <created by="Tim Mills" on="2008-06-13"/>      
      <dependency type="spec" value="XQ10+"/>
      <test>for $value in fn:distinct-values(( xs:dayTimeDuration('P0D'), xs:yearMonthDuration('P0Y'), xs:duration('P0Y'), xs:duration('P0Y'), xs:yearMonthDuration('P0Y'), xs:dayTimeDuration('P0D'), xs:dayTimeDuration('P1D'), xs:yearMonthDuration('P1Y'), xs:duration('P1Y'))) order by string($value) return $value</test>
      <result>
         <assert-string-value>P1D P1Y PT0S</assert-string-value>
      </result>
   </test-case>
   

   <test-case name="cbcl-distinct-values-014">
      <description> test fn:distinct-values with xs:gMnnthDay </description>
      <created by="Tim Mills" on="2008-06-13"/>      
      <dependency type="spec" value="XQ10+"/>
      <test>for $value in fn:distinct-values(( xs:gMonthDay('--06-16'), xs:gMonthDay('--06-16'), xs:gMonthDay('--12-15'))) order by string($value) return $value</test>
      <result>
         <assert-string-value>--06-16 --12-15</assert-string-value>
      </result>
   </test-case>
   

   <test-case name="cbcl-distinct-values-016">
      <description> Tests distinct values with unknown, but unneeded collation </description>
      <created by="Nick Jones" on="2008-06-16"/>      
      <test>for $x in 65 to 75 return distinct-values(1 to 10,codepoints-to-string($x to $x+10))</test>
      <result>
         <any-of>
            <assert-string-value>1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10</assert-string-value>
            <error code="FOCH0002"/>
         </any-of>
      </result>
   </test-case>
</test-set>
