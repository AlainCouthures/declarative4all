<?xml version="1.0" encoding="UTF-8"?>
<test-set name="fn-id" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">
  <description>Tests for the id() function</description>
  <link document="http://www.w3.org/TR/xpath-functions-30/" idref="func-id" type="spec"/>
  <environment name="id-idref-dtd">
    <source file="id/iddtd.xml" role=".">
      <description>A DTD validated xml file, that contains data for the ID/IDREF function tests.</description>
      <created by="Carmelo Montanez" on="2005-11-27"/>
    </source>
  </environment>
  <environment name="UsingXMLId">
    <source file="id/UsingXMLId.xml" role=".">
      <description>This happens to be a schema, but its interest is in the xml:id attributes.</description>
      <created by="Frans Englich" on="2000-01-01"/>
    </source>
  </environment>
  <environment name="XMLIdMany">
    <source file="id/XMLIDMany.xml" role=".">
      <description>A file with many xml:id attributes, some of them invalid.</description>
      <created by="Frans Englich" on="2000-01-01"/>
    </source>
  </environment>
  <environment name="auction-xq">
    <source file="../docs/auction.xml" role=".">
      <description>Data for the the XML Query NS use cases: version for XQuery tests</description>
      <created by="XQuery WG" on="2005-02-11"/>
    </source>
  </environment>
  <test-case name="fn-id-1">
    <description>Evaluation of fn:id with incorrect arity.</description>
    <created by="Carmelo Montanez" on="2005-11-27"/>
    <environment ref="id-idref-dtd"/>
    <test>fn:id(&quot;argument 1&quot;, / ,&quot;Argument 3&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="fn-id-2">
    <description>Evaluation of fn:id with context item not a node.</description>
    <created by="Carmelo Montanez" on="2005-11-27"/>
    <modified by="O'Neil Delpratt" change="error code" on="2011-09-08"/>
    <test>(1 to 5)[fn:id(&quot;argument1&quot;)]</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="fn-id-3">
    <description>Evaluation of fn:id with second argument not a node.</description>
    <created by="Carmelo Montanez" on="2005-11-27"/>
    <test>fn:id(&quot;argument1&quot;, &quot;A&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="fn-id-4">
    <description>Evaluation of fn:id with node not being from document where root is the document element.</description>
    <created by="Carmelo Montanez" on="2005-11-27"/>
    <modified by="Michael Kay" change="remove dependency on special fots:copy() function" on="2011-08-10"/>
    <environment ref="auction-xq"/>
    <module file="id/copy.xq" uri="http://www.w3.org/QT3/copy"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
        import module namespace copy=&quot;http://www.w3.org/QT3/copy&quot;;
        let $var := copy:copy(/*) return fn:id(&quot;argument1&quot;, $var)
      </test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FODC0001&quot;))</result-string>
    <result>
      <error code="FODC0001"/>
    </result>
  </test-case>
  <test-case name="fn-id-dtd-5">
    <description>Evaluation of fn:id with given IDREF matching a single element.</description>
    <created by="Carmelo Montanez" on="2006-06-23"/>
    <modified by="Michael Kay" change="add dependency as per bug 21414" on="2013-05-01"/>
    <environment ref="id-idref-dtd"/>
    <dependency type="feature" value="infoset-dtd"/>
    <test>fn:id(&quot;id1&quot;, /IDS[1])/string(@anId)</test>
    <result-string>xs:string('id1')</result-string>
    <result>
      <assert-string-value>id1</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-id-dtd-6">
    <description>Evaluation of fn:id with given IDREF not matching a single element.</description>
    <created by="Carmelo Montanez" on="2006-06-23"/>
    <environment ref="id-idref-dtd"/>
    <test>fn:count(fn:id(&quot;nomatchingid&quot;, /IDS[1]))</test>
    <result-string/>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-id-dtd-7">
    <description>Evaluation of fn:id with given IDREF matching same element.</description>
    <created by="Carmelo Montanez" on="2006-06-23"/>
    <modified by="Michael Kay" change="add dependency as per bug 21414" on="2013-05-01"/>
    <environment ref="id-idref-dtd"/>
    <dependency type="feature" value="infoset-dtd"/>
    <test>fn:id(&quot;id2 id2&quot;, /IDS[1])/name()</test>
    <result-string>xs:string('elementwithid-2')</result-string>
    <result>
      <assert-string-value>elementwithid-2</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-id-dtd-8">
    <description>Evaluation of fn:id with multiple IDREF matching multiple elements.</description>
    <created by="Carmelo Montanez" on="2006-06-23"/>
    <modified by="Michael Kay" change="add dependency as per bug 21414" on="2013-05-01"/>
    <environment ref="id-idref-dtd"/>
    <dependency type="feature" value="infoset-dtd"/>
    <test>fn:id(&quot;id1 id2&quot;, /IDS[1])/name()</test>
    <result-string>xs:string('elementwithid-1 elementwithid-2')</result-string>
    <result>
      <assert-string-value>elementwithid-1 elementwithid-2</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-id-dtd-9">
    <description>Evaluation of fn:id with multiple IDREF, but only one matching one element.</description>
    <created by="Carmelo Montanez" on="2006-06-23"/>
    <modified by="Michael Kay" change="add dependency as per bug 21414" on="2013-05-01"/>
    <environment ref="id-idref-dtd"/>
    <dependency type="feature" value="infoset-dtd"/>
    <test>fn:id(&quot;id1 nomatching&quot;, /IDS[1])/name()</test>
    <result-string>xs:string('elementwithid-1')</result-string>
    <result>
      <assert-string-value>elementwithid-1</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-id-dtd-10">
    <description>Evaluation of fn:id with multiple IDREF, but none matching one element.</description>
    <created by="Carmelo Montanez" on="2006-06-23"/>
    <environment ref="id-idref-dtd"/>
    <test>fn:count(fn:id(&quot;nomatching1 nomatching2&quot;, /IDS[1]))</test>
    <result-string/>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-id-dtd-11">
    <description>Evaluation of fn:id with IDREF set to empty string.</description>
    <created by="Carmelo Montanez" on="2006-06-23"/>
    <environment ref="id-idref-dtd"/>
    <test>fn:id(&quot;&quot;, /IDS[1])</test>
    <result-string/>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case name="fn-id-dtd-12">
    <description>Evaluation of fn:id function that give first argument as argument to fn:substring.</description>
    <created by="Carmelo Montanez" on="2006-06-23"/>
    <modified by="Michael Kay" change="add dependency as per bug 21414" on="2013-05-01"/>
    <environment ref="id-idref-dtd"/>
    <dependency type="feature" value="infoset-dtd"/>
    <test>fn:id(fn:substring(&quot;1id3&quot;,2), /IDS[1])/name()</test>
    <result-string>xs:string('elementwithid-3')</result-string>
    <result>
      <assert-string-value>elementwithid-3</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-id-dtd-13">
    <description>Evaluation of fn:id, where the same IDREF makes reference to the same element.</description>
    <created by="Carmelo Montanez" on="2006-06-23"/>
    <modified by="Michael Kay" change="add dependency as per bug 21414" on="2013-05-01"/>
    <environment ref="id-idref-dtd"/>
    <dependency type="feature" value="infoset-dtd"/>
    <test>fn:id(&quot;id4&quot;, /IDS[1])/name()</test>
    <result-string>xs:string('elementwithid-4')</result-string>
    <result>
      <assert-string-value>elementwithid-4</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-id-dtd-14">
    <description>Evaluation of fn:id for which the given IDREF contains a prefix.</description>
    <created by="Carmelo Montanez" on="2006-06-23"/>
    <environment ref="id-idref-dtd"/>
    <test>fn:id(&quot;p1:id5&quot;, /IDS[1])</test>
    <result-string/>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case name="fn-id-dtd-15">
    <description>Evaluation of fn:id for which IDREF list have the same value for all its members.</description>
    <created by="Carmelo Montanez" on="2006-06-23"/>
    <environment ref="id-idref-dtd"/>
    <dependency type="feature" value="infoset-dtd"/>
    <test>fn:id(&quot;id1 id1&quot;, /IDS[1])/name()</test>
    <result-string>xs:string('elementwithid-1')</result-string>
    <result>
      <assert-string-value>elementwithid-1</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-id-dtd-16">
    <description>Evaluation of fn:id for which IDREF list have the same value for all its members but different case.</description>
    <created by="Carmelo Montanez" on="2006-06-23"/>
    <modified by="Michael Kay" change="add dependency as per bug 21414" on="2013-05-01"/>
    <environment ref="id-idref-dtd"/>
    <dependency type="feature" value="infoset-dtd"/>
    <test>fn:id(&quot;id1 ID1&quot;, /IDS[1])/name()</test>
    <result-string>xs:string('elementwithid-1')</result-string>
    <result>
      <assert-string-value>elementwithid-1</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-id-dtd-17">
    <description>Evaluation of fn:id for which IDREF uses the fn lower case function.</description>
    <created by="Carmelo Montanez" on="2006-06-23"/>
    <environment ref="id-idref-dtd"/>
    <dependency type="feature" value="infoset-dtd"/>
    <test>fn:id(fn:lower-case(&quot;ID1&quot;), /IDS[1])/name()</test>
    <result-string>xs:string('elementwithid-1')</result-string>
    <result>
      <assert-string-value>elementwithid-1</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-id-dtd-18">
    <description>Evaluation of fn:id for which IDREF uses the fn:upper-case function.</description>
    <created by="Carmelo Montanez" on="2006-06-23"/>
    <modified by="Michael Kay" change="add dependency as per bug 21414" on="2013-05-01"/>
    <environment ref="id-idref-dtd"/>
    <dependency type="feature" value="infoset-dtd"/>
    <test>fn:id(fn:upper-case(&quot;id5&quot;), /IDS[1])/name()</test>
    <result-string>xs:string('elementwithid-6')</result-string>
    <result>
      <assert-string-value>elementwithid-6</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-id-dtd-19">
    <description>Evaluation of fn:id for which $arg uses the fn:concat function.</description>
    <created by="Carmelo Montanez" on="2006-06-23"/>
    <modified by="Michael Kay" change="add dependency as per bug 21414" on="2013-05-01"/>
    <environment ref="id-idref-dtd"/>
    <dependency type="feature" value="infoset-dtd"/>
    <test>fn:id(fn:concat(&quot;i&quot;,&quot;d1&quot;), /IDS[1])/name()</test>
    <result-string>xs:string('elementwithid-1')</result-string>
    <result>
      <assert-string-value>elementwithid-1</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-id-dtd-20">
    <description>Evaluation of fn:id for which $arg uses the xs:string function.</description>
    <created by="Carmelo Montanez" on="2006-06-23"/>
    <modified by="Michael Kay" change="add dependency as per bug 21414" on="2013-05-01"/>
    <environment ref="id-idref-dtd"/>
    <dependency type="feature" value="infoset-dtd"/>
    <test>fn:id(xs:string(&quot;id1&quot;), /IDS[1])/name()</test>
    <result-string>xs:string('elementwithid-1')</result-string>
    <result>
      <assert-string-value>elementwithid-1</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-id-dtd-21">
    <description>Evaluation of fn:id for which $arg uses the fn:string-join function.</description>
    <created by="Carmelo Montanez" on="2006-06-23"/>
    <modified by="Michael Kay" change="add dependency as per bug 21414" on="2013-05-01"/>
    <environment ref="id-idref-dtd"/>
    <dependency type="feature" value="infoset-dtd"/>
    <test>fn:id(fn:string-join((&quot;id&quot;,&quot;1&quot;),&quot;&quot;), /IDS[1])/name()</test>
    <result-string>xs:string('elementwithid-1')</result-string>
    <result>
      <assert-string-value>elementwithid-1</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-id-22">
    <description>Evaluation of fn:id with context item not a node and second argument set to &quot;.&quot;.</description>
    <created by="Carmelo Montanez" on="2006-02-08"/>
    <modified by="O'Neil Delpratt" change="error code" on="2011-09-08"/>
    <test>(1 to 5)[ fn:id(&quot;argument1&quot;,.)]</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="fn-id-dtd-23">
    <description>Evaluation of fn:id together with declare ordering.</description>
    <created by="Carmelo Montanez" on="2006-06-23"/>
    <modified by="Michael Kay" change="add dependency as per bug 21414" on="2013-05-01"/>
    <environment ref="id-idref-dtd"/>
    <dependency type="spec" value="XQ10+"/>
    <dependency type="feature" value="infoset-dtd"/>
    <test>declare ordering ordered; fn:id(&quot;id1 id2&quot;, /IDS[1])/name()</test>
    <result-string>xs:string('elementwithid-1 elementwithid-2')</result-string>
    <result>
      <assert-string-value>elementwithid-1 elementwithid-2</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqIDFunc-1">
    <description>Wrong arguments to fn:id().</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>id((), ())</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K2-SeqIDFunc-2">
    <description>Wrong arguments to fn:id().</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(1, 2, 3)[id(&quot;ncname&quot;, .)]</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K2-SeqIDFunc-3">
    <description>Wrong arguments to fn:id().</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(1, 2, 3)[id(&quot;ncname&quot;)]</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K2-SeqIDFunc-4">
    <description>Use an invalid target node.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="Michael Kay" change="remove dependency on special fots:copy() function" on="2011-08-10"/>
    <environment ref="auction-xq"/>
    <module file="id/copy.xq" uri="http://www.w3.org/QT3/copy"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
        import module namespace copy=&quot;http://www.w3.org/QT3/copy&quot;;
        id(&quot;id&quot;, copy:copy((//comment())[1]))
      </test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FODC0001&quot;))</result-string>
    <result>
      <error code="FODC0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqIDFunc-5">
    <description>Use an invalid target node.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="Michael Kay" change="remove dependency on special fots:copy() function" on="2011-08-10"/>
    <environment ref="auction-xq"/>
    <module file="id/copy.xq" uri="http://www.w3.org/QT3/copy"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
        import module namespace copy=&quot;http://www.w3.org/QT3/copy&quot;;
        id(&quot;id&quot;, copy:copy((//processing-instruction())[1]))
      </test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FODC0001&quot;))</result-string>
    <result>
      <error code="FODC0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqIDFunc-6">
    <description>Use an invalid target node</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="Michael Kay" change="remove dependency on special fots:copy() function" on="2011-08-10"/>
    <environment ref="auction-xq"/>
    <module file="id/copy.xq" uri="http://www.w3.org/QT3/copy"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
        import module namespace copy=&quot;http://www.w3.org/QT3/copy&quot;;
        id(&quot;id&quot;, copy:copy(/*))
      </test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FODC0001&quot;))</result-string>
    <result>
      <error code="FODC0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqIDFunc-7">
    <description>Use an invalid target node</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="Michael Kay" change="remove dependency on special fots:copy() function" on="2011-08-10"/>
    <environment ref="auction-xq"/>
    <module file="id/copy.xq" uri="http://www.w3.org/QT3/copy"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
        import module namespace copy=&quot;http://www.w3.org/QT3/copy&quot;;
        id(&quot;id&quot;, (copy:copy(/*)//*:NegativeComments)[last()])
      </test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FODC0001&quot;))</result-string>
    <result>
      <error code="FODC0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqIDFunc-8">
    <description>Use an invalid target node.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="Michael Kay" change="remove dependency on special fots:copy() function" on="2011-08-10"/>
    <modified by="O'Neil Delpratt" change="reverted back to the original test-case in XQTS" on="2011-09-08"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $i := <e><e/><e/><e/><e/><e/><e/><e/><b xml:id="foo"/><e/></e>return id("foo", $i)]]>
    </test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;FODC0001&quot;))</result-string>
    <result>
      <error code="FODC0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqIDFunc-9">
    <description>Use a constructed document node with xml:id.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $i := document {<e> <e/> <e/> <e/> <e/> <e/> <e/> <e/> <b xml:id="foo"/> <e/> </e>} return id("foo", $i)/name()]]>
    </test>
    <result-string>xs:string('b')</result-string>
    <result>
      <assert-string-value>b</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqIDFunc-10">
    <description>Select elements with xml:id, and trigger node sorting.</description>
    <created by="Frans Englich" on="2008-01-15"/>
    <environment ref="UsingXMLId"/>
    <test>for $i in id((&quot;short&quot;, &quot;positiveInteger&quot;)) return $i/@name/string()</test>
    <result-string>xs:string('positiveInteger short')</result-string>
    <result>
      <assert-string-value>positiveInteger short</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqIDFunc-11">
    <description>Select elements with xml:id, and trigger node sorting.</description>
    <created by="Frans Englich" on="2008-01-15"/>
    <modified by="Michael Kay" change="add dependency as per bug 21414" on="2013-05-01"/>
    <modified by="Michael Kay" change="remove dependency as per bug 21414" on="2013-05-21"/>
    <environment ref="UsingXMLId"/>
    <test>id((&quot;short&quot;), //xs:element/@name[. = &quot;positiveInteger&quot;])/@name</test>
    <result-string>xs:string('short')</result-string>
    <result>
      <assert-string-value>short</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqIDFunc-12">
    <description>Select elements with xml:id, trigger node sorting, and use an invalid NCName in the lookup.</description>
    <created by="Frans Englich" on="2008-01-15"/>
    <modified by="Michael Kay" change="add dependency as per bug 21414" on="2013-05-01"/>
    <modified by="Michael Kay" change="remove dependency as per bug 21414" on="2013-05-21"/>
    <environment ref="UsingXMLId"/>
    <test>id((&quot;.&quot;, &quot;short&quot;, &quot;123&quot;), //xs:element/@name[. = &quot;positiveInteger&quot;])/@name</test>
    <result-string>xs:string('short')</result-string>
    <result>
      <assert-string-value>short</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqIDFunc-13">
    <description>Use on xml:id with input strings which contains many IDREFs, and invalid ones too.</description>
    <created by="Frans Englich" on="2008-11-13"/>
    <environment ref="XMLIdMany"/>
    <test>fn:id(//b/@ref)/data(exactly-one(@*))</test>
    <result-string>xs:string('a b c d e f i')</result-string>
    <result>
      <assert-string-value>a b c d e f i</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqIDFunc-14">
    <description>Select elements with xml:id, and trigger node sorting: space-separated id list</description>
    <created by="Michael Kay" on="2011-07-01"/>
    <environment ref="UsingXMLId"/>
    <test>for $i in id((&quot;short positiveInteger&quot;)) return $i/@name/string()</test>
    <result-string>xs:string('positiveInteger short')</result-string>
    <result>
      <assert-string-value>positiveInteger short</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqIDFunc-15">
    <description>Use on xml:id with input strings which contains many IDREFs, and invalid ones too; tab-separated id list</description>
    <created by="Michael Kay" on="2011-07-01"/>
    <environment ref="XMLIdMany"/>
    <test>fn:id(string-join(reverse(//b/@ref), '	'))/data(exactly-one(@*))</test>
    <result-string>xs:string('a b c d e f i')</result-string>
    <result>
      <assert-string-value>a b c d e f i</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-id-001">
    <description> test fn:id on the empty sequence </description>
    <created by="Tim Mills" on="2008-04-15"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[
      	declare function local:generate($arg as xs:integer?) as xs:string* { if ($arg = 0) then () else 'id1', 'id2' }; 
      	let $doc := document { <root /> } return fn:empty( fn:id( local:generate(0), $doc) )
      ]]>
    </test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="cbcl-id-002">
    <description> test fn:id on the empty sequence </description>
    <created by="Tim Mills" on="2008-04-15"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[
      	let $doc := document { <root /> } return fn:empty( fn:id( (), $doc) )
      ]]>
    </test>
    <result-string/>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="cbcl-id-003">
    <description> test fn:id in an axis expression </description>
    <created by="Tim Mills" on="2008-04-15"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[
      	declare function local:generate($arg as xs:integer?) as xs:string* { if ($arg = 0) then () else 'id1', 'id2' }; 
      	let $doc := document { <root /> } return fn:empty( $doc/fn:id( local:generate(0)) )
      ]]>
    </test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
</test-set>