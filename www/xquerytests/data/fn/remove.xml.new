<?xml version="1.0" encoding="UTF-8"?>
<test-set name="fn-remove" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">
  <description>Tests for the remove() function</description>
  <link document="http://www.w3.org/TR/xpath-functions-30/" idref="func-remove" type="spec"/>
  <test-case name="fn-remove-mix-args-001">
    <description> arg1: sequence of string, arg2: integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:remove ( (&quot;a&quot;, &quot;b&quot;, &quot;c&quot;), 1)</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;b&quot;, &quot;c&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-remove-mix-args-002">
    <description> arg1: sequence of string, arg2: integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:remove ( (&quot;a&quot;, &quot;b&quot;, &quot;c&quot;), 0)</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;a&quot;, &quot;b&quot;, &quot;c&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-remove-mix-args-003">
    <description> arg1: sequence of string, arg2: integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:remove ( (&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, true()), 3)</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;a&quot;, &quot;b&quot;, true()</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-remove-mix-args-004">
    <description> arg1: sequence of string, arg2: integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:remove ( (xs:string(&quot;xyz&quot;), (), (), &quot;a&quot; , &quot;b&quot;), 2)</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;xyz&quot;, &quot;b&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-remove-mix-args-005">
    <description> arg1: sequence of string,anyURI,arg2: integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:remove( (xs:anyURI(&quot;www.example.com&quot;), &quot;a&quot;, (&quot;&quot;), &quot;b&quot;), 2)</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;www.example.com&quot;, &quot;&quot;, &quot;b&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-remove-mix-args-006">
    <description> arg1: sequence of string,anyURI,arg2: integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:remove( (xs:anyURI(&quot;www.example.com&quot;), &quot;a&quot;, (&quot;&quot;), &quot;b&quot;), 10)</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;www.example.com&quot;, &quot;a&quot;, &quot;&quot;,  &quot;b&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-remove-mix-args-007">
    <description> arg1: sequence of string,anyURI,arg2: integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:remove( (xs:anyURI(&quot;www.example.com&quot;), &quot;a&quot;, (&quot;&quot;), &quot;b&quot;), -20)</test>
    <result-string/>
    <result>
      <assert-deep-eq>&quot;www.example.com&quot;, &quot;a&quot;, &quot;&quot;,  &quot;b&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-remove-mix-args-008">
    <description> arg1:sequence of string,integer,arg2: integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:remove( (xs:integer(&quot;100&quot;), xs:string(&quot;abc&quot;)), 1)</test>
    <result-string/>
    <result>
      <assert-eq>&quot;abc&quot;</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-remove-mix-args-009">
    <description> arg1: sequence of decimal, integer, anyURI arg2: integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:remove( (xs:decimal(&quot;1.01&quot;), xs:integer(&quot;12&quot;), xs:anyURI(&quot;www.example.com&quot;)),3)</test>
    <result-string/>
    <result>
      <assert-deep-eq>1.01, 12</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-remove-mix-args-010">
    <description> arg1: sequence of string,float ,arg2: integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:remove( (xs:float(&quot;1.01&quot;), xs:string(&quot;a&quot;)), 2)</test>
    <result-string/>
    <result>
      <assert-eq>1.01</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-remove-mix-args-011">
    <description> arg1: sequence of float,integer,arg2: integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:remove( (xs:float(&quot;NaN&quot;), 100, (), 2), 2)</test>
    <result-string/>
    <result>
      <assert-deep-eq>xs:float('NaN'), 2</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-remove-mix-args-012">
    <description> arg1: sequence of string,float, decimal arg2: integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:remove( (xs:float(&quot;-INF&quot;), xs:decimal(&quot;2.34&quot;), &quot;abc&quot;), 2)</test>
    <result-string/>
    <result>
      <assert-deep-eq>xs:float(&quot;-INF&quot;), &quot;abc&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-remove-mix-args-013">
    <description> arg1: sequence of double,float,boolean ,arg2: integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:remove( (xs:double(&quot;1.34&quot;), xs:float(&quot;INF&quot;), true()), 1)</test>
    <result-string/>
    <result>
      <assert-deep-eq>xs:float(&quot;INF&quot;), true()</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-remove-mix-args-014">
    <description> arg1: sequence of double, integer ,arg2: integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:remove( (xs:double(&quot;INF&quot;), 2, 3), 2)</test>
    <result-string/>
    <result>
      <assert-deep-eq>xs:double(&quot;INF&quot;), 3</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-remove-mix-args-015">
    <description> arg1: sequence of string,double ,arg2: integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:remove( (xs:double(&quot;NaN&quot;), &quot;a&quot;, &quot;b&quot;), 3)</test>
    <result-string/>
    <result>
      <assert-deep-eq>xs:double(&quot;NaN&quot;), &quot;a&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-remove-mix-args-016">
    <description> arg1: sequence of string,boolean, double ,arg2: integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:remove( (xs:boolean(&quot;1&quot;), xs:double(&quot;-INF&quot;), &quot;s&quot;), 3)</test>
    <result-string/>
    <result>
      <assert-deep-eq>true(), xs:double(&quot;-INF&quot;)</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-remove-mix-args-017">
    <description> arg1: sequence of boolean ,arg2: integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:remove( (xs:boolean(&quot;0&quot;)), 2 )</test>
    <result-string>xs:boolean('false')</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-remove-mix-args-018">
    <description> arg1: sequence of string,boolean, date ,arg2: integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:remove( (xs:boolean(&quot;true&quot;), xs:date(&quot;1993-03-31&quot;), 4, &quot;a&quot;),3)</test>
    <result-string/>
    <result>
      <assert-deep-eq>true(), xs:date('1993-03-31'), &quot;a&quot;</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-remove-mix-args-019">
    <description> arg1: sequence of string,dateTime,boolean ,arg2: integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:remove( (xs:dateTime(&quot;1972-12-31T00:00:00&quot;), xs:boolean(&quot;false&quot;), (), (&quot; &quot;)) ,3)</test>
    <result-string/>
    <result>
      <assert-deep-eq>xs:dateTime(&quot;1972-12-31T00:00:00&quot;), false()</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-remove-mix-args-020">
    <description> arg1: sequence of time,decimal, integer ,arg2: integer </description>
    <created by="Pulkita Tyagi" on="2005-05-26"/>
    <test>fn:remove( (xs:time(&quot;12:30:00&quot;), xs:decimal(&quot;2.000003&quot;), 2), 2)</test>
    <result-string/>
    <result>
      <assert-deep-eq>xs:time(&quot;12:30:00&quot;), 2</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="K-SeqRemoveFunc-1">
    <description> A test whose essence is: `remove()`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>remove()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqRemoveFunc-2">
    <description> A test whose essence is: `remove(1, 2, &quot;wrong param&quot;)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>remove(1, 2, &quot;wrong param&quot;)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqRemoveFunc-3">
    <description> A test whose essence is: `count(remove((1, 2, 3), 0)) eq 3`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>count(remove((1, 2, 3), 0)) eq 3</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqRemoveFunc-4">
    <description> A test whose essence is: `count(remove((1, 2, 3), -4)) eq 3`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>count(remove((1, 2, 3), -4)) eq 3</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqRemoveFunc-5">
    <description> A test whose essence is: `empty(remove((), 4))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(remove((), 4))</test>
    <result-string/>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-SeqRemoveFunc-6">
    <description> A test whose essence is: `remove((&quot;one&quot;, 2, 3), 1) instance of xs:integer+`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>remove((&quot;one&quot;, 2, 3), 1) instance of xs:integer+</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqRemoveFunc-7">
    <description> A test whose essence is: `remove((1, &quot;two&quot;, 3), 2) instance of xs:integer+`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>remove((1, &quot;two&quot;, 3), 2) instance of xs:integer+</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqRemoveFunc-8">
    <description> A test whose essence is: `remove((1, 2, &quot;three&quot;), 3) instance of xs:integer+`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>remove((1, 2, &quot;three&quot;), 3) instance of xs:integer+</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqRemoveFunc-9">
    <description> A test whose essence is: `count(remove((&quot;one&quot;, 2, 3), 1)) eq 2`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>count(remove((&quot;one&quot;, 2, 3), 1)) eq 2</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqRemoveFunc-10">
    <description> A test whose essence is: `count(remove((1, &quot;two&quot;, 3), 2)) eq 2`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>count(remove((1, &quot;two&quot;, 3), 2)) eq 2</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqRemoveFunc-11">
    <description> A test whose essence is: `count(remove((1, 2, &quot;three&quot;), 3)) eq 2`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>count(remove((1, 2, &quot;three&quot;), 3)) eq 2</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqRemoveFunc-12">
    <description> A test whose essence is: `remove((3.1, &quot;four&quot;), 1)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>remove((3.1, &quot;four&quot;), 1)</test>
    <result-string/>
    <result>
      <assert-eq>&quot;four&quot;</assert-eq>
    </result>
  </test-case>
  <test-case name="K-SeqRemoveFunc-13">
    <description> A test whose essence is: `remove(error(), 1)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>remove(error(), 1)</test>
    <result-string/>
    <result>
      <any-of>
        <error code="FOER0000"/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-SeqRemoveFunc-14">
    <description> Combine fn:remove() with operator 'eq'. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>remove((5, 1e0), 2) eq 5</test>
    <result-string/>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPTY0004"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-SeqRemoveFunc-15">
    <description> Combine fn:remove() with operator 'eq'. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>5 eq remove((5, 1e0), 2)</test>
    <result-string/>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPTY0004"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-SeqRemoveFunc-16">
    <description> Combine remove(), with a predicate and the 'eq' operator. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal((1, 2), (1, 2)[remove((true(), &quot;a string&quot;), 2)]) eq 0</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqRemoveFunc-17">
    <description> Combine fn:remove() with operator 'eq'. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>remove((4, xs:untypedAtomic(&quot;4&quot;)), 1) eq 4</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqRemoveFunc-18">
    <description> Combine fn:remove() with operator 'eq'. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>4 eq remove((4, xs:untypedAtomic(&quot;1&quot;)), 1)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqRemoveFunc-19">
    <description> An expression involving the eq operator that trigger certain optimization paths in some implementations. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>count(remove(current-time(), 1)) eq 0</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqRemoveFunc-20">
    <description> An expression involving the eq operator that trigger certain optimization paths in some implementations. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(remove(current-time(), 1))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqRemoveFunc-21">
    <description> Apply a predicate to the result of fn:remove(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>remove((1, 2, 3, current-time()), 4)[last()]</test>
    <result-string/>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K-SeqRemoveFunc-22">
    <description> Apply a predicate to the result of fn:remove(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>remove((1, 2, 3, current-time()), 4)[last() - 1]</test>
    <result-string/>
    <result>
      <assert-eq>2</assert-eq>
    </result>
  </test-case>
  <test-case name="K-SeqRemoveFunc-23">
    <description> Apply a predicate to the result of fn:remove(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>remove((1, 2, 3, current-time()), 9)[last() - 1]</test>
    <result-string/>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K-SeqRemoveFunc-24">
    <description> Apply a predicate to the result of fn:remove(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(remove((1, 2, 3, current-time()), 9)[last() - 10])</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="cbcl-fn-remove-001">
    <description> Tests with non-value position </description>
    <created by="Nick Jones" on="2008-06-16"/>
    <test>remove(1 to 10,exactly-one((1 to 10)[. div 2 = 2]))</test>
    <result-string>xs:string('1 2 3 5 6 7 8 9 10')</result-string>
    <result>
      <assert-string-value>1 2 3 5 6 7 8 9 10</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-fn-remove-002">
    <description> Tests removal from range value </description>
    <created by="Nick Jones" on="2008-06-16"/>
    <test>remove(1 to 10,4)</test>
    <result-string>xs:string('1 2 3 5 6 7 8 9 10')</result-string>
    <result>
      <assert-string-value>1 2 3 5 6 7 8 9 10</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-fn-remove-003">
    <description> Tests removal from non-range value </description>
    <created by="Nick Jones" on="2008-06-16"/>
    <test>remove((1 to 10)[. mod 2 = 0],4)</test>
    <result-string>xs:string('2 4 6 10')</result-string>
    <result>
      <assert-string-value>2 4 6 10</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-fn-remove-004">
    <description> Tests removal from a sequence of values </description>
    <created by="Nick Jones" on="2008-06-16"/>
    <test>
        remove(((1 to 10)[. mod 2 = 0],&quot;blah&quot;,(1 to 10)[. mod 2 = 0]),4)
      </test>
    <result-string>xs:string('2 4 6 10 blah 2 4 6 8 10')</result-string>
    <result>
      <assert-string-value>2 4 6 10 blah 2 4 6 8 10</assert-string-value>
    </result>
  </test-case>
</test-set>