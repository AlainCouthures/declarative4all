<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" 
          name="fn-has-children" covers="fn-has-children">
   <description>Tests for the has-children() function</description>
   <link type="spec" document="http://www.w3.org/TR/xpath-functions-30/"
         idref="func-has-children"/>

   <environment name="has-children">
      <source role="." file="has-children/has-children.xml">
	     <description>Data for has-children tests</description>
	     <created by="Tim Mills" on="2011-11-28"/>
      </source>
   </environment>

   <test-case name="fn-has-children-001">
      <description>Attempts to reference the "has-children" function with arity zero.</description>
      <created by="Tim Mills" on="2011-11-28"/>
      <modified by="Tim Mills" on="2012-05-01" change="Context-dependent functions can now be referenced without error." />
      <modified by="O'Neil Delpratt" on="2012-11-08" change="Bug #19881 - Added HOF dependency" />
      <dependency type="feature" value="higherOrderFunctions"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>fn:exists( fn:has-children#0 )</test>
      <result>
         <assert-true />
      </result>
   </test-case>

   <test-case name="fn-has-children-002">
      <description>Attempts to reference the "has-children" function with arity one.</description>
      <created by="Tim Mills" on="2011-11-28"/>
      <modified by="O'Neil Delpratt" on="2012-11-08" change="Bug #19881 - Added HOF dependency" />
      <dependency type="feature" value="higherOrderFunctions"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>fn:exists( fn:has-children#1 )</test>
      <result>
         <assert-true />
      </result>
   </test-case>

   <test-case name="fn-has-children-003">
      <description>Attempts to evaluate the "has-children" function with two arguments.</description>
      <created by="Tim Mills" on="2011-11-28"/>
      <modified by="O'Neil Delpratt" on="2012-11-08" change="Bug #19881 - Added HOF dependency" />
      <dependency type="feature" value="higherOrderFunctions"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>fn:has-children( fn:contains#2, fn:contains#2 )</test>
      <result>
         <error code="XPST0017" />
      </result>
   </test-case>

   <test-case name="fn-has-children-004">
      <description>Attempts to reference the "has-children" function with arity two.</description>
      <created by="Tim Mills" on="2011-11-28"/>
      <modified by="O'Neil Delpratt" on="2012-11-08" change="Bug #19881 - Added HOF dependency" />
      <dependency type="feature" value="higherOrderFunctions"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>fn:has-children#2</test>
      <result>
         <error code="XPST0017" />
      </result>
   </test-case>

   <test-case name="fn-has-children-005">
      <description>Evaluates the zero-arity "has-children" function with absent context item.</description>
      <created by="Tim Mills" on="2011-11-28"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>fn:has-children()</test>
      <result>
	<any-of>
	  <error code="XPDY0002" />
	  <!-- an implementation may know statically that the context item will be absent -->
	  <error code="XPTY0004" />
	</any-of>
      </result>
   </test-case>

   <test-case name="fn-has-children-006">
      <description>Evaluates the (arity one) "has-children" function with absent context item.</description>
      <created by="Tim Mills" on="2011-11-28"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>fn:has-children(.)</test>
      <result>
	<any-of>
	  <error code="XPDY0002" />
	  <!-- an implementation may know statically that the context item will be absent -->
	  <error code="XPTY0004" />
	</any-of>
      </result>
   </test-case>

   <test-case name="fn-has-children-007">
      <description>Evaluates the zero-arity "has-children" function with context item which is not a node.</description>
      <created by="Tim Mills" on="2011-11-28"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>(1)[fn:has-children()]</test>
      <result>
	<any-of>
	  <error code="XPTY0004" />
	</any-of>
      </result>
   </test-case>

   <test-case name="fn-has-children-008">
      <description>Evaluates the zero-arity "has-children" function with context item which is not a node.</description>
      <created by="Tim Mills" on="2011-11-28"/>
      <modified by="O'Neil Delpratt" on="2012-11-08" change="Bug #19881 - Added HOF dependency" />
      <dependency type="feature" value="higherOrderFunctions"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>(fn:concat#2)[fn:has-children()]</test>
      <result>
	<any-of>
	  <error code="XPTY0004" />
	</any-of>
      </result>
   </test-case>

   <test-case name="fn-has-children-009">
      <description>Tests the type checking of the argument.</description>
      <created by="Tim Mills" on="2011-11-28"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>fn:has-children(1)</test>
      <result>
	<error code="XPTY0004" />
      </result>
   </test-case>

   <test-case name="fn-has-children-010">
      <description>Tests the type checking of the argument.</description>
      <created by="Tim Mills" on="2011-11-28"/>
      <modified by="O'Neil Delpratt" on="2012-11-08" change="Bug #19881 - Added HOF dependency" />
      <dependency type="feature" value="higherOrderFunctions"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>fn:has-children(fn:concat#2)</test>
      <result>
	<error code="XPTY0004" />
      </result>
   </test-case>

   <test-case name="fn-has-children-011">
      <description>Tests the type checking of the argument.</description>
      <created by="Tim Mills" on="2011-11-28"/>
      <environment ref="has-children" />
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>fn:has-children( (.,.) )</test>
      <result>
	<error code="XPTY0004" />
      </result>
   </test-case>

   <test-case name="fn-has-children-012">
      <description>Tests the type checking of the argument.</description>
      <created by="Tim Mills" on="2011-11-28"/>
      <environment ref="has-children" />
      <dependency type="spec" value="XP30+ XQ30+"/>
      <dependency type="feature" value="staticTyping"/>
      <test>( if ( fn:current-dateTime() eq
                   fn:dateTime( fn:current-date(), fn:current-time() ))
              then .
              else 1 ) ! fn:has-children()</test>
      <result>
         <error code="XPTY0004" />
      </result>
   </test-case>

   <test-case name="fn-has-children-013">
      <description>Tests the type checking of the argument.</description>
      <created by="Tim Mills" on="2011-11-28"/>
      <environment ref="has-children" />
      <dependency type="spec" value="XP30+ XQ30+"/>
      <dependency type="feature" value="staticTyping"/>
      <test>fn:has-children( if ( fn:current-dateTime() eq
                                  fn:dateTime( fn:current-date(),
                                               fn:current-time() ))
                             then .
                             else 1 )</test>
      <result>
         <error code="XPTY0004" />
      </result>
   </test-case>

   <test-case name="fn-has-children-014">
      <description>Tests the type checking of the argument.</description>
      <created by="Tim Mills" on="2011-11-28"/>
      <environment ref="has-children" />
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>(., 1) ! fn:has-children()</test>
      <result>
         <error code="XPTY0004" />
      </result>
   </test-case>

   <test-case name="fn-has-children-015">
      <description>Tests the type checking of the argument.</description>
      <created by="Tim Mills" on="2011-11-28"/>
      <environment ref="has-children" />
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>(., 1) ! fn:has-children(.)</test>
      <result>
         <error code="XPTY0004" />
      </result>
   </test-case>

   <test-case name="fn-has-children-016">
      <description>Tests the return type of the "has-children" function.</description>
      <created by="Tim Mills" on="2011-11-28"/>
      <environment ref="has-children" />
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>fn:has-children()</test>
      <result>
         <assert-type>xs:boolean</assert-type>
      </result>
   </test-case>

   <test-case name="fn-has-children-017">
      <description>Tests the return type of the "has-children" function.</description>
      <created by="Tim Mills" on="2011-11-28"/>
      <environment ref="has-children" />
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>fn:has-children(.)</test>
      <result>
         <assert-type>xs:boolean</assert-type>
      </result>
   </test-case>

   <test-case name="fn-has-children-018">
      <description>Evaluates the "has-children" function with the argument set as follows: context item of type attribute() </description>
      <created by="Tim Mills" on="2011-11-28"/>
      <environment ref="has-children" />
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>/root/@attribute/fn:has-children()</test>
      <result>
         <assert-false />
      </result>
   </test-case>

   <test-case name="fn-has-children-019">
      <description>Evaluates the "has-children" function with the argument set as follows: $node of type attribute() </description>
      <created by="Tim Mills" on="2011-11-28"/>
      <environment ref="has-children" />
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>fn:has-children( /root/@attribute )</test>
      <result>
         <assert-false />
      </result>
   </test-case>

   <test-case name="fn-has-children-020">
      <description>Evaluates the "has-children" function with the argument set as follows: context item of type namespace() </description>
      <created by="Tim Mills" on="2011-11-28"/>
      <environment ref="has-children" />
      <dependency type="spec" value="XP30+"/>
      <dependency type="feature" value="namespace-axis"/>
      <test>/root/namespace::fots/fn:has-children()</test>
      <result>
         <assert-false />
      </result>
   </test-case>

   <test-case name="fn-has-children-021">
      <description>Evaluates the "has-children" function with the argument set as follows: $node of type attribute() </description>
      <created by="Tim Mills" on="2011-11-28"/>
      <environment ref="has-children" />
      <dependency type="spec" value="XP30+"/>
      <dependency type="feature" value="namespace-axis"/>
      <test>fn:has-children( /root/namespace::fots )</test>
      <result>
         <assert-false />
      </result>
   </test-case>

   <test-case name="fn-has-children-022">
      <description>Evaluates the "has-children" function with the argument set as follows: context item of type comment() </description>
      <created by="Tim Mills" on="2011-11-28"/>
      <environment ref="has-children" />
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>/root/comment()/fn:has-children()</test>
      <result>
         <assert-false />
      </result>
   </test-case>

   <test-case name="fn-has-children-023">
      <description>Evaluates the "has-children" function with the argument set as follows: $node of type comment() </description>
      <created by="Tim Mills" on="2011-11-28"/>
      <environment ref="has-children" />
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>fn:has-children( /root/comment() )</test>
      <result>
         <assert-false />
      </result>
   </test-case>

   <test-case name="fn-has-children-024">
      <description>Evaluates the "has-children" function with the argument set as follows: context item of type processing-instruction() </description>
      <created by="Tim Mills" on="2011-11-28"/>
      <environment ref="has-children" />
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>/root/processing-instruction()/fn:has-children()</test>
      <result>
         <assert-false />
      </result>
   </test-case>

   <test-case name="fn-has-children-025">
      <description>Evaluates the "has-children" function with the argument set as follows: $node of type processing-instruction() </description>
      <created by="Tim Mills" on="2011-11-28"/>
      <environment ref="has-children" />
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>fn:has-children( /root/processing-instruction() )</test>
      <result>
         <assert-false />
      </result>
   </test-case>

   <test-case name="fn-has-children-026">
      <description>Evaluates the "has-children" function with the argument set as follows: context item of type text() </description>
      <created by="Tim Mills" on="2011-11-28"/>
      <environment ref="has-children" />
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>/root/text()/fn:has-children()</test>
      <result>
         <assert-false />
      </result>
   </test-case>

   <test-case name="fn-has-children-027">
      <description>Evaluates the "has-children" function with the argument set as follows: $node of type text() </description>
      <created by="Tim Mills" on="2011-11-28"/>
      <environment ref="has-children" />
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>fn:has-children( /root/text() )</test>
      <result>
         <assert-false />
      </result>
   </test-case>

   <test-case name="fn-has-children-028">
      <description>Evaluates the "has-children" function with the argument set as follows: context item of type element() </description>
      <created by="Tim Mills" on="2011-11-28"/>
      <environment ref="has-children" />
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>/root/empty/fn:has-children()</test>
      <result>
         <assert-false />
      </result>
   </test-case>

   <test-case name="fn-has-children-029">
      <description>Evaluates the "has-children" function with the argument set as follows: context item of type element() </description>
      <created by="Tim Mills" on="2011-11-28"/>
      <environment ref="has-children" />
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>fn:has-children( /root/empty )</test>
      <result>
         <assert-false />
      </result>
   </test-case>

   <test-case name="fn-has-children-030">
      <description>Evaluates the "has-children" function with the argument set as follows: context item of type element() </description>
      <created by="Tim Mills" on="2011-11-28"/>
      <environment ref="has-children" />
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>/root/fn:has-children()</test>
      <result>
         <assert-true />
      </result>
   </test-case>

   <test-case name="fn-has-children-031">
      <description>Evaluates the "has-children" function with the argument set as follows: $node of type element() </description>
      <created by="Tim Mills" on="2011-11-28"/>
      <environment ref="has-children" />
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>fn:has-children( /root )</test>
      <result>
         <assert-true />
      </result>
   </test-case>

   <test-case name="fn-has-children-032">
      <description>Evaluates the "has-children" function with the argument set as follows: context item of type element() </description>
      <created by="Tim Mills" on="2011-11-28"/>
      <environment ref="has-children" />
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>/root/non-empty/fn:has-children()</test>
      <result>
         <assert-true />
      </result>
   </test-case>

   <test-case name="fn-has-children-033">
      <description>Evaluates the "has-children" function with the argument set as follows: $node of type element() </description>
      <created by="Tim Mills" on="2011-11-28"/>
      <environment ref="has-children" />
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>fn:has-children( /root/non-empty )</test>
      <result>
         <assert-true />
      </result>
   </test-case>

   <test-case name="fn-has-children-034">
      <description>Evaluates the "has-children" function with the argument set as follows: context item of type document-node() </description>
      <created by="Tim Mills" on="2011-11-28"/>
      <environment ref="has-children" />
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>/fn:has-children()</test>
      <result>
         <assert-true />
      </result>
   </test-case>

   <test-case name="fn-has-children-035">
      <description>Evaluates the "has-children" function with the argument set as follows: $node of type document-node() </description>
      <created by="Tim Mills" on="2011-11-28"/>
      <environment ref="has-children" />
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>fn:has-children( / )</test>
      <result>
         <assert-true />
      </result>
   </test-case>

   <test-case name="fn-has-children-036">
      <description>Evaluates the "has-children" function with the argument set as follows: context item of type node() </description>
      <created by="Tim Mills" on="2011-11-28"/>
      <environment ref="has-children" />
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>/root/node()/fn:has-children()</test>
      <result>
         <assert-string-value>false false false false true</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-has-children-037">
      <description>Evaluates the "has-children" function with the argument set as follows: $node of type node() </description>
      <created by="Tim Mills" on="2011-11-28"/>
      <environment ref="has-children" />
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>/root/node()/fn:has-children(.)</test>
      <result>
         <assert-string-value>false false false false true</assert-string-value>
      </result>
   </test-case>

</test-set>
