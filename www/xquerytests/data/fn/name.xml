<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="fn-name">
   <description/>
   <link type="spec" document="http://www.w3.org/TR/xpath-functions-30/"
         idref="func-name"/>

   <test-case name="fn-name-1">
      <description>argument set to the empty sequence. Uses the fn:string-length function to avoid empty file.</description>
      <created by="Carmelo Montanez" on="2005-09-07"/>
      <environment ref="empty"/>
      <test>fn:string-length(fn:name(()))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-name-2">
      <description>argument set to an element node.</description>
      <created by="Carmelo Montanez" on="2005-09-07"/>
      <environment ref="works-mod"/>
      <test>(fn:name(./works[1]/employee[1]))</test>
      <result>
         <assert-string-value>employee</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-name-3">
      <description>argument set to an attribute node. insert-start insert-end</description>
      <created by="Carmelo Montanez" on="2005-09-07"/>
      <environment ref="works-mod"/>
      <test>(fn:name(./works[1]/employee[1]/@name))</test>
      <result>
         <assert-string-value>name</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-name-4">
      <description>argument set to a document node. Use of "fn:string-length" to avoid empty file. insert-start insert-end</description>
      <created by="Carmelo Montanez" on="2005-09-07"/>
      <environment ref="works-mod"/>
      <test>fn:string-length(fn:name(.))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-name-5">
      <description>argument set to a non existing element. Use of "fn:string-length" to avoid empty file. insert-start insert-end</description>
      <created by="Carmelo Montanez" on="2005-09-07"/>
      <environment ref="works-mod"/>
      <test>fn:string-length(fn:name(./works[1]/nonexistent[1]))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-name-6">
      <description>argument set to a non existing element. Use of "fn:string-length" to avoid empty file.</description>
      <created by="Carmelo Montanez" on="2005-09-07"/>
      <environment ref="works-mod"/>
      <test>for $h in ./works[1]/employee[2] return
         fn:string-length(fn:name($h/child::text()[last()]))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-name-7">
      <description>undefined context node.</description>
      <created by="Carmelo Montanez" on="2005-09-07"/>
      <environment ref="empty"/>
      <test>fn:name()</test>
      <result>
         <error code="XPDY0002"/>
      </result>
   </test-case>

   <test-case name="fn-name-8">
      <description>argument to the fn:upper-case function</description>
      <created by="Carmelo Montanez" on="2005-09-07"/>
      <environment ref="works-mod"/>
      <test>for $h in (./works/employee[2]) return fn:upper-case(fn:name($h))</test>
      <result>
         <assert-string-value>EMPLOYEE</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-name-9">
      <description>argument to the fn:lower-case function</description>
      <created by="Carmelo Montanez" on="2005-09-07"/>
      <environment ref="works-mod"/>
      <test>for $h in (./works/employee[2]) return fn:lower-case(fn:name($h))</test>
      <result>
         <assert-string-value>employee</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-name-10">
      <description>that uses the "parent" axes</description>
      <created by="Carmelo Montanez" on="2005-09-07"/>
      <environment ref="works-mod"/>
      <test>for $h in (./works/employee[2]) return fn:name($h/parent::node())</test>
      <result>
         <assert-string-value>works</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-name-11">
      <description>that uses the "descendant" axes</description>
      <created by="Carmelo Montanez" on="2005-09-07"/>
      <environment ref="works-mod"/>
      <test>for $h in (./works/employee[2]) return fn:name($h/descendant::empnum[position() =
         1])</test>
      <result>
         <assert-string-value>empnum</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-name-12">
      <description>that uses the "descendant-or-self" axes</description>
      <created by="Carmelo Montanez" on="2005-09-07"/>
      <environment ref="works-mod"/>
      <test>for $h in (./works/employee[2]) return fn:name($h/descendant-or-self::empnum[position()
         = 1])</test>
      <result>
         <assert-string-value>empnum</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-name-13">
      <description>argument to the fn-subtstring function.</description>
      <created by="Carmelo Montanez" on="2005-09-07"/>
      <environment ref="works-mod"/>
      <test>for $h in (./works/employee[2]) return fn:substring(fn:name($h),2)</test>
      <result>
         <assert-string-value>mployee</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-name-14">
      <description>argument to the fn:concat function.</description>
      <created by="Carmelo Montanez" on="2005-09-07"/>
      <environment ref="works-mod"/>
      <test>for $h in (/works/employee[2]) return fn:concat(fn:name($h),"A String")</test>
      <result>
         <assert-string-value>employeeA String</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-name-15">
      <description>that uses the "self" axes. Returns a string</description>
      <created by="Carmelo Montanez" on="2005-09-07"/>
      <environment ref="works-mod"/>
      <test>for $h in (./works/employee[2]) return fn:name($h/self::employee)</test>
      <result>
         <assert-string-value>employee</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-name-16">
      <description>that uses the "self" axes. Returns a empty sequence Uses fn:count to avoid empty file.</description>
      <created by="Carmelo Montanez" on="2005-09-07"/>
      <environment ref="works-mod"/>
      <test>for $h in (./works/employee[2]) return fn:count(fn:name($h/self::div))</test>
      <result>
         <any-of>
            <assert-string-value>1</assert-string-value>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="fn-name-17">
      <description>that uses the "parent::node()". The context node is an attribute node.</description>
      <created by="Carmelo Montanez" on="2005-09-07"/>
      <environment ref="works-mod"/>
      <test> for $h in (/works/employee[2]/@name) return fn:name($h/parent::node())</test>
      <result>
         <assert-string-value>employee</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-name-18">
      <description>Evaluation of the fn:name function as an argument to the string-length function. The context node is an attribute node.</description>
      <created by="Carmelo Montanez" on="2005-09-07"/>
      <environment ref="works-mod"/>
      <test>fn:string-length(fn:name(./works[1]/employee[2]/@name))</test>
      <result>
         <assert-string-value>4</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-name-19">
      <description>Evaluation of the fn:name function, for which the argument is a direct element constructor. The context node is an attribute node. </description>
      <created by="Carmelo Montanez" on="2005-09-07"/>
      <environment ref="empty"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[fn:name(<anElement>Content</anElement>)]]></test>
      <result>
         <assert-string-value>anElement</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-name-20">
      <description>Evaluation of the fn:name function, for which the argument is a direct element constructor with an attribute.</description>
      <created by="Carmelo Montanez" on="2005-09-07"/>
      <environment ref="empty"/>
      <dependency type="spec" value="XQ10+"/>
      <test><![CDATA[fn:name(<anElement name="attribute1">Content</anElement>)]]></test>
      <result>
         <assert-string-value>anElement</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-name-21">
      <description>Evaluation of the fn:name function used as part of a sequence.</description>
      <created by="Carmelo Montanez" on="2005-09-07"/>
      <environment ref="works-mod"/>
      <test>(fn:name(./works[1]/employee[1]),fn:name(./works[1]/employee[2]))</test>
      <result>
         <assert-string-value>employee employee</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-name-22">
      <description>fn:count.</description>
      <created by="Carmelo Montanez" on="2005-09-07"/>
      <environment ref="works-mod"/>
      <test>fn:count(((fn:name(/works[1]/employee[1]),fn:name(/works[1]/employee[2]))))</test>
      <result>
         <assert-eq>2</assert-eq>
      </result>
   </test-case>

   <test-case name="fn-name-23">
      <description>undefined context node and argument set to ".".</description>
      <created by="Carmelo Montanez" on="2006-02-08"/>
      <environment ref="empty"/>
      <test>fn:name(.)</test>
      <result>
         <error code="XPDY0002"/>
      </result>
   </test-case>

   <test-case name="fn-name-24">
      <description/>
      <created by="Michael Kay" on="2010-12-10"/>
      <environment ref="auction"/>
      <test>name(/*)</test>
      <result>
         <assert-string-value>ma:AuctionWatchList</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-name-25">
      <description/>
      <created by="Michael Kay" on="2010-12-10"/>
      <environment ref="auction"/>
      <test>name((//*:Start)[1]/@*)</test>
      <result>
         <assert-string-value>ma:currency</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-name-26">
      <description/>
      <created by="Michael Kay" on="2010-12-10"/>
      <environment ref="auction"/>
      <test>name((//@xml:*)[1])</test>
      <result>
         <assert-string-value>xml:lang</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-name-27">
      <description> Get the name of a namespace node.</description>
      <created by="Michael Kay" on="2010-12-10"/>
      <environment ref="auction"/>
      <dependency type="feature" value="namespace-axis"/>
      <dependency type="spec" value="XP20+"/>
      <test>name((//namespace::*[.='http://www.w3.org/1999/xlink'])[1])</test>
      <result>
         <assert-string-value>xlink</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-name-28">
      <description>Get the name of a processing-instruction node.</description>
      <created by="Michael Kay" on="2010-12-10"/>
      <environment ref="auction"/>
      <test>name((//processing-instruction())[1])</test>
      <result>
         <assert-string-value>xml-stylesheet</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-name-29">
      <description>Get the name of an element in a default but non-null namespace.</description>
      <created by="Michael Kay" on="2010-12-10"/>
      <environment ref="auction"/>
      <test>name((//*[.='1983'])[1])</test>
      <result>
         <assert-string-value>recorded</assert-string-value>
      </result>
   </test-case>

   <test-case name="fn-name-30">
      <description>Get the name of a comment node</description>
      <created by="Michael Kay" on="2010-12-10"/>
      <environment ref="auction"/>
      <test>name((//comment())[1]) = ''</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fn-name-31">
      <description>Get the name of a text node</description>
      <created by="Michael Kay" on="2010-12-10"/>
      <environment ref="auction"/>
      <test>name((//text())[1]) = ''</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-NameFunc-1">
      <description>Test: K-NameFunc-1 `name((), "wrong param")`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <environment ref="empty"/>
      <test>name((), "wrong param")</test>
      <result>
         <error code="XPST0017"/>
      </result>
   </test-case>

   <test-case name="K-NameFunc-2">
      <description>Test: K-NameFunc-2 `if(false()) then name() else true()`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <environment ref="empty"/>
      <test>if(false()) then name() else true()</test>
      <result>
         <any-of>
            <assert-true/>
            <error code="XPDY0002"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K-NameFunc-3">
      <description>Test: K-NameFunc-3 `name(()) eq ""`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <environment ref="empty"/>
      <test>name(()) eq ""</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
</test-set>