<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="fn-insert-before">
   <description>Tests for the insert-before() function</description>
   <link type="spec" document="http://www.w3.org/TR/xpath-functions-30/"
         idref="func-insert-before"/>

   <test-case name="fn-insert-before-mix-args-001">
      <description> arg1: Sequence of string, arg2:integer, arg3: string </description>
      <created by="Pulkita Tyagi" on="2005-05-25"/>
      <test>fn:insert-before( ("a", "b", "c"),1, "z")</test>
      <result>
         <assert-deep-eq>"z", "a", "b", "c"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fn-insert-before-mix-args-002">
      <description> arg1: Sequence of string, arg2:integer, arg3: empty sequence </description>
      <created by="Pulkita Tyagi" on="2005-05-25"/>
      <test>fn:insert-before( ("a", "b", "c"),0, ())</test>
      <result>
         <assert-deep-eq>"a", "b", "c"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fn-insert-before-mix-args-003">
      <description> arg1: Sequence of string, arg2:integer, arg3: empty sequence </description>
      <created by="Pulkita Tyagi" on="2005-05-25"/>
      <test>fn:insert-before( ("a", "b", "c"),2, ())</test>
      <result>
         <assert-deep-eq>"a", "b", "c"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fn-insert-before-mix-args-004">
      <description> arg1: Sequence of string, arg2:integer, arg3: string </description>
      <created by="Pulkita Tyagi" on="2005-05-25"/>
      <test>fn:insert-before( ("a", "b", "c"),2, xs:string(" "))</test>
      <result>
         <assert-deep-eq>"a", " ", "b", "c"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fn-insert-before-mix-args-005">
      <description> arg1: Sequence of string, arg2:integer, arg3: anyURI </description>
      <created by="Pulkita Tyagi" on="2005-05-25"/>
      <test>fn:insert-before( ("a", "b", "c"),2, xs:anyURI("www.example.com"))</test>
      <result>
         <assert-deep-eq>"a", "www.example.com", "b", "c"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fn-insert-before-mix-args-006">
      <description> arg1: Sequence of string, arg2:integer, arg3: integer </description>
      <created by="Pulkita Tyagi" on="2005-05-25"/>
      <test>fn:insert-before( ("a", "b", "c"),2, xs:integer("100"))</test>
      <result>
         <assert-deep-eq>"a", 100, "b", "c"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fn-insert-before-mix-args-007">
      <description> arg1: Sequence of string, arg2:integer, arg3: decimal </description>
      <created by="Pulkita Tyagi" on="2005-05-25"/>
      <test>fn:insert-before( ("a", "b", "c"),2, xs:decimal("1.1"))</test>
      <result>
         <assert-deep-eq>"a", 1.1, "b", "c"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fn-insert-before-mix-args-008">
      <description> arg1: Sequence of string, arg2:integer, arg3: float </description>
      <created by="Pulkita Tyagi" on="2005-05-25"/>
      <test>fn:insert-before( ("a", "b", "c"),2, xs:float("1.1"))</test>
      <result>
         <assert-deep-eq>"a", 1.1, "b", "c"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fn-insert-before-mix-args-009">
      <description> arg1: Sequence of string, arg2:integer, arg3: float </description>
      <created by="Pulkita Tyagi" on="2005-05-25"/>
      <test>fn:insert-before( ("a", "b", "c"),2, xs:float("NaN"))</test>
      <result>
         <assert-deep-eq>"a", xs:float('NaN'), "b", "c"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fn-insert-before-mix-args-010">
      <description> arg1: Sequence of string, arg2:integer, arg3: float </description>
      <created by="Pulkita Tyagi" on="2005-05-25"/>
      <test>fn:insert-before( ("a", "b", "c"),2, xs:float("-0"))</test>
      <result>
         <assert-deep-eq>"a", 0, "b", "c"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fn-insert-before-mix-args-011">
      <description> arg1: Sequence of string, arg2:integer, arg3: float </description>
      <created by="Pulkita Tyagi" on="2005-05-25"/>
      <test>fn:insert-before( ("a", "b", "c"),2, xs:float("-INF"))</test>
      <result>
         <assert-deep-eq>"a", xs:float('-INF'), "b", "c"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fn-insert-before-mix-args-012">
      <description> arg1: Sequence of string, arg2:integer, arg3: double </description>
      <created by="Pulkita Tyagi" on="2005-05-25"/>
      <test>fn:insert-before( ("a", "b", "c"),2, xs:double("NaN"))</test>
      <result>
         <assert-deep-eq>"a", xs:double('NaN'),  "b", "c"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fn-insert-before-mix-args-013">
      <description> arg1: Sequence of string, arg2:integer, arg3: double </description>
      <created by="Pulkita Tyagi" on="2005-05-25"/>
      <test>fn:insert-before( ("a", "b", "c"),2, xs:double("INF"))</test>
      <result>
         <assert-deep-eq>"a", xs:double('INF'), "b", "c"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fn-insert-before-mix-args-014">
      <description> arg1: Sequence of string, arg2:integer, arg3: boolean </description>
      <created by="Pulkita Tyagi" on="2005-05-25"/>
      <test>fn:insert-before( ("a", "b", "c"),2, xs:boolean("1"))</test>
      <result>
         <assert-deep-eq>"a", true(), "b", "c"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fn-insert-before-mix-args-015">
      <description> arg1: Sequence of string, arg2:integer, arg3: boolean </description>
      <created by="Pulkita Tyagi" on="2005-05-25"/>
      <test>fn:insert-before( ("a", "b", "c"),2, xs:boolean("0"))</test>
      <result>
         <assert-deep-eq>"a", false(), "b", "c"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fn-insert-before-mix-args-016">
      <description> arg1: Sequence of string, arg2:integer, arg3: boolean </description>
      <created by="Pulkita Tyagi" on="2005-05-25"/>
      <test>fn:insert-before( ("a", "b", "c"),2, xs:boolean("true"))</test>
      <result>
         <assert-deep-eq>"a", true(), "b", "c"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fn-insert-before-mix-args-017">
      <description> arg1: Sequence of string, arg2:integer, arg3: boolean </description>
      <created by="Pulkita Tyagi" on="2005-05-25"/>
      <test>fn:insert-before( ("a", "b", "c"),2, xs:boolean("false"))</test>
      <result>
         <assert-deep-eq>"a", false(),  "b",  "c"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fn-insert-before-mix-args-018">
      <description> arg1: Sequence of string, arg2:integer, arg3: date </description>
      <created by="Pulkita Tyagi" on="2005-05-25"/>
      <test>fn:insert-before( ("a", "b", "c"),4, xs:date("1993-03-31"))</test>
      <result>
         <assert-deep-eq>"a", "b", "c", xs:date('1993-03-31')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fn-insert-before-mix-args-019">
      <description> arg1: Sequence of string, arg2:integer, arg3: dateTime </description>
      <created by="Pulkita Tyagi" on="2005-05-25"/>
      <test>fn:insert-before( ("a", "b", "c"),4, xs:dateTime("1972-12-31T00:00:00"))</test>
      <result>
         <assert-deep-eq>"a", "b", "c", xs:dateTime('1972-12-31T00:00:00')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fn-insert-before-mix-args-020">
      <description> arg1: Sequence of string, arg2:integer, arg3: time </description>
      <created by="Pulkita Tyagi" on="2005-05-25"/>
      <test>fn:insert-before( ("a", "b", "c"),4, xs:time("12:30:00"))</test>
      <result>
         <assert-deep-eq>"a", "b", "c", xs:time('12:30:00')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="K-SeqInsertBeforeFunc-1">
      <description> A test whose essence is: `insert-before()`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>insert-before()</test>
      <result>
         <error code="XPST0017"/>
      </result>
   </test-case>

   <test-case name="K-SeqInsertBeforeFunc-2">
      <description> A test whose essence is: `insert-before("wrong params", 2)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>insert-before("wrong params", 2)</test>
      <result>
         <error code="XPST0017"/>
      </result>
   </test-case>

   <test-case name="K-SeqInsertBeforeFunc-3">
      <description> A test whose essence is: `insert-before("wrong params", 2, 3, 4)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>insert-before("wrong params", 2, 3, 4)</test>
      <result>
         <error code="XPST0017"/>
      </result>
   </test-case>

   <test-case name="K-SeqInsertBeforeFunc-4">
      <description> The second argument to fn:insert-before cannot be the empty sequence. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>insert-before((), (), "a string")</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="K-SeqInsertBeforeFunc-5">
      <description> A test whose essence is: `insert-before((), -31, "a string") eq "a string"`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>insert-before((), -31, "a string") eq "a string"</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqInsertBeforeFunc-6">
      <description> A test whose essence is: `count(insert-before((1, 2, 3), 1, (4, 5, 6))) eq 6`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(insert-before((1, 2, 3), 1, (4, 5, 6))) eq 6</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqInsertBeforeFunc-7">
      <description> A test whose essence is: `insert-before((), 1, 3) eq 3`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>insert-before((), 1, 3) eq 3</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqInsertBeforeFunc-8">
      <description> A test whose essence is: `insert-before((), 1, "a string") eq "a string"`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>insert-before((), 1, "a string") eq "a string"</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqInsertBeforeFunc-9">
      <description> A test whose essence is: `count(insert-before((), 1, (1, 2, 3))) eq 3`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(insert-before((), 1, (1, 2, 3))) eq 3</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqInsertBeforeFunc-10">
      <description> A test whose essence is: `insert-before((), 30, 7) eq 7`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>insert-before((), 30, 7) eq 7</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqInsertBeforeFunc-11">
      <description> A test whose essence is: `count(insert-before((1, 2, 3, 4), 30, ())) eq 4`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(insert-before((1, 2, 3, 4), 30, ())) eq 4</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqInsertBeforeFunc-12">
      <description> A test whose essence is: `insert-before(9, 30, ()) eq 9`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>insert-before(9, 30, ()) eq 9</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqInsertBeforeFunc-13">
      <description> A test whose essence is: `count(insert-before((1, 2, 3, 4), 1, ())) eq 4`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(insert-before((1, 2, 3, 4), 1, ())) eq 4</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqInsertBeforeFunc-14">
      <description> A test whose essence is: `count(insert-before((1, 2, 3), 30, (4, 5, 6))) eq 6`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(insert-before((1, 2, 3), 30, (4, 5, 6))) eq 6</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqInsertBeforeFunc-15">
      <description> A test whose essence is: `count(insert-before((), 30, (1, 2, 3))) eq 3`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(insert-before((), 30, (1, 2, 3))) eq 3</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqInsertBeforeFunc-16">
      <description> A test whose essence is: `count(insert-before((error(), 1), 1, (1, "two", 3))) &gt; 1`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>count(insert-before((error(), 1), 1, (1, "two", 3))) &gt; 1</test>
      <result>
         <any-of>
            <assert-true/>
            <error code="FOER0000"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="K-SeqInsertBeforeFunc-17">
      <description> Apply a predicate to the result of fn:insert-before(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>(insert-before((1, current-time(), 3), 1, (4, 5, 6))[last()] treat as xs:integer) eq 3</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqInsertBeforeFunc-18">
      <description> Apply a predicate to the result of fn:insert-before(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>(insert-before((1, current-time(), 3), 10, (4, 5, 6))[last()] treat as xs:integer) eq 6</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqInsertBeforeFunc-19">
      <description> Apply a predicate to the result of fn:insert-before(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>(insert-before((1, current-time(), 3), 10, (4, 5, 6))[last() - 3] treat as xs:integer) eq 3</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqInsertBeforeFunc-20">
      <description> Apply a predicate to the result of fn:insert-before(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>(insert-before((1, current-time(), 3), 10, ())[last()] treat as xs:integer) eq 3</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="K-SeqInsertBeforeFunc-21">
      <description> Apply a predicate to the result of fn:insert-before(). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(insert-before((1, current-time(), 3), 0, (4, 5, 6))[last() - 10])</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="cbcl-fn-insert-before-001">
      <description> tests insert-before at known positions </description>
      <created by="Nick Jones" on="2008-06-13"/>
      <test>insert-before(1 to 10,5,20 to 30)</test>
      <result>
         <assert-string-value>1 2 3 4 20 21 22 23 24 25 26 27 28 29 30 5 6 7 8 9 10</assert-string-value>
      </result>
   </test-case>

   <test-case name="cbcl-fn-insert-before-002">
      <description> Tests insert-before for known positions </description>
      <created by="Nick Jones" on="2008-06-13"/>
      <test>
        insert-before((1 to 10,(20 to 30)[. mod 2 = 0],30 to 40),12,"blah")
      </test>
      <result>
         <assert-string-value>1 2 3 4 5 6 7 8 9 10 20 blah 22 24 26 28 30 30 31 32 33 34 35 36 37 38 39 40</assert-string-value>
      </result>
   </test-case>
</test-set>