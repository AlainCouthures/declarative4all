<?xml version="1.0" encoding="UTF-8"?>
<test-set name="fn-exists" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">
  <description>Tests for the iexists() function</description>
  <link document="http://www.w3.org/TR/xpath-functions-30/" idref="func-exists" type="spec"/>
  <test-case name="fn-existsint1args-1">
    <description> Evaluates The &quot;exists&quot; function with the arguments set as follows: $arg = xs:int(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:exists((xs:int(&quot;-2147483648&quot;)))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-existsint1args-2">
    <description> Evaluates The &quot;exists&quot; function with the arguments set as follows: $arg = xs:int(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:exists((xs:int(&quot;-1873914410&quot;)))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-existsint1args-3">
    <description> Evaluates The &quot;exists&quot; function with the arguments set as follows: $arg = xs:int(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:exists((xs:int(&quot;2147483647&quot;)))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-existsintg1args-1">
    <description> Evaluates The &quot;exists&quot; function with the arguments set as follows: $arg = xs:integer(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:exists((xs:integer(&quot;-999999999999999999&quot;)))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-existsintg1args-2">
    <description> Evaluates The &quot;exists&quot; function with the arguments set as follows: $arg = xs:integer(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:exists((xs:integer(&quot;830993497117024304&quot;)))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-existsintg1args-3">
    <description> Evaluates The &quot;exists&quot; function with the arguments set as follows: $arg = xs:integer(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:exists((xs:integer(&quot;999999999999999999&quot;)))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-existsdec1args-1">
    <description> Evaluates The &quot;exists&quot; function with the arguments set as follows: $arg = xs:decimal(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:exists((xs:decimal(&quot;-999999999999999999&quot;)))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-existsdec1args-2">
    <description> Evaluates The &quot;exists&quot; function with the arguments set as follows: $arg = xs:decimal(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:exists((xs:decimal(&quot;617375191608514839&quot;)))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-existsdec1args-3">
    <description> Evaluates The &quot;exists&quot; function with the arguments set as follows: $arg = xs:decimal(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:exists((xs:decimal(&quot;999999999999999999&quot;)))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-existsdbl1args-1">
    <description> Evaluates The &quot;exists&quot; function with the arguments set as follows: $arg = xs:double(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:exists((xs:double(&quot;-1.7976931348623157E308&quot;)))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-existsdbl1args-2">
    <description> Evaluates The &quot;exists&quot; function with the arguments set as follows: $arg = xs:double(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:exists((xs:double(&quot;0&quot;)))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-existsdbl1args-3">
    <description> Evaluates The &quot;exists&quot; function with the arguments set as follows: $arg = xs:double(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:exists((xs:double(&quot;1.7976931348623157E308&quot;)))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-existsflt1args-1">
    <description> Evaluates The &quot;exists&quot; function with the arguments set as follows: $arg = xs:float(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:exists((xs:float(&quot;-3.4028235E38&quot;)))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-existsflt1args-2">
    <description> Evaluates The &quot;exists&quot; function with the arguments set as follows: $arg = xs:float(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:exists((xs:float(&quot;0&quot;)))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-existsflt1args-3">
    <description> Evaluates The &quot;exists&quot; function with the arguments set as follows: $arg = xs:float(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:exists((xs:float(&quot;3.4028235E38&quot;)))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-existslng1args-1">
    <description> Evaluates The &quot;exists&quot; function with the arguments set as follows: $arg = xs:long(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:exists((xs:long(&quot;-92233720368547758&quot;)))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-existslng1args-2">
    <description> Evaluates The &quot;exists&quot; function with the arguments set as follows: $arg = xs:long(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:exists((xs:long(&quot;-47175562203048468&quot;)))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-existslng1args-3">
    <description> Evaluates The &quot;exists&quot; function with the arguments set as follows: $arg = xs:long(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:exists((xs:long(&quot;92233720368547758&quot;)))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-existsusht1args-1">
    <description> Evaluates The &quot;exists&quot; function with the arguments set as follows: $arg = xs:unsignedShort(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:exists((xs:unsignedShort(&quot;0&quot;)))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-existsusht1args-2">
    <description> Evaluates The &quot;exists&quot; function with the arguments set as follows: $arg = xs:unsignedShort(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:exists((xs:unsignedShort(&quot;44633&quot;)))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-existsusht1args-3">
    <description> Evaluates The &quot;exists&quot; function with the arguments set as follows: $arg = xs:unsignedShort(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:exists((xs:unsignedShort(&quot;65535&quot;)))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-existsnint1args-1">
    <description> Evaluates The &quot;exists&quot; function with the arguments set as follows: $arg = xs:negativeInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:exists((xs:negativeInteger(&quot;-999999999999999999&quot;)))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-existsnint1args-2">
    <description> Evaluates The &quot;exists&quot; function with the arguments set as follows: $arg = xs:negativeInteger(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:exists((xs:negativeInteger(&quot;-297014075999096793&quot;)))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-existsnint1args-3">
    <description> Evaluates The &quot;exists&quot; function with the arguments set as follows: $arg = xs:negativeInteger(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:exists((xs:negativeInteger(&quot;-1&quot;)))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-existspint1args-1">
    <description> Evaluates The &quot;exists&quot; function with the arguments set as follows: $arg = xs:positiveInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:exists((xs:positiveInteger(&quot;1&quot;)))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-existspint1args-2">
    <description> Evaluates The &quot;exists&quot; function with the arguments set as follows: $arg = xs:positiveInteger(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:exists((xs:positiveInteger(&quot;52704602390610033&quot;)))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-existspint1args-3">
    <description> Evaluates The &quot;exists&quot; function with the arguments set as follows: $arg = xs:positiveInteger(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:exists((xs:positiveInteger(&quot;999999999999999999&quot;)))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-existsulng1args-1">
    <description> Evaluates The &quot;exists&quot; function with the arguments set as follows: $arg = xs:unsignedLong(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:exists((xs:unsignedLong(&quot;0&quot;)))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-existsulng1args-2">
    <description> Evaluates The &quot;exists&quot; function with the arguments set as follows: $arg = xs:unsignedLong(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:exists((xs:unsignedLong(&quot;130747108607674654&quot;)))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-existsulng1args-3">
    <description> Evaluates The &quot;exists&quot; function with the arguments set as follows: $arg = xs:unsignedLong(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:exists((xs:unsignedLong(&quot;184467440737095516&quot;)))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-existsnpi1args-1">
    <description> Evaluates The &quot;exists&quot; function with the arguments set as follows: $arg = xs:nonPositiveInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:exists((xs:nonPositiveInteger(&quot;-999999999999999999&quot;)))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-existsnpi1args-2">
    <description> Evaluates The &quot;exists&quot; function with the arguments set as follows: $arg = xs:nonPositiveInteger(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:exists((xs:nonPositiveInteger(&quot;-475688437271870490&quot;)))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-existsnpi1args-3">
    <description> Evaluates The &quot;exists&quot; function with the arguments set as follows: $arg = xs:nonPositiveInteger(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:exists((xs:nonPositiveInteger(&quot;0&quot;)))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-existsnni1args-1">
    <description> Evaluates The &quot;exists&quot; function with the arguments set as follows: $arg = xs:nonNegativeInteger(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:exists((xs:nonNegativeInteger(&quot;0&quot;)))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-existsnni1args-2">
    <description> Evaluates The &quot;exists&quot; function with the arguments set as follows: $arg = xs:nonNegativeInteger(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:exists((xs:nonNegativeInteger(&quot;303884545991464527&quot;)))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-existsnni1args-3">
    <description> Evaluates The &quot;exists&quot; function with the arguments set as follows: $arg = xs:nonNegativeInteger(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:exists((xs:nonNegativeInteger(&quot;999999999999999999&quot;)))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-existssht1args-1">
    <description> Evaluates The &quot;exists&quot; function with the arguments set as follows: $arg = xs:short(lower bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:exists((xs:short(&quot;-32768&quot;)))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-existssht1args-2">
    <description> Evaluates The &quot;exists&quot; function with the arguments set as follows: $arg = xs:short(mid range) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:exists((xs:short(&quot;-5324&quot;)))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-existssht1args-3">
    <description> Evaluates The &quot;exists&quot; function with the arguments set as follows: $arg = xs:short(upper bound) </description>
    <created by="Carmelo Montanez" on="2004-12-13"/>
    <test>fn:exists((xs:short(&quot;32767&quot;)))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExistsFunc-1">
    <description> A test whose essence is: `exists(1, 2)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>exists(1, 2)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExistsFunc-2">
    <description> A test whose essence is: `exists()`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>exists()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExistsFunc-3">
    <description> A test whose essence is: `not(exists(()))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(exists(()))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExistsFunc-4">
    <description> A test whose essence is: `exists(1)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>exists(1)</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExistsFunc-5">
    <description> A test whose essence is: `exists((1))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>exists((1))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExistsFunc-6">
    <description> A test whose essence is: `exists((1, 2, 3))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>exists((1, 2, 3))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExistsFunc-7">
    <description> A test whose essence is: `not(exists(()))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(exists(()))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExistsFunc-8">
    <description> A test whose essence is: `not(exists( ((), (), (), ()) ))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(exists( ((), (), (), ()) ))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExistsFunc-9">
    <description> A test whose essence is: `exists(reverse((1, 2, 3)))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>exists(reverse((1, 2, 3)))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExistsFunc-10">
    <description> The Dynamic Context property 'current dateTime' must have an explicit timezone when presented as a xs:dateTime. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>exists(timezone-from-dateTime(current-dateTime()))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExistsFunc-11">
    <description> The Dynamic Context property 'current dateTime' must have an explicit timezone when presented as a xs:date. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>exists(timezone-from-date(current-date()))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExistsFunc-12">
    <description> The Dynamic Context property 'current dateTime' must have an explicit timezone when presented as a xs:time. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>exists(timezone-from-time(current-time()))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExistsFunc-13">
    <description> fn:empty combined with fn:remove. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(remove(current-time(), 1))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExistsFunc-14">
    <description> fn:empty combined with fn:remove and fn:not. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(empty(remove((current-time(), 1), 1)))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="cbcl-exists-001">
    <description> test fn:exists on a mix of values and expressions </description>
    <created by="Tim Mills" on="2008-04-11"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:generate($arg as xs:integer?) { if ($arg = 0) then (1, 2, 3) else $arg }; 
      	fn:exists( ( (), local:generate( () ), local:generate( 0 ), (1 to 10000000), local:generate( () ), local:generate(1)) )</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="cbcl-exists-002">
    <description> Tests aggregation optimizations for exists </description>
    <created by="Nick Jones" on="2008-06-09"/>
    <test>exists(for $x in (1 to 10)[. mod 2 = 0] return &quot;blah&quot;)</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="cbcl-exists-003">
    <description> Tests exists on text node </description>
    <created by="Nick Jones" on="2008-06-17"/>
    <dependency type="spec" value="XQ10+"/>
    <test>exists(text {(1 to 10)[. mod 2 = 0]})</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="cbcl-exists-004">
    <description> Test on optimization as aggregate function </description>
    <created by="Nick Jones" on="2008-06-17"/>
    <test>exists(for $x in (1 to 10)[. mod 2 = 0] return true())</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="cbcl-exists-005">
    <description> Tests exists on a map expression </description>
    <created by="Nick Jones" on="2008-06-17"/>
    <test>exists(for $x in (1 to 10)[. mod 2 = 0] return floor($x))</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
</test-set>