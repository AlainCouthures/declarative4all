<?xml version="1.0" encoding="UTF-8"?>
<test-set name="fn-root" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">
  <description>Tests for the root() function</description>
  <link document="http://www.w3.org/TR/xpath-functions-30/" idref="func-root" type="spec"/>
  <environment name="lang">
    <source file="lang/lang.xml" role=".">
      <description>Data for fn:lang tests.</description>
      <created by="Carmelo Montanez" on="2005-10-19"/>
    </source>
  </environment>
  <test-case name="fn-root-1">
    <description> Evaluation of the fn:root function with no arguments and no context node set. </description>
    <created by="Carmelo Montanez" on="2005-09-20"/>
    <environment ref="empty"/>
    <test>fn:root()</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPDY0002&quot;))</result-string>
    <result>
      <error code="XPDY0002"/>
    </result>
  </test-case>
  <test-case name="fn-root-2">
    <description> Evaluation of the fn:root function with no arguments that uses context node, which is not a node. </description>
    <created by="Carmelo Montanez" on="2005-11-17"/>
    <test>(1 to 100)[fn:root()]</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="fn-root-3">
    <description> Evaluation of the fn:root function with argument set to the empty sequence. Use count to avoid empty file. </description>
    <created by="Carmelo Montanez" on="2005-11-17"/>
    <test>fn:count(fn:root(()))</test>
    <result-string/>
    <result>
      <any-of>
        <assert-eq>0</assert-eq>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="fn-root-4">
    <description> Evaluation of the fn:root function with argument set to a comment node (via a variable). </description>
    <created by="Carmelo Montanez" on="2005-11-17"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $var := <!-- A Comment Node --> return fn:root($var)]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<!-- A Comment Node -->]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="fn-root-5">
    <description> Evaluation of the fn:root function with argument set to a comment node set directly on argument. </description>
    <created by="Carmelo Montanez" on="2005-11-17"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[fn:root(<!-- A Comment Node -->)]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<!-- A Comment Node -->]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="fn-root-6">
    <description> Evaluation of the fn:root function with argument set to an elemnt node set via a variable. </description>
    <created by="Carmelo Montanez" on="2005-11-17"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $var := <anElement>An Element Content</anElement> return fn:root($var)]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<anElement>An Element Content</anElement>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="fn-root-7">
    <description> Evaluation of the fn:root function with argument set to an direct element node by setting directly on argument. </description>
    <created by="Carmelo Montanez" on="2005-11-17"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[fn:root(<anElement>An Element Content</anElement>)]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<anElement>An Element Content</anElement>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="fn-root-8">
    <description> Evaluation of the fn:root function with argument set to an processing instruction node by setting via a variable. </description>
    <created by="Carmelo Montanez" on="2005-11-17"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $var := <?format role="output" ?> return fn:root($var)]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<?format role="output" ?>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="fn-root-9">
    <description> Evaluation of the fn:root function with argument set to an direct element node by setting directly on argument. </description>
    <created by="Carmelo Montanez" on="2005-11-17"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[fn:root(<?format role="output" ?>)]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<?format role="output" ?>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="fn-root-10">
    <description> Evaluation of the fn:root function with argument set to an computed element with attribute node by setting via a variable. </description>
    <created by="Carmelo Montanez" on="2005-11-17"/>
    <dependency type="spec" value="XQ10+"/>
    <test>let $var := element anElement {attribute anAttribute {&quot;Attribute Value&quot;}} return fn:root($var)</test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<anElement anAttribute="Attribute Value"/>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="fn-root-11">
    <description> Evaluation of the fn:root function with argument set to an computed element with attribute node by setting directly on argument. </description>
    <created by="Carmelo Montanez" on="2005-11-17"/>
    <dependency type="spec" value="XQ10+"/>
    <test>fn:root(element anElement {attribute anAttribute {&quot;Attribute Value&quot;}})</test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<anElement anAttribute="Attribute Value"/>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="fn-root-12">
    <description> Evaluation of the fn:root function with argument set to a document node by setting via a variable. </description>
    <created by="Carmelo Montanez" on="2005-11-17"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $var := document {<anElement><anInternalElement>element content</anInternalElement></anElement>} return fn:root($var)]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<anElement><anInternalElement>element content</anInternalElement></anElement>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="fn-root-13">
    <description> Evaluation of the fn:root function with argument set to an computed document node by setting directly on argument. </description>
    <created by="Carmelo Montanez" on="2005-11-17"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[fn:root(document {<anElement><anInternalElement>element content</anInternalElement></anElement>})]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<anElement><anInternalElement>element content</anInternalElement></anElement>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="fn-root-14">
    <description> Evaluation of the fn:root function with argument set to a element node by quering an xml file. </description>
    <created by="Carmelo Montanez" on="2005-11-17"/>
    <environment ref="lang"/>
    <test>fn:root(fn:exactly-one(/langs[1]/para[1]))</test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<langs>
 <para xml:lang="en"/>
 <div xml:lang="en"><para>And now, and forever!</para></div>
 <para xml:lang="EN"/>
 <para xml:lang="en-us"/>
</langs>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="fn-root-15">
    <description> Evaluation of the fn:root function with argument set to a attribute node by quering an xml file. </description>
    <created by="Carmelo Montanez" on="2005-11-17"/>
    <environment ref="lang"/>
    <test>fn:root(/langs[1]/para[1]/@xml:lang)</test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<langs>
 <para xml:lang="en"/>
 <div xml:lang="en"><para>And now, and forever!</para></div>
 <para xml:lang="EN"/>
 <para xml:lang="en-us"/>
</langs>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="fn-root-16">
    <description> Evaluation of the fn:root function with argument set to computed text node by setting directly on argument. </description>
    <created by="Carmelo Montanez" on="2005-11-17"/>
    <dependency type="spec" value="XQ10+"/>
    <test>fn:root(text {&quot;A text Node&quot;})</test>
    <result-string>xs:string('A text Node')</result-string>
    <result>
      <assert-string-value>A text Node</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-root-17">
    <description> Evaluation of the fn:root function with argument set to computed text node by setting argument vias a variable. </description>
    <created by="Carmelo Montanez" on="2005-11-17"/>
    <dependency type="spec" value="XQ10+"/>
    <test>let $var := text {&quot;a text Node&quot;} return fn:root($var)</test>
    <result-string>xs:string('a text Node')</result-string>
    <result>
      <assert-string-value>a text Node</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-root-18">
    <description> Evaluation of the fn:root function used in conjunction with &quot;is&quot; operator (returns true). </description>
    <created by="Carmelo Montanez" on="2005-11-17"/>
    <dependency type="spec" value="XQ10+"/>
    <test>let $var := element anElement {&quot;Element Content&quot;} return fn:root($var) is fn:root($var)</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-root-19">
    <description> Evaluation of the fn:root function used in conjunction with &quot;is&quot; operator (returns false). </description>
    <created by="Carmelo Montanez" on="2005-11-17"/>
    <dependency type="spec" value="XQ10+"/>
    <test>let $var := element anElement {&quot;Element Content&quot;} return fn:root($var) is fn:root($var)</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-root-20">
    <description> Evaluation of the fn:root function used as argument to namespace-uri function (use an element). 
        Use fn:count to avoid empty file </description>
    <created by="Carmelo Montanez" on="2005-11-17"/>
    <dependency type="spec" value="XQ10+"/>
    <test>let $var := element anElement {&quot;Element Content&quot;} return fn:count(fn:namespace-uri(fn:root($var)))</test>
    <result-string/>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-root-21">
    <description> Evaluation of the fn:root function used as argument to namespace-uri function (use a comment). 
        Use fn:count to avoid empty file </description>
    <created by="Carmelo Montanez" on="2005-11-17"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $var := <!-- An Element Node --> return fn:count(fn:namespace-uri(fn:root($var)))]]>
    </test>
    <result-string/>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-root-22">
    <description> Evaluation of the fn:root function used as argument to namespace-uri function (use a Processing Instruction). 
        Use fn:count to avoid empty file </description>
    <created by="Carmelo Montanez" on="2005-11-17"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $var := <?format role="output" ?> return fn:count(fn:namespace-uri(fn:root($var)))]]>
    </test>
    <result-string/>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-root-23">
    <description> Evaluation of the fn:root function used as argument to namespace-uri function (use a text node). use fn:count to avoid empty file </description>
    <created by="Carmelo Montanez" on="2005-11-17"/>
    <dependency type="spec" value="XQ10+"/>
    <test>let $var := text {&quot;A text node&quot;} return fn:count(fn:namespace-uri(fn:root($var)))</test>
    <result-string/>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-root-24">
    <description> Evaluation of the fn:root function with argument set to &quot;.&quot; and no context node set. </description>
    <created by="Carmelo Montanez" on="2006-02-08"/>
    <environment ref="empty"/>
    <test>fn:root(.)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPDY0002&quot;))</result-string>
    <result>
      <error code="XPDY0002"/>
    </result>
  </test-case>
  <test-case name="K-NodeRootFunc-1">
    <description> A test whose essence is: `Root(2)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>Root(2)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPST0017&quot;))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-NodeRootFunc-2">
    <description> A test whose essence is: `(1, 2, 3)[root()]`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(1, 2, 3)[root()]</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-NodeRootFunc-3">
    <description> A test whose essence is: `root(2)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>root(2)</test>
    <result-string>fn:error(fn:QName(&quot;http://www.w3.org/2005/xqt-errors&quot;, &quot;XPTY0004&quot;))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-NodeRootFunc-4">
    <description> A test whose essence is: `empty(root(()))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(root(()))</test>
    <result-string/>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K2-NodeRootFunc-1">
    <description> Apply fn:root() to a directly constructed element. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[fn:root(<e/>)]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<e/>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="K2-NodeRootFunc-2">
    <description> Apply fn:root() to an empty sequence coming from a parent axis. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[empty(fn:root(<e/>/..))]]>
    </test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-NodeRootFunc-3">
    <description> Invoke on a comment node. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[fn:root(<!-- comment -->)]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<!-- comment -->]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="K2-NodeRootFunc-4">
    <description> Invoke on an attribute node. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[<e>{fn:root(attribute name {"value"})}</e>]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<e name="value"/>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="K2-NodeRootFunc-5">
    <description> Invoke on a processing instruction node. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[fn:root(<?target data?>)]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<?target data?>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="K2-NodeRootFunc-6">
    <description> Invoke on a processing instruction node. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>fn:root(text{&quot;text node&quot;})</test>
    <result-string>xs:string('text node')</result-string>
    <result>
      <assert-string-value>text node</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-NodeRootFunc-7">
    <description> Invoke on a processing instruction node. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>fn:root(text{&quot;text node&quot;})</test>
    <result-string>xs:string('text node')</result-string>
    <result>
      <assert-string-value>text node</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-NodeRootFunc-8">
    <description> Invoke on a single document node. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>root(document {()}) instance of document-node()</test>
    <result-string>xs:boolean('true')</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
</test-set>