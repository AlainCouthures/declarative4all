<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" 
          name="fn-available-environment-variables" covers="fn-available-environment-variables">
   <description>Tests for the available-environment-variables() function</description>
   <link type="spec" document="http://www.w3.org/TR/xpath-functions-30/"
         idref="func-available-environment-variables"/>

   <test-case name="fn-available-environment-variables-001">
      <description>Check that the function exists</description>
      <created by="Liam Quin" on="2012-02-17"/>
      <modified by="O'Neil Delpratt" on="2012-11-08" change="Bug #19881 - Added HOF dependency" />
      <dependency type="spec" value="XP30+ XQ30+"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>fn:exists(fn:available-environment-variables#0)</test>
      <result>
         <assert-true />
      </result>
   </test-case>

   <test-case name="fn-available-environment-variables-002">
      <description>Check that we can look the function up</description>
      <created by="Liam Quin" on="2012-02-17"/>
      <modified by="O'Neil Delpratt" on="2012-11-08" change="Bug #19881 - Added HOF dependency" />
      <dependency type="spec" value="XP30+ XQ30+"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>not(fn:empty(fn:function-lookup(
	  fn:QName('http://www.w3.org/2005/xpath-functions',
	  'available-environment-variables'), 0)))
      </test>
      <result>
         <assert-true />
      </result>
   </test-case>

   <test-case name="fn-available-environment-variables-003">
      <description>Check that it has arity 0, not 1</description>
      <created by="Liam Quin" on="2012-02-17"/>
      <modified by="O'Neil Delpratt" on="2012-11-08" change="Bug #19881 - Added HOF dependency" />
      <dependency type="spec" value="XP30+ XQ30+"/>
      <dependency type="feature" value="higherOrderFunctions"/>
      <test>fn:available-environment-variables#1</test>
      <result>
         <error code="XPST0017" />
      </result>
   </test-case>

   <test-case name="fn-available-environment-variables-004">
      <description>Check that it has arity 0, not 2</description>
      <created by="Liam Quin" on="2012-02-17"/>
      <modified by="O'Neil Delpratt" on="2012-11-08" change="Bug #19881 - Added HOF dependency" />
      <dependency type="feature" value="higherOrderFunctions"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>fn:available-environment-variables#2</test>
      <result>
         <error code="XPST0017" />
      </result>
   </test-case>

   <test-case name="fn-available-environment-variables-005">
      <description>Check that we get back () or a sequence that accepts a predicate</description>
      <created by="Liam Quin" on="2012-02-17"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>let $all := fn:available-environment-variables()
	  return empty($all) or ($all[1] ne "")
      </test>
      <result>
         <assert-true />
      </result>
   </test-case>

   <test-case name="fn-available-environment-variables-006">
      <description>Check that no returned values are non-strings</description>
      <created by="Liam Quin" on="2012-02-17"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>
	   (for $e in fn:available-environment-variables()
	   return fn:environment-variable($e) instance of xs:string) = (false())
      </test>
      <result>
         <assert-false />
      </result>
   </test-case>

   <test-case name="fn-available-environment-variables-007">
      <description>Check that we can call environment-variable on each returned result</description>
      <created by="Liam Quin" on="2012-05-18"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>
	  let $all := fn:available-environment-variables(), 
	      $n := count(fn:available-environment-variables())
	  return
	      count(
		  for $e in $all return fn:environment-variable($e)
	      ) eq $n
      </test>
      <result>
         <assert-true />
      </result>
   </test-case>

   <test-case name="fn-available-environment-variables-008">
      <description>check there are no duplicates in the variable names</description>
      <created by="Liam Quin" on="2012-05-18"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>
	  let $all := fn:available-environment-variables()
	  return count($all) eq count(distinct-values($all))
      </test>
      <result>
         <assert-true />
      </result>
   </test-case>

   <test-case name="fn-available-environment-variables-009">
      <description>check that the result is at least moderately stable</description>
      <created by="Liam Quin" on="2012-05-18"/>
      <dependency type="spec" value="XQ30+"/>
      <test>
          <![CDATA[
	  let $first := <all>{
		  for $e in fn:available-environment-variables()
		  order by $e
		  return <v name="$i">{ fn:environment-variable($e) }</v>
	      }</all>,
	      $second := <all>{
		  for $e in fn:available-environment-variables()
		  order by $e
		  return <v name="$i">{ fn:environment-variable($e) }</v>
	      }</all>
	  return deep-equal($first, $second)
	  ]]>
      </test>
      <result>
         <assert-true />
      </result>
   </test-case>

   <test-case name="fn-available-environment-variables-010">
      <description>check that requesting a not-available variable returns ()</description>
      <created by="Liam Quin" on="2012-02-17"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>
	  let $all := fn:available-environment-variables()
	  return if (fn:empty($all)) then true()
	  else fn:empty(fn:environment-variable(fn:string-join($all)))
      </test>
      <result>
         <assert-true />
      </result>
   </test-case>


   <!--* In order to pass test case 11 you *either* need to set
       * an environment variable QTTEST to the
       * string value 42, *or* available-environment-variables
       * must return () indicating no variables available.
       *
       * You will also need QTTEST2 to be set to "other"
       * so we can make sure that
       * environment-variable() can return a value other
       * than "42".
       *
       * It would be acceptable to change the name QTTEST to
       * something that works and that a user would expect on
       * your system, such as "environent.user.qttest" but if
       * that is necessary you should document it.
       *
       * See the also the tests for environment-variable().
       * 
       *-->
   <test-case name="fn-available-environment-variables-011">
      <description>check that if any env var is available, QTTEST is a string, "42"</description>
      <created by="Liam Quin" on="2012-05-18"/>
      <dependency type="spec" value="XP30+ XQ30+"/>
      <test>
	  let $all := fn:available-environment-variables()
	  return if (fn:empty($all)) then true()
	  else if ($all = "QTTEST")
	  then fn:environment-variable("QTTEST") eq "42"
	  else false()
      </test>
      <result>
         <assert-true />
      </result>
   </test-case>
</test-set>
