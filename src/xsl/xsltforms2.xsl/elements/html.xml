<!--
 * @author Alain Couthures <alain.couthures@agencexml.com>
 * @licence LGPL - See file 'LICENSE.md' in this project.
 * @module html
-->
<xsl:template match="xhtml:html | html" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xforms="http://www.w3.org/2002/xforms" xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:exslt="http://exslt.org/common" xmlns:xalan="http://xml.apache.org/xalan">
	<xsl:choose>
		<xsl:when test="function-available('xalan:nodeset')">
			<xsl:call-template name="html">
				<xsl:with-param name="script" select="xalan:nodeset($script0)/*"/>
			</xsl:call-template>
		</xsl:when>
		<xsl:when test="function-available('exslt:node-set')">
			<xsl:call-template name="html">
				<xsl:with-param name="script" select="exslt:node-set($script0)/*"/>
			</xsl:call-template>
		</xsl:when>
		<xsl:when test="function-available('msxsl:node-set')">
			<xsl:call-template name="html">
				<xsl:with-param name="script" select="msxsl:node-set($script0)/*"/>
			</xsl:call-template>
		</xsl:when>
		<xsl:otherwise>
			<xsl:variable name="script00" select="$script0"/>
			<xsl:call-template name="html">
				<xsl:with-param name="script" select="$script00/*"/>
			</xsl:call-template>
		</xsl:otherwise>
	</xsl:choose>
</xsl:template>
<xsl:template name="html" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xforms="http://www.w3.org/2002/xforms" xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:exslt="http://exslt.org/common" xmlns:xalan="http://xml.apache.org/xalan">
	<xsl:param name="script"/>
	<xsl:variable name="pivalue" select="translate(normalize-space(/processing-instruction('xml-stylesheet')[1]), ' ', '')"/>
	<xsl:variable name="hrefquote" select="substring(substring-after($pivalue, 'href='), 1, 1)"/>
	<xsl:variable name="href" select="substring-before(substring-after($pivalue, concat('href=', $hrefquote)), $hrefquote)"/>
	<xsl:variable name="resourcesdir">
		<xsl:choose>
			<xsl:when test="$baseuri != ''">
				<xsl:value-of select="$baseuri"/>
			</xsl:when>
			<xsl:when test="$xsltforms_home != ''">
				<xsl:value-of select="$xsltforms_home"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="substring-before($href, 'xsltforms2.xsl')"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:variable>
	<xsl:variable name="resourcesdircss">
		<xsl:choose>
			<xsl:when test="$resourcesdir = 'xsl/'">css/</xsl:when>
			<xsl:when test="substring($resourcesdir, string-length($resourcesdir) - 4) = '/xsl/'">
				<xsl:value-of select="concat(substring($resourcesdir, 1, string-length($resourcesdir) - 4), 'css/')"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$resourcesdir"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:variable>
	<xsl:variable name="resourcesdirjs">
		<xsl:choose>
			<xsl:when test="$resourcesdir = 'xsl/'">js/</xsl:when>
			<xsl:when test="substring($resourcesdir, string-length($resourcesdir) - 4) = '/xsl/'">
				<xsl:value-of select="concat(substring($resourcesdir, 1, string-length($resourcesdir) - 4), 'js/')"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$resourcesdir"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:variable>
	<!--xsl:text disable-output-escaping='yes'>&lt;!DOCTYPE html&gt;</xsl:text-->
	<html>
		<xsl:copy-of select="@*"/>
		<xsl:comment>HTML elements and Javascript instructions generated by XSLTForms $$$VersionName$$$ ($$$VersionNumber$$$) - Copyright (C) $$$VersionYear$$$ &lt;agenceXML&gt; - Alain Couthures - http://www.agencexml.com</xsl:comment>
		<xsl:variable name="option"> debug="yes" </xsl:variable>
		<xsl:variable name="optionno"> debug="no" </xsl:variable>
		<xsl:variable name="displaydebug">
			<xsl:choose>
				<xsl:when test="$xsltforms_debug != ''"><xsl:value-of select="$xsltforms_debug"/></xsl:when>
				<xsl:when test="contains(concat(' ',translate(normalize-space(/processing-instruction('xsltforms-options')[1]), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),' '),$option)">true</xsl:when>
				<xsl:when test="contains(concat(' ',translate(normalize-space(/processing-instruction('xsltforms-options')[1]), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),' '),$optionno)">false</xsl:when>
				<xsl:when test="$script/config/options/debug">true</xsl:when>
				<xsl:otherwise>false</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<head>
			<xsl:copy-of select="xhtml:head/@* | head/@*"/>
			<meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
			<xsl:for-each select="xhtml:head/xhtml:meta[string(@http-equiv) != 'Content-Type'] | head/meta[string(@http-equiv) != 'Content-Type']">
				<meta>
					<xsl:copy-of select="@*"/>
				</meta>
			</xsl:for-each>
			<link type="text/css" href="{$resourcesdircss}xsltforms2.css" rel="stylesheet"/>
			<xsl:apply-templates select="xhtml:head/xhtml:*[local-name() != 'script' and local-name() != 'style' and local-name() != 'link' and local-name() != 'meta'] | xhtml:head/comment() | head/title | head/comment()"/>
			<xsl:apply-templates select="xhtml:head/xhtml:style | xhtml:head/xhtml:link | head/style | head/link">
				<xsl:with-param name="config" select="$script/config"/>
			</xsl:apply-templates>
			<xsl:variable name="jsrevisionname"><xsl:if test="$script/config/properties/jsrevision = 'concat'">-$$$VersionName$$$</xsl:if></xsl:variable>
			<xsl:variable name="jsrevisionparam"><xsl:if test="$script/config/properties/jsrevision != '' and $script/config/properties/jsrevision != ''">?<xsl:value-of select="$script/config/properties/jsrevision"/>=$$$VersionNumber$$$</xsl:if></xsl:variable>
			<script type="text/javascript" id="xsltforms-src" src="{$resourcesdirjs}xsltforms2{$jsrevisionname}.js{$jsrevisionparam}" data-uri="http://www.agencexml.com/xsltforms2">
				<xsl:attribute name="data-version">$$$VersionNumber$$$</xsl:attribute>
				<xsl:text>/* */</xsl:text>
			</script>
			<xsl:for-each select="$script/config/jsextensions">
				<script id="xsltforms-jsextension{position()}" src="{$resourcesdirjs}{.}" type="text/javascript">/* */</script>
			</xsl:for-each>
			<xsl:apply-templates select="xhtml:head/xhtml:script | head/script"/>
			<xsl:if test="not($script/config/extensions/beforeInit) and not($script/config/extensions/onBeginInit) and not($script/config/extensions/onEndInit) and not($script/config/extensions/afterInit)">
				<xsl:copy-of select="$script/config/extensions/*"/>
			</xsl:if>
			<xsl:copy-of select="$script/config/extensions/beforeInit/*"/>
			<xsl:copy-of select="$script/config/extensions/afterInit/*"/>
		</head>
		<body>
			<xsl:copy-of select="xhtml:body/@*[name() != 'onload'] | body/@*[name() != 'onload']"/>
			<xsl:variable name="xsltversion">
				<xsl:if test="system-property('xsl:vendor')='Microsoft'">
					<xsl:value-of select="system-property('msxsl:version')"/>
				</xsl:if>
			</xsl:variable>
			<xsl:variable name="xsltengine" select="normalize-space(concat(system-property('xsl:vendor'),' ',system-property('xsl:vendor-url'),' ',$xsltversion))"/>
			<xsl:variable name="vsep">
				<xsl:choose>
					<xsl:when test="$script/config/properties/valuesseparator != ''">
						<xsl:value-of select="$script/config/properties/valuesseparator"/>
					</xsl:when>
					<xsl:otherwise><xsl:text> </xsl:text></xsl:otherwise>
				</xsl:choose>
			</xsl:variable>
			<xforms-engine xsltengine="{$xsltengine}" loadingmsg="{$script/config/properties/status}" valuesseparator="{$vsep}">
				<xsl:if test="$configlang != ''">
					<xsl:attribute name="lang"><xsl:value-of select="$configlang"/></xsl:attribute>
				</xsl:if>
				<xsl:if test="$displaydebug = 'true'">
					<xsl:attribute name="debug"><xsl:value-of select="$displaydebug"/></xsl:attribute>
				</xsl:if>
			</xforms-engine>
			<xsl:apply-templates select="xhtml:head/xforms:model | body/xforms:model"/>
			<xforms-model id="xsltforms-mainform-model-config">
				<xforms-instance id="xsltforms-mainform-instance-config">
					<script type="text/plain">
						<xsl:choose>
							<xsl:when test="$xsltforms_config != ''">
								<xsl:value-of select="normalize-space($xsltforms_config)"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:copy-of select="$script/config/properties"/>
								<!--
								<xsl:apply-templates select="$script/config/properties" mode="xml2string">
									<xsl:with-param name="root" select="true()"/>
								</xsl:apply-templates>
								-->
							</xsl:otherwise>
						</xsl:choose>
					</script>
				</xforms-instance>
			</xforms-model>
			<xsl:apply-templates select="xhtml:body/node() | body/node()"/>
		</body>
	</html>
</xsl:template>