<!--
 * @author Alain Couthures <alain.couthures@agencexml.com>
 * @licence LGPL - See file 'LICENSE.md' in this project.
 * @module itemset
-->
<xsl:template match="xforms:itemset[ancestor::xforms:*[1][string(@appearance)!='full']]" mode="script" priority="1" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xforms="http://www.w3.org/2002/xforms">
	<xsl:param name="parentworkid"/>
	<xsl:param name="workid" select="concat(position(),'_',$parentworkid)"/>
	<xsl:apply-templates select="@*" mode="scriptattr"/>
	<js xmlns="">
		<xsl:text>var </xsl:text>
		<xsl:value-of select="$vn_pf"/>
		<xsl:text>itemset_</xsl:text>
		<xsl:value-of select="$workid"/>
		<xsl:text> = new XsltForms_itemset(</xsl:text>
		<xsl:value-of select="$vn_subform"/>
		<xsl:text>,</xsl:text>
		<xsl:choose>
			<xsl:when test="@id">"<xsl:value-of select="@id"/></xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$jsid_pf"/>
				<xsl:text>itemset-</xsl:text>
				<xsl:value-of select="$workid"/>
			</xsl:otherwise>
		</xsl:choose>
		<xsl:text>",</xsl:text>
		<xsl:call-template name="toScriptBinding"><xsl:with-param name="p" select="@nodeset | @ref"/></xsl:call-template>
		<xsl:choose>
			<xsl:when test="xforms:label">
				<xsl:text>,</xsl:text>
				<xsl:for-each select="xforms:label[1]">
					<xsl:call-template name="toScriptBinding"><xsl:with-param name="p" select="@ref"/></xsl:call-template>
				</xsl:for-each>
			</xsl:when>
			<xsl:otherwise>
				<xsl:text>,null</xsl:text>
			</xsl:otherwise>
		</xsl:choose>
		<xsl:choose>
			<xsl:when test="xforms:value">
				<xsl:text>,</xsl:text>
				<xsl:for-each select="xforms:value[1]">
					<xsl:call-template name="toScriptBinding"><xsl:with-param name="p" select="@ref"/></xsl:call-template>
				</xsl:for-each>
			</xsl:when>
			<xsl:otherwise>
				<xsl:text>,null</xsl:text>
			</xsl:otherwise>
		</xsl:choose>
		<xsl:choose>
			<xsl:when test="xforms:copy">
				<xsl:text>,</xsl:text>
				<xsl:for-each select="xforms:copy[1]">
					<xsl:call-template name="toScriptBinding"><xsl:with-param name="p" select="@ref"/></xsl:call-template>
				</xsl:for-each>
			</xsl:when>
			<xsl:otherwise>
				<xsl:text>,null</xsl:text>
			</xsl:otherwise>
		</xsl:choose>
		<xsl:text>);</xsl:text>
	</js>
	<xsl:apply-templates select="node()" mode="script">
		<xsl:with-param name="parentworkid" select="$workid"/>
	</xsl:apply-templates>
	<xsl:call-template name="listeners">
		<xsl:with-param name="workid" select="$workid"/>
	</xsl:call-template>
</xsl:template>