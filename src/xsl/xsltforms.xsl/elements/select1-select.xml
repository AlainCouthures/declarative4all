<!--
 * @author Alain Couthures <alain.couthures@agencexml.com>
 * @licence LGPL - See file 'LICENSE.md' in this project.
 * @module select1-select
-->
<xsl:template match="xforms:select1[not(@selection) or @selection != 'open'] | xforms:select[not(@selection) or @selection != 'open']" priority="2" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xforms="http://www.w3.org/2002/xforms">
	<xsl:param name="appearance" select="false()"/>
	<xsl:param name="parentworkid"/>
	<xsl:param name="workid" select="concat(position(),'_',$parentworkid)"/>
	<xsl:variable name="body">
		<xsl:choose>
			<xsl:when test="@appearance='compact'">
				<select size="4">
					<xsl:copy-of select="@*[local-name() != 'ref' and local-name() != 'id' and local-name() != 'class' and local-name() != 'max' and local-name() != 'multiple' and local-name() != 'type' and local-name() != 'size' and local-name() != 'appearance']"/>
					<xsl:call-template name="comun"/>
					<xsl:if test="local-name() = 'select' and (not(@max) or @max &gt; 1)">
						<xsl:attribute name="multiple">true</xsl:attribute>
					</xsl:if>
					<xsl:apply-templates select="node()" mode="item">
						<xsl:with-param name="parentworkid" select="$workid"/>
					</xsl:apply-templates>
				</select>
			</xsl:when>
			<xsl:when test="@appearance='full'">
				<span>
					<xsl:copy-of select="@*[local-name() != 'ref' and local-name() != 'id' and local-name() != 'class' and local-name() != 'max' and local-name() != 'multiple' and local-name() != 'type' and local-name() != 'size' and local-name() != 'appearance']"/>
					<xsl:call-template name="comun"/>
					<xsl:variable name="type">
						<xsl:choose>
							<xsl:when test="local-name() = 'select' and (not(@max) or @max &gt; 1)">checkbox</xsl:when>
							<xsl:otherwise>radio</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<xsl:apply-templates select="node()" mode="item">
						<xsl:with-param name="parentworkid" select="$workid"/>
						<xsl:with-param name="type" select="$type"/>
					</xsl:apply-templates>
				</span>
			</xsl:when>
			<xsl:otherwise>
				<select>
					<xsl:copy-of select="@*[local-name() != 'ref' and local-name() != 'id' and local-name() != 'class' and local-name() != 'max' and local-name() != 'multiple' and local-name() != 'type' and local-name() != 'size' and local-name() != 'appearance']"/>
					<xsl:call-template name="comun"/>
					<xsl:if test="local-name() = 'select' and (not(@max) or @max &gt; 1)">
						<xsl:attribute name="multiple">true</xsl:attribute>
						<xsl:attribute name="size">
							<xsl:value-of select="count(descendant::xforms:item)"/>
						</xsl:attribute>
					</xsl:if>
					<xsl:apply-templates select="node()" mode="item">
						<xsl:with-param name="parentworkid" select="$workid"/>
					</xsl:apply-templates>
				</select>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:variable>
	<xsl:call-template name="field">
		<xsl:with-param name="workid" select="$workid"/>
		<xsl:with-param name="appearance" select="$appearance"/>
		<xsl:with-param name="body" select="$body"/>
	</xsl:call-template>
</xsl:template>
<xsl:template match="xforms:select1[@selection = 'open'] | xforms:select[@selection = 'open']" priority="2" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xforms="http://www.w3.org/2002/xforms">
	<xsl:param name="appearance" select="false()"/>
	<xsl:param name="parentworkid"/>
	<xsl:param name="workid" select="concat(position(),'_',$parentworkid)"/>
	<xsl:variable name="body">
		<span>
			<datalist id="{$workid}-datalist">
				<xsl:apply-templates select="node()" mode="item">
					<xsl:with-param name="parentworkid" select="$workid"/>
					<xsl:with-param name="type" select="'openselect'"/>
				</xsl:apply-templates>
			</datalist>
			<input list="{$workid}-datalist">
				<xsl:copy-of select="@*[local-name() != 'ref' and local-name() != 'id' and local-name() != 'class' and local-name() != 'max' and local-name() != 'multiple' and local-name() != 'type' and local-name() != 'size' and local-name() != 'appearance']"/>
				<xsl:call-template name="comun"/>
			</input>
		</span>
	</xsl:variable>
	<xsl:call-template name="field">
		<xsl:with-param name="workid" select="$workid"/>
		<xsl:with-param name="appearance" select="$appearance"/>
		<xsl:with-param name="body" select="$body"/>
	</xsl:call-template>
</xsl:template>