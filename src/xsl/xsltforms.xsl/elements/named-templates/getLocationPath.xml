<!--
 * @author Alain Couthures <alain.couthures@agencexml.com>
 * @licence LGPL - See file 'LICENSE.md' in this project.
 * @module getLocationPath
-->
<xsl:template name="getLocationPath" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
	<xsl:param name="s"/>
	<xsl:param name="r"/>
	<xsl:param name="l" select="0"/>
	<xsl:choose>
		<xsl:when test="$s = ''"><xsl:value-of select="concat($l,'.',$r)"/></xsl:when>
		<xsl:otherwise>
			<xsl:variable name="axis">
				<xsl:if test="contains($s, '::') and contains('.ancestor-or-self.ancestor.attribute.child.descendant-or-self.descendant.following-sibling.following.namespace.parent.preceding-sibling.preceding.self.',concat('.',substring-before($s,'::'),'.')) and not(contains(substring-before($s,'::'),'.'))">
					<xsl:value-of select="substring-before($s,'::')"/>
				</xsl:if>
			</xsl:variable>
			<xsl:variable name="s2">
				<xsl:choose>
					<xsl:when test="$axis != ''">
						<xsl:value-of select="substring-after($s,'::')"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="$s"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>
			<xsl:variable name="axis2">
				<xsl:choose>
					<xsl:when test="$axis != ''">
						<xsl:value-of select="$axis"/>
					</xsl:when>
					<xsl:otherwise>child</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>
			<xsl:variable name="axislength">
				<xsl:choose>
					<xsl:when test="$axis != ''">
						<xsl:value-of select="string-length($axis)+2"/>
					</xsl:when>
					<xsl:otherwise>0</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>
			<xsl:variable name="c" select="substring($s2,1,1)"/>
			<xsl:variable name="i">
				<xsl:choose>
					<xsl:when test="starts-with($s2,'//')">2.,new XsltForms_stepExpr('descendant-or-self',new XsltForms_nodeTestAny()</xsl:when>
					<xsl:when test="starts-with($s2,'../')">3.,new XsltForms_stepExpr('parent',new XsltForms_nodeTestAny()</xsl:when>
					<xsl:when test="starts-with($s2,'..')">2.,new XsltForms_stepExpr('parent',new XsltForms_nodeTestAny()</xsl:when>
					<xsl:when test="$c = '*' and substring($s2,2,1) != ':'"><xsl:value-of select="$axislength + 1"/>.,new XsltForms_stepExpr('<xsl:value-of select="$axis2"/>',new XsltForms_nodeTestType(1)</xsl:when>
					<xsl:when test="starts-with($s2,'text()')"><xsl:value-of select="$axislength + 6"/>.,new XsltForms_stepExpr('<xsl:value-of select="$axis2"/>',new XsltForms_nodeTestType(3)</xsl:when>
					<xsl:when test="starts-with($s2,'array()')"><xsl:value-of select="$axislength + 7"/>.,new XsltForms_stepExpr('<xsl:value-of select="$axis2"/>',new XsltForms_nodeTestType(131)</xsl:when>
					<xsl:when test="starts-with($s2,'map()')"><xsl:value-of select="$axislength + 5"/>.,new XsltForms_stepExpr('<xsl:value-of select="$axis2"/>',new XsltForms_nodeTestType(132)</xsl:when>
					<xsl:when test="starts-with($s2,'entry()')">7.,new XsltForms_stepExpr('entry',new XsltForms_nodeTestType(133)</xsl:when>
					<xsl:when test="$c = '/'">1.</xsl:when>
					<xsl:when test="starts-with($s2,'@*')">2.,new XsltForms_stepExpr('attribute',new XsltForms_nodeTestAny()</xsl:when>
					<xsl:when test="$c = '@'">
						<xsl:variable name="t"><xsl:call-template name="getName"><xsl:with-param name="s" select="substring($s2,2)"/></xsl:call-template></xsl:variable>
						<xsl:choose>
							<xsl:when test="$t != ''">
								<xsl:variable name="pt"><xsl:if test="not(contains($t,':'))">:</xsl:if><xsl:value-of select="$t"/></xsl:variable>
								<xsl:value-of select="string-length($t)+1"/>.,new XsltForms_stepExpr('attribute',new XsltForms_nodeTestName(<xsl:choose><xsl:when test="starts-with($pt,':')">null</xsl:when><xsl:otherwise>'<xsl:value-of select="substring-before($pt,':')"/>'</xsl:otherwise></xsl:choose>,'<xsl:value-of select="substring-after($pt,':')"/><xsl:text>')</xsl:text>
							</xsl:when>
							<xsl:otherwise>
								<xsl:variable name="msg">"~~~~Name expected at '<xsl:value-of select="substring($s,2)"/>'~#~#"</xsl:variable>
								<xsl:value-of select="string-length($msg)"/>.<xsl:value-of select="$msg"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:when>
					<xsl:when test="starts-with($s2,'?*')">2.,new XsltForms_stepExpr('entry',new XsltForms_nodeTestAny()</xsl:when>
					<xsl:when test="$c = '?'">
						<xsl:variable name="t"><xsl:call-template name="getName"><xsl:with-param name="s" select="substring($s2,2)"/></xsl:call-template></xsl:variable>
						<xsl:choose>
							<xsl:when test="$t != ''">
								<xsl:variable name="pt"><xsl:if test="not(contains($t,':'))">:</xsl:if><xsl:value-of select="$t"/></xsl:variable>
								<xsl:value-of select="string-length($t)+1"/>.,new XsltForms_stepExpr('entry',new XsltForms_nodeTestName(<xsl:choose><xsl:when test="starts-with($pt,':')">null</xsl:when><xsl:otherwise>'<xsl:value-of select="substring-before($pt,':')"/>'</xsl:otherwise></xsl:choose>,'<xsl:value-of select="substring-after(translate($pt,'`',''),':')"/><xsl:text>')</xsl:text>
							</xsl:when>
							<xsl:otherwise>
								<xsl:variable name="msg">"~~~~Name expected at '<xsl:value-of select="substring($s,2)"/>'~#~#"</xsl:variable>
								<xsl:value-of select="string-length($msg)"/>.<xsl:value-of select="$msg"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:when>
					<xsl:when test="$c = '.'">1.,new XsltForms_stepExpr('self',new XsltForms_nodeTestAny()</xsl:when>
					<xsl:when test="starts-with($s2,'node()')"><xsl:value-of select="$axislength + 6"/>.,new XsltForms_stepExpr('<xsl:value-of select="$axis2"/>',new XsltForms_nodeTestAny()</xsl:when>
					<xsl:when test="contains('_ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz`',$c)">
						<xsl:variable name="t"><xsl:call-template name="getName"><xsl:with-param name="s" select="$s2"/></xsl:call-template></xsl:variable>
						<xsl:variable name="pt"><xsl:if test="not(contains($t,':'))">:</xsl:if><xsl:value-of select="$t"/></xsl:variable>
						<xsl:value-of select="$axislength + string-length($t)"/>.,new XsltForms_stepExpr('<xsl:value-of select="$axis2"/>',new XsltForms_nodeTestName('<xsl:value-of select="substring-before($pt,':')"/>','<xsl:value-of select="substring-after(translate($pt,'`',''),':')"/><xsl:text>')</xsl:text>
					</xsl:when>
					<xsl:when test="starts-with($s2,'*:') and contains('_ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz`',substring($s2,3,1))">
						<xsl:variable name="t"><xsl:call-template name="getName"><xsl:with-param name="s" select="substring($s2,3)"/></xsl:call-template></xsl:variable>
						<xsl:choose>
							<xsl:when test="not(contains($t,':'))">
								<xsl:value-of select="$axislength + 2 + string-length($t)"/>.,new XsltForms_stepExpr('<xsl:value-of select="$axis2"/>',new XsltForms_nodeTestName('*','<xsl:value-of select="translate($t,'`','')"/><xsl:text>')</xsl:text>
							</xsl:when>
							<xsl:otherwise>
								<xsl:variable name="msg">"~~~~Two prefixes at '<xsl:value-of select="$s"/>'~#~#"</xsl:variable>
								<xsl:value-of select="string-length($msg)"/>.<xsl:value-of select="$msg"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:when>
					<xsl:otherwise>0</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>
			<xsl:choose>
				<xsl:when test="$i = '0'"><xsl:value-of select="concat($l,'.',$r)"/></xsl:when>
				<xsl:otherwise>
					<!--
					<xsl:variable name="s3" select="substring($s,number(substring-before($i,'.'))+1)"/>
					<xsl:variable name="c3" select="substring(normalize-space($s3),1,1)"/>
					<xsl:variable name="i3" select="string-length(substring-before($s3,$c3))"/>
					<xsl:variable name="s4" select="concat($c3,substring-after($s3,$c3))"/>
					-->
					<xsl:variable name="s3" select="substring($s,number(substring-before($i,'.'))+1)"/>
					<xsl:variable name="c3" select="substring($s3,1,1)"/>
					<xsl:variable name="i3" select="string-length(substring-before($s3,$c3))"/>
					<xsl:variable name="s4" select="concat($c3,substring-after($s3,$c3))"/>
					<xsl:variable name="p">
						<xsl:choose>
							<xsl:when test="$c3 = '['">
								<xsl:variable name="t"><xsl:call-template name="getPredicates"><xsl:with-param name="s" select="substring($s4,2)"/></xsl:call-template></xsl:variable>
								<xsl:value-of select="concat(substring-before($t,'.'),'.',substring-after($t,'.'),')')"/>
							</xsl:when>
							<xsl:when test="substring-after($i,'.') = ''">0.</xsl:when>
							<xsl:otherwise>0.)</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<!--
					<xsl:variable name="s5" select="substring($s4,number(substring-before($p,'.'))+1)"/>
					<xsl:variable name="c5" select="substring(normalize-space($s5),1,1)"/>
					<xsl:variable name="i5" select="string-length(substring-before($s5,$c5))"/>
					-->
					<xsl:variable name="s5" select="substring($s4,number(substring-before($p,'.'))+1)"/>
					<xsl:variable name="c5" select="substring($s5,1,1)"/>
					<xsl:variable name="i5" select="string-length(substring-before($s5,$c5))"/>
					<xsl:call-template name="getLocationPath">
						<xsl:with-param name="s" select="concat($c5,substring-after($s5,$c5))"/>
						<xsl:with-param name="r" select="concat($r,substring-after($i,'.'),substring-after($p,'.'))"/>
						<xsl:with-param name="l" select="$l+number(substring-before($i,'.'))+$i3+number(substring-before($p,'.'))+$i5"/>
					</xsl:call-template>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:otherwise>
	</xsl:choose>
</xsl:template>