<!--
 * @author Alain Couthures <alain.couthures@agencexml.com>
 * @licence LGPL - See file 'LICENSE.md' in this project.
 * @module tr-repeat
-->
<xsl:template match="xhtml:tr[parent::xforms:repeat] | tr[parent::xforms:repeat] | xhtml:td[parent::xforms:repeat] | td[parent::xforms:repeat]" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xforms="http://www.w3.org/2002/xforms" xmlns:ev="http://www.w3.org/2001/xml-events">
	<xsl:param name="parentworkid"/>
	<xsl:param name="workid" select="concat(position(),'_',$parentworkid)"/>
	<xsl:choose>
		<xsl:when test="parent::xforms:repeat[count(xhtml:tr | tr | xhtml:td | td | xhtml:th | th) &lt; 2 and not(parent::*[local-name() = 'tr'] and ancestor::*[2][local-name() = 'repeat' and namespace-uri() = 'http://www.w3.org/2002/xforms']) and ((not(following-sibling::*) and not(preceding-sibling::*)) or not(xhtml:tr | tr | xhtml:td | td | xhtml:th | th))]">
			<xsl:apply-templates select="node()">
				<xsl:with-param name="parentworkid" select="$workid"/>
			</xsl:apply-templates>
		</xsl:when>
		<xsl:otherwise>
			<xsl:copy>
				<xsl:if test="not(preceding-sibling::*)">
					<xsl:call-template name="genid">
						<xsl:with-param name="workid" select="$workid"/>
					</xsl:call-template>
				</xsl:if>
				<xsl:attribute name="class">xforms-repeat-item</xsl:attribute>
				<xsl:apply-templates select="@* | node()">
					<xsl:with-param name="parentworkid" select="$workid"/>
				</xsl:apply-templates>
			</xsl:copy>
		</xsl:otherwise>
	</xsl:choose>
</xsl:template>