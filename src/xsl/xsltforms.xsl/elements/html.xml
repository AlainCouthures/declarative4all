<!--
 * @author Alain Couthures <alain.couthures@agencexml.com>
 * @license LGPL - See file 'LICENSE.md' in this project.
 * @module html
-->
<xsl:template match="xhtml:html | html" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xforms="http://www.w3.org/2002/xforms" xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:exslt="http://exslt.org/common" xmlns:xalan="http://xml.apache.org/xalan">
  <xsl:variable name="pivalue" select="translate(normalize-space(/processing-instruction('xml-stylesheet')[1]), ' ', '')"/>
  <xsl:variable name="hrefquote" select="substring(substring-after($pivalue, 'href='), 1, 1)"/>
  <xsl:variable name="href" select="substring-before(substring-after($pivalue, concat('href=', $hrefquote)), $hrefquote)"/>
  <xsl:variable name="resourcesdir">
    <xsl:choose>
      <xsl:when test="$baseuri != ''">
        <xsl:value-of select="$baseuri"/>
      </xsl:when>
      <xsl:when test="$xsltforms_home != ''">
        <xsl:value-of select="$xsltforms_home"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="substring-before($href, 'xsltforms.xsl')"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:variable>
  <xsl:variable name="resourcesdircss">
    <xsl:choose>
      <xsl:when test="$resourcesdir = 'xsl/'">css/</xsl:when>
      <xsl:when test="substring($resourcesdir, string-length($resourcesdir) - 4) = '/xsl/'">
        <xsl:value-of select="concat(substring($resourcesdir, 1, string-length($resourcesdir) - 4), 'css/')"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$resourcesdir"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:variable>
  <xsl:variable name="resourcesdirjs">
    <xsl:choose>
      <xsl:when test="$resourcesdir = 'xsl/'">js/</xsl:when>
      <xsl:when test="substring($resourcesdir, string-length($resourcesdir) - 4) = '/xsl/'">
        <xsl:value-of select="concat(substring($resourcesdir, 1, string-length($resourcesdir) - 4), 'js/')"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$resourcesdir"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:variable>
  <html>
    <xsl:copy-of select="@*"/>
    <xsl:comment>HTML elements generated by XSLTForms $$$VersionName$$$ ($$$VersionNumber$$$) [<xsl:value-of select="system-property('xsl:vendor')"/>] - Copyright (C) $$$VersionYear$$$ &lt;agenceXML&gt; - Alain Couthures - http://www.agencexml.com</xsl:comment>
    <head>
      <xsl:copy-of select="xhtml:head/@* | head/@*"/>
      <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
      <xsl:for-each select="xhtml:head/xhtml:meta[string(@http-equiv) != 'Content-Type'] | head/meta[string(@http-equiv) != 'Content-Type']">
        <meta>
          <xsl:copy-of select="@*"/>
        </meta>
      </xsl:for-each>
      <link type="text/css" href="{$resourcesdircss}xsltforms.css" rel="stylesheet"/>
      <xsl:apply-templates select="(xhtml:head | head)/node()[namespace-uri() != 'http://www.w3.org/2002/xforms' and local-name() != 'meta' and local-name() != 'META']"/>
      <xsl:variable name="jsrevisionname"><xsl:if test="$jsrevision = 'concat'">-$$$VersionName$$$</xsl:if></xsl:variable>
      <xsl:variable name="jsrevisionparam"><xsl:if test="$jsrevision != '' and $jsrevision != 'concat'">?<xsl:value-of select="$jsrevision"/>=$$$VersionNumber$$$</xsl:if></xsl:variable>
      <xsl:element name="{$xsltforms_replacement_for}script">
        <xsl:attribute name="type">text/javascript</xsl:attribute>
        <xsl:attribute name="id">xsltforms-src</xsl:attribute>
        <xsl:attribute name="src"><xsl:value-of select="$resourcesdirjs"/>xsltforms<xsl:value-of select="$jsrevisionname"/>.js<xsl:value-of select="$jsrevisionparam"/></xsl:attribute>
        <xsl:attribute name="data-uri">http://www.agencexml.com/xsltforms</xsl:attribute>
        <xsl:attribute name="data-version">$$$VersionNumber$$$</xsl:attribute>
        <xsl:text>/* */</xsl:text>
      </xsl:element>
    </head>
    <body>
      <xsl:copy-of select="xhtml:body/@*[name() != 'onload'] | body/@*[name() != 'onload']"/>
      <xforms-form>
        <xsl:if test="namespace::*">
          <xsl:for-each select="self::*/namespace::*[not(contains('..xml.', concat('.', name(), '.')))]">
            <xsl:attribute name="{name()}:xmlns" namespace="{.}"></xsl:attribute>
          </xsl:for-each>
        </xsl:if>
        <xsl:if test="/processing-instruction('xsltforms-options')">
          <xforms-options>
            <xsl:for-each select="/processing-instruction('xsltforms-options')">
              <xsl:call-template name="getoptions">
                <xsl:with-param name="optionset" select="."/>
              </xsl:call-template>
            </xsl:for-each>
          </xforms-options>
        </xsl:if>
        <xsl:apply-templates select="xhtml:head/xforms:model | head/xforms:model"/>
        <xforms-body>
          <form>
            <xsl:apply-templates select="xhtml:body/node() | body/node()"/>
          </form>
        </xforms-body>
      </xforms-form>
    </body>
  </html>
</xsl:template>

<xsl:template name="getoptions">
  <xsl:param name="optionset"/>
  <xsl:if test="contains($optionset, '=')">
    <xsl:variable name="oname" select="translate(substring-before($optionset, '='),' ','')"/>
    <xsl:if test="$oname != ''">
      <xsl:variable name="valsep" select="substring(translate(substring-after($optionset, '='), ' ', ''), 1, 1)"/>
      <xsl:if test="$valsep = $apos or $valsep = $quot">
        <xsl:attribute name="xf-{$oname}"><xsl:value-of select="substring-before(substring-after($optionset, $valsep), $valsep)"/></xsl:attribute>
        <xsl:call-template name="getoptions">
          <xsl:with-param name="optionset" select="substring-after(substring-after($optionset, $valsep), $valsep)"/>
        </xsl:call-template>
      </xsl:if>
    </xsl:if>
  </xsl:if>
</xsl:template>