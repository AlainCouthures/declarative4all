<test-set name="misc-AnnexE" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">
  <description>Tests for the AnnexE operator</description>
  <link document="http://www.w3.org/TR/xpath-functions-30/" idref="func-AnnexE" type="spec"/>
  <link document="FuncOps" idref="if-empty" section-number="E.1.1" type="spec"/>
  <dependency type="spec" value="XQ10+"/>
  <test-case name="annex-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> User defined function # 1 from annex E of F O Specs. </description>
    <created by="XML Query Working Group" on="2006-03-12"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace eg = "http://example.org"; declare function eg:if-empty ( $node as node()?, $value as xs:anyAtomicType) as xs:anyAtomicType* { if ($node and $node/child::node()) then fn:data($node) else $value }; let $arg1 := <element1>some data</element1> let $arg2 as xs:anyAtomicType := 1 return eg:if-empty($arg1,$arg2)]]>
    </test>
    <result-string>xs:string("some data")</result-string>
    <result>
      <assert-string-value>some data</assert-string-value>
    </result>
  </test-case>
  <test-case name="annex-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> User defined function # 2 from annex E of F O Specs. </description>
    <created by="XML Query Working Group" on="2006-03-12"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace eg = "http://example.org"; declare function eg:if-absent ( $node as node()?, $value as xs:anyAtomicType) as xs:anyAtomicType* { if ($node) then fn:data($node) else $value }; let $arg1 := <element1>some data</element1> let $arg2 as xs:anyAtomicType := 1 return eg:if-absent($arg1,$arg2)]]>
    </test>
    <result-string>xs:string("some data")</result-string>
    <result>
      <assert-string-value>some data</assert-string-value>
    </result>
  </test-case>
  <test-case name="annex-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("1"),xs:integer("2"))</response-string>
    <description> User defined function # 3 from annex E of F O Specs. </description>
    <created by="XML Query Working Group" on="2006-03-12"/>
    <test>declare namespace eg = "http://example.org"; declare function eg:value-union ( $arg1 as xs:anyAtomicType*, $arg2 as xs:anyAtomicType*) as xs:anyAtomicType* { fn:distinct-values(($arg1, $arg2)) }; let $arg1 as xs:anyAtomicType := 1 let $arg2 as xs:anyAtomicType := 2 return eg:value-union($arg1,$arg2)</test>
    <result-string>(xs:integer("1"),xs:integer("2"))</result-string>
    <result>
      <assert-string-value>1 2</assert-string-value>
    </result>
  </test-case>
  <test-case name="annex-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("1")</response-string>
    <description> User defined function # 4 from annex E of F O Specs. </description>
    <created by="XML Query Working Group" on="2006-03-12"/>
    <test>declare namespace eg = "http://example.org"; declare function eg:value-intersect ( $arg1 as xs:anyAtomicType*, $arg2 as xs:anyAtomicType* ) as xs:anyAtomicType* { fn:distinct-values($arg1[.=$arg2]) }; let $arg1 as xs:anyAtomicType := 1 let $arg2 as xs:anyAtomicType := 1 return eg:value-intersect($arg1,$arg2)</test>
    <result-string>xs:integer("1")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <any-of>
        <assert-eq>1</assert-eq>
        <error code="XPTY0004"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="annex-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("1")</response-string>
    <description> User defined function # 5 from annex E of F O Specs. </description>
    <created by="XML Query Working Group" on="2006-03-12"/>
    <test>declare namespace eg = "http://example.org"; declare function eg:value-except ( $arg1 as xs:anyAtomicType*, $arg2 as xs:anyAtomicType*) as xs:anyAtomicType* { fn:distinct-values($arg1[not(.=$arg2)]) }; let $arg1 as xs:anyAtomicType := 1 let $arg2 as xs:anyAtomicType := 2 return eg:value-except($arg1,$arg2)</test>
    <result-string>xs:integer("1")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <any-of>
        <assert-eq>1</assert-eq>
        <error code="XPTY0004"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="annex-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> User defined function # 6 from annex E of F O Specs. </description>
    <created by="XML Query Working Group" on="2006-03-12"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace eg = "http://example.org"; declare function eg:index-of-node($sequence as node()*, $srch as node()) as xs:integer* { for $n at $i in $sequence where ($n is $srch) return $i }; let $arg1 := (<element1>some data 1</element1>,<element2>some data 2</element2>) let $arg2 := $arg1[2] return eg:index-of-node($arg1, exactly-one($arg2))]]>
    </test>
    <result-string>xs:integer("2")</result-string>
    <result>
      <assert-eq>2</assert-eq>
    </result>
  </test-case>
  <test-case name="annex-7"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("A StringA StringA String")</response-string>
    <description> User defined function # 7 from annex E of F O Specs. </description>
    <created by="XML Query Working Group" on="2006-03-12"/>
    <test>declare namespace eg = "http://example.org"; declare function eg:string-pad ( $padString as xs:string?, $padCount as xs:integer) as xs:string { fn:string-join((for $i in 1 to $padCount return $padString), "") }; let $arg1 as xs:string := "A String" let $arg2 as xs:integer := 3 return eg:string-pad($arg1,$arg2)</test>
    <result-string>xs:string("A StringA StringA String")</result-string>
    <result>
      <assert-string-value>A StringA StringA String</assert-string-value>
    </result>
  </test-case>
  <test-case name="annex-8"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> User defined function # 8 from annex E of F O Specs. </description>
    <created by="XML Query Working Group" on="2006-03-12"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace eg = "http://example.org"; declare function eg:distinct-nodes-stable ($arg as node()*) as node()* { for $a at $apos in $arg let $before_a := fn:subsequence($arg, 1, $apos - 1) where every $ba in $before_a satisfies not($ba is $a) return $a }; let $arg1 := (<element1>some data 1</element1>,<element2>some data 2</element2>) return eg:distinct-nodes-stable($arg1)]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<element1>some data 1</element1><element2>some data 2</element2>]]>
      </assert-xml>
    </result>
  </test-case>
</test-set>