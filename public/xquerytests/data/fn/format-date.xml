<test-set covers="fn-format-date" name="fn-format-date" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">
  <description>Tests for the format-date() function</description>
  <link document="http://www.w3.org/TR/xpath-functions-11/" idref="func-format-date" type="spec"/>
  <dependency type="spec" value="XP30+ XQ30+"/>
  <test-case name="format-date-001a"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("2003-09-7")</response-string>
    <description>test format-date: basic numeric formats</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="d" select="xs:date(&apos;2003-09-07&apos;)"/>
    </environment>
    <test>format-date($d,"[Y]-[M01]-[D]")</test>
    <result-string>xs:string("2003-09-7")</result-string>
    <result>
      <assert-string-value>2003-09-7</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-001b"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("9-7-2003")</response-string>
    <description>test format-date: basic numeric formats</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="d" select="xs:date(&apos;2003-09-07&apos;)"/>
    </environment>
    <test>format-date($d,"[M]-[D]-[Y]")</test>
    <result-string>xs:string("9-7-2003")</result-string>
    <result>
      <assert-string-value>9-7-2003</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-001c"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("7-9-2003")</response-string>
    <description>test format-date: basic numeric formats</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="d" select="xs:date(&apos;2003-09-07&apos;)"/>
    </environment>
    <test>format-date($d,"[D]-[M]-[Y]")</test>
    <result-string>xs:string("7-9-2003")</result-string>
    <result>
      <assert-string-value>7-9-2003</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-001d"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("7 IX 2003")</response-string>
    <description>test format-date: basic numeric formats</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="d" select="xs:date(&apos;2003-09-07&apos;)"/>
    </environment>
    <test>format-date($d,"[D1] [MI] [Y]")</test>
    <result-string>xs:string("7 IX 2003")</result-string>
    <result>
      <assert-string-value>7 IX 2003</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-001e"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("[2003-09-07]")</response-string>
    <description>test format-date: basic numeric formats</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="d" select="xs:date(&apos;2003-09-07&apos;)"/>
    </environment>
    <test>format-date($d,"[[[Y]-[M01]-[D01]]]")</test>
    <result-string>xs:string("[2003-09-07]")</result-string>
    <result>
      <assert-string-value>[2003-09-07]</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-001f"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("[2003-09-07]")</response-string>
    <description>test format-date: basic numeric formats</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="d" select="xs:date(&apos;2003-09-07&apos;)"/>
    </environment>
    <test>format-date($d,"[[[Y0001]-[M01]-[D01]]]")</test>
    <result-string>xs:string("[2003-09-07]")</result-string>
    <result>
      <assert-string-value>[2003-09-07]</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-001g"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("(2003-09-07)")</response-string>
    <description>test format-date: basic numeric formats</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="d" select="xs:date(&apos;2003-09-07&apos;)"/>
    </environment>
    <test>format-date($d,"([Y01]-[M01]-[D01])")</test>
    <result-string>xs:string("(03-09-07)")</result-string>
    <result>
      <assert-string-value>(03-09-07)</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-005"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("MCMLI MCMLII MCMLIII MCMLIV MCMLV MCMLVI MCMLVII MCMLVIII MCMLIX MCMLX MCMLXI MCMLXII MCMLXIII MCMLXIV MCMLXV MCMLXVI MCMLXVII MCMLXVIII MCMLXIX MCMLXX MCMLXXI MCMLXXII MCMLXXIII MCMLXXIV MCMLXXV MCMLXXVI MCMLXXVII MCMLXXVIII MCMLXXIX MCMLXXX MCMLXXXI MCMLXXXII MCMLXXXIII MCMLXXXIV MCMLXXXV MCMLXXXVI MCMLXXXVII MCMLXXXVIII MCMLXXXIX MCMXC MCMXCI MCMXCII MCMXCIII MCMXCIV MCMXCV MCMXCVI MCMXCVII MCMXCVIII MCMXCIX MM MMI MMII MMIII MMIV MMV MMVI MMVII MMVIII MMIX MMX MMXI MMXII MMXIII MMXIV MMXV MMXVI MMXVII MMXVIII MMXIX MMXX MMXXI MMXXII MMXXIII MMXXIV MMXXV MMXXVI MMXXVII MMXXVIII MMXXIX MMXXX MMXXXI MMXXXII MMXXXIII MMXXXIV MMXXXV MMXXXVI MMXXXVII MMXXXVIII MMXXXIX MMXL MMXLI MMXLII MMXLIII MMXLIV MMXLV MMXLVI MMXLVII MMXLVIII MMXLIX MML")</response-string>
    <description>Test format-date: upper-case roman numerals for year</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="t" select="xs:date(&apos;1950-01-01&apos;)"/>
    </environment>
    <test> string-join( for $i in 1 to 100 return format-date($t + xs:yearMonthDuration(&apos;P1Y&apos;)*$i,
         &apos;[YI]&apos;), &apos; &apos;)</test>
    <result-string>xs:string("MCMLI MCMLII MCMLIII MCMLIV MCMLV MCMLVI MCMLVII MCMLVIII
            MCMLIX MCMLX MCMLXI MCMLXII MCMLXIII MCMLXIV MCMLXV MCMLXVI MCMLXVII MCMLXVIII
            MCMLXIX MCMLXX MCMLXXI MCMLXXII MCMLXXIII MCMLXXIV MCMLXXV MCMLXXVI MCMLXXVII
            MCMLXXVIII MCMLXXIX MCMLXXX MCMLXXXI MCMLXXXII MCMLXXXIII MCMLXXXIV MCMLXXXV
            MCMLXXXVI MCMLXXXVII MCMLXXXVIII MCMLXXXIX MCMXC MCMXCI MCMXCII MCMXCIII
            MCMXCIV MCMXCV MCMXCVI MCMXCVII MCMXCVIII MCMXCIX MM MMI MMII MMIII MMIV MMV
            MMVI MMVII MMVIII MMIX MMX MMXI MMXII MMXIII MMXIV MMXV MMXVI MMXVII
            MMXVIII MMXIX MMXX MMXXI MMXXII MMXXIII MMXXIV MMXXV MMXXVI MMXXVII MMXXVIII
            MMXXIX MMXXX MMXXXI MMXXXII MMXXXIII MMXXXIV MMXXXV MMXXXVI MMXXXVII MMXXXVIII
            MMXXXIX MMXL MMXLI MMXLII MMXLIII MMXLIV MMXLV MMXLVI MMXLVII MMXLVIII MMXLIX
            MML")</result-string>
    <result>
      <assert-string-value normalize-space="true">MCMLI MCMLII MCMLIII MCMLIV MCMLV MCMLVI MCMLVII MCMLVIII
            MCMLIX MCMLX MCMLXI MCMLXII MCMLXIII MCMLXIV MCMLXV MCMLXVI MCMLXVII MCMLXVIII
            MCMLXIX MCMLXX MCMLXXI MCMLXXII MCMLXXIII MCMLXXIV MCMLXXV MCMLXXVI MCMLXXVII
            MCMLXXVIII MCMLXXIX MCMLXXX MCMLXXXI MCMLXXXII MCMLXXXIII MCMLXXXIV MCMLXXXV
            MCMLXXXVI MCMLXXXVII MCMLXXXVIII MCMLXXXIX MCMXC MCMXCI MCMXCII MCMXCIII
            MCMXCIV MCMXCV MCMXCVI MCMXCVII MCMXCVIII MCMXCIX MM MMI MMII MMIII MMIV MMV
            MMVI MMVII MMVIII MMIX MMX MMXI MMXII MMXIII MMXIV MMXV MMXVI MMXVII
            MMXVIII MMXIX MMXX MMXXI MMXXII MMXXIII MMXXIV MMXXV MMXXVI MMXXVII MMXXVIII
            MMXXIX MMXXX MMXXXI MMXXXII MMXXXIII MMXXXIV MMXXXV MMXXXVI MMXXXVII MMXXXVIII
            MMXXXIX MMXL MMXLI MMXLII MMXLIII MMXLIV MMXLV MMXLVI MMXLVII MMXLVIII MMXLIX
            MML</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-006"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("xvii xxiv ccli viii xxxv cmii mxix xxvi liii mlxx xvii 0miv mxxi viii 0mlv xxii xxix mcvi xiii mcxl lvii xxiv cxci viii cxxv xlii clix xxvi ciii cccx xvii xliv clxi viii cxcv dxii xxix xlvi xiii lxxx cvii dxiv xxxi viii dlxv xxii xcix cxvi xiii mdcl xvii xxiv dcci viii xxxv clii lxix xxvi ciii ccxx xvii cliv lxxi viii mcmv xxii xxix mlvi xiii cmxc mvii xxiv mxli viii lxxv xcii mcix xxvi liii mclx xvii xciv ccxi viii cxlv lxii xxix xcvi xiii cxxx lvii lxiv xxxi viii cdxv xxii xlix lxvi xiii 0mmd")</response-string>
    <description>Test format-date: lower-case roman numerals for year (width specifier ignored)</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="t" select="xs:date(&apos;0800-01-01&apos;)"/>
    </environment>
    <test> string-join( for $i in 1 to 100 return format-date($t +
         xs:yearMonthDuration(&apos;P17Y&apos;)*$i, &apos;[Yi,4-4]&apos;), &apos; &apos;)</test>
    <result-string>xs:string("dcccxvii dcccxxxiv dcccli dccclxviii dccclxxxv cmii cmxix
            cmxxxvi cmliii cmlxx cmlxxxvii miv mxxi mxxxviii mlv mlxxii mlxxxix mcvi
            mcxxiii mcxl mclvii mclxxiv mcxci mccviii mccxxv mccxlii mcclix mcclxxvi
            mccxciii mcccx mcccxxvii mcccxliv mccclxi mccclxxviii mcccxcv mcdxii mcdxxix
            mcdxlvi mcdlxiii mcdlxxx mcdxcvii mdxiv mdxxxi mdxlviii mdlxv mdlxxxii mdxcix
            mdcxvi mdcxxxiii mdcl mdclxvii mdclxxxiv mdcci mdccxviii mdccxxxv mdcclii
            mdcclxix mdcclxxxvi mdccciii mdcccxx mdcccxxxvii mdcccliv mdccclxxi
            mdccclxxxviii mcmv mcmxxii mcmxxxix mcmlvi mcmlxxiii mcmxc mmvii mmxxiv mmxli
            mmlviii mmlxxv mmxcii mmcix mmcxxvi mmcxliii mmclx mmclxxvii mmcxciv mmccxi
            mmccxxviii mmccxlv mmcclxii mmcclxxix mmccxcvi mmcccxiii mmcccxxx mmcccxlvii
            mmccclxiv mmccclxxxi mmcccxcviii mmcdxv mmcdxxxii mmcdxlix mmcdlxvi mmcdlxxxiii
            mmd")</result-string>
    <result>
      <assert-string-value normalize-space="true">dcccxvii dcccxxxiv dcccli dccclxviii dccclxxxv cmii cmxix
            cmxxxvi cmliii cmlxx cmlxxxvii miv mxxi mxxxviii mlv mlxxii mlxxxix mcvi
            mcxxiii mcxl mclvii mclxxiv mcxci mccviii mccxxv mccxlii mcclix mcclxxvi
            mccxciii mcccx mcccxxvii mcccxliv mccclxi mccclxxviii mcccxcv mcdxii mcdxxix
            mcdxlvi mcdlxiii mcdlxxx mcdxcvii mdxiv mdxxxi mdxlviii mdlxv mdlxxxii mdxcix
            mdcxvi mdcxxxiii mdcl mdclxvii mdclxxxiv mdcci mdccxviii mdccxxxv mdcclii
            mdcclxix mdcclxxxvi mdccciii mdcccxx mdcccxxxvii mdcccliv mdccclxxi
            mdccclxxxviii mcmv mcmxxii mcmxxxix mcmlvi mcmlxxiii mcmxc mmvii mmxxiv mmxli
            mmlviii mmlxxv mmxcii mmcix mmcxxvi mmcxliii mmclx mmclxxvii mmcxciv mmccxi
            mmccxxviii mmccxlv mmcclxii mmcclxxix mmccxcvi mmcccxiii mmcccxxx mmcccxlvii
            mmccclxiv mmccclxxxi mmcccxcviii mmcdxv mmcdxxxii mmcdxlix mmcdlxvi mmcdlxxxiii
            mmd</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-007a"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("2003-9-7")</response-string>
    <description>Test format-date: numeric formats using Thai digits</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="d" select="xs:date(&apos;2003-09-07&apos;)"/>
    </environment>
    <test>format-date($d,"[Y]-[M]-[D]")</test>
    <result-string>xs:string("--")</result-string>
    <result>
      <assert-string-value>--</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-007b"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("9-7-2003")</response-string>
    <description>Test format-date: numeric formats using Thai digits</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="d" select="xs:date(&apos;2003-09-07&apos;)"/>
    </environment>
    <test>format-date($d,"[M]-[D]-[Y]")</test>
    <result-string>xs:string("--")</result-string>
    <result>
      <assert-string-value>--</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-007c"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("(2003-9-7)")</response-string>
    <description>Test format-date: numeric formats using Thai digits</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="d" select="xs:date(&apos;2003-09-07&apos;)"/>
    </environment>
    <test>format-date($d,"([Y]-[M]-[D])")</test>
    <result-string>xs:string("(--)")</result-string>
    <result>
      <assert-string-value>(--)</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-008a"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("2003-9-7")</response-string>
    <description>Test format-date: numeric formats using Osmanya (non-BMP) digits</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="d" select="xs:date(&apos;2003-09-07&apos;)"/>
    </environment>
    <test>format-date($d,"[Y]-[M]-[D]")</test>
    <result-string>xs:string("--")</result-string>
    <result>
      <assert-string-value>--</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-008b"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("9-7-2003")</response-string>
    <description>Test format-date: numeric formats using Osmanya (non-BMP) digits</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="d" select="xs:date(&apos;2003-09-07&apos;)"/>
    </environment>
    <test>format-date($d,"[M]-[D]-[Y]")</test>
    <result-string>xs:string("--")</result-string>
    <result>
      <assert-string-value>--</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-008c"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("(2003-9-7)")</response-string>
    <description>Test format-date: numeric formats using Osmanya (non-BMP) digits</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="d" select="xs:date(&apos;2003-09-07&apos;)"/>
    </environment>
    <test>format-date($d,"([Y]-[M]-[D])")</test>
    <result-string>xs:string("(--)")</result-string>
    <result>
      <assert-string-value>(--)</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-009"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("[2004-05-01:]"),xs:string("[2004-06-01:]"),xs:string("[2004-07-01:]"),xs:string("[2004-08-01:]"),xs:string("[2004-09-01:]"),xs:string("[2004-10-01:]"),xs:string("[2004-11-01:]"),xs:string("[2004-12-01:]"),xs:string("[2005-01-01:]"),xs:string("[2005-02-01:]"),xs:string("[2005-03-01:]"),xs:string("[2005-04-01:]"),xs:string("[2005-05-01:]"),xs:string("[2005-06-01:]"),xs:string("[2005-07-01:]"),xs:string("[2005-08-01:]"),xs:string("[2005-09-01:]"),xs:string("[2005-10-01:]"),xs:string("[2005-11-01:]"),xs:string("[2005-12-01:]"),xs:string("[2006-01-01:]"),xs:string("[2006-02-01:]"),xs:string("[2006-03-01:]"),xs:string("[2006-04-01:]"),xs:string("[2006-05-01:]"),xs:string("[2006-06-01:]"),xs:string("[2006-07-01:]"),xs:string("[2006-08-01:]"),xs:string("[2006-09-01:]"),xs:string("[2006-10-01:]"),xs:string("[2006-11-01:]"),xs:string("[2006-12-01:]"),xs:string("[2007-01-01:]"),xs:string("[2007-02-01:]"),xs:string("[2007-03-01:]"),xs:string("[2007-04-01:]"),xs:string("[2007-05-01:]"),xs:string("[2007-06-01:]"),xs:string("[2007-07-01:]"),xs:string("[2007-08-01:]"),xs:string("[2007-09-01:]"),xs:string("[2007-10-01:]"),xs:string("[2007-11-01:]"),xs:string("[2007-12-01:]"),xs:string("[2008-01-01:]"),xs:string("[2008-02-01:]"),xs:string("[2008-03-01:]"),xs:string("[2008-04-01:]"))</response-string>
    <description>Test format-date: test format-date: ISO week numbers Specifically, in the ISO calendar the days of the week are numbered from 1 (Monday) to 7 (Sunday), and week 1 in any calendar year is the week (from Monday to Sunday) that includes the first Thursday of that year.</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="t" select="xs:date(&apos;2004-04-01&apos;)"/>
    </environment>
    <test>
        for $i in 1 to 48, $d in $t + xs:yearMonthDuration(&apos;P1M&apos;)*$i 
        return concat("[", $d, ":", format-date($d, &apos;[W]&apos;, (), &apos;ISO&apos;, ()), "]")
      </test>
    <result-string>xs:string("
            [2004-05-01:18] [2004-06-01:23] [2004-07-01:27] [2004-08-01:31] [2004-09-01:36] [2004-10-01:40] [2004-11-01:45] 
            [2004-12-01:49] [2005-01-01:53] [2005-02-01:5] [2005-03-01:9] [2005-04-01:13] [2005-05-01:17] [2005-06-01:22] 
            [2005-07-01:26] [2005-08-01:31] [2005-09-01:35] [2005-10-01:39] [2005-11-01:44] [2005-12-01:48] [2006-01-01:52] 
            [2006-02-01:5] [2006-03-01:9] [2006-04-01:13] [2006-05-01:18] [2006-06-01:22] [2006-07-01:26] [2006-08-01:31] 
            [2006-09-01:35] [2006-10-01:39] [2006-11-01:44] [2006-12-01:48] [2007-01-01:1] [2007-02-01:5] [2007-03-01:9] 
            [2007-04-01:13] [2007-05-01:18] [2007-06-01:22] [2007-07-01:26] [2007-08-01:31] [2007-09-01:35] [2007-10-01:40] 
            [2007-11-01:44] [2007-12-01:48] [2008-01-01:1] [2008-02-01:5] [2008-03-01:9] [2008-04-01:14]
         ")</result-string>
    <result>
      <assert-string-value normalize-space="true">
            [2004-05-01:18] [2004-06-01:23] [2004-07-01:27] [2004-08-01:31] [2004-09-01:36] [2004-10-01:40] [2004-11-01:45] 
            [2004-12-01:49] [2005-01-01:53] [2005-02-01:5] [2005-03-01:9] [2005-04-01:13] [2005-05-01:17] [2005-06-01:22] 
            [2005-07-01:26] [2005-08-01:31] [2005-09-01:35] [2005-10-01:39] [2005-11-01:44] [2005-12-01:48] [2006-01-01:52] 
            [2006-02-01:5] [2006-03-01:9] [2006-04-01:13] [2006-05-01:18] [2006-06-01:22] [2006-07-01:26] [2006-08-01:31] 
            [2006-09-01:35] [2006-10-01:39] [2006-11-01:44] [2006-12-01:48] [2007-01-01:1] [2007-02-01:5] [2007-03-01:9] 
            [2007-04-01:13] [2007-05-01:18] [2007-06-01:22] [2007-07-01:26] [2007-08-01:31] [2007-09-01:35] [2007-10-01:40] 
            [2007-11-01:44] [2007-12-01:48] [2008-01-01:1] [2008-02-01:5] [2008-03-01:9] [2008-04-01:14]
         </assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-010"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("[2004-01-01:thursday]"),xs:string("[2004-02-01:sunday]"),xs:string("[2004-03-01:monday]"),xs:string("[2004-04-01:thursday]"),xs:string("[2004-05-01:saturday]"),xs:string("[2004-06-01:tuesday]"),xs:string("[2004-07-01:thursday]"),xs:string("[2004-08-01:sunday]"),xs:string("[2004-09-01:wednesday]"),xs:string("[2004-10-01:friday]"),xs:string("[2004-11-01:monday]"),xs:string("[2004-12-01:wednesday]"),xs:string("[2005-01-01:saturday]"),xs:string("[2005-02-01:tuesday]"),xs:string("[2005-03-01:tuesday]"),xs:string("[2005-04-01:friday]"),xs:string("[2005-05-01:sunday]"),xs:string("[2005-06-01:wednesday]"),xs:string("[2005-07-01:friday]"),xs:string("[2005-08-01:monday]"),xs:string("[2005-09-01:thursday]"),xs:string("[2005-10-01:saturday]"),xs:string("[2005-11-01:tuesday]"),xs:string("[2005-12-01:thursday]"),xs:string("[2006-01-01:sunday]"),xs:string("[2006-02-01:wednesday]"),xs:string("[2006-03-01:wednesday]"),xs:string("[2006-04-01:saturday]"),xs:string("[2006-05-01:monday]"),xs:string("[2006-06-01:thursday]"),xs:string("[2006-07-01:saturday]"),xs:string("[2006-08-01:tuesday]"),xs:string("[2006-09-01:friday]"),xs:string("[2006-10-01:sunday]"),xs:string("[2006-11-01:wednesday]"),xs:string("[2006-12-01:friday]"),xs:string("[2007-01-01:monday]"),xs:string("[2007-02-01:thursday]"),xs:string("[2007-03-01:thursday]"),xs:string("[2007-04-01:sunday]"),xs:string("[2007-05-01:tuesday]"),xs:string("[2007-06-01:friday]"),xs:string("[2007-07-01:sunday]"),xs:string("[2007-08-01:wednesday]"),xs:string("[2007-09-01:saturday]"),xs:string("[2007-10-01:monday]"),xs:string("[2007-11-01:thursday]"),xs:string("[2007-12-01:saturday]"))</response-string>
    <description>test format-date: ISO day within week Specifically, in the ISO calendar the days of the week are numbered from 1 (Monday) to 7 (Sunday), and week 1 in any calendar year is the week (from Monday to Sunday) that includes the first Thursday of that year.</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <modified by="Michael Kay, Saxonica" change="Use an EQName for the calendar argument" on="2013-06-12"/>
    <environment>
      <param as="xs:date" name="t" select="xs:date(&apos;2003-12-01&apos;)"/>
    </environment>
    <test>for $i in 1 to 48, $d in $t + xs:yearMonthDuration(&apos;P1M&apos;)*$i 
            return concat("[", $d, ":", format-date($d, &apos;[F01]&apos;, (), &apos;Q{}ISO&apos;, ()), &apos;]&apos;)
      </test>
    <result-string>xs:string("
            [2004-01-01:04] [2004-02-01:07] [2004-03-01:01] [2004-04-01:04] [2004-05-01:06] [2004-06-01:02] 
            [2004-07-01:04] [2004-08-01:07] [2004-09-01:03] [2004-10-01:05] [2004-11-01:01] [2004-12-01:03] 
            [2005-01-01:06] [2005-02-01:02] [2005-03-01:02] [2005-04-01:05] [2005-05-01:07] [2005-06-01:03] 
            [2005-07-01:05] [2005-08-01:01] [2005-09-01:04] [2005-10-01:06] [2005-11-01:02] [2005-12-01:04] 
            [2006-01-01:07] [2006-02-01:03] [2006-03-01:03] [2006-04-01:06] [2006-05-01:01] [2006-06-01:04] 
            [2006-07-01:06] [2006-08-01:02] [2006-09-01:05] [2006-10-01:07] [2006-11-01:03] [2006-12-01:05] 
            [2007-01-01:01] [2007-02-01:04] [2007-03-01:04] [2007-04-01:07] [2007-05-01:02] [2007-06-01:05] 
            [2007-07-01:07] [2007-08-01:03] [2007-09-01:06] [2007-10-01:01] [2007-11-01:04] [2007-12-01:06]             
         ")</result-string>
    <result>
      <assert-string-value normalize-space="true">
            [2004-01-01:04] [2004-02-01:07] [2004-03-01:01] [2004-04-01:04] [2004-05-01:06] [2004-06-01:02] 
            [2004-07-01:04] [2004-08-01:07] [2004-09-01:03] [2004-10-01:05] [2004-11-01:01] [2004-12-01:03] 
            [2005-01-01:06] [2005-02-01:02] [2005-03-01:02] [2005-04-01:05] [2005-05-01:07] [2005-06-01:03] 
            [2005-07-01:05] [2005-08-01:01] [2005-09-01:04] [2005-10-01:06] [2005-11-01:02] [2005-12-01:04] 
            [2006-01-01:07] [2006-02-01:03] [2006-03-01:03] [2006-04-01:06] [2006-05-01:01] [2006-06-01:04] 
            [2006-07-01:06] [2006-08-01:02] [2006-09-01:05] [2006-10-01:07] [2006-11-01:03] [2006-12-01:05] 
            [2007-01-01:01] [2007-02-01:04] [2007-03-01:04] [2007-04-01:07] [2007-05-01:02] [2007-06-01:05] 
            [2007-07-01:07] [2007-08-01:03] [2007-09-01:06] [2007-10-01:01] [2007-11-01:04] [2007-12-01:06]             
         </assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-011"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("[2005-12-04:]"),xs:string("[2005-12-07:]"),xs:string("[2005-12-10:]"),xs:string("[2005-12-13:]"),xs:string("[2005-12-16:]"),xs:string("[2005-12-19:]"),xs:string("[2005-12-22:]"),xs:string("[2005-12-25:]"),xs:string("[2005-12-28:]"),xs:string("[2005-12-31:]"),xs:string("[2006-01-03:]"),xs:string("[2006-01-06:]"),xs:string("[2006-01-09:]"),xs:string("[2006-01-12:]"),xs:string("[2006-01-15:]"),xs:string("[2006-01-18:]"),xs:string("[2006-01-21:]"),xs:string("[2006-01-24:]"),xs:string("[2006-01-27:]"),xs:string("[2006-01-30:]"),xs:string("[2006-02-02:]"),xs:string("[2006-02-05:]"),xs:string("[2006-02-08:]"),xs:string("[2006-02-11:]"),xs:string("[2006-02-14:]"),xs:string("[2006-02-17:]"),xs:string("[2006-02-20:]"),xs:string("[2006-02-23:]"),xs:string("[2006-02-26:]"),xs:string("[2006-03-01:]"),xs:string("[2006-03-04:]"),xs:string("[2006-03-07:]"),xs:string("[2006-03-10:]"),xs:string("[2006-03-13:]"),xs:string("[2006-03-16:]"),xs:string("[2006-03-19:]"),xs:string("[2006-03-22:]"),xs:string("[2006-03-25:]"),xs:string("[2006-03-28:]"),xs:string("[2006-03-31:]"),xs:string("[2006-04-03:]"),xs:string("[2006-04-06:]"),xs:string("[2006-04-09:]"),xs:string("[2006-04-12:]"),xs:string("[2006-04-15:]"),xs:string("[2006-04-18:]"),xs:string("[2006-04-21:]"),xs:string("[2006-04-24:]"))</response-string>
    <description>test format-date: ISO week number within month -- Specifically, in the ISO calendar the days of the week are numbered from 1 (Monday) to 7 (Sunday), and week 1 in any calendar year is the week (from Monday to Sunday) that includes the first Thursday of that year.</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="t" select="xs:date(&apos;2005-12-01&apos;)"/>
    </environment>
    <test>
        for $i in 1 to 48, $d in $t + xs:dayTimeDuration(&apos;P3D&apos;)*$i 
        return concat("[", $d, ":", format-date($d, &apos;[w]&apos;, (), &apos;ISO&apos;, ()), &apos;]&apos;)</test>
    <result-string>xs:string("
            [2005-12-04:1] [2005-12-07:2] [2005-12-10:2] [2005-12-13:3] [2005-12-16:3] [2005-12-19:4] [2005-12-22:4] 
            [2005-12-25:4] [2005-12-28:5] [2005-12-31:5] [2006-01-03:1] [2006-01-06:1] [2006-01-09:2] [2006-01-12:2] 
            [2006-01-15:2] [2006-01-18:3] [2006-01-21:3] [2006-01-24:4] [2006-01-27:4] [2006-01-30:5] [2006-02-02:1] 
            [2006-02-05:1] [2006-02-08:2] [2006-02-11:2] [2006-02-14:3] [2006-02-17:3] [2006-02-20:4] [2006-02-23:4] 
            [2006-02-26:4] [2006-03-01:1] [2006-03-04:1] [2006-03-07:2] [2006-03-10:2] [2006-03-13:3] [2006-03-16:3] 
            [2006-03-19:3] [2006-03-22:4] [2006-03-25:4] [2006-03-28:5] [2006-03-31:5] [2006-04-03:1] [2006-04-06:1] 
            [2006-04-09:1] [2006-04-12:2] [2006-04-15:2] [2006-04-18:3] [2006-04-21:3] [2006-04-24:4]            
         ")</result-string>
    <result>
      <assert-string-value normalize-space="true">
            [2005-12-04:1] [2005-12-07:2] [2005-12-10:2] [2005-12-13:3] [2005-12-16:3] [2005-12-19:4] [2005-12-22:4] 
            [2005-12-25:4] [2005-12-28:5] [2005-12-31:5] [2006-01-03:1] [2006-01-06:1] [2006-01-09:2] [2006-01-12:2] 
            [2006-01-15:2] [2006-01-18:3] [2006-01-21:3] [2006-01-24:4] [2006-01-27:4] [2006-01-30:5] [2006-02-02:1] 
            [2006-02-05:1] [2006-02-08:2] [2006-02-11:2] [2006-02-14:3] [2006-02-17:3] [2006-02-20:4] [2006-02-23:4] 
            [2006-02-26:4] [2006-03-01:1] [2006-03-04:1] [2006-03-07:2] [2006-03-10:2] [2006-03-13:3] [2006-03-16:3] 
            [2006-03-19:3] [2006-03-22:4] [2006-03-25:4] [2006-03-28:5] [2006-03-31:5] [2006-04-03:1] [2006-04-06:1] 
            [2006-04-09:1] [2006-04-12:2] [2006-04-15:2] [2006-04-18:3] [2006-04-21:3] [2006-04-24:4]            
         </assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-013a"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("0985")</response-string>
    <description>test format-date(): effect of width specifiers</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="t" select="xs:date(&apos;0985-03-01&apos;)"/>
    </environment>
    <test>format-date($t, &apos;[Y,4-4]&apos;)</test>
    <result-string>xs:string("0985")</result-string>
    <result>
      <assert-string-value>0985</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-013b"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("985")</response-string>
    <description>test format-date(): effect of width specifiers</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="t" select="xs:date(&apos;0985-03-01&apos;)"/>
    </environment>
    <test>format-date($t, &apos;[Y,3-4]&apos;)</test>
    <result-string>xs:string("985")</result-string>
    <result>
      <assert-string-value>985</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-013c"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("985")</response-string>
    <description>test format-date(): effect of width specifiers</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="t" select="xs:date(&apos;0985-03-01&apos;)"/>
    </environment>
    <test>format-date($t, &apos;[Y,2-5]&apos;)</test>
    <result-string>xs:string("985")</result-string>
    <result>
      <assert-string-value>985</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-013d"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("85")</response-string>
    <description>test format-date(): effect of width specifiers</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="t" select="xs:date(&apos;0985-03-01&apos;)"/>
    </environment>
    <test>format-date($t, &apos;[Y,2-2]&apos;)</test>
    <result-string>xs:string("85")</result-string>
    <result>
      <assert-string-value>85</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-013e"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("985")</response-string>
    <description>test format-date(): effect of width specifiers</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="t" select="xs:date(&apos;0985-03-01&apos;)"/>
    </environment>
    <test>format-date($t, &apos;[Y,2-*]&apos;)</test>
    <result-string>xs:string("985")</result-string>
    <result>
      <assert-string-value>985</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-013f"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("985")</response-string>
    <description>test format-date(): effect of width specifiers</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="t" select="xs:date(&apos;0985-03-01&apos;)"/>
    </environment>
    <test>format-date($t, &apos;[Y,*-4]&apos;)</test>
    <result-string>xs:string("985")</result-string>
    <result>
      <assert-string-value>985</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-013g"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("985")</response-string>
    <description>test format-date(): effect of width specifiers</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="t" select="xs:date(&apos;0985-03-01&apos;)"/>
    </environment>
    <test>format-date($t, &apos;[Y,3]&apos;)</test>
    <result-string>xs:string("985")</result-string>
    <result>
      <assert-string-value>985</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-013h"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("0003")</response-string>
    <description>test format-date(): effect of width specifiers</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="t" select="xs:date(&apos;0985-03-01&apos;)"/>
    </environment>
    <test>format-date($t, &apos;[M,4-4]&apos;)</test>
    <result-string>xs:string("0003")</result-string>
    <result>
      <assert-string-value>0003</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-013i"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("3")</response-string>
    <description>test format-date(): effect of width specifiers</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="t" select="xs:date(&apos;0985-03-01&apos;)"/>
    </environment>
    <test>format-date($t, &apos;[M,1-4]&apos;)</test>
    <result-string>xs:string("3")</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-013j"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("03")</response-string>
    <description>test format-date(): effect of width specifiers</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="t" select="xs:date(&apos;0985-03-01&apos;)"/>
    </environment>
    <test>format-date($t, &apos;[M,2-5]&apos;)</test>
    <result-string>xs:string("03")</result-string>
    <result>
      <assert-string-value>03</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-013k"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("03")</response-string>
    <description>test format-date(): effect of width specifiers</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="t" select="xs:date(&apos;0985-03-01&apos;)"/>
    </environment>
    <test>format-date($t, &apos;[M,2-2]&apos;)</test>
    <result-string>xs:string("03")</result-string>
    <result>
      <assert-string-value>03</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-013L"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("3")</response-string>
    <description>test format-date(): effect of width specifiers</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="t" select="xs:date(&apos;0985-03-01&apos;)"/>
    </environment>
    <test>format-date($t, &apos;[M,1-*]&apos;)</test>
    <result-string>xs:string("3")</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-013m"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("3")</response-string>
    <description>test format-date(): effect of width specifiers</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="t" select="xs:date(&apos;0985-03-01&apos;)"/>
    </environment>
    <test>format-date($t, &apos;[M,*-2]&apos;)</test>
    <result-string>xs:string("3")</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-013n"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("003")</response-string>
    <description>test format-date(): effect of width specifiers</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="t" select="xs:date(&apos;0985-03-01&apos;)"/>
    </environment>
    <test>format-date($t, &apos;[M,3]&apos;)</test>
    <result-string>xs:string("003")</result-string>
    <result>
      <assert-string-value>003</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-014"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description>test format-date(): timezones in +nn:nn notation</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <modified by="Michael Kay, Saxonica" change="modify GMT+0 representation" on="2012-07-06"/>
    <environment>
      <param as="xs:date" name="t" select="xs:date(&apos;1985-03-01Z&apos;)"/>
    </environment>
    <test>string-join( for $z in -28 to +28 return format-date(adjust-date-to-timezone($t,
         $z*xs:dayTimeDuration(&apos;PT30M&apos;)), &apos;[Z]&apos;), &apos; &apos;)</test>
    <result-string>xs:string("-14:00 -13:30 -13:00 -12:30 -12:00 -11:30 -11:00 -10:30 -10:00
            -09:30 -09:00 -08:30 -08:00 -07:30 -07:00 -06:30 -06:00 -05:30 -05:00 -04:30
            -04:00 -03:30 -03:00 -02:30 -02:00 -01:30 -01:00 -00:30 +00:00 +00:30 +01:00
            +01:30 +02:00 +02:30 +03:00 +03:30 +04:00 +04:30 +05:00 +05:30 +06:00 +06:30
            +07:00 +07:30 +08:00 +08:30 +09:00 +09:30 +10:00 +10:30 +11:00 +11:30 +12:00
            +12:30 +13:00 +13:30 +14:00")</result-string>
    <result>
      <assert-string-value normalize-space="true">-14:00 -13:30 -13:00 -12:30 -12:00 -11:30 -11:00 -10:30 -10:00
            -09:30 -09:00 -08:30 -08:00 -07:30 -07:00 -06:30 -06:00 -05:30 -05:00 -04:30
            -04:00 -03:30 -03:00 -02:30 -02:00 -01:30 -01:00 -00:30 +00:00 +00:30 +01:00
            +01:30 +02:00 +02:30 +03:00 +03:30 +04:00 +04:30 +05:00 +05:30 +06:00 +06:30
            +07:00 +07:30 +08:00 +08:30 +09:00 +09:30 +10:00 +10:30 +11:00 +11:30 +12:00
            +12:30 +13:00 +13:30 +14:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-015"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description>test format-date(): timezones in GMT+x notation</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <modified by="Michael Kay" change="see bug 14874" on="2012-05-18"/>
    <modified by="Michael Kay, Saxonica" change="modify GMT+0 representation" on="2012-07-06"/>
    <environment>
      <param as="xs:date" name="t" select="xs:date(&apos;1985-03-01Z&apos;)"/>
    </environment>
    <test>string-join( for $z in -28 to +28 return format-date(adjust-date-to-timezone($t,
         $z*xs:dayTimeDuration(&apos;PT30M&apos;)), &apos;[z0]&apos;), &apos;; &apos;)</test>
    <result-string>xs:string("GMT-14; GMT-13:30; GMT-13; GMT-12:30; GMT-12; GMT-11:30; GMT-11;
            GMT-10:30; GMT-10; GMT-9:30; GMT-9; GMT-8:30; GMT-8; GMT-7:30; GMT-7; GMT-6:30; GMT-6;
            GMT-5:30; GMT-5; GMT-4:30; GMT-4; GMT-3:30; GMT-3; GMT-2:30; GMT-2; GMT-1:30; GMT-1;
            GMT-0:30; GMT+0; GMT+0:30; GMT+1; GMT+1:30; GMT+2; GMT+2:30; GMT+3; GMT+3:30; GMT+4;
            GMT+4:30; GMT+5; GMT+5:30; GMT+6; GMT+6:30; GMT+7; GMT+7:30; GMT+8; GMT+8:30; GMT+9;
            GMT+9:30; GMT+10; GMT+10:30; GMT+11; GMT+11:30; GMT+12; GMT+12:30; GMT+13; GMT+13:30;
            GMT+14")</result-string>
    <result>
      <assert-string-value normalize-space="true">GMT-14; GMT-13:30; GMT-13; GMT-12:30; GMT-12; GMT-11:30; GMT-11;
            GMT-10:30; GMT-10; GMT-9:30; GMT-9; GMT-8:30; GMT-8; GMT-7:30; GMT-7; GMT-6:30; GMT-6;
            GMT-5:30; GMT-5; GMT-4:30; GMT-4; GMT-3:30; GMT-3; GMT-2:30; GMT-2; GMT-1:30; GMT-1;
            GMT-0:30; GMT+0; GMT+0:30; GMT+1; GMT+1:30; GMT+2; GMT+2:30; GMT+3; GMT+3:30; GMT+4;
            GMT+4:30; GMT+5; GMT+5:30; GMT+6; GMT+6:30; GMT+7; GMT+7:30; GMT+8; GMT+8:30; GMT+9;
            GMT+9:30; GMT+10; GMT+10:30; GMT+11; GMT+11:30; GMT+12; GMT+12:30; GMT+13; GMT+13:30;
            GMT+14</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-016"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description>test format-date(): timezones in GMT+x notation</description>
    <created by="Michael Kay, Saxonica" on="2012-05-18"/>
    <modified by="Michael Kay, Saxonica" change="modify GMT+0 representation" on="2012-07-06"/>
    <environment>
      <param as="xs:date" name="t" select="xs:date(&apos;1985-03-01Z&apos;)"/>
    </environment>
    <test>string-join( for $z in -28 to +28 return format-date(adjust-date-to-timezone($t,
         $z*xs:dayTimeDuration(&apos;PT30M&apos;)), &apos;[z]&apos;), &apos;; &apos;)</test>
    <result-string>xs:string("
         	GMT-14:00; GMT-13:30; GMT-13:00; GMT-12:30; GMT-12:00; GMT-11:30; GMT-11:00;
			GMT-10:30; GMT-10:00; GMT-09:30; GMT-09:00; GMT-08:30; GMT-08:00; GMT-07:30;
			GMT-07:00; GMT-06:30; GMT-06:00; GMT-05:30; GMT-05:00; GMT-04:30; GMT-04:00;
			GMT-03:30; GMT-03:00; GMT-02:30; GMT-02:00; GMT-01:30; GMT-01:00; GMT-00:30;
			GMT+00:00; GMT+00:30; GMT+01:00; GMT+01:30; GMT+02:00; GMT+02:30; GMT+03:00;
			GMT+03:30; GMT+04:00; GMT+04:30; GMT+05:00; GMT+05:30; GMT+06:00; GMT+06:30;
			GMT+07:00; GMT+07:30; GMT+08:00; GMT+08:30; GMT+09:00; GMT+09:30; GMT+10:00;
			GMT+10:30; GMT+11:00; GMT+11:30; GMT+12:00; GMT+12:30; GMT+13:00; GMT+13:30;
			GMT+14:00
		 ")</result-string>
    <result>
      <assert-string-value normalize-space="true">
         	GMT-14:00; GMT-13:30; GMT-13:00; GMT-12:30; GMT-12:00; GMT-11:30; GMT-11:00;
			GMT-10:30; GMT-10:00; GMT-09:30; GMT-09:00; GMT-08:30; GMT-08:00; GMT-07:30;
			GMT-07:00; GMT-06:30; GMT-06:00; GMT-05:30; GMT-05:00; GMT-04:30; GMT-04:00;
			GMT-03:30; GMT-03:00; GMT-02:30; GMT-02:00; GMT-01:30; GMT-01:00; GMT-00:30;
			GMT+00:00; GMT+00:30; GMT+01:00; GMT+01:30; GMT+02:00; GMT+02:30; GMT+03:00;
			GMT+03:30; GMT+04:00; GMT+04:30; GMT+05:00; GMT+05:30; GMT+06:00; GMT+06:30;
			GMT+07:00; GMT+07:30; GMT+08:00; GMT+08:30; GMT+09:00; GMT+09:30; GMT+10:00;
			GMT+10:30; GMT+11:00; GMT+11:30; GMT+12:00; GMT+12:30; GMT+13:00; GMT+13:30;
			GMT+14:00
		 </assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-017"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description>test format-date(): timezones in military notation</description>
    <created by="Michael Kay, Saxonica" on="2012-05-18"/>
    <environment>
      <param as="xs:date" name="t" select="xs:date(&apos;1985-03-01Z&apos;)"/>
    </environment>
    <test>string-join( for $z in -12 to +12 return format-date(adjust-date-to-timezone($t,
         $z*xs:dayTimeDuration(&apos;PT1H&apos;)), &apos;[ZZ]&apos;), &apos; &apos;)</test>
    <result-string>xs:string("
         	Y X W V U T S R Q P O N Z A B C D E F G H I K L M
		 ")</result-string>
    <result>
      <assert-string-value normalize-space="true">
         	Y X W V U T S R Q P O N Z A B C D E F G H I K L M
		 </assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-018"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("")</response-string>
    <description>test format-date(): timezone-less date in military notation</description>
    <created by="Michael Kay, Saxonica" on="2012-05-18"/>
    <environment>
      <param as="xs:date" name="t" select="xs:date(&apos;1985-03-01Z&apos;)"/>
    </environment>
    <test>format-date(xs:date(&apos;1987-12-13&apos;), &apos;[ZZ]&apos;)</test>
    <result-string>xs:string("J")</result-string>
    <result>
      <assert-string-value>J</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-019"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("")</response-string>
    <description>test format-date(): non-integral timezone in military notation</description>
    <created by="Michael Kay, Saxonica" on="2012-05-18"/>
    <test>format-date(xs:date(&apos;1987-12-13+05:30&apos;), &apos;[ZZ]&apos;)</test>
    <result-string>xs:string("+05:30")</result-string>
    <result>
      <assert-string-value>+05:30</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-020"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("")</response-string>
    <description>test format-date(): extreme timezone in military notation</description>
    <created by="Michael Kay, Saxonica" on="2012-05-18"/>
    <test>format-date(xs:date(&apos;1987-12-13+13:00&apos;), &apos;[ZZ]&apos;)</test>
    <result-string>xs:string("+13:00")</result-string>
    <result>
      <assert-string-value>+13:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-021"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description>test format-date(): timezones with an alternate separator</description>
    <created by="Michael Kay, Saxonica" on="2012-05-18"/>
    <environment>
      <param as="xs:date" name="t" select="xs:date(&apos;1985-03-01Z&apos;)"/>
    </environment>
    <test>string-join( for $z in -28 to +28 return format-date(adjust-date-to-timezone($t,
         $z*xs:dayTimeDuration(&apos;PT30M&apos;)), &apos;[z00~00]&apos;), &apos;; &apos;)</test>
    <result-string>xs:string("
         	GMT-14~00; GMT-13~30; GMT-13~00; GMT-12~30; GMT-12~00; GMT-11~30; GMT-11~00; GMT-10~30; 
         	GMT-10~00; GMT-09~30; GMT-09~00; GMT-08~30; GMT-08~00; GMT-07~30; GMT-07~00; GMT-06~30; 
         	GMT-06~00; GMT-05~30; GMT-05~00; GMT-04~30; GMT-04~00; GMT-03~30; GMT-03~00; GMT-02~30; 
         	GMT-02~00; GMT-01~30; GMT-01~00; GMT-00~30; GMT+00~00; GMT+00~30; GMT+01~00; GMT+01~30; 
         	GMT+02~00; GMT+02~30; GMT+03~00; GMT+03~30; GMT+04~00; GMT+04~30; GMT+05~00; GMT+05~30; 
         	GMT+06~00; GMT+06~30; GMT+07~00; GMT+07~30; GMT+08~00; GMT+08~30; GMT+09~00; GMT+09~30; 
         	GMT+10~00; GMT+10~30; GMT+11~00; GMT+11~30; GMT+12~00; GMT+12~30; GMT+13~00; GMT+13~30; 
         	GMT+14~00
		 ")</result-string>
    <result>
      <assert-string-value normalize-space="true">
         	GMT-14~00; GMT-13~30; GMT-13~00; GMT-12~30; GMT-12~00; GMT-11~30; GMT-11~00; GMT-10~30; 
         	GMT-10~00; GMT-09~30; GMT-09~00; GMT-08~30; GMT-08~00; GMT-07~30; GMT-07~00; GMT-06~30; 
         	GMT-06~00; GMT-05~30; GMT-05~00; GMT-04~30; GMT-04~00; GMT-03~30; GMT-03~00; GMT-02~30; 
         	GMT-02~00; GMT-01~30; GMT-01~00; GMT-00~30; GMT+00~00; GMT+00~30; GMT+01~00; GMT+01~30; 
         	GMT+02~00; GMT+02~30; GMT+03~00; GMT+03~30; GMT+04~00; GMT+04~30; GMT+05~00; GMT+05~30; 
         	GMT+06~00; GMT+06~30; GMT+07~00; GMT+07~30; GMT+08~00; GMT+08~30; GMT+09~00; GMT+09~30; 
         	GMT+10~00; GMT+10~30; GMT+11~00; GMT+11~30; GMT+12~00; GMT+12~30; GMT+13~00; GMT+13~30; 
         	GMT+14~00
		 </assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-022"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("")</response-string>
    <description>test format-date(): timezones with non-ASCII digits</description>
    <created by="Michael Kay, Saxonica" on="2012-05-18"/>
    <environment>
      <param as="xs:date" name="t" select="xs:date(&apos;1985-03-01Z&apos;)"/>
    </environment>
    <test>format-date(xs:date(&apos;2012-05-18+05:30&apos;), &apos;[Z:]&apos;)</test>
    <result-string>xs:string("+:")</result-string>
    <result>
      <assert-string-value>+:</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-023"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description>test format-date(): timezones with three-digit format</description>
    <created by="Michael Kay, Saxonica" on="2012-05-18"/>
    <environment>
      <param as="xs:date" name="t" select="xs:date(&apos;1985-03-01Z&apos;)"/>
    </environment>
    <test>string-join( for $z in -28 to +28 return format-date(adjust-date-to-timezone($t,
         $z*xs:dayTimeDuration(&apos;PT30M&apos;)), &apos;[Z0:01]&apos;), &apos;; &apos;)</test>
    <result-string>xs:string("
         	-14:00; -13:30; -13:00; -12:30; -12:00; -11:30; -11:00; -10:30; -10:00; -9:30; -9:00;
         	-8:30; -8:00; -7:30; -7:00; -6:30; -6:00; -5:30; -5:00; -4:30; -4:00; -3:30; -3:00;
         	-2:30; -2:00; -1:30; -1:00; -0:30; +0:00; +0:30; +1:00; +1:30; +2:00; +2:30; +3:00;
         	+3:30; +4:00; +4:30; +5:00; +5:30; +6:00; +6:30; +7:00; +7:30; +8:00; +8:30; +9:00;
         	+9:30; +10:00; +10:30; +11:00; +11:30; +12:00; +12:30; +13:00; +13:30; +14:00
		 ")</result-string>
    <result>
      <assert-string-value normalize-space="true">
         	-14:00; -13:30; -13:00; -12:30; -12:00; -11:30; -11:00; -10:30; -10:00; -9:30; -9:00;
         	-8:30; -8:00; -7:30; -7:00; -6:30; -6:00; -5:30; -5:00; -4:30; -4:00; -3:30; -3:00;
         	-2:30; -2:00; -1:30; -1:00; -0:30; +0:00; +0:30; +1:00; +1:30; +2:00; +2:30; +3:00;
         	+3:30; +4:00; +4:30; +5:00; +5:30; +6:00; +6:30; +7:00; +7:30; +8:00; +8:30; +9:00;
         	+9:30; +10:00; +10:30; +11:00; +11:30; +12:00; +12:30; +13:00; +13:30; +14:00
		 </assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-024"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description>test format-date(): timezones with three-digit format, no separator</description>
    <created by="Michael Kay, Saxonica" on="2012-05-18"/>
    <environment>
      <param as="xs:date" name="t" select="xs:date(&apos;1985-03-01Z&apos;)"/>
    </environment>
    <test>string-join( for $z in -28 to +28 return format-date(adjust-date-to-timezone($t,
         $z*xs:dayTimeDuration(&apos;PT30M&apos;)), &apos;[Z999]&apos;), &apos;; &apos;)</test>
    <result-string>xs:string("
         	-1400; -1330; -1300; -1230; -1200; -1130; -1100; -1030; -1000; -930; -900; -830; 
         	-800; -730; -700; -630; -600; -530; -500; -430; -400; -330; -300; -230; -200; 
         	-130; -100; -030; +000; +030; +100; +130; +200; +230; +300; +330; +400; +430; 
         	+500; +530; +600; +630; +700; +730; +800; +830; +900; +930; +1000; +1030; +1100; 
         	+1130; +1200; +1230; +1300; +1330; +1400
		 ")</result-string>
    <result>
      <assert-string-value normalize-space="true">
         	-1400; -1330; -1300; -1230; -1200; -1130; -1100; -1030; -1000; -930; -900; -830; 
         	-800; -730; -700; -630; -600; -530; -500; -430; -400; -330; -300; -230; -200; 
         	-130; -100; -030; +000; +030; +100; +130; +200; +230; +300; +330; +400; +430; 
         	+500; +530; +600; +630; +700; +730; +800; +830; +900; +930; +1000; +1030; +1100; 
         	+1130; +1200; +1230; +1300; +1330; +1400
		 </assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-025"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description>test format-date(): timezones with two-digit format, no separator</description>
    <created by="Michael Kay, Saxonica" on="2012-05-18"/>
    <modified by="O&apos;Neil Delpratt, Saxonica" change="bug fix for 17285" on="2012-10-08"/>
    <environment>
      <param as="xs:date" name="t" select="xs:date(&apos;1985-03-01Z&apos;)"/>
    </environment>
    <test>string-join( for $z in -28 to +28 return format-date(adjust-date-to-timezone($t,
         $z*xs:dayTimeDuration(&apos;PT30M&apos;)), &apos;[Z99]&apos;), &apos;; &apos;)</test>
    <result-string>xs:string("
         	-14; -13:30; -13; -12:30; -12; -11:30; -11; -10:30; -10; -09:30; -09; -08:30; -08;
         	-07:30; -07; -06:30; -06; -05:30; -05; -04:30; -04; -03:30; -03; -02:30; -02; -01:30;
         	-01; -00:30; +00; +00:30; +01; +01:30; +02; +02:30; +03; +03:30; +04; +04:30; +05;
         	+05:30; +06; +06:30; +07; +07:30; +08; +08:30; +09; +09:30; +10; +10:30; +11; +11:30;
         	+12; +12:30; +13; +13:30; +14
		 ")</result-string>
    <result>
      <assert-string-value normalize-space="true">
         	-14; -13:30; -13; -12:30; -12; -11:30; -11; -10:30; -10; -09:30; -09; -08:30; -08;
         	-07:30; -07; -06:30; -06; -05:30; -05; -04:30; -04; -03:30; -03; -02:30; -02; -01:30;
         	-01; -00:30; +00; +00:30; +01; +01:30; +02; +02:30; +03; +03:30; +04; +04:30; +05;
         	+05:30; +06; +06:30; +07; +07:30; +08; +08:30; +09; +09:30; +10; +10:30; +11; +11:30;
         	+12; +12:30; +13; +13:30; +14
		 </assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-026"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description>test format-date(): timezones with one-digit format, no separator, t modifier</description>
    <created by="Michael Kay, Saxonica" on="2012-05-18"/>
    <modified by="O&apos;Neil Delpratt, Saxonica" change="bug fix for 17285" on="2012-10-08"/>
    <environment>
      <param as="xs:date" name="t" select="xs:date(&apos;1985-03-01Z&apos;)"/>
    </environment>
    <test>string-join( for $z in -28 to +28 return format-date(adjust-date-to-timezone($t,
         $z*xs:dayTimeDuration(&apos;PT30M&apos;)), &apos;[Z0t]&apos;), &apos;; &apos;)</test>
    <result-string>xs:string("
         	-14; -13:30; -13; -12:30; -12; -11:30; -11; -10:30; -10; -9:30; -9; -8:30; -8;
         	-7:30; -7; -6:30; -6; -5:30; -5; -4:30; -4; -3:30; -3; -2:30; -2; -1:30; -1; -0:30;
         	Z; +0:30; +1; +1:30; +2; +2:30; +3; +3:30; +4; +4:30; +5; +5:30; +6; +6:30; +7;
         	+7:30; +8; +8:30; +9; +9:30; +10; +10:30; +11; +11:30; +12; +12:30; +13;
         	+13:30; +14
		 ")</result-string>
    <result>
      <assert-string-value normalize-space="true">
         	-14; -13:30; -13; -12:30; -12; -11:30; -11; -10:30; -10; -9:30; -9; -8:30; -8;
         	-7:30; -7; -6:30; -6; -5:30; -5; -4:30; -4; -3:30; -3; -2:30; -2; -1:30; -1; -0:30;
         	Z; +0:30; +1; +1:30; +2; +2:30; +3; +3:30; +4; +4:30; +5; +5:30; +6; +6:30; +7;
         	+7:30; +8; +8:30; +9; +9:30; +10; +10:30; +11; +11:30; +12; +12:30; +13;
         	+13:30; +14
		 </assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-027"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("")</response-string>
    <description>test format-date(): timezones with astral plane digits</description>
    <created by="Michael Kay, Saxonica" on="2012-05-18"/>
    <environment>
      <param as="xs:date" name="t" select="xs:date(&apos;1985-03-01Z&apos;)"/>
    </environment>
    <test>format-date(xs:date(&apos;2012-05-18+05:30&apos;), &apos;[Z:]&apos;)</test>
    <result-string>xs:string("+:")</result-string>
    <result>
      <assert-string-value>+:</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-801err"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("")</response-string>
    <description>Error XTDE1340 incorrect picture string</description>
    <created by="Anders Berglund" on="2011-07-01"/>
    <test>format-date(current-date(), &apos;[bla]&apos;, &apos;en&apos;, (), ())</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XTDE1340"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOFD1340"))</result-string>
    <result>
      <any-of>
        <error code="XTDE1340"/>
        <error code="FOFD1340"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="format-date-802err"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("")</response-string>
    <description>Error XTDE1350 component in picture string not available in value</description>
    <created by="Anders Berglund" on="2011-07-01"/>
    <test>format-date(current-date(), &apos;[H]&apos;, &apos;en&apos;, (), ())</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XTDE1350"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOFD1350"))</result-string>
    <result>
      <any-of>
        <error code="XTDE1350"/>
        <error code="FOFD1350"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="format-date-803err"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FOFD1350"))</response-string>
    <description>Error XTDE1350 component in picture string not available in value</description>
    <created by="Anders Berglund" on="2011-07-01"/>
    <test>format-date(current-date(), &apos;[h]&apos;, &apos;en&apos;, (), ())</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XTDE1350"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOFD1350"))</result-string>
    <result>
      <any-of>
        <error code="XTDE1350"/>
        <error code="FOFD1350"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="format-date-804err"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("")</response-string>
    <description>Error XTDE1350 component in picture string not available in value</description>
    <created by="Anders Berglund" on="2011-07-01"/>
    <test>format-date(current-date(), &apos;[P]&apos;, &apos;en&apos;, (), ())</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XTDE1350"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOFD1350"))</result-string>
    <result>
      <any-of>
        <error code="XTDE1350"/>
        <error code="FOFD1350"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="format-date-805err"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FOFD1350"))</response-string>
    <description>Error XTDE1350 component in picture string not available in value</description>
    <created by="Anders Berglund" on="2011-07-01"/>
    <test>format-date(current-date(), &apos;[m]&apos;, &apos;en&apos;, (), ())</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XTDE1350"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOFD1350"))</result-string>
    <result>
      <any-of>
        <error code="XTDE1350"/>
        <error code="FOFD1350"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="format-date-806err"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FOFD1350"))</response-string>
    <description>Error XTDE1350 component in picture string not available in value</description>
    <created by="Anders Berglund" on="2011-07-01"/>
    <test>format-date(current-date(), &apos;[s]&apos;, &apos;en&apos;, (), ())</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XTDE1350"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOFD1350"))</result-string>
    <result>
      <any-of>
        <error code="XTDE1350"/>
        <error code="FOFD1350"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="format-date-807err"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("")</response-string>
    <description>Error XTDE1350 component in picture string not available in value</description>
    <created by="Anders Berglund" on="2011-07-01"/>
    <test>format-date(current-date(), &apos;[f]&apos;, &apos;en&apos;, (), ())</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XTDE1350"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOFD1350"))</result-string>
    <result>
      <any-of>
        <error code="XTDE1350"/>
        <error code="FOFD1350"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="format-date-808err"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("")</response-string>
    <description>Error XTDE1340 incorrect picture string</description>
    <created by="Anders Berglund" on="2011-07-01"/>
    <modified by="O&apos;Neil Delpratt" change="Bug fix related to bug #14875: Corrected error code" on="2012-05-22"/>
    <test>format-date(current-date(), &apos;[bla]&apos;, &apos;en&apos;, (), ())</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XTDE1340"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOFD1340"))</result-string>
    <result>
      <any-of>
        <error code="XTDE1340"/>
        <error code="FOFD1340"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="format-date-en101"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("JANUARY"),xs:string("FEBRUARY"),xs:string("MARCH"),xs:string("APRIL"),xs:string("MAY"),xs:string("JUNE"),xs:string("JULY"),xs:string("AUGUST"),xs:string("SEPTEMBER"),xs:string("OCTOBER"),xs:string("NOVEMBER"),xs:string("DECEMBER"))</response-string>
    <description>English month names</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="d" select="xs:date(&apos;2003-12-07&apos;)"/>
    </environment>
    <dependency type="language" value="en"/>
    <test>for $i in 1 to 12 return let $d2 := $d + xs:yearMonthDuration(&apos;P1M&apos;)*$i return
         format-date($d2, &apos;[MN]&apos;, &apos;en&apos;, (), ()) </test>
    <result-string>xs:string("
            JANUARY FEBRUARY MARCH APRIL MAY JUNE JULY AUGUST SEPTEMBER OCTOBER NOVEMBER DECEMBER
         ")</result-string>
    <result>
      <assert-string-value normalize-space="true">
            JANUARY FEBRUARY MARCH APRIL MAY JUNE JULY AUGUST SEPTEMBER OCTOBER NOVEMBER DECEMBER
         </assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-en102"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("january"),xs:string("february"),xs:string("march"),xs:string("april"),xs:string("may"),xs:string("june"),xs:string("july"),xs:string("august"),xs:string("september"),xs:string("october"),xs:string("november"),xs:string("december"))</response-string>
    <description>English month names</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="d" select="xs:date(&apos;2003-12-07&apos;)"/>
    </environment>
    <dependency type="language" value="en"/>
    <test>for $i in 1 to 12 return let $d2 := $d + xs:yearMonthDuration(&apos;P1M&apos;)*$i return
         format-date($d2, &apos;[Mn]&apos;, &apos;en&apos;, (), ()) </test>
    <result-string>xs:string("
            january february march april may june july august september october november december
         ")</result-string>
    <result>
      <assert-string-value normalize-space="true">
            january february march april may june july august september october november december
         </assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-en103"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("January"),xs:string("February"),xs:string("March"),xs:string("April"),xs:string("May"),xs:string("June"),xs:string("July"),xs:string("August"),xs:string("September"),xs:string("October"),xs:string("November"),xs:string("December"))</response-string>
    <description>English month names</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="d" select="xs:date(&apos;2003-12-07&apos;)"/>
    </environment>
    <dependency type="language" value="en"/>
    <test>
        for $i in 1 to 12 
        return let $d2 := $d + xs:yearMonthDuration(&apos;P1M&apos;)*$i 
        return format-date($d2, &apos;[MNn]&apos;, &apos;en&apos;, (), ()) </test>
    <result-string>xs:string("
            January February March April May June July August September October November December
         ")</result-string>
    <result>
      <assert-string-value normalize-space="true">
            January February March April May June July August September October November December
         </assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-en104"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("JANUARY"),xs:string("FEBRUARY"),xs:string("MARCH"),xs:string("APRIL"),xs:string("MAY"),xs:string("JUNE"),xs:string("JULY"),xs:string("AUGUST"),xs:string("SEPTEMBER"),xs:string("OCTOBER"),xs:string("NOVEMBER"),xs:string("DECEMBER"))</response-string>
    <description>English month names</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="d" select="xs:date(&apos;2003-12-07&apos;)"/>
    </environment>
    <dependency type="language" value="en"/>
    <test>
        for $i in 1 to 12 
        return let $d2 := $d + xs:yearMonthDuration(&apos;P1M&apos;)*$i 
        return format-date($d2, &apos;[MN,3-3]&apos;, &apos;en&apos;, (), ()) 
      </test>
    <result-string>xs:string("JAN FEB MAR APR MAY JUN JUL AUG SEP OCT NOV DEC")</result-string>
    <result>
      <assert-string-value normalize-space="true">JAN FEB MAR APR MAY JUN JUL AUG SEP OCT NOV DEC</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-en105"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("january"),xs:string("february"),xs:string("march"),xs:string("april"),xs:string("may"),xs:string("june"),xs:string("july"),xs:string("august"),xs:string("september"),xs:string("october"),xs:string("november"),xs:string("december"))</response-string>
    <description>English month names</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="d" select="xs:date(&apos;2003-12-07&apos;)"/>
    </environment>
    <dependency type="language" value="en"/>
    <test>
        for $i in 1 to 12 
        return let $d2 := $d + xs:yearMonthDuration(&apos;P1M&apos;)*$i 
        return format-date($d2, &apos;[Mn,3-3]&apos;, &apos;en&apos;, (), ()) 
      </test>
    <result-string>xs:string("jan feb mar apr may jun jul aug sep oct nov dec")</result-string>
    <result>
      <assert-string-value normalize-space="true">jan feb mar apr may jun jul aug sep oct nov dec</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-en106"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("January"),xs:string("February"),xs:string("March"),xs:string("April"),xs:string("May"),xs:string("June"),xs:string("July"),xs:string("August"),xs:string("September"),xs:string("October"),xs:string("November"),xs:string("December"))</response-string>
    <description>English month names</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="d" select="xs:date(&apos;2003-12-07&apos;)"/>
    </environment>
    <dependency type="language" value="en"/>
    <test>
        for $i in 1 to 12 
        return let $d2 := $d + xs:yearMonthDuration(&apos;P1M&apos;)*$i 
        return format-date($d2, &apos;[MNn,3-3]&apos;, &apos;en&apos;, (), ()) 
      </test>
    <result-string>xs:string("Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec")</result-string>
    <result>
      <assert-string-value normalize-space="true">Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-en111"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("MONDAY"),xs:string("TUESDAY"),xs:string("WEDNESDAY"),xs:string("THURSDAY"),xs:string("FRIDAY"),xs:string("SATURDAY"),xs:string("SUNDAY"))</response-string>
    <description>English weekday names</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="d" select="xs:date(&apos;2003-12-07&apos;)"/>
    </environment>
    <dependency type="language" value="en"/>
    <test>for $i in 1 to 7 return let $d2 := $d + xs:dayTimeDuration(&apos;P1D&apos;)*$i return
         format-date($d2, &apos;[FN]&apos;, &apos;en&apos;, (), ()) </test>
    <result-string>xs:string("
             MONDAY TUESDAY WEDNESDAY THURSDAY FRIDAY SATURDAY SUNDAY
         ")</result-string>
    <result>
      <assert-string-value normalize-space="true">
             MONDAY TUESDAY WEDNESDAY THURSDAY FRIDAY SATURDAY SUNDAY
         </assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-en112"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("monday"),xs:string("tuesday"),xs:string("wednesday"),xs:string("thursday"),xs:string("friday"),xs:string("saturday"),xs:string("sunday"))</response-string>
    <description>English weekday names</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="d" select="xs:date(&apos;2003-12-07&apos;)"/>
    </environment>
    <dependency type="language" value="en"/>
    <test>for $i in 1 to 7 return let $d2 := $d + xs:dayTimeDuration(&apos;P1D&apos;)*$i return
         format-date($d2, &apos;[Fn]&apos;, &apos;en&apos;, (), ()) </test>
    <result-string>xs:string("
             monday tuesday wednesday thursday friday saturday sunday
         ")</result-string>
    <result>
      <assert-string-value normalize-space="true">
             monday tuesday wednesday thursday friday saturday sunday
         </assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-en113"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("Monday"),xs:string("Tuesday"),xs:string("Wednesday"),xs:string("Thursday"),xs:string("Friday"),xs:string("Saturday"),xs:string("Sunday"))</response-string>
    <description>English weekday names</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="d" select="xs:date(&apos;2003-12-07&apos;)"/>
    </environment>
    <dependency type="language" value="en"/>
    <test>for $i in 1 to 7 return let $d2 := $d + xs:dayTimeDuration(&apos;P1D&apos;)*$i return
         format-date($d2, &apos;[FNn]&apos;, &apos;en&apos;, (), ()) </test>
    <result-string>xs:string("
            Monday Tuesday Wednesday Thursday Friday Saturday Sunday
         ")</result-string>
    <result>
      <assert-string-value normalize-space="true">
            Monday Tuesday Wednesday Thursday Friday Saturday Sunday
         </assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-en114"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("MONDAY"),xs:string("TUESDAY"),xs:string("WEDNESDAY"),xs:string("THURSDAY"),xs:string("FRIDAY"),xs:string("SATURDAY"),xs:string("SUNDAY"))</response-string>
    <description>English weekday names</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="d" select="xs:date(&apos;2003-12-07&apos;)"/>
    </environment>
    <dependency type="language" value="en"/>
    <test>for $i in 1 to 7 return let $d2 := $d + xs:dayTimeDuration(&apos;P1D&apos;)*$i return
         format-date($d2, &apos;[FN,3-3]&apos;, &apos;en&apos;, (), ()) </test>
    <result-string>xs:string("MON TUE WED THU FRI SAT SUN")</result-string>
    <result>
      <assert-string-value>MON TUE WED THU FRI SAT SUN</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-en115"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("monday"),xs:string("tuesday"),xs:string("wednesday"),xs:string("thursday"),xs:string("friday"),xs:string("saturday"),xs:string("sunday"))</response-string>
    <description>English weekday names</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="d" select="xs:date(&apos;2003-12-07&apos;)"/>
    </environment>
    <dependency type="language" value="en"/>
    <test>for $i in 1 to 7 return let $d2 := $d + xs:dayTimeDuration(&apos;P1D&apos;)*$i return
         format-date($d2, &apos;[Fn,3-3]&apos;, &apos;en&apos;, (), ()) </test>
    <result-string>xs:string("mon tue wed thu fri sat sun")</result-string>
    <result>
      <assert-string-value>mon tue wed thu fri sat sun</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-en116"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("Monday"),xs:string("Tuesday"),xs:string("Wednesday"),xs:string("Thursday"),xs:string("Friday"),xs:string("Saturday"),xs:string("Sunday"))</response-string>
    <description>English weekday names</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="d" select="xs:date(&apos;2003-12-07&apos;)"/>
    </environment>
    <dependency type="language" value="en"/>
    <test>for $i in 1 to 7 return let $d2 := $d + xs:dayTimeDuration(&apos;P1D&apos;)*$i return
         format-date($d2, &apos;[FNn,3-3]&apos;, &apos;en&apos;, (), ()) </test>
    <result-string>xs:string("Mon Tue Wed Thu Fri Sat Sun")</result-string>
    <result>
      <assert-string-value>Mon Tue Wed Thu Fri Sat Sun</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-en117"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description>English weekday names, abbreviated, variable length</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="d" select="xs:date(&apos;2003-12-07&apos;)"/>
    </environment>
    <dependency type="language" value="en"/>
    <test>
      	for $i in 1 to 7 
      	return let $d2 := $d + xs:dayTimeDuration(&apos;P1D&apos;)*$i 
      	return let $abb := format-date($d2, &apos;[FNn,3-4]&apos;, &apos;en&apos;, (), ()) 
        return let $expected := (&apos;Mon&apos;, &apos;Tues&apos;, &apos;Weds&apos;, &apos;Thur&apos;, &apos;Fri&apos;, &apos;Sat&apos;, &apos;Sun&apos;) 
        return (
         	substring($abb, 1, 3), 
         	starts-with($expected[$i], $abb) and string-length($abb) le 4 and string-length($abb) ge 3) 
      </test>
    <result-string>xs:string("
            Mon true Tue true Wed true Thu true Fri true Sat true Sun true
         ")</result-string>
    <result>
      <assert-string-value normalize-space="true">
            Mon true Tue true Wed true Thu true Fri true Sat true Sun true
         </assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-en118"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description>English weekday names, abbreviated, variable length</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="d" select="xs:date(&apos;2003-12-07&apos;)"/>
    </environment>
    <dependency type="language" value="en"/>
    <test>for $i in 1 to 7 return let $d2 := $d + xs:dayTimeDuration(&apos;P1D&apos;)*$i return let $abb :=
         format-date($d2, &apos;[FNn,3-5]&apos;, &apos;en&apos;, (), ()) return let $expected := (&apos;Mon&apos;, &apos;Tues&apos;, &apos;Weds&apos;,
         &apos;Thurs&apos;, &apos;Fri&apos;, &apos;Sat&apos;, &apos;Sun&apos;) return (substring($abb, 1, 3), starts-with($expected[$i],
         $abb) and string-length($abb) le 5 and string-length($abb) ge 3) </test>
    <result-string>xs:string("
            Mon true Tue true Wed true Thu true Fri true Sat true Sun true
         ")</result-string>
    <result>
      <assert-string-value normalize-space="true">
            Mon true Tue true Wed true Thu true Fri true Sat true Sun true
         </assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-en121"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("01"),xs:string("02"),xs:string("03"),xs:string("04"),xs:string("05"),xs:string("06"),xs:string("07"),xs:string("08"),xs:string("09"),xs:string("10"),xs:string("11"),xs:string("12"),xs:string("13"),xs:string("14"),xs:string("15"),xs:string("16"),xs:string("17"),xs:string("18"),xs:string("19"),xs:string("20"),xs:string("21"),xs:string("22"),xs:string("23"),xs:string("24"),xs:string("25"),xs:string("26"),xs:string("27"),xs:string("28"),xs:string("29"),xs:string("30"),xs:string("31"))</response-string>
    <description>English ordinal numbers 1-31</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="d" select="xs:date(&apos;2003-12-01&apos;)"/>
    </environment>
    <dependency type="language" value="en"/>
    <test>for $i in 0 to 30 return let $d2 := $d + xs:dayTimeDuration(&apos;P1D&apos;)*$i return
         format-date($d2, &apos;[D1o]&apos;, &apos;en&apos;, (), ()) </test>
    <result-string>xs:string("
            1st 2nd 3rd 4th 5th 6th 7th 8th 9th 10th 11th 12th 13th 14th 15th
            16th 17th 18th 19th 20th 21st 22nd 23rd 24th 25th 26th 27th 28th 29th 30th
            31st
         ")</result-string>
    <result>
      <assert-string-value normalize-space="true">
            1st 2nd 3rd 4th 5th 6th 7th 8th 9th 10th 11th 12th 13th 14th 15th
            16th 17th 18th 19th 20th 21st 22nd 23rd 24th 25th 26th 27th 28th 29th 30th
            31st
         </assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-en122"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("1990"),xs:string("1991"),xs:string("1992"),xs:string("1993"),xs:string("1994"),xs:string("1995"),xs:string("1996"),xs:string("1997"),xs:string("1998"),xs:string("1999"),xs:string("2000"),xs:string("2001"),xs:string("2002"),xs:string("2003"),xs:string("2004"),xs:string("2005"),xs:string("2006"),xs:string("2007"),xs:string("2008"),xs:string("2009"),xs:string("2010"),xs:string("2011"),xs:string("2012"),xs:string("2013"),xs:string("2014"),xs:string("2015"),xs:string("2016"),xs:string("2017"),xs:string("2018"),xs:string("2019"),xs:string("2020"))</response-string>
    <description>English ordinal numbers 1990-2020</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="d" select="xs:date(&apos;1990-12-01&apos;)"/>
    </environment>
    <dependency type="language" value="en"/>
    <test>for $i in 0 to 30 return let $d2 := $d + xs:yearMonthDuration(&apos;P1Y&apos;)*$i return
         format-date($d2, &apos;[Y1o]&apos;, &apos;en&apos;, (), ()) </test>
    <result-string>xs:string("
            1990th 1991st 1992nd 1993rd 1994th 1995th 1996th 1997th 1998th 1999th
            2000th 2001st 2002nd 2003rd 2004th 2005th 2006th 2007th 2008th 2009th 2010th 2011th
            2012th 2013th 2014th 2015th 2016th 2017th 2018th 2019th 2020th
         ")</result-string>
    <result>
      <assert-string-value normalize-space="true">
            1990th 1991st 1992nd 1993rd 1994th 1995th 1996th 1997th 1998th 1999th
            2000th 2001st 2002nd 2003rd 2004th 2005th 2006th 2007th 2008th 2009th 2010th 2011th
            2012th 2013th 2014th 2015th 2016th 2017th 2018th 2019th 2020th
         </assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-en123"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31")</response-string>
    <description>English cardinal words 1-31 upper case</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="d" select="xs:date(&apos;1990-12-01&apos;)"/>
    </environment>
    <dependency type="language" value="en"/>
    <test> string-join( for $i in 0 to 30 return let $d2 := $d + xs:dayTimeDuration(&apos;P1D&apos;)*$i
         return format-date($d2, &apos;[DW]&apos;, &apos;en&apos;, (), ()), &apos; &apos;) </test>
    <result-string>xs:string("
            ONE TWO THREE FOUR FIVE SIX SEVEN EIGHT NINE TEN ELEVEN
            TWELVE THIRTEEN FOURTEEN FIFTEEN SIXTEEN SEVENTEEN EIGHTEEN NINETEEN TWENTY
            TWENTY ONE TWENTY TWO TWENTY THREE TWENTY FOUR TWENTY FIVE TWENTY SIX TWENTY
            SEVEN TWENTY EIGHT TWENTY NINE THIRTY THIRTY ONE
         ")</result-string>
    <result>
      <assert-string-value normalize-space="true">
            ONE TWO THREE FOUR FIVE SIX SEVEN EIGHT NINE TEN ELEVEN
            TWELVE THIRTEEN FOURTEEN FIFTEEN SIXTEEN SEVENTEEN EIGHTEEN NINETEEN TWENTY
            TWENTY ONE TWENTY TWO TWENTY THREE TWENTY FOUR TWENTY FIVE TWENTY SIX TWENTY
            SEVEN TWENTY EIGHT TWENTY NINE THIRTY THIRTY ONE
         </assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-en124"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31")</response-string>
    <description>English cardinal words 1-31 lower case</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="d" select="xs:date(&apos;1990-12-01&apos;)"/>
    </environment>
    <dependency type="language" value="en"/>
    <test> string-join( for $i in 0 to 30 return let $d2 := $d + xs:dayTimeDuration(&apos;P1D&apos;)*$i
         return format-date($d2, &apos;[Dw]&apos;, &apos;en&apos;, (), ()), &apos; &apos;) </test>
    <result-string>xs:string("
            one two three four five six seven eight nine ten eleven
            twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty
            twenty one twenty two twenty three twenty four twenty five twenty six twenty
            seven twenty eight twenty nine thirty thirty one
         ")</result-string>
    <result>
      <assert-string-value normalize-space="true">
            one two three four five six seven eight nine ten eleven
            twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty
            twenty one twenty two twenty three twenty four twenty five twenty six twenty
            seven twenty eight twenty nine thirty thirty one
         </assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-en125"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("01; 02; 03; 04; 05; 06; 07; 08; 09; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31")</response-string>
    <description>English cardinal words 1-31 title case</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="d" select="xs:date(&apos;1990-12-01&apos;)"/>
    </environment>
    <dependency type="language" value="en"/>
    <test> string-join( for $i in 0 to 30 return let $d2 := $d + xs:dayTimeDuration(&apos;P1D&apos;)*$i
         return format-date($d2, &apos;[DWw]&apos;, &apos;en&apos;, (), ()), &apos;; &apos;) </test>
    <result-string>xs:string("
            One; Two; Three; Four; Five; Six; Seven; Eight; Nine; Ten; Eleven;
            Twelve; Thirteen; Fourteen; Fifteen; Sixteen; Seventeen; Eighteen; Nineteen; Twenty;
            Twenty One; Twenty Two; Twenty Three; Twenty Four; Twenty Five; Twenty Six; Twenty
            Seven; Twenty Eight; Twenty Nine; Thirty; Thirty One
        ")</result-string>
    <result>
      <assert-string-value normalize-space="true">
            One; Two; Three; Four; Five; Six; Seven; Eight; Nine; Ten; Eleven;
            Twelve; Thirteen; Fourteen; Fifteen; Sixteen; Seventeen; Eighteen; Nineteen; Twenty;
            Twenty One; Twenty Two; Twenty Three; Twenty Four; Twenty Five; Twenty Six; Twenty
            Seven; Twenty Eight; Twenty Nine; Thirty; Thirty One
        </assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-en126"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("1990; 1991; 1992; 1993; 1994; 1995; 1996; 1997; 1998; 1999; 2000; 2001; 2002; 2003; 2004; 2005; 2006; 2007; 2008; 2009; 2010; 2011; 2012; 2013; 2014; 2015; 2016; 2017; 2018; 2019; 2020")</response-string>
    <description>English cardinal words 1990-2020 upper case</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <modified by="Michael Kay" change="make &apos;AND&apos; optional, see bug 21423" on="2013-05-01"/>
    <environment>
      <param as="xs:date" name="d" select="xs:date(&apos;1990-12-01&apos;)"/>
    </environment>
    <dependency type="language" value="en"/>
    <test> 
         string-join( 
            for $i in 0 to 30 return let $d2 := $d + xs:yearMonthDuration(&apos;P1Y&apos;)*$i
              return replace(format-date($d2, &apos;[YW]&apos;, &apos;en&apos;, (), ()), &apos; AND &apos;, &apos; &apos;),
            &apos;; &apos;) </test>
    <result-string>xs:string("
            ONE THOUSAND NINE HUNDRED NINETY; ONE THOUSAND NINE HUNDRED
            NINETY ONE; ONE THOUSAND NINE HUNDRED NINETY TWO; ONE THOUSAND NINE HUNDRED
            NINETY THREE; ONE THOUSAND NINE HUNDRED NINETY FOUR; ONE THOUSAND NINE HUNDRED
            NINETY FIVE; ONE THOUSAND NINE HUNDRED NINETY SIX; ONE THOUSAND NINE HUNDRED
            NINETY SEVEN; ONE THOUSAND NINE HUNDRED NINETY EIGHT; ONE THOUSAND NINE HUNDRED
            NINETY NINE; TWO THOUSAND; TWO THOUSAND ONE; TWO THOUSAND TWO; TWO THOUSAND
            THREE; TWO THOUSAND FOUR; TWO THOUSAND FIVE; TWO THOUSAND SIX; TWO THOUSAND
            SEVEN; TWO THOUSAND EIGHT; TWO THOUSAND NINE; TWO THOUSAND TEN; TWO
            THOUSAND ELEVEN; TWO THOUSAND TWELVE; TWO THOUSAND THIRTEEN; TWO THOUSAND
            FOURTEEN; TWO THOUSAND FIFTEEN; TWO THOUSAND SIXTEEN; TWO THOUSAND
            SEVENTEEN; TWO THOUSAND EIGHTEEN; TWO THOUSAND NINETEEN; TWO THOUSAND
            TWENTY
         ")</result-string>
    <result>
      <assert-string-value normalize-space="true">
            ONE THOUSAND NINE HUNDRED NINETY; ONE THOUSAND NINE HUNDRED
            NINETY ONE; ONE THOUSAND NINE HUNDRED NINETY TWO; ONE THOUSAND NINE HUNDRED
            NINETY THREE; ONE THOUSAND NINE HUNDRED NINETY FOUR; ONE THOUSAND NINE HUNDRED
            NINETY FIVE; ONE THOUSAND NINE HUNDRED NINETY SIX; ONE THOUSAND NINE HUNDRED
            NINETY SEVEN; ONE THOUSAND NINE HUNDRED NINETY EIGHT; ONE THOUSAND NINE HUNDRED
            NINETY NINE; TWO THOUSAND; TWO THOUSAND ONE; TWO THOUSAND TWO; TWO THOUSAND
            THREE; TWO THOUSAND FOUR; TWO THOUSAND FIVE; TWO THOUSAND SIX; TWO THOUSAND
            SEVEN; TWO THOUSAND EIGHT; TWO THOUSAND NINE; TWO THOUSAND TEN; TWO
            THOUSAND ELEVEN; TWO THOUSAND TWELVE; TWO THOUSAND THIRTEEN; TWO THOUSAND
            FOURTEEN; TWO THOUSAND FIFTEEN; TWO THOUSAND SIXTEEN; TWO THOUSAND
            SEVENTEEN; TWO THOUSAND EIGHTEEN; TWO THOUSAND NINETEEN; TWO THOUSAND
            TWENTY
         </assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-en127"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("1990; 1991; 1992; 1993; 1994; 1995; 1996; 1997; 1998; 1999; 2000; 2001; 2002; 2003; 2004; 2005; 2006; 2007; 2008; 2009; 2010; 2011; 2012; 2013; 2014; 2015; 2016; 2017; 2018; 2019; 2020")</response-string>
    <description>English cardinal words 1990-2020 lower case</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <modified by="Michael Kay" change="make &apos;and&apos; optional, see bug 21423" on="2013-05-01"/>
    <environment>
      <param as="xs:date" name="d" select="xs:date(&apos;1990-12-01&apos;)"/>
    </environment>
    <dependency type="language" value="en"/>
    <test> string-join( for $i in 0 to 30 return let $d2 := $d + xs:yearMonthDuration(&apos;P1Y&apos;)*$i
         return replace(format-date($d2, &apos;[Yw]&apos;, &apos;en&apos;, (), ()), &apos; and &apos;, &apos; &apos;), &apos;; &apos;) </test>
    <result-string>xs:string("
            one thousand nine hundred ninety; one thousand nine hundred 
            ninety one; one thousand nine hundred ninety two; one thousand nine hundred 
            ninety three; one thousand nine hundred ninety four; one thousand nine hundred 
            ninety five; one thousand nine hundred ninety six; one thousand nine hundred 
            ninety seven; one thousand nine hundred ninety eight; one thousand nine hundred 
            ninety nine; two thousand; two thousand one; two thousand two; two thousand 
            three; two thousand four; two thousand five; two thousand six; two thousand
            seven; two thousand eight; two thousand nine; two thousand ten; two
            thousand eleven; two thousand twelve; two thousand thirteen; two thousand
            fourteen; two thousand fifteen; two thousand sixteen; two thousand 
            seventeen; two thousand eighteen; two thousand nineteen; two thousand 
            twenty
         ")</result-string>
    <result>
      <assert-string-value normalize-space="true">
            one thousand nine hundred ninety; one thousand nine hundred 
            ninety one; one thousand nine hundred ninety two; one thousand nine hundred 
            ninety three; one thousand nine hundred ninety four; one thousand nine hundred 
            ninety five; one thousand nine hundred ninety six; one thousand nine hundred 
            ninety seven; one thousand nine hundred ninety eight; one thousand nine hundred 
            ninety nine; two thousand; two thousand one; two thousand two; two thousand 
            three; two thousand four; two thousand five; two thousand six; two thousand
            seven; two thousand eight; two thousand nine; two thousand ten; two
            thousand eleven; two thousand twelve; two thousand thirteen; two thousand
            fourteen; two thousand fifteen; two thousand sixteen; two thousand 
            seventeen; two thousand eighteen; two thousand nineteen; two thousand 
            twenty
         </assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-en128"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("1990; 1991; 1992; 1993; 1994; 1995; 1996; 1997; 1998; 1999; 2000; 2001; 2002; 2003; 2004; 2005; 2006; 2007; 2008; 2009; 2010; 2011; 2012; 2013; 2014; 2015; 2016; 2017; 2018; 2019; 2020")</response-string>
    <description>English cardinal words 1990-2020 title case</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <modified by="Michael Kay" change="make &apos;and&apos; optional, see bug 21423" on="2013-05-01"/>
    <environment>
      <param as="xs:date" name="d" select="xs:date(&apos;1990-12-01&apos;)"/>
    </environment>
    <dependency type="language" value="en"/>
    <test> string-join( for $i in 0 to 30 return let $d2 := $d + xs:yearMonthDuration(&apos;P1Y&apos;)*$i
         return replace(format-date($d2, &apos;[YWw]&apos;, &apos;en&apos;, (), ()), &apos; [Aa]nd &apos;, &apos; &apos;), &apos;; &apos;) </test>
    <result-string>xs:string("
            One Thousand Nine Hundred Ninety; One Thousand Nine Hundred 
            Ninety One; One Thousand Nine Hundred Ninety Two; One Thousand Nine Hundred 
            Ninety Three; One Thousand Nine Hundred Ninety Four; One Thousand Nine Hundred 
            Ninety Five; One Thousand Nine Hundred Ninety Six; One Thousand Nine Hundred 
            Ninety Seven; One Thousand Nine Hundred Ninety Eight; One Thousand Nine Hundred 
            Ninety Nine; Two Thousand; Two Thousand One; Two Thousand Two; Two Thousand 
            Three; Two Thousand Four; Two Thousand Five; Two Thousand Six; Two Thousand
            Seven; Two Thousand Eight; Two Thousand Nine; Two Thousand Ten; Two
            Thousand Eleven; Two Thousand Twelve; Two Thousand Thirteen; Two Thousand
            Fourteen; Two Thousand Fifteen; Two Thousand Sixteen; Two Thousand 
            Seventeen; Two Thousand Eighteen; Two Thousand Nineteen; Two Thousand 
            Twenty         
         ")</result-string>
    <result>
      <assert-string-value normalize-space="true">
            One Thousand Nine Hundred Ninety; One Thousand Nine Hundred 
            Ninety One; One Thousand Nine Hundred Ninety Two; One Thousand Nine Hundred 
            Ninety Three; One Thousand Nine Hundred Ninety Four; One Thousand Nine Hundred 
            Ninety Five; One Thousand Nine Hundred Ninety Six; One Thousand Nine Hundred 
            Ninety Seven; One Thousand Nine Hundred Ninety Eight; One Thousand Nine Hundred 
            Ninety Nine; Two Thousand; Two Thousand One; Two Thousand Two; Two Thousand 
            Three; Two Thousand Four; Two Thousand Five; Two Thousand Six; Two Thousand
            Seven; Two Thousand Eight; Two Thousand Nine; Two Thousand Ten; Two
            Thousand Eleven; Two Thousand Twelve; Two Thousand Thirteen; Two Thousand
            Fourteen; Two Thousand Fifteen; Two Thousand Sixteen; Two Thousand 
            Seventeen; Two Thousand Eighteen; Two Thousand Nineteen; Two Thousand 
            Twenty         
         </assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-en129"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("01; 02; 03; 04; 05; 06; 07; 08; 09; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31")</response-string>
    <description>English ordinal words 1-31 upper case</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="d" select="xs:date(&apos;1990-12-01&apos;)"/>
    </environment>
    <dependency type="language" value="en"/>
    <test> string-join( for $i in 0 to 30 return let $d2 := $d + xs:dayTimeDuration(&apos;P1D&apos;)*$i
         return translate(format-date($d2, &apos;[DWo]&apos;, &apos;en&apos;, (), ()), &apos;- &apos;, &apos;&apos;), &apos;; &apos;) </test>
    <result-string>xs:string("
            FIRST; SECOND; THIRD; FOURTH; FIFTH; SIXTH; SEVENTH; EIGHTH; NINTH;
            TENTH; ELEVENTH; TWELFTH; THIRTEENTH; FOURTEENTH; FIFTEENTH; SIXTEENTH; SEVENTEENTH;
            EIGHTEENTH; NINETEENTH; TWENTIETH; TWENTYFIRST; TWENTYSECOND; TWENTYTHIRD; TWENTYFOURTH;
            TWENTYFIFTH; TWENTYSIXTH; TWENTYSEVENTH; TWENTYEIGHTH; TWENTYNINTH; THIRTIETH;
            THIRTYFIRST
         ")</result-string>
    <result>
      <assert-string-value normalize-space="true">
            FIRST; SECOND; THIRD; FOURTH; FIFTH; SIXTH; SEVENTH; EIGHTH; NINTH;
            TENTH; ELEVENTH; TWELFTH; THIRTEENTH; FOURTEENTH; FIFTEENTH; SIXTEENTH; SEVENTEENTH;
            EIGHTEENTH; NINETEENTH; TWENTIETH; TWENTYFIRST; TWENTYSECOND; TWENTYTHIRD; TWENTYFOURTH;
            TWENTYFIFTH; TWENTYSIXTH; TWENTYSEVENTH; TWENTYEIGHTH; TWENTYNINTH; THIRTIETH;
            THIRTYFIRST
         </assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-en130"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("01; 02; 03; 04; 05; 06; 07; 08; 09; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31")</response-string>
    <description>English ordinal words 1-31 lower case</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="d" select="xs:date(&apos;1990-12-01&apos;)"/>
    </environment>
    <dependency type="language" value="en"/>
    <test> string-join( for $i in 0 to 30 return let $d2 := $d + xs:dayTimeDuration(&apos;P1D&apos;)*$i
         return translate(format-date($d2, &apos;[Dwo]&apos;, &apos;en&apos;, (), ()), &apos;- &apos;, &apos;&apos;), &apos;; &apos;) </test>
    <result-string>xs:string("
            first; second; third; fourth; fifth; sixth; seventh; eighth; ninth;
            tenth; eleventh; twelfth; thirteenth; fourteenth; fifteenth; sixteenth; seventeenth;
            eighteenth; nineteenth; twentieth; twentyfirst; twentysecond; twentythird; twentyfourth;
            twentyfifth; twentysixth; twentyseventh; twentyeighth; twentyninth; thirtieth;
            thirtyfirst
         ")</result-string>
    <result>
      <assert-string-value normalize-space="true">
            first; second; third; fourth; fifth; sixth; seventh; eighth; ninth;
            tenth; eleventh; twelfth; thirteenth; fourteenth; fifteenth; sixteenth; seventeenth;
            eighteenth; nineteenth; twentieth; twentyfirst; twentysecond; twentythird; twentyfourth;
            twentyfifth; twentysixth; twentyseventh; twentyeighth; twentyninth; thirtieth;
            thirtyfirst
         </assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-en131"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("001; 002; 003; 004; 005; 006; 007; 008; 009; 010; 011; 012; 013; 014; 015; 016; 017; 018; 019; 020; 021; 022; 023; 024; 025; 026; 027; 028; 029; 030; 031")</response-string>
    <description>English ordinal words 1-31 title case</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="d" select="xs:date(&apos;1990-12-01&apos;)"/>
    </environment>
    <dependency type="language" value="en"/>
    <test> string-join( for $i in 0 to 30 return let $d2 := $d + xs:dayTimeDuration(&apos;P1D&apos;)*$i
         return translate(format-date($d2, &apos;[DWwo]&apos;, &apos;en&apos;, (), ()), &apos;- &apos;, &apos;&apos;), &apos;; &apos;) </test>
    <result-string>xs:string("
            First; Second; Third; Fourth; Fifth; Sixth; Seventh; Eighth; Ninth;
            Tenth; Eleventh; Twelfth; Thirteenth; Fourteenth; Fifteenth; Sixteenth; Seventeenth;
            Eighteenth; Nineteenth; Twentieth; TwentyFirst; TwentySecond; TwentyThird; TwentyFourth;
            TwentyFifth; TwentySixth; TwentySeventh; TwentyEighth; TwentyNinth; Thirtieth;
            ThirtyFirst
         ")</result-string>
    <result>
      <assert-string-value normalize-space="true">
            First; Second; Third; Fourth; Fifth; Sixth; Seventh; Eighth; Ninth;
            Tenth; Eleventh; Twelfth; Thirteenth; Fourteenth; Fifteenth; Sixteenth; Seventeenth;
            Eighteenth; Nineteenth; Twentieth; TwentyFirst; TwentySecond; TwentyThird; TwentyFourth;
            TwentyFifth; TwentySixth; TwentySeventh; TwentyEighth; TwentyNinth; Thirtieth;
            ThirtyFirst
         </assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-en132"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("1990; 1991; 1992; 1993; 1994; 1995; 1996; 1997; 1998; 1999; 2000; 2001; 2002; 2003; 2004; 2005; 2006; 2007; 2008; 2009; 2010; 2011; 2012; 2013; 2014; 2015; 2016; 2017; 2018; 2019; 2020")</response-string>
    <description>English ordinal words 1990-2020 upper case</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <modified by="Michael Kay" change="make &apos;and&apos; optional, see bug 21423" on="2013-05-01"/>
    <environment>
      <param as="xs:date" name="d" select="xs:date(&apos;1990-12-01&apos;)"/>
    </environment>
    <dependency type="language" value="en"/>
    <test> string-join( for $i in 0 to 30 return let $d2 := $d + xs:yearMonthDuration(&apos;P1Y&apos;)*$i
         return translate(replace(format-date($d2, &apos;[YWo]&apos;, &apos;en&apos;, (), ()), &apos; AND &apos;, &apos; &apos;), &apos;- &apos;, &apos;&apos;), &apos;; &apos;) </test>
    <result-string>xs:string("ONETHOUSANDNINEHUNDREDNINETIETH;
            ONETHOUSANDNINEHUNDREDNINETYFIRST; ONETHOUSANDNINEHUNDREDNINETYSECOND;
            ONETHOUSANDNINEHUNDREDNINETYTHIRD; ONETHOUSANDNINEHUNDREDNINETYFOURTH;
            ONETHOUSANDNINEHUNDREDNINETYFIFTH; ONETHOUSANDNINEHUNDREDNINETYSIXTH;
            ONETHOUSANDNINEHUNDREDNINETYSEVENTH; ONETHOUSANDNINEHUNDREDNINETYEIGHTH;
            ONETHOUSANDNINEHUNDREDNINETYNINTH; TWOTHOUSANDTH; TWOTHOUSANDFIRST;
            TWOTHOUSANDSECOND; TWOTHOUSANDTHIRD; TWOTHOUSANDFOURTH; TWOTHOUSANDFIFTH;
            TWOTHOUSANDSIXTH; TWOTHOUSANDSEVENTH; TWOTHOUSANDEIGHTH; TWOTHOUSANDNINTH;
            TWOTHOUSANDTENTH; TWOTHOUSANDELEVENTH; TWOTHOUSANDTWELFTH;
            TWOTHOUSANDTHIRTEENTH; TWOTHOUSANDFOURTEENTH; TWOTHOUSANDFIFTEENTH;
            TWOTHOUSANDSIXTEENTH; TWOTHOUSANDSEVENTEENTH; TWOTHOUSANDEIGHTEENTH;
            TWOTHOUSANDNINETEENTH; TWOTHOUSANDTWENTIETH")</result-string>
    <result>
      <assert-string-value normalize-space="true">ONETHOUSANDNINEHUNDREDNINETIETH;
            ONETHOUSANDNINEHUNDREDNINETYFIRST; ONETHOUSANDNINEHUNDREDNINETYSECOND;
            ONETHOUSANDNINEHUNDREDNINETYTHIRD; ONETHOUSANDNINEHUNDREDNINETYFOURTH;
            ONETHOUSANDNINEHUNDREDNINETYFIFTH; ONETHOUSANDNINEHUNDREDNINETYSIXTH;
            ONETHOUSANDNINEHUNDREDNINETYSEVENTH; ONETHOUSANDNINEHUNDREDNINETYEIGHTH;
            ONETHOUSANDNINEHUNDREDNINETYNINTH; TWOTHOUSANDTH; TWOTHOUSANDFIRST;
            TWOTHOUSANDSECOND; TWOTHOUSANDTHIRD; TWOTHOUSANDFOURTH; TWOTHOUSANDFIFTH;
            TWOTHOUSANDSIXTH; TWOTHOUSANDSEVENTH; TWOTHOUSANDEIGHTH; TWOTHOUSANDNINTH;
            TWOTHOUSANDTENTH; TWOTHOUSANDELEVENTH; TWOTHOUSANDTWELFTH;
            TWOTHOUSANDTHIRTEENTH; TWOTHOUSANDFOURTEENTH; TWOTHOUSANDFIFTEENTH;
            TWOTHOUSANDSIXTEENTH; TWOTHOUSANDSEVENTEENTH; TWOTHOUSANDEIGHTEENTH;
            TWOTHOUSANDNINETEENTH; TWOTHOUSANDTWENTIETH</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-en133"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("1990; 1991; 1992; 1993; 1994; 1995; 1996; 1997; 1998; 1999; 2000; 2001; 2002; 2003; 2004; 2005; 2006; 2007; 2008; 2009; 2010; 2011; 2012; 2013; 2014; 2015; 2016; 2017; 2018; 2019; 2020")</response-string>
    <description>English ordinal words 1990-2020 lower case</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <modified by="Michael Kay" change="make &apos;and&apos; optional, see bug 21423" on="2013-05-01"/>
    <environment>
      <param as="xs:date" name="d" select="xs:date(&apos;1990-12-01&apos;)"/>
    </environment>
    <dependency type="language" value="en"/>
    <test> string-join( for $i in 0 to 30 return let $d2 := $d + xs:yearMonthDuration(&apos;P1Y&apos;)*$i
         return translate(replace(format-date($d2, &apos;[Ywo]&apos;, &apos;en&apos;, (), ()), &apos; and &apos;, &apos; &apos;), &apos;- &apos;, &apos;&apos;), &apos;; &apos;) </test>
    <result-string>xs:string("onethousandninehundredninetieth;
            onethousandninehundredninetyfirst; onethousandninehundredninetysecond;
            onethousandninehundredninetythird; onethousandninehundredninetyfourth;
            onethousandninehundredninetyfifth; onethousandninehundredninetysixth;
            onethousandninehundredninetyseventh; onethousandninehundredninetyeighth;
            onethousandninehundredninetyninth; twothousandth; twothousandfirst;
            twothousandsecond; twothousandthird; twothousandfourth; twothousandfifth;
            twothousandsixth; twothousandseventh; twothousandeighth; twothousandninth;
            twothousandtenth; twothousandeleventh; twothousandtwelfth;
            twothousandthirteenth; twothousandfourteenth; twothousandfifteenth;
            twothousandsixteenth; twothousandseventeenth; twothousandeighteenth;
            twothousandnineteenth; twothousandtwentieth")</result-string>
    <result>
      <assert-string-value normalize-space="true">onethousandninehundredninetieth;
            onethousandninehundredninetyfirst; onethousandninehundredninetysecond;
            onethousandninehundredninetythird; onethousandninehundredninetyfourth;
            onethousandninehundredninetyfifth; onethousandninehundredninetysixth;
            onethousandninehundredninetyseventh; onethousandninehundredninetyeighth;
            onethousandninehundredninetyninth; twothousandth; twothousandfirst;
            twothousandsecond; twothousandthird; twothousandfourth; twothousandfifth;
            twothousandsixth; twothousandseventh; twothousandeighth; twothousandninth;
            twothousandtenth; twothousandeleventh; twothousandtwelfth;
            twothousandthirteenth; twothousandfourteenth; twothousandfifteenth;
            twothousandsixteenth; twothousandseventeenth; twothousandeighteenth;
            twothousandnineteenth; twothousandtwentieth</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-en134"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("1990; 1991; 1992; 1993; 1994; 1995; 1996; 1997; 1998; 1999; 2000; 2001; 2002; 2003; 2004; 2005; 2006; 2007; 2008; 2009; 2010; 2011; 2012; 2013; 2014; 2015; 2016; 2017; 2018; 2019; 2020")</response-string>
    <description>English ordinal words 1990-2020 title case</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <modified by="Michael Kay" change="make &apos;and&apos; optional, see bug 21423" on="2013-05-01"/>
    <environment>
      <param as="xs:date" name="d" select="xs:date(&apos;1990-12-01&apos;)"/>
    </environment>
    <dependency type="language" value="en"/>
    <test> string-join( for $i in 0 to 30 return let $d2 := $d + xs:yearMonthDuration(&apos;P1Y&apos;)*$i
         return translate(replace(format-date($d2, &apos;[YWwo]&apos;, &apos;en&apos;, (), ()), &apos; [Aa]nd &apos;, &apos; &apos;), &apos;- &apos;, &apos;&apos;), &apos;; &apos;) </test>
    <result-string>xs:string("OneThousandNineHundredNinetieth;
            OneThousandNineHundredNinetyFirst; OneThousandNineHundredNinetySecond;
            OneThousandNineHundredNinetyThird; OneThousandNineHundredNinetyFourth;
            OneThousandNineHundredNinetyFifth; OneThousandNineHundredNinetySixth;
            OneThousandNineHundredNinetySeventh; OneThousandNineHundredNinetyEighth;
            OneThousandNineHundredNinetyNinth; TwoThousandth; TwoThousandFirst;
            TwoThousandSecond; TwoThousandThird; TwoThousandFourth; TwoThousandFifth;
            TwoThousandSixth; TwoThousandSeventh; TwoThousandEighth; TwoThousandNinth;
            TwoThousandTenth; TwoThousandEleventh; TwoThousandTwelfth;
            TwoThousandThirteenth; TwoThousandFourteenth; TwoThousandFifteenth;
            TwoThousandSixteenth; TwoThousandSeventeenth; TwoThousandEighteenth;
            TwoThousandNineteenth; TwoThousandTwentieth")</result-string>
    <result>
      <assert-string-value normalize-space="true">OneThousandNineHundredNinetieth;
            OneThousandNineHundredNinetyFirst; OneThousandNineHundredNinetySecond;
            OneThousandNineHundredNinetyThird; OneThousandNineHundredNinetyFourth;
            OneThousandNineHundredNinetyFifth; OneThousandNineHundredNinetySixth;
            OneThousandNineHundredNinetySeventh; OneThousandNineHundredNinetyEighth;
            OneThousandNineHundredNinetyNinth; TwoThousandth; TwoThousandFirst;
            TwoThousandSecond; TwoThousandThird; TwoThousandFourth; TwoThousandFifth;
            TwoThousandSixth; TwoThousandSeventh; TwoThousandEighth; TwoThousandNinth;
            TwoThousandTenth; TwoThousandEleventh; TwoThousandTwelfth;
            TwoThousandThirteenth; TwoThousandFourteenth; TwoThousandFifteenth;
            TwoThousandSixteenth; TwoThousandSeventeenth; TwoThousandEighteenth;
            TwoThousandNineteenth; TwoThousandTwentieth</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-en141"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("1990"),fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001")))</response-string>
    <description>English BC/AD</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="d1" select="xs:date(&apos;1990-12-01&apos;)"/>
      <param as="xs:date" name="d2" select="xs:date(&apos;-0055-12-01&apos;)"/>
    </environment>
    <dependency type="language" value="en"/>
    <dependency type="limits" value="year_lt_0"/>
    <test> format-date($d1, &apos;[Y][EN]&apos;, &apos;en&apos;, (), ()), format-date($d2, &apos;[Y][EN]&apos;, &apos;en&apos;, (), ()) </test>
    <result-string/>
    <result-string/>
    <result-string/>
    <result-string/>
    <result>
      <any-of>
        <assert-deep-eq>"1990AD", "55BC"</assert-deep-eq>
        <assert-deep-eq>"1990CE", "55BCE"</assert-deep-eq>
        <assert-deep-eq>"1990A.D.", "55B.C."</assert-deep-eq>
        <assert-deep-eq>"1990C.E.", "55B.C.E."</assert-deep-eq>
      </any-of>
    </result>
  </test-case>
  <test-case name="format-date-en151"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("March")</response-string>
    <description>test format-date: fallback to English for unsupported language. Test assumes (a) that Iberian (xib) is not supported, and (b) that the fallback language is English. Changed from lang="fo" to lang="xib": See bug 862.</description>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="b" select="xs:date(&apos;2006-03-01&apos;)"/>
    </environment>
    <dependency satisfied="false" type="language" value="xib"/>
    <test>format-date($b, &apos;[MNn]&apos;, &apos;xib&apos;, (), ())</test>
    <result-string>xs:string("[Language: en]March")</result-string>
    <result>
      <assert-string-value>[Language: en]March</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-en152"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("03")</response-string>
    <description/>
    <created by="Michael Kay, Saxonica" on="2011-07-01"/>
    <environment>
      <param as="xs:date" name="b" select="xs:date(&apos;2006-03-01&apos;)"/>
    </environment>
    <dependency satisfied="false" type="calendar" value="CB"/>
    <test>format-date($b, &apos;[M01]&apos;, &apos;en&apos;, &apos;CB&apos;, ())</test>
    <result-string>xs:string("[Calendar: AD]03")</result-string>
    <result>
      <assert-string-value>[Calendar: AD]03</assert-string-value>
    </result>
  </test-case>
  <test-case name="format-date-en153"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("03")</response-string>
    <description>Use an unknown calendar in a namespace, specified by means of an EQName</description>
    <created by="Michael Kay, Saxonica" on="2013-06-12"/>
    <modified by="O&apos;Neil Delpratt" change="Bug fix #22418 - changed assertion to assert-type" on="2013-06-21"/>
    <environment>
      <param as="xs:date" name="b" select="xs:date(&apos;2006-03-01&apos;)"/>
    </environment>
    <test>
      	format-date($b, &apos;[M01]&apos;, &apos;en&apos;, &apos;Q{http://calendar.example.com/non-existent-calendar}CB&apos;, ())
      </test>
    <result-string/>
    <result>
      <assert-type>xs:string</assert-type>
    </result>
  </test-case>
  <test-case name="format-date-en154"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("03")</response-string>
    <description>Use an unknown calendar in a namespace, specified by means of a lexical QName</description>
    <created by="Michael Kay, Saxonica" on="2013-06-12"/>
    <modified by="O&apos;Neil Delpratt" change="Bug fix #22418 - changed assertion to assert-type" on="2013-06-21"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      	declare namespace cal = "http://calendar.example.com/non-existent-calendar"; 
      	format-date(xs:date(&apos;2006-03-01&apos;), &apos;[M01]&apos;, &apos;en&apos;, &apos;cal:CB&apos;, ())
      </test>
    <result-string/>
    <result>
      <assert-type>xs:string</assert-type>
    </result>
  </test-case>
  <test-case name="format-date-en155"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("03")</response-string>
    <description>Use an unknown calendar in no namespace, specified by means of an EQName</description>
    <created by="Michael Kay, Saxonica" on="2013-06-12"/>
    <environment>
      <param as="xs:date" name="b" select="xs:date(&apos;2006-03-01&apos;)"/>
    </environment>
    <test>
      	format-date($b, &apos;[M01]&apos;, &apos;en&apos;, &apos;Q{}ZODIAC&apos;, ())
      </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOFD1340"))</result-string>
    <result>
      <error code="FOFD1340"/>
    </result>
  </test-case>
  <test-case name="format-date-en156"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("03")</response-string>
    <description>Use an unknown calendar in no namespace, specified by means of a lexical QName</description>
    <created by="Michael Kay, Saxonica" on="2013-06-12"/>
    <environment>
      <param as="xs:date" name="b" select="xs:date(&apos;2006-03-01&apos;)"/>
    </environment>
    <test>
      	format-date($b, &apos;[M01]&apos;, &apos;en&apos;, &apos;ZODIAC&apos;, ())
      </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOFD1340"))</result-string>
    <result>
      <error code="FOFD1340"/>
    </result>
  </test-case>
  <test-case name="format-date-en157"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("03")</response-string>
    <description>Use a badly-formed calendar name</description>
    <created by="Michael Kay, Saxonica" on="2013-06-12"/>
    <environment>
      <param as="xs:date" name="b" select="xs:date(&apos;2006-03-01&apos;)"/>
    </environment>
    <test>
      	format-date($b, &apos;[M01]&apos;, &apos;en&apos;, &apos;:w&apos;, ())
      </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOFD1340"))</result-string>
    <result>
      <error code="FOFD1340"/>
    </result>
  </test-case>
  <test-case name="format-date-en158"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("03")</response-string>
    <description>Use a badly-formed calendar name</description>
    <created by="Michael Kay, Saxonica" on="2013-06-12"/>
    <environment>
      <param as="xs:date" name="b" select="xs:date(&apos;2006-03-01&apos;)"/>
    </environment>
    <test>
      	format-date($b, &apos;[M01]&apos;, &apos;en&apos;, &apos;Q{}1&apos;, ())
      </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOFD1340"))</result-string>
    <result>
      <error code="FOFD1340"/>
    </result>
  </test-case>
  <test-case name="format-date-inpt-er1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description>wrong arg input to format-date()</description>
    <created by="Zhen Hua Liu" on="2012-01-18"/>
    <test>format-date(&apos;abc&apos;, &apos;[bla]&apos;, &apos;en&apos;, (), ())</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="format-date-inpt-er2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description>wrong number of args to format-date()</description>
    <created by="Zhen Hua Liu" on="2012-01-18"/>
    <test>format-date(current-date(), &apos;[bla]&apos;, &apos;en&apos;, (), (), 6)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="format-date-inpt-er3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description>wrong number of args to format-date()</description>
    <created by="Zhen Hua Liu" on="2012-01-18"/>
    <test>format-date(current-date(), &apos;[bla]&apos;, &apos;en&apos;, (), 5)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="format-date-1340err"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("")</response-string>
    <description>Error FOFD1340 syntax of picture is incorrect</description>
    <created by="Zhen Hua Liu" on="2012-01-18"/>
    <test>format-date(current-date(), &apos;[yY]&apos;, &apos;en&apos;, (), ())</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOFD1340"))</result-string>
    <result>
      <error code="FOFD1340"/>
    </result>
  </test-case>
</test-set>