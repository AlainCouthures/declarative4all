<test-set name="fn-nilled" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">
  <description>Tests for the nilled() function</description>
  <link document="http://www.w3.org/TR/xpath-functions-30/" idref="func-nilled" type="spec"/>
  <environment name="nillable">
    <schema file="nilled/nillable.xsd" uri="http://www.w3.org/XQueryTest/nillable">
      <description>A Schema with some nillable elements</description>
      <created by="Michael Kay" on="2012-10-02"/>
    </schema>
    <source file="nilled/nillable.xml" role="." validation="strict">
      <description>An instance with some nilled elements</description>
      <created by="Michael Kay" on="2012-10-02"/>
    </source>
    <namespace prefix="" uri="http://www.w3.org/XQueryTest/nillable"/>
  </environment>
  <environment name="nillable-Q">
    <!-- differs from 'nillable' by omission of the namespace declaration -->
    <schema file="nilled/nillable.xsd" uri="http://www.w3.org/XQueryTest/nillable">
      <description>A Schema with some nillable elements</description>
      <created by="Michael Kay" on="2012-10-02"/>
    </schema>
    <source file="nilled/nillable.xml" role="." validation="strict">
      <description>An instance with some nilled elements</description>
      <created by="Michael Kay" on="2012-10-02"/>
    </source>
  </environment>
  <environment name="validate">
    <schema file="nilled/validate.xsd" uri="http://www.w3.org/XQueryTest/testcases">
      <description>A Schema with some nillable elements</description>
      <created by="Tim Mills" on="2008-01-01"/>
    </schema>
    <source file="nilled/validate.xml" role="." validation="strict">
      <description>An instance with some nilled elements</description>
      <created by="Tim Mills" on="2008-01-01"/>
    </source>
    <!--<namespace prefix="" uri="http://www.w3.org/XQueryTest/testcases"/>-->
  </environment>
  <test-case name="fn-nilled-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Evaluation of nilled function with argument set to empty sequence. Use fn:count to avoid empty file </description>
    <created by="Carmelo Montanez" on="2005-11-16"/>
    <test>fn:count(fn:nilled(()))</test>
    <result-string>xs:string("0")</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-nilled-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("1")</response-string>
    <description> Evaluation of nilled function with argument set to comment node. Use fn:count to avoid empty file </description>
    <created by="Carmelo Montanez" on="2005-11-16"/>
    <environment ref="works-mod"/>
    <test> fn:count(fn:nilled(/works[1]/employee[2]/child::text()[last()]))</test>
    <result-string>xs:string("0")</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-nilled-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Evaluation of nilled function with argument set to an element node. </description>
    <created by="Carmelo Montanez" on="2005-11-16"/>
    <environment ref="works-mod"/>
    <test> fn:nilled(/works[1]/employee[2])</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-nilled-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Evaluation of nilled function with argument set to an element node. </description>
    <created by="Carmelo Montanez" on="2005-11-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[ fn:nilled(<shoe size = "5"/>)]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-nilled-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Evaluation of nilled function with argument set to an element node with xsi:nill = true. </description>
    <created by="Carmelo Montanez" on="2005-11-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[ fn:nilled(<shoe xsi:nil="true"/>)]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-nilled-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Evaluation of nilled function with argument set to an element node with xsi:nill = false. </description>
    <created by="Carmelo Montanez" on="2005-11-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[ fn:nilled(<shoe xsi:nil="false"/>)]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-nilled-7"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Evaluation of nilled function with argument set to an element node with xsi:nill = fn:true(). </description>
    <created by="Carmelo Montanez" on="2005-11-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[ fn:nilled(<shoe xsi:nil="{fn:true()}"/>)]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-nilled-8"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Evaluation of nilled function with argument set to an element node with xsi:nill = fn:false(). </description>
    <created by="Carmelo Montanez" on="2005-11-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[ fn:nilled(<shoe xsi:nil="{fn:false()}"/>)]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-nilled-9"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> Evaluation of nilled function with more than one argument. </description>
    <created by="Carmelo Montanez" on="2005-11-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[ fn:nilled(<shoe xsi:nil="{fn:true()}"/>,"A Second Argument")]]>
    </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="fn-nilled-10"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Evaluation of nilled function as argument to fn:not function. returns true. </description>
    <created by="Carmelo Montanez" on="2005-11-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[ fn:not(fn:nilled(<shoe xsi:nil="{fn:false()}"/>))]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-nilled-11"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Evaluation of nilled function as argument to fn:not function. returns false. </description>
    <created by="Carmelo Montanez" on="2005-11-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[ fn:not(fn:nilled(<shoe xsi:nil="{fn:true()}"/>))]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-nilled-12"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Evaluation of nilled function used a part of boolean expression ("and" operator and fn:true() </description>
    <created by="Carmelo Montanez" on="2005-11-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[ fn:nilled(<shoe xsi:nil="{fn:true()}"/>) and fn:true()]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-nilled-13"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Evaluation of nilled function used a part of boolean expression ("and" operator and fn:false() </description>
    <created by="Carmelo Montanez" on="2005-11-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[ fn:nilled(<shoe xsi:nil="{fn:true()}"/>) and fn:false()]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-nilled-14"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Evaluation of nilled function used a part of boolean expression ("or" operator and fn:true() </description>
    <created by="Carmelo Montanez" on="2005-11-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[ fn:nilled(<shoe xsi:nil="{fn:true()}"/>) or fn:true()]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-nilled-15"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Evaluation of nilled function used a part of boolean expression ("or" operator and fn:false() </description>
    <created by="Carmelo Montanez" on="2005-11-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[ fn:nilled(<shoe xsi:nil="{fn:true()}"/>) or fn:false()]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-nilled-16"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Evaluation of nilled function used as argument to fn:string function. </description>
    <created by="Carmelo Montanez" on="2005-11-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[ fn:nilled(<shoe xsi:nil="{fn:true()}"/>) ]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-nilled-17"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Evaluation of nilled function used as argument to xs:boolean function. Returns false </description>
    <created by="Carmelo Montanez" on="2005-11-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[ xs:boolean(fn:nilled(<shoe xsi:nil="{fn:true()}"/>))]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-nilled-18"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Evaluation of nilled function used as argument to xs:boolean function. Returns false </description>
    <created by="Carmelo Montanez" on="2005-11-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[ xs:boolean(fn:nilled(<shoe xsi:nil="{fn:false()}"/>))]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-nilled-19"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Evaluation of nilled function with argument set to a document node </description>
    <created by="Carmelo Montanez" on="2005-11-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[ fn:nilled(document {<aList><anElement>data</anElement></aList>})]]>
    </test>
    <result-string>()</result-string>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case name="fn-nilled-20"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Evaluation of nilled function with argument set to an attribute node </description>
    <created by="Carmelo Montanez" on="2005-11-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test> fn:nilled(attribute size {1})</test>
    <result-string>()</result-string>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case name="fn-nilled-21"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Evaluation of nilled function with argument set to a comment node </description>
    <created by="Carmelo Montanez" on="2005-11-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[ fn:nilled(<!-- This is a comment node -->)]]>
    </test>
    <result-string>()</result-string>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case name="fn-nilled-22"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Evaluation of nilled function with argument set to a processing instruction node</description>
    <created by="Carmelo Montanez" on="2005-11-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[ fn:nilled(<?format role="output" ?>)]]>
    </test>
    <result-string>()</result-string>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case covers="fn-nilled" name="fn-nilled-23"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> nilled() applied to document node (Allowed in 3.0). </description>
    <created by="O&apos;Neil Delpratt" on="2012-05-22"/>
    <environment ref="works-mod"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>nilled()</test>
    <result-string>()</result-string>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case covers="fn-nilled" name="fn-nilled-24"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>  nilled() applied to element node (Allowed in 3.0). </description>
    <created by="Michael Kay" on="2012-10-02"/>
    <environment ref="works-mod"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>/*/nilled()</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case covers="fn-nilled" name="fn-nilled-25"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>  nilled() applied to attribute node (Allowed in 3.0). </description>
    <created by="Michael Kay" on="2012-10-02"/>
    <environment ref="works-mod"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>/works/employee[1]/@gender/nilled()</test>
    <result-string>()</result-string>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case covers="fn-nilled" name="fn-nilled-26"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>  nilled() applied to text node (Allowed in 3.0). </description>
    <created by="Michael Kay" on="2012-10-02"/>
    <environment ref="works-mod"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>/works/employee[1]/empnum/text()/nilled()</test>
    <result-string>()</result-string>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case covers="fn-nilled" name="fn-nilled-27"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>  nilled() applied to untyped element node with xsi:nil=true (Allowed in 3.0). </description>
    <created by="Michael Kay" on="2012-10-02"/>
    <environment ref="works-mod"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      <![CDATA[ (<shoe xsi:nil="true"/>)/fn:nilled()]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case covers="fn-nilled" name="fn-nilled-28"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description>  nilled() : context item is atomic </description>
    <created by="Michael Kay" on="2012-10-02"/>
    <environment ref="works-mod"/>
    <dependency type="spec" value="XQ30+ XP30+"/>
    <test>23[nilled()]</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case covers="fn-nilled" name="fn-nilled-29"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description>  nilled() : context item is a function item </description>
    <created by="Michael Kay" on="2012-10-02"/>
    <environment ref="works-mod"/>
    <dependency type="spec" value="XQ30+ XP30+"/>
    <test>nilled#0[nilled()]</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case covers="fn-nilled" name="fn-nilled-30"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>  nilled() : context item is absent </description>
    <created by="Michael Kay" on="2012-10-02"/>
    <environment ref="empty"/>
    <dependency type="spec" value="XQ30+ XP30+"/>
    <test>current-date() gt current-date()+xs:dayTimeDuration(&apos;P1D&apos;) or nilled()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPDY0002"))</result-string>
    <result>
      <error code="XPDY0002"/>
    </result>
  </test-case>
  <test-case name="fn-nilled-31"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>  nilled() : with nillable content (!) </description>
    <created by="Michael Kay" on="2012-10-02"/>
    <environment ref="nillable"/>
    <dependency type="spec" value="XQ10+ XP20+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>nilled(/root)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-nilled-32"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>  nilled() : with nillable content (!) </description>
    <created by="Michael Kay" on="2012-10-02"/>
    <environment ref="nillable"/>
    <dependency type="spec" value="XQ10+ XP20+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>nilled(/root/branch)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-nilled-33"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>  nilled() : with nillable content (!) </description>
    <created by="Michael Kay" on="2012-10-02"/>
    <environment ref="nillable"/>
    <dependency type="spec" value="XQ10+ XP20+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>nilled(/root/branch/branch[1])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-nilled-34"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>  nilled() : with nillable content (!) </description>
    <created by="Michael Kay" on="2012-10-02"/>
    <environment ref="nillable"/>
    <dependency type="spec" value="XQ10+ XP20+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>nilled(/root/branch/branch[2])</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-nilled-35"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>  nilled() : with nillable content (!) </description>
    <created by="Michael Kay" on="2012-10-02"/>
    <environment ref="nillable"/>
    <dependency type="spec" value="XQ10+ XP20+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>nilled(/root/branch/branch[2]/twig)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case covers="fn-nilled" name="fn-nilled-36"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>  nilled() : with nillable content (!) </description>
    <created by="Michael Kay" on="2012-10-02"/>
    <environment ref="nillable"/>
    <dependency type="spec" value="XQ30+ XP30+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>/root/branch/branch[2]/nilled()</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case covers="fn-nilled" name="fn-nilled-37"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>  nilled() : with nillable content (!) </description>
    <created by="Michael Kay" on="2012-10-02"/>
    <environment ref="nillable"/>
    <dependency type="spec" value="XQ30+ XP30+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>/root/branch/branch[2]/twig/nilled()</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-nilled-38"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("")</response-string>
    <description> If node is nilled, its typed value is empty </description>
    <created by="Michael Kay" on="2012-10-17"/>
    <environment ref="nillable"/>
    <dependency type="spec" value="XQ10+ XP20+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>data(/root/branch/note[3])</test>
    <result-string>()</result-string>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case name="fn-nilled-39"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("")</response-string>
    <description> If node is nilled, its typed value is empty </description>
    <created by="Michael Kay" on="2012-10-17"/>
    <environment ref="nillable"/>
    <dependency type="spec" value="XQ10+ XP20+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>data(/root/branch/branch[2]/twig)</test>
    <result-string>()</result-string>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case name="fn-nilled-40"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> If node is nilled, it matches element(E, T?) </description>
    <created by="Michael Kay" on="2012-10-17"/>
    <environment ref="nillable-Q"/>
    <dependency type="spec" value="XQ10+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>
        import schema namespace ids="http://www.w3.org/XQueryTest/nillable";
      	/ids:root/ids:branch/ids:branch[1] instance of element(ids:branch, ids:root?)
      </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-nilled-41"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> If node is nilled, it doesn&apos;t match element(E, T) </description>
    <created by="Michael Kay" on="2012-10-17"/>
    <environment ref="nillable-Q"/>
    <dependency type="spec" value="XQ10+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>
        import schema namespace ids="http://www.w3.org/XQueryTest/nillable";
      	/ids:root/ids:branch/ids:branch[1] instance of element(ids:branch, ids:root)
      </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-nilled-42"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> If node is nilled, it matches element(E, T?) </description>
    <created by="Michael Kay" on="2012-10-17"/>
    <environment ref="nillable"/>
    <dependency type="spec" value="XQ10+ XP20+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>/root/branch/branch[2]/twig instance of element(twig, xs:int?)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-nilled-43"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> If node is nilled, it matches element(E, T?) </description>
    <created by="Michael Kay" on="2012-10-17"/>
    <environment ref="nillable"/>
    <dependency type="spec" value="XQ10+ XP20+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>/root/branch/branch[2]/twig instance of element(twig, xs:decimal?)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-nilled-44"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> If node is nilled, it does not match element(E, T) </description>
    <created by="Michael Kay" on="2012-10-17"/>
    <environment ref="nillable"/>
    <dependency type="spec" value="XQ10+ XP20+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>/root/branch/branch[2]/twig instance of element(twig, xs:int)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-nilled-45"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> If node is nilled, it does not match element(E, T) </description>
    <created by="Michael Kay" on="2012-10-17"/>
    <environment ref="nillable"/>
    <dependency type="spec" value="XQ10+ XP20+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>/root/branch/branch[2]/twig instance of element(twig, xs:decimal)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-nilled-46"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Nilled value with user-defined simple type </description>
    <created by="Michael Kay" on="2012-10-17"/>
    <environment ref="nillable"/>
    <dependency type="spec" value="XQ10+ XP20+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>nilled(/root/branch/date)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-nilled-47"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("")</response-string>
    <description> If node is nilled, its typed value is empty (user-defined simple type)</description>
    <created by="Michael Kay" on="2012-10-17"/>
    <environment ref="nillable"/>
    <dependency type="spec" value="XQ10+ XP20+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>data(/root/branch/date)</test>
    <result-string>()</result-string>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case name="fn-nilled-48"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> If node is nilled, it does not match element(E, T)</description>
    <created by="Michael Kay" on="2012-10-17"/>
    <environment ref="nillable-Q"/>
    <dependency type="spec" value="XQ10+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>
        import schema namespace ids="http://www.w3.org/XQueryTest/nillable";
      	/root/branch/date instance of element(*, ids:date)
      </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-nilled-49"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> If node is nilled, it matches element(E, T?)</description>
    <created by="Michael Kay" on="2012-10-17"/>
    <environment ref="nillable-Q"/>
    <dependency type="spec" value="XQ10+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>
        import schema default element namespace "http://www.w3.org/XQueryTest/nillable";
      	/root/branch/date instance of element(*, date?)
      </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-nilled-50"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Nilled value with user-defined complex type with simple content</description>
    <created by="Michael Kay" on="2012-10-17"/>
    <environment ref="nillable"/>
    <dependency type="spec" value="XQ10+ XP20+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>nilled(/root/branch/size)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-nilled-51"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("")</response-string>
    <description> If node is nilled, its typed value is empty (user-defined complex type with simple content)</description>
    <created by="Michael Kay" on="2012-10-17"/>
    <environment ref="nillable"/>
    <dependency type="spec" value="XQ10+ XP20+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>data(/root/branch/size)</test>
    <result-string>()</result-string>
    <result>
      <assert-empty/>
    </result>
  </test-case>
  <test-case name="fn-nilled-52"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> If node is nilled, it does not match element(E, T)</description>
    <created by="Michael Kay" on="2012-10-17"/>
    <environment ref="nillable-Q"/>
    <dependency type="spec" value="XQ10+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>
        import schema namespace ids="http://www.w3.org/XQueryTest/nillable";
      	/ids:root/ids:branch/ids:size instance of element(*, ids:size)
      </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="fn-nilled-53"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> If node is nilled, it matches element(E, T?)</description>
    <created by="Michael Kay" on="2012-10-17"/>
    <environment ref="nillable-Q"/>
    <dependency type="spec" value="XQ10+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>
        import schema namespace ids="http://www.w3.org/XQueryTest/nillable";
      	/ids:root/ids:branch/ids:size instance of element(*, ids:size?)
      </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case covers="fn-nilled" name="K-NilledFunc-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> A test whose essence is: `nilled()`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O&apos;Neil Delpratt" change="Bug fix related to bug #14854: Added dependency" on="2012-05-22"/>
    <dependency type="spec" value="XP20 XQ10"/>
    <test>nilled()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-NilledFunc-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> A test whose essence is: `nilled((), "wrong param")`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>nilled((), "wrong param")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-NilledFunc-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> A test whose essence is: `empty(nilled( () ))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(nilled( () ))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-NilledFunc-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> A test whose essence is: `nilled(1)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>nilled(1)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="cbcl-nilled-001"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Evaluation of nilled function with a non-nil nillable element </description>
    <created by="Tim Mills" on="2007-02-27"/>
    <environment ref="validate"/>
    <dependency type="spec" value="XQ10+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>
      	import schema namespace tc="http://www.w3.org/XQueryTest/testcases"; 
      	fn:nilled(/tc:root/tc:nillable[1])
      </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="cbcl-nilled-002"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Evaluation of nilled function with a nil nillable element </description>
    <created by="Tim Mills" on="2007-02-27"/>
    <environment ref="validate"/>
    <dependency type="spec" value="XQ10+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>
      	import schema namespace tc="http://www.w3.org/XQueryTest/testcases"; 
      	fn:nilled(/tc:root/tc:nillable[2])
      </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="cbcl-nilled-003"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Evaluation of nilled function with a non-nil nillable element </description>
    <created by="Tim Mills" on="2007-02-27"/>
    <environment ref="validate"/>
    <dependency type="spec" value="XQ10+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>
      	import schema namespace tc="http://www.w3.org/XQueryTest/testcases"; 
      	fn:nilled(/tc:root/tc:nillable[3])
      </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="cbcl-nilled-004"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Evaluation of nilled function with a non-nil nillable element </description>
    <created by="Tim Mills" on="2007-02-27"/>
    <environment ref="validate"/>
    <dependency type="spec" value="XQ10+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>
      <![CDATA[
      	import schema namespace tc="http://www.w3.org/XQueryTest/testcases"; 
      	let $v := validate { <tc:nillable xsi:nil="false" /> } 
      	return fn:nilled($v)
      ]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="cbcl-nilled-005"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Evaluation of nilled function with a nil nillable element </description>
    <created by="Tim Mills" on="2007-02-27"/>
    <environment ref="validate"/>
    <dependency type="spec" value="XQ10+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>
      <![CDATA[
      	import schema namespace tc="http://www.w3.org/XQueryTest/testcases"; 
      	let $v := validate { <tc:nillable xsi:nil="true" /> } return fn:nilled($v)
      ]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="cbcl-nilled-006"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Evaluation of nilled function with a non-nil nillable element </description>
    <created by="Tim Mills" on="2007-02-27"/>
    <environment ref="validate"/>
    <dependency type="spec" value="XQ10+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>
      <![CDATA[
      	import schema namespace tc="http://www.w3.org/XQueryTest/testcases"; 
      	let $v := validate { <tc:nillable /> } return fn:nilled($v)
      ]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="cbcl-nilled-007"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Test fn:nilled on non-element nodes. </description>
    <created by="Tim Mills" on="2008-10-04"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[
      	empty(nilled( <?foo ?> ))
      ]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
</test-set>