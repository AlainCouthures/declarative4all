<test-set name="fn-last" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">
  <description>Tests for the last() function</description>
  <link document="http://www.w3.org/TR/xpath-functions-30/" idref="func-last" type="spec"/>
  <test-case name="last-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Evaluation of "fn:last", where context function is an element node and the position is last. </description>
    <created by="Carmelo Montanez" on="2005-09-14"/>
    <environment ref="works-mod"/>
    <test>for $h in (/works) return $h//employee[last()]/string(@name)</test>
    <result-string>xs:string("Jane Doe 13")</result-string>
    <result>
      <assert-string-value>Jane Doe 13</assert-string-value>
    </result>
  </test-case>
  <test-case name="last-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Evaluation of "fn:last", where the context node is not defined. </description>
    <created by="Carmelo Montanez" on="2005-09-14"/>
    <environment ref="empty"/>
    <test>last()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPDY0002"))</result-string>
    <result>
      <error code="XPDY0002"/>
    </result>
  </test-case>
  <test-case name="last-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Evaluation of "fn:last", where the first item is selected. </description>
    <created by="Carmelo Montanez" on="2005-09-14"/>
    <environment ref="works-mod"/>
    <test>for $h in (/works/employee[12]) return $h/overtime[last() = 1]/*/string()</test>
    <result-string/>
    <result>
      <assert-deep-eq>"Monday", "Tuesday"</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="last-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Evaluation of "fn:last" together with "fn:position". </description>
    <created by="Carmelo Montanez" on="2005-09-14"/>
    <environment ref="works-mod"/>
    <test>for $h in (/works) return $h/employee[position() = last()]/string(@name)</test>
    <result-string>xs:string("Jane Doe 13")</result-string>
    <result>
      <assert-string-value>Jane Doe 13</assert-string-value>
    </result>
  </test-case>
  <test-case name="last-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Evaluation of "fn:last" together with "fn:position" (format last() = position()). </description>
    <created by="Carmelo Montanez" on="2005-09-14"/>
    <environment ref="works-mod"/>
    <test>for $h in (/works) return $h/employee[last() = position()]/string(@name)</test>
    <result-string>xs:string("Jane Doe 13")</result-string>
    <result>
      <assert-string-value>Jane Doe 13</assert-string-value>
    </result>
  </test-case>
  <test-case name="last-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Evaluation of "fn:last" together with the "" node operator </description>
    <created by="Carmelo Montanez" on="2005-09-14"/>
    <environment ref="works-mod"/>
    <test>
      <![CDATA[for $h in (/works) return $h/employee[last()] << $h/employee[last()]]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="last-7"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Evaluation of "fn:last" together with the "is" node operator casted to integer inside the predicate. </description>
    <created by="Carmelo Montanez" on="2005-11-29"/>
    <environment ref="works-mod"/>
    <test>for $h in (/works) return $h/employee[last()] is $h/employee[last()]</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="last-8"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Evaluation of "fn:last" where two last functions are used inside the predicate. </description>
    <created by="Carmelo Montanez" on="2005-09-14"/>
    <environment ref="works-mod"/>
    <test>for $h in (/works/employee[12]) return $h/overtime[last() = last()]/*/string()</test>
    <result-string/>
    <result>
      <assert-deep-eq>"Monday", "Tuesday"</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="last-9"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Evaluation of "fn:last" where the last function is used inside a second predicate. </description>
    <created by="Carmelo Montanez" on="2005-09-14"/>
    <environment ref="works-mod"/>
    <test>for $h in (/works) return $h//employee[@name="Jane Doe 13"][last() = 1]/string(@name)</test>
    <result-string>xs:string("Jane Doe 13")</result-string>
    <result>
      <assert-string-value>Jane Doe 13</assert-string-value>
    </result>
  </test-case>
  <test-case name="last-10"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Evaluation of "fn:last" where the last function is used inside the first predicate. </description>
    <created by="Carmelo Montanez" on="2005-09-14"/>
    <environment ref="works-mod"/>
    <test>for $h in (/works) return $h//employee[last() = 13][@name = "Jane Doe 13"]/string(@name)</test>
    <result-string>xs:string("Jane Doe 13")</result-string>
    <result>
      <assert-string-value>Jane Doe 13</assert-string-value>
    </result>
  </test-case>
  <test-case name="last-11"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Evaluation of "fn:position" used in conjunction with the fn:not function </description>
    <created by="Carmelo Montanez" on="2005-09-14"/>
    <environment ref="works-mod"/>
    <test>for $h in (/works/employee[12]/overtime) return $h/day[not(position() = 1)]</test>
    <result-string>xs:string("Tuesday")</result-string>
    <result>
      <assert-string-value>Tuesday</assert-string-value>
    </result>
  </test-case>
  <test-case name="last-12"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Evaluation of "fn:position" as a predicate to a wildcard (*). </description>
    <created by="Carmelo Montanez" on="2005-09-14"/>
    <environment ref="works-mod"/>
    <test>for $h in (/works/employee[12]/overtime) return $h/*[position() = position()]/string()</test>
    <result-string/>
    <result>
      <assert-deep-eq>"Monday", "Tuesday"</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="last-13"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Evaluation of "fn:position" used together with an addition operation. </description>
    <created by="Carmelo Montanez" on="2005-09-14"/>
    <environment ref="works-mod"/>
    <test>for $h in (/works) return $h/employee[position() = (2 + 2)]/string(@name)</test>
    <result-string>xs:string("John Doe 4")</result-string>
    <result>
      <assert-string-value>John Doe 4</assert-string-value>
    </result>
  </test-case>
  <test-case name="last-14"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Evaluation of "fn:position" used together with a subtraction operation. </description>
    <created by="Carmelo Montanez" on="2005-09-14"/>
    <environment ref="works-mod"/>
    <test>for $h in (/works) return $h/employee[position() = (5 - 2)]/string(@name)</test>
    <result-string>xs:string("Jane Doe 3")</result-string>
    <result>
      <assert-string-value>Jane Doe 3</assert-string-value>
    </result>
  </test-case>
  <test-case name="last-15"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Evaluation of "fn:position" used together with a multiplication operation. </description>
    <created by="Carmelo Montanez" on="2005-09-14"/>
    <environment ref="works-mod"/>
    <test>for $h in (/works) return $h/employee[position() = (3 * 2)]/string(@name)</test>
    <result-string>xs:string("John Doe 6")</result-string>
    <result>
      <assert-string-value>John Doe 6</assert-string-value>
    </result>
  </test-case>
  <test-case name="last-16"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Evaluation of "fn:position" used together with a division (div) operation. </description>
    <created by="Carmelo Montanez" on="2005-09-14"/>
    <environment ref="works-mod"/>
    <test>for $h in (/works) return $h/employee[position() = (6 div 2)]/string(@name)</test>
    <result-string>xs:string("Jane Doe 3")</result-string>
    <result>
      <assert-string-value>Jane Doe 3</assert-string-value>
    </result>
  </test-case>
  <test-case name="last-17"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Evaluation of "fn:position" used together with a division (idiv) operation. </description>
    <created by="Carmelo Montanez" on="2005-09-14"/>
    <environment ref="works-mod"/>
    <test>for $h in (/works) return $h/employee[position() = (6 idiv 2)]/string(@name)</test>
    <result-string>xs:string("Jane Doe 3")</result-string>
    <result>
      <assert-string-value>Jane Doe 3</assert-string-value>
    </result>
  </test-case>
  <test-case name="last-18"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Evaluation of "fn:position" used together with a logical expression ("and" operator and "true" function). </description>
    <created by="Carmelo Montanez" on="2005-09-14"/>
    <environment ref="works-mod"/>
    <test>for $h in (/works/employee[12]) return ($h/overtime[position() and fn:true()]/*/string())</test>
    <result-string/>
    <result>
      <assert-deep-eq>"Monday", "Tuesday"</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="last-19"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Evaluation of "fn:position" used together with a logical expression ("and" operator and "false" function). </description>
    <created by="Carmelo Montanez" on="2005-09-14"/>
    <environment ref="works-mod"/>
    <test>for $h in (/works/employee[12]) return $h/overtime[position() and fn:false()]</test>
    <result-string>()</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0005"))</result-string>
    <result>
      <any-of>
        <assert-empty/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="last-20"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Evaluation of "fn:position" used together with a logical expression ("or" operator and "true" function). </description>
    <created by="Carmelo Montanez" on="2005-09-14"/>
    <environment ref="works-mod"/>
    <test>for $h in (/works/employee[12]) return $h/overtime[position() or fn:true()]/*/string()</test>
    <result-string/>
    <result>
      <assert-deep-eq>"Monday", "Tuesday"</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="last-21"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Evaluation of "fn:position" used together with a logical expression ("or" operator and "false" function). </description>
    <created by="Carmelo Montanez" on="2005-09-14"/>
    <environment ref="works-mod"/>
    <test>for $h in (/works/employee[12]) return $h/overtime[position() or fn:false()]/*/string()</test>
    <result-string/>
    <result>
      <assert-deep-eq>"Monday", "Tuesday"</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="last-22"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Evaluation of "fn:position" used in the middle of a path expression. </description>
    <created by="Carmelo Montanez" on="2005-09-14"/>
    <environment ref="works-mod"/>
    <test>for $h in (/works) return $h/employee[position() = 12]/overtime/*/string()</test>
    <result-string/>
    <result>
      <assert-deep-eq>"Monday", "Tuesday"</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="last-23"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Evaluation of "last()" within a positional predicate </description>
    <created by="Michael Kay" on="2009-11-04"/>
    <environment ref="works-mod"/>
    <test>for $h in (/works) return $h/employee[position() = 5 to last()]/@name/string()</test>
    <result-string/>
    <result>
      <assert-deep-eq>"Jane Doe 5", "John Doe 6", "Jane Doe 7", "John Doe 8", 
            "Jane Doe 9", "John Doe 10", "Jane Doe 11", "John Doe 12", "Jane Doe 13"</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="last-24"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description>Top-level call on last()</description>
    <created by="Michael Kay" on="2011-07-01"/>
    <environment ref="works-mod"/>
    <test>last()</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K-ContextLastFunc-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> A test whose essence is: `last(1)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>last(1)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-ContextLastFunc-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("1")</response-string>
    <description> A test whose essence is: `(1, 2, 3)[if(1) then 1 else last()]`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(1, 2, 3)[if(1) then 1 else last()]</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K-ContextLastFunc-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> A test whose essence is: `deep-equal((1, 2, 3)[count((last(), last())) eq 2], (1, 2, 3))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal((1, 2, 3)[count((last(), last())) eq 2], (1, 2, 3))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-ContextLastFunc-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> A test whose essence is: `deep-equal((1, 2, 3)[last() eq last()], (1, 2, 3))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal((1, 2, 3)[last() eq last()], (1, 2, 3))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-ContextLastFunc-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> A test whose essence is: `(1, 2, 3, current-time())[last() - 1] treat as xs:integer eq 3`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(1, 2, 3, current-time())[last() - 1] treat as xs:integer eq 3</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-ContextLastFunc-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> A test whose essence is: `empty((1, 2, 3, current-time())[last() + 1])`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty((1, 2, 3, current-time())[last() + 1])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-ContextLastFunc-7"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> fn:last() can never return 0(&apos;=&apos;). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [last() = 0])</test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0005"))</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-ContextLastFunc-8"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> fn:last() can never return 0(&apos;=&apos;), #2. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [0 = last()])</test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0005"))</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-ContextLastFunc-9"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> fn:last() can never return 0(&apos;eq&apos;). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [last() eq 0])</test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0005"))</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-ContextLastFunc-10"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> fn:last() can never return 0(&apos;eq&apos;), #2. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [0 eq last()])</test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0005"))</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-ContextLastFunc-11"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> fn:last() can never return 0(&apos;!=&apos;). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [last() != 0], (1, 2, 3, 4))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-ContextLastFunc-12"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> fn:last() can never return 0(&apos;ne&apos;). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [last() ne 0], (1, 2, 3, 4))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-ContextLastFunc-13"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> fn:last() can never return 0(&apos;!=&apos;). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [0 != last()], (1, 2, 3, 4))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-ContextLastFunc-14"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> fn:last() can never return 0(&apos;ne&apos;), #2. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [0 ne last()], (1, 2, 3, 4))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-ContextLastFunc-15"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> fn:last() can never return anything less than 1(lt). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [last() lt 1])</test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0005"))</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-ContextLastFunc-16"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> fn:last() can never return anything less than 1(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>
      <![CDATA[empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [last() < 1])]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0005"))</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-ContextLastFunc-17"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> fn:last() can never return anything less or equal to 0(le). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [last() le 0])</test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0005"))</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-ContextLastFunc-18"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> fn:last() can never return anything less or equal to 0(=). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>
      <![CDATA[empty((1, 2, 3, current-time(), current-date(), 6, 7, 8) [last() <= 0])]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0005"))</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-ContextLastFunc-19"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> The return value of fn:last() is always greater than 0(&apos;ne&apos;). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [last()  0], (1, 2, 3, 4))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-ContextLastFunc-20"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> The return value of fn:last() is always greater than 0(&apos;&apos;). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [last()  0], (1, 2, 3, 4))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-ContextLastFunc-21"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> The return value of fn:last() is always greater than 0(&apos;gt&apos;). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [last() gt 0], (1, 2, 3, 4))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-ContextLastFunc-22"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> The return value of fn:last() is always greater or equal to 0(&apos;=&apos;). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [last() = 1], (1, 2, 3, 4))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-ContextLastFunc-23"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> The return value of fn:last() is always greater or equal to 0(&apos;ge&apos;). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal( (1, 2, 3, remove((current-time(), 4), 1)) [last() ge 1], (1, 2, 3, 4))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-ContextLastFunc-24"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> fn:last() inside a predicate combined with a offset. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(1, 2, 3, 4, current-time(), 4, 5, 6)[last() - 2] treat as xs:integer eq 4</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-ContextLastFunc-25"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> fn:last() inside a predicate combined with a offset. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(1, 2, 3, 4, current-time(), 4, 5, 6)[last() - 1] treat as xs:integer eq 5</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-ContextLastFunc-26"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> fn:last() inside a predicate. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(1, 2, 3, 4, current-time(), 4, 5, 6)[last()] treat as xs:integer eq 6</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-ContextLastFunc-27"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> fn:last() inside a predicate and an insignificant offset. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(1, 2, 3, 4, current-time(), 4, 5, 6)[last() - 0] treat as xs:integer eq 6</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-ContextLastFunc-28"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> fn:last() inside a predicate combined with a range expression. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(1 to 6)[last()] eq 6</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-ContextLastFunc-29"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("-8")</response-string>
    <description> fn:last() inside a predicate combined with a range expression and offset. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(-20 to -5)[last() - 3]</test>
    <result-string>xs:integer("-8")</result-string>
    <result>
      <assert-eq>-8</assert-eq>
    </result>
  </test-case>
  <test-case name="cbcl-last-in-sequence-001"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("3")</response-string>
    <description> test fn:first-in-sequence on sub-expression where quant = 1 </description>
    <created by="Tim Mills" on="2008-04-15"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:generate($arg as xs:integer?) { if ($arg = 0) then (1, 2, 3) else () }; 
      	( local:generate(0), 1, local:generate(0) )[last()]
      </test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-last-in-sequence-002"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> test fn:first-in-sequence on a for expression </description>
    <created by="Tim Mills" on="2008-04-15"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:generate($arg as xs:integer?) as xs:integer* { if ($arg = 0) then (1, 2, 3) else $arg }; 
      	( local:generate(()), for $x in local:generate(0) return $x + 2 )[last()]
      </test>
    <result-string>xs:string("5")</result-string>
    <result>
      <assert-string-value>5</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-last-in-sequence-003"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> test fn:first-in-sequence on a for expression </description>
    <created by="Tim Mills" on="2008-04-15"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:generate($arg as xs:integer?) as xs:integer? { if ($arg = 0) then 0 else () }; 
      	( local:generate(()), for $x in local:generate(0) return $x + 2 )[last()]
      </test>
    <result-string>xs:string("2")</result-string>
    <result>
      <assert-string-value>2</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-last-in-sequence-004"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> test fn:first-in-sequence on a for-at expression </description>
    <created by="Tim Mills" on="2008-04-15"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:generate($arg as xs:integer?) as xs:integer* { if ($arg = 0) then ( 1, 2, 3 ) else ( $arg ) }; 
      	( local:generate(()), for $x at $p in local:generate(0) return $p + $x)[last()]
      </test>
    <result-string>xs:string("6")</result-string>
    <result>
      <assert-string-value>6</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-last-in-sequence-005"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> test fn:first-in-sequence on a for-at expression </description>
    <created by="Tim Mills" on="2008-04-15"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:generate($arg as xs:integer?) as xs:integer? { if ($arg = 0) then 1 else $arg }; 
      	( local:generate(()), for $x at $p in local:generate(0) return $p + $x)[last()]
      </test>
    <result-string>xs:string("2")</result-string>
    <result>
      <assert-string-value>2</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-last-in-sequence-006"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> test fn:first-in-sequence on a map expression </description>
    <created by="Tim Mills" on="2008-04-15"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:generate($arg as xs:integer?) as xs:string* { if ($arg = 0) then (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;) else (&apos;d&apos; ) }; 
      	( if (local:generate(1) = &apos;d&apos;) then () else 1, for $x in local:generate(0) return fn:lower-case($x))[last()]
      </test>
    <result-string>xs:string("c")</result-string>
    <result>
      <assert-string-value>c</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-last-in-sequence-007"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> test fn:first-in-sequence on a map expression </description>
    <created by="Tim Mills" on="2008-04-15"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:generate($arg as xs:integer?) as xs:integer? { $arg }; 
      	( if (local:generate(0) = 0) then () else 1, for $x in local:generate(0) return -$x)[last()]
      </test>
    <result-string>xs:string("0")</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-last-in-sequence-008"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;b&gt;cheese&lt;/b&gt;</response-string>
    <description> test fn:first-in-sequence on a distinct-doc-order </description>
    <created by="Tim Mills" on="2008-04-15"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[( (<a><b>cheese</b></a>)/b )[last()]]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>bcheese/b</assert-xml>
    </result>
  </test-case>
  <test-case name="cbcl-last-in-sequence-009"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> test fn:first-in-sequence on a for-each expression Author: Tim Mills </description>
    <created by="Oliver Hallam" on="2008-04-15"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:generate($arg as xs:integer?) as xs:string* { if ($arg = 0) then (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;) else () }; 
      	( local:generate(()), for $x in local:generate(0) return 3)[last()]
      </test>
    <result-string>xs:string("3")</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-last-in-sequence-010"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> test fn:boolean on fn:first-in-sequence </description>
    <created by="Oliver Hallam" on="2008-04-22"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      	declare function local:generate($arg as xs:integer?) as xs:string* { if ($arg = 0) then (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;) else () }; 
      	boolean(local:generate(0)[last()])
      </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="cbcl-last-in-sequence-011"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> test fn:boolean on fn:first-in-sequence </description>
    <created by="Oliver Hallam" on="2008-04-22"/>
    <dependency type="spec" value="XQ10+"/>
    <test>declare function local:generate($arg as xs:integer?) as xs:string* { if ($arg = 0) then (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;) else () }; boolean(local:generate(1)[last()])</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="cbcl-last-in-sequence-012"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> test fn:first-in-sequence on a for-each expression </description>
    <created by="Oliver Hallam" on="2008-04-22"/>
    <dependency type="spec" value="XQ10+"/>
    <test>declare function local:generate($arg as xs:boolean) as xs:string+ { if ($arg) then (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;) else (&apos;A&apos;, &apos;B&apos;, &apos;C&apos;) }; ( for $x in local:generate(true()) return 3)[last()]</test>
    <result-string>xs:string("3")</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
</test-set>