<test-set name="fn-name" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">
  <description/>
  <link document="http://www.w3.org/TR/xpath-functions-30/" idref="func-name" type="spec"/>
  <test-case name="fn-name-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description>argument set to the empty sequence. Uses the fn:string-length function to avoid empty file.</description>
    <created by="Carmelo Montanez" on="2005-09-07"/>
    <environment ref="empty"/>
    <test>fn:string-length(fn:name(()))</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-name-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("employee")</response-string>
    <description>argument set to an element node.</description>
    <created by="Carmelo Montanez" on="2005-09-07"/>
    <environment ref="works-mod"/>
    <test>(fn:name(./works[1]/employee[1]))</test>
    <result-string>xs:string("employee")</result-string>
    <result>
      <assert-string-value>employee</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-name-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("name")</response-string>
    <description>argument set to an attribute node. insert-start insert-end</description>
    <created by="Carmelo Montanez" on="2005-09-07"/>
    <environment ref="works-mod"/>
    <test>(fn:name(./works[1]/employee[1]/@name))</test>
    <result-string>xs:string("name")</result-string>
    <result>
      <assert-string-value>name</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-name-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string>
    <description>argument set to a document node. Use of "fn:string-length" to avoid empty file. insert-start insert-end</description>
    <created by="Carmelo Montanez" on="2005-09-07"/>
    <environment ref="works-mod"/>
    <test>fn:string-length(fn:name(.))</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-name-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description>argument set to a non existing element. Use of "fn:string-length" to avoid empty file. insert-start insert-end</description>
    <created by="Carmelo Montanez" on="2005-09-07"/>
    <environment ref="works-mod"/>
    <test>fn:string-length(fn:name(./works[1]/nonexistent[1]))</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-name-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description>argument set to a non existing element. Use of "fn:string-length" to avoid empty file.</description>
    <created by="Carmelo Montanez" on="2005-09-07"/>
    <environment ref="works-mod"/>
    <test>for $h in ./works[1]/employee[2] return
         fn:string-length(fn:name($h/child::text()[last()]))</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-name-7"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("")</response-string>
    <description>undefined context node.</description>
    <created by="Carmelo Montanez" on="2005-09-07"/>
    <environment ref="empty"/>
    <test>fn:name()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPDY0002"))</result-string>
    <result>
      <error code="XPDY0002"/>
    </result>
  </test-case>
  <test-case name="fn-name-8"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description>argument to the fn:upper-case function</description>
    <created by="Carmelo Montanez" on="2005-09-07"/>
    <environment ref="works-mod"/>
    <test>for $h in (./works/employee[2]) return fn:upper-case(fn:name($h))</test>
    <result-string>xs:string("EMPLOYEE")</result-string>
    <result>
      <assert-string-value>EMPLOYEE</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-name-9"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description>argument to the fn:lower-case function</description>
    <created by="Carmelo Montanez" on="2005-09-07"/>
    <environment ref="works-mod"/>
    <test>for $h in (./works/employee[2]) return fn:lower-case(fn:name($h))</test>
    <result-string>xs:string("employee")</result-string>
    <result>
      <assert-string-value>employee</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-name-10"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description>that uses the "parent" axes</description>
    <created by="Carmelo Montanez" on="2005-09-07"/>
    <environment ref="works-mod"/>
    <test>for $h in (./works/employee[2]) return fn:name($h/parent::node())</test>
    <result-string>xs:string("works")</result-string>
    <result>
      <assert-string-value>works</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-name-11"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description>that uses the "descendant" axes</description>
    <created by="Carmelo Montanez" on="2005-09-07"/>
    <environment ref="works-mod"/>
    <test>for $h in (./works/employee[2]) return fn:name($h/descendant::empnum[position() =
         1])</test>
    <result-string>xs:string("empnum")</result-string>
    <result>
      <assert-string-value>empnum</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-name-12"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description>that uses the "descendant-or-self" axes</description>
    <created by="Carmelo Montanez" on="2005-09-07"/>
    <environment ref="works-mod"/>
    <test>for $h in (./works/employee[2]) return fn:name($h/descendant-or-self::empnum[position()
         = 1])</test>
    <result-string>xs:string("empnum")</result-string>
    <result>
      <assert-string-value>empnum</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-name-13"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description>argument to the fn-subtstring function.</description>
    <created by="Carmelo Montanez" on="2005-09-07"/>
    <environment ref="works-mod"/>
    <test>for $h in (./works/employee[2]) return fn:substring(fn:name($h),2)</test>
    <result-string>xs:string("mployee")</result-string>
    <result>
      <assert-string-value>mployee</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-name-14"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description>argument to the fn:concat function.</description>
    <created by="Carmelo Montanez" on="2005-09-07"/>
    <environment ref="works-mod"/>
    <test>for $h in (/works/employee[2]) return fn:concat(fn:name($h),"A String")</test>
    <result-string>xs:string("employeeA String")</result-string>
    <result>
      <assert-string-value>employeeA String</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-name-15"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description>that uses the "self" axes. Returns a string</description>
    <created by="Carmelo Montanez" on="2005-09-07"/>
    <environment ref="works-mod"/>
    <test>for $h in (./works/employee[2]) return fn:name($h/self::employee)</test>
    <result-string>xs:string("employee")</result-string>
    <result>
      <assert-string-value>employee</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-name-16"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description>that uses the "self" axes. Returns a empty sequence Uses fn:count to avoid empty file.</description>
    <created by="Carmelo Montanez" on="2005-09-07"/>
    <environment ref="works-mod"/>
    <test>for $h in (./works/employee[2]) return fn:count(fn:name($h/self::div))</test>
    <result-string>xs:string("1")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0005"))</result-string>
    <result>
      <any-of>
        <assert-string-value>1</assert-string-value>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="fn-name-17"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description>that uses the "parent::node()". The context node is an attribute node.</description>
    <created by="Carmelo Montanez" on="2005-09-07"/>
    <environment ref="works-mod"/>
    <test> for $h in (/works/employee[2]/@name) return fn:name($h/parent::node())</test>
    <result-string>xs:string("employee")</result-string>
    <result>
      <assert-string-value>employee</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-name-18"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("4")</response-string>
    <description>Evaluation of the fn:name function as an argument to the string-length function. The context node is an attribute node.</description>
    <created by="Carmelo Montanez" on="2005-09-07"/>
    <environment ref="works-mod"/>
    <test>fn:string-length(fn:name(./works[1]/employee[2]/@name))</test>
    <result-string>xs:integer("4")</result-string>
    <result>
      <assert-string-value>4</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-name-19"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("anElement")</response-string>
    <description>Evaluation of the fn:name function, for which the argument is a direct element constructor. The context node is an attribute node. </description>
    <created by="Carmelo Montanez" on="2005-09-07"/>
    <environment ref="empty"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[fn:name(<anElement>Content</anElement>)]]>
    </test>
    <result-string>xs:string("anElement")</result-string>
    <result>
      <assert-string-value>anElement</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-name-20"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("anElement")</response-string>
    <description>Evaluation of the fn:name function, for which the argument is a direct element constructor with an attribute.</description>
    <created by="Carmelo Montanez" on="2005-09-07"/>
    <environment ref="empty"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[fn:name(<anElement name="attribute1">Content</anElement>)]]>
    </test>
    <result-string>xs:string("anElement")</result-string>
    <result>
      <assert-string-value>anElement</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-name-21"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("employee"),xs:string("employee"))</response-string>
    <description>Evaluation of the fn:name function used as part of a sequence.</description>
    <created by="Carmelo Montanez" on="2005-09-07"/>
    <environment ref="works-mod"/>
    <test>(fn:name(./works[1]/employee[1]),fn:name(./works[1]/employee[2]))</test>
    <result-string>(xs:string("employee"),xs:string("employee"))</result-string>
    <result>
      <assert-string-value>employee employee</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-name-22"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("2")</response-string>
    <description>fn:count.</description>
    <created by="Carmelo Montanez" on="2005-09-07"/>
    <environment ref="works-mod"/>
    <test>fn:count(((fn:name(/works[1]/employee[1]),fn:name(/works[1]/employee[2]))))</test>
    <result-string>xs:integer("2")</result-string>
    <result>
      <assert-eq>2</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-name-23"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("")</response-string>
    <description>undefined context node and argument set to ".".</description>
    <created by="Carmelo Montanez" on="2006-02-08"/>
    <environment ref="empty"/>
    <test>fn:name(.)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPDY0002"))</result-string>
    <result>
      <error code="XPDY0002"/>
    </result>
  </test-case>
  <test-case name="fn-name-24"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("ma:AuctionWatchList")</response-string>
    <description/>
    <created by="Michael Kay" on="2010-12-10"/>
    <environment ref="auction"/>
    <test>name(/*)</test>
    <result-string>xs:string("ma:AuctionWatchList")</result-string>
    <result>
      <assert-string-value>ma:AuctionWatchList</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-name-25"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("#sequence")</response-string>
    <description/>
    <created by="Michael Kay" on="2010-12-10"/>
    <environment ref="auction"/>
    <test>name((//*:Start)[1]/@*)</test>
    <result-string>xs:string("ma:currency")</result-string>
    <result>
      <assert-string-value>ma:currency</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-name-26"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("#sequence")</response-string>
    <description/>
    <created by="Michael Kay" on="2010-12-10"/>
    <environment ref="auction"/>
    <test>name((//@xml:*)[1])</test>
    <result-string>xs:string("xml:lang")</result-string>
    <result>
      <assert-string-value>xml:lang</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-name-27"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Get the name of a namespace node.</description>
    <created by="Michael Kay" on="2010-12-10"/>
    <environment ref="auction"/>
    <dependency type="feature" value="namespace-axis"/>
    <dependency type="spec" value="XP20+"/>
    <test>name((//namespace::*[.=&apos;http://www.w3.org/1999/xlink&apos;])[1])</test>
    <result-string>xs:string("xlink")</result-string>
    <result>
      <assert-string-value>xlink</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-name-28"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("xml-stylesheet")</response-string>
    <description>Get the name of a processing-instruction node.</description>
    <created by="Michael Kay" on="2010-12-10"/>
    <environment ref="auction"/>
    <test>name((//processing-instruction())[1])</test>
    <result-string>xs:string("xml-stylesheet")</result-string>
    <result>
      <assert-string-value>xml-stylesheet</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-name-29"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("recorded")</response-string>
    <description>Get the name of an element in a default but non-null namespace.</description>
    <created by="Michael Kay" on="2010-12-10"/>
    <environment ref="auction"/>
    <test>name((//*[.=&apos;1983&apos;])[1])</test>
    <result-string>xs:string("recorded")</result-string>
    <result>
      <assert-string-value>recorded</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-name-30"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description>Get the name of a comment node</description>
    <created by="Michael Kay" on="2010-12-10"/>
    <environment ref="auction"/>
    <test>name((//comment())[1]) = &apos;&apos;</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="fn-name-31"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Get the name of a text node</description>
    <created by="Michael Kay" on="2010-12-10"/>
    <environment ref="auction"/>
    <test>name((//text())[1]) = &apos;&apos;</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-NameFunc-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description>Test: K-NameFunc-1 `name((), "wrong param")`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <environment ref="empty"/>
    <test>name((), "wrong param")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-NameFunc-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description>Test: K-NameFunc-2 `if(false()) then name() else true()`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <environment ref="empty"/>
    <test>if(false()) then name() else true()</test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPDY0002"))</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPDY0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-NameFunc-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description>Test: K-NameFunc-3 `name(()) eq ""`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <environment ref="empty"/>
    <test>name(()) eq ""</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
</test-set>