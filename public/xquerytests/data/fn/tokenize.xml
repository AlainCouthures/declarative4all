<test-set name="fn-tokenize" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">
  <description>Tests the fn:tokenize() function</description>
  <link document="http://www.w3.org/TR/xpath-functions-30/" idref="func-tokenize" type="spec"/>
  <test-case name="fn-tokenize-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("")</response-string>
    <description> Evaluation of tokenize function where pattern matches the zero length string. Given on example 3 for this function in the Func and Ops specs. </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize("abba", ".?")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORX0003"))</result-string>
    <result>
      <error code="FORX0003"/>
    </result>
  </test-case>
  <test-case name="fn-tokenize-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Evaluation of tokenize function whith an invalid value for the flags </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize("The cat sat on the mat", "\s+", "t")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORX0001"))</result-string>
    <result>
      <error code="FORX0001"/>
    </result>
  </test-case>
  <test-case name="fn-tokenize-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("The"),xs:string("cat"),xs:string("sat"),xs:string("on"),xs:string("the"),xs:string("mat"))</response-string>
    <description> Evaluation of tokenize function with pattern set to "\s+" as per example 1 for this functions from the Func and Ops specs. </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize("The cat sat on the mat", "\s+")</test>
    <result-string>(xs:string("The"),xs:string("cat"),xs:string("sat"),xs:string("on"),xs:string("the"),xs:string("mat"))</result-string>
    <result>
      <assert-string-value>The cat sat on the mat</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-tokenize-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("1"),xs:string("15"),xs:string("24"),xs:string("50"))</response-string>
    <description> Evaluation of tokenize function with pattern set to "\s*" as per example 2 for this functions from the Func and Ops specs. </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize("1, 15, 24, 50", ",\s*")</test>
    <result-string>(xs:string("1"),xs:string("15"),xs:string("24"),xs:string("50"))</result-string>
    <result>
      <assert-string-value>1 15 24 50</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-tokenize-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("Some unparsed"),xs:string("HTML"),xs:string("text"))</response-string>
    <description> Evaluation of tokenize function with pattern set to "\s*br\s*" and flag set to "i" as per example 4 for this functions from the Func and Ops specs. </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>
      <![CDATA[fn:tokenize("Some unparsed <br> HTML <BR> text", "\s*<br>\s*", "i")]]>
    </test>
    <result-string/>
    <result>
      <assert-deep-eq>"Some unparsed", "HTML", "text"</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("Some unparsed"),xs:string("HTML &amp;lt;BR&amp;gt; text"))</response-string>
    <description> Evaluation of tokenize function with pattern with flags arguments set to empty string. </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>
      <![CDATA[fn:tokenize("Some unparsed <br> HTML <BR> text", "\s*<br>\s*", "")]]>
    </test>
    <result-string/>
    <result>
      <assert-deep-eq>"Some unparsed", "HTML BR text"</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-7"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string>
    <description> Evaluation of tokenize function with $input set to empty sequence Uses fn:count to avoid empty file. </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:count(fn:tokenize((), "\s+"))</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-8"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string>
    <description> Evaluation of tokenize function with $input set to zero length string. Uses fn:count to avoid empty file. </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:count(fn:tokenize("", "\s+"))</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-9"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("#r#c#d#r#")</response-string>
    <description> Evaluation of tokenize function with two patterms matching the input string. </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>string-join(fn:tokenize("abracadabra", "(ab)|(a)"), &apos;#&apos;)</test>
    <result-string>xs:string("#r#c#d#r#")</result-string>
    <result>
      <assert-string-value>#r#c#d#r#</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-tokenize-10"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("abracadabra")</response-string>
    <description> Evaluation of tokenize function with pattern that does not match the input string. </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize("abracadabra", "ww")</test>
    <result-string>xs:string("abracadabra")</result-string>
    <result>
      <assert-string-value>abracadabra</assert-string-value>
    </result>
  </test-case>
  <test-case name="fn-tokenize-11"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string(""),xs:string("bracadabra"))</response-string>
    <description> Evaluation of tokenize function with pattern set to "^a". </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize("abracadabra", "^a")</test>
    <result-string/>
    <result>
      <assert-deep-eq>"", "bracadabra"</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-12"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("abracadabra"),xs:string("abracadabra"))</response-string>
    <description> Evaluation of tokenize function with pattern set to "\^". </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize("abracadabra^abracadabra", "\^")</test>
    <result-string/>
    <result>
      <assert-deep-eq>"abracadabra", "abracadabra"</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-13"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("abracadabra"),xs:string("abracadabra"))</response-string>
    <description> Evaluation of tokenize function with pattern set to "\?" for an input string that contains "?". </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize("abracadabra?abracadabra", "\?")</test>
    <result-string/>
    <result>
      <assert-deep-eq>"abracadabra", "abracadabra"</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-14"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("abracadabra"),xs:string("abracadabra"))</response-string>
    <description> Evaluation of tokenize function with pattern set to "\*" for an input string that contains "*". </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize("abracadabra*abracadabra", "\*")</test>
    <result-string/>
    <result>
      <assert-deep-eq>"abracadabra", "abracadabra"</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-15"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("abracadabra"),xs:string("abracadabra"))</response-string>
    <description> Evaluation of tokenize function with pattern set to "\+" for an input string that contains "+". </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize("abracadabra+abracadabra", "\+")</test>
    <result-string/>
    <result>
      <assert-deep-eq>"abracadabra", "abracadabra"</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-16"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("abracadabra"),xs:string("abracadabra"))</response-string>
    <description> Evaluation of tokenize function with pattern set to "\{" for an input string that contains "}". </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize("abracadabra{abracadabra", "\{")</test>
    <result-string/>
    <result>
      <assert-deep-eq>"abracadabra", "abracadabra"</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-17"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("abracadabra"),xs:string("abracadabra"))</response-string>
    <description> Evaluation of tokenize function with pattern set to "\}" for an input string that contains "}". </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize("abracadabra}abracadabra", "\}")</test>
    <result-string/>
    <result>
      <assert-deep-eq>"abracadabra", "abracadabra"</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-18"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("abracadabra"),xs:string("abracadabra"))</response-string>
    <description> Evaluation of tokenize function with pattern set to "\(" for an input string that contains "(". </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize("abracadabra(abracadabra", "\(")</test>
    <result-string/>
    <result>
      <assert-deep-eq>"abracadabra", "abracadabra"</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-19"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("abracadabra"),xs:string("abracadabra"))</response-string>
    <description> Evaluation of tokenize function with pattern set to "\)" for an input string that contains ")". </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize("abracadabra)abracadabra", "\)")</test>
    <result-string/>
    <result>
      <assert-deep-eq>"abracadabra", "abracadabra"</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-20"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("abracadabra"),xs:string("abracadabra"))</response-string>
    <description> Evaluation of tokenize function with pattern set to "\[" for an input string that contains "[". </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize("abracadabra[abracadabra", "\[")</test>
    <result-string/>
    <result>
      <assert-deep-eq>"abracadabra", "abracadabra"</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-21"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("abracadabra"),xs:string("abracadabra"))</response-string>
    <description> Evaluation of tokenize function with pattern set to "\]" for an input string that contains "]". </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize("abracadabra]abracadabra", "\]")</test>
    <result-string/>
    <result>
      <assert-deep-eq>"abracadabra", "abracadabra"</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-22"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("abracadabra"),xs:string("abracadabra"))</response-string>
    <description> Evaluation of tokenize function with pattern set to "\-" for an input string that contains "-". </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize("abracadabra-abracadabra", "\-")</test>
    <result-string/>
    <result>
      <assert-deep-eq>"abracadabra", "abracadabra"</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-23"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("abracadabra"),xs:string("abracadabra"))</response-string>
    <description> Evaluation of tokenize function with pattern set to "\." for an input string that contains ".". </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize("abracadabra.abracadabra", "\.")</test>
    <result-string/>
    <result>
      <assert-deep-eq>"abracadabra", "abracadabra"</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-24"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("abracadabra"),xs:string("abracadabra"))</response-string>
    <description> Evaluation of tokenize function with pattern set to "\|" for an input string that contains "|". </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize("abracadabra|abracadabra", "\|")</test>
    <result-string/>
    <result>
      <assert-deep-eq>"abracadabra", "abracadabra"</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-25"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("abracadabra"),xs:string("abracadabra"))</response-string>
    <description> Evaluation of tokenize function with pattern set to "\\" for an input string that contains "\". </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize("abracadabra\abracadabra", "\\")</test>
    <result-string/>
    <result>
      <assert-deep-eq>"abracadabra", "abracadabra"</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-26"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("abracadabra"),xs:string("abracadabra"))</response-string>
    <description> Evaluation of tokenize function with pattern set to "\t" for an input string that contains the tab character. </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize("abracadabra	abracadabra", "\t")</test>
    <result-string/>
    <result>
      <assert-deep-eq>"abracadabra", "abracadabra"</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-27"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("abracadabra"),xs:string("abracadabra"))</response-string>
    <description> Evaluation of tokenize function with pattern set to "\n" for an input string that contains the newline character. </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize("abracadabra
abracadabra", "\n")</test>
    <result-string/>
    <result>
      <assert-deep-eq>"abracadabra", "abracadabra"</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-28"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("abracadabr"),xs:string("bracadabra"))</response-string>
    <description> Evaluation of tokenize function with pattern set to "aa{1}" (exact quantity) for an input string that contains the "aa" string. </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize("abracadabraabracadabra", "aa{1}")</test>
    <result-string/>
    <result>
      <assert-deep-eq>"abracadabr", "bracadabra"</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-29"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("abracadabr"),xs:string("bracadabr"),xs:string("bracadabra"))</response-string>
    <description> Evaluation of tokenize function with pattern set to "aa{1,}" (min quantity) for an input string that contains the "aa" string twice. </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize("abracadabraabracadabraabracadabra", "aa{1,}")</test>
    <result-string/>
    <result>
      <assert-deep-eq>"abracadabr", "bracadabr", "bracadabra"</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-30"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("abracadabr"),xs:string("bracadabr"),xs:string("bracadabra"))</response-string>
    <description> Evaluation of tokenize function with pattern set to "aa{1,2}" (range quantity) for an input string that contains the "aa" string twice. </description>
    <created by="Carmelo Montanez" on="2005-10-13"/>
    <test>fn:tokenize("abracadabraabracadabraabracadabra", "aa{1,2}")</test>
    <result-string/>
    <result>
      <assert-deep-eq>"abracadabr", "bracadabr", "bracadabra"</assert-deep-eq>
    </result>
  </test-case>
  <test-case covers="regex-q-flag" name="fn-tokenize-31"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Evaluation of tokenize function with regex &apos;q&apos; flag. </description>
    <created by="Michael Kay" on="2012-07-09"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>fn:tokenize("abc.def.gh.ijk", ".", "q")</test>
    <result-string/>
    <result>
      <assert-deep-eq>"abc", "def", "gh", "ijk"</assert-deep-eq>
    </result>
  </test-case>
  <test-case covers="regex-q-flag" name="fn-tokenize-32"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Evaluation of tokenize function with regex &apos;q&apos; and "i" flags. </description>
    <created by="Michael Kay" on="2012-07-09"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>fn:tokenize("A.BRA.CADA.BRA", "a.", "qi")</test>
    <result-string/>
    <result>
      <assert-deep-eq>"", "BR", "CAD", "BRA"</assert-deep-eq>
    </result>
  </test-case>
  <test-case covers="regex-non-capturing" name="fn-tokenize-33"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string(""),xs:string("RACAD"),xs:string("RA"))</response-string>
    <description> Evaluation of tokenize function with non-capturing group in the regex. </description>
    <created by="Michael Kay" on="2012-07-12"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>fn:tokenize("ABRACADABRA", "A(?:B)")</test>
    <result-string/>
    <result>
      <assert-deep-eq>"", "RACAD", "RA"</assert-deep-eq>
    </result>
  </test-case>
  <test-case covers="regex-dot-matching-cr" name="fn-tokenize-34"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("Mary&amp;#13;Jones")</response-string>
    <description> "." does NOT match CR in default mode</description>
    <created by="Tim Mills" on="2012-09-25"/>
    <test>fn:tokenize(concat(&apos;Mary&apos;, codepoints-to-string(13), &apos;Jones&apos;), &apos;y.J&apos;)</test>
    <result-string>xs:string("Mary&amp;#13;Jones")</result-string>
    <result>
      <assert-eq>concat(&apos;Mary&apos;, codepoints-to-string(13), &apos;Jones&apos;)</assert-eq>
    </result>
  </test-case>
  <test-case covers="regex-dot-matching-cr" name="fn-tokenize-35"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("Mar"),xs:string("ones"))</response-string>
    <description> "." does match CR in dot-all mode</description>
    <created by="Tim Mills" on="2012-09-25"/>
    <test>fn:tokenize(concat(&apos;Mary&apos;, codepoints-to-string(13), &apos;Jones&apos;), &apos;y.J&apos;, &apos;s&apos;)</test>
    <result-string/>
    <result>
      <assert-deep-eq>"Mar", "ones"</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="fn-tokenize-36"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("")</response-string>
    <description> Regex must be one that does not match a zero-length string </description>
    <created by="Michael Kay" on="2013-05-03"/>
    <test>fn:tokenize(concat(&apos;Mary&apos;, codepoints-to-string(10), &apos;Jones&apos;), &apos;^&apos;, &apos;m&apos;)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORX0003"))</result-string>
    <result>
      <error code="FORX0003"/>
    </result>
  </test-case>
  <test-case name="fn-tokenize-37"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("")</response-string>
    <description> Regex must be one that does not match a zero-length string </description>
    <created by="Michael Kay" on="2013-05-03"/>
    <test>fn:tokenize(concat(&apos;Mary&apos;, codepoints-to-string(10), &apos;Jones&apos;), &apos;$&apos;, &apos;m&apos;)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORX0003"))</result-string>
    <result>
      <error code="FORX0003"/>
    </result>
  </test-case>
  <test-case name="fn-tokenize-38"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("Mary&amp;#10;Jones")</response-string>
    <description> Regex must be one that does not match a zero-length string </description>
    <created by="Michael Kay" on="2013-05-03"/>
    <test>fn:tokenize(concat(&apos;Mary&apos;, codepoints-to-string(10), &apos;Jones&apos;), &apos;^[\s]*$&apos;, &apos;m&apos;)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORX0003"))</result-string>
    <result>
      <error code="FORX0003"/>
    </result>
  </test-case>
  <test-case name="K-TokenizeFunc-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("input")</response-string>
    <description> fn:tokenize takes at least two arguments. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>tokenize("input")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-TokenizeFunc-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> The pattern can&apos;t be the empty sequence. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>tokenize("input", ())</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-TokenizeFunc-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> The flags argument cannot contain whitespace. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>tokenize("input", "pattern", " ")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORX0001"))</result-string>
    <result>
      <error code="FORX0001"/>
    </result>
  </test-case>
  <test-case name="K-TokenizeFunc-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> The flags argument cannot contain &apos;X&apos;. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>tokenize("input", "pattern", "X")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORX0001"))</result-string>
    <result>
      <error code="FORX0001"/>
    </result>
  </test-case>
  <test-case name="K-TokenizeFunc-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> Only three arguments are accepted. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>tokenize("input", "pattern", "", ())</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K2-TokenizeFunc-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> fn:tokenize with a positional predicate. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:tokenize(("abracadabra", current-time())[1] treat as xs:string, "(ab)|(a)")[last()] eq ""</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-TokenizeFunc-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> fn:tokenize with a positional predicate. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(fn:tokenize(("abracadabra", current-time())[1] treat as xs:string, "(ab)|(a)")[last() + 1])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-TokenizeFunc-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> fn:tokenize with a positional predicate(#2). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:tokenize(("abracadabra", current-time())[1] treat as xs:string, "(ab)|(a)")[last() - 1]</test>
    <result-string>xs:string("r")</result-string>
    <result>
      <assert-string-value>r</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-TokenizeFunc-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> fn:tokenize with a positional predicate(#3). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:tokenize(("abracadabra", current-time())[1] treat as xs:string, "(ab)|(a)")[last() - 3]</test>
    <result-string>xs:string("c")</result-string>
    <result>
      <assert-string-value>c</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-TokenizeFunc-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Tokenize a sequence of words. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal(fn:tokenize("The cat sat on the mat", "\s+"), ("The", "cat", "sat", "on", "the", "mat")), count(fn:tokenize("The cat sat on the mat", "\s+")), count(fn:tokenize(" The cat sat on the mat ", "\s+")), fn:tokenize("The cat sat on the mat", "\s+")</test>
    <result-string>xs:string("true 6 8 The cat sat on the mat")</result-string>
    <result>
      <assert-string-value>true 6 8 The cat sat on the mat</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-TokenizeFunc-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("terms")</response-string>
    <description> A regexp that some Java versions have trouble with. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>replace(&apos;APXterms6&apos;, &apos;\w{3}\d*([^TKR0-9]+).*$&apos;, &apos;$1&apos;)</test>
    <result-string>xs:string("terms")</result-string>
    <result>
      <assert-string-value>terms</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-TokenizeFunc-7"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("2"),xs:integer("2"),xs:string("a|b"),xs:string("a|b"),xs:string("a"),xs:string("b"),xs:string("a"),xs:string("b"))</response-string>
    <description> Tokenize on a single whitespace. </description>
    <created by="Frans Englich" on="2008-05-08"/>
    <test>count(tokenize("a b", " ")), count(tokenize("a b", "\s")), string-join(tokenize("a b", " "), &apos;|&apos;), string-join(tokenize("a b", "\s"), &apos;|&apos;), tokenize("a b", " "), tokenize("a b", "\s")</test>
    <result-string>(xs:integer("2"),xs:integer("2"),xs:string("a|b"),xs:string("a|b"),xs:string("a"),xs:string("b"),xs:string("a"),xs:string("b"))</result-string>
    <result>
      <assert-string-value>2 2 a|b a|b a b a b</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-fn-tokenize-001"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Test boolean on tokenize </description>
    <created by="Nick Jones" on="2008-06-12"/>
    <test>
      for $x in xs:string(zero-or-one((1 to 10)[. mod 2 = -1])) return tokenize($x,&apos;,&apos;)
      </test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="cbcl-fn-tokenize-002"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Test invalid regex expression </description>
    <created by="Nick Jones" on="2008-06-13"/>
    <test>
      tokenize(string-join(for $x in (1 to 10)[. mod 2 = 0] return string($x),&apos;,&apos;),&apos;[&apos;)
      </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORX0002"))</result-string>
    <result>
      <error code="FORX0002"/>
    </result>
  </test-case>
  <test-case name="cbcl-fn-tokenize-003"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Test tokenize on empty string </description>
    <created by="Nick Jones" on="2008-06-13"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[
      tokenize(string-join(for $x in (1 to 10)[. mod 2 < 0] return string($x),','),',')
      ]]>
    </test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
</test-set>