<test-set name="prod-FunctionCall" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">
  <description>Tests for the FunctionCall production.
    Contains tests verifying the function calling mechanism; not a particular function implementation.</description>
  <link document="http://www.w3.org/TR/xquery-30/" idref="doc-xquery30-FunctionCall" type="spec"/>
  <environment name="ListUnionTypes">
    <schema file="ValidateExpr/listunion.xsd" uri="http://www.w3.org/XQueryTest/ListUnionTypes">
      <description>A schema defining a list of unions.</description>
      <created by="Anonymous" on="2006-06-07"/>
    </schema>
  </environment>
  <test-case name="FunctionCall-001"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("XY")</response-string>
    <description>Test that arguments are atomized - built in function</description>
    <created by="Michael Kay" on="2011-10-31"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[concat(<a>X</a>, <a>Y</a>)]]>
    </test>
    <result-string>xs:string("XY")</result-string>
    <result>
      <assert-string-value>XY</assert-string-value>
    </result>
  </test-case>
  <test-case name="FunctionCall-002"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Test that arguments are atomized - constructor function</description>
    <created by="Michael Kay" on="2011-10-31"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[xs:boolean(<a>0</a>)]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case covers="validate-by-type" name="FunctionCall-003"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description>Test that arguments are atomized - constructor function</description>
    <created by="Michael Kay" on="2011-10-31"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="schemaValidation"/>
    <test>
      <![CDATA[xs:integer(validate type xs:decimal {<a>93.7</a>})]]>
    </test>
    <result-string/>
    <result>
      <all-of>
        <assert-type>xs:integer</assert-type>
        <assert-eq>93</assert-eq>
      </all-of>
    </result>
  </test-case>
  <test-case name="FunctionCall-004"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("0")</response-string>
    <description>Test that arguments are atomized - user-defined function</description>
    <created by="Michael Kay" on="2011-10-31"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[
         declare function local:f($in as xs:boolean) as xs:boolean { $in };
         local:f(<a>0</a>)]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case covers="validate-by-type" name="FunctionCall-005"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description>Test that arguments are atomized - user-defined function</description>
    <created by="Michael Kay" on="2011-10-31"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="schemaValidation"/>
    <test>
      <![CDATA[
         declare function local:f($in as xs:anyAtomicType) as xs:boolean { $in instance of xs:decimal };
         local:f(validate type xs:integer {<a>12</a>})]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case covers="dynamic-function-call" name="FunctionCall-006"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("0")</response-string>
    <description>Test that arguments are atomized - anonymous inline function</description>
    <created by="Michael Kay" on="2011-10-31"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="higherOrderFunctions"/>
    <test>
      <![CDATA[
         let $f := function ($in as xs:boolean) as xs:boolean { $in }
         return $f(<a>0</a>)
      ]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case covers="dynamic-function-call" name="FunctionCall-007"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description>Test that arguments are atomized - dynamic call to a user-defined function</description>
    <created by="Michael Kay" on="2011-10-31"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="schemaValidation"/>
    <dependency type="feature" value="higherOrderFunctions"/>
    <test>
      <![CDATA[
         declare function local:f($in as xs:anyAtomicType) as xs:boolean { $in instance of xs:decimal };
         let $f := function-lookup(xs:QName('local:f'), 1)
         return $f(validate type xs:integer {<a>12</a>})]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case covers="dynamic-function-call" name="FunctionCall-008"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description>Test that arguments are atomized - dynamic call to a constructor function</description>
    <created by="Michael Kay" on="2011-10-31"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="schemaValidation"/>
    <dependency type="feature" value="higherOrderFunctions"/>
    <test>
      <![CDATA[
        let $f := xs:integer#1
        return $f(validate type xs:decimal {<a>93.7</a>})
      ]]>
    </test>
    <result-string/>
    <result>
      <all-of>
        <assert-type>xs:integer</assert-type>
        <assert-eq>93</assert-eq>
      </all-of>
    </result>
  </test-case>
  <test-case covers="cast-to-list bang-operator" name="FunctionCall-009"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description>Test that a sequence of untypedAtomic values is cast to the target type: user-defined function.
         Also tests XPath 3.0 casting to list, and bang operator.</description>
    <created by="Michael Kay" on="2011-10-31"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      <![CDATA[
        declare function local:f($in as xs:decimal*) as xs:decimal {sum($in, 0.0)};
        local:f(xs:NMTOKENS('1 1.2 1.3 1.4')!xs:untypedAtomic(.))
      ]]>
    </test>
    <result-string/>
    <result>
      <all-of>
        <assert-type>xs:decimal</assert-type>
        <assert-eq>4.9</assert-eq>
      </all-of>
    </result>
  </test-case>
  <test-case name="FunctionCall-010"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description>Test that a sequence of untypedAtomic values is cast to the target type: inline function.
         Also tests XPath 3.0 inline functions, casting to list, and bang operator.</description>
    <created by="Michael Kay" on="2011-10-31"/>
    <dependency type="spec" value="XP30+"/>
    <dependency type="feature" value="higherOrderFunctions"/>
    <test>function($in as xs:decimal*) as xs:decimal {sum($in, 0.0)}(xs:NMTOKENS(&apos;1 1.2 1.3 1.4&apos;)!xs:untypedAtomic(.))</test>
    <result-string/>
    <result>
      <all-of>
        <assert-type>xs:decimal</assert-type>
        <assert-eq>4.9</assert-eq>
      </all-of>
    </result>
  </test-case>
  <test-case covers="cast-to-list bang-operator" name="FunctionCall-011"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description>Test that a sequence of untypedAtomic values is cast to the target type: built-in function.
         Also tests casting to list, and bang operator.</description>
    <created by="Michael Kay" on="2011-10-31"/>
    <dependency type="spec" value="XP30+"/>
    <test>codepoints-to-string(xs:NMTOKENS(&apos;48 49 50 51&apos;)!xs:untypedAtomic(.))</test>
    <result-string/>
    <result>
      <all-of>
        <assert-type>xs:string</assert-type>
        <assert-string-value>0123</assert-string-value>
      </all-of>
    </result>
  </test-case>
  <test-case covers="cast-to-list" name="FunctionCall-012"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description>Test that a sequence of NON-untypedAtomic values is NOT cast to the target type: built-in function.
         Also tests casting to list.</description>
    <created by="Michael Kay" on="2011-10-31"/>
    <dependency type="spec" value="XP30+"/>
    <test>codepoints-to-string(xs:NMTOKENS(&apos;30 31 32 33&apos;))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="FunctionCall-013"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("1234")</response-string>
    <description>Test that the untypedAtomic result of a user-defined function is cast to the declared type.</description>
    <created by="Michael Kay" on="2011-10-31"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[
        declare function local:f($a as xs:integer, $b as xs:integer) as xs:integer {
          data(<a>{$a}{$b}</a>)
        };
        local:f(12, 34)
      ]]>
    </test>
    <result-string/>
    <result>
      <all-of>
        <assert-type>xs:integer</assert-type>
        <assert-eq>1234</assert-eq>
      </all-of>
    </result>
  </test-case>
  <test-case covers="inline-function" name="FunctionCall-014"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("1234")</response-string>
    <description>Test that the untypedAtomic result of an inline function is cast to the declared type.</description>
    <created by="Michael Kay" on="2011-10-31"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="higherOrderFunctions"/>
    <test>
      <![CDATA[
        let $f := function($a as xs:integer, $b as xs:integer) as xs:integer {
          data(<a>{$a}{$b}</a>)
        }
        return $f(12, 34)
      ]]>
    </test>
    <result-string/>
    <result>
      <all-of>
        <assert-type>xs:integer</assert-type>
        <assert-eq>1234</assert-eq>
      </all-of>
    </result>
  </test-case>
  <test-case covers="dynamic-function-call" name="FunctionCall-015"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description>Test that arguments are atomized - but not the argument of casting to QName</description>
    <created by="Michael Kay" on="2011-10-31"/>
    <modified by="O&apos;Neil Delpratt" change="fix bug 14873" on="2012-08-08"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="schemaValidation"/>
    <dependency type="feature" value="higherOrderFunctions"/>
    <test>
      <![CDATA[
         declare function local:f($in as xs:integer) as xs:integer { $in + 1 };
         let $f := function-lookup(xs:QName(<f>local:f</f>), 1)
         return $f(12)]]>
    </test>
    <result-string>xs:integer("13")</result-string>
    <result>
      <assert-eq>13</assert-eq>
    </result>
  </test-case>
  <test-case covers="cast-to-qname" name="FunctionCall-016"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description>Test that untyped arguments are converted - but not when the expected type is QName</description>
    <created by="Michael Kay" on="2011-10-31"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="schemaValidation"/>
    <test>
      <![CDATA[
         declare function local:f($in as xs:QName) as xs:integer { string-length(local-name-from-QName($in)) };
         let $e := <a xsi:type='my:integer' xmlns:my='http://my.example.com/'>123</a>
         return local:f($e/@xsi:type)]]>
    </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0117"))</result-string>
    <result>
      <error code="XPTY0117"/>
    </result>
  </test-case>
  <test-case covers="cast-to-qname" name="FunctionCall-017"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description>Test that untyped arguments are converted - but not when the expected type is QName</description>
    <created by="Michael Kay" on="2011-10-31"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="schemaValidation"/>
    <test>
      <![CDATA[
         let $f := function ($in as xs:QName) as xs:integer { string-length(local-name-from-QName($in)) }
         let $e := <a xsi:type='my:integer' xmlns:my='http://my.example.com/'>123</a>
         return $f($e/@xsi:type)
      ]]>
    </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0117"))</result-string>
    <result>
      <error code="XPTY0117"/>
    </result>
  </test-case>
  <test-case covers="cast-to-qname" name="FunctionCall-018"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description>Test that untyped arguments are converted - but not when the expected type is QName</description>
    <created by="Michael Kay" on="2011-10-31"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="schemaValidation"/>
    <test>
      <![CDATA[
         let $e := <a xsi:type='my:integer' xmlns:my='http://my.example.com/'>123</a>
         return local-name-from-QName($e/@xsi:type)]]>
    </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0117"))</result-string>
    <result>
      <error code="XPTY0117"/>
    </result>
  </test-case>
  <test-case covers="cast-to-qname" name="FunctionCall-019"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;a&gt;fn:abs&lt;/a&gt;</response-string>
    <description>Test that untyped results are converted - but not when the expected type is QName</description>
    <created by="Michael Kay" on="2011-10-31"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="schemaValidation"/>
    <test>
      <![CDATA[
         declare function local:q ($prefix as xs:string, $local as xs:string) as xs:QName {
            <a>{$prefix}:{$local}</a>
         };
         local:q('fn', 'abs')
      ]]>
    </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0117"))</result-string>
    <result>
      <error code="XPTY0117"/>
    </result>
  </test-case>
  <test-case covers="cast-to-qname" name="FunctionCall-020"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;a&gt;fn:abs&lt;/a&gt;</response-string>
    <description>Test that untyped results are converted - but not when the expected type is QName</description>
    <created by="Michael Kay" on="2011-10-31"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="schemaValidation"/>
    <test>
      <![CDATA[
         let $q := function ($prefix as xs:string, $local as xs:string) as xs:QName {
            <a>{$prefix}:{$local}</a>
         }
         return $q('fn', 'abs')
      ]]>
    </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0117"))</result-string>
    <result>
      <error code="XPTY0117"/>
    </result>
  </test-case>
  <test-case covers="cast-to-qname" name="FunctionCall-021"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description>Test that untyped results are converted - but not when the expected type is QName</description>
    <created by="Michael Kay" on="2011-10-31"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="schemaValidation"/>
    <test>
      <![CDATA[
         declare function local:q ($prefix as xs:string, $local as xs:string) as xs:QName {
            <a>{$prefix}:{$local}</a>
         };
         let $curried := local:q('fn', ?)
         return $curried('abs')
      ]]>
    </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0117"))</result-string>
    <result>
      <error code="XPTY0117"/>
    </result>
  </test-case>
  <test-case name="FunctionCall-023"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("")</response-string>
    <description>Test that a sequence of arguments is atomized</description>
    <created by="Michael Kay" on="2011-10-31"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[string-join((<a>X</a>, <a>Y</a>, <a>Z</a>), '')]]>
    </test>
    <result-string>xs:string("XYZ")</result-string>
    <result>
      <assert-string-value>XYZ</assert-string-value>
    </result>
  </test-case>
  <test-case covers="inline-function dynamic-function-call" name="FunctionCall-025"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description>Test that a sequence of numeric values undergoes numeric promotion to the target type.
         Also tests XPath 3.0 inline functions.</description>
    <created by="Michael Kay" on="2011-10-31"/>
    <dependency type="spec" value="XP30+"/>
    <dependency type="feature" value="higherOrderFunctions"/>
    <test>function($in as xs:double*) as xs:double {sum($in, 0.0e0)}((1, xs:float(0.25), xs:decimal(0.5)))</test>
    <result-string/>
    <result>
      <all-of>
        <assert-type>xs:double</assert-type>
        <assert-eq>1.75</assert-eq>
      </all-of>
    </result>
  </test-case>
  <test-case covers="inline-function dynamic-function-call" name="FunctionCall-026"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("http://one.com/;http://two.com/")</response-string>
    <description>Test that a sequence of anyURI values undergoes numeric promotion to the target type.
         Also tests XPath 3.0 inline functions.</description>
    <created by="Michael Kay" on="2011-10-31"/>
    <dependency type="spec" value="XP30+"/>
    <dependency type="feature" value="higherOrderFunctions"/>
    <test>function($in as xs:string*) as xs:string {string-join($in, &apos;;&apos;)}((xs:anyURI(&apos;http://one.com/&apos;), xs:anyURI(&apos;http://two.com/&apos;)))</test>
    <result-string/>
    <result>
      <all-of>
        <assert-type>xs:string</assert-type>
        <assert-string-value>http://one.com/;http://two.com/</assert-string-value>
      </all-of>
    </result>
  </test-case>
  <test-case covers="union-as-sequence-type" name="FunctionCall-027"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description>Test that an untypedAtomic value is NOT cast to the target type where the target type is a list type.
         This is an error because although casting to a list type is allowed, a list type cannot be used in a function signature.</description>
    <created by="Michael Kay" on="2011-10-31"/>
    <dependency type="spec" value="XP30+"/>
    <test>function($in as xs:NMTOKENS) as item()* {$in}(xs:untypedAtomic(&apos;abc def&apos;))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0051"))</result-string>
    <result>
      <error code="XPST0051"/>
    </result>
  </test-case>
  <test-case covers="union-as-sequence-type" name="FunctionCall-028"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description>Test that the target type can be a union type.</description>
    <created by="Michael Kay" on="2011-10-31"/>
    <environment ref="ListUnionTypes"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="schemaImport"/>
    <dependency type="feature" value="higherOrderFunctions"/>
    <test>
        declare namespace lu = &apos;http://www.w3.org/XQueryTest/ListUnionTypes&apos; ;
        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";
      	function($in as lu:unionType) as xs:boolean {$in instance of xs:integer}(23)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case covers="union-as-sequence-type" name="FunctionCall-029"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description>Test that the target type can be a union type.</description>
    <created by="Michael Kay" on="2011-10-31"/>
    <environment ref="ListUnionTypes"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="schemaImport"/>
    <dependency type="feature" value="higherOrderFunctions"/>
    <test>
        declare namespace lu = &apos;http://www.w3.org/XQueryTest/ListUnionTypes&apos; ;
        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";
      	function($in as lu:unionType) as xs:boolean {$in instance of xs:integer}(xs:float(12))</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case covers="union-as-sequence-type" name="FunctionCall-030"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description>Test that numeric promotion does not occur when the target type is a union type.</description>
    <created by="Michael Kay" on="2011-10-31"/>
    <environment ref="ListUnionTypes"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="schemaImport"/>
    <dependency type="feature" value="higherOrderFunctions"/>
    <test>
        declare namespace lu = &apos;http://www.w3.org/XQueryTest/ListUnionTypes&apos; ;
        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";
      	function($in as lu:unionType) as xs:boolean {$in instance of xs:integer}(12.3)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case covers="union-as-sequence-type" name="FunctionCall-031"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description>Test that casting of untypedAtomic does occur when the target type is a union type.</description>
    <created by="Michael Kay" on="2011-10-31"/>
    <environment ref="ListUnionTypes"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="schemaImport"/>
    <dependency type="feature" value="higherOrderFunctions"/>
    <test>
        declare namespace lu = &apos;http://www.w3.org/XQueryTest/ListUnionTypes&apos; ;
        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";
      	function($in as lu:unionType) as xs:boolean {$in instance of xs:integer}(xs:untypedAtomic(&apos;123&apos;))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case covers="union-as-sequence-type" name="FunctionCall-032"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description>Test that the argument type cannot be a union type having a list type in its membership.</description>
    <created by="Michael Kay" on="2011-10-31"/>
    <environment ref="ListUnionTypes"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="schemaImport"/>
    <dependency type="feature" value="higherOrderFunctions"/>
    <test>
        declare namespace lu = &apos;http://www.w3.org/XQueryTest/ListUnionTypes&apos; ;
        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";
      	function($in as lu:unionOfListType) as xs:boolean {$in instance of xs:integer}(23)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0051"))</result-string>
    <result>
      <error code="XPST0051"/>
    </result>
  </test-case>
  <test-case covers="union-as-sequence-type" name="FunctionCall-033"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description>Test that the argument type cannot be a union type derived by restriction from another union type.</description>
    <created by="Michael Kay" on="2011-10-31"/>
    <environment ref="ListUnionTypes"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="schemaImport"/>
    <dependency type="feature" value="higherOrderFunctions"/>
    <test>
        declare namespace lu = &apos;http://www.w3.org/XQueryTest/ListUnionTypes&apos; ;
        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";
      	function($in as lu:restrictedUnionType) as xs:boolean {$in instance of xs:integer}(23)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0051"))</result-string>
    <result>
      <error code="XPST0051"/>
    </result>
  </test-case>
  <test-case covers="union-as-sequence-type" name="FunctionCall-034"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description>Test that the argument type cannot be a list type.</description>
    <created by="Michael Kay" on="2011-10-31"/>
    <environment ref="ListUnionTypes"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="schemaImport"/>
    <dependency type="feature" value="higherOrderFunctions"/>
    <test>
        declare namespace lu = &apos;http://www.w3.org/XQueryTest/ListUnionTypes&apos; ;
        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";
      	function($in as lu:listType) as xs:boolean {$in instance of xs:integer}(23)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0051"))</result-string>
    <result>
      <error code="XPST0051"/>
    </result>
  </test-case>
  <test-case covers="union-as-sequence-type" name="FunctionCall-035"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description>Test that the result type can be a union type and that the return value can be a member of the union.</description>
    <created by="Michael Kay" on="2011-10-31"/>
    <environment ref="ListUnionTypes"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="schemaImport"/>
    <dependency type="feature" value="higherOrderFunctions"/>
    <test>
        declare namespace lu = &apos;http://www.w3.org/XQueryTest/ListUnionTypes&apos; ;
        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";
      	function($in as xs:integer) as lu:unionOfUnionType {$in + 23}(9)</test>
    <result-string/>
    <result>
      <all-of>
        <assert-type>xs:integer</assert-type>
        <assert-string-value>32</assert-string-value>
      </all-of>
    </result>
  </test-case>
  <test-case covers="union-as-sequence-type" name="FunctionCall-036"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description>Test that the result type can be a union type and that the return value can be a member of the union.</description>
    <created by="Michael Kay" on="2011-10-31"/>
    <environment ref="ListUnionTypes"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>
        declare namespace lu = &apos;http://www.w3.org/XQueryTest/ListUnionTypes&apos; ;
        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";
      	declare function local:daysAhead($in as xs:integer) as lu:unionOfUnionType {current-date() + (xs:dayTimeDuration(&apos;P1D&apos;)*$in)};
      	local:daysAhead(9)
      </test>
    <result-string/>
    <result>
      <assert-type>xs:date</assert-type>
    </result>
  </test-case>
  <test-case covers="union-as-sequence-type" name="FunctionCall-037"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description>Test that the result type can be a union type and that the return value can be cast to the union type.</description>
    <created by="Michael Kay" on="2011-10-31"/>
    <environment ref="ListUnionTypes"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>
        declare namespace lu = &apos;http://www.w3.org/XQueryTest/ListUnionTypes&apos; ;
        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";
      	declare function local:makeDate($in as xs:string) as lu:unionOfUnionType {
      	  if ($in castable as xs:date)
      	  then xs:untypedAtomic($in)
      	  else current-date()
      	};
      	local:makeDate(&apos;2012-12-12&apos;)
      </test>
    <result-string/>
    <result>
      <assert-type>xs:date</assert-type>
    </result>
  </test-case>
  <test-case covers="partial-function-application" name="FunctionCall-038"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description>Test that the result type can be a union type and that the return value can be cast to the union type.</description>
    <created by="Michael Kay" on="2011-10-31"/>
    <environment ref="ListUnionTypes"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="schemaImport"/>
    <dependency type="feature" value="higherOrderFunctions"/>
    <test>
        declare namespace lu = &apos;http://www.w3.org/XQueryTest/ListUnionTypes&apos; ;
        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";
      	declare function local:makeDate($in as xs:string, $year as xs:integer) as lu:unionOfUnionType {
      	  let $date := $year || &apos;-&apos; || $in
      	  return if ($date castable as xs:date)
      	         then xs:untypedAtomic($date)
      	         else current-date()
      	};
      	let $make2012date := local:makeDate(?, 2012)
      	return $make2012date(&apos;12-12&apos;)
      </test>
    <result-string/>
    <result>
      <all-of>
        <assert-type>xs:date</assert-type>
        <assert-string-value>2012-12-12</assert-string-value>
      </all-of>
    </result>
  </test-case>
  <test-case covers="inline-function dynamic-function-call" name="FunctionCall-039"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description>Test that the result type cannot be a union type derived by restriction from another union.</description>
    <created by="Michael Kay" on="2011-10-31"/>
    <environment ref="ListUnionTypes"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="schemaImport"/>
    <dependency type="feature" value="higherOrderFunctions"/>
    <test>
        declare namespace lu = &apos;http://www.w3.org/XQueryTest/ListUnionTypes&apos; ;
        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";
      	function() as lu:restrictedUnionType {23}()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0051"))</result-string>
    <result>
      <error code="XPST0051"/>
    </result>
  </test-case>
  <test-case covers="inline-function dynamic-function-call" name="FunctionCall-040"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description>Test that the result type can be a namespace-sensitive union type.</description>
    <created by="Michael Kay" on="2011-10-31"/>
    <environment ref="ListUnionTypes"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="schemaImport"/>
    <dependency type="feature" value="higherOrderFunctions"/>
    <test>
      <![CDATA[
        declare namespace lu = 'http://www.w3.org/XQueryTest/ListUnionTypes' ;
        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";
      	let $f := function() as lu:namespaceSensitiveUnionType {node-name(<a/>)}
      	return local-name-from-QName($f())
      ]]>
    </test>
    <result-string>xs:string("a")</result-string>
    <result>
      <assert-string-value>a</assert-string-value>
    </result>
  </test-case>
  <test-case covers="inline-function dynamic-function-call" name="FunctionCall-041"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description>Test that if the result type is a namespace-sensitive union type, casting from untypedAtomic is not allowed.</description>
    <created by="Michael Kay" on="2011-10-31"/>
    <environment ref="ListUnionTypes"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="schemaImport"/>
    <dependency type="feature" value="higherOrderFunctions"/>
    <test>
        declare namespace lu = &apos;http://www.w3.org/XQueryTest/ListUnionTypes&apos; ;
        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";
      	let $f := function() as lu:namespaceSensitiveUnionType {xs:untypedAtomic(&apos;xsi:type&apos;)}
      	return local-name-from-QName($f())</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0117"))</result-string>
    <result>
      <error code="XPTY0117"/>
    </result>
  </test-case>
  <test-case covers="inline-function dynamic-function-call type-derivation-with-unions" name="FunctionCall-042"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description>Test that Union(A, B) is substitutable for A as a function argument type</description>
    <created by="Michael Kay" on="2011-10-31"/>
    <environment ref="ListUnionTypes"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="schemaImport"/>
    <dependency type="feature" value="higherOrderFunctions"/>
    <test>
        declare namespace lu = &apos;http://www.w3.org/XQueryTest/ListUnionTypes&apos; ;
        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";
        declare function local:hof($f as function(xs:integer) as xs:integer) as xs:integer {$f(3) + 1};
      	let $f := function($a as lu:unionType) as xs:integer {$a + 2}
      	return local:hof($f)</test>
    <result-string/>
    <result>
      <all-of>
        <assert-type>xs:integer</assert-type>
        <assert-eq>6</assert-eq>
      </all-of>
    </result>
  </test-case>
  <test-case covers="type-derivation-with-unions" name="FunctionCall-043"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description>Test that Union(Union(A, B), c) is substitutable for Union(A, B) as a function argument type</description>
    <created by="Michael Kay" on="2011-10-31"/>
    <environment ref="ListUnionTypes"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="schemaImport"/>
    <dependency type="feature" value="higherOrderFunctions"/>
    <test>
        declare namespace lu = &apos;http://www.w3.org/XQueryTest/ListUnionTypes&apos; ;
        import schema "http://www.w3.org/XQueryTest/ListUnionTypes";
        declare function local:hof($f as function(lu:unionType) as xs:integer) as xs:integer {$f(3) + 1};
      	let $f := function($a as lu:unionOfUnionType) as xs:integer {$a + 2}
      	return local:hof($f)</test>
    <result-string/>
    <result>
      <all-of>
        <assert-type>xs:integer</assert-type>
        <assert-eq>6</assert-eq>
      </all-of>
    </result>
  </test-case>
  <test-case name="K-FunctionCallExpr-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> A test whose essence is: `func-does-not-exist(1, 2, 3)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>func-does-not-exist(1, 2, 3)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-FunctionCallExpr-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> A test whose essence is: `fn:func-does-not-exist(1, 2, 3)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:func-does-not-exist(1, 2, 3)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-FunctionCallExpr-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> A test whose essence is: `xs:func-does-not-exist(1, 2, 3)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:func-does-not-exist(1, 2, 3)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-FunctionCallExpr-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> A test whose essence is: `local:func-does-not-exist(1, 2, 3)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>local:func-does-not-exist(1, 2, 3)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-FunctionCallExpr-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> A test whose essence is: `prefix-does-not-exist:func-does-not-exist(1, 2, 3)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>prefix-does-not-exist:func-does-not-exist(1, 2, 3)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0081"))</result-string>
    <result>
      <error code="XPST0081"/>
    </result>
  </test-case>
  <test-case name="K-FunctionCallExpr-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> A function call containing an invalid QName as name. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>f:f:()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</result-string>
    <result>
      <any-of>
        <error code="XPST0003"/>
        <error code="XPST0081"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-FunctionCallExpr-7"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> A function call containing an invalid QName as name. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>:f()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="K-FunctionCallExpr-8"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> A function call containing an invalid QName as name. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>:f()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="K-FunctionCallExpr-9"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> A function call containing an invalid QName as name. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>1fd()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="K-FunctionCallExpr-10"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> A function call containing an invalid QName as name. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>p:f:lname()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</result-string>
    <result>
      <any-of>
        <error code="XPST0003"/>
        <error code="XPST0081"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-FunctionCallExpr-11"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> No function by name fn:document() exists(although one does in XSL-T). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>document("example.com/file.ext")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-FunctionCallExpr-12"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FODC0002"))</response-string>
    <description> No function by name fn:unparsed-text() exists(although one does in XSL-T). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="Tim Mills" change="Added dependency on XP20/XQ10.  Removed possible result &apos;XTDE1170&apos;" on="2012-03-29"/>
    <dependency type="spec" value="XP20 XQ10"/>
    <test>unparsed-text("example.com/file.ext")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-FunctionCallExpr-13"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> No function by name fn:unparsed-text() exists(although one does in XSL-T). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="Tim Mills" change="Added dependency on XP20/XQ10.  Removed possible result &apos;false&apos;" on="2012-03-29"/>
    <dependency type="spec" value="XP20 XQ10"/>
    <test>unparsed-text-available("example.com/file.ext")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-FunctionCallExpr-14"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> No function by name fn:key() exists(although one does in XSL-T). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>key(&apos;func&apos;, "a value")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-FunctionCallExpr-15"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("0003")</response-string>
    <description> No function by name fn:format-number() exists in XQuery 1.0 (although one does in XSLT and in XQuery 3.0). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="Michael Kay" change="fix bug 14855" on="2011-11-17"/>
    <dependency type="spec" value="XQ10 XP20"/>
    <test>format-number(3, "0000")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-FunctionCallExpr-15a"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("0003")</response-string>
    <description> No function by name fn:format-number() exists in XQuery 1.0 (although one does in XSLT and in XQuery 3.0). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="Michael Kay" change="fix bug 14855" on="2011-11-17"/>
    <modified by="Michael Kay" change="correct the version dependency" on="2011-11-25"/>
    <dependency type="spec" value="XQ30 XP30"/>
    <test>format-number(3, "0000")</test>
    <result-string>xs:string(""0003"")</result-string>
    <result>
      <assert-eq>"0003"</assert-eq>
    </result>
  </test-case>
  <test-case name="K-FunctionCallExpr-16"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> No function by name fn:format-time() exists in XQuery 1.0 (although one does in XSLT). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="Michael Kay" change="make results repeatable" on="2011-05-21"/>
    <modified by="Michael Kay" change="split into XQ10 and XQ30 tests" on="2011-11-17"/>
    <dependency type="spec" value="XQ10 XP20"/>
    <test>matches(format-time(current-time(), "[H01]:[m01]"), "[0-2][0-9]:[0-5][0-9]")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case covers="fn-format-time" name="K-FunctionCallExpr-16a"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> No function by name fn:format-time() exists in XQuery 1.0 (although one does in XSLT). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="Michael Kay" change="make results repeatable" on="2011-05-21"/>
    <modified by="Michael Kay" change="split into XQ10 and XQ30 tests" on="2011-11-17"/>
    <dependency type="spec" value="XQ30+ XP30+"/>
    <test>matches(format-time(current-time(), "[H01]:[m01]"), "[0-2][0-9]:[0-5][0-9]")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FunctionCallExpr-17"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> No function by name fn:format-time() exists in XQuery 1.0 (although one does in XSLT). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="Michael Kay" change="make results repeatable" on="2011-05-21"/>
    <modified by="Michael Kay" change="split into XQ10 and XQ30 tests" on="2011-11-17"/>
    <dependency type="spec" value="XQ10 XP20"/>
    <test>matches(format-time(current-time(), "[H01]:[m01]", (), (), ()), "..:..")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case covers="fn-format-time" name="K-FunctionCallExpr-17a"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> No function by name fn:format-time() exists in XQuery 1.0 (although one does in XSLT). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="Michael Kay" change="make results repeatable" on="2011-05-21"/>
    <modified by="Michael Kay" change="split into XQ10 and XQ30 tests" on="2011-11-17"/>
    <dependency type="spec" value="XQ30+ XP30+"/>
    <test>matches(format-time(current-time(), "[H01]:[m01]", (), (), ()), "..:..")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FunctionCallExpr-18"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> No function by name fn:format-date() exists in XQuery 1.0 (although one does in XSLT and XQuery 1.1). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>matches(format-dateTime(current-dateTime(), "[Y0001]-[M01]-[D01]"), "[0-9]{4}-[0-9]{2}-[0-9]{2}")</test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPST0017"/>
      </any-of>
    </result>
  </test-case>
  <test-case covers="fn-format-dateTime" name="K-FunctionCallExpr-19"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> No function by name fn:format-dateTime() exists in XQuery 1.0 (although one does in XSLT and XQuery 1.1). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>matches(format-dateTime(current-dateTime(), "[Y0001]-[M01]-[D01]", (), (), ()), "....-..-..")</test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPST0017"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-FunctionCallExpr-20"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> No function by name fn:format-dateTime() exists in XQuery 1.0 (although one does in XSLT and XQuery 1.1). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>matches(format-dateTime(current-dateTime(), "[M01]/[D01]/[Y0001] at [H01]:[m01]:[s01]"), "[0-1][0-9]/[0-3][0-9]/[0-9]{4} at [0-9]{2}:[0-9]{2}:[0-9]{2}")</test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPST0017"/>
      </any-of>
    </result>
  </test-case>
  <test-case covers="fn-format-dateTime" name="K-FunctionCallExpr-21"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> No function by name fn:format-dateTime() exists in XQuery 1.0 (although it does exist in XSLT and XQuery 1.1). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>matches(format-dateTime(current-dateTime(), "[M01]/[D01]/[Y0001] at [H01]:[m01]:[s01]", (), (), ()), "../../.... at ..:..:..")</test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPST0017"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-FunctionCallExpr-22"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">document {&lt;dummy/&gt;}</response-string>
    <description> No function by name fn:current() exists(although one does in XSLT). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>current()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-FunctionCallExpr-23"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> No function by name fn:unparsed-entity-uri() exists(although one does in XSLT). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>unparsed-entity-uri("example.com/file.ext")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-FunctionCallExpr-24"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> No function by name fn:unparsed-entity-public-id() exists(although one does in XSL-T). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>unparsed-entity-public-id("entity")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-FunctionCallExpr-25"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> No function by name fn:generate-id() exists(although one does in XSLT). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10"/>
    <test>
      <![CDATA[generate-id(<a/>) castable as xs:NCName]]>
    </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case covers="fn-generate-id" name="K-FunctionCallExpr-25a"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Function by name fn:generate-id() does exist in XQuery 3.0. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      <![CDATA[generate-id(<a/>) castable as xs:NCName]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FunctionCallExpr-26"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> No function by name fn:system-property() exists(although one does in XSL-T). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>system-property("xsl:vendor")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-FunctionCallExpr-27"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> No function by name fn:escape-uri() exists(although one did in older &apos;Functions  Operators&apos; drafts). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:escape-uri("http:/example.com/")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-FunctionCallExpr-28"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> No function by name fn:sub-sequence() exists(although one by name fn:subsequence does). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>fn:sub-sequence("http:/example.com/", 1, 1)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K2-FunctionCallExpr-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("1")</response-string>
    <description> Two user functions with many arguments. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
        declare function local:bar($c, $d, $e, $f, $g, $h, $i, $j, $a, $b) { 1 }; 
        declare function local:moo($k) { $k }; 
        local:moo(1)</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-FunctionCallExpr-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> Function current-grouping-key() is not available in XQuery. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>current-grouping-key()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K2-FunctionCallExpr-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">document {&lt;dummy/&gt;}</response-string>
    <description> Function current() is not available in XQuery. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>current()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K2-FunctionCallExpr-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> Function unparsed-entity-uri() is not available in XQuery. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>unparsed-entity-uri("str")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K2-FunctionCallExpr-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> Function unparsed-entity-public-id() is not available in XQuery. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>unparsed-entity-public-id("str")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K2-FunctionCallExpr-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Function generate-id() is not available in XQuery. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O&apos;Neil Delpratt" change="Bug fix related to bug #14854: Added dependency" on="2012-05-22"/>
    <dependency type="spec" value="XP20 XQ10"/>
    <test>generate-id("str")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K2-FunctionCallExpr-7"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Function generate-id() is not available in XQuery(#2). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O&apos;Neil Delpratt" change="Bug fix related to bug #14854: Added dependency" on="2012-05-22"/>
    <dependency type="spec" value="XP20 XQ10"/>
    <test>generate-id()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K2-FunctionCallExpr-8"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> Function system-property() is not available in XQuery(#2). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>system-property("property")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K2-FunctionCallExpr-9"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> Function key() is not available in XQuery. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>key("id")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K2-FunctionCallExpr-10"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Check that nodes, when passed through function arguments, have proper node identities. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[
        declare variable $a := <a/>; 
        declare function local:testSingleNodeIdentity($node as node()) { $node is $node }; 
        declare function local:testDoubleNodeIdentity($a as node(), $b as node()) { $a is $b }; 
        local:testSingleNodeIdentity(<a/>), local:testDoubleNodeIdentity(<a/>, <b/>), local:testDoubleNodeIdentity($a, $a)
      ]]>
    </test>
    <result-string>xs:string("true false true")</result-string>
    <result>
      <assert-string-value>true false true</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-FunctionCallExpr-11"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> A very simple string-difference function. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
        declare function local:compare($arg1 as xs:string, $arg2 as xs:string) { 
            let $cps1 := string-to-codepoints($arg1), 
            $cps2 := string-to-codepoints($arg2) 
            return abs(count($cps1) - count($cps2)) + sum(for $x in 1 to min((count($cps1), count($cps2))) 
                                                          return if ($cps1[$x] ne $cps2[$x]) then 1 else ()) }; 
        local:compare("", ""), 
        local:compare("a", ""), 
        local:compare("", "a"), 
        local:compare("a", "a"), 
        local:compare("", "aa"), 
        local:compare("aa", "ab"), 
        local:compare("ba", "ba"), 
        local:compare("bab", "bbb"), 
        local:compare("aba", "bab")
     </test>
    <result-string>xs:string("0 1 1 0 2 1 0 1 3")</result-string>
    <result>
      <assert-string-value>0 1 1 0 2 1 0 1 3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-FunctionCallExpr-12"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("3")</response-string>
    <description> Trigger an infinite recursion in one implementation. </description>
    <created by="Frans Englich" on="2008-05-08"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
        declare function local:func1() { if(local:func2(&apos;b&apos;)) then 3 else local:func1() }; 
        declare function local:func2($a) { if(matches("",$a)) then () else 4 }; 
        local:func1()</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-FunctionCallExpr-13"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("1")</response-string>
    <description> Have a function which recurses infintely, but which never is called. </description>
    <created by="Frans Englich" on="2008-11-13"/>
    <dependency type="spec" value="XQ10+"/>
    <test>declare function local:foo($arg) { local:foo(local:foo(1)) }; 1</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="cbcl-promotion-001"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("http://www.microsoft.com http://www.google.com/")</response-string>
    <description> Ensure sequence types are promoted correctly </description>
    <created by="Tim Mills" on="2008-05-01"/>
    <test>
        string-join( (xs:anyURI(&apos;http://www.microsoft.com&apos;), xs:anyURI(&apos;http://www.google.com/&apos;)), &apos; &apos;)
      </test>
    <result-string>xs:string("http://www.microsoft.com http://www.google.com/")</result-string>
    <result>
      <assert-string-value>http://www.microsoft.com http://www.google.com/</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-promotion-002"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Test that type promotion occurs correctly for values passed to user-defined functions </description>
    <created by="Oliver Hallam" on="2008-06-12"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
        declare function local:index-of($seq as xs:double*, $item as xs:double) { for $x at $p in $seq return if ($x eq $item) then $p else () };
        declare function local:sequence($x as xs:integer) { ("string", 1, 2.0, xs:float(3))[$x] };
        local:index-of(for $x in (2,3,4) return local:sequence($x), 2)</test>
    <result-string>xs:string("2")</result-string>
    <result>
      <assert-string-value>2</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-promotion-003"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Test that type promotion occurs correctly for values returned from user-defined functions </description>
    <created by="Oliver Hallam" on="2008-06-12"/>
    <modified by="O&apos;Neil Delpratt" change="Then branch changed to -1. Bug 20314." on="2013-01-02"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
        declare function local:index-of($seq as xs:integer*, $item as xs:integer?) as xs:float* { 
          if (empty($item)) 
            then -1
            else for $x at $p in $seq return if ($x eq $item) then $p else () 
        };
        local:index-of(1 to 10, 3)</test>
    <result-string>xs:string("3")</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-promotion-004"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("4")</response-string>
    <description> Test that type promotion occurs correctly for sequence values returned from user-defined functions </description>
    <created by="Oliver Hallam" on="2008-06-12"/>
    <modified by="O&apos;Neil Delpratt" change="else branch changed to -1. Bug 20314." on="2013-01-02"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[
        declare function local:f() as xs:double* { 
          if (day-from-date(current-date()) < 32) then xs:integer(3) else -1
        };
        local:f() + 1]]>
    </test>
    <result-string>xs:string("4")</result-string>
    <result>
      <assert-string-value>4</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-promotion-005"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Test a function declared to return optional returning more than one value </description>
    <created by="Oliver Hallam" on="2008-06-12"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
        declare function local:index-of($seq, $item) as xs:double? { for $x at $p in $seq return if ($x eq $item) then $p else () };
        local:index-of((1, 2.0, xs:float(3), 2), 2)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="cbcl-promotion-006"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("2"),xs:integer("4"))</response-string>
    <description> Test a function taking optional argument being passed more than one </description>
    <created by="Oliver Hallam" on="2008-06-12"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
        declare function local:f($arg as xs:anyAtomicType?) { $arg };
        local:f(index-of((1,2,3,2),2))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="cbcl-promotion-007"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("1"),xs:integer("2"),xs:integer("3"))</response-string>
    <description> Check that correct type constraint is inserted. </description>
    <created by="Oliver Hallam" on="2008-07-03"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
        declare function local:f($v as xs:double*) as xs:double+ { if (empty($v)) then 0 else $v };
        declare function local:g($v as xs:double*) as xs:double+ { local:f($v) };
        local:g((1,2,3))</test>
    <result-string>xs:string("1 2 3")</result-string>
    <result>
      <assert-string-value>1 2 3</assert-string-value>
    </result>
  </test-case>
  <test-case name="function-call-reserved-function-names-001"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description>Check that reserved function name attribute is handled correctly. </description>
    <created by="Tim Mills" on="2013-01-24"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
	declare default function namespace "http://www.w3.org/2005/xquery-local-functions";
	declare function local:attribute($arg) { fn:true() };
	attribute(1)
      </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="function-call-reserved-function-names-002"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description>Check that reserved function name comment is handled correctly. </description>
    <created by="Tim Mills" on="2013-01-24"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
	declare default function namespace "http://www.w3.org/2005/xquery-local-functions";
	declare function local:comment($arg) { fn:true() };
	comment(1)
      </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="function-call-reserved-function-names-003"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description>Check that reserved function name document-node is handled correctly. </description>
    <created by="Tim Mills" on="2013-01-24"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
	declare default function namespace "http://www.w3.org/2005/xquery-local-functions";
	declare function local:document-node($arg) { fn:true() };
	document-node(1)
      </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="function-call-reserved-function-names-004"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;dummy/&gt;</response-string>
    <description>Check that reserved function name element is handled correctly. </description>
    <created by="Tim Mills" on="2013-01-24"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
	declare default function namespace "http://www.w3.org/2005/xquery-local-functions";
	declare function local:element($arg) { fn:true() };
	element(1)
      </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="function-call-reserved-function-names-005"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description>Check that reserved function name empty-sequence is handled correctly. </description>
    <created by="Tim Mills" on="2013-01-24"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
	declare default function namespace "http://www.w3.org/2005/xquery-local-functions";
	declare function local:empty-sequence() { fn:true() };
	empty-sequence()
      </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="function-call-reserved-function-names-006"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description>Check that reserved function name if is handled correctly. </description>
    <created by="Tim Mills" on="2013-01-24"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
	declare default function namespace "http://www.w3.org/2005/xquery-local-functions";
	declare function local:if() { fn:true() };
	if()
      </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="function-call-reserved-function-names-007"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description>Check that reserved function name item is handled correctly. </description>
    <created by="Tim Mills" on="2013-01-24"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
	declare default function namespace "http://www.w3.org/2005/xquery-local-functions";
	declare function local:item($arg) { fn:true() };
	item(1)
      </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="function-call-reserved-function-names-008"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;dummy/&gt;</response-string>
    <description>Check that reserved function name node is handled correctly. </description>
    <created by="Tim Mills" on="2013-01-24"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
	declare default function namespace "http://www.w3.org/2005/xquery-local-functions";
	declare function local:node($arg) { fn:true() };
	node(1)
      </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="function-call-reserved-function-names-009"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description>Check that reserved function name processing-instruction is handled correctly. </description>
    <created by="Tim Mills" on="2013-01-24"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
	declare default function namespace "http://www.w3.org/2005/xquery-local-functions";
	declare function local:processing-instruction($arg) { fn:true() };
	processing-instruction(1)
      </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="function-call-reserved-function-names-010"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description>Check that reserved function name schema-attribute is handled correctly. </description>
    <created by="Tim Mills" on="2013-01-24"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
	declare default function namespace "http://www.w3.org/2005/xquery-local-functions";
	declare function local:schema-attribute() { fn:true() };
	schema-attribute()
      </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="function-call-reserved-function-names-011"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description>Check that reserved function name schema-element is handled correctly. </description>
    <created by="Tim Mills" on="2013-01-24"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
	declare default function namespace "http://www.w3.org/2005/xquery-local-functions";
	declare function local:schema-element() { fn:true() };
	schema-element()
      </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="function-call-reserved-function-names-012"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description>Check that reserved function name text is handled correctly. </description>
    <created by="Tim Mills" on="2013-01-24"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
	declare default function namespace "http://www.w3.org/2005/xquery-local-functions";
	declare function local:text($arg) { fn:true() };
	text(1)
      </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="function-call-reserved-function-names-013"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description>Check that reserved function name typeswitch is handled correctly. </description>
    <created by="Tim Mills" on="2013-01-24"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
	declare default function namespace "http://www.w3.org/2005/xquery-local-functions";
	declare function local:typeswitch() { fn:true() };
	typeswitch()
      </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="function-call-reserved-function-names-014"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description>Check that reserved function name function is handled correctly. </description>
    <created by="Tim Mills" on="2013-01-24"/>
    <dependency type="spec" value="XQ10"/>
    <test>
	declare default function namespace "http://www.w3.org/2005/xquery-local-functions";
	declare function local:function() { fn:true() };
	function()
      </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="function-call-reserved-function-names-015"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description>Check that reserved function name namespace-node is handled correctly. </description>
    <created by="Tim Mills" on="2013-01-24"/>
    <dependency type="spec" value="XQ10"/>
    <test>
	declare default function namespace "http://www.w3.org/2005/xquery-local-functions";
	declare function namespace-node($arg) { fn:true() };
	namespace-node(1)
      </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="function-call-reserved-function-names-016"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description>Check that reserved function name switch is handled correctly. </description>
    <created by="Tim Mills" on="2013-01-24"/>
    <dependency type="spec" value="XQ10"/>
    <test>
	declare default function namespace "http://www.w3.org/2005/xquery-local-functions";
	declare function local:switch() { fn:true() };
	switch()
      </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="function-call-reserved-function-names-017"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description>Check that reserved function name function is handled correctly. </description>
    <created by="Tim Mills" on="2013-01-24"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
	declare default function namespace "http://www.w3.org/2005/xquery-local-functions";
	declare function local:function() { fn:true() };
	function()
      </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="function-call-reserved-function-names-018"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description>Check that reserved function name namespace-node is handled correctly. </description>
    <created by="Tim Mills" on="2013-01-24"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
	declare default function namespace "http://www.w3.org/2005/xquery-local-functions";
	declare function local:namespace-node($arg) { fn:true() };
	namespace-node(1)
      </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="function-call-reserved-function-names-019"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description>Check that reserved function name switch is handled correctly. </description>
    <created by="Tim Mills" on="2013-01-24"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
	declare default function namespace "http://www.w3.org/2005/xquery-local-functions";
	declare function local:switch() { fn:true() };
	switch()
      </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="function-call-reserved-function-names-020"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description>Check that reserved function name attribute is handled correctly. </description>
    <created by="Tim Mills" on="2013-01-24"/>
    <dependency type="spec" value="XP20+"/>
    <test>
	attribute(1)
      </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="function-call-reserved-function-names-021"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description>Check that reserved function name comment is handled correctly. </description>
    <created by="Tim Mills" on="2013-01-24"/>
    <dependency type="spec" value="XP20+"/>
    <test>
	comment(1)
      </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="function-call-reserved-function-names-022"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description>Check that reserved function name document-node is handled correctly. </description>
    <created by="Tim Mills" on="2013-01-24"/>
    <dependency type="spec" value="XP20+"/>
    <test>
	document-node(1)
      </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="function-call-reserved-function-names-023"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;dummy/&gt;</response-string>
    <description>Check that reserved function name element is handled correctly. </description>
    <created by="Tim Mills" on="2013-01-24"/>
    <dependency type="spec" value="XP20+"/>
    <test>
	element(1)
      </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="function-call-reserved-function-names-024"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description>Check that reserved function name empty-sequence is handled correctly. </description>
    <created by="Tim Mills" on="2013-01-24"/>
    <dependency type="spec" value="XP20+"/>
    <test>
	empty-sequence()
      </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="function-call-reserved-function-names-025"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description>Check that reserved function name if is handled correctly. </description>
    <created by="Tim Mills" on="2013-01-24"/>
    <dependency type="spec" value="XP20+"/>
    <test>
	if()
      </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="function-call-reserved-function-names-026"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description>Check that reserved function name item is handled correctly. </description>
    <created by="Tim Mills" on="2013-01-24"/>
    <dependency type="spec" value="XP20+"/>
    <test>
	item()
      </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="function-call-reserved-function-names-027"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;dummy/&gt;</response-string>
    <description>Check that reserved function name node is handled correctly. </description>
    <created by="Tim Mills" on="2013-01-24"/>
    <dependency type="spec" value="XP20+"/>
    <test>
	node(1)
      </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="function-call-reserved-function-names-028"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description>Check that reserved function name processing-instruction is handled correctly. </description>
    <created by="Tim Mills" on="2013-01-24"/>
    <dependency type="spec" value="XP20+"/>
    <test>
	processing-instruction(1)
      </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="function-call-reserved-function-names-029"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description>Check that reserved function name schema-attribute is handled correctly. </description>
    <created by="Tim Mills" on="2013-01-24"/>
    <dependency type="spec" value="XP20+"/>
    <test>
	schema-attribute()
      </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="function-call-reserved-function-names-030"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description>Check that reserved function name schema-element is handled correctly. </description>
    <created by="Tim Mills" on="2013-01-24"/>
    <dependency type="spec" value="XP20+"/>
    <test>
	schema-element()
      </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="function-call-reserved-function-names-031"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description>Check that reserved function name text is handled correctly. </description>
    <created by="Tim Mills" on="2013-01-24"/>
    <dependency type="spec" value="XP20+"/>
    <test>
	text(1)
      </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="function-call-reserved-function-names-032"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description>Check that reserved function name typeswitch is handled correctly. </description>
    <created by="Tim Mills" on="2013-01-24"/>
    <dependency type="spec" value="XP20+"/>
    <test>
	typeswitch()
      </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="function-call-reserved-function-names-033"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description>Check that reserved function name function is handled correctly. </description>
    <created by="Tim Mills" on="2013-01-24"/>
    <dependency type="spec" value="XP20"/>
    <test>
	function()
      </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="function-call-reserved-function-names-034"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description>Check that reserved function name namespace-node is handled correctly. </description>
    <created by="Tim Mills" on="2013-01-24"/>
    <dependency type="spec" value="XP20"/>
    <test>
	namespace-node(1)
      </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="function-call-reserved-function-names-035"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description>Check that reserved function name switch is handled correctly. </description>
    <created by="Tim Mills" on="2013-01-24"/>
    <dependency type="spec" value="XP20"/>
    <test>
	switch()
      </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="function-call-reserved-function-names-036"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description>Check that reserved function name function is handled correctly. </description>
    <created by="Tim Mills" on="2013-01-24"/>
    <dependency type="spec" value="XP30+"/>
    <test>
	function()
      </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="function-call-reserved-function-names-037"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description>Check that reserved function name namespace-node is handled correctly. </description>
    <created by="Tim Mills" on="2013-01-24"/>
    <dependency type="spec" value="XP30+"/>
    <test>
	namespace-node(1)
      </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="function-call-reserved-function-names-038"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description>Check that reserved function name switch is handled correctly. </description>
    <created by="Tim Mills" on="2013-01-24"/>
    <dependency type="spec" value="XP30+"/>
    <test>
	switch()
      </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
</test-set>