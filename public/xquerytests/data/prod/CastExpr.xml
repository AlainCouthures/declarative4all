<test-set name="prod-CastExpr" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">
  <description>Tests for the cast expression</description>
  <link document="http://www.w3.org/TR/xpath-30/" idref="prod-xpath30-CastExpr" type="spec"/>
  <environment name="NOTATION-type">
    <schema file="CastExpr/notation.xsd" uri="http://www.w3.org/XQueryTest/Cast/Notation">
      <description>Contains a type derived from xs:NOTATION</description>
      <created by="Ghislain Fourny" on="2012-10-09"/>
    </schema>
  </environment>
  <test-case name="casthc1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("10")</response-string>
    <description> Simple test for evaluation of a simple expression casted as xs:integer</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>(5 + 5) cast as xs:integer</test>
    <result-string>xs:integer("10")</result-string>
    <result>
      <assert-eq>10</assert-eq>
    </result>
  </test-case>
  <test-case name="casthc2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:float("10")</response-string>
    <description> Simple test for evaluation of a simple expression casted as xs:float</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>(5 + 5) cast as xs:float</test>
    <result-string>xs:float("10")</result-string>
    <result>
      <assert-eq>10</assert-eq>
    </result>
  </test-case>
  <test-case name="casthc3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Simple test for evaluation of a simple expression casted as xs:boolean</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>(5 + 5) cast as xs:boolean</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="casthc4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:double("10")</response-string>
    <description> Simple test for evaluation of a simple expression casted as xs:double</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>(5 + 5) cast as xs:double</test>
    <result-string>xs:double("10")</result-string>
    <result>
      <assert-eq>10</assert-eq>
    </result>
  </test-case>
  <test-case name="casthc5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("10")</response-string>
    <description> Simple test for evaluation of a simple expression casted as xs:decimal</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>(5 + 5) cast as xs:decimal</test>
    <result-string>xs:decimal("10")</result-string>
    <result>
      <assert-eq>10</assert-eq>
    </result>
  </test-case>
  <test-case name="casthc6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("10")</response-string>
    <description> Simple test for evaluation of a simple expression casted as xs:string</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>(5 + 5) cast as xs:string</test>
    <result-string>xs:string("10")</result-string>
    <result>
      <assert-string-value>10</assert-string-value>
    </result>
  </test-case>
  <test-case name="casthc7"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("A String")</response-string>
    <description> Simple test for evaluation a string casted as xs:string</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>"A String" cast as xs:string</test>
    <result-string>xs:string("A String")</result-string>
    <result>
      <assert-string-value>A String</assert-string-value>
    </result>
  </test-case>
  <test-case name="casthc8"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:float("2100")</response-string>
    <description> Simple test for casting a float as a float</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:float(2.1E3) cast as xs:float</test>
    <result-string>xs:float("2100")</result-string>
    <result>
      <assert-eq>2100</assert-eq>
    </result>
  </test-case>
  <test-case name="casthc9"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("2100")</response-string>
    <description> Simple test for casting a float as a string</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:float(2.1E3) cast as xs:string</test>
    <result-string>xs:string("2100")</result-string>
    <result>
      <assert-string-value>2100</assert-string-value>
    </result>
  </test-case>
  <test-case name="casthc10"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:double("2100")</response-string>
    <description> Simple test for casting a float as a double</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:float(2.1E3) cast as xs:double</test>
    <result-string>xs:double("2100")</result-string>
    <result>
      <assert-eq>2100</assert-eq>
    </result>
  </test-case>
  <test-case name="casthc11"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Simple test for casting a float as a boolean</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:float(2.1E3) cast as xs:boolean</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="casthc12"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:double("1.26743233E15")</response-string>
    <description> Simple test for casting a double as a double</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:double(1267.43233E12) cast as xs:double</test>
    <result-string>xs:double("1.26743233E15")</result-string>
    <result>
      <assert-string-value>1.26743233E15</assert-string-value>
    </result>
  </test-case>
  <test-case name="casthc13"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("1267.43233e12")</response-string>
    <description> Simple test for casting a double as a string</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:double(1267.43233E12) cast as xs:string</test>
    <result-string>xs:string("1.26743233E15")</result-string>
    <result>
      <assert-string-value>1.26743233E15</assert-string-value>
    </result>
  </test-case>
  <test-case name="casthc14"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Simple test for casting a double as a float</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>(xs:double(1267.43233E12) cast as xs:float) eq xs:float(1267.43233E12)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="casthc15"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Simple test for casting a double as a boolean</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:double(1267.43233E12) cast as xs:boolean</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="casthc16"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("12678967.543233")</response-string>
    <description> Simple test for casting a decimal as a string</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:decimal(12678967.543233) cast as xs:string</test>
    <result-string>xs:string("12678967.543233")</result-string>
    <result>
      <assert-string-value>12678967.543233</assert-string-value>
    </result>
  </test-case>
  <test-case name="casthc17"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:float("1.2678967543233E7")</response-string>
    <description> Simple test for casting a decimal as a float</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:decimal(12678967.543233) cast as xs:float</test>
    <result-string>xs:float("1.2678967543233E7")</result-string>
    <result>
      <assert-string-value>1.2678968E7</assert-string-value>
    </result>
  </test-case>
  <test-case name="casthc18"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:double("1.2678967543233E7")</response-string>
    <description> Simple test for casting a decimal as a double</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:decimal(12678967.543233) cast as xs:double</test>
    <result-string>xs:double("1.2678967543233E7")</result-string>
    <result>
      <assert-string-value>1.2678967543233E7</assert-string-value>
    </result>
  </test-case>
  <test-case name="casthc19"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("12678967.543233")</response-string>
    <description> Simple test for casting a decimal as a decimal</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:decimal(12678967.543233) cast as xs:decimal</test>
    <result-string>xs:decimal("12678967.543233")</result-string>
    <result>
      <assert-string-value>12678967.543233</assert-string-value>
    </result>
  </test-case>
  <test-case name="casthc20"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Simple test for casting a decimal as a integer</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:decimal(12678967.543233) cast as xs:integer</test>
    <result-string>xs:integer("12678967")</result-string>
    <result>
      <assert-eq>12678967</assert-eq>
    </result>
  </test-case>
  <test-case name="casthc21"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Simple test for casting a decimal as a boolean</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:decimal(12678967.543233) cast as xs:boolean</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="casthc22"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("12678967543233")</response-string>
    <description> Simple test for casting an integer as a string</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:integer(12678967543233) cast as xs:string</test>
    <result-string>xs:string("12678967543233")</result-string>
    <result>
      <assert-string-value>12678967543233</assert-string-value>
    </result>
  </test-case>
  <test-case name="casthc23"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Simple test for casting an integer as a float</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>(xs:integer(12678967543233) cast as xs:float) eq xs:float(12678967543233)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="casthc24"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:double("1.2678967543233E13")</response-string>
    <description> Simple test for casting an integer as a double</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:integer(12678967543233) cast as xs:double</test>
    <result-string>xs:double("1.2678967543233E13")</result-string>
    <result>
      <assert-string-value>1.2678967543233E13</assert-string-value>
    </result>
  </test-case>
  <test-case name="casthc25"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("12678967543233")</response-string>
    <description> Simple test for casting an integer as a decimal</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:integer(12678967543233) cast as xs:decimal</test>
    <result-string>xs:decimal("12678967543233")</result-string>
    <result>
      <assert-eq>12678967543233</assert-eq>
    </result>
  </test-case>
  <test-case name="casthc26"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("12678967543233")</response-string>
    <description> Simple test for casting an integer as an integer</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:integer(12678967543233) cast as xs:integer</test>
    <result-string>xs:integer("12678967543233")</result-string>
    <result>
      <assert-eq>12678967543233</assert-eq>
    </result>
  </test-case>
  <test-case name="casthc27"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Simple test for casting an integer as a boolean</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:integer(12678967543233) cast as xs:boolean</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="casthc28"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("1999-05-31T13:20:00-05:00")</response-string>
    <description> Simple test for casting an dateTime as a string</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:dateTime("1999-05-31T13:20:00-05:00") cast as xs:string</test>
    <result-string>xs:string("1999-05-31T13:20:00-05:00")</result-string>
    <result>
      <assert-string-value>1999-05-31T13:20:00-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="casthc29"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:dateTime("1999-05-31T13:20:00-05:00")</response-string>
    <description> Simple test for casting an dateTime as a dateTime</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:dateTime("1999-05-31T13:20:00-05:00") cast as xs:dateTime</test>
    <result-string>xs:dateTime("1999-05-31T13:20:00-05:00")</result-string>
    <result>
      <assert-string-value>1999-05-31T13:20:00-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="casthc30"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Simple test for casting an dateTime as a time</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:dateTime("1999-05-31T13:20:00-05:00") cast as xs:time</test>
    <result-string>xs:string("13:20:00-05:00")</result-string>
    <result>
      <assert-string-value>13:20:00-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="casthc31"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Simple test for casting an dateTime as a date</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:dateTime("1999-05-31T13:20:00-05:00") cast as xs:date</test>
    <result-string>xs:string("1999-05-31-05:00")</result-string>
    <result>
      <assert-string-value>1999-05-31-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="casthc32"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("1999-05-31")</response-string>
    <description> Simple test for casting an date as a string</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:date("1999-05-31") cast as xs:string</test>
    <result-string>xs:string("1999-05-31")</result-string>
    <result>
      <assert-string-value>1999-05-31</assert-string-value>
    </result>
  </test-case>
  <test-case name="casthc33"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Simple test for casting an date as a dateTime</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:date("1999-05-31") cast as xs:dateTime</test>
    <result-string>xs:string("1999-05-31T00:00:00")</result-string>
    <result>
      <assert-string-value>1999-05-31T00:00:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="casthc34"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:date("1999-05-31")</response-string>
    <description> Simple test for casting an date as a date</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:date("1999-05-31") cast as xs:date</test>
    <result-string>xs:date("1999-05-31")</result-string>
    <result>
      <assert-string-value>1999-05-31</assert-string-value>
    </result>
  </test-case>
  <test-case name="casthc35"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("12:00:00")</response-string>
    <description> Simple test for casting an xs:time as a string</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:time("12:00:00") cast as xs:string</test>
    <result-string>xs:string("12:00:00")</result-string>
    <result>
      <assert-string-value>12:00:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="casthc36"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:time("12:00:00")</response-string>
    <description> Simple test for casting an xs:time as an xs:time</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>xs:time("12:00:00") cast as xs:time</test>
    <result-string>xs:time("12:00:00")</result-string>
    <result>
      <assert-string-value>12:00:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="casthc37"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("true")</response-string>
    <description> Simple test for casting a boolean as string</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>fn:true() cast as xs:string</test>
    <result-string>xs:string("true")</result-string>
    <result>
      <assert-string-value>true</assert-string-value>
    </result>
  </test-case>
  <test-case name="casthc38"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Simple test for casting a boolean as float</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>fn:true() cast as xs:float</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="casthc39"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Simple test for casting a boolean as double</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>fn:true() cast as xs:double</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="casthc40"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Simple test for casting a boolean as decimal</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>fn:true() cast as xs:decimal</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="casthc41"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Simple test for casting a boolean as integer</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>fn:true() cast as xs:integer</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="casthc42"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Simple test for casting a boolean as boolean</description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>fn:true() cast as xs:boolean</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="casthc43"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:NOTATION("A String")</response-string>
    <description> casting a string into an xs:NOTATION</description>
    <created by="Carmelo Montanez" on="2006-02-06"/>
    <test>xs:string("A String") cast as xs:NOTATION</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0080"))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="CastAs001"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("INF")</response-string>
    <description>Try casting xs:untypedAtomic(INF) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("INF") cast as xs:untypedAtomic</test>
    <result-string>xs:untypedAtomic("INF")</result-string>
    <result>
      <assert-string-value>INF</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs002"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("0.0E0")</response-string>
    <description>Try casting xs:untypedAtomic(0.0E0) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("0.0E0") cast as xs:untypedAtomic</test>
    <result-string>xs:untypedAtomic("0.0E0")</result-string>
    <result>
      <assert-string-value>0.0E0</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs003"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("true")</response-string>
    <description>Try casting xs:untypedAtomic(true) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("true") cast as xs:untypedAtomic</test>
    <result-string>xs:untypedAtomic("true")</result-string>
    <result>
      <assert-string-value>true</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs004"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("INF")</response-string>
    <description>Try casting xs:untypedAtomic(INF) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("INF") cast as xs:string</test>
    <result-string>xs:string("INF")</result-string>
    <result>
      <assert-string-value>INF</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs005"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("0.0E0")</response-string>
    <description>Try casting xs:untypedAtomic(0.0E0) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("0.0E0") cast as xs:string</test>
    <result-string>xs:string("0.0E0")</result-string>
    <result>
      <assert-string-value>0.0E0</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs006"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("true")</response-string>
    <description>Try casting xs:untypedAtomic(true) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("true") cast as xs:string</test>
    <result-string>xs:string("true")</result-string>
    <result>
      <assert-string-value>true</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs007"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:float("0")</response-string>
    <description>Try casting xs:untypedAtomic(-0.0E0) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("-0.0E0") cast as xs:float</test>
    <result-string>xs:float("0")</result-string>
    <result>
      <assert-eq>-0</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs008"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:float("NaN")</response-string>
    <description>Try casting xs:untypedAtomic(NaN) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("NaN") cast as xs:float</test>
    <result-string>xs:float("NaN")</result-string>
    <result>
      <assert-string-value>NaN</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs009"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:float("0.00001")</response-string>
    <description>Try casting xs:untypedAtomic(1e-5) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("1e-5") cast as xs:float</test>
    <result-string>xs:float("0.00001")</result-string>
    <result>
      <assert-string-value>0.00001</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs010"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:float("-1.0E7")</response-string>
    <description>Try casting xs:untypedAtomic(-10000000) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("-10000000") cast as xs:float</test>
    <result-string>xs:float("-1.0E7")</result-string>
    <result>
      <assert-string-value>-1.0E7</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs011"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:untypedAtomic(true) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("true") cast as xs:float</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs012"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:double("0")</response-string>
    <description>Try casting xs:untypedAtomic(-0.0E0) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("-0.0E0") cast as xs:double</test>
    <result-string>xs:double("0")</result-string>
    <result>
      <assert-eq>-0</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs013"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:double("NaN")</response-string>
    <description>Try casting xs:untypedAtomic(NaN) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("NaN") cast as xs:double</test>
    <result-string>xs:double("NaN")</result-string>
    <result>
      <assert-string-value>NaN</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs014"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:double("0.00001")</response-string>
    <description>Try casting xs:untypedAtomic(1e-5) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("1e-5") cast as xs:double</test>
    <result-string>xs:double("0.00001")</result-string>
    <result>
      <assert-string-value>0.00001</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs015"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:double("-1.0E7")</response-string>
    <description>Try casting xs:untypedAtomic(-10000000) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("-10000000") cast as xs:double</test>
    <result-string>xs:double("-1.0E7")</result-string>
    <result>
      <assert-string-value>-1.0E7</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs016"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:untypedAtomic(true) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("true") cast as xs:double</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs017"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:untypedAtomic(-0.0E0) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("-0.0E0") cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs018"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:untypedAtomic(NaN) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("NaN") cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs019"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:untypedAtomic(1e-5) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("1e-5") cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs020"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("5.5432")</response-string>
    <description>Try casting xs:untypedAtomic(5.5432) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("5.5432") cast as xs:decimal</test>
    <result-string>xs:decimal("5.5432")</result-string>
    <result>
      <assert-string-value>5.5432</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs021"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:untypedAtomic(true) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("true") cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs022"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:untypedAtomic(-0.0E0) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("-0.0E0") cast as xs:integer</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs023"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:untypedAtomic(NaN) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("NaN") cast as xs:integer</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs024"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:untypedAtomic(1e-5) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("1e-5") cast as xs:integer</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs025"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:untypedAtomic(-1.1234) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("-1.1234") cast as xs:integer</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs026"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:untypedAtomic(true) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("true") cast as xs:integer</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs027"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:duration("P1Y2M3DT10H30M23S")</response-string>
    <description>Try casting xs:untypedAtomic(P1Y2M3DT10H30M23S) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("P1Y2M3DT10H30M23S") cast as xs:duration</test>
    <result-string>xs:duration("P1Y2M3DT10H30M23S")</result-string>
    <result>
      <assert-string-value>P1Y2M3DT10H30M23S</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs028"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:duration("-P1Y1M1DT1H1M1.123S")</response-string>
    <description>Try casting xs:untypedAtomic(-P1Y1M1DT1H1M1.123S) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("-P1Y1M1DT1H1M1.123S") cast as xs:duration</test>
    <result-string>xs:duration("-P1Y1M1DT1H1M1.123S")</result-string>
    <result>
      <assert-string-value>-P1Y1M1DT1H1M1.123S</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs029"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:untypedAtomic(true) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("true") cast as xs:duration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs030"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:untypedAtomic(-P1Y1M1DT1H1M1.123S) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("-P1Y1M1DT1H1M1.123S") cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs031"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:yearMonthDuration("P2Y")</response-string>
    <description>Try casting xs:untypedAtomic(P24M) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("P24M") cast as xs:yearMonthDuration</test>
    <result-string>xs:yearMonthDuration("P2Y")</result-string>
    <result>
      <assert-string-value>P2Y</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs032"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:yearMonthDuration("-P1Y9M")</response-string>
    <description>Try casting xs:untypedAtomic(-P21M) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("-P21M") cast as xs:yearMonthDuration</test>
    <result-string>xs:yearMonthDuration("-P1Y9M")</result-string>
    <result>
      <assert-string-value>-P1Y9M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs033"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:untypedAtomic(true) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("true") cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs034"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:untypedAtomic(-P1Y1M1DT1H1M1.123S) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("-P1Y1M1DT1H1M1.123S") cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs035"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:dayTimeDuration("P3DT10H30M")</response-string>
    <description>Try casting xs:untypedAtomic(P3DT10H30M) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("P3DT10H30M") cast as xs:dayTimeDuration</test>
    <result-string>xs:dayTimeDuration("P3DT10H30M")</result-string>
    <result>
      <assert-string-value>P3DT10H30M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs036"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:dayTimeDuration("-PT1H40M")</response-string>
    <description>Try casting xs:untypedAtomic(-PT100M) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("-PT100M") cast as xs:dayTimeDuration</test>
    <result-string>xs:dayTimeDuration("-PT1H40M")</result-string>
    <result>
      <assert-string-value>-PT1H40M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs037"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:untypedAtomic(true) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("true") cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs038"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:dateTime("1999-05-31T13:20:00")</response-string>
    <description>Try casting xs:untypedAtomic(1999-05-31T13:20:00) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("1999-05-31T13:20:00") cast as xs:dateTime</test>
    <result-string>xs:dateTime("1999-05-31T13:20:00")</result-string>
    <result>
      <assert-string-value>1999-05-31T13:20:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs039"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:untypedAtomic(-1999-05-31T13:20:00+14:00) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("-1999-05-31T13:20:00+14:00") cast as xs:dateTime</test>
    <result-string>xs:string("-1999-05-31T13:20:00+14:00")</result-string>
    <result>
      <assert-string-value>-1999-05-31T13:20:00+14:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs040"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:dateTime("2000-01-16T00:00:00Z")</response-string>
    <description>Try casting xs:untypedAtomic(2000-01-16T00:00:00Z) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("2000-01-16T00:00:00Z") cast as xs:dateTime</test>
    <result-string>xs:dateTime("2000-01-16T00:00:00Z")</result-string>
    <result>
      <assert-string-value>2000-01-16T00:00:00Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs041"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:untypedAtomic(true) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("true") cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs042"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:time("13:20:00-05:00")</response-string>
    <description>Try casting xs:untypedAtomic(13:20:00-05:00) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("13:20:00-05:00") cast as xs:time</test>
    <result-string>xs:time("13:20:00-05:00")</result-string>
    <result>
      <assert-string-value>13:20:00-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs043"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:time("13:20:02.123")</response-string>
    <description>Try casting xs:untypedAtomic(13:20:02.123) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("13:20:02.123") cast as xs:time</test>
    <result-string>xs:time("13:20:02.123")</result-string>
    <result>
      <assert-string-value>13:20:02.123</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs044"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:time("13:20:00Z")</response-string>
    <description>Try casting xs:untypedAtomic(13:20:00Z) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("13:20:00Z") cast as xs:time</test>
    <result-string>xs:time("13:20:00Z")</result-string>
    <result>
      <assert-string-value>13:20:00Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs045"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:untypedAtomic(true) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("true") cast as xs:time</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs046"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:date("1999-05-31")</response-string>
    <description>Try casting xs:untypedAtomic(1999-05-31) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("1999-05-31") cast as xs:date</test>
    <result-string>xs:date("1999-05-31")</result-string>
    <result>
      <assert-string-value>1999-05-31</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs047"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:untypedAtomic(-0012-12-03-05:00) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("-0012-12-03-05:00") cast as xs:date</test>
    <result-string>xs:string("-0012-12-03-05:00")</result-string>
    <result>
      <assert-string-value>-0012-12-03-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs048"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:date("1999-05-31Z")</response-string>
    <description>Try casting xs:untypedAtomic(1999-05-31Z) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("1999-05-31Z") cast as xs:date</test>
    <result-string>xs:date("1999-05-31Z")</result-string>
    <result>
      <assert-string-value>1999-05-31Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs049"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:untypedAtomic(true) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("true") cast as xs:date</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs050"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:gYearMonth("1999-05")</response-string>
    <description>Try casting xs:untypedAtomic(1999-05) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("1999-05") cast as xs:gYearMonth</test>
    <result-string>xs:gYearMonth("1999-05")</result-string>
    <result>
      <assert-string-value>1999-05</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs051"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:untypedAtomic(-0012-12-05:00) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("-0012-12-05:00") cast as xs:gYearMonth</test>
    <result-string>xs:string("-0012-12-05:00")</result-string>
    <result>
      <assert-string-value>-0012-12-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs052"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:untypedAtomic(1999-05Z) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("1999-05Z") cast as xs:gYearMonth</test>
    <result-string>xs:string("1999-05Z")</result-string>
    <result>
      <assert-string-value>1999-05Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs053"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:untypedAtomic(true) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("true") cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs054"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:gYear("1999")</response-string>
    <description>Try casting xs:untypedAtomic(1999) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("1999") cast as xs:gYear</test>
    <result-string>xs:gYear("1999")</result-string>
    <result>
      <assert-string-value>1999</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs055"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:untypedAtomic(-0012-05:00) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("-0012-05:00") cast as xs:gYear</test>
    <result-string>xs:string("-0012-05:00")</result-string>
    <result>
      <assert-string-value>-0012-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs056"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:untypedAtomic(1999Z) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("1999Z") cast as xs:gYear</test>
    <result-string>xs:string("1999Z")</result-string>
    <result>
      <assert-string-value>1999Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs057"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:untypedAtomic(true) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("true") cast as xs:gYear</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs058"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:gMonthDay("--05-31")</response-string>
    <description>Try casting xs:untypedAtomic(--05-31) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("--05-31") cast as xs:gMonthDay</test>
    <result-string>xs:string("--05-31")</result-string>
    <result>
      <assert-string-value>--05-31</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs059"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:untypedAtomic(--05-31+14:00) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("--05-31+14:00") cast as xs:gMonthDay</test>
    <result-string>xs:string("--05-31+14:00")</result-string>
    <result>
      <assert-string-value>--05-31+14:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs060"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:untypedAtomic(--05-31Z) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("--05-31Z") cast as xs:gMonthDay</test>
    <result-string>xs:string("--05-31Z")</result-string>
    <result>
      <assert-string-value>--05-31Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs061"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:untypedAtomic(true) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("true") cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs062"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:gDay("---31")</response-string>
    <description>Try casting xs:untypedAtomic(---31) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("---31") cast as xs:gDay</test>
    <result-string>xs:gDay("---31")</result-string>
    <result>
      <assert-string-value>---31</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs063"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:untypedAtomic(---03-05:00) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("---03-05:00") cast as xs:gDay</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-string-value>---03-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs064"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:untypedAtomic(---31Z) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("---31Z") cast as xs:gDay</test>
    <result-string>xs:string("---31Z")</result-string>
    <result>
      <assert-string-value>---31Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs065"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:untypedAtomic(true) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("true") cast as xs:gDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs066"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:gMonth("--05")</response-string>
    <description>Try casting xs:untypedAtomic(--05) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("--05") cast as xs:gMonth</test>
    <result-string>xs:gMonth("--05")</result-string>
    <result>
      <assert-string-value>--05</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs067"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:untypedAtomic(--12-05:00) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("--12-05:00") cast as xs:gMonth</test>
    <result-string>xs:string("--12-05:00")</result-string>
    <result>
      <assert-string-value>--12-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs068"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:untypedAtomic(--05Z) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("--05Z") cast as xs:gMonth</test>
    <result-string>xs:string("--05Z")</result-string>
    <result>
      <assert-string-value>--05Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs069"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:untypedAtomic(true) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("true") cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs070"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:untypedAtomic(0.0) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("0.0") cast as xs:boolean</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs071"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:untypedAtomic(0) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("0") cast as xs:boolean</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="CastAs072"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description>Try casting xs:untypedAtomic(true) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("true") cast as xs:boolean</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="CastAs073"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:base64Binary("true")</response-string>
    <description>Try casting xs:untypedAtomic(true) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("true") cast as xs:base64Binary</test>
    <result-string>xs:base64Binary("true")</result-string>
    <result>
      <assert-string-value>true</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs074"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:base64Binary("00000000")</response-string>
    <description>Try casting xs:untypedAtomic(00000000) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("00000000") cast as xs:base64Binary</test>
    <result-string>xs:base64Binary("00000000")</result-string>
    <result>
      <assert-string-value>00000000</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs075"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:base64Binary("D74D35D35D35")</response-string>
    <description>Try casting xs:untypedAtomic(D74D35D35D35) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("D74D35D35D35") cast as xs:base64Binary</test>
    <result-string>xs:base64Binary("D74D35D35D35")</result-string>
    <result>
      <assert-string-value>D74D35D35D35</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs076"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:untypedAtomic(true) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("true") cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs077"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:untypedAtomic(010010101) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("010010101") cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs078"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:hexBinary("0FB7")</response-string>
    <description>Try casting xs:untypedAtomic(0fb7) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("0fb7") cast as xs:hexBinary</test>
    <result-string>xs:hexBinary("0FB7")</result-string>
    <result>
      <assert-string-value>0FB7</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs079"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:hexBinary("D74D35D35D35")</response-string>
    <description>Try casting xs:untypedAtomic(D74D35D35D35) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("D74D35D35D35") cast as xs:hexBinary</test>
    <result-string>xs:hexBinary("D74D35D35D35")</result-string>
    <result>
      <assert-string-value>D74D35D35D35</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs080"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("http://www.example.com/~b%C3%A9b%C3%A9")</response-string>
    <description>Try casting xs:untypedAtomic(-0012-05:00) to xs:anyURI</description>
    <created by="Joanne Tong" on="2006-01-27-07:00"/>
    <test>xs:untypedAtomic("http://www.example.com/~b%C3%A9b%C3%A9") cast as xs:anyURI</test>
    <result-string>xs:anyURI("http://www.example.com/~b%C3%A9b%C3%A9")</result-string>
    <result>
      <assert-string-value>http://www.example.com/~b%C3%A9b%C3%A9</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs081"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("true")</response-string>
    <description>Try casting xs:untypedAtomic(true) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("true") cast as xs:anyURI</test>
    <result-string>xs:anyURI("true")</result-string>
    <result>
      <assert-string-value>true</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs082"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt")</response-string>
    <description>Try casting xs:untypedAtomic(http://www.ietf.org/rfc/rfc2396.txt) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:untypedAtomic("http://www.ietf.org/rfc/rfc2396.txt") cast as xs:anyURI</test>
    <result-string>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt")</result-string>
    <result>
      <assert-string-value>http://www.ietf.org/rfc/rfc2396.txt</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs083"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("INF")</response-string>
    <description>Try casting xs:string(INF) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("INF") cast as xs:untypedAtomic</test>
    <result-string>xs:untypedAtomic("INF")</result-string>
    <result>
      <assert-string-value>INF</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs084"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("0.0E0")</response-string>
    <description>Try casting xs:string(0.0E0) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("0.0E0") cast as xs:untypedAtomic</test>
    <result-string>xs:untypedAtomic("0.0E0")</result-string>
    <result>
      <assert-string-value>0.0E0</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs085"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("true")</response-string>
    <description>Try casting xs:string(true) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("true") cast as xs:untypedAtomic</test>
    <result-string>xs:untypedAtomic("true")</result-string>
    <result>
      <assert-string-value>true</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs086"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("INF")</response-string>
    <description>Try casting xs:string(INF) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("INF") cast as xs:string</test>
    <result-string>xs:string("INF")</result-string>
    <result>
      <assert-string-value>INF</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs087"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("0.0E0")</response-string>
    <description>Try casting xs:string(0.0E0) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("0.0E0") cast as xs:string</test>
    <result-string>xs:string("0.0E0")</result-string>
    <result>
      <assert-string-value>0.0E0</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs088"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("true")</response-string>
    <description>Try casting xs:string(true) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("true") cast as xs:string</test>
    <result-string>xs:string("true")</result-string>
    <result>
      <assert-string-value>true</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs089"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:float("0")</response-string>
    <description>Try casting xs:string(-0.0E0) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("-0.0E0") cast as xs:float</test>
    <result-string>xs:float("0")</result-string>
    <result>
      <assert-eq>-0</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs090"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:float("NaN")</response-string>
    <description>Try casting xs:string(NaN) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("NaN") cast as xs:float</test>
    <result-string>xs:float("NaN")</result-string>
    <result>
      <assert-string-value>NaN</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs091"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:float("0.00001")</response-string>
    <description>Try casting xs:string(1e-5) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("1e-5") cast as xs:float</test>
    <result-string>xs:float("0.00001")</result-string>
    <result>
      <assert-string-value>0.00001</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs092"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:float("-1.0E7")</response-string>
    <description>Try casting xs:string(-10000000) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("-10000000") cast as xs:float</test>
    <result-string>xs:float("-1.0E7")</result-string>
    <result>
      <assert-string-value>-1.0E7</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs093"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:string(true) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("true") cast as xs:float</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs094"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:double("0")</response-string>
    <description>Try casting xs:string(-0.0E0) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("-0.0E0") cast as xs:double</test>
    <result-string>xs:double("0")</result-string>
    <result>
      <assert-eq>-0</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs095"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:double("NaN")</response-string>
    <description>Try casting xs:string(NaN) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("NaN") cast as xs:double</test>
    <result-string>xs:double("NaN")</result-string>
    <result>
      <assert-string-value>NaN</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs096"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:double("0.00001")</response-string>
    <description>Try casting xs:string(1e-5) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("1e-5") cast as xs:double</test>
    <result-string>xs:double("0.00001")</result-string>
    <result>
      <assert-string-value>0.00001</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs097"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:double("-1.0E7")</response-string>
    <description>Try casting xs:string(-10000000) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("-10000000") cast as xs:double</test>
    <result-string>xs:double("-1.0E7")</result-string>
    <result>
      <assert-string-value>-1.0E7</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs098"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:string(true) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("true") cast as xs:double</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs099"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:string(-0.0E0) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("-0.0E0") cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs100"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:string(NaN) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("NaN") cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs101"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:string(1e-5) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("1e-5") cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs102"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("5.5432")</response-string>
    <description>Try casting xs:string(5.5432) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("5.5432") cast as xs:decimal</test>
    <result-string>xs:decimal("5.5432")</result-string>
    <result>
      <assert-string-value>5.5432</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs103"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:string(true) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("true") cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs104"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:string(-0.0E0) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("-0.0E0") cast as xs:integer</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs105"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:string(NaN) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("NaN") cast as xs:integer</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs106"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:string(1e-5) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("1e-5") cast as xs:integer</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs107"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:string(-1.1234) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("-1.1234") cast as xs:integer</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs108"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:string(true) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("true") cast as xs:integer</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs109"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:duration("P1Y2M3DT10H30M23S")</response-string>
    <description>Try casting xs:string(P1Y2M3DT10H30M23S) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("P1Y2M3DT10H30M23S") cast as xs:duration</test>
    <result-string>xs:duration("P1Y2M3DT10H30M23S")</result-string>
    <result>
      <assert-string-value>P1Y2M3DT10H30M23S</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs110"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:duration("-P1Y1M1DT1H1M1.123S")</response-string>
    <description>Try casting xs:string(-P1Y1M1DT1H1M1.123S) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("-P1Y1M1DT1H1M1.123S") cast as xs:duration</test>
    <result-string>xs:duration("-P1Y1M1DT1H1M1.123S")</result-string>
    <result>
      <assert-string-value>-P1Y1M1DT1H1M1.123S</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs111"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:string(true) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("true") cast as xs:duration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs112"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:string(-P1Y1M1DT1H1M1.123S) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("-P1Y1M1DT1H1M1.123S") cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs113"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:yearMonthDuration("P2Y")</response-string>
    <description>Try casting xs:string(P24M) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("P24M") cast as xs:yearMonthDuration</test>
    <result-string>xs:yearMonthDuration("P2Y")</result-string>
    <result>
      <assert-string-value>P2Y</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs114"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:yearMonthDuration("-P1Y9M")</response-string>
    <description>Try casting xs:string(-P21M) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("-P21M") cast as xs:yearMonthDuration</test>
    <result-string>xs:yearMonthDuration("-P1Y9M")</result-string>
    <result>
      <assert-string-value>-P1Y9M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs115"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:string(true) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("true") cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs116"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:string(-P1Y1M1DT1H1M1.123S) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("-P1Y1M1DT1H1M1.123S") cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs117"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:dayTimeDuration("P3DT10H30M")</response-string>
    <description>Try casting xs:string(P3DT10H30M) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("P3DT10H30M") cast as xs:dayTimeDuration</test>
    <result-string>xs:dayTimeDuration("P3DT10H30M")</result-string>
    <result>
      <assert-string-value>P3DT10H30M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs118"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:dayTimeDuration("-PT1H40M")</response-string>
    <description>Try casting xs:string(-PT100M) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("-PT100M") cast as xs:dayTimeDuration</test>
    <result-string>xs:dayTimeDuration("-PT1H40M")</result-string>
    <result>
      <assert-string-value>-PT1H40M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs119"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:string(true) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("true") cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs120"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:dateTime("1999-05-31T13:20:00")</response-string>
    <description>Try casting xs:string(1999-05-31T13:20:00) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("1999-05-31T13:20:00") cast as xs:dateTime</test>
    <result-string>xs:dateTime("1999-05-31T13:20:00")</result-string>
    <result>
      <assert-string-value>1999-05-31T13:20:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs121"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:string(-1999-05-31T13:20:00+14:00) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("-1999-05-31T13:20:00+14:00") cast as xs:dateTime</test>
    <result-string>xs:string("-1999-05-31T13:20:00+14:00")</result-string>
    <result>
      <assert-string-value>-1999-05-31T13:20:00+14:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs122"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:dateTime("2000-01-16T00:00:00Z")</response-string>
    <description>Try casting xs:string(2000-01-16T00:00:00Z) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("2000-01-16T00:00:00Z") cast as xs:dateTime</test>
    <result-string>xs:dateTime("2000-01-16T00:00:00Z")</result-string>
    <result>
      <assert-string-value>2000-01-16T00:00:00Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs123"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:string(true) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("true") cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs124"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:time("13:20:00-05:00")</response-string>
    <description>Try casting xs:string(13:20:00-05:00) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("13:20:00-05:00") cast as xs:time</test>
    <result-string>xs:time("13:20:00-05:00")</result-string>
    <result>
      <assert-string-value>13:20:00-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs125"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:time("13:20:02.123")</response-string>
    <description>Try casting xs:string(13:20:02.123) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("13:20:02.123") cast as xs:time</test>
    <result-string>xs:time("13:20:02.123")</result-string>
    <result>
      <assert-string-value>13:20:02.123</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs126"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:time("13:20:00Z")</response-string>
    <description>Try casting xs:string(13:20:00Z) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("13:20:00Z") cast as xs:time</test>
    <result-string>xs:time("13:20:00Z")</result-string>
    <result>
      <assert-string-value>13:20:00Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs127"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:string(true) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("true") cast as xs:time</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs128"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:date("1999-05-31")</response-string>
    <description>Try casting xs:string(1999-05-31) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("1999-05-31") cast as xs:date</test>
    <result-string>xs:date("1999-05-31")</result-string>
    <result>
      <assert-string-value>1999-05-31</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs129"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:string(-0012-12-03-05:00) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("-0012-12-03-05:00") cast as xs:date</test>
    <result-string>xs:string("-0012-12-03-05:00")</result-string>
    <result>
      <assert-string-value>-0012-12-03-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs130"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:date("1999-05-31Z")</response-string>
    <description>Try casting xs:string(1999-05-31Z) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("1999-05-31Z") cast as xs:date</test>
    <result-string>xs:date("1999-05-31Z")</result-string>
    <result>
      <assert-string-value>1999-05-31Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs131"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:string(true) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("true") cast as xs:date</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs132"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:gYearMonth("1999-05")</response-string>
    <description>Try casting xs:string(1999-05) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("1999-05") cast as xs:gYearMonth</test>
    <result-string>xs:gYearMonth("1999-05")</result-string>
    <result>
      <assert-string-value>1999-05</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs133"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:string(-0012-12-05:00) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("-0012-12-05:00") cast as xs:gYearMonth</test>
    <result-string>xs:string("-0012-12-05:00")</result-string>
    <result>
      <assert-string-value>-0012-12-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs134"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:string(1999-05Z) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("1999-05Z") cast as xs:gYearMonth</test>
    <result-string>xs:string("1999-05Z")</result-string>
    <result>
      <assert-string-value>1999-05Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs135"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:string(true) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("true") cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs136"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:gYear("1999")</response-string>
    <description>Try casting xs:string(1999) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("1999") cast as xs:gYear</test>
    <result-string>xs:gYear("1999")</result-string>
    <result>
      <assert-string-value>1999</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs137"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:string(-0012-05:00) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("-0012-05:00") cast as xs:gYear</test>
    <result-string>xs:string("-0012-05:00")</result-string>
    <result>
      <assert-string-value>-0012-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs138"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:string(1999Z) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("1999Z") cast as xs:gYear</test>
    <result-string>xs:string("1999Z")</result-string>
    <result>
      <assert-string-value>1999Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs139"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:string(true) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("true") cast as xs:gYear</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs140"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:gMonthDay("--05-31")</response-string>
    <description>Try casting xs:string(--05-31) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("--05-31") cast as xs:gMonthDay</test>
    <result-string>xs:gMonthDay("--05-31")</result-string>
    <result>
      <assert-string-value>--05-31</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs141"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:string(--05-31+14:00) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("--05-31+14:00") cast as xs:gMonthDay</test>
    <result-string>xs:string("--05-31+14:00")</result-string>
    <result>
      <assert-string-value>--05-31+14:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs142"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:string(--05-31Z) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("--05-31Z") cast as xs:gMonthDay</test>
    <result-string>xs:string("--05-31Z")</result-string>
    <result>
      <assert-string-value>--05-31Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs143"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:string(true) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("true") cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs144"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:gDay("---31")</response-string>
    <description>Try casting xs:string(---31) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("---31") cast as xs:gDay</test>
    <result-string>xs:gDay("---31")</result-string>
    <result>
      <assert-string-value>---31</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs145"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:string(---03-05:00) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("---03-05:00") cast as xs:gDay</test>
    <result-string>xs:string("---03-05:00")</result-string>
    <result>
      <assert-string-value>---03-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs146"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:string(---31Z) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("---31Z") cast as xs:gDay</test>
    <result-string>xs:string("---31Z")</result-string>
    <result>
      <assert-string-value>---31Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs147"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:string(true) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("true") cast as xs:gDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs148"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:gMonth("--05")</response-string>
    <description>Try casting xs:string(--05) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("--05") cast as xs:gMonth</test>
    <result-string>xs:gMonth("--05")</result-string>
    <result>
      <assert-string-value>--05</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs149"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:string(--12-05:00) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("--12-05:00") cast as xs:gMonth</test>
    <result-string>xs:string("--12-05:00")</result-string>
    <result>
      <assert-string-value>--12-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs150"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:string(--05Z) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("--05Z") cast as xs:gMonth</test>
    <result-string>xs:string("--05Z")</result-string>
    <result>
      <assert-string-value>--05Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs151"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:string(true) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("true") cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs152"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:string(0.0) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("0.0") cast as xs:boolean</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs153"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:string(0) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("0") cast as xs:boolean</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="CastAs154"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description>Try casting xs:string(true) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("true") cast as xs:boolean</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="CastAs155"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:base64Binary("true")</response-string>
    <description>Try casting xs:string(true) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("true") cast as xs:base64Binary</test>
    <result-string>xs:base64Binary("true")</result-string>
    <result>
      <assert-string-value>true</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs156"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:base64Binary("00000000")</response-string>
    <description>Try casting xs:string(00000000) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("00000000") cast as xs:base64Binary</test>
    <result-string>xs:base64Binary("00000000")</result-string>
    <result>
      <assert-string-value>00000000</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs157"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:base64Binary("D74D35D35D35")</response-string>
    <description>Try casting xs:string(D74D35D35D35) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("D74D35D35D35") cast as xs:base64Binary</test>
    <result-string>xs:base64Binary("D74D35D35D35")</result-string>
    <result>
      <assert-string-value>D74D35D35D35</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs158"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:string(true) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("true") cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs159"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:string(010010101) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("010010101") cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="CastAs160"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:hexBinary("0FB7")</response-string>
    <description>Try casting xs:string(0fb7) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("0fb7") cast as xs:hexBinary</test>
    <result-string>xs:hexBinary("0FB7")</result-string>
    <result>
      <assert-string-value>0FB7</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs161"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:hexBinary("D74D35D35D35")</response-string>
    <description>Try casting xs:string(D74D35D35D35) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("D74D35D35D35") cast as xs:hexBinary</test>
    <result-string>xs:hexBinary("D74D35D35D35")</result-string>
    <result>
      <assert-string-value>D74D35D35D35</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs162"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("http://www.example.com/~b%C3%A9b%C3%A9")</response-string>
    <description>Try casting xs:string(-0012-05:00) to xs:anyURI</description>
    <created by="Joanne Tong" on="2006-01-27-07:00"/>
    <test>xs:string("http://www.example.com/~b%C3%A9b%C3%A9") cast as xs:anyURI</test>
    <result-string>xs:anyURI("http://www.example.com/~b%C3%A9b%C3%A9")</result-string>
    <result>
      <assert-string-value>http://www.example.com/~b%C3%A9b%C3%A9</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs163"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("true")</response-string>
    <description>Try casting xs:string(true) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("true") cast as xs:anyURI</test>
    <result-string>xs:anyURI("true")</result-string>
    <result>
      <assert-string-value>true</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs164"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt")</response-string>
    <description>Try casting xs:string(http://www.ietf.org/rfc/rfc2396.txt) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:string("http://www.ietf.org/rfc/rfc2396.txt") cast as xs:anyURI</test>
    <result-string>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt")</result-string>
    <result>
      <assert-string-value>http://www.ietf.org/rfc/rfc2396.txt</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs165"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("100000")</response-string>
    <description>Try casting xs:float(1e5) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float("1e5") cast as xs:untypedAtomic</test>
    <result-string>xs:untypedAtomic("100000")</result-string>
    <result>
      <assert-string-value>100000</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs166"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("-INF")</response-string>
    <description>Try casting xs:float(-INF) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float("-INF") cast as xs:untypedAtomic</test>
    <result-string>xs:untypedAtomic("-INF")</result-string>
    <result>
      <assert-string-value>-INF</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs167"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("0")</response-string>
    <description>Try casting xs:float(-0.0E0) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float("-0.0E0") cast as xs:string</test>
    <result-string>xs:string("0")</result-string>
    <result>
      <assert-string-value>-0</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs168"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("NaN")</response-string>
    <description>Try casting xs:float(NaN) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float("NaN") cast as xs:string</test>
    <result-string>xs:string("NaN")</result-string>
    <result>
      <assert-string-value>NaN</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs169"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:float("5.4321E-100")</response-string>
    <description>Try casting xs:float(5.4321E-100) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float("5.4321E-100") cast as xs:float</test>
    <result-string>xs:float("5.4321E-100")</result-string>
    <result-string>xs:float("5.4321E-100")</result-string>
    <result>
      <any-of>
        <assert-eq>0</assert-eq>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="CastAs170"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:float("-0.00175")</response-string>
    <description>Try casting xs:float(-1.75e-3) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float("-1.75e-3") cast as xs:float</test>
    <result-string>xs:float("-0.00175")</result-string>
    <result>
      <assert-string-value>-0.00175</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs171"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:float("INF")</response-string>
    <description>Try casting xs:float(INF) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float("INF") cast as xs:float</test>
    <result-string>xs:float("INF")</result-string>
    <result>
      <assert-string-value>INF</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs172"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:double("0")</response-string>
    <description>Try casting xs:float(-0.0E0) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float("-0.0E0") cast as xs:double</test>
    <result-string>xs:double("0")</result-string>
    <result>
      <assert-eq>-0</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs173"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:double("-INF")</response-string>
    <description>Try casting xs:float(-INF) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float("-INF") cast as xs:double</test>
    <result-string>xs:double("-INF")</result-string>
    <result>
      <assert-string-value>-INF</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs174"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("0")</response-string>
    <description>Try casting xs:float(-0.0E0) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float("-0.0E0") cast as xs:decimal</test>
    <result-string>xs:decimal("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs175"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:float(5.4321E-100) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float("5.4321E-100") cast as xs:decimal</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs176"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("100000")</response-string>
    <description>Try casting xs:float(1e5) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float("1e5") cast as xs:decimal</test>
    <result-string>xs:decimal("100000")</result-string>
    <result>
      <assert-eq>100000</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs177"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("-0.00175")</response-string>
    <description>Try casting xs:float(-1.75e-3) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>round-half-to-even(xs:float("-1.75e-3") cast as xs:decimal,5)</test>
    <result-string>xs:decimal("-0.00175")</result-string>
    <result>
      <assert-string-value>-0.00175</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs178"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string>
    <description>Try casting xs:float(-0.0E0) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float("-0.0E0") cast as xs:integer</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs179"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("100000")</response-string>
    <description>Try casting xs:float(1e5) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float("1e5") cast as xs:integer</test>
    <result-string>xs:integer("100000")</result-string>
    <result>
      <assert-eq>100000</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs180"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:float(INF) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float("INF") cast as xs:integer</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="CastAs181"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:float(-1.75e-3) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float("-1.75e-3") cast as xs:duration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs182"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:float(5.4321E-100) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float("5.4321E-100") cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOAR0002"))</result-string>
    <result>
      <any-of>
        <error code="XPTY0004"/>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="CastAs183"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:float(5.4321E-100) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float("5.4321E-100") cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOAR0002"))</result-string>
    <result>
      <any-of>
        <error code="XPTY0004"/>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="CastAs184"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:float(5.4321E-100) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float("5.4321E-100") cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOAR0002"))</result-string>
    <result>
      <any-of>
        <error code="XPTY0004"/>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="CastAs185"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:float(5.4321E-100) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float("5.4321E-100") cast as xs:time</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOAR0002"))</result-string>
    <result>
      <any-of>
        <error code="XPTY0004"/>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="CastAs186"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:float(5.4321E-100) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float("5.4321E-100") cast as xs:date</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOAR0002"))</result-string>
    <result>
      <any-of>
        <error code="XPTY0004"/>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="CastAs187"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:float(5.4321E-100) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float("5.4321E-100") cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOAR0002"))</result-string>
    <result>
      <any-of>
        <error code="XPTY0004"/>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="CastAs188"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:float(5.4321E-100) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float("5.4321E-100") cast as xs:gYear</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOAR0002"))</result-string>
    <result>
      <any-of>
        <error code="XPTY0004"/>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="CastAs189"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:float(5.4321E-100) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float("5.4321E-100") cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOAR0002"))</result-string>
    <result>
      <any-of>
        <error code="XPTY0004"/>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="CastAs190"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:float(5.4321E-100) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float("5.4321E-100") cast as xs:gDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOAR0002"))</result-string>
    <result>
      <any-of>
        <error code="XPTY0004"/>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="CastAs191"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:float(5.4321E-100) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float("5.4321E-100") cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOAR0002"))</result-string>
    <result>
      <any-of>
        <error code="XPTY0004"/>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="CastAs192"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:float(-0.0E0) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float("-0.0E0") cast as xs:boolean</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="CastAs193"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:float(1e5) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float("1e5") cast as xs:boolean</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="CastAs194"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:float(-INF) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float("-INF") cast as xs:boolean</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="CastAs195"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:float(NaN) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float("NaN") cast as xs:boolean</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="CastAs196"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:float(5.4321E-100) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float("5.4321E-100") cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOAR0002"))</result-string>
    <result>
      <any-of>
        <error code="XPTY0004"/>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="CastAs197"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:float(5.4321E-100) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float("5.4321E-100") cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOAR0002"))</result-string>
    <result>
      <any-of>
        <error code="XPTY0004"/>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="CastAs198"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("5.4321E-100")</response-string>
    <description>Try casting xs:float(5.4321E-100) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:float("5.4321E-100") cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOAR0002"))</result-string>
    <result>
      <any-of>
        <error code="XPTY0004"/>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="CastAs199"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("100000")</response-string>
    <description>Try casting xs:double(1e5) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double("1e5") cast as xs:untypedAtomic</test>
    <result-string>xs:untypedAtomic("100000")</result-string>
    <result>
      <assert-string-value>100000</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs200"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("INF")</response-string>
    <description>Try casting xs:double(INF) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double("INF") cast as xs:untypedAtomic</test>
    <result-string>xs:untypedAtomic("INF")</result-string>
    <result>
      <assert-string-value>INF</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs201"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("1.0E8")</response-string>
    <description>Try casting xs:double(1e8) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double("1e8") cast as xs:string</test>
    <result-string>xs:string("1.0E8")</result-string>
    <result>
      <assert-string-value>1.0E8</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs202"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("INF")</response-string>
    <description>Try casting xs:double(INF) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double("INF") cast as xs:string</test>
    <result-string>xs:string("INF")</result-string>
    <result>
      <assert-string-value>INF</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs203"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:float("0")</response-string>
    <description>Try casting xs:double(-0.0E0) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double("-0.0E0") cast as xs:float</test>
    <result-string>xs:float("0")</result-string>
    <result>
      <assert-eq>-0</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs204"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:float("0")</response-string>
    <description>Try casting xs:double(5.4321E-1001) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double("5.4321E-1001") cast as xs:float</test>
    <result-string>xs:float("0")</result-string>
    <result-string>xs:float("0")</result-string>
    <result>
      <any-of>
        <assert-eq>0</assert-eq>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="CastAs205"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:float("100000")</response-string>
    <description>Try casting xs:double(1e5) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double("1e5") cast as xs:float</test>
    <result-string>xs:float("100000")</result-string>
    <result>
      <assert-eq>100000</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs206"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:float("-0.00175")</response-string>
    <description>Try casting xs:double(-1.75e-3) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double("-1.75e-3") cast as xs:float</test>
    <result-string>xs:float("-0.00175")</result-string>
    <result>
      <assert-string-value>-0.00175</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs207"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:float("NaN")</response-string>
    <description>Try casting xs:double(NaN) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double("NaN") cast as xs:float</test>
    <result-string>xs:float("NaN")</result-string>
    <result>
      <assert-string-value>NaN</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs208"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:double("100000")</response-string>
    <description>Try casting xs:double(1e5) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double("1e5") cast as xs:double</test>
    <result-string>xs:double("100000")</result-string>
    <result>
      <assert-eq>100000</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs209"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:double("INF")</response-string>
    <description>Try casting xs:double(INF) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double("INF") cast as xs:double</test>
    <result-string>xs:double("INF")</result-string>
    <result>
      <assert-string-value>INF</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs210"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("0")</response-string>
    <description>Try casting xs:double(-0.0E0) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double("-0.0E0") cast as xs:decimal</test>
    <result-string>xs:decimal("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs211"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("0")</response-string>
    <description>Try casting xs:double(5.4321E-1001) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double("5.4321E-1001") cast as xs:decimal</test>
    <result-string>xs:decimal("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs212"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("-0.00175")</response-string>
    <description>Try casting xs:double(-1.75e-3) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>round-half-to-even(xs:double("-1.75e-3") cast as xs:decimal,5)</test>
    <result-string>xs:decimal("-0.00175")</result-string>
    <result>
      <assert-string-value>-0.00175</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs213"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:double(INF) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double("INF") cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <any-of>
        <error code="FOCA0002"/>
        <error code="FORG0001"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="CastAs214"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string>
    <description>Try casting xs:double(-0.0E0) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double("-0.0E0") cast as xs:integer</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs215"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("100000")</response-string>
    <description>Try casting xs:double(1e5) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double("1e5") cast as xs:integer</test>
    <result-string>xs:integer("100000")</result-string>
    <result>
      <assert-eq>100000</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs216"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:double(-1.75e-3) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double("-1.75e-3") cast as xs:integer</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs217"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:double(INF) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double("INF") cast as xs:integer</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="CastAs218"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:double(NaN) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double("NaN") cast as xs:integer</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="CastAs219"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:double(1e5) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double("1e5") cast as xs:duration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs220"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:double(1e5) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double("1e5") cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs221"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:double(1e5) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double("1e5") cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs222"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:double(1e5) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double("1e5") cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs223"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:double(1e5) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double("1e5") cast as xs:time</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs224"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:double(1e5) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double("1e5") cast as xs:date</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs225"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:double(1e5) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double("1e5") cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs226"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:gYear("100000")</response-string>
    <description>Try casting xs:double(1e5) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double("1e5") cast as xs:gYear</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs227"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:double(1e5) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double("1e5") cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs228"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:double(1e5) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double("1e5") cast as xs:gDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs229"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:double(1e5) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double("1e5") cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs230"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:double(1e5) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double("1e5") cast as xs:boolean</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="CastAs231"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:double(1e5) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double("1e5") cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs232"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:hexBinary("100000")</response-string>
    <description>Try casting xs:double(1e5) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double("1e5") cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs233"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("100000")</response-string>
    <description>Try casting xs:double(1e5) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:double("1e5") cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs234"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("-1.1234")</response-string>
    <description>Try casting xs:decimal(-1.1234) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal("-1.1234") cast as xs:untypedAtomic</test>
    <result-string>xs:untypedAtomic("-1.1234")</result-string>
    <result>
      <assert-string-value>-1.1234</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs235"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("-1.1234")</response-string>
    <description>Try casting xs:decimal(-1.1234) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal("-1.1234") cast as xs:string</test>
    <result-string>xs:string("-1.1234")</result-string>
    <result>
      <assert-string-value>-1.1234</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs236"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:float("-1.1234")</response-string>
    <description>Try casting xs:decimal(-1.1234) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal("-1.1234") cast as xs:float</test>
    <result-string>xs:float("-1.1234")</result-string>
    <result>
      <assert-string-value>-1.1234</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs237"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:double("-1.1234")</response-string>
    <description>Try casting xs:decimal(-1.1234) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal("-1.1234") cast as xs:double</test>
    <result-string>xs:double("-1.1234")</result-string>
    <result>
      <assert-string-value>-1.1234</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs238"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("-1.1234")</response-string>
    <description>Try casting xs:decimal(-1.1234) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal("-1.1234") cast as xs:decimal</test>
    <result-string>xs:decimal("-1.1234")</result-string>
    <result>
      <assert-string-value>-1.1234</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs239"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:decimal(-1.1234) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal("-1.1234") cast as xs:integer</test>
    <result-string>xs:integer("-1")</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs240"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:decimal(5.5432) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal("5.5432") cast as xs:integer</test>
    <result-string>xs:integer("5")</result-string>
    <result>
      <assert-eq>5</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs241"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:decimal(-1.1234) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal("-1.1234") cast as xs:duration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs242"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:decimal(-1.1234) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal("-1.1234") cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs243"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:decimal(-1.1234) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal("-1.1234") cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs244"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:decimal(-1.1234) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal("-1.1234") cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs245"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:decimal(-1.1234) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal("-1.1234") cast as xs:time</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs246"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:decimal(-1.1234) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal("-1.1234") cast as xs:date</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs247"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:decimal(-1.1234) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal("-1.1234") cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs248"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:decimal(-1.1234) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal("-1.1234") cast as xs:gYear</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs249"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:decimal(-1.1234) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal("-1.1234") cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs250"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:decimal(-1.1234) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal("-1.1234") cast as xs:gDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs251"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:decimal(-1.1234) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal("-1.1234") cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs252"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:decimal(-1.1234) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal("-1.1234") cast as xs:boolean</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="CastAs253"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:decimal(-1.1234) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal("-1.1234") cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs254"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:decimal(-1.1234) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal("-1.1234") cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs255"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("-1.1234")</response-string>
    <description>Try casting xs:decimal(-1.1234) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:decimal("-1.1234") cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs256"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("1")</response-string>
    <description>Try casting xs:integer(1) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:integer("1") cast as xs:untypedAtomic</test>
    <result-string>xs:untypedAtomic("1")</result-string>
    <result>
      <assert-string-value>1</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs257"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("-100")</response-string>
    <description>Try casting xs:integer(-100) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:integer("-100") cast as xs:string</test>
    <result-string>xs:string("-100")</result-string>
    <result>
      <assert-string-value>-100</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs258"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:float("-100")</response-string>
    <description>Try casting xs:integer(-100) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:integer("-100") cast as xs:float</test>
    <result-string>xs:float("-100")</result-string>
    <result>
      <assert-eq>-100</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs259"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:double("-100")</response-string>
    <description>Try casting xs:integer(-100) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:integer("-100") cast as xs:double</test>
    <result-string>xs:double("-100")</result-string>
    <result>
      <assert-eq>-100</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs260"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("-100")</response-string>
    <description>Try casting xs:integer(-100) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:integer("-100") cast as xs:decimal</test>
    <result-string>xs:decimal("-100")</result-string>
    <result>
      <assert-eq>-100</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs261"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("-100")</response-string>
    <description>Try casting xs:integer(-100) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:integer("-100") cast as xs:integer</test>
    <result-string>xs:integer("-100")</result-string>
    <result>
      <assert-eq>-100</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs262"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:integer(-100) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:integer("-100") cast as xs:duration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs263"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:integer(-100) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:integer("-100") cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs264"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:integer(-100) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:integer("-100") cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs265"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:integer(-100) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:integer("-100") cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs266"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:integer(-100) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:integer("-100") cast as xs:time</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs267"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:integer(-100) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:integer("-100") cast as xs:date</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs268"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:integer(-100) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:integer("-100") cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs269"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:integer(-100) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:integer("-100") cast as xs:gYear</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs270"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:integer(-100) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:integer("-100") cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs271"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:integer(-100) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:integer("-100") cast as xs:gDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs272"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:integer(-100) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:integer("-100") cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs273"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:integer(-100) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:integer("-100") cast as xs:boolean</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="CastAs274"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:integer(-100) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:integer("-100") cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs275"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:integer(-100) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:integer("-100") cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs276"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("-100")</response-string>
    <description>Try casting xs:integer(-100) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:integer("-100") cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs277"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("P1Y2M3DT10H30M23S")</response-string>
    <description>Try casting xs:duration(P1Y2M3DT10H30M23S) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration("P1Y2M3DT10H30M23S") cast as xs:untypedAtomic</test>
    <result-string>xs:untypedAtomic("P1Y2M3DT10H30M23S")</result-string>
    <result>
      <assert-string-value>P1Y2M3DT10H30M23S</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs278"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("P1Y2M3DT10H30M23S")</response-string>
    <description>Try casting xs:duration(P1Y2M3DT10H30M23S) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration("P1Y2M3DT10H30M23S") cast as xs:string</test>
    <result-string>xs:string("P1Y2M3DT10H30M23S")</result-string>
    <result>
      <assert-string-value>P1Y2M3DT10H30M23S</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs279"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:duration(P1Y2M3DT10H30M23S) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration("P1Y2M3DT10H30M23S") cast as xs:float</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs280"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:duration(P1Y2M3DT10H30M23S) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration("P1Y2M3DT10H30M23S") cast as xs:double</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs281"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:duration(P1Y2M3DT10H30M23S) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration("P1Y2M3DT10H30M23S") cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs282"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:duration(P1Y2M3DT10H30M23S) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration("P1Y2M3DT10H30M23S") cast as xs:integer</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs283"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:duration("P1Y2M3DT10H30M23S")</response-string>
    <description>Try casting xs:duration(P1Y2M3DT10H30M23S) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration("P1Y2M3DT10H30M23S") cast as xs:duration</test>
    <result-string>xs:duration("P1Y2M3DT10H30M23S")</result-string>
    <result>
      <assert-string-value>P1Y2M3DT10H30M23S</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs284"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:duration("PT10H")</response-string>
    <description>Try casting xs:duration(PT10H) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration("PT10H") cast as xs:duration</test>
    <result-string>xs:duration("PT10H")</result-string>
    <result>
      <assert-string-value>PT10H</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs285"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:duration(P1Y2M3DT10H30M23S) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration("P1Y2M3DT10H30M23S") cast as xs:yearMonthDuration</test>
    <result-string>xs:string("P1Y2M")</result-string>
    <result>
      <assert-string-value>P1Y2M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs286"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:duration(PT10H) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration("PT10H") cast as xs:yearMonthDuration</test>
    <result-string>xs:string("P0M")</result-string>
    <result>
      <assert-string-value>P0M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs287"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:yearMonthDuration("P2Y")</response-string>
    <description>Try casting xs:duration(P24M) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration("P24M") cast as xs:yearMonthDuration</test>
    <result-string>xs:yearMonthDuration("P2Y")</result-string>
    <result>
      <assert-string-value>P2Y</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs288"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:duration(P1Y2M3DT10H30M23S) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration("P1Y2M3DT10H30M23S") cast as xs:dayTimeDuration</test>
    <result-string>xs:string("P3DT10H30M23S")</result-string>
    <result>
      <assert-string-value>P3DT10H30M23S</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs289"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:dayTimeDuration("PT10H")</response-string>
    <description>Try casting xs:duration(PT10H) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration("PT10H") cast as xs:dayTimeDuration</test>
    <result-string>xs:dayTimeDuration("PT10H")</result-string>
    <result>
      <assert-string-value>PT10H</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs290"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:duration(P24M) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration("P24M") cast as xs:dayTimeDuration</test>
    <result-string>xs:string("PT0S")</result-string>
    <result>
      <assert-string-value>PT0S</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs291"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:duration(P1Y2M3DT10H30M23S) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration("P1Y2M3DT10H30M23S") cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs292"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:duration(P1Y2M3DT10H30M23S) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration("P1Y2M3DT10H30M23S") cast as xs:time</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs293"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:duration(P1Y2M3DT10H30M23S) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration("P1Y2M3DT10H30M23S") cast as xs:date</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs294"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:duration(P1Y2M3DT10H30M23S) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration("P1Y2M3DT10H30M23S") cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs295"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:duration(P1Y2M3DT10H30M23S) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration("P1Y2M3DT10H30M23S") cast as xs:gYear</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs296"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:duration(P1Y2M3DT10H30M23S) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration("P1Y2M3DT10H30M23S") cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs297"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:duration(P1Y2M3DT10H30M23S) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration("P1Y2M3DT10H30M23S") cast as xs:gDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs298"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:duration(P1Y2M3DT10H30M23S) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration("P1Y2M3DT10H30M23S") cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs299"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:duration(P1Y2M3DT10H30M23S) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration("P1Y2M3DT10H30M23S") cast as xs:boolean</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs300"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:duration(P1Y2M3DT10H30M23S) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration("P1Y2M3DT10H30M23S") cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs301"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:duration(P1Y2M3DT10H30M23S) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration("P1Y2M3DT10H30M23S") cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs302"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("P1Y2M3DT10H30M23S")</response-string>
    <description>Try casting xs:duration(P1Y2M3DT10H30M23S) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:duration("P1Y2M3DT10H30M23S") cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs303"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("P1Y2M")</response-string>
    <description>Try casting xs:yearMonthDuration(P1Y2M) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration("P1Y2M") cast as xs:untypedAtomic</test>
    <result-string>xs:untypedAtomic("P1Y2M")</result-string>
    <result>
      <assert-string-value>P1Y2M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs304"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("P1Y2M")</response-string>
    <description>Try casting xs:yearMonthDuration(P1Y2M) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration("P1Y2M") cast as xs:string</test>
    <result-string>xs:string("P1Y2M")</result-string>
    <result>
      <assert-string-value>P1Y2M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs305"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:yearMonthDuration(P1Y2M) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration("P1Y2M") cast as xs:float</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs306"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:yearMonthDuration(P1Y2M) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration("P1Y2M") cast as xs:double</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs307"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:yearMonthDuration(P1Y2M) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration("P1Y2M") cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs308"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:yearMonthDuration(P1Y2M) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration("P1Y2M") cast as xs:integer</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs309"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:duration("P1Y2M")</response-string>
    <description>Try casting xs:yearMonthDuration(P1Y2M) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration("P1Y2M") cast as xs:duration</test>
    <result-string>xs:duration("P1Y2M")</result-string>
    <result>
      <assert-string-value>P1Y2M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs310"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:yearMonthDuration("P1Y2M")</response-string>
    <description>Try casting xs:yearMonthDuration(P1Y2M) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration("P1Y2M") cast as xs:yearMonthDuration</test>
    <result-string>xs:yearMonthDuration("P1Y2M")</result-string>
    <result>
      <assert-string-value>P1Y2M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs311"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:yearMonthDuration("-P1Y9M")</response-string>
    <description>Try casting xs:yearMonthDuration(-P21M) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration("-P21M") cast as xs:yearMonthDuration</test>
    <result-string>xs:yearMonthDuration("-P1Y9M")</result-string>
    <result>
      <assert-string-value>-P1Y9M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs312"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:yearMonthDuration(P1Y2M) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration("P1Y2M") cast as xs:dayTimeDuration</test>
    <result-string>xs:string("PT0S")</result-string>
    <result>
      <assert-string-value>PT0S</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs313"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:yearMonthDuration(P1Y2M) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration("P1Y2M") cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs314"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:yearMonthDuration(P1Y2M) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration("P1Y2M") cast as xs:time</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs315"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:yearMonthDuration(P1Y2M) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration("P1Y2M") cast as xs:date</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs316"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:yearMonthDuration(P1Y2M) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration("P1Y2M") cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs317"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:yearMonthDuration(P1Y2M) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration("P1Y2M") cast as xs:gYear</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs318"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:yearMonthDuration(P1Y2M) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration("P1Y2M") cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs319"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:yearMonthDuration(P1Y2M) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration("P1Y2M") cast as xs:gDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs320"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:yearMonthDuration(P1Y2M) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration("P1Y2M") cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs321"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:yearMonthDuration(P1Y2M) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration("P1Y2M") cast as xs:boolean</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs322"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:yearMonthDuration(P1Y2M) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration("P1Y2M") cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs323"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:yearMonthDuration(P1Y2M) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration("P1Y2M") cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs324"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("P1Y2M")</response-string>
    <description>Try casting xs:yearMonthDuration(P1Y2M) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:yearMonthDuration("P1Y2M") cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs325"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("P3DT10H30M")</response-string>
    <description>Try casting xs:dayTimeDuration(P3DT10H30M) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration("P3DT10H30M") cast as xs:untypedAtomic</test>
    <result-string>xs:untypedAtomic("P3DT10H30M")</result-string>
    <result>
      <assert-string-value>P3DT10H30M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs326"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("-PT1H40M")</response-string>
    <description>Try casting xs:dayTimeDuration(-PT100M) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration("-PT100M") cast as xs:untypedAtomic</test>
    <result-string>xs:untypedAtomic("-PT1H40M")</result-string>
    <result>
      <assert-string-value>-PT1H40M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs327"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("P3DT10H30M")</response-string>
    <description>Try casting xs:dayTimeDuration(P3DT10H30M) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration("P3DT10H30M") cast as xs:string</test>
    <result-string>xs:string("P3DT10H30M")</result-string>
    <result>
      <assert-string-value>P3DT10H30M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs328"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("-PT1H40M")</response-string>
    <description>Try casting xs:dayTimeDuration(-PT100M) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration("-PT100M") cast as xs:string</test>
    <result-string>xs:string("-PT1H40M")</result-string>
    <result>
      <assert-string-value>-PT1H40M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs329"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:dayTimeDuration(P3DT10H30M) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration("P3DT10H30M") cast as xs:float</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs330"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:dayTimeDuration(P3DT10H30M) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration("P3DT10H30M") cast as xs:double</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs331"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:dayTimeDuration(P3DT10H30M) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration("P3DT10H30M") cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs332"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:dayTimeDuration(P3DT10H30M) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration("P3DT10H30M") cast as xs:integer</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs333"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:duration("P3DT10H30M")</response-string>
    <description>Try casting xs:dayTimeDuration(P3DT10H30M) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration("P3DT10H30M") cast as xs:duration</test>
    <result-string>xs:duration("P3DT10H30M")</result-string>
    <result>
      <assert-string-value>P3DT10H30M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs334"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:duration("P1D")</response-string>
    <description>Try casting xs:dayTimeDuration(PT24H) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration("PT24H") cast as xs:duration</test>
    <result-string>xs:duration("P1D")</result-string>
    <result>
      <assert-string-value>P1D</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs335"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:duration("-PT1H40M")</response-string>
    <description>Try casting xs:dayTimeDuration(-PT100M) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration("-PT100M") cast as xs:duration</test>
    <result-string>xs:duration("-PT1H40M")</result-string>
    <result>
      <assert-string-value>-PT1H40M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs336"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:dayTimeDuration(P3DT10H30M) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration("P3DT10H30M") cast as xs:yearMonthDuration</test>
    <result-string>xs:string("P0M")</result-string>
    <result>
      <assert-string-value>P0M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs337"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:dayTimeDuration("P3DT10H30M")</response-string>
    <description>Try casting xs:dayTimeDuration(P3DT10H30M) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration("P3DT10H30M") cast as xs:dayTimeDuration</test>
    <result-string>xs:dayTimeDuration("P3DT10H30M")</result-string>
    <result>
      <assert-string-value>P3DT10H30M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs338"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:dayTimeDuration("P14D")</response-string>
    <description>Try casting xs:dayTimeDuration(P14D) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration("P14D") cast as xs:dayTimeDuration</test>
    <result-string>xs:dayTimeDuration("P14D")</result-string>
    <result>
      <assert-string-value>P14D</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs339"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:dayTimeDuration("-PT1H40M")</response-string>
    <description>Try casting xs:dayTimeDuration(-PT100M) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration("-PT100M") cast as xs:dayTimeDuration</test>
    <result-string>xs:dayTimeDuration("-PT1H40M")</result-string>
    <result>
      <assert-string-value>-PT1H40M</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs340"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:dayTimeDuration(P3DT10H30M) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration("P3DT10H30M") cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs341"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:dayTimeDuration(P3DT10H30M) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration("P3DT10H30M") cast as xs:time</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs342"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:dayTimeDuration(P3DT10H30M) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration("P3DT10H30M") cast as xs:date</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs343"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:dayTimeDuration(P3DT10H30M) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration("P3DT10H30M") cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs344"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:dayTimeDuration(P3DT10H30M) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration("P3DT10H30M") cast as xs:gYear</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs345"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:dayTimeDuration(P3DT10H30M) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration("P3DT10H30M") cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs346"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:dayTimeDuration(P3DT10H30M) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration("P3DT10H30M") cast as xs:gDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs347"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:dayTimeDuration(P3DT10H30M) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration("P3DT10H30M") cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs348"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:dayTimeDuration(P3DT10H30M) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration("P3DT10H30M") cast as xs:boolean</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs349"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:dayTimeDuration(P3DT10H30M) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration("P3DT10H30M") cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs350"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:dayTimeDuration(P3DT10H30M) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration("P3DT10H30M") cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs351"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("P3DT10H30M")</response-string>
    <description>Try casting xs:dayTimeDuration(P3DT10H30M) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dayTimeDuration("P3DT10H30M") cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs352"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("1999-05-31T13:20:00")</response-string>
    <description>Try casting xs:dateTime(1999-05-31T13:20:00) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime("1999-05-31T13:20:00") cast as xs:untypedAtomic</test>
    <result-string>xs:untypedAtomic("1999-05-31T13:20:00")</result-string>
    <result>
      <assert-string-value>1999-05-31T13:20:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs353"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("")</response-string>
    <description>Try casting xs:dateTime(-1999-05-31T13:20:00+14:00) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime("-1999-05-31T13:20:00+14:00") cast as xs:untypedAtomic</test>
    <result-string>xs:string("-1999-05-31T13:20:00+14:00")</result-string>
    <result>
      <assert-string-value>-1999-05-31T13:20:00+14:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs354"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("1999-05-31T13:20:00")</response-string>
    <description>Try casting xs:dateTime(1999-05-31T13:20:00) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime("1999-05-31T13:20:00") cast as xs:string</test>
    <result-string>xs:string("1999-05-31T13:20:00")</result-string>
    <result>
      <assert-string-value>1999-05-31T13:20:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs355"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("")</response-string>
    <description>Try casting xs:dateTime(-1999-05-31T13:20:00+14:00) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime("-1999-05-31T13:20:00+14:00") cast as xs:string</test>
    <result-string>xs:string("-1999-05-31T13:20:00+14:00")</result-string>
    <result>
      <assert-string-value>-1999-05-31T13:20:00+14:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs356"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:dateTime(1999-05-31T13:20:00) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime("1999-05-31T13:20:00") cast as xs:float</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs357"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:dateTime(2000-01-16T00:00:00Z) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime("2000-01-16T00:00:00Z") cast as xs:float</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs358"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:dateTime(1999-05-31T13:20:00) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime("1999-05-31T13:20:00") cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs359"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:dateTime(1999-05-31T13:20:00) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime("1999-05-31T13:20:00") cast as xs:integer</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs360"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:dateTime(1999-05-31T13:20:00) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime("1999-05-31T13:20:00") cast as xs:duration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs361"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:dateTime(1999-05-31T13:20:00) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime("1999-05-31T13:20:00") cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs362"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:dateTime(1999-05-31T13:20:00) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime("1999-05-31T13:20:00") cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs363"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:dateTime("1999-05-31T13:20:00")</response-string>
    <description>Try casting xs:dateTime(1999-05-31T13:20:00) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime("1999-05-31T13:20:00") cast as xs:dateTime</test>
    <result-string>xs:dateTime("1999-05-31T13:20:00")</result-string>
    <result>
      <assert-string-value>1999-05-31T13:20:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs364"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:dateTime(1999-05-31T13:20:00) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime("1999-05-31T13:20:00") cast as xs:time</test>
    <result-string>xs:string("13:20:00")</result-string>
    <result>
      <assert-string-value>13:20:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs365"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:dateTime(-1999-05-31T13:20:00+14:00) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime("-1999-05-31T13:20:00+14:00") cast as xs:time</test>
    <result-string>xs:string("13:20:00+14:00")</result-string>
    <result>
      <assert-string-value>13:20:00+14:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs366"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:dateTime(1999-05-31T13:20:00) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime("1999-05-31T13:20:00") cast as xs:date</test>
    <result-string>xs:string("1999-05-31")</result-string>
    <result>
      <assert-string-value>1999-05-31</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs367"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:dateTime(-1999-05-31T13:20:00+14:00) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime("-1999-05-31T13:20:00+14:00") cast as xs:date</test>
    <result-string>xs:string("-1999-05-31+14:00")</result-string>
    <result>
      <assert-string-value>-1999-05-31+14:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs368"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:dateTime(1999-05-31T13:20:00) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime("1999-05-31T13:20:00") cast as xs:gYearMonth</test>
    <result-string>xs:string("1999-05")</result-string>
    <result>
      <assert-string-value>1999-05</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs369"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:dateTime(-1999-05-31T13:20:00+14:00) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime("-1999-05-31T13:20:00+14:00") cast as xs:gYearMonth</test>
    <result-string>xs:string("-1999-05+14:00")</result-string>
    <result>
      <assert-string-value>-1999-05+14:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs370"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:dateTime(1999-05-31T13:20:00) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime("1999-05-31T13:20:00") cast as xs:gYear</test>
    <result-string>xs:string("1999")</result-string>
    <result>
      <assert-string-value>1999</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs371"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:gYear("")</response-string>
    <description>Try casting xs:dateTime(-1999-05-31T13:20:00+14:00) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime("-1999-05-31T13:20:00+14:00") cast as xs:gYear</test>
    <result-string>xs:string("-1999+14:00")</result-string>
    <result>
      <assert-string-value>-1999+14:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs372"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:dateTime(1999-05-31T13:20:00) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime("1999-05-31T13:20:00") cast as xs:gMonthDay</test>
    <result-string>xs:string("--05-31")</result-string>
    <result>
      <assert-string-value>--05-31</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs373"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:dateTime(-1999-05-31T13:20:00+14:00) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime("-1999-05-31T13:20:00+14:00") cast as xs:gMonthDay</test>
    <result-string>xs:string("--05-31+14:00")</result-string>
    <result>
      <assert-string-value>--05-31+14:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs374"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:dateTime(1999-05-31T13:20:00) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime("1999-05-31T13:20:00") cast as xs:gDay</test>
    <result-string>xs:string("---31")</result-string>
    <result>
      <assert-string-value>---31</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs375"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:dateTime(-1999-05-31T13:20:00+14:00) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime("-1999-05-31T13:20:00+14:00") cast as xs:gDay</test>
    <result-string>xs:string("---31+14:00")</result-string>
    <result>
      <assert-string-value>---31+14:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs376"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:dateTime(1999-05-31T13:20:00) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime("1999-05-31T13:20:00") cast as xs:gMonth</test>
    <result-string>xs:string("--05")</result-string>
    <result>
      <assert-string-value>--05</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs377"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:dateTime(-1999-05-31T13:20:00+14:00) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime("-1999-05-31T13:20:00+14:00") cast as xs:gMonth</test>
    <result-string>xs:string("--05+14:00")</result-string>
    <result>
      <assert-string-value>--05+14:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs378"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:dateTime(1999-05-31T13:20:00) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime("1999-05-31T13:20:00") cast as xs:boolean</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs379"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:dateTime(1999-05-31T13:20:00) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime("1999-05-31T13:20:00") cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs380"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:dateTime(1999-05-31T13:20:00) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime("1999-05-31T13:20:00") cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs381"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("1999-05-31T13:20:00")</response-string>
    <description>Try casting xs:dateTime(1999-05-31T13:20:00) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:dateTime("1999-05-31T13:20:00") cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs382"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("13:20:00-05:00")</response-string>
    <description>Try casting xs:time(13:20:00-05:00) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time("13:20:00-05:00") cast as xs:untypedAtomic</test>
    <result-string>xs:untypedAtomic("13:20:00-05:00")</result-string>
    <result>
      <assert-string-value>13:20:00-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs383"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("13:20:00-05:00")</response-string>
    <description>Try casting xs:time(13:20:00-05:00) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time("13:20:00-05:00") cast as xs:string</test>
    <result-string>xs:string("13:20:00-05:00")</result-string>
    <result>
      <assert-string-value>13:20:00-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs384"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:time(13:20:00-05:00) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time("13:20:00-05:00") cast as xs:float</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs385"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:time(13:20:00-05:00) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time("13:20:00-05:00") cast as xs:double</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs386"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:time(13:20:00-05:00) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time("13:20:00-05:00") cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs387"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:time(13:20:00-05:00) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time("13:20:00-05:00") cast as xs:integer</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs388"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:time(13:20:00-05:00) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time("13:20:00-05:00") cast as xs:duration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs389"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:time(13:20:00-05:00) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time("13:20:00-05:00") cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs390"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:time(13:20:00-05:00) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time("13:20:00-05:00") cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs391"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:time(13:20:00-05:00) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time("13:20:00-05:00") cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs392"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:time("13:20:00-05:00")</response-string>
    <description>Try casting xs:time(13:20:00-05:00) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time("13:20:00-05:00") cast as xs:time</test>
    <result-string>xs:time("13:20:00-05:00")</result-string>
    <result>
      <assert-string-value>13:20:00-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs393"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:time("13:20:02.123")</response-string>
    <description>Try casting xs:time(13:20:02.123) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time("13:20:02.123") cast as xs:time</test>
    <result-string>xs:time("13:20:02.123")</result-string>
    <result>
      <assert-string-value>13:20:02.123</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs394"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:time("13:20:00Z")</response-string>
    <description>Try casting xs:time(13:20:00Z) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time("13:20:00Z") cast as xs:time</test>
    <result-string>xs:time("13:20:00Z")</result-string>
    <result>
      <assert-string-value>13:20:00Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs395"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:time(13:20:00-05:00) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time("13:20:00-05:00") cast as xs:date</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs396"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:time(13:20:00-05:00) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time("13:20:00-05:00") cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs397"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:time(13:20:00-05:00) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time("13:20:00-05:00") cast as xs:gYear</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs398"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:time(13:20:00-05:00) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time("13:20:00-05:00") cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs399"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:time(13:20:00-05:00) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time("13:20:00-05:00") cast as xs:gDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs400"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:time(13:20:00-05:00) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time("13:20:00-05:00") cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs401"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:time(13:20:00-05:00) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time("13:20:00-05:00") cast as xs:boolean</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs402"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:time(13:20:00-05:00) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time("13:20:00-05:00") cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs403"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:time(13:20:00-05:00) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time("13:20:00-05:00") cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs404"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("13:20:00-05:00")</response-string>
    <description>Try casting xs:time(13:20:00-05:00) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:time("13:20:00-05:00") cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs405"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("1999-05-31")</response-string>
    <description>Try casting xs:date(1999-05-31) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date("1999-05-31") cast as xs:untypedAtomic</test>
    <result-string>xs:untypedAtomic("1999-05-31")</result-string>
    <result>
      <assert-string-value>1999-05-31</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs406"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("")</response-string>
    <description>Try casting xs:date(-0012-12-03-05:00) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date("-0012-12-03-05:00") cast as xs:untypedAtomic</test>
    <result-string>xs:string("-0012-12-03-05:00")</result-string>
    <result>
      <assert-string-value>-0012-12-03-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs407"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("1999-05-31")</response-string>
    <description>Try casting xs:date(1999-05-31) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date("1999-05-31") cast as xs:string</test>
    <result-string>xs:string("1999-05-31")</result-string>
    <result>
      <assert-string-value>1999-05-31</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs408"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("")</response-string>
    <description>Try casting xs:date(-0012-12-03-05:00) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date("-0012-12-03-05:00") cast as xs:string</test>
    <result-string>xs:string("-0012-12-03-05:00")</result-string>
    <result>
      <assert-string-value>-0012-12-03-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs409"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:date(1999-05-31) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date("1999-05-31") cast as xs:float</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs410"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:date(1999-05-31) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date("1999-05-31") cast as xs:double</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs411"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:date(1999-05-31Z) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date("1999-05-31Z") cast as xs:double</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs412"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:date(1999-05-31) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date("1999-05-31") cast as xs:integer</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs413"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:date(1999-05-31) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date("1999-05-31") cast as xs:duration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs414"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:date(1999-05-31) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date("1999-05-31") cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs415"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:date(1999-05-31) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date("1999-05-31") cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs416"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:date(1999-05-31) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date("1999-05-31") cast as xs:dateTime</test>
    <result-string>xs:string("1999-05-31T00:00:00")</result-string>
    <result>
      <assert-string-value>1999-05-31T00:00:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs417"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:date(1999-05-31) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date("1999-05-31") cast as xs:time</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs418"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:date("1999-05-31")</response-string>
    <description>Try casting xs:date(1999-05-31) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date("1999-05-31") cast as xs:date</test>
    <result-string>xs:date("1999-05-31")</result-string>
    <result>
      <assert-string-value>1999-05-31</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs419"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:date(-0012-12-03-05:00) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date("-0012-12-03-05:00") cast as xs:date</test>
    <result-string>xs:string("-0012-12-03-05:00")</result-string>
    <result>
      <assert-string-value>-0012-12-03-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs420"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:date("1999-05-31Z")</response-string>
    <description>Try casting xs:date(1999-05-31Z) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date("1999-05-31Z") cast as xs:date</test>
    <result-string>xs:date("1999-05-31Z")</result-string>
    <result>
      <assert-string-value>1999-05-31Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs421"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:date(1999-05-31) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date("1999-05-31") cast as xs:gYearMonth</test>
    <result-string>xs:string("1999-05")</result-string>
    <result>
      <assert-string-value>1999-05</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs422"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:date(1999-05-31) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date("1999-05-31") cast as xs:gYear</test>
    <result-string>xs:string("1999")</result-string>
    <result>
      <assert-string-value>1999</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs423"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:gYear("")</response-string>
    <description>Try casting xs:date(-0012-12-03-05:00) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date("-0012-12-03-05:00") cast as xs:gYear</test>
    <result-string>xs:string("-0012-05:00")</result-string>
    <result>
      <assert-string-value>-0012-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs424"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:date(1999-05-31Z) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date("1999-05-31Z") cast as xs:gYear</test>
    <result-string>xs:string("1999Z")</result-string>
    <result>
      <assert-string-value>1999Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs425"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:date(1999-05-31) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date("1999-05-31") cast as xs:gMonthDay</test>
    <result-string>xs:string("--05-31")</result-string>
    <result>
      <assert-string-value>--05-31</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs426"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:date(-0012-12-03-05:00) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date("-0012-12-03-05:00") cast as xs:gMonthDay</test>
    <result-string>xs:string("--12-03-05:00")</result-string>
    <result>
      <assert-string-value>--12-03-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs427"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:date(1999-05-31Z) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date("1999-05-31Z") cast as xs:gMonthDay</test>
    <result-string>xs:string("--05-31Z")</result-string>
    <result>
      <assert-string-value>--05-31Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs428"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:date(1999-05-31Z) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date("1999-05-31Z") cast as xs:gDay</test>
    <result-string>xs:string("---31Z")</result-string>
    <result>
      <assert-string-value>---31Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs429"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:date(-0012-12-03-05:00) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date("-0012-12-03-05:00") cast as xs:gMonth</test>
    <result-string>xs:string("--12-05:00")</result-string>
    <result>
      <assert-string-value>--12-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs430"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:date(1999-05-31Z) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date("1999-05-31Z") cast as xs:gMonth</test>
    <result-string>xs:string("--05Z")</result-string>
    <result>
      <assert-string-value>--05Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs431"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:date(1999-05-31) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date("1999-05-31") cast as xs:boolean</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs432"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:date(1999-05-31) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date("1999-05-31") cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs433"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:date(1999-05-31) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date("1999-05-31") cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs434"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("1999-05-31")</response-string>
    <description>Try casting xs:date(1999-05-31) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:date("1999-05-31") cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs435"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("1999-05")</response-string>
    <description>Try casting xs:gYearMonth(1999-05) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth("1999-05") cast as xs:untypedAtomic</test>
    <result-string>xs:untypedAtomic("1999-05")</result-string>
    <result>
      <assert-string-value>1999-05</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs436"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("1999-05")</response-string>
    <description>Try casting xs:gYearMonth(1999-05) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth("1999-05") cast as xs:string</test>
    <result-string>xs:string("1999-05")</result-string>
    <result>
      <assert-string-value>1999-05</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs437"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gYearMonth(1999-05) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth("1999-05") cast as xs:float</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs438"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gYearMonth(1999-05) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth("1999-05") cast as xs:double</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs439"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gYearMonth(1999-05Z) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth("1999-05Z") cast as xs:double</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs440"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gYearMonth(1999-05Z) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth("1999-05Z") cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs441"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gYearMonth(1999-05Z) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth("1999-05Z") cast as xs:integer</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs442"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gYearMonth(1999-05Z) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth("1999-05Z") cast as xs:duration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs443"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gYearMonth(1999-05Z) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth("1999-05Z") cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs444"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gYearMonth(1999-05Z) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth("1999-05Z") cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs445"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gYearMonth(1999-05Z) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth("1999-05Z") cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs446"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gYearMonth(1999-05Z) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth("1999-05Z") cast as xs:time</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs447"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gYearMonth(1999-05Z) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth("1999-05Z") cast as xs:date</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs448"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:gYearMonth("1999-05")</response-string>
    <description>Try casting xs:gYearMonth(1999-05) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth("1999-05") cast as xs:gYearMonth</test>
    <result-string>xs:gYearMonth("1999-05")</result-string>
    <result>
      <assert-string-value>1999-05</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs449"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gYearMonth(-0012-12-05:00) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth("-0012-12-05:00") cast as xs:gYearMonth</test>
    <result-string>xs:string("-0012-12-05:00")</result-string>
    <result>
      <assert-string-value>-0012-12-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs450"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gYearMonth(1999-05Z) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth("1999-05Z") cast as xs:gYearMonth</test>
    <result-string>xs:string("1999-05Z")</result-string>
    <result>
      <assert-string-value>1999-05Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs451"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:gYear("")</response-string>
    <description>Try casting xs:gYearMonth(1999-05Z) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth("1999-05Z") cast as xs:gYear</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs452"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gYearMonth(1999-05Z) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth("1999-05Z") cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs453"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gYearMonth(1999-05Z) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth("1999-05Z") cast as xs:gDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs454"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gYearMonth(1999-05Z) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth("1999-05Z") cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs455"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gYearMonth(1999-05Z) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth("1999-05Z") cast as xs:boolean</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs456"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:base64Binary("")</response-string>
    <description>Try casting xs:gYearMonth(1999-05Z) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth("1999-05Z") cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs457"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gYearMonth(1999-05Z) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth("1999-05Z") cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs458"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("")</response-string>
    <description>Try casting xs:gYearMonth(1999-05Z) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYearMonth("1999-05Z") cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs459"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("1999")</response-string>
    <description>Try casting xs:gYear(1999) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear("1999") cast as xs:untypedAtomic</test>
    <result-string>xs:untypedAtomic("1999")</result-string>
    <result>
      <assert-string-value>1999</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs460"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("1999")</response-string>
    <description>Try casting xs:gYear(1999) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear("1999") cast as xs:string</test>
    <result-string>xs:string("1999")</result-string>
    <result>
      <assert-string-value>1999</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs461"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:float("1999")</response-string>
    <description>Try casting xs:gYear(1999) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear("1999") cast as xs:float</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs462"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:double("1999")</response-string>
    <description>Try casting xs:gYear(1999) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear("1999") cast as xs:double</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs463"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("1999")</response-string>
    <description>Try casting xs:gYear(1999) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear("1999") cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs464"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("1999")</response-string>
    <description>Try casting xs:gYear(1999) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear("1999") cast as xs:integer</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs465"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gYear(1999) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear("1999") cast as xs:duration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs466"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gYear(1999) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear("1999") cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs467"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gYear(1999) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear("1999") cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs468"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gYear(1999) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear("1999") cast as xs:time</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs469"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gYear(1999) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear("1999") cast as xs:date</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs470"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gYear(1999) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear("1999") cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs471"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:gYear("1999")</response-string>
    <description>Try casting xs:gYear(1999) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear("1999") cast as xs:gYear</test>
    <result-string>xs:gYear("1999")</result-string>
    <result>
      <assert-string-value>1999</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs472"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:gYear("")</response-string>
    <description>Try casting xs:gYear(-0012-05:00) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear("-0012-05:00") cast as xs:gYear</test>
    <result-string>xs:string("-0012-05:00")</result-string>
    <result>
      <assert-string-value>-0012-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs473"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:gYear("")</response-string>
    <description>Try casting xs:gYear(1999Z) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear("1999Z") cast as xs:gYear</test>
    <result-string>xs:string("1999Z")</result-string>
    <result>
      <assert-string-value>1999Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs474"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gYear(1999) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear("1999") cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs475"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gYear(1999) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear("1999") cast as xs:gDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs476"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gYear(1999) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear("1999") cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs477"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gYear(1999) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear("1999") cast as xs:boolean</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs478"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:base64Binary("1999")</response-string>
    <description>Try casting xs:gYear(1999) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear("1999") cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs479"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:hexBinary("1999")</response-string>
    <description>Try casting xs:gYear(1999) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear("1999") cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs480"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("1999")</response-string>
    <description>Try casting xs:gYear(1999) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gYear("1999") cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs481"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("--05-31")</response-string>
    <description>Try casting xs:gMonthDay(--05-31) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay("--05-31") cast as xs:untypedAtomic</test>
    <result-string>xs:untypedAtomic("--05-31")</result-string>
    <result>
      <assert-string-value>--05-31</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs482"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("--05-31")</response-string>
    <description>Try casting xs:gMonthDay(--05-31) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay("--05-31") cast as xs:string</test>
    <result-string>xs:string("--05-31")</result-string>
    <result>
      <assert-string-value>--05-31</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs483"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gMonthDay(--05-31) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay("--05-31") cast as xs:float</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs484"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gMonthDay(--05-31) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay("--05-31") cast as xs:double</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs485"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gMonthDay(--05-31) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay("--05-31") cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs486"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gMonthDay(--05-31) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay("--05-31") cast as xs:integer</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs487"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gMonthDay(--05-31) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay("--05-31") cast as xs:duration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs488"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gMonthDay(--05-31) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay("--05-31") cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs489"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gMonthDay(--05-31) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay("--05-31") cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs490"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gMonthDay(--05-31) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay("--05-31") cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs491"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gMonthDay(--05-31) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay("--05-31") cast as xs:time</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs492"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gMonthDay(--05-31) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay("--05-31") cast as xs:date</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs493"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gMonthDay(--05-31) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay("--05-31") cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs494"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gMonthDay(--05-31) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay("--05-31") cast as xs:gYear</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs495"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:gMonthDay("--05-31")</response-string>
    <description>Try casting xs:gMonthDay(--05-31) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay("--05-31") cast as xs:gMonthDay</test>
    <result-string>xs:gMonthDay("--05-31")</result-string>
    <result>
      <assert-string-value>--05-31</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs496"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gMonthDay(--12-03-05:00) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay("--12-03-05:00") cast as xs:gMonthDay</test>
    <result-string>xs:string("--12-03-05:00")</result-string>
    <result>
      <assert-string-value>--12-03-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs497"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gMonthDay(--05-31Z) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay("--05-31Z") cast as xs:gMonthDay</test>
    <result-string>xs:string("--05-31Z")</result-string>
    <result>
      <assert-string-value>--05-31Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs498"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gMonthDay(--05-31) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay("--05-31") cast as xs:gDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs499"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gMonthDay(--05-31) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay("--05-31") cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs500"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gMonthDay(--05-31) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay("--05-31") cast as xs:boolean</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs501"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gMonthDay(--05-31) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay("--05-31") cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs502"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gMonthDay(--05-31) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay("--05-31") cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs503"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("--05-31")</response-string>
    <description>Try casting xs:gMonthDay(--05-31) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonthDay("--05-31") cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs504"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("---31")</response-string>
    <description>Try casting xs:gDay(---31) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay("---31") cast as xs:untypedAtomic</test>
    <result-string>xs:untypedAtomic("---31")</result-string>
    <result>
      <assert-string-value>---31</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs505"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("---31")</response-string>
    <description>Try casting xs:gDay(---31) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay("---31") cast as xs:string</test>
    <result-string>xs:string("---31")</result-string>
    <result>
      <assert-string-value>---31</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs506"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gDay(---31) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay("---31") cast as xs:float</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs507"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gDay(---31) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay("---31") cast as xs:double</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs508"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gDay(---31) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay("---31") cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs509"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gDay(---31) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay("---31") cast as xs:integer</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs510"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gDay(---31) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay("---31") cast as xs:duration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs511"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gDay(---31) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay("---31") cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs512"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gDay(---31) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay("---31") cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs513"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gDay(---31) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay("---31") cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs514"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gDay(---31) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay("---31") cast as xs:time</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs515"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gDay(---31) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay("---31") cast as xs:date</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs516"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gDay(---31) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay("---31") cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs517"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gDay(---31) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay("---31") cast as xs:gYear</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs518"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gDay(---31) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay("---31") cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs519"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:gDay("---31")</response-string>
    <description>Try casting xs:gDay(---31) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay("---31") cast as xs:gDay</test>
    <result-string>xs:gDay("---31")</result-string>
    <result>
      <assert-string-value>---31</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs520"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gDay(---03-05:00) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay("---03-05:00") cast as xs:gDay</test>
    <result-string>xs:string("---03-05:00")</result-string>
    <result>
      <assert-string-value>---03-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs521"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gDay(---31Z) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay("---31Z") cast as xs:gDay</test>
    <result-string>xs:string("---31Z")</result-string>
    <result>
      <assert-string-value>---31Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs522"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gDay(---31) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay("---31") cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs523"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gDay(---31) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay("---31") cast as xs:boolean</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs524"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gDay(---31) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay("---31") cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs525"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gDay(---31) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay("---31") cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs526"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("---31")</response-string>
    <description>Try casting xs:gDay(---31) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gDay("---31") cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs527"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("--05")</response-string>
    <description>Try casting xs:gMonth(--05) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth("--05") cast as xs:untypedAtomic</test>
    <result-string>xs:untypedAtomic("--05")</result-string>
    <result>
      <assert-string-value>--05</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs528"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("--05")</response-string>
    <description>Try casting xs:gMonth(--05) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth("--05") cast as xs:string</test>
    <result-string>xs:string("--05")</result-string>
    <result>
      <assert-string-value>--05</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs529"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gMonth(--05) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth("--05") cast as xs:float</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs530"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gMonth(--05) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth("--05") cast as xs:double</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs531"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gMonth(--05) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth("--05") cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs532"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gMonth(--05) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth("--05") cast as xs:integer</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs533"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gMonth(--05) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth("--05") cast as xs:duration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs534"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gMonth(--05) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth("--05") cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs535"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gMonth(--05) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth("--05") cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs536"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gMonth(--05) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth("--05") cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs537"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gMonth(--05) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth("--05") cast as xs:time</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs538"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gMonth(--05) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth("--05") cast as xs:date</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs539"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gMonth(--05) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth("--05") cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs540"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gMonth(--05) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth("--05") cast as xs:gYear</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs541"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gMonth(--05) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth("--05") cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs542"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gMonth(--05) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth("--05") cast as xs:gDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs543"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:gMonth("--05")</response-string>
    <description>Try casting xs:gMonth(--05) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth("--05") cast as xs:gMonth</test>
    <result-string>xs:gMonth("--05")</result-string>
    <result>
      <assert-string-value>--05</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs544"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gMonth(--12-05:00) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth("--12-05:00") cast as xs:gMonth</test>
    <result-string>xs:string("--12-05:00")</result-string>
    <result>
      <assert-string-value>--12-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs545"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gMonth(--05Z) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth("--05Z") cast as xs:gMonth</test>
    <result-string>xs:string("--05Z")</result-string>
    <result>
      <assert-string-value>--05Z</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs546"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gMonth(--05) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth("--05") cast as xs:boolean</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs547"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gMonth(--05) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth("--05") cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs548"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:gMonth(--05) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth("--05") cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs549"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("--05")</response-string>
    <description>Try casting xs:gMonth(--05) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:gMonth("--05") cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs550"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("true")</response-string>
    <description>Try casting xs:boolean(true) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean("true") cast as xs:untypedAtomic</test>
    <result-string>xs:string("true")</result-string>
    <result>
      <assert-string-value>true</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs551"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("true")</response-string>
    <description>Try casting xs:boolean(true) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean("true") cast as xs:string</test>
    <result-string>xs:string("true")</result-string>
    <result>
      <assert-string-value>true</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs552"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:boolean(true) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean("true") cast as xs:float</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs553"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:boolean(false) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean("false") cast as xs:float</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs554"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:boolean(true) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean("true") cast as xs:double</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs555"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:boolean(false) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean("false") cast as xs:double</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs556"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:boolean(true) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean("true") cast as xs:decimal</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs557"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:boolean(false) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean("false") cast as xs:decimal</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs558"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:boolean(true) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean("true") cast as xs:integer</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs559"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:boolean(false) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean("false") cast as xs:integer</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs560"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:boolean(true) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean("true") cast as xs:duration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs561"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:boolean(true) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean("true") cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs562"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:boolean(true) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean("true") cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs563"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:boolean(true) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean("true") cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs564"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:boolean(true) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean("true") cast as xs:time</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs565"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:boolean(true) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean("true") cast as xs:date</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs566"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:boolean(true) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean("true") cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs567"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:boolean(true) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean("true") cast as xs:gYear</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs568"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:boolean(true) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean("true") cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs569"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:boolean(true) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean("true") cast as xs:gDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs570"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:boolean(true) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean("true") cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs571"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description>Try casting xs:boolean(true) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean("true") cast as xs:boolean</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="CastAs572"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:boolean(false) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean("false") cast as xs:boolean</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="CastAs573"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:base64Binary("true")</response-string>
    <description>Try casting xs:boolean(true) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean("true") cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs574"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:boolean(true) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean("true") cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs575"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("true")</response-string>
    <description>Try casting xs:boolean(true) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:boolean("true") cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs576"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("01001010")</response-string>
    <description>Try casting xs:base64Binary(01001010) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary("01001010") cast as xs:untypedAtomic</test>
    <result-string>xs:untypedAtomic("01001010")</result-string>
    <result>
      <assert-string-value>01001010</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs577"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("0FB7")</response-string>
    <description>Try casting xs:base64Binary(0FB7) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary("0FB7") cast as xs:untypedAtomic</test>
    <result-string>xs:untypedAtomic("0FB7")</result-string>
    <result>
      <assert-string-value>0FB7</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs578"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("01001010")</response-string>
    <description>Try casting xs:base64Binary(01001010) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary("01001010") cast as xs:string</test>
    <result-string>xs:string("01001010")</result-string>
    <result>
      <assert-string-value>01001010</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs579"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("0FB7")</response-string>
    <description>Try casting xs:base64Binary(0FB7) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary("0FB7") cast as xs:string</test>
    <result-string>xs:string("0FB7")</result-string>
    <result>
      <assert-string-value>0FB7</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs580"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:float("1.0010101E7")</response-string>
    <description>Try casting xs:base64Binary(10010101) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary("10010101") cast as xs:float</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs581"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:double("1.0010101E7")</response-string>
    <description>Try casting xs:base64Binary(10010101) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary("10010101") cast as xs:double</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs582"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("10010101")</response-string>
    <description>Try casting xs:base64Binary(10010101) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary("10010101") cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs583"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("10010101")</response-string>
    <description>Try casting xs:base64Binary(10010101) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary("10010101") cast as xs:integer</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs584"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:base64Binary(10010101) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary("10010101") cast as xs:duration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs585"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:base64Binary(10010101) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary("10010101") cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs586"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:base64Binary(10010101) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary("10010101") cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs587"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:base64Binary(10010101) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary("10010101") cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs588"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:base64Binary(10010101) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary("10010101") cast as xs:time</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs589"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:base64Binary(10010101) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary("10010101") cast as xs:date</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs590"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:base64Binary(10010101) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary("10010101") cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs591"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:gYear("10010101")</response-string>
    <description>Try casting xs:base64Binary(10010101) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary("10010101") cast as xs:gYear</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs592"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:base64Binary(10010101) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary("10010101") cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs593"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:base64Binary(10010101) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary("10010101") cast as xs:gDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs594"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:base64Binary(10010101) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary("10010101") cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs595"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:base64Binary(10010101) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary("10010101") cast as xs:boolean</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs596"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:base64Binary("01001010")</response-string>
    <description>Try casting xs:base64Binary(01001010) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary("01001010") cast as xs:base64Binary</test>
    <result-string>xs:base64Binary("01001010")</result-string>
    <result>
      <assert-string-value>01001010</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs597"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:base64Binary("0FB7")</response-string>
    <description>Try casting xs:base64Binary(0FB7) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary("0FB7") cast as xs:base64Binary</test>
    <result-string>xs:base64Binary("0FB7")</result-string>
    <result>
      <assert-string-value>0FB7</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs598"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:hexBinary("00000000")</response-string>
    <description>Try casting xs:base64Binary(00000000) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary("00000000") cast as xs:hexBinary</test>
    <result-string>xs:string("D34D34D34D34")</result-string>
    <result>
      <assert-string-value>D34D34D34D34</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs599"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:hexBinary("10010101")</response-string>
    <description>Try casting xs:base64Binary(10010101) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary("10010101") cast as xs:hexBinary</test>
    <result-string>xs:string("D74D35D35D35")</result-string>
    <result>
      <assert-string-value>D74D35D35D35</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs600"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:base64Binary(aA+zZ/09) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary("aA+zZ/09") cast as xs:hexBinary</test>
    <result-string>xs:string("680FB367FD3D")</result-string>
    <result>
      <assert-string-value>680FB367FD3D</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs601"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:hexBinary("0FB7")</response-string>
    <description>Try casting xs:base64Binary(0FB7) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary("0FB7") cast as xs:hexBinary</test>
    <result-string>xs:string("D0507B")</result-string>
    <result>
      <assert-string-value>D0507B</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs602"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("10010101")</response-string>
    <description>Try casting xs:base64Binary(10010101) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:base64Binary("10010101") cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs603"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("D74D35D35D35")</response-string>
    <description>Try casting xs:hexBinary(D74D35D35D35) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary("D74D35D35D35") cast as xs:untypedAtomic</test>
    <result-string>xs:untypedAtomic("D74D35D35D35")</result-string>
    <result>
      <assert-string-value>D74D35D35D35</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs604"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("D74D35D35D35")</response-string>
    <description>Try casting xs:hexBinary(D74D35D35D35) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary("D74D35D35D35") cast as xs:string</test>
    <result-string>xs:string("D74D35D35D35")</result-string>
    <result>
      <assert-string-value>D74D35D35D35</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs605"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:hexBinary(D74D35D35D35) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary("D74D35D35D35") cast as xs:float</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs606"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:hexBinary(D74D35D35D35) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary("D74D35D35D35") cast as xs:double</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs607"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:hexBinary(D74D35D35D35) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary("D74D35D35D35") cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs608"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:hexBinary(D74D35D35D35) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary("D74D35D35D35") cast as xs:integer</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs609"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:hexBinary(D74D35D35D35) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary("D74D35D35D35") cast as xs:duration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs610"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:hexBinary(D74D35D35D35) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary("D74D35D35D35") cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs611"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:hexBinary(D74D35D35D35) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary("D74D35D35D35") cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs612"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:hexBinary(D74D35D35D35) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary("D74D35D35D35") cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs613"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:hexBinary(D74D35D35D35) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary("D74D35D35D35") cast as xs:time</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs614"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:hexBinary(D74D35D35D35) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary("D74D35D35D35") cast as xs:date</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs615"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:hexBinary(D74D35D35D35) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary("D74D35D35D35") cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs616"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:hexBinary(D74D35D35D35) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary("D74D35D35D35") cast as xs:gYear</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs617"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:hexBinary(D74D35D35D35) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary("D74D35D35D35") cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs618"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:hexBinary(D74D35D35D35) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary("D74D35D35D35") cast as xs:gDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs619"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:hexBinary(D74D35D35D35) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary("D74D35D35D35") cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs620"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:hexBinary(D74D35D35D35) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary("D74D35D35D35") cast as xs:boolean</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs621"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:base64Binary("D74D35D35D35")</response-string>
    <description>Try casting xs:hexBinary(D74D35D35D35) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary("D74D35D35D35") cast as xs:base64Binary</test>
    <result-string>xs:string("10010101")</result-string>
    <result>
      <assert-string-value>10010101</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs622"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:base64Binary("0FB7")</response-string>
    <description>Try casting xs:hexBinary(0fb7) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary("0fb7") cast as xs:base64Binary</test>
    <result-string>xs:string("D7c=")</result-string>
    <result>
      <assert-string-value>D7c=</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs623"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:hexBinary("D74D35D35D35")</response-string>
    <description>Try casting xs:hexBinary(D74D35D35D35) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary("D74D35D35D35") cast as xs:hexBinary</test>
    <result-string>xs:hexBinary("D74D35D35D35")</result-string>
    <result>
      <assert-string-value>D74D35D35D35</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs624"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:hexBinary("D74D35D35D35")</response-string>
    <description>Try casting xs:hexBinary(d74d35d35d35) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary("d74d35d35d35") cast as xs:hexBinary</test>
    <result-string>xs:hexBinary("D74D35D35D35")</result-string>
    <result>
      <assert-string-value>D74D35D35D35</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs625"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("D74D35D35D35")</response-string>
    <description>Try casting xs:hexBinary(D74D35D35D35) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:hexBinary("D74D35D35D35") cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs626"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("http://www.ietf.org/rfc/rfc2396.txt")</response-string>
    <description>Try casting xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) to xs:untypedAtomic</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") cast as xs:untypedAtomic</test>
    <result-string>xs:untypedAtomic("http://www.ietf.org/rfc/rfc2396.txt")</result-string>
    <result>
      <assert-string-value>http://www.ietf.org/rfc/rfc2396.txt</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs627"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("http://www.ietf.org/rfc/rfc2396.txt")</response-string>
    <description>Try casting xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) to xs:string</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") cast as xs:string</test>
    <result-string>xs:string("http://www.ietf.org/rfc/rfc2396.txt")</result-string>
    <result>
      <assert-string-value>http://www.ietf.org/rfc/rfc2396.txt</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs628"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) to xs:float</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") cast as xs:float</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs629"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) to xs:double</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") cast as xs:double</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs630"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) to xs:decimal</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs631"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) to xs:integer</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") cast as xs:integer</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs632"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) to xs:duration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") cast as xs:duration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs633"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) to xs:yearMonthDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs634"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) to xs:dayTimeDuration</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs635"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) to xs:dateTime</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs636"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) to xs:time</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") cast as xs:time</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs637"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) to xs:date</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") cast as xs:date</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs638"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) to xs:gYearMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs639"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) to xs:gYear</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") cast as xs:gYear</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs640"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) to xs:gMonthDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs641"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) to xs:gDay</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") cast as xs:gDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs642"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) to xs:gMonth</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs643"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) to xs:boolean</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") cast as xs:boolean</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs644"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) to xs:base64Binary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs645"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description>Try casting xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) to xs:hexBinary</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs646"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt")</response-string>
    <description>Try casting xs:anyURI(http://www.ietf.org/rfc/rfc2396.txt) to xs:anyURI</description>
    <created by="Joanne Tong" on="2005-07-21-07:00"/>
    <test>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt") cast as xs:anyURI</test>
    <result-string>xs:anyURI("http://www.ietf.org/rfc/rfc2396.txt")</result-string>
    <result>
      <assert-string-value>http://www.ietf.org/rfc/rfc2396.txt</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs647"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("2.123456789123456789")</response-string>
    <description> Evaluates casting a string into a decimal.may process casting or raise error. This test may have differentoutcomes.</description>
    <created by="Carmelo Montanez" on="2006-03-29"/>
    <test>xs:string(2.123456789123456789) cast as xs:decimal</test>
    <result-string>xs:decimal("2.123456789123456789")</result-string>
    <result-string>xs:decimal("2.123456789123456789")</result-string>
    <result>
      <any-of>
        <assert-string-value>2.123456789123456789</assert-string-value>
        <error code="FOCA0006"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="CastAs648"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:nonPositiveInteger("-20")</response-string>
    <description> Evaluates casting a string into a nonPositiveInteger.</description>
    <created by="Carmelo Montanez" on="2006-07-10"/>
    <test>xs:string(-20) cast as xs:nonPositiveInteger</test>
    <result-string>xs:nonPositiveInteger("-20")</result-string>
    <result>
      <assert-eq>-20</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs649"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:long("20")</response-string>
    <description> Evaluates casting a string into an xs:long.</description>
    <created by="Carmelo Montanez" on="2006-07-10"/>
    <test>xs:string(20) cast as xs:long</test>
    <result-string>xs:long("20")</result-string>
    <result>
      <assert-eq>20</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs650"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:nonNegativeInteger("200")</response-string>
    <description> Evaluates casting a string into an xs:nonNegativeInteger</description>
    <created by="Carmelo Montanez" on="2006-07-10"/>
    <test>xs:string(200) cast as xs:nonNegativeInteger</test>
    <result-string>xs:nonNegativeInteger("200")</result-string>
    <result>
      <assert-eq>200</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs651"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:negativeInteger("-201")</response-string>
    <description> Evaluates casting a string into an xs:negativeInteger</description>
    <created by="Carmelo Montanez" on="2006-07-10"/>
    <test>xs:string(-201) cast as xs:negativeInteger</test>
    <result-string>xs:negativeInteger("-201")</result-string>
    <result>
      <assert-eq>-201</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs652"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:int("20")</response-string>
    <description> Evaluates casting a string into an xs:int</description>
    <created by="Carmelo Montanez" on="2006-07-10"/>
    <test>xs:string(20) cast as xs:int</test>
    <result-string>xs:int("20")</result-string>
    <result>
      <assert-eq>20</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs653"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:unsignedLong("20")</response-string>
    <description> Evaluates casting a string into an xs:unsignedLong</description>
    <created by="Carmelo Montanez" on="2006-07-10"/>
    <test>xs:string(20) cast as xs:unsignedLong</test>
    <result-string>xs:unsignedLong("20")</result-string>
    <result>
      <assert-eq>20</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs654"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:positiveInteger("300")</response-string>
    <description> Evaluates casting a string into an xs:positiveInteger</description>
    <created by="Carmelo Montanez" on="2006-07-10"/>
    <test>xs:string(300) cast as xs:positiveInteger</test>
    <result-string>xs:positiveInteger("300")</result-string>
    <result>
      <assert-eq>300</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs655"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:short("30")</response-string>
    <description> Evaluates casting a string into an xs:short</description>
    <created by="Carmelo Montanez" on="2006-07-10"/>
    <test>xs:string(30) cast as xs:short</test>
    <result-string>xs:short("30")</result-string>
    <result>
      <assert-eq>30</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs656"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:unsignedInt("300")</response-string>
    <description> Evaluates casting a string into an xs:unsignedInt</description>
    <created by="Carmelo Montanez" on="2006-07-10"/>
    <test>xs:string(300) cast as xs:unsignedInt</test>
    <result-string>xs:unsignedInt("300")</result-string>
    <result>
      <assert-eq>300</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs657"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:byte("120")</response-string>
    <description> Evaluates casting a string into an xs:byte</description>
    <created by="Carmelo Montanez" on="2006-07-10"/>
    <test>xs:string(120) cast as xs:byte</test>
    <result-string>xs:byte("120")</result-string>
    <result>
      <assert-eq>120</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs658"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:unsignedShort("12")</response-string>
    <description> Evaluates casting a string into an xs:unsignedShort</description>
    <created by="Carmelo Montanez" on="2006-07-10"/>
    <test>xs:string(12) cast as xs:unsignedShort</test>
    <result-string>xs:unsignedShort("12")</result-string>
    <result>
      <assert-eq>12</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs659"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:unsignedByte("12")</response-string>
    <description> Evaluates casting a string into an xs:unsignedByte</description>
    <created by="Carmelo Montanez" on="2006-07-10"/>
    <test>xs:string(12) cast as xs:unsignedByte</test>
    <result-string>xs:unsignedByte("12")</result-string>
    <result>
      <assert-eq>12</assert-eq>
    </result>
  </test-case>
  <test-case name="CastAs660"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Evaluates casting a long into an xs:short</description>
    <created by="Carmelo Montanez" on="2006-07-11"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $var := xs:long(120) cast as xs:short return $var instance of xs:short</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="CastAs661"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Evaluates casting a short into an xs:long</description>
    <created by="Carmelo Montanez" on="2006-07-11"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $var := xs:short(120) cast as xs:long return $var instance of xs:long</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="CastAs662"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Evaluates casting a xs:nonPositiveInteger into an xs:negativeInteger</description>
    <created by="Carmelo Montanez" on="2006-07-11"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $var := xs:nonPositiveInteger(-120) cast as xs:negativeInteger return $var instance of xs:negativeInteger</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="CastAs663"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Evaluates casting a xs:nonNegativeInteger into an xs:positiveInteger</description>
    <created by="Carmelo Montanez" on="2006-07-11"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $var := xs:nonNegativeInteger(120) cast as xs:positiveInteger return $var instance of xs:positiveInteger</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="CastAs664"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Evaluates casting a xs:short into an xs:unsignedShort</description>
    <created by="Carmelo Montanez" on="2006-07-11"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $var := xs:short(120) cast as xs:unsignedShort return $var instance of xs:unsignedShort</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="CastAs665"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Evaluates casting a xs:int into an xs:long</description>
    <created by="Carmelo Montanez" on="2006-07-11"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $var := xs:int(120) cast as xs:long return $var instance of xs:long</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="CastAs666"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Evaluates casting a xs:long into an xs:int</description>
    <created by="Carmelo Montanez" on="2006-07-11"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $var := xs:long(120) cast as xs:int return $var instance of xs:int</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="CastAs667"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Evaluates casting a xs:unsignedShort into an xs:unsignedInt</description>
    <created by="Carmelo Montanez" on="2006-07-11"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $var := xs:unsignedShort(120) cast as xs:unsignedInt return $var instance of xs:unsignedInt</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="CastAs668"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Evaluates casting a xs:unsignedInt into an xs:unsignedShort</description>
    <created by="Carmelo Montanez" on="2006-07-11"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $var := xs:unsignedInt(120) cast as xs:unsignedShort return $var instance of xs:unsignedShort</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="CastAs669"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Evaluates casting a xs:byte into an xs:unsignedByte</description>
    <created by="Carmelo Montanez" on="2006-07-11"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $var := xs:byte(120) cast as xs:unsignedByte return $var instance of xs:unsignedByte</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="CastAs670"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:date("1999-11-29")</response-string>
    <description> Evaluates overflow of an xs:date time (error FODT0001)It adds 9,000 years to a date created in 2006.</description>
    <created by="Carmelo Montanez" on="2006-07-12"/>
    <dependency type="spec" value="XQ10+"/>
    <test>let $d1 := &apos;2006-07-12&apos; cast as xs:date let $oneky := xs:yearMonthDuration(&apos;P1000Y&apos;) let $d2 := $d1 + $oneky let $d3 := $d2 + $oneky let $d4 := $d3 + $oneky let $d5 := $d4 + $oneky let $d6 := $d5 + $oneky let $d7 := $d6 + $oneky let $d8 := $d7 + $oneky let $d9 := $d8 + $oneky let $d10 := $d9 + $oneky return $d10</test>
    <result-string>xs:string("11006-07-12")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FODT0001"))</result-string>
    <result>
      <any-of>
        <assert-string-value>11006-07-12</assert-string-value>
        <error code="FODT0001"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="CastAs671"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Evaluates casting a string as an xs:ENTITY</description>
    <created by="Carmelo Montanez" on="2006-07-13"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $var := "abc" cast as xs:ENTITY return $var instance of xs:ENTITY</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="CastAs672"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Evaluates casting a sequence of strings as an xs:ENTITY</description>
    <created by="Carmelo Montanez" on="2006-07-13"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $var := ("a","b","c") cast as xs:ENTITY return count($var) lt 10</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="CastAs673a"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:QName("undefined", "#text")</response-string>
    <description> Try to cast a variable to xs:QName</description>
    <created by="Nicolae Brinza" on="2009-04-01"/>
    <modified by="Tim Mills" change="See bug 16059" on="2012-05-31"/>
    <dependency type="spec" value="XQ10"/>
    <test>let $var := "ABC" return $var cast as xs:QName</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case covers="cast-to-qname" name="CastAs673b"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:QName("undefined", "#text")</response-string>
    <description> Try to cast a variable to xs:QName</description>
    <created by="Nicolae Brinza" on="2009-04-01"/>
    <modified by="Tim Mills" change="See bug 16059" on="2012-05-31"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>let $var := "ABC" return $var cast as xs:QName</test>
    <result-string>xs:string("ABC")</result-string>
    <result>
      <assert-string-value>ABC</assert-string-value>
    </result>
  </test-case>
  <test-case name="CastAs674"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:QName("undefined", "#text")</response-string>
    <description> Try to cast an element to xs:QName.
        Fails in 1.0 because only a string literal can be cast to xs:QName
        Fails in 3.0 because atomization of the argument is not allowed - see bug 11964</description>
    <created by="Michael Kay" on="2011-02-16"/>
    <dependency type="spec" value="XQ10"/>
    <test>
      <![CDATA[let $var := <e>xml:space</e> return $var cast as xs:QName]]>
    </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case covers="cast-to-qname" name="CastAs674a"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:QName("undefined", "#text")</response-string>
    <description> Try to cast an element to xs:QName.
        Fails in 1.0 because only a string literal can be cast to xs:QName
        Fails in 3.0 because atomization of the argument is not allowed - see bug 11964</description>
    <created by="Michael Kay" on="2011-02-16"/>
    <modified by="Michael Kay" change="bug 15814 - wrong error code for XQ30" on="2012-02-06"/>
    <modified by="Michael Kay" change="see bug 17038; as a result of bug 16089, the test now succeeds" on="2012-05-17"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      <![CDATA[let $var := <e>xml:space</e> return $var cast as xs:QName]]>
    </test>
    <result-string/>
    <result>
      <all-of>
        <assert-string-value>xml:space</assert-string-value>
        <assert-type>xs:QName</assert-type>
      </all-of>
    </result>
  </test-case>
  <test-case covers="cast-to-qname" name="CastAs675"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Try to do an implicit cast from untypedAtomic to xs:QName as part of a function call
        Fails in 1.0 because only a string literal can be cast to xs:QName
        Fails in 3.0 because implicit cast to xs:QName during a function call is not allowed - see bug 11964</description>
    <created by="Michael Kay" on="2011-02-16"/>
    <modified by="Michael Kay" change="split into XQ10 and XQ30 tests as per bug 16090" on="2012-05-18"/>
    <dependency type="spec" value="XQ10"/>
    <test>
      <![CDATA[
        declare function local:clarkname($q as xs:QName) as xs:string { 
          concat('{', namespace-uri-from-QName($q), '}', local-name-from-QName($q)) 
        }; 
        let $var := <e>xml:space</e> 
        return (local:clarkname(node-name($var)), local:clarkname(xs:untypedAtomic($var)))]]>
    </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case covers="cast-to-qname-errors" name="CastAs675a"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Try to do an implicit cast from untypedAtomic to xs:QName as part of a function call
        Fails in 1.0 because only a string literal can be cast to xs:QName
        Fails in 3.0 because implicit cast to xs:QName during a function call is not allowed - see bug 11964</description>
    <created by="Michael Kay" on="2011-02-16"/>
    <modified by="Michael Kay" change="split into XQ10 and XQ30 tests as per bug 16090" on="2012-05-18"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      <![CDATA[
        declare function local:clarkname($q as xs:QName) as xs:string { 
          concat('{', namespace-uri-from-QName($q), '}', local-name-from-QName($q)) 
        }; 
        let $var := <e>xml:space</e> 
        return (local:clarkname(node-name($var)), local:clarkname(xs:untypedAtomic($var)))]]>
    </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0117"))</result-string>
    <result>
      <error code="XPTY0117"/>
    </result>
  </test-case>
  <test-case covers="cast-to-qname-errors" name="CastAsNamespaceSensitiveType-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description>Implicit cast to a namespace-sensitive type during a function call is not allowed.</description>
    <created by="Ghislain Fourny" on="2012-10-09"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      <![CDATA[
      declare function local:clarkname($q as xs:QName) as xs:string { 
      concat('{', namespace-uri-from-QName($q), '}', local-name-from-QName($q)) 
      }; 
      local:clarkname(xs:untypedAtomic("xs:integer"))
    ]]>
    </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0117"))</result-string>
    <result>
      <error code="XPTY0117"/>
    </result>
  </test-case>
  <test-case covers="cast-to-qname-errors" name="CastAsNamespaceSensitiveType-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description>Implicit cast to a namespace-sensitive type during a function call is not allowed.</description>
    <created by="Ghislain Fourny" on="2012-10-09"/>
    <modified by="Michael Dyck" change="Fix unintended syntax error (extra right paren)" on="2012-10-29"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      <![CDATA[
      declare function local:clarkname($q as xs:QName) as xs:string { 
      concat('{', namespace-uri-from-QName($q), '}', local-name-from-QName($q)) 
      }; 
      local:clarkname(<tag>xs:integer</tag>)
    ]]>
    </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0117"))</result-string>
    <result>
      <error code="XPTY0117"/>
    </result>
  </test-case>
  <test-case covers="cast-to-qname-errors" name="CastAsNamespaceSensitiveType-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description>Namespace-sensitive type during a function call (without cast) is allowed.</description>
    <created by="Ghislain Fourny" on="2012-10-09"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      <![CDATA[
      declare function local:clarkname($q as xs:QName) as xs:string { 
      concat('{', namespace-uri-from-QName($q), '}', local-name-from-QName($q)) 
      }; 
      local:clarkname(xs:QName("xs:integer"))
    ]]>
    </test>
    <result-string>xs:string("{http://www.w3.org/2001/XMLSchema}integer")</result-string>
    <result>
      <assert-string-value>{http://www.w3.org/2001/XMLSchema}integer</assert-string-value>
    </result>
  </test-case>
  <test-case covers="cast-to-qname-errors" name="CastAsNamespaceSensitiveType-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("xs:integer")</response-string>
    <description>Implicit cast to a namespace-sensitive type during a function call is not allowed.</description>
    <created by="Ghislain Fourny" on="2012-10-09"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      <![CDATA[
      declare function local:clarkname($q as xs:NOTATION) as xs:string { 
        $q cast as xs:string
      }; 
      local:clarkname(xs:untypedAtomic("xs:integer"))
    ]]>
    </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0117"))</result-string>
    <result>
      <error code="XPTY0117"/>
    </result>
  </test-case>
  <test-case covers="cast-to-qname-errors" name="CastAsNamespaceSensitiveType-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("xs:integer")</response-string>
    <description>Implicit cast to a namespace-sensitive type during a function call is not allowed.</description>
    <created by="Ghislain Fourny" on="2012-10-09"/>
    <dependency type="spec" value="XQ30+"/>
    <test>
      <![CDATA[
      declare function local:clarkname($q as xs:NOTATION) as xs:string { 
        $q cast as xs:string
      }; 
      local:clarkname(<tag>xs:integer</tag>)
    ]]>
    </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0117"))</result-string>
    <result>
      <error code="XPTY0117"/>
    </result>
  </test-case>
  <test-case covers="cast-to-qname-errors" name="CastAsNamespaceSensitiveType-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description>Namespace-sensitive type during a function call (without cast) is allowed.</description>
    <created by="Ghislain Fourny" on="2012-10-09"/>
    <environment ref="NOTATION-type"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>
      <![CDATA[
      import schema namespace ntn="http://www.w3.org/XQueryTest/Cast/Notation" at "notation.xsd";
      declare function local:is-jpg($q as xs:NOTATION) as xs:boolean { 
        $q eq ntn:pictures("ntn:jpg")
      }; 
      local:is-jpg(validate {
        <ntn:notation xmlns:ntn="http://www.w3.org/XQueryTest/Cast/Notation"
                      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                      xsi:schemaLocation="http://www.w3.org/XQueryTest/Cast/Notation CastExpr/notation.xsd">ntn:jpg</ntn:notation>
      })
    ]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case covers="cast-to-qname-errors" name="CastAsNamespaceSensitiveType-7"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description>Namespace-sensitive type during a function call (without cast) is allowed.</description>
    <created by="Ghislain Fourny" on="2012-10-09"/>
    <environment ref="NOTATION-type"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>
      <![CDATA[
      import schema namespace ntn="http://www.w3.org/XQueryTest/Cast/Notation" at "notation.xsd";
      declare function local:is-jpg($q as ntn:pictures) as xs:boolean { 
        $q eq ntn:pictures("ntn:jpg")
      }; 
      local:is-jpg(validate {
        <ntn:notation xmlns:ntn="http://www.w3.org/XQueryTest/Cast/Notation"
                      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                      xsi:schemaLocation="http://www.w3.org/XQueryTest/Cast/Notation CastExpr/notation.xsd">ntn:jpg</ntn:notation>
      })
    ]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case covers="cast-to-qname-errors" name="CastAsNamespaceSensitiveType-8"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description>Implicit cast to a namespace-sensitive type during a function call is not allowed.</description>
    <created by="Ghislain Fourny" on="2012-10-09"/>
    <environment ref="NOTATION-type"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>
      <![CDATA[
      import schema namespace ntn="http://www.w3.org/XQueryTest/Cast/Notation" at "notation.xsd";
      declare function local:is-jpg($q as ntn:pictures) as xs:boolean { 
        $q eq ntn:pictures("ntn:jpg")
      }; 
      local:is-jpg(xs:untypedAtomic("ntn:picture"))
    ]]>
    </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0117"))</result-string>
    <result>
      <error code="XPTY0117"/>
    </result>
  </test-case>
  <test-case covers="cast-to-qname-errors" name="CastAsNamespaceSensitiveType-9"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description>Implicit cast to a namespace-sensitive type during a function call is not allowed.</description>
    <created by="Ghislain Fourny" on="2012-10-09"/>
    <environment ref="NOTATION-type"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>
      <![CDATA[
      import schema namespace ntn="http://www.w3.org/XQueryTest/Cast/Notation" at "notation.xsd";
      declare function local:is-jpg($q as ntn:pictures) as xs:boolean { 
        $q eq ntn:pictures("ntn:jpg")
      }; 
      local:is-jpg(<tag>ntn:picture</tag>)
    ]]>
    </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0117"))</result-string>
    <result>
      <error code="XPTY0117"/>
    </result>
  </test-case>
  <test-case covers="cast-to-qname-errors" name="CastAsNamespaceSensitiveType-10"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description>Namespace-sensitive type during a function call (without cast) is allowed.</description>
    <created by="Ghislain Fourny" on="2012-10-09"/>
    <environment ref="NOTATION-type"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>
      <![CDATA[
      import schema namespace ntn="http://www.w3.org/XQueryTest/Cast/Notation" at "notation.xsd";
      declare function local:is-jpg($q as ntn:qnames) as xs:boolean { 
        $q eq ntn:qnames("ntn:jpg")
      }; 
      local:is-jpg(validate {
        <ntn:qname xmlns:ntn="http://www.w3.org/XQueryTest/Cast/Notation"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://www.w3.org/XQueryTest/Cast/Notation CastExpr/notation.xsd">ntn:jpg</ntn:qname>
      })
    ]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case covers="cast-to-qname-errors" name="CastAsNamespaceSensitiveType-11"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description>Implicit cast to a namespace-sensitive type during a function call is not allowed.</description>
    <created by="Ghislain Fourny" on="2012-10-09"/>
    <environment ref="NOTATION-type"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>
      <![CDATA[
      import schema namespace ntn="http://www.w3.org/XQueryTest/Cast/Notation" at "notation.xsd";
      declare function local:is-jpg($q as ntn:qnames) as xs:boolean { 
        $q eq ntn:qnames("ntn:jpg")
      }; 
      local:is-jpg(xs:untypedAtomic("ntn:picture"))
    ]]>
    </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0117"))</result-string>
    <result>
      <error code="XPTY0117"/>
    </result>
  </test-case>
  <test-case covers="cast-to-qname-errors" name="CastAsNamespaceSensitiveType-12"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description>Implicit cast to a namespace-sensitive type during a function call is not allowed.</description>
    <created by="Ghislain Fourny" on="2012-10-09"/>
    <environment ref="NOTATION-type"/>
    <dependency type="spec" value="XQ30+"/>
    <dependency type="feature" value="schemaImport"/>
    <test>
      <![CDATA[
      import schema namespace ntn="http://www.w3.org/XQueryTest/Cast/Notation" at "notation.xsd";
      declare function local:is-jpg($q as ntn:qnames) as xs:boolean { 
        $q eq ntn:qnames("ntn:jpg")
      }; 
      local:is-jpg(<tag>ntn:picture</tag>)
    ]]>
    </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0117"))</result-string>
    <result>
      <error code="XPTY0117"/>
    </result>
  </test-case>
  <test-case name="CastFOCA0001-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> casting an xs:decimal with a value to big for that type.</description>
    <created by="Carmelo Montanez" on="2005-10-03"/>
    <modified by="O&apos;Neil Delpratt" change="Bug #19782 - change expected result" on="2012-11-08"/>
    <modified by="Michael Kay" change="Bug #21890 - change assertion" on="2013-05-01"/>
    <test>xs:decimal(99e100)</test>
    <result-string/>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0001"))</result-string>
    <result>
      <any-of>
        <assert>$result lt 100e100 and $result gt 98e100</assert>
        <error code="FOCA0001"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="CastFOCA0003-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> casting an xs:integer with a value to big for that type.</description>
    <created by="Carmelo Montanez" on="2005-10-03"/>
    <modified by="O&apos;Neil Delpratt" change="Bug #19782 - change expected result" on="2012-11-08"/>
    <modified by="Michael Kay" change="Bug #21890 - change assertion" on="2013-05-01"/>
    <test>xs:integer(99e100)</test>
    <result-string/>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0003"))</result-string>
    <result>
      <any-of>
        <assert>$result lt 100e100 and $result gt 98e100</assert>
        <error code="FOCA0003"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Syntax: only ? is allowed as occurence indicator in &apos;cast as&apos; expressions.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>&apos;string&apos; cast as xs:string*</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Syntax: only ? is allowed as occurence indicator in &apos;cast as&apos; expressions.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>&apos;string&apos; cast as xs:string+</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Syntax: only ? is allowed as occurence indicator in &apos;cast as&apos; expressions.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O&apos;Neil Delpratt" change="Added test case depends on XQ10" on="2012-09-25"/>
    <dependency type="spec" value="XQ10"/>
    <test>&apos;string&apos; cast as xs:anyType*</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</result-string>
    <result>
      <any-of>
        <error code="XPST0003"/>
        <error code="XPST0051"/>
      </any-of>
    </result>
  </test-case>
  <test-case covers="cast-to-qname-errors" name="K-SeqExprCast-3a"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Syntax: only ? is allowed as occurence indicator in &apos;cast as&apos; expressions.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O&apos;Neil Delpratt" change="new test case variant, which depends on XQ30 and different error code" on="2012-09-25"/>
    <dependency type="spec" value="XQ30+"/>
    <test>&apos;string&apos; cast as xs:anyType*</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</result-string>
    <result>
      <any-of>
        <error code="XPST0003"/>
        <error code="XQST0052"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anySimpleType("string")</response-string>
    <description> &apos;cast as&apos; where the type is invalid.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O&apos;Neil Delpratt" change="Added test case depends on XQ10" on="2012-09-25"/>
    <dependency type="spec" value="XQ10"/>
    <test>&apos;string&apos; cast as xs:anySimpleType</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0051"))</result-string>
    <result>
      <error code="XPST0051"/>
    </result>
  </test-case>
  <test-case covers="cast-to-qname-errors" name="K-SeqExprCast-4a"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anySimpleType("string")</response-string>
    <description> &apos;cast as&apos; where the type is invalid.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O&apos;Neil Delpratt" change="new test case variant, which depends on XQ30 and different error code" on="2012-09-25"/>
    <modified by="O&apos;Neil Delpratt" change="Change error code according to bug issues #17462 and #19090" on="2012-10-10"/>
    <dependency type="spec" value="XQ30+"/>
    <test>&apos;string&apos; cast as xs:anySimpleType</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0080"))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;cast as&apos; where the type is invalid.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O&apos;Neil Delpratt" change="Added test case depends on XQ10" on="2012-09-25"/>
    <dependency type="spec" value="XQ10"/>
    <test>&apos;string&apos; cast as xs:untyped</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0051"))</result-string>
    <result>
      <error code="XPST0051"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-5a"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;cast as&apos; where the type is invalid.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O&apos;Neil Delpratt" change="new test case variant, which depends on XQ30 and different error code" on="2012-09-25"/>
    <dependency type="spec" value="XQ30+"/>
    <test>&apos;string&apos; cast as xs:untyped</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XQST0052"))</result-string>
    <result>
      <error code="XQST0052"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyAtomicType("string")</response-string>
    <description> &apos;cast as&apos; where the type is invalid.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>&apos;string&apos; cast as xs:anyAtomicType</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0080"))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-7"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;cast as&apos; where the type is invalid.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O&apos;Neil Delpratt" change="Added test case depends on XQ10" on="2012-09-25"/>
    <dependency type="spec" value="XQ10"/>
    <test>&apos;string&apos; cast as xs:anyType</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0051"))</result-string>
    <result>
      <error code="XPST0051"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-7a"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;cast as&apos; where the type is invalid.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O&apos;Neil Delpratt" change="new test case variant, which depends on XQ30 and different error code" on="2012-09-25"/>
    <dependency type="spec" value="XQ30+"/>
    <test>&apos;string&apos; cast as xs:anyType</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XQST0052"))</result-string>
    <result>
      <error code="XQST0052"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-8"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> A prefix is used which isn&apos;t declared.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>3 cast as prefixDoesNotExist:integer</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0081"))</result-string>
    <result>
      <error code="XPST0081"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-9"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> A type is specified which doesn&apos;t exist.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O&apos;Neil Delpratt" change="Added test case depends on XQ10" on="2012-09-25"/>
    <dependency type="spec" value="XQ10"/>
    <test>3 cast as xs:doesNotExist</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0051"))</result-string>
    <result>
      <error code="XPST0051"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-9a"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> A type is specified which doesn&apos;t exist.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O&apos;Neil Delpratt" change="new test case variant, which depends on XQ30 and different error code" on="2012-09-25"/>
    <dependency type="spec" value="XQ30+"/>
    <test>3 cast as xs:doesNotExist</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XQST0052"))</result-string>
    <result>
      <error code="XQST0052"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-10"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> A non-atomic type is referenced, leading to a syntax error.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O&apos;Neil Delpratt" change="Added test case depends on XQ10" on="2012-09-25"/>
    <dependency type="spec" value="XQ10"/>
    <test>&apos;string&apos; cast as item()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</result-string>
    <result>
      <any-of>
        <error code="XPST0003"/>
        <error code="XPST0051"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-10a"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> A non-atomic type is referenced, leading to a syntax error.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O&apos;Neil Delpratt" change="new test case variant, which depends on XQ30 and different error code" on="2012-09-25"/>
    <dependency type="spec" value="XQ30+"/>
    <test>&apos;string&apos; cast as item()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</result-string>
    <result>
      <any-of>
        <error code="XPST0003"/>
        <error code="XQST0052"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-11"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> A non-atomic type is referenced, leading to a syntax error.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O&apos;Neil Delpratt" change="Added test case depends on XQ10" on="2012-09-25"/>
    <dependency type="spec" value="XQ10"/>
    <test>&apos;string&apos; cast as node()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</result-string>
    <result>
      <any-of>
        <error code="XPST0003"/>
        <error code="XPST0051"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-11a"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> A non-atomic type is referenced, leading to a syntax error.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O&apos;Neil Delpratt" change="new test case variant, which depends on XQ30 and different error code" on="2012-09-25"/>
    <dependency type="spec" value="XQ30+"/>
    <test>&apos;string&apos; cast as node()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</result-string>
    <result>
      <any-of>
        <error code="XPST0003"/>
        <error code="XQST0052"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-12"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> A non-atomic type is referenced, leading to a syntax error.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O&apos;Neil Delpratt" change="Added test case depends on XQ10" on="2012-09-25"/>
    <dependency type="spec" value="XQ10"/>
    <test>&apos;string&apos; cast as attribute()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</result-string>
    <result>
      <any-of>
        <error code="XPST0003"/>
        <error code="XPST0051"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-12a"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> A non-atomic type is referenced, leading to a syntax error.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O&apos;Neil Delpratt" change="new test case variant, which depends on XQ30 and different error code" on="2012-09-25"/>
    <dependency type="spec" value="XQ30+"/>
    <test>&apos;string&apos; cast as attribute()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</result-string>
    <result>
      <any-of>
        <error code="XPST0003"/>
        <error code="XQST0052"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-13"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> A non-atomic type is referenced, leading to a syntax error.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O&apos;Neil Delpratt" change="Added test case depends XQ10" on="2012-09-25"/>
    <dependency type="spec" value="XQ10"/>
    <test>&apos;string&apos; cast as empty-sequence()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</result-string>
    <result>
      <any-of>
        <error code="XPST0003"/>
        <error code="XPST0051"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-13a"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> A non-atomic type is referenced, leading to a syntax error.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O&apos;Neil Delpratt" change="new test case variant, which depends on XQ30 and different error code" on="2012-09-25"/>
    <dependency type="spec" value="XQ30+"/>
    <test>&apos;string&apos; cast as empty-sequence()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</result-string>
    <result>
      <any-of>
        <error code="XPST0003"/>
        <error code="XQST0052"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-14"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `&apos;1&apos; cast as xs:boolean eq true()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>&apos;1&apos; cast as xs:boolean eq true()</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-15"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `&apos;true&apos; cast as xs:boolean eq true()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>&apos;true&apos; cast as xs:boolean eq true()</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-16"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `&apos;false&apos; cast as xs:boolean eq false()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>&apos;false&apos; cast as xs:boolean eq false()</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-17"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `&apos;0&apos; cast as xs:boolean eq false()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>&apos;0&apos; cast as xs:boolean eq false()</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-18"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `false() cast as xs:boolean eq false()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>false() cast as xs:boolean eq false()</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-19"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> A test whose essence is: `not(true() cast as xs:boolean eq false())`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(true() cast as xs:boolean eq false())</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-20"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:boolean(xs:double(3)) eq true()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(xs:double(3)) eq true()</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-21"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:boolean(xs:string(1)) eq true()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(xs:string(1)) eq true()</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-22"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:boolean(xs:integer(3)) eq true()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(xs:integer(3)) eq true()</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-23"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:boolean(xs:decimal(3)) eq true()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(xs:decimal(3)) eq true()</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-24"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:boolean(xs:double(0)) eq false()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(xs:double(0)) eq false()</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-25"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:boolean(xs:string(0)) eq false()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(xs:string(0)) eq false()</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-26"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:boolean(xs:integer(0)) eq false()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(xs:integer(0)) eq false()</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-27"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:boolean(xs:decimal(0)) eq false()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(xs:decimal(0)) eq false()</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-28"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:boolean(xs:decimal(0.0)) eq false()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(xs:decimal(0.0)) eq false()</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-29"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:boolean(+0) eq false()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(+0) eq false()</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-30"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:boolean(-0) eq false()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(-0) eq false()</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-31"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:boolean(xs:double(+0)) eq false()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(xs:double(+0)) eq false()</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-32"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:boolean(xs:double(-0)) eq false()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(xs:double(-0)) eq false()</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-33"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:boolean(0.0E0) eq false()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(0.0E0) eq false()</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-34"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:boolean(xs:double("NaN")) eq false()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(xs:double("NaN")) eq false()</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-35"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:boolean(xs:float("NaN")) eq false()`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(xs:float("NaN")) eq false()</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-36"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Invalid casting combination, combined with value comparison.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>&apos;12312&apos; cast as xs:boolean eq false()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-37"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `false() cast as xs:string eq "false"`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>false() cast as xs:string eq "false"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-38"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `true() cast as xs:string eq "true"`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>true() cast as xs:string eq "true"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-39"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `(&apos;1&apos; cast as xs:boolean) cast as xs:string eq &apos;true&apos;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(&apos;1&apos; cast as xs:boolean) cast as xs:string eq &apos;true&apos;</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-40"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:boolean(&apos;0&apos;) cast as xs:string eq &apos;false&apos;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(&apos;0&apos;) cast as xs:string eq &apos;false&apos;</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-41"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `" white space left alone" cast as xs:string eq xs:string(" white space left alone")`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>" white space left alone" cast as xs:string eq xs:string(" white space left alone")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-42"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> A test whose essence is: `(xs:QName("fn:local-name") cast as xs:string) eq "fn:local-name"`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(xs:QName("fn:local-name") cast as xs:string) eq "fn:local-name"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-43"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> A test whose essence is: `(xs:QName("local-name") cast as xs:string) eq "local-name"`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(xs:QName("local-name") cast as xs:string) eq "local-name"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-44"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:string(xs:anyURI(&apos;example.com/&apos;)) eq &apos;example.com/&apos;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:anyURI(&apos;example.com/&apos;)) eq &apos;example.com/&apos;</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-45"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:string(xs:double(3)) eq &apos;3&apos;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:double(3)) eq &apos;3&apos;</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-46"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:string(xs:string(3)) eq &apos;3&apos;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:string(3)) eq &apos;3&apos;</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-47"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:string(xs:integer(3)) eq &apos;3&apos;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:integer(3)) eq &apos;3&apos;</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-48"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:string(xs:decimal(3)) eq &apos;3&apos;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:decimal(3)) eq &apos;3&apos;</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-49"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> A test whose essence is: `"untyped a " cast as xs:untypedAtomic eq xs:untypedAtomic("untyped a ")`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>"untyped a " cast as xs:untypedAtomic eq xs:untypedAtomic("untyped a ")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-50"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> A test whose essence is: `false() cast as xs:untypedAtomic eq xs:untypedAtomic("false")`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>false() cast as xs:untypedAtomic eq xs:untypedAtomic("false")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-51"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> A test whose essence is: `true() cast as xs:untypedAtomic eq xs:untypedAtomic("true")`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>true() cast as xs:untypedAtomic eq xs:untypedAtomic("true")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-52"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `false() cast as xs:untypedAtomic instance of xs:untypedAtomic`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>false() cast as xs:untypedAtomic instance of xs:untypedAtomic</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-53"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `true() cast as xs:untypedAtomic instance of xs:untypedAtomic`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>true() cast as xs:untypedAtomic instance of xs:untypedAtomic</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-54"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> A test whose essence is: `(xs:QName("local-name") cast as xs:untypedAtomic) eq xs:untypedAtomic("local-name")`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(xs:QName("local-name") cast as xs:untypedAtomic) eq xs:untypedAtomic("local-name")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-55"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> A test whose essence is: `(xs:QName("fn:local-name") cast as xs:untypedAtomic) eq xs:untypedAtomic("fn:local-name")`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(xs:QName("fn:local-name") cast as xs:untypedAtomic) eq xs:untypedAtomic("fn:local-name")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-56"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> A test whose essence is: `xs:untypedAtomic(xs:anyURI(&apos;example.com/&apos;)) eq &apos;example.com/&apos;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:anyURI(&apos;example.com/&apos;)) eq &apos;example.com/&apos;</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-57"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> A test whose essence is: `xs:untypedAtomic(xs:double(3)) eq &apos;3&apos;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:double(3)) eq &apos;3&apos;</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-58"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> A test whose essence is: `xs:untypedAtomic(xs:string(3)) eq &apos;3&apos;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:string(3)) eq &apos;3&apos;</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-59"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> A test whose essence is: `xs:untypedAtomic(xs:integer(3)) eq &apos;3&apos;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:integer(3)) eq &apos;3&apos;</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-60"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> A test whose essence is: `xs:untypedAtomic(xs:decimal(3)) eq &apos;3&apos;`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:decimal(3)) eq &apos;3&apos;</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-61"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:NOTATION("notation is abstract")</response-string>
    <description> Casting to xs:notation is not allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>"notation is abstract" cast as xs:NOTATION</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0080"))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-62"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:NOTATION("notation is abstract")</response-string>
    <description> Casting to xs:notation is not allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>"notation is abstract" cast as xs:NOTATION?</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0080"))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-63"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting to xs:notation is not allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>() cast as xs:NOTATION?</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0080"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0005"))</result-string>
    <result>
      <any-of>
        <error code="XPST0080"/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-64"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting to xs:notation is not allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>() cast as xs:NOTATION</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0080"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0005"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <any-of>
        <error code="XPST0080"/>
        <error code="XPST0005"/>
        <error code="XPTY0004"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-65"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> Casting to xs:notation is not allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:NOTATION(xs:anyURI(&apos;example.com/&apos;))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-66"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> Casting to xs:notation is not allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:NOTATION(QName(&apos;example.com&apos;, &apos;p:foo&apos;))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-67"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting to xs:QName where the cardinality is wrong.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>() cast as xs:QName</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0005"))</result-string>
    <result>
      <any-of>
        <error code="XPTY0004"/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-68"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:QName("undefined", "#text")</response-string>
    <description> Input when casting to xs:QName must be a string literal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>3 cast as xs:QName</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-69"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:QName("undefined", "#text")</response-string>
    <description> Input when casting to xs:QName must be a string literal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>. cast as xs:QName</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPDY0002"))</result-string>
    <result>
      <any-of>
        <error code="XPTY0004"/>
        <error code="XPDY0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-70"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Casting a xs:QName value to xs:QName is possible.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(xs:QName("local-name") cast as xs:QName) eq xs:QName("local-name")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-71a"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:QName("undefined", "#text")</response-string>
    <description> Casting xs:untypedAtomic to xs:QName is an error.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="Tim Mills" change="See bug 16059" on="2012-05-31"/>
    <dependency type="spec" value="XP20 XQ10"/>
    <test>xs:untypedAtomic("ncname") cast as xs:QName?</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case covers="cast-to-qname" name="K-SeqExprCast-71b"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:QName("undefined", "#text")</response-string>
    <description> Casting xs:untypedAtomic to xs:QName is an error.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="Tim Mills" change="See bug 16059" on="2012-05-31"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>xs:untypedAtomic("ncname") cast as xs:QName?</test>
    <result-string>xs:string("ncname")</result-string>
    <result>
      <assert-string-value>ncname</assert-string-value>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-72"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `"example.com/" cast as xs:anyURI eq xs:anyURI(&apos;example.com/&apos;)`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>"example.com/" cast as xs:anyURI eq xs:anyURI(&apos;example.com/&apos;)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-73"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:untypedAtomic("example.com/") cast as xs:anyURI eq xs:anyURI(&apos;example.com/&apos;)`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic("example.com/") cast as xs:anyURI eq xs:anyURI(&apos;example.com/&apos;)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-74"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:anyURI("example.com/") cast as xs:anyURI eq xs:anyURI(&apos;example.com/&apos;)`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI("example.com/") cast as xs:anyURI eq xs:anyURI(&apos;example.com/&apos;)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-75"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:double(3) eq 3`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(3) eq 3</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-76"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:double(3.1) eq 3.1`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(3.1) eq 3.1</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-77"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:double(6) instance of xs:double`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(6) instance of xs:double</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-78"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:string(xs:double("INF")) eq "INF"`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:double("INF")) eq "INF"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-79"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:string(xs:double("-INF")) eq "-INF"`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:double("-INF")) eq "-INF"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-80"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:float(3) eq 3`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(3) eq 3</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-81"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:float(3.1) eq 3.1`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(3.1) eq 3.1</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-82"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:float(6) instance of xs:float`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(6) instance of xs:float</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-83"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:string(xs:float("INF")) eq "INF"`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:float("INF")) eq "INF"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-84"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:string(xs:float("-INF")) eq "-INF"`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:float("-INF")) eq "-INF"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-85"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:decimal(3) eq 3`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(3) eq 3</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-86"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:decimal(3.1) eq 3.1`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(3.1) eq 3.1</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-87"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:decimal(6) instance of xs:decimal`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(6) instance of xs:decimal</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-88"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:integer(3) eq 3`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(3) eq 3</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-89"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A test whose essence is: `xs:integer(3.1) eq 3`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(3.1) eq 3</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-90"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Test that when casting xs:decimal to xs:integer that conversion happens.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(3.1) eq 3</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-91"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:integer(6) instance of xs:integer`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(6) instance of xs:integer</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-92"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:integer(6) instance of xs:decimal`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(6) instance of xs:decimal</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-93"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A test whose essence is: `xs:hexBinary("FFF")`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary("FFF")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-94"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A test whose essence is: `xs:hexBinary("FFxF")`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary("FFxF")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-95"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A test whose essence is: `xs:hexBinary("0xFF")`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary("0xFF")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-96"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A test whose essence is: `xs:hexBinary("F")`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary("F")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-97"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A test whose essence is: `xs:hexBinary("x")`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary("x")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-98"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `exists(xs:hexBinary("Ab08bcFFAA08b6"))`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>exists(xs:hexBinary("Ab08bcFFAA08b6"))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-99"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `exists(xs:hexBinary("FF"))`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>exists(xs:hexBinary("FF"))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-100"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `exists(xs:hexBinary("aa"))`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>exists(xs:hexBinary("aa"))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-101"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `count(xs:hexBinary(xs:hexBinary("03"))) eq 1`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>count(xs:hexBinary(xs:hexBinary("03"))) eq 1</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-102"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:string(xs:hexBinary("aa")) eq "AA"`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:hexBinary("aa")) eq "AA"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-103"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:string(xs:hexBinary("0a")) eq "0A"`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:hexBinary("0a")) eq "0A"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-104"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:string(xs:hexBinary("a0")) eq "A0"`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:hexBinary("a0")) eq "A0"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-105"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:string(xs:hexBinary("a4")) eq "A4"`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:hexBinary("a4")) eq "A4"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-106"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:string(xs:hexBinary("c0")) eq "C0"`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:hexBinary("c0")) eq "C0"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-107"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:string(xs:hexBinary("fA")) eq "FA"`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:hexBinary("fA")) eq "FA"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-108"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:string(xs:hexBinary("10")) eq "10"`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:hexBinary("10")) eq "10"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-109"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:string(xs:hexBinary("031a34123b")) eq "031A34123B"`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:hexBinary("031a34123b")) eq "031A34123B"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-110"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:string(xs:hexBinary("03")) eq "03"`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:hexBinary("03")) eq "03"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-111"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:string(xs:hexBinary("0c")) eq "0C"`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:hexBinary("0c")) eq "0C"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-112"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:string(xs:hexBinary("0b")) eq "0B"`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:hexBinary("0b")) eq "0B"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-113"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:string(xs:hexBinary("3a")) eq "3A"`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:hexBinary("3a")) eq "3A"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-114"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> An empty string is a valid lexical representation for xs:hexBinary, and means &apos;no data.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:hexBinary("")) eq ""</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-115"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> An invalid lexical representation for xs:base64Binary.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary("=aaabbcd"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-116"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> An invalid lexical representation for xs:base64Binary.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary("F==="))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-117"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> An invalid lexical representation for xs:base64Binary.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary("a"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-118"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> An invalid lexical representation for xs:base64Binary.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary("aaaa===="))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-119"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> An invalid lexical representation for xs:base64Binary.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary("aaaa=bcd"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-120"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> An invalid lexical representation for xs:base64Binary.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary("aaaaa======="))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-121"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> An invalid lexical representation for xs:base64Binary.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary("aaaabcd"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-122"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> An invalid lexical representation for xs:base64Binary.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary("aaaabcd|"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-123"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> An invalid lexical representation for xs:base64Binary.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary("aabb=d=="))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-124"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> An invalid lexical representation for xs:base64Binary.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary("aabbcd=a"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-125"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> An invalid lexical representation for xs:base64Binary.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary("abcdefghi"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-126"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:string(xs:base64Binary("0w==")) eq "0w=="`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary("0w==")) eq "0w=="</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-127"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A test whose essence is: `xs:string(xs:base64Binary("aaa a")) eq "aaaa"`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary("aaa a")) eq "aaaa"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-128"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `xs:string(xs:base64Binary("frfhforlksid7453")) eq "frfhforlksid7453"`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary("frfhforlksid7453")) eq "frfhforlksid7453"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-129"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:base64Binary("frfhforlksid745323==")</response-string>
    <description> If the last tetragram ends in &apos;==&apos; then the previous character must be one of [AQgw].</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary("frfhforlksid745323==")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-130"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A test whose essence is: `xs:string(xs:base64Binary(xs:hexBinary("03"))) eq "Aw=="`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary(xs:hexBinary("03"))) eq "Aw=="</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-131"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> A test whose essence is: `xs:string(xs:base64Binary(xs:hexBinary("0f3c"))) eq "Dzw="`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary(xs:hexBinary("0f3c"))) eq "Dzw="</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-132"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A test whose essence is: `xs:string(xs:base64Binary(xs:hexBinary("12"))) eq "Eg=="`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary(xs:hexBinary("12"))) eq "Eg=="</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-133"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A test whose essence is: `xs:string(xs:base64Binary(xs:hexBinary("3B"))) eq "Ow=="`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary(xs:hexBinary("3B"))) eq "Ow=="</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-134"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A test whose essence is: `xs:string(xs:base64Binary(xs:hexBinary("69A69A"))) eq "aaaa"`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary(xs:hexBinary("69A69A"))) eq "aaaa"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-135"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> A test whose essence is: `xs:string(xs:base64Binary(xs:hexBinary("F43D1234ce8f"))) eq "9D0SNM6P"`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary(xs:hexBinary("F43D1234ce8f"))) eq "9D0SNM6P"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-136"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A test whose essence is: `xs:string(xs:base64Binary(xs:hexBinary("f0"))) eq "8A=="`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary(xs:hexBinary("f0"))) eq "8A=="</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-137"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A test whose essence is: `xs:string(xs:base64Binary(xs:hexBinary("ffaabbddcceeff0134f001d8ca9bc77899c83e6f7d"))) eq "/6q73czu/wE08AHYypvHeJnIPm99"`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary(xs:hexBinary("ffaabbddcceeff0134f001d8ca9bc77899c83e6f7d"))) eq "/6q73czu/wE08AHYypvHeJnIPm99"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-138"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> A test whose essence is: `xs:string(xs:base64Binary(xs:hexBinary("ffff"))) eq "//8="`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary(xs:hexBinary("ffff"))) eq "//8="</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-139"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> A test whose essence is: `xs:string(xs:base64Binary(xs:hexBinary("ffff34564321deac9876"))) eq "//80VkMh3qyYdg=="`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary(xs:hexBinary("ffff34564321deac9876"))) eq "//80VkMh3qyYdg=="</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-140"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A test whose essence is: `xs:string(xs:hexBinary(xs:base64Binary("Ow=="))) eq "3B"`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:hexBinary(xs:base64Binary("Ow=="))) eq "3B"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-141"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A test whose essence is: `xs:string(xs:hexBinary(xs:base64Binary("aaa a"))) eq "69A69A"`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:hexBinary(xs:base64Binary("aaa a"))) eq "69A69A"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-142"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> An empty string is a valid lexical representation for xs:base64Binary, and means &apos;no data.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:base64Binary("")) eq ""</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-143"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Casting where the source type typically cannot be determined statically.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary(remove(("3B", 1.1), 2) treat as xs:string)</test>
    <result-string>xs:string("3B")</result-string>
    <result>
      <assert-string-value>3B</assert-string-value>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-144"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `(xs:decimal(remove((3e3, 1.1), 1))) eq 1.1`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(xs:decimal(remove((3e3, 1.1), 1))) eq 1.1</test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPTY0004"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-145"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Casting where the cardinality of the source value is wrong.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(remove((1, 2, 3), 1))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-147"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A preceding plus sign(&apos;+&apos;) is disallowed for xs:duration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration("+P1Y2M123DT10H30M99S")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-148"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> No zone offset is allowed for xs:duration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration("P1Y2M123DT10H30M99S+08:00")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-149"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A preceding &apos;P&apos; must always exist in a xs:duration value.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration("1Y2M123DT10H30M99S")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-150"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> At least one number and its designator must be present in a xs:duration value.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration("P")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-151"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> At least one number and its designator must be present in a xs:duration value, a minus sign is insufficient.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration("-P")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-152"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A &apos;T&apos; separator in a xs:duration must be followed by time components.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration("P1Y24MT")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-153"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;P24H&apos; is an invalid lexical representation for xs:duration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration("P24H")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-154"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Ensure that when casting xs:duration to xs:string, preceding zeros are handled properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:duration("P0010Y0010M0010DT0010H0010M0010S")) eq "P10Y10M10DT10H10M10S"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-155"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Ensure that a negative xs:duration is properly serialized when cast to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:duration("-P0010DT0010H0010M0010S")) eq "-P10DT10H10M10S"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-156"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Ensure that when casting xs:duration to xs:string, that empty fields are properly serialized.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:duration("P0Y0M0DT00H00M00.000S")) eq "PT0S"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-157"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Ensure that when casting xs:duration to xs:string, that empty components are handled properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:duration("-PT8H23M0S")) eq "-PT8H23M"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-158"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting a xs:duration with zeroed time components to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:duration("-P2000Y11M5DT0H0M0.000S")) eq "-P2000Y11M5D"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-159"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> The canonical lexical representation for the xs:duration value P365D is &apos;P365D&apos;.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:duration("P365D")) eq "P365D"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-160"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> The canonical lexical representation for the xs:duration value P12M is &apos;P1Y&apos;.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:duration("P12M")) eq "P1Y"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-161"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> The canonical lexical representation for the xs:duration value P31D is &apos;P31D&apos;.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:duration("P31D")) eq "P31D"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-162"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> The canonical lexical representation for the xs:duration value P3Y0M is &apos;P3Y&apos;.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:yearMonthDuration("P3Y0M")) eq "P3Y"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-163"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Test that a xs:duration value with a small second component is serialized properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:duration("P31DT3H2M10.001S")) eq "P31DT3H2M10.001S"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-164"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> The canonical form of the xs:duration value -PT0S is PT0S.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:duration("-PT0S")) eq "PT0S"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-165"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Simple test of casting xs:dayTimeDuration to xs:duration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:duration(xs:dayTimeDuration("P31DT3H2M10.001S"))) eq "P31DT3H2M10.001S"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-166"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Simple test of casting xs:yearMonthDuration to xs:duration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:duration(xs:yearMonthDuration("P543Y456M"))) eq "P581Y"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-167"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Simple test of casting a negative xs:dayTimeDuration to xs:duration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:duration(xs:dayTimeDuration("-P31DT3H2M10.001S"))) eq "-P31DT3H2M10.001S"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-168"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Simple test of casting a negative xs:yearMonthDuration to xs:duration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:duration(xs:yearMonthDuration("-P543Y456M"))) eq "-P581Y"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-169"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A preceding plus sign(&apos;+&apos;) is disallowed for xs:dayTimeDuration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration("+P3DT10H")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-170"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> No zone offset is allowed for xs:dayTimeDuration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration("P3DT10H+08:00")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-171"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A preceding &apos;P&apos; must always exist in a xs:dayTimeDuration value.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration("3DT10H")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-172"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> At least one number and its designator must be present in a xs:dayTimeDuration value.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration("P")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-173"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> At least one number and its designator must be present in a xs:dayTimeDuration value, a minus sign is insufficient.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration("-P")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-174"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A &apos;T&apos; separator in a xs:dayTimeDuration must be followed by time components.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration("P1DT")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-175"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Ensure that when casting xs:dayTimeDuration to xs:string, that empty fields are properly serialized.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dayTimeDuration("P0DT00H00M00.000S")) eq "PT0S"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-176"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;P1Y12M1D&apos; is an invalid lexical representation for xs:dayTimeDuration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration("P1Y12M1D")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-177"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;P24M1D&apos; is an invalid lexical representation for xs:dayTimeDuration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration("P24M1D")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-178"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;PDT3H2M10.001S&apos; is an invalid lexical representation for xs:dayTimeDuration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration("PDT3H2M10.001S")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-179"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Ensure that when casting xs:dayTimeDuration to xs:string, that preceding zeros are handled properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dayTimeDuration("P0010DT0010H0010M0010S")) eq "P10DT10H10M10S"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-180"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Ensure that a negative xs:dayTimeDuration is properly serialized when cast to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dayTimeDuration("-P0010DT0010H0010M0010S")) eq "-P10DT10H10M10S"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-181"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Ensure that when casting xs:dayTimeDuration to xs:string, that empty components are handled properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dayTimeDuration("-PT8H23M0S")) eq "-PT8H23M"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-182"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting a xs:duration with zeroed time components to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dayTimeDuration("-P5DT0H0M0.000S")) eq "-P5D"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-183"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Test that a xs:dayTimeDuration value with a large day component is serialized properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dayTimeDuration("P9876DT1M")) eq "P9876DT1M"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-184"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Test that a xs:dayTimeDuration value with a large hour component is serialized properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dayTimeDuration("PT9876H1M")) eq "P411DT12H1M"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-185"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Test that a xs:dayTimeDuration value with a large minute component is serialized properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dayTimeDuration("PT6000M")) eq "P4DT4H"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-186"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Test that a xs:dayTimeDuration value with a large second component is serialized properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dayTimeDuration("PT1M1231.432S")) eq "PT21M31.432S"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-187"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Test that a xs:dayTimeDuration value with a small second component is serialized properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dayTimeDuration("P31DT3H2M10.001S")) eq "P31DT3H2M10.001S"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-188"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> The canonical form of the xs:dayTimeDuration value -PT0S is PT0S.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dayTimeDuration("-PT0S")) eq "PT0S"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-189"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Simple test of casting xs:duration to xs:dayTimeDuration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dayTimeDuration(xs:duration("P3Y0M31DT3H2M10.001S"))) eq "P31DT3H2M10.001S"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-190"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Simple test of casting xs:yearMonthDuration to xs:dayTimeDuration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dayTimeDuration(xs:yearMonthDuration("P543Y456M"))) eq "PT0S"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-191"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Simple test of casting a negative xs:duration to xs:dayTimeDuration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dayTimeDuration(xs:duration("-P3Y0M31DT3H2M10.001S"))) eq "-P31DT3H2M10.001S"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-192"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Simple test of casting a negative xs:yearMonthDuration to xs:dayTimeDuration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dayTimeDuration(xs:yearMonthDuration("-P543Y456M"))) eq "PT0S"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-193"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> The canonical lexical representation for the xs:dayTimeDuration value P3D is &apos;P3D&apos;.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dayTimeDuration("P3D")) eq "P3D"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-194"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A preceding plus sign(&apos;+&apos;) is disallowed for xs:yearMonthDuration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration("+P20Y15M")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-195"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> No zone offset is allowed for xs:yearMonthDuration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration("P20Y15M+08:00")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-196"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A preceding &apos;P&apos; must always exist in a xs:yearMonthDuration value.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration("20Y15M")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-197"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> At least one number and its designator must be present in a xs:yearMonthDuration value.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration("P")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-198"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> At least one number and its designator must be present in a xs:yearMonthDuration value, a minus sign is insufficient.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration("-P")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-199"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A &apos;T&apos; separator in a xs:yearMonthDuration is not allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration("P1Y24MT")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-200"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;P731D&apos; is an invalid lexical representation for xs:yearMonthDuration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration("P731D")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-201"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;-P3&apos; is an invalid lexical representation for xs:yearMonthDuration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration("-P3")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-202"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Ensure that when casting xs:yearMonthDuration to xs:string, that preceding zeros are handled properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:yearMonthDuration("P0010Y0010M")) eq "P10Y10M"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-203"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Ensure that a negative xs:yearMonthDuration is properly serialized when cast to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:yearMonthDuration("-P0010Y0010M")) eq "-P10Y10M"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-204"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Ensure that when casting xs:yearMonthDuration to xs:string, that empty fields are properly serialized.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:yearMonthDuration("P0Y0M")) eq "P0M"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-205"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Test that a xs:yearMonthDuration value with a large year component is serialized properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:yearMonthDuration("P2Y323M")) eq "P28Y11M"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-206"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Test that a xs:yearMonthDuration value with a large year and month component is serialized properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:yearMonthDuration("-P543Y456M")) eq "-P581Y"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-207"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> The canonical form of the xs:yearMonthDuration value -P0M is P0M.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:yearMonthDuration("-P0M")) eq "P0M"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-208"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Simple test of casting xs:duration to xs:yearMonthDuration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:yearMonthDuration(xs:duration("P3Y0M31DT3H2M10.001S"))) eq "P3Y"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-209"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Simple test of casting xs:dayTimeDuration to xs:yearMonthDuration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:yearMonthDuration(xs:dayTimeDuration("P31DT3H2M10.001S"))) eq "P0M"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-210"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Simple test of casting a negative xs:duration to xs:yearMonthDuration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:yearMonthDuration(xs:duration("-P3Y0M31DT3H2M10.001S"))) eq "-P3Y"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-211"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Simple test of casting a negative xs:dayTimeDuration to xs:yearMonthDuration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:yearMonthDuration(xs:dayTimeDuration("-P31DT3H2M10.001S"))) eq "P0M"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-213"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A test whose essence is: `xs:gYear("1")`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("1")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-214"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A test whose essence is: `xs:gYear("12")`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("12")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-215"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A test whose essence is: `xs:gYear("867")`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("867")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-216"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:gYear("+1999")</response-string>
    <description> A test whose essence is: `xs:gYear("+1999")`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("+1999")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-217"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:gYear("+1999")</response-string>
    <description> A test whose essence is: `xs:gYear("+1999")`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("+1999")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-218"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:gYear("+0000")</response-string>
    <description> A test whose essence is: `xs:gYear("+0000")`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("+0000")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-219"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A test whose essence is: `xs:gYear("1111-")`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("1111-")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-220"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A test whose essence is: `xs:gYear("1111a")`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("1111a")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-221"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A test whose essence is: `xs:gYear("a1111")`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("a1111")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-222"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A test whose essence is: `xs:gYear("1 111")`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("1 111")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-223"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A test whose essence is: `xs:gYear("1111 Z")`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("1111 Z")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-224"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A test whose essence is: `xs:gYear("1111 Z")`.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("1111 Z")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-225"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Testing timezone field in xs:gYear: the hour component cannot be -15.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("1956-15:00")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-226"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Testing timezone field in xs:gYear: the hour component cannot be +15.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("1956+15:00")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-227"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Testing timezone field in xs:gYear: the minute component cannot be +60.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("1956+10:60")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-228"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Testing timezone field in xs:gYear: the minute component cannot be -60.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("1956-10:60")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-229"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;02004&apos; is an invalid lexical representation for xs:gYear.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("02004")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-230"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Testing timezone field in xs:gYear: the minute field must always be present.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("1956-10")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-231"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Ensure casting xs:gYear to xs:string, with timezone &apos;-00:00&apos; is properly handled.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:gYear("1999-00:00")) eq "1999Z"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-232"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Ensure casting xs:gYear to xs:string, with timezone &apos;+00:00&apos; is properly handled.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:gYear("1999+00:00")) eq "1999Z"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-233"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Ensure casting xs:gYear to xs:string, with timezone &apos;Z&apos; is properly handled.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:gYear("1999Z")) eq "1999Z"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-234"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;10&apos; is an invalid lexical representation for xs:gDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("10")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-235"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;-01&apos; is an invalid lexical representation for xs:gDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("-01")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-236"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;---321&apos; is an invalid lexical representation for xs:gDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("---321")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-237"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;--01&apos; is an invalid lexical representation for xs:gDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("--01")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-238"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;E---01&apos; is an invalid lexical representation for xs:gDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("E---01")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-239"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;---01E&apos; is an invalid lexical representation for xs:gDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("---01E")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-240"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;---01-&apos; is an invalid lexical representation for xs:gDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("---01-")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-241"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;---001&apos; is an invalid lexical representation for xs:gDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("---001")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-242"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;---32&apos; is an invalid lexical representation for xs:gDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("---32")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-243"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;---00&apos; is an invalid lexical representation for xs:gDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("---00")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-244"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;---8&apos; is an invalid lexical representation for xs:gDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("+--08")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-245"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;+--08&apos; is an invalid lexical representation for xs:gDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("+--08")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-246"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;+---08&apos; is an invalid lexical representation for xs:gDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("+---08")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-247"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;---08 Z&apos; is an invalid lexical representation for xs:gDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("---08 Z")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-248"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Testing timezone field in xs:gDay: the hour component cannot be -15.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("---08-15:00")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-249"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Testing timezone field in xs:gDay: the hour component cannot be +15.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("---08+15:00")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-250"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Testing timezone field in xs:gDay: the minute component cannot be +60.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("---08+10:60")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-251"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Testing timezone field in xs:gDay: the minute component cannot be -60.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("---08-10:60")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-252"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Testing timezone field in xs:gDay: the minute field must always be present.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("---08-10")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-253"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Ensure casting xs:gDay to xs:string, with timezone &apos;-00:00&apos; is properly handled.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:gDay("---01-00:00")) eq "---01Z"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-254"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Ensure casting xs:gDay to xs:string, with timezone &apos;+00:00&apos; is properly handled.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:gDay("---01+00:00")) eq "---01Z"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-255"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Ensure casting xs:gDay to xs:string, with timezone &apos;Z&apos; is properly handled.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:gDay("---01Z")) eq "---01Z"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-256"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;-01&apos; is an invalid lexical representation for xs:gMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth("-01")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-257"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;---01&apos; is an invalid lexical representation for xs:gMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth("---01")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-258"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;+--01&apos; is an invalid lexical representation for xs:gMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth("+--01")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-259"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;--13&apos; is an invalid lexical representation for xs:gMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth("--13")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-260"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;--431&apos; is an invalid lexical representation for xs:gMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth("--431")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-261"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;--11-&apos; is an invalid lexical representation for xs:gMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth("--11-")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-262"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;--00&apos; is an invalid lexical representation for xs:gMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth("--00")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-263"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Testing timezone field in xs:gMonth: the hour component cannot be -15.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth("--08-15:00")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-264"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Testing timezone field in xs:gMonth: the hour component cannot be +15.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth("--08+15:00")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-265"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Testing timezone field in xs:gMonth: the minute component cannot be +60.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth("--08+10:60")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-266"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Testing timezone field in xs:gMonth: the minute component cannot be -60.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth("--08-10:60")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-267"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Testing timezone field in xs:gMonth: the minute field must always be present.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth("--08-10")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-268"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Ensure casting xs:gMonth to xs:string, with timezone &apos;-00:00&apos; is properly handled.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:gMonth("--01-00:00")) eq "--01Z"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-269"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Ensure casting xs:gMonth to xs:string, with timezone &apos;+00:00&apos; is properly handled.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:gMonth("--01+00:00")) eq "--01Z"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-270"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Ensure casting xs:gMonth to xs:string, with timezone &apos;Z&apos; is properly handled.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:gMonth("--01Z")) eq "--01Z"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-271"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;--1999-12&apos; is an invalid lexical representation for xs:gYearMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth("--1999-12")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-272"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;+1999-12&apos; is an invalid lexical representation for xs:gYearMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth("+1999-12")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-273"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;1999-12-&apos; is an invalid lexical representation for xs:gYearMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth("1999-12-")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-274"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;1999--12&apos; is an invalid lexical representation for xs:gYearMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth("1999--12")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-275"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;1999-13&apos; is an invalid lexical representation for xs:gYearMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth("1999-13")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-276"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;1999-00&apos; is an invalid lexical representation for xs:gYearMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth("1999-00")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-277"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;02004-08&apos; is an invalid lexical representation for xs:gYearMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth("02004-08")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-278"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Testing timezone field in xs:gYearMonth: the minute field must always be present.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth("1999-08-10")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-279"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Testing timezone field in xs:gYearMonth: the hour component cannot be -15.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth("1999-01-15:00")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-280"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Testing timezone field in xs:gYearMonth: the hour component cannot be +15.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth("1999-01+15:00")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-281"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Testing timezone field in xs:gYearMonth: the minute component cannot be +60.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth("1999-01+10:60")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-282"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Testing timezone field in xs:gYearMonth: the minute component cannot be -60.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth("1999-01-10:60")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-283"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Ensure casting xs:gYearMonth to xs:string, with timezone &apos;-00:00&apos; is properly handled.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:gYearMonth("1999-01-00:00")) eq "1999-01Z"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-284"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Ensure casting xs:gYearMonth to xs:string, with timezone &apos;+00:00&apos; is properly handled.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:gYearMonth("1999-01+00:00")) eq "1999-01Z"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-285"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Ensure casting xs:gYearMonth to xs:string, with timezone &apos;Z&apos; is properly handled.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:gYearMonth("1999-01Z")) eq "1999-01Z"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-286"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;-01-12&apos; is an invalid lexical representation for xs:gMonthDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("-01-12")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-287"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;+--01-12&apos; is an invalid lexical representation for xs:gMonthDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("+--01-12")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-288"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;01-12-&apos; is an invalid lexical representation for xs:gMonthDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("01-12-")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-289"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;--01--12&apos; is an invalid lexical representation for xs:gMonthDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("--01--12")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-290"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;--01-00&apos; is an invalid lexical representation for xs:gMonthDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("--01-00")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-291"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;--00-01&apos; is an invalid lexical representation for xs:gMonthDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("--00-01")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-292"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;--13-01&apos; is an invalid lexical representation for xs:gMonthDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("--13-01")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-293"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;--111-01&apos; is an invalid lexical representation for xs:gMonthDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("--111-01")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-294"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;--1967-01&apos; is an invalid lexical representation for xs:gMonthDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("--1967-01")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-295"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:gMonthDay("--02-31")</response-string>
    <description> &apos;--02-31&apos; is an invalid lexical representation for xs:gMonthDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("--02-31")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-296"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Testing timezone field in xs:gMonthDay: the minute field must always be present.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("--11-08-10")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-297"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:gMonthDay("--02-30")</response-string>
    <description> The xs:gMonthDay value &apos;--02-30&apos; represents a non-existent date.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("--02-30")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-298"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:gMonthDay("--04-31")</response-string>
    <description> The xs:gMonthDay value &apos;--04-31&apos; represents a non-existent date.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("--04-31")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-299"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:gMonthDay("--11-31")</response-string>
    <description> The xs:gMonthDay value &apos;--11-31&apos; represents a non-existent date.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("--11-31")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-300"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Testing timezone field in xs:gMonthDay: the hour component cannot be -15.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("--01-01-15:00")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-301"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Testing timezone field in xs:gMonthDay: the hour component cannot be +15.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("--01-01+15:00")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-302"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Testing timezone field in xs:gMonthDay: the minute component cannot be +60.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("--01-01+10:60")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-303"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Testing timezone field in xs:gMonthDay: the minute component cannot be -60.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("--01-01-10:60")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-304"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Ensure casting xs:gMonthDay to xs:string, with timezone &apos;-00:00&apos; is properly handled.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:gMonthDay("--01-01-00:00")) eq "--01-01Z"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-305"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Ensure casting xs:gMonthDay to xs:string, with timezone &apos;+00:00&apos; is properly handled.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:gMonthDay("--01-01+00:00")) eq "--01-01Z"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-306"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Ensure casting xs:gMonthDay to xs:string, with timezone &apos;Z&apos; is properly handled.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:gMonthDay("--01-01Z")) eq "--01-01Z"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-307"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Simple xs:gMonthDay test involving --02-29.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("--02-29+00:00") eq xs:gMonthDay("--02-29+00:00")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-308"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;+2004-08-01T12:44:05&apos; is an invalid lexical representation, a preceding &apos;+&apos; sign is not allowed for xs:dateTime.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("+2004-08-01T12:44:05")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-309"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;02004-08-01T12:44:05&apos; is an invalid lexical representation for xs:dateTime; if the year part has more than four digits, leading zeros are prohibited.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("02004-08-01T12:44:05")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-310"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;00004-08-01T12:44:05&apos; is an invalid lexical representation for xs:dateTime; if the year part has more than four digits, leading zeros are prohibited.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("00004-08-01T12:44:05")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-311"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;2004-32-01T12:44:05&apos; is an invalid lexical representation for xs:dateTime; the month part cannot be larger than 32.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("2004-32-01T12:44:05")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-312"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:dateTime("2002-02-30T12:44:05")</response-string>
    <description> &apos;2002-02-30T12:44:05&apos; is a non-existent xs:dateTime date.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("2002-02-30T12:44:05")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-313"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;2002-002-15T12:44:05&apos; is an invalid lexical representation for xs:dateTime.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("2002-002-15T12:44:05")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-314"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;2002-02-150T12:44:05&apos; is an invalid lexical representation for xs:dateTime.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("2002-02-150T12:44:05")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-315"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;2002-02-15T24:00:00.001&apos; is an invalid lexical representation for xs:dateTime; if hour is 24, seconds part must be 00.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("2002-02-15T24:00:00.001")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-316"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;2002-02-15T24:01:00&apos; is an invalid lexical representation for xs:dateTime; if hour is 24, minutes part must be 00.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("2002-02-15T24:01:00")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-317"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;2002-02-15T25:00:00&apos; is an invalid lexical representation for xs:dateTime; hour part can never be larger than 24.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("2002-02-15T25:01:00")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-318"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;2002-02-15T21:60:00&apos; is an invalid lexical representation for xs:dateTime; minute part can never be larger than 59.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("2002-02-15T21:60:00")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-319"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;2002-02-15T21:01:60&apos; is an invalid lexical representation for xs:dateTime; seconds part can never be larger than 59.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("2002-02-15T21:01:60")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-320"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;--2002-02-15T21:01:23&apos; is an invalid lexical representation for xs:dateTime.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("--2002-02-15T21:01:23")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-321"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:dateTime("1999-12-01T23:59:12.432-15:00")</response-string>
    <description> Testing timezone field in xs:dateTime: the hour component cannot be -15.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("1999-12-01T23:59:12.432-15:00")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-322"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:dateTime("1999-12-01T23:59:12.432+15:00")</response-string>
    <description> Testing timezone field in xs:dateTime: the hour component cannot be +15.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("1999-12-01T23:59:12.432+15:00")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-323"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Testing timezone field in xs:dateTime: the minute component cannot be +60.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("1999-12-01T23:59:12.432+10:60")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-324"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Testing timezone field in xs:dateTime: the minute component cannot be -60.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("1999-12-01T23:59:12.432-10:60")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-325"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Testing timezone field in xs:dateTime: the minute field must always be present.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("1999-12-01T23:59:12.999-00")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-326"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Simple test of casting a xs:dateTime with UTC timezone to xs:gYear.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(xs:dateTime("2002-11-23T23:12:23.867-00:00")) eq xs:gYear("2002Z")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-327"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Simple test of casting a xs:dateTime with UTC offset to xs:gYear.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(xs:dateTime("2002-11-23T23:12:23.867-13:37")) eq xs:gYear("2002-13:37")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-328"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Simple test of casting a xs:dateTime with UTC timezone to xs:gYearMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(xs:dateTime("2002-11-23T23:12:23.867-00:00")) eq xs:gYearMonth("2002-11Z")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-329"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Simple test of casting a xs:dateTime with UTC offset to xs:gYearMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(xs:dateTime("2002-11-23T23:12:23.867-13:37")) eq xs:gYearMonth("2002-11-13:37")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-330"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Simple test of casting a xs:dateTime with UTC timezone to xs:gMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(xs:dateTime("2002-11-23T22:12:23.867-00:00")) eq xs:gMonth("--11Z")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-331"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Simple test of casting a xs:dateTime with UTC offset to xs:gMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(xs:dateTime("2002-11-23T22:12:23.867-13:37")) eq xs:gMonth("--11-13:37")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-332"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Simple test of casting a xs:dateTime with UTC timezone to xs:gMonthDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(xs:dateTime("2002-11-23T22:12:23.867-00:00")) eq xs:gMonthDay("--11-23Z")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-333"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Simple test of casting a xs:dateTime with UTC offset to xs:gMonthDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(xs:dateTime("2002-11-23T22:12:23.867-13:37")) eq xs:gMonthDay("--11-23-13:37")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-334"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Simple test of casting a xs:dateTime with UTC timezone to xs:gDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(xs:dateTime("2002-11-23T22:12:23.867-00:00")) eq xs:gDay("---23Z")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-335"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Simple test of casting a xs:dateTime with UTC offset to xs:gDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(xs:dateTime("2002-11-23T22:12:23.867-13:37")) eq xs:gDay("---23-13:37")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-336"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Simple test of casting a xs:dateTime with UTC timezone to xs:date.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(xs:dateTime("2002-11-23T22:12:23.867-00:00")) eq xs:date("2002-11-23Z")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-337"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Simple test of casting a xs:dateTime with UTC offset to xs:date.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(xs:dateTime("2002-11-23T22:12:23.867-13:37")) eq xs:date("2002-11-23-13:37")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-338"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Simple test of casting a xs:dateTime with UTC timezone to xs:time.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(xs:dateTime("2002-11-23T22:12:23.867-00:00")) eq xs:time("22:12:23.867Z")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-339"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Simple test of casting a xs:dateTime with UTC offset to xs:time.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(xs:dateTime("2002-11-23T22:12:23.867-13:37")) eq xs:time("22:12:23.867-13:37")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-340"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Ensure casting xs:dateTime to xs:string, with timezone &apos;-00:00&apos; is properly handled.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dateTime("1999-12-01T23:59:12.999-00:00")) eq "1999-12-01T23:59:12.999Z"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-341"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Ensure casting xs:dateTime to xs:string, with timezone &apos;+00:00&apos; is properly handled.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dateTime("1999-12-01T23:59:12.432+00:00")) eq "1999-12-01T23:59:12.432Z"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-342"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Ensure when casting xs:dateTime to xs:string that an empty milli seconds part is not serialized.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dateTime("2002-02-15T21:01:23.000")) eq "2002-02-15T21:01:23"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-343"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Ensure when casting xs:dateTime to xs:string that milli seconds have no trailing zeros.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dateTime("2002-02-15T21:01:23.100")) eq "2002-02-15T21:01:23.1"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-344"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Ensure when casting xs:dateTime to xs:string that milli seconds are properly padded with zeros.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dateTime("2002-02-15T21:01:23.001")) eq "2002-02-15T21:01:23.001"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-345"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Ensure when casting xs:dateTime to xs:string that milli seconds are properly padded with zeros.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dateTime("2002-02-15T21:01:23.010")) eq "2002-02-15T21:01:23.01"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-346"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Ensure when casting xs:dateTime to xs:string that a milli seconds part of &apos;435&apos; is handled properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dateTime("2002-02-15T21:01:23.435")) eq "2002-02-15T21:01:23.435"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-347"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Ensure when casting xs:dateTime to xs:string that a milli seconds part of &apos;11&apos; is handled properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dateTime("2002-02-15T21:01:23.11")) eq "2002-02-15T21:01:23.11"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-348"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Ensure when casting xs:dateTime to xs:string that a milli seconds part of &apos;110&apos; is handled properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:dateTime("2002-02-15T21:01:23.110")) eq "2002-02-15T21:01:23.11"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-349"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Simple xs:dateTime involving time with no milli seconds.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>string(xs:dateTime("2000-08-01T12:44:05")) eq "2000-08-01T12:44:05"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-350"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> The canonical form of an xs:dateTime containing 24:00:00 is the following day at 00:00:00.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>string(xs:dateTime("2004-03-31T24:00:00")) eq "2004-04-01T00:00:00"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-351"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;24:00:00.001&apos; is an invalid lexical representation for xs:time; if hour is 24, seconds part must be 00.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("24:00:00.001")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-352"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;24:01:00&apos; is an invalid lexical representation for xs:time; if hour is 24, minutes part must be 00.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("24:01:00")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-353"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;25:00:00&apos; is an invalid lexical representation for xs:time; hour part can never be larger than 24.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("25:01:00")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-354"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;21:60:00&apos; is an invalid lexical representation for xs:time; minute part can never be larger than 59.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("21:60:00")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-355"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;21:01:60&apos; is an invalid lexical representation for xs:time; seconds part can never be larger than 59.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("21:01:60")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-356"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;+21:01:50&apos; is an invalid lexical representation for xs:time.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("+21:01:50")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-357"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;-21:01:50&apos; is an invalid lexical representation for xs:time.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("-21:01:50")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-358"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A valid xs:dateTime is an invalid xs:time.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("2002-02-15T08:12:12")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-359"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:time("23:59:12.432-15:00")</response-string>
    <description> Testing timezone field in xs:time: the hour component cannot be -15.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("23:59:12.432-15:00")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-360"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:time("23:59:12.432+15:00")</response-string>
    <description> Testing timezone field in xs:time: the hour component cannot be +15.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("23:59:12.432+15:00")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-361"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Testing timezone field in xs:time: the minute component cannot be +60.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("23:59:12.432+10:60")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-362"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Testing timezone field in xs:time: the minute component cannot be -60.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("23:59:12.432-10:60")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-363"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Testing timezone field in xs:time: the minute field must always be present.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("T23:59:12.999-03")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-364"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Simple xs:time involving time with no milli seconds.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>string(xs:time("12:44:05")) eq "12:44:05"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-365"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Ensure casting xs:time to xs:string, with timezone &apos;-00:00&apos; is properly handled.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:time("23:59:12.999-00:00")) eq "23:59:12.999Z"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-366"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Ensure casting xs:time to xs:string, with timezone &apos;+00:00&apos; is properly handled.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:time("23:59:12.432+00:00")) eq "23:59:12.432Z"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-367"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Ensure when casting xs:time to xs:string that an empty milli seconds part is not serialized.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:time("21:01:23.000")) eq "21:01:23"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-368"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Ensure when casting xs:time to xs:string that milli seconds have no trailing zeros.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:time("21:01:23.100")) eq "21:01:23.1"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-369"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Ensure when casting xs:time to xs:string that milli seconds are properly padded with zeros.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:time("21:01:23.001")) eq "21:01:23.001"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-370"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Ensure when casting xs:time to xs:string that milli seconds are properly padded with zeros.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:time("21:01:23.010")) eq "21:01:23.01"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-371"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Ensure when casting xs:time to xs:string that a milli seconds part of &apos;435&apos; is handled properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:time("21:01:23.435")) eq "21:01:23.435"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-372"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Ensure when casting xs:time to xs:string that a milli seconds part of &apos;11&apos; is handled properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:time("21:01:23.11")) eq "21:01:23.11"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-373"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Ensure when casting xs:time to xs:string that a milli seconds part of &apos;110&apos; is handled properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:time("21:01:23.110")) eq "21:01:23.11"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-374"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> The canonical form of an xs:time containing 24:00:00 is 00:00:00.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>string(xs:time("24:00:00")) eq "00:00:00"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-375"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;+2004-08-01&apos; is an invalid lexical representation, a preceding &apos;+&apos; sign is not allowed for xs:date.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("+2004-08-01")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-376"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;02004-08-01&apos; is an invalid lexical representation for xs:date; if the year part has more than four digits, leading zeros are prohibited.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("02004-08-01")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-377"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;00004-08-01&apos; is an invalid lexical representation for xs:date; if the year part has more than four digits, leading zeros are prohibited.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("00004-08-01")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-378"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;2004-32-01&apos; is an invalid lexical representation for xs:date; the month part cannot be larger than 32.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("2004-32-01")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-379"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:date("2002-02-30")</response-string>
    <description> &apos;2002-02-30&apos; is a non-existent xs:date date.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("2002-02-30")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-380"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;2002-002-15&apos; is an invalid lexical representation for xs:date.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("2002-002-15")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-381"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;2002-02-150&apos; is an invalid lexical representation for xs:date.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("2002-02-150")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-382"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;--2002-02-15&apos; is an invalid lexical representation for xs:date.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("--2002-02-15")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-383"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A valid xs:dateTime is an invalid xs:date.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("2002-02-15T08:12:12")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-384"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:date("1999-12-01-15:00")</response-string>
    <description> Testing timezone field in xs:date: the hour component cannot be -15.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("1999-12-01-15:00")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-385"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:date("1999-12-01+15:00")</response-string>
    <description> Testing timezone field in xs:date: the hour component cannot be +15.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("1999-12-01+15:00")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-386"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Testing timezone field in xs:date: the minute component cannot be +60.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("1999-12-01+10:60")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-387"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Testing timezone field in xs:date: the minute component cannot be -60.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("1999-12-01-10:60")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-388"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Testing datezone field in xs:date: the minute field must always be present.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("1999-12-01-03")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-389"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Simple test of casting a xs:date with UTC timezone to xs:gYear.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(xs:date("2002-11-23Z")) eq xs:gYear("2002Z")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-390"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Simple test of casting a xs:date with UTC offset to xs:gYear.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(xs:date("2002-11-23-13:37")) eq xs:gYear("2002-13:37")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-391"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Simple test of casting a xs:date with UTC timezone to xs:gYearMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(xs:date("2002-11-23Z")) eq xs:gYearMonth("2002-11Z")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-392"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Simple test of casting a xs:date with UTC offset to xs:gYearMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(xs:date("2002-11-23-13:37")) eq xs:gYearMonth("2002-11-13:37")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-393"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Simple test of casting a xs:date with UTC timezone to xs:gMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(xs:date("2002-11-23-00:00")) eq xs:gMonth("--11Z")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-394"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Simple test of casting a xs:date with UTC offset to xs:gMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(xs:date("2002-11-23-13:37")) eq xs:gMonth("--11-13:37")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-395"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Simple test of casting a xs:date with UTC timezone to xs:gMonthDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(xs:date("2002-11-23-00:00")) eq xs:gMonthDay("--11-23Z")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-396"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Simple test of casting a xs:date with UTC offset to xs:gMonthDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(xs:date("2002-11-23-13:37")) eq xs:gMonthDay("--11-23-13:37")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-397"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Simple test of casting a xs:date with UTC timezone to xs:gDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(xs:date("2002-11-23-00:00")) eq xs:gDay("---23Z")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-398"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Simple test of casting a xs:date with UTC offset to xs:gDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(xs:date("2002-11-23-13:37")) eq xs:gDay("---23-13:37")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-399"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Simple test of casting a xs:date with UTC timezone to xs:time.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(xs:date("2002-11-23-00:00")) eq xs:dateTime("2002-11-23T00:00:00.000Z")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-400"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Simple test of casting a xs:date with UTC offset to xs:dateTime.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(xs:date("2002-11-23-13:37")) eq xs:dateTime("2002-11-23T00:00:00.000-13:37")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-401"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Ensure casting xs:date to xs:string, with timezone &apos;-00:00&apos; is properly handled.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:date("1999-12-01-00:00")) eq "1999-12-01Z"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-402"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Ensure casting xs:date to xs:string, with timezone &apos;+00:00&apos; is properly handled.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:date("1999-12-01+00:00")) eq "1999-12-01Z"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-403"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Ensure when casting xs:date to xs:string that an empty milli seconds part is not serialized.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:date("2002-02-15")) eq "2002-02-15"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-404"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Ensure when casting xs:date to xs:string that milli seconds have no trailing zeros.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:date("2002-02-15")) eq "2002-02-15"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-405"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Ensure when casting xs:date to xs:string that milli seconds are properly padded with zeros.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:date("2002-02-15")) eq "2002-02-15"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-406"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Ensure when casting xs:date to xs:string that milli seconds are properly padded with zeros.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:date("2002-02-15")) eq "2002-02-15"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-407"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Ensure when casting xs:date to xs:string that a milli seconds part of &apos;435&apos; is handled properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:date("2002-02-15")) eq "2002-02-15"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-408"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Ensure when casting xs:date to xs:string that a milli seconds part of &apos;11&apos; is handled properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:date("2002-02-15")) eq "2002-02-15"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-409"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Ensure when casting xs:date to xs:string that a milli seconds part of &apos;110&apos; is handled properly.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:date("2002-02-15")) eq "2002-02-15"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-411"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:untypedAtomic constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-412"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:untypedAtomic constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic( "an arbitrary string(untypedAtomic source)" , "an arbitrary string(untypedAtomic source)" )</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-413"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Verify with &apos;instance of&apos; that the xs:untypedAtomic constructor function produces values of the correct type. 
      The subsequence() function makes it more difficult for optimizers to take short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence(("dummy", 1.1, xs:untypedAtomic("an arbitrary string(untypedAtomic source)")), 3, 1) instance of xs:untypedAtomic</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-414"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> A simple test exercising the whitespace facet for type xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(" an arbitrary string(untypedAtomic source) ") eq xs:untypedAtomic(" an arbitrary string(untypedAtomic source) ")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-415"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> An empty string is a valid lexical representation of xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic("") eq xs:untypedAtomic("")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-416"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Cast a simple xs:untypedAtomic value to "an arbitrary string(untypedAtomic source)" .</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:untypedAtomic( "an arbitrary string(untypedAtomic source)" )) eq xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-417"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Applying fn:boolean() to a value of type xs:untypedAtomic that has the lexical value &apos; "an arbitrary string(untypedAtomic source)" &apos; should result in the boolean value true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:untypedAtomic("an arbitrary string(untypedAtomic source)"))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-418"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:untypedAtomic to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic("an arbitrary string(untypedAtomic source)") cast as xs:untypedAtomic eq xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-419"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:untypedAtomic as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic("an arbitrary string(untypedAtomic source)") castable as xs:untypedAtomic</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-420"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:untypedAtomic to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic("an arbitrary string(untypedAtomic source)") cast as xs:string ne xs:string("an arbitrary string")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-421"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:untypedAtomic as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic("an arbitrary string(untypedAtomic source)") castable as xs:string</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-422"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:QName("undefined", "#text")</response-string>
    <description> Casting from xs:untypedAtomic to xs:QName isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="Michael Kay" change="different error code for XP30/XQ30 (bug 14856)" on="2011-11-17"/>
    <dependency type="spec" value="XQ10 XP20"/>
    <test>xs:untypedAtomic("an arbitrary string(untypedAtomic source)") cast as xs:QName</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case covers="cast-to-qname" name="K-SeqExprCast-422a"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:QName("undefined", "#text")</response-string>
    <description> Casting from xs:untypedAtomic to xs:QName isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="Michael Kay" change="different error code for XP30/XQ30 (bug 14856)" on="2011-11-17"/>
    <dependency type="spec" value="XQ30+ XP30+"/>
    <test>xs:untypedAtomic("an arbitrary string(untypedAtomic source)") cast as xs:QName</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-423"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:untypedAtomic as source type and xs:QName as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:untypedAtomic("an arbitrary string(untypedAtomic source)") castable as xs:QName)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-424"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:untypedAtomic as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:untypedAtomic("an arbitrary string(untypedAtomic source)") castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0080"))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-425"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:string constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-426"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:string constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string( "an arbitrary string" , "an arbitrary string" )</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-427"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Verify with &apos;instance of&apos; that the xs:string constructor function produces values of the correct type. 
      The subsequence() function makes it more difficult for optimizers to take short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence(("dummy", 1.1, xs:string("an arbitrary string")), 3, 1) instance of xs:string</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-428"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A simple test exercising the whitespace facet for type xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(" an arbitrary string ") eq xs:string(" an arbitrary string ")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-429"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> An empty string is a valid lexical representation of xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string("") eq xs:string("")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-430"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Cast a simple xs:untypedAtomic value to "an arbitrary string" .</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:untypedAtomic( "an arbitrary string" )) eq xs:string("an arbitrary string")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-431"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Applying fn:boolean() to a value of type xs:string that has the lexical value &apos; "an arbitrary string" &apos; should result in the boolean value true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:string("an arbitrary string"))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-432"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:string to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string("an arbitrary string") cast as xs:untypedAtomic ne xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-433"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:string as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string("an arbitrary string") castable as xs:untypedAtomic</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-434"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:string to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string("an arbitrary string") cast as xs:string eq xs:string("an arbitrary string")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-435"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:string as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string("an arbitrary string") castable as xs:string</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-436"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:string as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:string("an arbitrary string") castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0080"))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-437"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:float constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-438"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:float constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float( "3.4e5" , "3.4e5" )</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-439"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Verify with &apos;instance of&apos; that the xs:float constructor function produces values of the correct type. 
      The subsequence() function makes it more difficult for optimizers to take short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence(("dummy", 1.1, xs:float("3.4e5")), 3, 1) instance of xs:float</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-440"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A simple test exercising the whitespace facet for type xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(" 3.4e5 ") eq xs:float(" 3.4e5 ")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-441"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> An empty string is not a valid lexical representation of xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float("")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-442"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Cast a simple xs:untypedAtomic value to "3.4e5" .</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(xs:untypedAtomic( "3.4e5" )) eq xs:float("3.4e5")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-443"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Applying fn:boolean() to a value of type xs:float that has the lexical value &apos; "3.4e5" &apos; should result in the boolean value true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:float("3.4e5"))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-444"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:float to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float("3.4e5") cast as xs:untypedAtomic ne xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-445"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:float as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float("3.4e5") castable as xs:untypedAtomic</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-446"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:float to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float("3.4e5") cast as xs:string ne xs:string("an arbitrary string")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-447"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:float as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float("3.4e5") castable as xs:string</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-448"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:float to xs:float is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float("3.4e5") cast as xs:float eq xs:float("3.4e5")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-449"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:float as source type and xs:float as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float("3.4e5") castable as xs:float</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-450"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:float to xs:double is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float("3.4e5") cast as xs:double ne xs:double("3.3e3")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-451"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:float as source type and xs:double as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float("3.4e5") castable as xs:double</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-452"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:float to xs:duration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float("3.4e5") cast as xs:duration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-453"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:float as source type and xs:duration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:float("3.4e5") castable as xs:duration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-454"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:float to xs:yearMonthDuration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float("3.4e5") cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-455"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:float as source type and xs:yearMonthDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:float("3.4e5") castable as xs:yearMonthDuration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-456"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:float to xs:dayTimeDuration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float("3.4e5") cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-457"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:float as source type and xs:dayTimeDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:float("3.4e5") castable as xs:dayTimeDuration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-458"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:float to xs:dateTime isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float("3.4e5") cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-459"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:float as source type and xs:dateTime as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:float("3.4e5") castable as xs:dateTime)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-460"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:float to xs:time isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float("3.4e5") cast as xs:time</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-461"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:float as source type and xs:time as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:float("3.4e5") castable as xs:time)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-462"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:float to xs:date isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float("3.4e5") cast as xs:date</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-463"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:float as source type and xs:date as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:float("3.4e5") castable as xs:date)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-464"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:float to xs:gYearMonth isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float("3.4e5") cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-465"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:float as source type and xs:gYearMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:float("3.4e5") castable as xs:gYearMonth)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-466"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:gYear("340000")</response-string>
    <description> Casting from xs:float to xs:gYear isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float("3.4e5") cast as xs:gYear</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-467"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:float as source type and xs:gYear as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:float("3.4e5") castable as xs:gYear)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-468"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:float to xs:gMonthDay isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float("3.4e5") cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-469"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:float as source type and xs:gMonthDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:float("3.4e5") castable as xs:gMonthDay)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-470"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:float to xs:gDay isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float("3.4e5") cast as xs:gDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-471"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:float as source type and xs:gDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:float("3.4e5") castable as xs:gDay)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-472"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:float to xs:gMonth isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float("3.4e5") cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-473"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:float as source type and xs:gMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:float("3.4e5") castable as xs:gMonth)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-474"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:float to xs:boolean is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float("3.4e5") cast as xs:boolean eq xs:boolean("true")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-475"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:float as source type and xs:boolean as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float("3.4e5") castable as xs:boolean</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-476"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:float to xs:base64Binary isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float("3.4e5") cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-477"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:float as source type and xs:base64Binary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:float("3.4e5") castable as xs:base64Binary)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-478"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:hexBinary("340000")</response-string>
    <description> Casting from xs:float to xs:hexBinary isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float("3.4e5") cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-479"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:float as source type and xs:hexBinary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:float("3.4e5") castable as xs:hexBinary)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-480"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("340000")</response-string>
    <description> Casting from xs:float to xs:anyURI isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float("3.4e5") cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-481"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:float as source type and xs:anyURI as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:float("3.4e5") castable as xs:anyURI)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-482"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:QName("undefined", "#text")</response-string>
    <description> Casting from xs:float to xs:QName isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float("3.4e5") cast as xs:QName</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-483"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:float as source type and xs:QName as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:float("3.4e5") castable as xs:QName)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-484"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:float as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:float("3.4e5") castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0080"))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-485"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:double constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-486"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:double constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double( "3.3e3" , "3.3e3" )</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-487"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Verify with &apos;instance of&apos; that the xs:double constructor function produces values of the correct type. 
      The subsequence() function makes it more difficult for optimizers to take short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence(("dummy", 1.1, xs:double("3.3e3")), 3, 1) instance of xs:double</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-488"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A simple test exercising the whitespace facet for type xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(" 3.3e3 ") eq xs:double(" 3.3e3 ")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-489"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> An empty string is not a valid lexical representation of xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double("")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-490"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Cast a simple xs:untypedAtomic value to "3.3e3" .</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(xs:untypedAtomic( "3.3e3" )) eq xs:double("3.3e3")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-491"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Applying fn:boolean() to a value of type xs:double that has the lexical value &apos; "3.3e3" &apos; should result in the boolean value true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:double("3.3e3"))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-492"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:double to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double("3.3e3") cast as xs:untypedAtomic ne xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-493"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:double as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double("3.3e3") castable as xs:untypedAtomic</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-494"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:double to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double("3.3e3") cast as xs:string ne xs:string("an arbitrary string")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-495"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:double as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double("3.3e3") castable as xs:string</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-496"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:double to xs:float is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double("3.3e3") cast as xs:float ne xs:float("3.4e5")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-497"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:double as source type and xs:float as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double("3.3e3") castable as xs:float</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-498"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:double to xs:double is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double("3.3e3") cast as xs:double eq xs:double("3.3e3")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-499"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:double as source type and xs:double as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double("3.3e3") castable as xs:double</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-500"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:double to xs:duration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double("3.3e3") cast as xs:duration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-501"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:double as source type and xs:duration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:double("3.3e3") castable as xs:duration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-502"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:double to xs:yearMonthDuration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double("3.3e3") cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-503"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:double as source type and xs:yearMonthDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:double("3.3e3") castable as xs:yearMonthDuration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-504"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:double to xs:dayTimeDuration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double("3.3e3") cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-505"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:double as source type and xs:dayTimeDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:double("3.3e3") castable as xs:dayTimeDuration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-506"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:double to xs:dateTime isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double("3.3e3") cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-507"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:double as source type and xs:dateTime as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:double("3.3e3") castable as xs:dateTime)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-508"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:double to xs:time isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double("3.3e3") cast as xs:time</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-509"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:double as source type and xs:time as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:double("3.3e3") castable as xs:time)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-510"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:double to xs:date isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double("3.3e3") cast as xs:date</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-511"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:double as source type and xs:date as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:double("3.3e3") castable as xs:date)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-512"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:double to xs:gYearMonth isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double("3.3e3") cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-513"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:double as source type and xs:gYearMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:double("3.3e3") castable as xs:gYearMonth)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-514"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:gYear("3300")</response-string>
    <description> Casting from xs:double to xs:gYear isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double("3.3e3") cast as xs:gYear</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-515"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:double as source type and xs:gYear as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:double("3.3e3") castable as xs:gYear)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-516"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:double to xs:gMonthDay isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double("3.3e3") cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-517"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:double as source type and xs:gMonthDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:double("3.3e3") castable as xs:gMonthDay)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-518"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:double to xs:gDay isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double("3.3e3") cast as xs:gDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-519"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:double as source type and xs:gDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:double("3.3e3") castable as xs:gDay)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-520"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:double to xs:gMonth isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double("3.3e3") cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-521"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:double as source type and xs:gMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:double("3.3e3") castable as xs:gMonth)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-522"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:double to xs:boolean is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double("3.3e3") cast as xs:boolean eq xs:boolean("true")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-523"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:double as source type and xs:boolean as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double("3.3e3") castable as xs:boolean</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-524"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:base64Binary("3300")</response-string>
    <description> Casting from xs:double to xs:base64Binary isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double("3.3e3") cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-525"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:double as source type and xs:base64Binary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:double("3.3e3") castable as xs:base64Binary)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-526"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:hexBinary("3300")</response-string>
    <description> Casting from xs:double to xs:hexBinary isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double("3.3e3") cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-527"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:double as source type and xs:hexBinary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:double("3.3e3") castable as xs:hexBinary)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-528"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("3300")</response-string>
    <description> Casting from xs:double to xs:anyURI isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double("3.3e3") cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-529"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:double as source type and xs:anyURI as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:double("3.3e3") castable as xs:anyURI)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-530"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:QName("undefined", "#text")</response-string>
    <description> Casting from xs:double to xs:QName isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double("3.3e3") cast as xs:QName</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-531"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:double as source type and xs:QName as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:double("3.3e3") castable as xs:QName)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-532"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:double as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:double("3.3e3") castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0080"))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-533"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:decimal constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-534"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:decimal constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal( "10.01" , "10.01" )</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-535"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Verify with &apos;instance of&apos; that the xs:decimal constructor function produces values of the correct type. 
      The subsequence() function makes it more difficult for optimizers to take short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence(("dummy", 1.1, xs:decimal("10.01")), 3, 1) instance of xs:decimal</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-536"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A simple test exercising the whitespace facet for type xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(" 10.01 ") eq xs:decimal(" 10.01 ")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-537"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> An empty string is not a valid lexical representation of xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal("")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-538"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Cast a simple xs:untypedAtomic value to "10.01" .</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(xs:untypedAtomic( "10.01" )) eq xs:decimal("10.01")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-539"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Applying fn:boolean() to a value of type xs:decimal that has the lexical value &apos; "10.01" &apos; should result in the boolean value true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:decimal("10.01"))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-540"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:decimal to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal("10.01") cast as xs:untypedAtomic ne xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-541"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:decimal as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal("10.01") castable as xs:untypedAtomic</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-542"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:decimal to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal("10.01") cast as xs:string ne xs:string("an arbitrary string")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-543"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:decimal as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal("10.01") castable as xs:string</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-544"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:decimal to xs:float is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal("10.01") cast as xs:float ne xs:float("3.4e5")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-545"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:decimal as source type and xs:float as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal("10.01") castable as xs:float</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-546"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:decimal to xs:double is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal("10.01") cast as xs:double ne xs:double("3.3e3")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-547"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:decimal as source type and xs:double as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal("10.01") castable as xs:double</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-548"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:decimal to xs:decimal is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal("10.01") cast as xs:decimal eq xs:decimal("10.01")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-549"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:decimal as source type and xs:decimal as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal("10.01") castable as xs:decimal</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-550"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Casting from xs:decimal to xs:integer is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal("10.01") cast as xs:integer ne xs:integer("6789")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-551"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:decimal as source type and xs:integer as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal("10.01") castable as xs:integer</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-552"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:decimal to xs:duration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal("10.01") cast as xs:duration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-553"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:decimal as source type and xs:duration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:decimal("10.01") castable as xs:duration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-554"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:decimal to xs:yearMonthDuration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal("10.01") cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-555"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:decimal as source type and xs:yearMonthDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:decimal("10.01") castable as xs:yearMonthDuration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-556"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:decimal to xs:dayTimeDuration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal("10.01") cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-557"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:decimal as source type and xs:dayTimeDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:decimal("10.01") castable as xs:dayTimeDuration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-558"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:decimal to xs:dateTime isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal("10.01") cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-559"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:decimal as source type and xs:dateTime as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:decimal("10.01") castable as xs:dateTime)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-560"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:decimal to xs:time isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal("10.01") cast as xs:time</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-561"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:decimal as source type and xs:time as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:decimal("10.01") castable as xs:time)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-562"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:decimal to xs:date isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal("10.01") cast as xs:date</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-563"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:decimal as source type and xs:date as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:decimal("10.01") castable as xs:date)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-564"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:decimal to xs:gYearMonth isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal("10.01") cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-565"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:decimal as source type and xs:gYearMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:decimal("10.01") castable as xs:gYearMonth)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-566"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:decimal to xs:gYear isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal("10.01") cast as xs:gYear</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-567"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:decimal as source type and xs:gYear as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:decimal("10.01") castable as xs:gYear)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-568"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:decimal to xs:gMonthDay isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal("10.01") cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-569"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:decimal as source type and xs:gMonthDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:decimal("10.01") castable as xs:gMonthDay)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-570"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:decimal to xs:gDay isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal("10.01") cast as xs:gDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-571"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:decimal as source type and xs:gDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:decimal("10.01") castable as xs:gDay)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-572"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:decimal to xs:gMonth isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal("10.01") cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-573"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:decimal as source type and xs:gMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:decimal("10.01") castable as xs:gMonth)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-574"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:decimal to xs:boolean is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal("10.01") cast as xs:boolean eq xs:boolean("true")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-575"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:decimal as source type and xs:boolean as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal("10.01") castable as xs:boolean</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-576"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:decimal to xs:base64Binary isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal("10.01") cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-577"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:decimal as source type and xs:base64Binary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:decimal("10.01") castable as xs:base64Binary)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-578"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:decimal to xs:hexBinary isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal("10.01") cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-579"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:decimal as source type and xs:hexBinary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:decimal("10.01") castable as xs:hexBinary)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-580"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("10.01")</response-string>
    <description> Casting from xs:decimal to xs:anyURI isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal("10.01") cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-581"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:decimal as source type and xs:anyURI as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:decimal("10.01") castable as xs:anyURI)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-582"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:QName("undefined", "#text")</response-string>
    <description> Casting from xs:decimal to xs:QName isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal("10.01") cast as xs:QName</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-583"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:decimal as source type and xs:QName as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:decimal("10.01") castable as xs:QName)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-584"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:decimal as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:decimal("10.01") castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0080"))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-585"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:integer constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-586"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:integer constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer( "6789" , "6789" )</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-587"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Verify with &apos;instance of&apos; that the xs:integer constructor function produces values of the correct type. 
      The subsequence() function makes it more difficult for optimizers to take short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence(("dummy", 1.1, xs:integer("6789")), 3, 1) instance of xs:integer</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-588"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A simple test exercising the whitespace facet for type xs:integer.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(" 6789 ") eq xs:integer(" 6789 ")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-589"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> An empty string is not a valid lexical representation of xs:integer.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer("")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-590"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Cast a simple xs:untypedAtomic value to "6789" .</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(xs:untypedAtomic( "6789" )) eq xs:integer("6789")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-591"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Applying fn:boolean() to a value of type xs:integer that has the lexical value &apos; "6789" &apos; should result in the boolean value true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:integer("6789"))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-592"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:integer to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer("6789") cast as xs:untypedAtomic ne xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-593"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:integer as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer("6789") castable as xs:untypedAtomic</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-594"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:integer to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer("6789") cast as xs:string ne xs:string("an arbitrary string")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-595"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:integer as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer("6789") castable as xs:string</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-596"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:integer to xs:float is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer("6789") cast as xs:float ne xs:float("3.4e5")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-597"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:integer as source type and xs:float as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer("6789") castable as xs:float</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-598"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:integer to xs:double is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer("6789") cast as xs:double ne xs:double("3.3e3")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-599"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:integer as source type and xs:double as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer("6789") castable as xs:double</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-600"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:integer to xs:decimal is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer("6789") cast as xs:decimal ne xs:decimal("10.01")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-601"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:integer as source type and xs:decimal as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer("6789") castable as xs:decimal</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-602"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:integer to xs:integer is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer("6789") cast as xs:integer eq xs:integer("6789")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-603"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:integer as source type and xs:integer as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer("6789") castable as xs:integer</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-604"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:integer to xs:duration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer("6789") cast as xs:duration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-605"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:integer as source type and xs:duration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:integer("6789") castable as xs:duration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-606"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:integer to xs:yearMonthDuration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer("6789") cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-607"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:integer as source type and xs:yearMonthDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:integer("6789") castable as xs:yearMonthDuration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-608"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:integer to xs:dayTimeDuration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer("6789") cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-609"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:integer as source type and xs:dayTimeDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:integer("6789") castable as xs:dayTimeDuration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-610"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:integer to xs:dateTime isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer("6789") cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-611"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:integer as source type and xs:dateTime as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:integer("6789") castable as xs:dateTime)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-612"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:integer to xs:time isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer("6789") cast as xs:time</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-613"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:integer as source type and xs:time as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:integer("6789") castable as xs:time)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-614"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:integer to xs:date isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer("6789") cast as xs:date</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-615"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:integer as source type and xs:date as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:integer("6789") castable as xs:date)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-616"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:integer to xs:gYearMonth isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer("6789") cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-617"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:integer as source type and xs:gYearMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:integer("6789") castable as xs:gYearMonth)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-618"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:gYear("6789")</response-string>
    <description> Casting from xs:integer to xs:gYear isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer("6789") cast as xs:gYear</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-619"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:integer as source type and xs:gYear as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:integer("6789") castable as xs:gYear)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-620"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:integer to xs:gMonthDay isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer("6789") cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-621"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:integer as source type and xs:gMonthDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:integer("6789") castable as xs:gMonthDay)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-622"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:integer to xs:gDay isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer("6789") cast as xs:gDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-623"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:integer as source type and xs:gDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:integer("6789") castable as xs:gDay)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-624"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:integer to xs:gMonth isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer("6789") cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-625"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:integer as source type and xs:gMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:integer("6789") castable as xs:gMonth)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-626"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:integer to xs:boolean is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer("6789") cast as xs:boolean eq xs:boolean("true")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-627"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:integer as source type and xs:boolean as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer("6789") castable as xs:boolean</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-628"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:base64Binary("6789")</response-string>
    <description> Casting from xs:integer to xs:base64Binary isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer("6789") cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-629"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:integer as source type and xs:base64Binary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:integer("6789") castable as xs:base64Binary)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-630"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:hexBinary("6789")</response-string>
    <description> Casting from xs:integer to xs:hexBinary isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer("6789") cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-631"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:integer as source type and xs:hexBinary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:integer("6789") castable as xs:hexBinary)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-632"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("6789")</response-string>
    <description> Casting from xs:integer to xs:anyURI isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer("6789") cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-633"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:integer as source type and xs:anyURI as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:integer("6789") castable as xs:anyURI)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-634"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:QName("undefined", "#text")</response-string>
    <description> Casting from xs:integer to xs:QName isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer("6789") cast as xs:QName</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-635"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:integer as source type and xs:QName as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:integer("6789") castable as xs:QName)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-636"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:integer as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:integer("6789") castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0080"))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-637"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:duration constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-638"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:duration constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration( "P1Y2M3DT10H30M" , "P1Y2M3DT10H30M" )</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-639"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Verify with &apos;instance of&apos; that the xs:duration constructor function produces values of the correct type. 
      The subsequence() function makes it more difficult for optimizers to take short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence(("dummy", 1.1, xs:duration("P1Y2M3DT10H30M")), 3, 1) instance of xs:duration</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-640"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A simple test exercising the whitespace facet for type xs:duration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration(" P1Y2M3DT10H30M ") eq xs:duration(" P1Y2M3DT10H30M ")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-641"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> An empty string is not a valid lexical representation of xs:duration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration("")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-642"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Cast a simple xs:untypedAtomic value to "P1Y2M3DT10H30M" .</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration(xs:untypedAtomic( "P1Y2M3DT10H30M" )) eq xs:duration("P1Y2M3DT10H30M")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-643"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0006"))</response-string>
    <description> It is not possible to extract an Effective Boolean Value from the type xs:duration, with the boolean() function.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:duration("P1Y2M3DT10H30M"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0006"))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-644"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:duration to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration("P1Y2M3DT10H30M") cast as xs:untypedAtomic ne xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-645"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:duration as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration("P1Y2M3DT10H30M") castable as xs:untypedAtomic</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-646"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:duration to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration("P1Y2M3DT10H30M") cast as xs:string ne xs:string("an arbitrary string")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-647"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:duration as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration("P1Y2M3DT10H30M") castable as xs:string</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-648"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:duration to xs:float isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration("P1Y2M3DT10H30M") cast as xs:float</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-649"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:duration as source type and xs:float as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:duration("P1Y2M3DT10H30M") castable as xs:float)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-650"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:duration to xs:double isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration("P1Y2M3DT10H30M") cast as xs:double</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-651"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:duration as source type and xs:double as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:duration("P1Y2M3DT10H30M") castable as xs:double)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-652"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:duration to xs:decimal isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration("P1Y2M3DT10H30M") cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-653"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:duration as source type and xs:decimal as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:duration("P1Y2M3DT10H30M") castable as xs:decimal)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-654"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:duration to xs:integer isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration("P1Y2M3DT10H30M") cast as xs:integer</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-655"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:duration as source type and xs:integer as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:duration("P1Y2M3DT10H30M") castable as xs:integer)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-656"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Casting from xs:duration to xs:duration is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration("P1Y2M3DT10H30M") cast as xs:duration eq xs:duration("P1Y2M3DT10H30M")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-657"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:duration as source type and xs:duration as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration("P1Y2M3DT10H30M") castable as xs:duration</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-658"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Casting from xs:duration to xs:yearMonthDuration is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration("P1Y2M3DT10H30M") cast as xs:yearMonthDuration ne xs:yearMonthDuration("P1Y12M")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-659"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:duration as source type and xs:yearMonthDuration as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration("P1Y2M3DT10H30M") castable as xs:yearMonthDuration</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-660"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Casting from xs:duration to xs:dayTimeDuration is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration("P1Y2M3DT10H30M") cast as xs:dayTimeDuration ne xs:dayTimeDuration("P3DT2H")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-661"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:duration as source type and xs:dayTimeDuration as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration("P1Y2M3DT10H30M") castable as xs:dayTimeDuration</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-662"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:duration to xs:dateTime isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration("P1Y2M3DT10H30M") cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-663"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:duration as source type and xs:dateTime as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:duration("P1Y2M3DT10H30M") castable as xs:dateTime)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-664"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:duration to xs:time isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration("P1Y2M3DT10H30M") cast as xs:time</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-665"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:duration as source type and xs:time as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:duration("P1Y2M3DT10H30M") castable as xs:time)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-666"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:duration to xs:date isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration("P1Y2M3DT10H30M") cast as xs:date</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-667"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:duration as source type and xs:date as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:duration("P1Y2M3DT10H30M") castable as xs:date)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-668"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:duration to xs:gYearMonth isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration("P1Y2M3DT10H30M") cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-669"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:duration as source type and xs:gYearMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:duration("P1Y2M3DT10H30M") castable as xs:gYearMonth)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-670"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:duration to xs:gYear isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration("P1Y2M3DT10H30M") cast as xs:gYear</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-671"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:duration as source type and xs:gYear as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:duration("P1Y2M3DT10H30M") castable as xs:gYear)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-672"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:duration to xs:gMonthDay isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration("P1Y2M3DT10H30M") cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-673"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:duration as source type and xs:gMonthDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:duration("P1Y2M3DT10H30M") castable as xs:gMonthDay)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-674"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:duration to xs:gDay isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration("P1Y2M3DT10H30M") cast as xs:gDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-675"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:duration as source type and xs:gDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:duration("P1Y2M3DT10H30M") castable as xs:gDay)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-676"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:duration to xs:gMonth isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration("P1Y2M3DT10H30M") cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-677"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:duration as source type and xs:gMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:duration("P1Y2M3DT10H30M") castable as xs:gMonth)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-678"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:duration to xs:boolean isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration("P1Y2M3DT10H30M") cast as xs:boolean</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-679"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:duration as source type and xs:boolean as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:duration("P1Y2M3DT10H30M") castable as xs:boolean)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-680"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:duration to xs:base64Binary isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration("P1Y2M3DT10H30M") cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-681"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:duration as source type and xs:base64Binary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:duration("P1Y2M3DT10H30M") castable as xs:base64Binary)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-682"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:duration to xs:hexBinary isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration("P1Y2M3DT10H30M") cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-683"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:duration as source type and xs:hexBinary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:duration("P1Y2M3DT10H30M") castable as xs:hexBinary)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-684"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("P1Y2M3DT10H30M")</response-string>
    <description> Casting from xs:duration to xs:anyURI isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration("P1Y2M3DT10H30M") cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-685"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:duration as source type and xs:anyURI as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:duration("P1Y2M3DT10H30M") castable as xs:anyURI)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-686"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:QName("undefined", "#text")</response-string>
    <description> Casting from xs:duration to xs:QName isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:duration("P1Y2M3DT10H30M") cast as xs:QName</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-687"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:duration as source type and xs:QName as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:duration("P1Y2M3DT10H30M") castable as xs:QName)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-688"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:duration as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:duration("P1Y2M3DT10H30M") castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0080"))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-689"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:yearMonthDuration constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-690"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:yearMonthDuration constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration( "P1Y12M" , "P1Y12M" )</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-691"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Verify with &apos;instance of&apos; that the xs:yearMonthDuration constructor function produces values of the correct type. 
      The subsequence() function makes it more difficult for optimizers to take short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence(("dummy", 1.1, xs:yearMonthDuration("P1Y12M")), 3, 1) instance of xs:yearMonthDuration</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-692"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A simple test exercising the whitespace facet for type xs:yearMonthDuration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration(" P1Y12M ") eq xs:yearMonthDuration(" P1Y12M ")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-693"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> An empty string is not a valid lexical representation of xs:yearMonthDuration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration("")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-694"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Cast a simple xs:untypedAtomic value to "P1Y12M" .</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration(xs:untypedAtomic( "P1Y12M" )) eq xs:yearMonthDuration("P1Y12M")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-695"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0006"))</response-string>
    <description> It is not possible to extract an Effective Boolean Value from the type xs:yearMonthDuration, with the boolean() function.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:yearMonthDuration("P1Y12M"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0006"))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-696"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:yearMonthDuration to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration("P1Y12M") cast as xs:untypedAtomic ne xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-697"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:yearMonthDuration as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration("P1Y12M") castable as xs:untypedAtomic</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-698"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:yearMonthDuration to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration("P1Y12M") cast as xs:string ne xs:string("an arbitrary string")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-699"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:yearMonthDuration as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration("P1Y12M") castable as xs:string</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-700"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:yearMonthDuration to xs:float isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration("P1Y12M") cast as xs:float</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-701"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:yearMonthDuration as source type and xs:float as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:yearMonthDuration("P1Y12M") castable as xs:float)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-702"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:yearMonthDuration to xs:double isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration("P1Y12M") cast as xs:double</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-703"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:yearMonthDuration as source type and xs:double as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:yearMonthDuration("P1Y12M") castable as xs:double)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-704"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:yearMonthDuration to xs:decimal isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration("P1Y12M") cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-705"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:yearMonthDuration as source type and xs:decimal as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:yearMonthDuration("P1Y12M") castable as xs:decimal)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-706"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:yearMonthDuration to xs:integer isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration("P1Y12M") cast as xs:integer</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-707"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:yearMonthDuration as source type and xs:integer as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:yearMonthDuration("P1Y12M") castable as xs:integer)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-708"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Casting from xs:yearMonthDuration to xs:duration is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration("P1Y12M") cast as xs:duration ne xs:duration("P1Y2M3DT10H30M")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-709"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:yearMonthDuration as source type and xs:duration as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration("P1Y12M") castable as xs:duration</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-710"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:yearMonthDuration to xs:yearMonthDuration is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration("P1Y12M") cast as xs:yearMonthDuration eq xs:yearMonthDuration("P1Y12M")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-711"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:yearMonthDuration as source type and xs:yearMonthDuration as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration("P1Y12M") castable as xs:yearMonthDuration</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-712"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Casting from xs:yearMonthDuration to xs:dayTimeDuration is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration("P1Y12M") cast as xs:dayTimeDuration ne xs:dayTimeDuration("P3DT2H")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-713"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:yearMonthDuration as source type and xs:dayTimeDuration as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration("P1Y12M") castable as xs:dayTimeDuration</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-714"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:yearMonthDuration to xs:dateTime isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration("P1Y12M") cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-715"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:yearMonthDuration as source type and xs:dateTime as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:yearMonthDuration("P1Y12M") castable as xs:dateTime)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-716"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:yearMonthDuration to xs:time isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration("P1Y12M") cast as xs:time</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-717"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:yearMonthDuration as source type and xs:time as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:yearMonthDuration("P1Y12M") castable as xs:time)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-718"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:yearMonthDuration to xs:date isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration("P1Y12M") cast as xs:date</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-719"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:yearMonthDuration as source type and xs:date as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:yearMonthDuration("P1Y12M") castable as xs:date)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-720"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:yearMonthDuration to xs:gYearMonth isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration("P1Y12M") cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-721"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:yearMonthDuration as source type and xs:gYearMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:yearMonthDuration("P1Y12M") castable as xs:gYearMonth)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-722"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:yearMonthDuration to xs:gYear isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration("P1Y12M") cast as xs:gYear</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-723"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:yearMonthDuration as source type and xs:gYear as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:yearMonthDuration("P1Y12M") castable as xs:gYear)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-724"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:yearMonthDuration to xs:gMonthDay isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration("P1Y12M") cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-725"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:yearMonthDuration as source type and xs:gMonthDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:yearMonthDuration("P1Y12M") castable as xs:gMonthDay)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-726"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:yearMonthDuration to xs:gDay isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration("P1Y12M") cast as xs:gDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-727"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:yearMonthDuration as source type and xs:gDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:yearMonthDuration("P1Y12M") castable as xs:gDay)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-728"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:yearMonthDuration to xs:gMonth isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration("P1Y12M") cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-729"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:yearMonthDuration as source type and xs:gMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:yearMonthDuration("P1Y12M") castable as xs:gMonth)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-730"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:yearMonthDuration to xs:boolean isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration("P1Y12M") cast as xs:boolean</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-731"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:yearMonthDuration as source type and xs:boolean as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:yearMonthDuration("P1Y12M") castable as xs:boolean)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-732"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:yearMonthDuration to xs:base64Binary isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration("P1Y12M") cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-733"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:yearMonthDuration as source type and xs:base64Binary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:yearMonthDuration("P1Y12M") castable as xs:base64Binary)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-734"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:yearMonthDuration to xs:hexBinary isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration("P1Y12M") cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-735"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:yearMonthDuration as source type and xs:hexBinary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:yearMonthDuration("P1Y12M") castable as xs:hexBinary)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-736"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("P2Y")</response-string>
    <description> Casting from xs:yearMonthDuration to xs:anyURI isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration("P1Y12M") cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-737"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:yearMonthDuration as source type and xs:anyURI as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:yearMonthDuration("P1Y12M") castable as xs:anyURI)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-738"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:QName("undefined", "#text")</response-string>
    <description> Casting from xs:yearMonthDuration to xs:QName isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:yearMonthDuration("P1Y12M") cast as xs:QName</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-739"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:yearMonthDuration as source type and xs:QName as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:yearMonthDuration("P1Y12M") castable as xs:QName)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-740"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:yearMonthDuration as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:yearMonthDuration("P1Y12M") castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0080"))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-741"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:dayTimeDuration constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-742"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:dayTimeDuration constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration( "P3DT2H" , "P3DT2H" )</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-743"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Verify with &apos;instance of&apos; that the xs:dayTimeDuration constructor function produces values of the correct type. 
      The subsequence() function makes it more difficult for optimizers to take short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence(("dummy", 1.1, xs:dayTimeDuration("P3DT2H")), 3, 1) instance of xs:dayTimeDuration</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-744"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A simple test exercising the whitespace facet for type xs:dayTimeDuration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration(" P3DT2H ") eq xs:dayTimeDuration(" P3DT2H ")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-745"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> An empty string is not a valid lexical representation of xs:dayTimeDuration.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration("")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-746"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Cast a simple xs:untypedAtomic value to "P3DT2H" .</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration(xs:untypedAtomic( "P3DT2H" )) eq xs:dayTimeDuration("P3DT2H")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-747"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0006"))</response-string>
    <description> It is not possible to extract an Effective Boolean Value from the type xs:dayTimeDuration, with the boolean() function.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:dayTimeDuration("P3DT2H"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0006"))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-748"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:dayTimeDuration to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration("P3DT2H") cast as xs:untypedAtomic ne xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-749"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:dayTimeDuration as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration("P3DT2H") castable as xs:untypedAtomic</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-750"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:dayTimeDuration to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration("P3DT2H") cast as xs:string ne xs:string("an arbitrary string")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-751"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:dayTimeDuration as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration("P3DT2H") castable as xs:string</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-752"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:dayTimeDuration to xs:float isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration("P3DT2H") cast as xs:float</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-753"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:dayTimeDuration as source type and xs:float as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dayTimeDuration("P3DT2H") castable as xs:float)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-754"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:dayTimeDuration to xs:double isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration("P3DT2H") cast as xs:double</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-755"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:dayTimeDuration as source type and xs:double as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dayTimeDuration("P3DT2H") castable as xs:double)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-756"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:dayTimeDuration to xs:decimal isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration("P3DT2H") cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-757"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:dayTimeDuration as source type and xs:decimal as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dayTimeDuration("P3DT2H") castable as xs:decimal)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-758"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:dayTimeDuration to xs:integer isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration("P3DT2H") cast as xs:integer</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-759"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:dayTimeDuration as source type and xs:integer as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dayTimeDuration("P3DT2H") castable as xs:integer)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-760"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Casting from xs:dayTimeDuration to xs:duration is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration("P3DT2H") cast as xs:duration ne xs:duration("P1Y2M3DT10H30M")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-761"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:dayTimeDuration as source type and xs:duration as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration("P3DT2H") castable as xs:duration</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-762"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Casting from xs:dayTimeDuration to xs:yearMonthDuration is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration("P3DT2H") cast as xs:yearMonthDuration ne xs:yearMonthDuration("P1Y12M")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-763"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:dayTimeDuration as source type and xs:yearMonthDuration as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration("P3DT2H") castable as xs:yearMonthDuration</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-764"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:dayTimeDuration to xs:dayTimeDuration is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration("P3DT2H") cast as xs:dayTimeDuration eq xs:dayTimeDuration("P3DT2H")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-765"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:dayTimeDuration as source type and xs:dayTimeDuration as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration("P3DT2H") castable as xs:dayTimeDuration</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-766"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:dayTimeDuration to xs:dateTime isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration("P3DT2H") cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-767"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:dayTimeDuration as source type and xs:dateTime as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dayTimeDuration("P3DT2H") castable as xs:dateTime)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-768"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:dayTimeDuration to xs:time isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration("P3DT2H") cast as xs:time</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-769"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:dayTimeDuration as source type and xs:time as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dayTimeDuration("P3DT2H") castable as xs:time)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-770"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:dayTimeDuration to xs:date isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration("P3DT2H") cast as xs:date</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-771"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:dayTimeDuration as source type and xs:date as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dayTimeDuration("P3DT2H") castable as xs:date)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-772"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:dayTimeDuration to xs:gYearMonth isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration("P3DT2H") cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-773"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:dayTimeDuration as source type and xs:gYearMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dayTimeDuration("P3DT2H") castable as xs:gYearMonth)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-774"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:dayTimeDuration to xs:gYear isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration("P3DT2H") cast as xs:gYear</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-775"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:dayTimeDuration as source type and xs:gYear as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dayTimeDuration("P3DT2H") castable as xs:gYear)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-776"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:dayTimeDuration to xs:gMonthDay isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration("P3DT2H") cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-777"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:dayTimeDuration as source type and xs:gMonthDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dayTimeDuration("P3DT2H") castable as xs:gMonthDay)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-778"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:dayTimeDuration to xs:gDay isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration("P3DT2H") cast as xs:gDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-779"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:dayTimeDuration as source type and xs:gDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dayTimeDuration("P3DT2H") castable as xs:gDay)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-780"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:dayTimeDuration to xs:gMonth isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration("P3DT2H") cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-781"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:dayTimeDuration as source type and xs:gMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dayTimeDuration("P3DT2H") castable as xs:gMonth)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-782"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:dayTimeDuration to xs:boolean isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration("P3DT2H") cast as xs:boolean</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-783"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:dayTimeDuration as source type and xs:boolean as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dayTimeDuration("P3DT2H") castable as xs:boolean)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-784"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:dayTimeDuration to xs:base64Binary isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration("P3DT2H") cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-785"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:dayTimeDuration as source type and xs:base64Binary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dayTimeDuration("P3DT2H") castable as xs:base64Binary)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-786"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:dayTimeDuration to xs:hexBinary isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration("P3DT2H") cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-787"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:dayTimeDuration as source type and xs:hexBinary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dayTimeDuration("P3DT2H") castable as xs:hexBinary)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-788"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("P3DT2H")</response-string>
    <description> Casting from xs:dayTimeDuration to xs:anyURI isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration("P3DT2H") cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-789"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:dayTimeDuration as source type and xs:anyURI as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dayTimeDuration("P3DT2H") castable as xs:anyURI)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-790"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:QName("undefined", "#text")</response-string>
    <description> Casting from xs:dayTimeDuration to xs:QName isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dayTimeDuration("P3DT2H") cast as xs:QName</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-791"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:dayTimeDuration as source type and xs:QName as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dayTimeDuration("P3DT2H") castable as xs:QName)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-792"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:dayTimeDuration as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dayTimeDuration("P3DT2H") castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0080"))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-793"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:dateTime constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-794"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:dateTime constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime( "2002-10-10T12:00:00-05:00" , "2002-10-10T12:00:00-05:00" )</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-795"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Verify with &apos;instance of&apos; that the xs:dateTime constructor function produces values of the correct type. 
      The subsequence() function makes it more difficult for optimizers to take short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence(("dummy", 1.1, xs:dateTime("2002-10-10T12:00:00-05:00")), 3, 1) instance of xs:dateTime</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-796"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A simple test exercising the whitespace facet for type xs:dateTime.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(" 2002-10-10T12:00:00-05:00 ") eq xs:dateTime(" 2002-10-10T12:00:00-05:00 ")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-797"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> An empty string is not a valid lexical representation of xs:dateTime.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-798"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Cast a simple xs:untypedAtomic value to "2002-10-10T12:00:00-05:00" .</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime(xs:untypedAtomic( "2002-10-10T12:00:00-05:00" )) eq xs:dateTime("2002-10-10T12:00:00-05:00")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-799"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0006"))</response-string>
    <description> It is not possible to extract an Effective Boolean Value from the type xs:dateTime, with the boolean() function.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:dateTime("2002-10-10T12:00:00-05:00"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0006"))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-800"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:dateTime to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("2002-10-10T12:00:00-05:00") cast as xs:untypedAtomic ne xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-801"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:dateTime as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:untypedAtomic</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-802"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:dateTime to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("2002-10-10T12:00:00-05:00") cast as xs:string ne xs:string("an arbitrary string")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-803"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:dateTime as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:string</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-804"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:dateTime to xs:float isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("2002-10-10T12:00:00-05:00") cast as xs:float</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-805"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:dateTime as source type and xs:float as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:float)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-806"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:dateTime to xs:double isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("2002-10-10T12:00:00-05:00") cast as xs:double</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-807"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:dateTime as source type and xs:double as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:double)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-808"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:dateTime to xs:decimal isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("2002-10-10T12:00:00-05:00") cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-809"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:dateTime as source type and xs:decimal as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:decimal)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-810"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:dateTime to xs:integer isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("2002-10-10T12:00:00-05:00") cast as xs:integer</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-811"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:dateTime as source type and xs:integer as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:integer)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-812"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:dateTime to xs:duration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("2002-10-10T12:00:00-05:00") cast as xs:duration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-813"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:dateTime as source type and xs:duration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:duration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-814"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:dateTime to xs:yearMonthDuration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("2002-10-10T12:00:00-05:00") cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-815"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:dateTime as source type and xs:yearMonthDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:yearMonthDuration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-816"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:dateTime to xs:dayTimeDuration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("2002-10-10T12:00:00-05:00") cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-817"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:dateTime as source type and xs:dayTimeDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:dayTimeDuration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-818"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:dateTime to xs:dateTime is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("2002-10-10T12:00:00-05:00") cast as xs:dateTime eq xs:dateTime("2002-10-10T12:00:00-05:00")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-819"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:dateTime as source type and xs:dateTime as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:dateTime</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-820"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Casting from xs:dateTime to xs:time is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("2002-10-10T12:00:00-05:00") cast as xs:time ne xs:time("03:20:00-05:00")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-821"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:dateTime as source type and xs:time as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:time</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-822"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Casting from xs:dateTime to xs:date is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("2002-10-10T12:00:00-05:00") cast as xs:date ne xs:date("2004-10-13")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-823"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:dateTime as source type and xs:date as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:date</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-824"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Casting from xs:dateTime to xs:gYearMonth is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("2002-10-10T12:00:00-05:00") cast as xs:gYearMonth ne xs:gYearMonth("1999-11")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-825"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:dateTime as source type and xs:gYearMonth as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:gYearMonth</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-826"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Casting from xs:dateTime to xs:gYear is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("2002-10-10T12:00:00-05:00") cast as xs:gYear ne xs:gYear("1999")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-827"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:dateTime as source type and xs:gYear as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:gYear</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-828"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Casting from xs:dateTime to xs:gMonthDay is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("2002-10-10T12:00:00-05:00") cast as xs:gMonthDay ne xs:gMonthDay("--11-13")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-829"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:dateTime as source type and xs:gMonthDay as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:gMonthDay</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-830"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Casting from xs:dateTime to xs:gDay is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("2002-10-10T12:00:00-05:00") cast as xs:gDay ne xs:gDay("---03")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-831"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:dateTime as source type and xs:gDay as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:gDay</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-832"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Casting from xs:dateTime to xs:gMonth is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("2002-10-10T12:00:00-05:00") cast as xs:gMonth ne xs:gMonth("--11")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-833"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:dateTime as source type and xs:gMonth as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:gMonth</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-834"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:dateTime to xs:boolean isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("2002-10-10T12:00:00-05:00") cast as xs:boolean</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-835"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:dateTime as source type and xs:boolean as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:boolean)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-836"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:dateTime to xs:base64Binary isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("2002-10-10T12:00:00-05:00") cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-837"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:dateTime as source type and xs:base64Binary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:base64Binary)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-838"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:dateTime to xs:hexBinary isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("2002-10-10T12:00:00-05:00") cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-839"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:dateTime as source type and xs:hexBinary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:hexBinary)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-840"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("2002-10-10T12:00:00-05:00")</response-string>
    <description> Casting from xs:dateTime to xs:anyURI isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("2002-10-10T12:00:00-05:00") cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-841"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:dateTime as source type and xs:anyURI as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:anyURI)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-842"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:QName("undefined", "#text")</response-string>
    <description> Casting from xs:dateTime to xs:QName isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("2002-10-10T12:00:00-05:00") cast as xs:QName</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-843"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:dateTime as source type and xs:QName as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:QName)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-844"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:dateTime as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:dateTime("2002-10-10T12:00:00-05:00") castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0080"))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-845"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:time constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-846"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:time constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time( "03:20:00-05:00" , "03:20:00-05:00" )</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-847"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Verify with &apos;instance of&apos; that the xs:time constructor function produces values of the correct type. 
      The subsequence() function makes it more difficult for optimizers to take short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence(("dummy", 1.1, xs:time("03:20:00-05:00")), 3, 1) instance of xs:time</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-848"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A simple test exercising the whitespace facet for type xs:time.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(" 03:20:00-05:00 ") eq xs:time(" 03:20:00-05:00 ")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-849"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> An empty string is not a valid lexical representation of xs:time.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-850"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Cast a simple xs:untypedAtomic value to "03:20:00-05:00" .</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time(xs:untypedAtomic( "03:20:00-05:00" )) eq xs:time("03:20:00-05:00")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-851"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0006"))</response-string>
    <description> It is not possible to extract an Effective Boolean Value from the type xs:time, with the boolean() function.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:time("03:20:00-05:00"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0006"))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-852"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:time to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("03:20:00-05:00") cast as xs:untypedAtomic ne xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-853"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:time as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("03:20:00-05:00") castable as xs:untypedAtomic</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-854"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:time to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("03:20:00-05:00") cast as xs:string ne xs:string("an arbitrary string")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-855"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:time as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("03:20:00-05:00") castable as xs:string</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-856"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:time to xs:float isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("03:20:00-05:00") cast as xs:float</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-857"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:time as source type and xs:float as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:time("03:20:00-05:00") castable as xs:float)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-858"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:time to xs:double isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("03:20:00-05:00") cast as xs:double</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-859"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:time as source type and xs:double as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:time("03:20:00-05:00") castable as xs:double)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-860"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:time to xs:decimal isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("03:20:00-05:00") cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-861"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:time as source type and xs:decimal as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:time("03:20:00-05:00") castable as xs:decimal)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-862"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:time to xs:integer isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("03:20:00-05:00") cast as xs:integer</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-863"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:time as source type and xs:integer as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:time("03:20:00-05:00") castable as xs:integer)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-864"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:time to xs:duration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("03:20:00-05:00") cast as xs:duration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-865"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:time as source type and xs:duration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:time("03:20:00-05:00") castable as xs:duration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-866"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:time to xs:yearMonthDuration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("03:20:00-05:00") cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-867"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:time as source type and xs:yearMonthDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:time("03:20:00-05:00") castable as xs:yearMonthDuration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-868"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:time to xs:dayTimeDuration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("03:20:00-05:00") cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-869"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:time as source type and xs:dayTimeDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:time("03:20:00-05:00") castable as xs:dayTimeDuration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-870"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:time to xs:dateTime isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("03:20:00-05:00") cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-871"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:time as source type and xs:dateTime as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:time("03:20:00-05:00") castable as xs:dateTime)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-872"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:time to xs:time is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("03:20:00-05:00") cast as xs:time eq xs:time("03:20:00-05:00")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-873"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:time as source type and xs:time as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("03:20:00-05:00") castable as xs:time</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-874"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:time to xs:date isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("03:20:00-05:00") cast as xs:date</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-875"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:time as source type and xs:date as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:time("03:20:00-05:00") castable as xs:date)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-876"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:time to xs:gYearMonth isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("03:20:00-05:00") cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-877"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:time as source type and xs:gYearMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:time("03:20:00-05:00") castable as xs:gYearMonth)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-878"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:time to xs:gYear isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("03:20:00-05:00") cast as xs:gYear</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-879"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:time as source type and xs:gYear as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:time("03:20:00-05:00") castable as xs:gYear)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-880"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:time to xs:gMonthDay isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("03:20:00-05:00") cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-881"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:time as source type and xs:gMonthDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:time("03:20:00-05:00") castable as xs:gMonthDay)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-882"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:time to xs:gDay isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("03:20:00-05:00") cast as xs:gDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-883"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:time as source type and xs:gDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:time("03:20:00-05:00") castable as xs:gDay)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-884"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:time to xs:gMonth isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("03:20:00-05:00") cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-885"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:time as source type and xs:gMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:time("03:20:00-05:00") castable as xs:gMonth)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-886"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:time to xs:boolean isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("03:20:00-05:00") cast as xs:boolean</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-887"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:time as source type and xs:boolean as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:time("03:20:00-05:00") castable as xs:boolean)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-888"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:time to xs:base64Binary isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("03:20:00-05:00") cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-889"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:time as source type and xs:base64Binary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:time("03:20:00-05:00") castable as xs:base64Binary)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-890"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:time to xs:hexBinary isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("03:20:00-05:00") cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-891"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:time as source type and xs:hexBinary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:time("03:20:00-05:00") castable as xs:hexBinary)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-892"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("03:20:00-05:00")</response-string>
    <description> Casting from xs:time to xs:anyURI isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("03:20:00-05:00") cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-893"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:time as source type and xs:anyURI as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:time("03:20:00-05:00") castable as xs:anyURI)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-894"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:QName("undefined", "#text")</response-string>
    <description> Casting from xs:time to xs:QName isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("03:20:00-05:00") cast as xs:QName</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-895"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:time as source type and xs:QName as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:time("03:20:00-05:00") castable as xs:QName)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-896"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:time as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:time("03:20:00-05:00") castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0080"))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-897"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:date constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-898"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:date constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date( "2004-10-13" , "2004-10-13" )</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-899"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Verify with &apos;instance of&apos; that the xs:date constructor function produces values of the correct type. 
      The subsequence() function makes it more difficult for optimizers to take short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence(("dummy", 1.1, xs:date("2004-10-13")), 3, 1) instance of xs:date</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-900"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A simple test exercising the whitespace facet for type xs:date.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(" 2004-10-13 ") eq xs:date(" 2004-10-13 ")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-901"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> An empty string is not a valid lexical representation of xs:date.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-902"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Cast a simple xs:untypedAtomic value to "2004-10-13" .</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(xs:untypedAtomic( "2004-10-13" )) eq xs:date("2004-10-13")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-903"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0006"))</response-string>
    <description> It is not possible to extract an Effective Boolean Value from the type xs:date, with the boolean() function.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:date("2004-10-13"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0006"))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-904"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:date to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("2004-10-13") cast as xs:untypedAtomic ne xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-905"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:date as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("2004-10-13") castable as xs:untypedAtomic</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-906"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:date to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("2004-10-13") cast as xs:string ne xs:string("an arbitrary string")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-907"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:date as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("2004-10-13") castable as xs:string</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-908"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:date to xs:float isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("2004-10-13") cast as xs:float</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-909"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:date as source type and xs:float as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:date("2004-10-13") castable as xs:float)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-910"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:date to xs:double isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("2004-10-13") cast as xs:double</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-911"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:date as source type and xs:double as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:date("2004-10-13") castable as xs:double)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-912"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:date to xs:decimal isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("2004-10-13") cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-913"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:date as source type and xs:decimal as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:date("2004-10-13") castable as xs:decimal)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-914"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:date to xs:integer isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("2004-10-13") cast as xs:integer</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-915"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:date as source type and xs:integer as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:date("2004-10-13") castable as xs:integer)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-916"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:date to xs:duration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("2004-10-13") cast as xs:duration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-917"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:date as source type and xs:duration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:date("2004-10-13") castable as xs:duration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-918"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:date to xs:yearMonthDuration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("2004-10-13") cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-919"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:date as source type and xs:yearMonthDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:date("2004-10-13") castable as xs:yearMonthDuration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-920"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:date to xs:dayTimeDuration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("2004-10-13") cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-921"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:date as source type and xs:dayTimeDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:date("2004-10-13") castable as xs:dayTimeDuration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-922"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Casting from xs:date to xs:dateTime is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("2004-10-13") cast as xs:dateTime ne xs:dateTime("2002-10-10T12:00:00-05:00")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-923"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:date as source type and xs:dateTime as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("2004-10-13") castable as xs:dateTime</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-924"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:date to xs:time isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("2004-10-13") cast as xs:time</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-925"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:date as source type and xs:time as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:date("2004-10-13") castable as xs:time)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-926"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:date to xs:date is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("2004-10-13") cast as xs:date eq xs:date("2004-10-13")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-927"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:date as source type and xs:date as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("2004-10-13") castable as xs:date</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-928"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Casting from xs:date to xs:gYearMonth is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("2004-10-13") cast as xs:gYearMonth ne xs:gYearMonth("1999-11")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-929"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:date as source type and xs:gYearMonth as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("2004-10-13") castable as xs:gYearMonth</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-930"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Casting from xs:date to xs:gYear is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("2004-10-13") cast as xs:gYear ne xs:gYear("1999")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-931"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:date as source type and xs:gYear as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("2004-10-13") castable as xs:gYear</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-932"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Casting from xs:date to xs:gMonthDay is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("2004-10-13") cast as xs:gMonthDay ne xs:gMonthDay("--11-13")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-933"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:date as source type and xs:gMonthDay as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("2004-10-13") castable as xs:gMonthDay</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-934"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Casting from xs:date to xs:gDay is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("2004-10-13") cast as xs:gDay ne xs:gDay("---03")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-935"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:date as source type and xs:gDay as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("2004-10-13") castable as xs:gDay</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-936"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Casting from xs:date to xs:gMonth is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("2004-10-13") cast as xs:gMonth ne xs:gMonth("--11")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-937"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:date as source type and xs:gMonth as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("2004-10-13") castable as xs:gMonth</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-938"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:date to xs:boolean isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("2004-10-13") cast as xs:boolean</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-939"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:date as source type and xs:boolean as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:date("2004-10-13") castable as xs:boolean)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-940"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:date to xs:base64Binary isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("2004-10-13") cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-941"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:date as source type and xs:base64Binary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:date("2004-10-13") castable as xs:base64Binary)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-942"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:date to xs:hexBinary isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("2004-10-13") cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-943"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:date as source type and xs:hexBinary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:date("2004-10-13") castable as xs:hexBinary)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-944"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("2004-10-13")</response-string>
    <description> Casting from xs:date to xs:anyURI isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("2004-10-13") cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-945"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:date as source type and xs:anyURI as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:date("2004-10-13") castable as xs:anyURI)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-946"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:QName("undefined", "#text")</response-string>
    <description> Casting from xs:date to xs:QName isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("2004-10-13") cast as xs:QName</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-947"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:date as source type and xs:QName as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:date("2004-10-13") castable as xs:QName)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-948"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:date as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:date("2004-10-13") castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0080"))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-949"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:gYearMonth constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-950"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:gYearMonth constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth( "1999-11" , "1999-11" )</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-951"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Verify with &apos;instance of&apos; that the xs:gYearMonth constructor function produces values of the correct type. 
      The subsequence() function makes it more difficult for optimizers to take short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence(("dummy", 1.1, xs:gYearMonth("1999-11")), 3, 1) instance of xs:gYearMonth</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-952"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A simple test exercising the whitespace facet for type xs:gYearMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(" 1999-11 ") eq xs:gYearMonth(" 1999-11 ")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-953"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> An empty string is not a valid lexical representation of xs:gYearMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth("")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-954"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Cast a simple xs:untypedAtomic value to "1999-11" .</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth(xs:untypedAtomic( "1999-11" )) eq xs:gYearMonth("1999-11")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-955"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0006"))</response-string>
    <description> It is not possible to extract an Effective Boolean Value from the type xs:gYearMonth, with the boolean() function.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:gYearMonth("1999-11"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0006"))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-956"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:gYearMonth to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth("1999-11") cast as xs:untypedAtomic ne xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-957"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gYearMonth as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth("1999-11") castable as xs:untypedAtomic</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-958"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:gYearMonth to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth("1999-11") cast as xs:string ne xs:string("an arbitrary string")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-959"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gYearMonth as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth("1999-11") castable as xs:string</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-960"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gYearMonth to xs:float isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth("1999-11") cast as xs:float</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-961"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gYearMonth as source type and xs:float as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYearMonth("1999-11") castable as xs:float)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-962"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gYearMonth to xs:double isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth("1999-11") cast as xs:double</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-963"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gYearMonth as source type and xs:double as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYearMonth("1999-11") castable as xs:double)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-964"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gYearMonth to xs:decimal isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth("1999-11") cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-965"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gYearMonth as source type and xs:decimal as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYearMonth("1999-11") castable as xs:decimal)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-966"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gYearMonth to xs:integer isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth("1999-11") cast as xs:integer</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-967"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gYearMonth as source type and xs:integer as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYearMonth("1999-11") castable as xs:integer)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-968"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gYearMonth to xs:duration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth("1999-11") cast as xs:duration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-969"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gYearMonth as source type and xs:duration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYearMonth("1999-11") castable as xs:duration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-970"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gYearMonth to xs:yearMonthDuration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth("1999-11") cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-971"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gYearMonth as source type and xs:yearMonthDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYearMonth("1999-11") castable as xs:yearMonthDuration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-972"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gYearMonth to xs:dayTimeDuration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth("1999-11") cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-973"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gYearMonth as source type and xs:dayTimeDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYearMonth("1999-11") castable as xs:dayTimeDuration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-974"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gYearMonth to xs:dateTime isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth("1999-11") cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-975"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gYearMonth as source type and xs:dateTime as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYearMonth("1999-11") castable as xs:dateTime)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-976"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gYearMonth to xs:time isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth("1999-11") cast as xs:time</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-977"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gYearMonth as source type and xs:time as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYearMonth("1999-11") castable as xs:time)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-978"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gYearMonth to xs:date isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth("1999-11") cast as xs:date</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-979"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gYearMonth as source type and xs:date as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYearMonth("1999-11") castable as xs:date)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-980"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Casting from xs:gYearMonth to xs:gYearMonth is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth("1999-11") cast as xs:gYearMonth eq xs:gYearMonth("1999-11")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-981"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gYearMonth as source type and xs:gYearMonth as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth("1999-11") castable as xs:gYearMonth</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-982"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gYearMonth to xs:gYear isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth("1999-11") cast as xs:gYear</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-983"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gYearMonth as source type and xs:gYear as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYearMonth("1999-11") castable as xs:gYear)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-984"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gYearMonth to xs:gMonthDay isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth("1999-11") cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-985"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gYearMonth as source type and xs:gMonthDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYearMonth("1999-11") castable as xs:gMonthDay)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-986"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gYearMonth to xs:gDay isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth("1999-11") cast as xs:gDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-987"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gYearMonth as source type and xs:gDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYearMonth("1999-11") castable as xs:gDay)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-988"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gYearMonth to xs:gMonth isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth("1999-11") cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-989"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gYearMonth as source type and xs:gMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYearMonth("1999-11") castable as xs:gMonth)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-990"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gYearMonth to xs:boolean isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth("1999-11") cast as xs:boolean</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-991"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gYearMonth as source type and xs:boolean as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYearMonth("1999-11") castable as xs:boolean)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-992"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gYearMonth to xs:base64Binary isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth("1999-11") cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-993"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gYearMonth as source type and xs:base64Binary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYearMonth("1999-11") castable as xs:base64Binary)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-994"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gYearMonth to xs:hexBinary isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth("1999-11") cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-995"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gYearMonth as source type and xs:hexBinary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYearMonth("1999-11") castable as xs:hexBinary)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-996"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("1999-11")</response-string>
    <description> Casting from xs:gYearMonth to xs:anyURI isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth("1999-11") cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-997"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:gYearMonth as source type and xs:anyURI as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYearMonth("1999-11") castable as xs:anyURI)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-998"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:QName("undefined", "#text")</response-string>
    <description> Casting from xs:gYearMonth to xs:QName isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth("1999-11") cast as xs:QName</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-999"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:gYearMonth as source type and xs:QName as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYearMonth("1999-11") castable as xs:QName)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1000"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:gYearMonth as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYearMonth("1999-11") castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0080"))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1001"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:gYear constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1002"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:gYear constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear( "1999" , "1999" )</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1003"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Verify with &apos;instance of&apos; that the xs:gYear constructor function produces values of the correct type. 
      The subsequence() function makes it more difficult for optimizers to take short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence(("dummy", 1.1, xs:gYear("1999")), 3, 1) instance of xs:gYear</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1004"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A simple test exercising the whitespace facet for type xs:gYear.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(" 1999 ") eq xs:gYear(" 1999 ")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1005"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:gYear("")</response-string>
    <description> An empty string is not a valid lexical representation of xs:gYear.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1006"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Cast a simple xs:untypedAtomic value to "1999" .</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear(xs:untypedAtomic( "1999" )) eq xs:gYear("1999")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1007"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0006"))</response-string>
    <description> It is not possible to extract an Effective Boolean Value from the type xs:gYear, with the boolean() function.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:gYear("1999"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0006"))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1008"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:gYear to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("1999") cast as xs:untypedAtomic ne xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1009"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gYear as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("1999") castable as xs:untypedAtomic</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1010"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:gYear to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("1999") cast as xs:string ne xs:string("an arbitrary string")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1011"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gYear as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("1999") castable as xs:string</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1012"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:float("1999")</response-string>
    <description> Casting from xs:gYear to xs:float isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("1999") cast as xs:float</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1013"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:gYear as source type and xs:float as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYear("1999") castable as xs:float)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1014"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:double("1999")</response-string>
    <description> Casting from xs:gYear to xs:double isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("1999") cast as xs:double</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1015"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:gYear as source type and xs:double as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYear("1999") castable as xs:double)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1016"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("1999")</response-string>
    <description> Casting from xs:gYear to xs:decimal isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("1999") cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1017"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:gYear as source type and xs:decimal as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYear("1999") castable as xs:decimal)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1018"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("1999")</response-string>
    <description> Casting from xs:gYear to xs:integer isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("1999") cast as xs:integer</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1019"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:gYear as source type and xs:integer as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYear("1999") castable as xs:integer)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1020"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gYear to xs:duration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("1999") cast as xs:duration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1021"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gYear as source type and xs:duration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYear("1999") castable as xs:duration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1022"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gYear to xs:yearMonthDuration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("1999") cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1023"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gYear as source type and xs:yearMonthDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYear("1999") castable as xs:yearMonthDuration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1024"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gYear to xs:dayTimeDuration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("1999") cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1025"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gYear as source type and xs:dayTimeDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYear("1999") castable as xs:dayTimeDuration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1026"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gYear to xs:dateTime isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("1999") cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1027"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gYear as source type and xs:dateTime as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYear("1999") castable as xs:dateTime)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1028"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gYear to xs:time isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("1999") cast as xs:time</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1029"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gYear as source type and xs:time as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYear("1999") castable as xs:time)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1030"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gYear to xs:date isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("1999") cast as xs:date</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1031"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gYear as source type and xs:date as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYear("1999") castable as xs:date)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1032"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gYear to xs:gYearMonth isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("1999") cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1033"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gYear as source type and xs:gYearMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYear("1999") castable as xs:gYearMonth)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1034"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Casting from xs:gYear to xs:gYear is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("1999") cast as xs:gYear eq xs:gYear("1999")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1035"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gYear as source type and xs:gYear as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("1999") castable as xs:gYear</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1036"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gYear to xs:gMonthDay isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("1999") cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1037"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gYear as source type and xs:gMonthDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYear("1999") castable as xs:gMonthDay)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1038"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gYear to xs:gDay isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("1999") cast as xs:gDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1039"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gYear as source type and xs:gDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYear("1999") castable as xs:gDay)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1040"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gYear to xs:gMonth isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("1999") cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1041"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gYear as source type and xs:gMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYear("1999") castable as xs:gMonth)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1042"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gYear to xs:boolean isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("1999") cast as xs:boolean</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1043"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gYear as source type and xs:boolean as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYear("1999") castable as xs:boolean)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1044"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:base64Binary("1999")</response-string>
    <description> Casting from xs:gYear to xs:base64Binary isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("1999") cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1045"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:gYear as source type and xs:base64Binary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYear("1999") castable as xs:base64Binary)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1046"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:hexBinary("1999")</response-string>
    <description> Casting from xs:gYear to xs:hexBinary isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("1999") cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1047"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:gYear as source type and xs:hexBinary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYear("1999") castable as xs:hexBinary)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1048"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("1999")</response-string>
    <description> Casting from xs:gYear to xs:anyURI isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("1999") cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1049"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:gYear as source type and xs:anyURI as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYear("1999") castable as xs:anyURI)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1050"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:QName("undefined", "#text")</response-string>
    <description> Casting from xs:gYear to xs:QName isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("1999") cast as xs:QName</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1051"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:gYear as source type and xs:QName as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYear("1999") castable as xs:QName)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1052"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:gYear as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gYear("1999") castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0080"))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1053"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:gMonthDay constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1054"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:gMonthDay constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay( "--11-13" , "--11-13" )</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1055"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Verify with &apos;instance of&apos; that the xs:gMonthDay constructor function produces values of the correct type. 
      The subsequence() function makes it more difficult for optimizers to take short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence(("dummy", 1.1, xs:gMonthDay("--11-13")), 3, 1) instance of xs:gMonthDay</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1056"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A simple test exercising the whitespace facet for type xs:gMonthDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(" --11-13 ") eq xs:gMonthDay(" --11-13 ")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1057"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> An empty string is not a valid lexical representation of xs:gMonthDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1058"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Cast a simple xs:untypedAtomic value to "--11-13" .</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay(xs:untypedAtomic( "--11-13" )) eq xs:gMonthDay("--11-13")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1059"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0006"))</response-string>
    <description> It is not possible to extract an Effective Boolean Value from the type xs:gMonthDay, with the boolean() function.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:gMonthDay("--11-13"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0006"))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1060"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:gMonthDay to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("--11-13") cast as xs:untypedAtomic ne xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1061"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonthDay as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("--11-13") castable as xs:untypedAtomic</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1062"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:gMonthDay to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("--11-13") cast as xs:string ne xs:string("an arbitrary string")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1063"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonthDay as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("--11-13") castable as xs:string</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1064"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gMonthDay to xs:float isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("--11-13") cast as xs:float</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1065"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonthDay as source type and xs:float as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonthDay("--11-13") castable as xs:float)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1066"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gMonthDay to xs:double isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("--11-13") cast as xs:double</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1067"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonthDay as source type and xs:double as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonthDay("--11-13") castable as xs:double)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1068"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gMonthDay to xs:decimal isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("--11-13") cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1069"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonthDay as source type and xs:decimal as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonthDay("--11-13") castable as xs:decimal)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1070"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gMonthDay to xs:integer isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("--11-13") cast as xs:integer</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1071"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonthDay as source type and xs:integer as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonthDay("--11-13") castable as xs:integer)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1072"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gMonthDay to xs:duration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("--11-13") cast as xs:duration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1073"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonthDay as source type and xs:duration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonthDay("--11-13") castable as xs:duration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1074"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gMonthDay to xs:yearMonthDuration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("--11-13") cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1075"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonthDay as source type and xs:yearMonthDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonthDay("--11-13") castable as xs:yearMonthDuration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1076"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gMonthDay to xs:dayTimeDuration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("--11-13") cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1077"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonthDay as source type and xs:dayTimeDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonthDay("--11-13") castable as xs:dayTimeDuration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1078"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gMonthDay to xs:dateTime isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("--11-13") cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1079"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonthDay as source type and xs:dateTime as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonthDay("--11-13") castable as xs:dateTime)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1080"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gMonthDay to xs:time isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("--11-13") cast as xs:time</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1081"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonthDay as source type and xs:time as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonthDay("--11-13") castable as xs:time)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1082"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gMonthDay to xs:date isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("--11-13") cast as xs:date</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1083"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonthDay as source type and xs:date as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonthDay("--11-13") castable as xs:date)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1084"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gMonthDay to xs:gYearMonth isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("--11-13") cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1085"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonthDay as source type and xs:gYearMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonthDay("--11-13") castable as xs:gYearMonth)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1086"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gMonthDay to xs:gYear isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("--11-13") cast as xs:gYear</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1087"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonthDay as source type and xs:gYear as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonthDay("--11-13") castable as xs:gYear)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1088"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Casting from xs:gMonthDay to xs:gMonthDay is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("--11-13") cast as xs:gMonthDay eq xs:gMonthDay("--11-13")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1089"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonthDay as source type and xs:gMonthDay as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("--11-13") castable as xs:gMonthDay</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1090"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gMonthDay to xs:gDay isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("--11-13") cast as xs:gDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1091"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonthDay as source type and xs:gDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonthDay("--11-13") castable as xs:gDay)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1092"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gMonthDay to xs:gMonth isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("--11-13") cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1093"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonthDay as source type and xs:gMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonthDay("--11-13") castable as xs:gMonth)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1094"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gMonthDay to xs:boolean isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("--11-13") cast as xs:boolean</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1095"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonthDay as source type and xs:boolean as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonthDay("--11-13") castable as xs:boolean)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1096"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gMonthDay to xs:base64Binary isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("--11-13") cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1097"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonthDay as source type and xs:base64Binary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonthDay("--11-13") castable as xs:base64Binary)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1098"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gMonthDay to xs:hexBinary isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("--11-13") cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1099"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonthDay as source type and xs:hexBinary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonthDay("--11-13") castable as xs:hexBinary)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1100"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("--11-13")</response-string>
    <description> Casting from xs:gMonthDay to xs:anyURI isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("--11-13") cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1101"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonthDay as source type and xs:anyURI as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonthDay("--11-13") castable as xs:anyURI)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1102"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:QName("undefined", "#text")</response-string>
    <description> Casting from xs:gMonthDay to xs:QName isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonthDay("--11-13") cast as xs:QName</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1103"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonthDay as source type and xs:QName as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonthDay("--11-13") castable as xs:QName)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1104"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonthDay as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonthDay("--11-13") castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0080"))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1105"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:gDay constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1106"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:gDay constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay( "---03" , "---03" )</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1107"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Verify with &apos;instance of&apos; that the xs:gDay constructor function produces values of the correct type. 
      The subsequence() function makes it more difficult for optimizers to take short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence(("dummy", 1.1, xs:gDay("---03")), 3, 1) instance of xs:gDay</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1108"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A simple test exercising the whitespace facet for type xs:gDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(" ---03 ") eq xs:gDay(" ---03 ")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1109"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> An empty string is not a valid lexical representation of xs:gDay.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1110"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Cast a simple xs:untypedAtomic value to "---03" .</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay(xs:untypedAtomic( "---03" )) eq xs:gDay("---03")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1111"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0006"))</response-string>
    <description> It is not possible to extract an Effective Boolean Value from the type xs:gDay, with the boolean() function.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:gDay("---03"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0006"))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1112"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:gDay to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("---03") cast as xs:untypedAtomic ne xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1113"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gDay as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("---03") castable as xs:untypedAtomic</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1114"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:gDay to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("---03") cast as xs:string ne xs:string("an arbitrary string")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1115"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gDay as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("---03") castable as xs:string</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1116"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gDay to xs:float isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("---03") cast as xs:float</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1117"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gDay as source type and xs:float as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gDay("---03") castable as xs:float)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1118"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gDay to xs:double isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("---03") cast as xs:double</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1119"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gDay as source type and xs:double as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gDay("---03") castable as xs:double)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1120"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gDay to xs:decimal isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("---03") cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1121"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gDay as source type and xs:decimal as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gDay("---03") castable as xs:decimal)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1122"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gDay to xs:integer isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("---03") cast as xs:integer</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1123"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gDay as source type and xs:integer as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gDay("---03") castable as xs:integer)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1124"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gDay to xs:duration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("---03") cast as xs:duration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1125"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gDay as source type and xs:duration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gDay("---03") castable as xs:duration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1126"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gDay to xs:yearMonthDuration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("---03") cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1127"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gDay as source type and xs:yearMonthDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gDay("---03") castable as xs:yearMonthDuration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1128"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gDay to xs:dayTimeDuration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("---03") cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1129"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gDay as source type and xs:dayTimeDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gDay("---03") castable as xs:dayTimeDuration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1130"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gDay to xs:dateTime isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("---03") cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1131"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gDay as source type and xs:dateTime as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gDay("---03") castable as xs:dateTime)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1132"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gDay to xs:time isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("---03") cast as xs:time</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1133"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gDay as source type and xs:time as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gDay("---03") castable as xs:time)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1134"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gDay to xs:date isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("---03") cast as xs:date</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1135"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gDay as source type and xs:date as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gDay("---03") castable as xs:date)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1136"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gDay to xs:gYearMonth isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("---03") cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1137"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gDay as source type and xs:gYearMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gDay("---03") castable as xs:gYearMonth)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1138"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gDay to xs:gYear isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("---03") cast as xs:gYear</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1139"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gDay as source type and xs:gYear as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gDay("---03") castable as xs:gYear)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1140"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gDay to xs:gMonthDay isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("---03") cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1141"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gDay as source type and xs:gMonthDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gDay("---03") castable as xs:gMonthDay)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1142"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Casting from xs:gDay to xs:gDay is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("---03") cast as xs:gDay eq xs:gDay("---03")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1143"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gDay as source type and xs:gDay as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("---03") castable as xs:gDay</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1144"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gDay to xs:gMonth isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("---03") cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1145"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gDay as source type and xs:gMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gDay("---03") castable as xs:gMonth)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1146"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gDay to xs:boolean isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("---03") cast as xs:boolean</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1147"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gDay as source type and xs:boolean as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gDay("---03") castable as xs:boolean)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1148"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gDay to xs:base64Binary isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("---03") cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1149"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gDay as source type and xs:base64Binary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gDay("---03") castable as xs:base64Binary)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1150"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gDay to xs:hexBinary isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("---03") cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1151"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gDay as source type and xs:hexBinary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gDay("---03") castable as xs:hexBinary)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1152"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("---03")</response-string>
    <description> Casting from xs:gDay to xs:anyURI isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("---03") cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1153"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:gDay as source type and xs:anyURI as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gDay("---03") castable as xs:anyURI)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1154"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:QName("undefined", "#text")</response-string>
    <description> Casting from xs:gDay to xs:QName isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gDay("---03") cast as xs:QName</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1155"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:gDay as source type and xs:QName as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gDay("---03") castable as xs:QName)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1156"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:gDay as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gDay("---03") castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0080"))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1157"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:gMonth constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1158"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:gMonth constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth( "--11" , "--11" )</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1159"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Verify with &apos;instance of&apos; that the xs:gMonth constructor function produces values of the correct type. 
      The subsequence() function makes it more difficult for optimizers to take short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence(("dummy", 1.1, xs:gMonth("--11")), 3, 1) instance of xs:gMonth</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1160"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A simple test exercising the whitespace facet for type xs:gMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(" --11 ") eq xs:gMonth(" --11 ")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1161"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> An empty string is not a valid lexical representation of xs:gMonth.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth("")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1162"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Cast a simple xs:untypedAtomic value to "--11" .</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth(xs:untypedAtomic( "--11" )) eq xs:gMonth("--11")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1163"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0006"))</response-string>
    <description> It is not possible to extract an Effective Boolean Value from the type xs:gMonth, with the boolean() function.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:gMonth("--11"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0006"))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1164"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:gMonth to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth("--11") cast as xs:untypedAtomic ne xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1165"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonth as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth("--11") castable as xs:untypedAtomic</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1166"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:gMonth to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth("--11") cast as xs:string ne xs:string("an arbitrary string")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1167"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonth as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth("--11") castable as xs:string</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1168"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gMonth to xs:float isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth("--11") cast as xs:float</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1169"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonth as source type and xs:float as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonth("--11") castable as xs:float)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1170"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gMonth to xs:double isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth("--11") cast as xs:double</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1171"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonth as source type and xs:double as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonth("--11") castable as xs:double)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1172"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gMonth to xs:decimal isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth("--11") cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1173"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonth as source type and xs:decimal as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonth("--11") castable as xs:decimal)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1174"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gMonth to xs:integer isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth("--11") cast as xs:integer</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1175"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonth as source type and xs:integer as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonth("--11") castable as xs:integer)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1176"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gMonth to xs:duration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth("--11") cast as xs:duration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1177"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonth as source type and xs:duration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonth("--11") castable as xs:duration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1178"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gMonth to xs:yearMonthDuration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth("--11") cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1179"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonth as source type and xs:yearMonthDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonth("--11") castable as xs:yearMonthDuration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1180"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gMonth to xs:dayTimeDuration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth("--11") cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1181"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonth as source type and xs:dayTimeDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonth("--11") castable as xs:dayTimeDuration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1182"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gMonth to xs:dateTime isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth("--11") cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1183"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonth as source type and xs:dateTime as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonth("--11") castable as xs:dateTime)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1184"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gMonth to xs:time isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth("--11") cast as xs:time</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1185"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonth as source type and xs:time as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonth("--11") castable as xs:time)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1186"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gMonth to xs:date isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth("--11") cast as xs:date</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1187"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonth as source type and xs:date as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonth("--11") castable as xs:date)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1188"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gMonth to xs:gYearMonth isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth("--11") cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1189"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonth as source type and xs:gYearMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonth("--11") castable as xs:gYearMonth)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1190"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gMonth to xs:gYear isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth("--11") cast as xs:gYear</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1191"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonth as source type and xs:gYear as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonth("--11") castable as xs:gYear)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1192"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gMonth to xs:gMonthDay isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth("--11") cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1193"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonth as source type and xs:gMonthDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonth("--11") castable as xs:gMonthDay)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1194"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gMonth to xs:gDay isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth("--11") cast as xs:gDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1195"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonth as source type and xs:gDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonth("--11") castable as xs:gDay)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1196"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Casting from xs:gMonth to xs:gMonth is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth("--11") cast as xs:gMonth eq xs:gMonth("--11")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1197"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonth as source type and xs:gMonth as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth("--11") castable as xs:gMonth</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1198"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gMonth to xs:boolean isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth("--11") cast as xs:boolean</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1199"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonth as source type and xs:boolean as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonth("--11") castable as xs:boolean)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1200"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gMonth to xs:base64Binary isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth("--11") cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1201"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonth as source type and xs:base64Binary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonth("--11") castable as xs:base64Binary)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1202"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:gMonth to xs:hexBinary isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth("--11") cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1203"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonth as source type and xs:hexBinary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonth("--11") castable as xs:hexBinary)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1204"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("--11")</response-string>
    <description> Casting from xs:gMonth to xs:anyURI isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth("--11") cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1205"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonth as source type and xs:anyURI as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonth("--11") castable as xs:anyURI)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1206"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:QName("undefined", "#text")</response-string>
    <description> Casting from xs:gMonth to xs:QName isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gMonth("--11") cast as xs:QName</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1207"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonth as source type and xs:QName as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonth("--11") castable as xs:QName)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1208"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:gMonth as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:gMonth("--11") castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0080"))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1209"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:boolean constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1210"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:boolean constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean( "true" , "true" )</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1211"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Verify with &apos;instance of&apos; that the xs:boolean constructor function produces values of the correct type. 
      The subsequence() function makes it more difficult for optimizers to take short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence(("dummy", 1.1, xs:boolean("true")), 3, 1) instance of xs:boolean</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1212"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A simple test exercising the whitespace facet for type xs:boolean.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(" true ") eq xs:boolean(" true ")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1213"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> An empty string is not a valid lexical representation of xs:boolean.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean("")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1214"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Cast a simple xs:untypedAtomic value to "true" .</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean(xs:untypedAtomic( "true" )) eq xs:boolean("true")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1215"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Applying fn:boolean() to a value of type xs:boolean that has the lexical value &apos; "true" &apos; 
      should result in the boolean value true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:boolean("true"))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1216"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:boolean to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean("true") cast as xs:untypedAtomic ne xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1217"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:boolean as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean("true") castable as xs:untypedAtomic</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1218"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:boolean to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean("true") cast as xs:string ne xs:string("an arbitrary string")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1219"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:boolean as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean("true") castable as xs:string</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1220"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Casting from xs:boolean to xs:float is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean("true") cast as xs:float ne xs:float("3.4e5")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1221"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:boolean as source type and xs:float as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean("true") castable as xs:float</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1222"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Casting from xs:boolean to xs:double is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean("true") cast as xs:double ne xs:double("3.3e3")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1223"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:boolean as source type and xs:double as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean("true") castable as xs:double</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1224"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Casting from xs:boolean to xs:decimal is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean("true") cast as xs:decimal ne xs:decimal("10.01")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1225"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:boolean as source type and xs:decimal as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean("true") castable as xs:decimal</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1226"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Casting from xs:boolean to xs:integer is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean("true") cast as xs:integer ne xs:integer("6789")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1227"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:boolean as source type and xs:integer as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean("true") castable as xs:integer</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1228"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:boolean to xs:duration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean("true") cast as xs:duration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1229"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:boolean as source type and xs:duration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:boolean("true") castable as xs:duration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1230"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:boolean to xs:yearMonthDuration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean("true") cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1231"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:boolean as source type and xs:yearMonthDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:boolean("true") castable as xs:yearMonthDuration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1232"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:boolean to xs:dayTimeDuration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean("true") cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1233"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:boolean as source type and xs:dayTimeDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:boolean("true") castable as xs:dayTimeDuration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1234"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:boolean to xs:dateTime isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean("true") cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1235"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:boolean as source type and xs:dateTime as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:boolean("true") castable as xs:dateTime)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1236"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:boolean to xs:time isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean("true") cast as xs:time</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1237"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:boolean as source type and xs:time as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:boolean("true") castable as xs:time)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1238"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:boolean to xs:date isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean("true") cast as xs:date</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1239"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:boolean as source type and xs:date as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:boolean("true") castable as xs:date)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1240"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:boolean to xs:gYearMonth isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean("true") cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1241"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:boolean as source type and xs:gYearMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:boolean("true") castable as xs:gYearMonth)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1242"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:boolean to xs:gYear isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean("true") cast as xs:gYear</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1243"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:boolean as source type and xs:gYear as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:boolean("true") castable as xs:gYear)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1244"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:boolean to xs:gMonthDay isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean("true") cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1245"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:boolean as source type and xs:gMonthDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:boolean("true") castable as xs:gMonthDay)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1246"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:boolean to xs:gDay isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean("true") cast as xs:gDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1247"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:boolean as source type and xs:gDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:boolean("true") castable as xs:gDay)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1248"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:boolean to xs:gMonth isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean("true") cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1249"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:boolean as source type and xs:gMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:boolean("true") castable as xs:gMonth)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1250"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:boolean to xs:boolean is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean("true") cast as xs:boolean eq xs:boolean("true")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1251"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:boolean as source type and xs:boolean as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean("true") castable as xs:boolean</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1252"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:base64Binary("true")</response-string>
    <description> Casting from xs:boolean to xs:base64Binary isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean("true") cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1253"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:boolean as source type and xs:base64Binary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:boolean("true") castable as xs:base64Binary)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1254"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:boolean to xs:hexBinary isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean("true") cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1255"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:boolean as source type and xs:hexBinary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:boolean("true") castable as xs:hexBinary)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1256"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("true")</response-string>
    <description> Casting from xs:boolean to xs:anyURI isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean("true") cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1257"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:boolean as source type and xs:anyURI as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:boolean("true") castable as xs:anyURI)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1258"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:QName("undefined", "#text")</response-string>
    <description> Casting from xs:boolean to xs:QName isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:boolean("true") cast as xs:QName</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1259"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:boolean as source type and xs:QName as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:boolean("true") castable as xs:QName)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1260"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:boolean as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:boolean("true") castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0080"))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1261"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:base64Binary constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1262"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:base64Binary constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary( "aaaa" , "aaaa" )</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1263"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Verify with &apos;instance of&apos; that the xs:base64Binary constructor function produces values of the correct type. 
      The subsequence() function makes it more difficult for optimizers to take short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence(("dummy", 1.1, xs:base64Binary("aaaa")), 3, 1) instance of xs:base64Binary</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1264"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A simple test exercising the whitespace facet for type xs:base64Binary.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary(" aaaa ") eq xs:base64Binary(" aaaa ")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1265"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> An empty string is a valid lexical representation of xs:base64Binary.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary("") eq xs:base64Binary("")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1266"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Cast a simple xs:untypedAtomic value to "aaaa" .</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary(xs:untypedAtomic( "aaaa" )) eq xs:base64Binary("aaaa")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1267"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0006"))</response-string>
    <description> It is not possible to extract an Effective Boolean Value from the type xs:base64Binary, with the boolean() function.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:base64Binary("aaaa"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0006"))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1268"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:base64Binary to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary("aaaa") cast as xs:untypedAtomic ne xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1269"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:base64Binary as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary("aaaa") castable as xs:untypedAtomic</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1270"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:base64Binary to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary("aaaa") cast as xs:string ne xs:string("an arbitrary string")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1271"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:base64Binary as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary("aaaa") castable as xs:string</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1272"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:base64Binary to xs:float isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary("aaaa") cast as xs:float</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1273"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:base64Binary as source type and xs:float as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:base64Binary("aaaa") castable as xs:float)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1274"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:base64Binary to xs:double isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary("aaaa") cast as xs:double</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1275"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:base64Binary as source type and xs:double as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:base64Binary("aaaa") castable as xs:double)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1276"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:base64Binary to xs:decimal isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary("aaaa") cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1277"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:base64Binary as source type and xs:decimal as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:base64Binary("aaaa") castable as xs:decimal)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1278"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:base64Binary to xs:integer isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary("aaaa") cast as xs:integer</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1279"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:base64Binary as source type and xs:integer as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:base64Binary("aaaa") castable as xs:integer)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1280"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:base64Binary to xs:duration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary("aaaa") cast as xs:duration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1281"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:base64Binary as source type and xs:duration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:base64Binary("aaaa") castable as xs:duration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1282"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:base64Binary to xs:yearMonthDuration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary("aaaa") cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1283"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:base64Binary as source type and xs:yearMonthDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:base64Binary("aaaa") castable as xs:yearMonthDuration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1284"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:base64Binary to xs:dayTimeDuration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary("aaaa") cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1285"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:base64Binary as source type and xs:dayTimeDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:base64Binary("aaaa") castable as xs:dayTimeDuration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1286"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:base64Binary to xs:dateTime isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary("aaaa") cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1287"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:base64Binary as source type and xs:dateTime as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:base64Binary("aaaa") castable as xs:dateTime)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1288"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:base64Binary to xs:time isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary("aaaa") cast as xs:time</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1289"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:base64Binary as source type and xs:time as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:base64Binary("aaaa") castable as xs:time)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1290"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:base64Binary to xs:date isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary("aaaa") cast as xs:date</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1291"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:base64Binary as source type and xs:date as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:base64Binary("aaaa") castable as xs:date)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1292"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:base64Binary to xs:gYearMonth isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary("aaaa") cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1293"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:base64Binary as source type and xs:gYearMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:base64Binary("aaaa") castable as xs:gYearMonth)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1294"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:base64Binary to xs:gYear isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary("aaaa") cast as xs:gYear</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1295"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:base64Binary as source type and xs:gYear as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:base64Binary("aaaa") castable as xs:gYear)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1296"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:base64Binary to xs:gMonthDay isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary("aaaa") cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1297"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:base64Binary as source type and xs:gMonthDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:base64Binary("aaaa") castable as xs:gMonthDay)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1298"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:base64Binary to xs:gDay isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary("aaaa") cast as xs:gDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1299"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:base64Binary as source type and xs:gDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:base64Binary("aaaa") castable as xs:gDay)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1300"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:base64Binary to xs:gMonth isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary("aaaa") cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1301"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:base64Binary as source type and xs:gMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:base64Binary("aaaa") castable as xs:gMonth)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1302"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:base64Binary to xs:boolean isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary("aaaa") cast as xs:boolean</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1303"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:base64Binary as source type and xs:boolean as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:base64Binary("aaaa") castable as xs:boolean)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1304"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Casting from xs:base64Binary to xs:base64Binary is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary("aaaa") cast as xs:base64Binary eq xs:base64Binary("aaaa")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1305"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:base64Binary as source type and xs:base64Binary as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary("aaaa") castable as xs:base64Binary</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1306"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Casting from xs:base64Binary to xs:hexBinary is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary("aaaa") cast as xs:hexBinary ne xs:hexBinary("0FB7")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1307"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:base64Binary as source type and xs:hexBinary as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary("aaaa") castable as xs:hexBinary</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1308"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("aaaa")</response-string>
    <description> Casting from xs:base64Binary to xs:anyURI isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary("aaaa") cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1309"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:base64Binary as source type and xs:anyURI as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:base64Binary("aaaa") castable as xs:anyURI)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1310"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:QName("undefined", "#text")</response-string>
    <description> Casting from xs:base64Binary to xs:QName isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:base64Binary("aaaa") cast as xs:QName</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1311"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:base64Binary as source type and xs:QName as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:base64Binary("aaaa") castable as xs:QName)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1312"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:base64Binary as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:base64Binary("aaaa") castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0080"))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1313"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:hexBinary constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1314"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:hexBinary constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary( "0FB7" , "0FB7" )</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1315"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Verify with &apos;instance of&apos; that the xs:hexBinary constructor function produces values of the correct type. 
      The subsequence() function makes it more difficult for optimizers to take short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence(("dummy", 1.1, xs:hexBinary("0FB7")), 3, 1) instance of xs:hexBinary</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1316"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A simple test exercising the whitespace facet for type xs:hexBinary.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary(" 0FB7 ") eq xs:hexBinary(" 0FB7 ")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1317"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> An empty string is a valid lexical representation of xs:hexBinary.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary("") eq xs:hexBinary("")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1318"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Cast a simple xs:untypedAtomic value to "0FB7" .</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary(xs:untypedAtomic( "0FB7" )) eq xs:hexBinary("0FB7")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1319"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0006"))</response-string>
    <description> It is not possible to extract an Effective Boolean Value from the type xs:hexBinary, with the boolean() function.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:hexBinary("0FB7"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0006"))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1320"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:hexBinary to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary("0FB7") cast as xs:untypedAtomic ne xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1321"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:hexBinary as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary("0FB7") castable as xs:untypedAtomic</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1322"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:hexBinary to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary("0FB7") cast as xs:string ne xs:string("an arbitrary string")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1323"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:hexBinary as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary("0FB7") castable as xs:string</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1324"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:hexBinary to xs:float isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary("0FB7") cast as xs:float</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1325"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:hexBinary as source type and xs:float as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:hexBinary("0FB7") castable as xs:float)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1326"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:hexBinary to xs:double isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary("0FB7") cast as xs:double</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1327"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:hexBinary as source type and xs:double as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:hexBinary("0FB7") castable as xs:double)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1328"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:hexBinary to xs:decimal isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary("0FB7") cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1329"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:hexBinary as source type and xs:decimal as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:hexBinary("0FB7") castable as xs:decimal)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1330"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:hexBinary to xs:integer isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary("0FB7") cast as xs:integer</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1331"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:hexBinary as source type and xs:integer as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:hexBinary("0FB7") castable as xs:integer)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1332"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:hexBinary to xs:duration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary("0FB7") cast as xs:duration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1333"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:hexBinary as source type and xs:duration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:hexBinary("0FB7") castable as xs:duration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1334"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:hexBinary to xs:yearMonthDuration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary("0FB7") cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1335"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:hexBinary as source type and xs:yearMonthDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:hexBinary("0FB7") castable as xs:yearMonthDuration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1336"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:hexBinary to xs:dayTimeDuration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary("0FB7") cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1337"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:hexBinary as source type and xs:dayTimeDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:hexBinary("0FB7") castable as xs:dayTimeDuration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1338"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:hexBinary to xs:dateTime isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary("0FB7") cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1339"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:hexBinary as source type and xs:dateTime as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:hexBinary("0FB7") castable as xs:dateTime)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1340"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:hexBinary to xs:time isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary("0FB7") cast as xs:time</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1341"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:hexBinary as source type and xs:time as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:hexBinary("0FB7") castable as xs:time)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1342"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:hexBinary to xs:date isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary("0FB7") cast as xs:date</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1343"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:hexBinary as source type and xs:date as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:hexBinary("0FB7") castable as xs:date)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1344"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:hexBinary to xs:gYearMonth isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary("0FB7") cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1345"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:hexBinary as source type and xs:gYearMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:hexBinary("0FB7") castable as xs:gYearMonth)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1346"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:hexBinary to xs:gYear isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary("0FB7") cast as xs:gYear</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1347"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:hexBinary as source type and xs:gYear as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:hexBinary("0FB7") castable as xs:gYear)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1348"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:hexBinary to xs:gMonthDay isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary("0FB7") cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1349"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:hexBinary as source type and xs:gMonthDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:hexBinary("0FB7") castable as xs:gMonthDay)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1350"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:hexBinary to xs:gDay isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary("0FB7") cast as xs:gDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1351"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:hexBinary as source type and xs:gDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:hexBinary("0FB7") castable as xs:gDay)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1352"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:hexBinary to xs:gMonth isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary("0FB7") cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1353"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:hexBinary as source type and xs:gMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:hexBinary("0FB7") castable as xs:gMonth)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1354"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:hexBinary to xs:boolean isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary("0FB7") cast as xs:boolean</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1355"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:hexBinary as source type and xs:boolean as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:hexBinary("0FB7") castable as xs:boolean)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1356"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Casting from xs:hexBinary to xs:base64Binary is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary("0FB7") cast as xs:base64Binary ne xs:base64Binary("aaaa")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1357"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:hexBinary as source type and xs:base64Binary as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary("0FB7") castable as xs:base64Binary</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1358"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Casting from xs:hexBinary to xs:hexBinary is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary("0FB7") cast as xs:hexBinary eq xs:hexBinary("0FB7")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1359"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:hexBinary as source type and xs:hexBinary as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary("0FB7") castable as xs:hexBinary</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1360"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("0FB7")</response-string>
    <description> Casting from xs:hexBinary to xs:anyURI isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary("0FB7") cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1361"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:hexBinary as source type and xs:anyURI as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:hexBinary("0FB7") castable as xs:anyURI)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1362"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:QName("undefined", "#text")</response-string>
    <description> Casting from xs:hexBinary to xs:QName isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:hexBinary("0FB7") cast as xs:QName</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1363"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:hexBinary as source type and xs:QName as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:hexBinary("0FB7") castable as xs:QName)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1364"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:hexBinary as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:hexBinary("0FB7") castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0080"))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1365"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:anyURI constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1366"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:anyURI constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI( "http://www.example.com/an/arbitrary/URI.ext" , "http://www.example.com/an/arbitrary/URI.ext" )</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1367"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Verify with &apos;instance of&apos; that the xs:anyURI constructor function produces values of the correct type. 
      The subsequence() function makes it more difficult for optimizers to take short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence(("dummy", 1.1, xs:anyURI("http://www.example.com/an/arbitrary/URI.ext")), 3, 1) instance of xs:anyURI</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1368"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A simple test exercising the whitespace facet for type xs:anyURI.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI(" http://www.example.com/an/arbitrary/URI.ext ") eq xs:anyURI(" http://www.example.com/an/arbitrary/URI.ext ")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1369"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> An empty string is a valid lexical representation of xs:anyURI.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI("") eq xs:anyURI("")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1370"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Cast a simple xs:untypedAtomic value to "http://www.example.com/an/arbitrary/URI.ext" .</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI(xs:untypedAtomic( "http://www.example.com/an/arbitrary/URI.ext" )) 
      eq xs:anyURI("http://www.example.com/an/arbitrary/URI.ext")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1371"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Applying fn:boolean() to a value of type xs:anyURI that has the lexical value 
      &apos; "http://www.example.com/an/arbitrary/URI.ext" &apos; should result in the boolean value true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext"))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1372"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:anyURI to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") cast as xs:untypedAtomic
      ne xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1373"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:anyURI as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:untypedAtomic</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1374"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:anyURI to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") cast as xs:string ne xs:string("an arbitrary string")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1375"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:anyURI as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:string</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1376"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:anyURI to xs:float isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") cast as xs:float</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1377"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:anyURI as source type and xs:float as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:float)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1378"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:anyURI to xs:double isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") cast as xs:double</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1379"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:anyURI as source type and xs:double as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:double)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1380"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:anyURI to xs:decimal isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1381"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:anyURI as source type and xs:decimal as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:decimal)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1382"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:anyURI to xs:integer isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") cast as xs:integer</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1383"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:anyURI as source type and xs:integer as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:integer)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1384"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:anyURI to xs:duration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") cast as xs:duration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1385"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:anyURI as source type and xs:duration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:duration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1386"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:anyURI to xs:yearMonthDuration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1387"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:anyURI as source type and xs:yearMonthDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:yearMonthDuration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1388"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:anyURI to xs:dayTimeDuration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1389"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:anyURI as source type and xs:dayTimeDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:dayTimeDuration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1390"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:anyURI to xs:dateTime isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1391"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:anyURI as source type and xs:dateTime as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:dateTime)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1392"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:anyURI to xs:time isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") cast as xs:time</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1393"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:anyURI as source type and xs:time as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:time)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1394"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:anyURI to xs:date isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") cast as xs:date</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1395"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:anyURI as source type and xs:date as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:date)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1396"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:anyURI to xs:gYearMonth isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1397"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:anyURI as source type and xs:gYearMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:gYearMonth)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1398"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:anyURI to xs:gYear isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") cast as xs:gYear</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1399"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:anyURI as source type and xs:gYear as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:gYear)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1400"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:anyURI to xs:gMonthDay isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1401"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:anyURI as source type and xs:gMonthDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:gMonthDay)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1402"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:anyURI to xs:gDay isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") cast as xs:gDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1403"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:anyURI as source type and xs:gDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:gDay)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1404"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:anyURI to xs:gMonth isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1405"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:anyURI as source type and xs:gMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:gMonth)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1406"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:anyURI to xs:boolean isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") cast as xs:boolean</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1407"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:anyURI as source type and xs:boolean as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:boolean)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1408"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:anyURI to xs:base64Binary isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1409"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:anyURI as source type and xs:base64Binary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:base64Binary)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1410"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:anyURI to xs:hexBinary isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1411"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:anyURI as source type and xs:hexBinary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:hexBinary)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1412"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:anyURI to xs:anyURI is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") cast as xs:anyURI eq xs:anyURI("http://www.example.com/an/arbitrary/URI.ext")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1413"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:anyURI as source type and xs:anyURI as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:anyURI</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1414"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:QName("undefined", "#text")</response-string>
    <description> Casting from xs:anyURI to xs:QName isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") cast as xs:QName</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1415"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:anyURI as source type and xs:QName as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:QName)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1416"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:anyURI as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:anyURI("http://www.example.com/an/arbitrary/URI.ext") castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0080"))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1417"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:QName constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1418"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:QName("ncname", "ncname")</response-string>
    <description> The xs:QName constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName( "ncname" , "ncname" )</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1419"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Verify with &apos;instance of&apos; that the xs:QName constructor function produces values 
        of the correct type. The subsequence() function makes it more difficult for optimizers to take 
        short cuts based on static type information.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence(("dummy", 1.1, xs:QName("ncname")), 3, 1) instance of xs:QName</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1420"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> A simple test exercising the whitespace facet for type xs:QName.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName(" ncname ") eq xs:QName(" ncname ")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1421"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> An empty string is not a valid lexical representation of xs:QName.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName("")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1422"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0006"))</response-string>
    <description> It is not possible to extract an Effective Boolean Value from the type xs:QName, with the boolean() function.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean(xs:QName("ncname"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0006"))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1423"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:QName to xs:untypedAtomic is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName("ncname") cast as xs:untypedAtomic ne xs:untypedAtomic("an arbitrary string(untypedAtomic source)")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1424"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:QName as source type and xs:untypedAtomic as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName("ncname") castable as xs:untypedAtomic</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1425"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Casting from xs:QName to xs:string is allowed and should always succeed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName("ncname") cast as xs:string ne xs:string("an arbitrary string")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1426"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:QName as source type and xs:string as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName("ncname") castable as xs:string</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1427"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:QName to xs:float isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName("ncname") cast as xs:float</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1428"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:QName as source type and xs:float as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:QName("ncname") castable as xs:float)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1429"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:QName to xs:double isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName("ncname") cast as xs:double</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1430"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:QName as source type and xs:double as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:QName("ncname") castable as xs:double)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1431"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:QName to xs:decimal isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName("ncname") cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1432"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:QName as source type and xs:decimal as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:QName("ncname") castable as xs:decimal)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1433"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:QName to xs:integer isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName("ncname") cast as xs:integer</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1434"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:QName as source type and xs:integer as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:QName("ncname") castable as xs:integer)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1435"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:QName to xs:duration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName("ncname") cast as xs:duration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1436"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:QName as source type and xs:duration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:QName("ncname") castable as xs:duration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1437"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:QName to xs:yearMonthDuration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName("ncname") cast as xs:yearMonthDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1438"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:QName as source type and xs:yearMonthDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:QName("ncname") castable as xs:yearMonthDuration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1439"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:QName to xs:dayTimeDuration isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName("ncname") cast as xs:dayTimeDuration</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1440"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:QName as source type and xs:dayTimeDuration as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:QName("ncname") castable as xs:dayTimeDuration)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1441"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:QName to xs:dateTime isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName("ncname") cast as xs:dateTime</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1442"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:QName as source type and xs:dateTime as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:QName("ncname") castable as xs:dateTime)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1443"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:QName to xs:time isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName("ncname") cast as xs:time</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1444"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:QName as source type and xs:time as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:QName("ncname") castable as xs:time)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1445"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:QName to xs:date isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName("ncname") cast as xs:date</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1446"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:QName as source type and xs:date as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:QName("ncname") castable as xs:date)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1447"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:QName to xs:gYearMonth isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName("ncname") cast as xs:gYearMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1448"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:QName as source type and xs:gYearMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:QName("ncname") castable as xs:gYearMonth)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1449"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:gYear("")</response-string>
    <description> Casting from xs:QName to xs:gYear isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName("ncname") cast as xs:gYear</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1450"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:QName as source type and xs:gYear as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:QName("ncname") castable as xs:gYear)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1451"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:QName to xs:gMonthDay isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName("ncname") cast as xs:gMonthDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1452"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:QName as source type and xs:gMonthDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:QName("ncname") castable as xs:gMonthDay)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1453"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:QName to xs:gDay isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName("ncname") cast as xs:gDay</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1454"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:QName as source type and xs:gDay as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:QName("ncname") castable as xs:gDay)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1455"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:QName to xs:gMonth isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName("ncname") cast as xs:gMonth</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1456"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:QName as source type and xs:gMonth as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:QName("ncname") castable as xs:gMonth)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1457"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:QName to xs:boolean isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName("ncname") cast as xs:boolean</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1458"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:QName as source type and xs:boolean as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:QName("ncname") castable as xs:boolean)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1459"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:base64Binary("")</response-string>
    <description> Casting from xs:QName to xs:base64Binary isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName("ncname") cast as xs:base64Binary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1460"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:QName as source type and xs:base64Binary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:QName("ncname") castable as xs:base64Binary)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1461"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Casting from xs:QName to xs:hexBinary isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName("ncname") cast as xs:hexBinary</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1462"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:QName as source type and xs:hexBinary as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:QName("ncname") castable as xs:hexBinary)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1463"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("")</response-string>
    <description> Casting from xs:QName to xs:anyURI isn&apos;t allowed.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName("ncname") cast as xs:anyURI</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1464"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:QName as source type and xs:anyURI as target type should always evaluate to false.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:QName("ncname") castable as xs:anyURI)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1465"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> &apos;castable as&apos; involving xs:QName as source type and xs:QName as target type should always evaluate to true.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:QName("ncname") castable as xs:QName</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1466"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> &apos;castable as&apos; involving xs:QName as sourceType and xs:NOTATION should fail due to it involving xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:QName("ncname") castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0080"))</result-string>
    <result>
      <error code="XPST0080"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1467"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:NOTATION constructor function must be passed exactly one argument, not zero.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:NOTATION()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1468"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> The xs:NOTATION constructor function must be passed exactly one argument, not two.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:NOTATION( "prefix:local" , "prefix:local" )</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1469"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION("prefix:local") castable as xs:untypedAtomic)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1470"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION("prefix:local") castable as xs:string)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1471"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION("prefix:local") castable as xs:float)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1472"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION("prefix:local") castable as xs:double)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1473"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION("prefix:local") castable as xs:decimal)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1474"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION("prefix:local") castable as xs:integer)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1475"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION("prefix:local") castable as xs:duration)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1476"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION("prefix:local") castable as xs:yearMonthDuration)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1477"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION("prefix:local") castable as xs:dayTimeDuration)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1478"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION("prefix:local") castable as xs:dateTime)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1479"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION("prefix:local") castable as xs:time)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1480"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION("prefix:local") castable as xs:date)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1481"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION("prefix:local") castable as xs:gYearMonth)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1482"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION("prefix:local") castable as xs:gYear)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1483"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION("prefix:local") castable as xs:gMonthDay)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1484"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION("prefix:local") castable as xs:gDay)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1485"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION("prefix:local") castable as xs:gMonth)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1486"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION("prefix:local") castable as xs:boolean)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1487"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION("prefix:local") castable as xs:base64Binary)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1488"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION("prefix:local") castable as xs:hexBinary)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1489"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION("prefix:local") castable as xs:anyURI)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1490"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION("prefix:local") castable as xs:QName)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K-SeqExprCast-1491"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> No constructor function exists for xs:NOTATION.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:NOTATION("prefix:local") castable as xs:NOTATION)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0080"))</result-string>
    <result>
      <any-of>
        <error code="XPST0017"/>
        <error code="XPST0080"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Cast to xs:QName where the prefix is declared in the prolog.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <environment>
      <namespace prefix="myPrefix" uri="http://example.com/"/>
    </environment>
    <test>"myPrefix:ncname" cast as xs:QName eq QName("http://example.com/", "anotherPrefix:ncname")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Casting the empty sequence to xs:QName? is ok.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(() cast as xs:QName?)</test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0005"))</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:nonPositiveInteger("0")</response-string>
    <description> Pass a small, the smallest if such a limit exists, to nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger("0")</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:negativeInteger("-1")</response-string>
    <description> Pass a small, the smallest if such a limit exists, to negativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:negativeInteger("-1")</test>
    <result-string>xs:integer("-1")</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Pass a small, the smallest if such a limit exists, to long.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:long("9223372036854775807")</test>
    <result-string>xs:integer("9223372036854775807")</result-string>
    <result>
      <assert-eq>9223372036854775807</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:int("2147483647")</response-string>
    <description> Pass a small, the smallest if such a limit exists, to int.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:int("2147483647")</test>
    <result-string>xs:integer("2147483647")</result-string>
    <result>
      <assert-eq>2147483647</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-7"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:short("-32768")</response-string>
    <description> Pass a small, the smallest if such a limit exists, to short.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:short("-32768")</test>
    <result-string>xs:integer("-32768")</result-string>
    <result>
      <assert-eq>-32768</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-8"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:byte("-128")</response-string>
    <description> Pass a small, the smallest if such a limit exists, to byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte("-128")</test>
    <result-string>xs:integer("-128")</result-string>
    <result>
      <assert-eq>-128</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-9"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:nonNegativeInteger("0")</response-string>
    <description> Pass a small, the smallest if such a limit exists, to nonNegativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonNegativeInteger("0")</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-10"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:unsignedLong("0")</response-string>
    <description> Pass a small, the smallest if such a limit exists, to unsignedLong.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedLong("0")</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-11"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:unsignedInt("0")</response-string>
    <description> Pass a small, the smallest if such a limit exists, to unsignedInt.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt("0")</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-12"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:unsignedByte("0")</response-string>
    <description> Pass a small, the smallest if such a limit exists, to unsignedByte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedByte("0")</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-13"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:unsignedShort("0")</response-string>
    <description> Pass a small, the smallest if such a limit exists, to unsignedShort.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedShort("0")</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-14"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:positiveInteger("1")</response-string>
    <description> Pass a small, the smallest if such a limit exists, to positiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:positiveInteger("1")</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-15"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:nonPositiveInteger("-999999999999999999")</response-string>
    <description> Pass a large, the largest if such a limit exists, to nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger("-999999999999999999")</test>
    <result-string>xs:integer("-999999999999999999")</result-string>
    <result>
      <assert-eq>-999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-16"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:negativeInteger("-999999999999999999")</response-string>
    <description> Pass a large, the largest if such a limit exists, to negativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:negativeInteger("-999999999999999999")</test>
    <result-string>xs:integer("-999999999999999999")</result-string>
    <result>
      <assert-eq>-999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-17"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:long("-9223372036854776000")</response-string>
    <description> Pass a large, the largest if such a limit exists, to long.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O&apos;Neil Delpratt" change="Bug #19782 - change expected result" on="2012-11-08"/>
    <test>xs:long("-9223372036854775808")</test>
    <result-string>xs:integer("-9223372036854775808")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOAR0002"))</result-string>
    <result>
      <any-of>
        <assert-eq>-9223372036854775808</assert-eq>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-18"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:int("-2147483648")</response-string>
    <description> Pass a large, the largest if such a limit exists, to int.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:int("-2147483648")</test>
    <result-string>xs:integer("-2147483648")</result-string>
    <result>
      <assert-eq>-2147483648</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-19"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:short("32767")</response-string>
    <description> Pass a large, the largest if such a limit exists, to short.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:short("32767")</test>
    <result-string>xs:integer("32767")</result-string>
    <result>
      <assert-eq>32767</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-20"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:byte("127")</response-string>
    <description> Pass a large, the largest if such a limit exists, to byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte("127")</test>
    <result-string>xs:integer("127")</result-string>
    <result>
      <assert-eq>127</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-21"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:nonNegativeInteger("999999999999999999")</response-string>
    <description> Pass a large, the largest if such a limit exists, to nonNegativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonNegativeInteger("999999999999999999")</test>
    <result-string>xs:integer("999999999999999999")</result-string>
    <result>
      <assert-eq>999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-22"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:unsignedLong("18446744073709552000")</response-string>
    <description> Pass a large, the largest if such a limit exists, to unsignedLong.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedLong("18446744073709551615")</test>
    <result-string>xs:integer("18446744073709551615")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOAR0002"))</result-string>
    <result>
      <any-of>
        <assert-eq>18446744073709551615</assert-eq>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-23"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:unsignedInt("4294967295")</response-string>
    <description> Pass a large, the largest if such a limit exists, to unsignedInt.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt("4294967295")</test>
    <result-string>xs:integer("4294967295")</result-string>
    <result>
      <assert-eq>4294967295</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-24"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:unsignedShort("65535")</response-string>
    <description> Pass a large, the largest if such a limit exists, to unsignedShort.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedShort("65535")</test>
    <result-string>xs:integer("65535")</result-string>
    <result>
      <assert-eq>65535</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-25"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:unsignedByte("255")</response-string>
    <description> Pass a large, the largest if such a limit exists, to unsignedByte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedByte("255")</test>
    <result-string>xs:integer("255")</result-string>
    <result>
      <assert-eq>255</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-26"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:positiveInteger("999999999999999999")</response-string>
    <description> Pass a large, the largest if such a limit exists, to positiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:positiveInteger("999999999999999999")</test>
    <result-string>xs:integer("999999999999999999")</result-string>
    <result>
      <assert-eq>999999999999999999</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-27"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast fn:false() to nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger(false())</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-28"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast fn:true() to nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger(true())</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-29"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast fn:false() to negativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:negativeInteger(false())</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-30"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast fn:true() to negativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:negativeInteger(true())</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-31"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast fn:false() to long.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:long(false())</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-32"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast fn:true() to long.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:long(true())</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-33"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast fn:false() to int.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:int(false())</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-34"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast fn:true() to int.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:int(true())</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-35"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast fn:false() to short.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:short(false())</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-36"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast fn:true() to short.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:short(true())</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-37"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast fn:false() to byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte(false())</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-38"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast fn:true() to byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte(true())</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-39"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast fn:false() to nonNegativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonNegativeInteger(false())</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-40"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast fn:true() to nonNegativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonNegativeInteger(true())</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-41"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast fn:false() to unsignedLong.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedLong(false())</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-42"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast fn:true() to unsignedLong.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedLong(true())</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-43"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast fn:false() to unsignedInt.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt(false())</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-44"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast fn:true() to unsignedInt.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt(true())</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-45"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast fn:false() to unsignedShort.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedShort(false())</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-46"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast fn:true() to unsignedShort.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedShort(true())</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-47"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast fn:false() to unsignedByte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedByte(false())</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-48"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast fn:true() to unsignedByte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedByte(true())</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-49"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast fn:false() to positiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:positiveInteger(false())</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-50"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast fn:true() to positiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:positiveInteger(true())</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-51"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> -0 is an invalid value for xs:negativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:negativeInteger("-0")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-52"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:unsignedLong("0")</response-string>
    <description> The minus sign is allowed unsignedLong. 
      S4S is considered normative, and XSD 1.1 adjusted the prose to say the same.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedLong("-0")</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-53"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:unsignedInt("0")</response-string>
    <description> The minus sign is allowed unsignedInt. 
      S4S is considered normative, and XSD 1.1 adjusted the prose to say the same.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt("-0")</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-54"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:unsignedShort("0")</response-string>
    <description> The minus sign is allowed unsignedShort. 
      S4S is considered normative, and XSD 1.1 adjusted the prose to say the same.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedShort("-0")</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-55"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:unsignedByte("0")</response-string>
    <description> The minus sign is allowed in unsignedByte. 
      S4S is considered normative, and XSD 1.1 adjusted the prose to say the same.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedByte("-0")</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-56"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> The minus sign is prohibited in positiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:positiveInteger("-0")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-57"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> The minus sign is prohibited in positiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:positiveInteger("-1")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-58"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:unsignedLong("0")</response-string>
    <description> The plus sign is allowed in unsignedLong. 
      S4S is considered normative, and XSD 1.1 adjusted the prose to say the same.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedLong("+0")</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-59"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:unsignedInt("0")</response-string>
    <description> The plus sign is allowed in unsignedInt. 
      S4S is considered normative, and XSD 1.1 adjusted the prose to say the same.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt("+0")</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-60"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:unsignedShort("0")</response-string>
    <description> The plus sign is allowed in unsignedShort. 
      S4S is considered normative, and XSD 1.1 adjusted the prose to say the same.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedShort("+0")</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-61"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:unsignedByte("0")</response-string>
    <description> The plus sign is allowed in unsignedByte. 
      S4S is considered normative, and XSD 1.1 adjusted the prose to say the same.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedByte("+0")</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-62"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> The plus sign is prohibited in negativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:negativeInteger("+0")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-63"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> The plus sign is prohibited in nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger("+1")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-64"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:nonNegativeInteger("0")</response-string>
    <description> The minus sign is allowed in nonNegativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonNegativeInteger("-0")</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-65"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:negativeInteger("-1")</response-string>
    <description> The minus sign is allowed in negativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:negativeInteger("-1")</test>
    <result-string>xs:integer("-1")</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-66"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:nonPositiveInteger("0")</response-string>
    <description> The minus sign is allowed in nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger("-0")</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-67"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:nonPositiveInteger("-1")</response-string>
    <description> The minus sign is allowed in nonPositiveInteger(#2).</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger("-1")</test>
    <result-string>xs:integer("-1")</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-68"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:positiveInteger("1")</response-string>
    <description> Ensure a plus sign is accepted for positiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:positiveInteger("+1")</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-69"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:nonNegativeInteger("1")</response-string>
    <description> Ensure a plus sign is accepted for nonNegativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonNegativeInteger("+1")</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-70"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Ensure a plus sign is accepted for nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger("+0")</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-71"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Multiple minus signs is disallowed in nonNegativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonNegativeInteger("--0")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-72"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Multiple minus signs is disallowed in negativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:negativeInteger("--1")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-73"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Multiple minus signs is disallowed in nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger("--0")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-74"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Multiple minus signs is disallowed in nonPositiveInteger(#2).</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger("--1")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-75"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Multiple plus signs is allowed in positiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:positiveInteger("++1")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-76"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Multiple plus signs is allowed in nonNegativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonNegativeInteger("++1")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-77"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Multiple plus signs is allowed in nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger("++0")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-78"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:long("-9223372036854776000")</response-string>
    <description> Cast a too small value to long.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:long("-9223372036854775809")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOAR0002"))</result-string>
    <result>
      <any-of>
        <error code="FORG0001"/>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-79"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast a too small value to int.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:int("-2147483649")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-80"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast a too small value to short.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:short("-32769")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-81"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast a too small value to byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte("-129")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-82"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast a too small value to nonNegativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonNegativeInteger("-1")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-83"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast a too small value to unsignedLong.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedLong("-1")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-84"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast a too small value to unsignedInt.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt("-1")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-85"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast a too small value to unsignedShort.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedShort("-1")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-86"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast a too small value to unsignedByte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedByte("-1")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-87"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast a too small value to positiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:positiveInteger("-1")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-88"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast a too large value to nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger("1")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-89"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast a too large value to negativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:negativeInteger("0")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-90"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast a too large value to long.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:long("9223372036854775808")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOAR0002"))</result-string>
    <result>
      <any-of>
        <error code="FORG0001"/>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-91"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast a too large value to int.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:int("2147483648")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-92"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast a too large value to short.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:short("32768")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-93"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast a too large value to byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte("128")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-94"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Pass an empty string to nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger("")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-95"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Pass an empty string to negativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:negativeInteger("")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-96"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Pass an empty string to long.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:long("")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-97"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Pass an empty string to int.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:int("")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-98"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Pass an empty string to short.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:short("")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-99"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Pass an empty string to byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte("")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-100"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Pass an empty string to nonNegativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonNegativeInteger("")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-101"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Pass an empty string to unsignedLong.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedLong("")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-102"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Pass an empty string to unsignedInt.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt("")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-103"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Pass an empty string to unsignedByte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedByte("")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-104"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Pass an empty string to unsignedShort.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedShort("")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-105"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Pass an empty string to positiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:positiveInteger("")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-106"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Fractions are disallowed in nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger("-3.0")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-107"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Fractions are disallowed in negativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:negativeInteger("-3.0")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-108"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Fractions are disallowed in long.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:long("3.0")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-109"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Fractions are disallowed in int.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:int("3.0")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-110"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Fractions are disallowed in short.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:short("3.0")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-111"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Fractions are disallowed in byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte("3.0")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-112"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Fractions are disallowed in nonNegativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonNegativeInteger("3.0")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-113"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Fractions are disallowed in unsignedLong.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedLong("3.0")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-114"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Fractions are disallowed in unsignedInt.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt("3.0")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-115"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Fractions are disallowed in unsignedByte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedByte("3.0")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-116"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Fractions are disallowed in unsignedShort.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedShort("3.0")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-117"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Fractions are disallowed in positiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:positiveInteger("3.0")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-118"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Space between the sign and the digits is disallowed for nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger("- 0")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-119"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Space between the sign and the digits is disallowed for nonPositiveInteger(#2).</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger("+ 0")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-120"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Space between the sign and the digits is disallowed for negativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:negativeInteger("- 3")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-121"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Space between the sign and the digits is disallowed for long.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:long("+ 5")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-122"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Space between the sign and the digits is disallowed for int.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:int("+ 5")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-123"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Space between the sign and the digits is disallowed for short.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:short("+ 5")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-124"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Space between the sign and the digits is disallowed for byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte("+ 5")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-125"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Space between the sign and the digits is disallowed for long.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:long("- 5")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-126"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Space between the sign and the digits is disallowed for int.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:int("- 5")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-127"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Space between the sign and the digits is disallowed for short.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:short("- 5")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-128"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Space between the sign and the digits is disallowed for byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte("- 5")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-129"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Space between the sign and the digits is disallowed for nonNegativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonNegativeInteger("+ 0")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-130"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Space between the sign and the digits is disallowed for nonNegativeInteger(#2).</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonNegativeInteger("- 0")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-131"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Space between the sign and the digits is disallowed for positiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:positiveInteger("+ 3")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-132"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:nonPositiveInteger("-1")</response-string>
    <description> Pass preceding zeros to nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger("-000000001")</test>
    <result-string>xs:integer("-1")</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-133"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:nonPositiveInteger("0")</response-string>
    <description> Pass preceding zeros to nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger("-000000000")</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-134"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:negativeInteger("-1")</response-string>
    <description> Pass preceding zeros to negativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:negativeInteger("-000000001")</test>
    <result-string>xs:integer("-1")</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-135"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:long("1")</response-string>
    <description> Pass preceding zeros to long.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:long("000000001")</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-136"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:int("1")</response-string>
    <description> Pass preceding zeros to int.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:int("000000001")</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-137"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:short("1")</response-string>
    <description> Pass preceding zeros to short.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:short("000000001")</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-138"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:byte("1")</response-string>
    <description> Pass preceding zeros to byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte("000000001")</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-139"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:nonNegativeInteger("1")</response-string>
    <description> Pass preceding zeros to nonNegativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonNegativeInteger("000000001")</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-140"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:unsignedLong("1")</response-string>
    <description> Pass preceding zeros to unsignedLong.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedLong("000000001")</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-141"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:unsignedInt("1")</response-string>
    <description> Pass preceding zeros to unsignedInt.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt("000000001")</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-142"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:unsignedByte("1")</response-string>
    <description> Pass preceding zeros to unsignedByte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedByte("000000001")</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-143"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:unsignedShort("1")</response-string>
    <description> Pass preceding zeros to unsignedShort.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedShort("000000001")</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-144"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:positiveInteger("1")</response-string>
    <description> Pass preceding zeros to positiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:positiveInteger("000000001")</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-145"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Hexa-decimal notation isn&apos;t allowed in nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger("0x0")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-146"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Hexa-decimal notation isn&apos;t allowed in negativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:negativeInteger("-0x1")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-147"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Hexa-decimal notation isn&apos;t allowed in long.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:long("0x9223372036854775807")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-148"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Hexa-decimal notation isn&apos;t allowed in int.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:int("0x2147483647")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-149"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Hexa-decimal notation isn&apos;t allowed in short.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:short("-0x32768")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-150"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Hexa-decimal notation isn&apos;t allowed in byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte("-0x128")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-151"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Hexa-decimal notation isn&apos;t allowed in nonNegativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonNegativeInteger("0x0")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-152"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Hexa-decimal notation isn&apos;t allowed in unsignedLong.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedLong("0x0")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-153"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Hexa-decimal notation isn&apos;t allowed in unsignedInt.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt("0x0")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-154"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Hexa-decimal notation isn&apos;t allowed in unsignedByte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedByte("0x0")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-155"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Hexa-decimal notation isn&apos;t allowed in unsignedShort.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedShort("0x0")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-156"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Hexa-decimal notation isn&apos;t allowed in positiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:positiveInteger("0x1")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-157"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast fn:false() to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language(false())</test>
    <result-string>xs:string("false")</result-string>
    <result>
      <assert-string-value>false</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-158"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast fn:true() to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language(true())</test>
    <result-string>xs:string("true")</result-string>
    <result>
      <assert-string-value>true</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-159"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast an empty string to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language("")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-160"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast a too long string to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language("abcdefjhl")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-161"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast string with invalid characters to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language("1")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-162"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast string with invalid characters to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language("a1a")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-163"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast string with invalid characters to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language("a.a")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-164"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast string with invalid characters to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language("a*a")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-165"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast string with invalid characters to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language("abc-")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-166"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast string with invalid characters to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language("abc--ab")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-167"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast string with invalid characters to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language("abc-ab-")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-168"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast string with invalid characters to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language("abc-")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-169"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast string with invalid characters to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language("abc-abcdefikl")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-170"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast string with invalid characters to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language("abc-abcdef.k")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-171"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast string with invalid characters to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language("abc-ab1efikl")</test>
    <result-string>xs:string("abc-ab1efikl")</result-string>
    <result>
      <assert-string-value>abc-ab1efikl</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-172"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast string with invalid characters to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language("abc-a-1b1efikl")</test>
    <result-string>xs:string("abc-a-1b1efikl")</result-string>
    <result>
      <assert-string-value>abc-a-1b1efikl</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-173"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast string with invalid characters to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language("abc-a-1-1b1efil")</test>
    <result-string>xs:string("abc-a-1-1b1efil")</result-string>
    <result>
      <assert-string-value>abc-a-1-1b1efil</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-174"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast string with invalid characters to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language("abc-a-1-1b01efil")</test>
    <result-string>xs:string("abc-a-1-1b01efil")</result-string>
    <result>
      <assert-string-value>abc-a-1-1b01efil</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-175"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast an integer to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language(1)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-176"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast a short to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language(xs:short("1"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-177"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast a xs:date to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language(current-date())</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-178"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast a xs:time to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language(current-time())</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-179"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast a xs:dateTime to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language(current-dateTime())</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-180"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> No function by name xs:name exists.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:name("input")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-181"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Pass invalid input to xs:Name.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:Name("1abc")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-182"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Pass invalid input to xs:Name.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:Name("ab\c")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-183"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Pass invalid input to xs:Name.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:Name("ab|")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-184"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Pass invalid input to xs:Name.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:Name("a c")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-185"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Pass invalid input to xs:Name.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:Name("")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-186"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Pass tricky, valid input to xs:Name.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:Name("::::")</test>
    <result-string>xs:string("::::")</result-string>
    <result>
      <assert-string-value>::::</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-187"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Pass tricky, valid input to xs:Name.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:Name("_")</test>
    <result-string>xs:string("_")</result-string>
    <result>
      <assert-string-value>_</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-188"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Pass tricky, valid input to xs:Name.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:Name(":")</test>
    <result-string>xs:string(":")</result-string>
    <result>
      <assert-string-value>:</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-189"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Pass tricky, valid input to xs:Name.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:Name("a")</test>
    <result-string>xs:string("a")</result-string>
    <result>
      <assert-string-value>a</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-190"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Pass tricky, valid input to xs:Name.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:Name(" a ")</test>
    <result-string>xs:string("a")</result-string>
    <result>
      <assert-string-value>a</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-191"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Pass tricky, valid input to xs:Name.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:Name("a1123-_--__-__--....-.--.-..12309asd")</test>
    <result-string>xs:string("a1123-_--__-__--....-.--.-..12309asd")</result-string>
    <result>
      <assert-string-value>a1123-_--__-__--....-.--.-..12309asd</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-192"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Pass an empty string to normalizedString.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:normalizedString("")</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-193"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Pass an empty string to token.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:token("")</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-194"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Pass an empty string to language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language("")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-195"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Pass an empty string to NMTOKEN.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:NMTOKEN("")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-196"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Pass an empty string to Name.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:Name("")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-197"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Pass an empty string to NCName.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:NCName("")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-198"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Pass an empty string to ID.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:ID("")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-199"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Pass an empty string to IDREF.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:IDREF("")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-200"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Pass an empty string to ENTITY.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:ENTITY("")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-201"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> When casting to xs:QName, the declared default element namespace is considered.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <environment>
      <namespace prefix="" uri="http://example.com/defelementns"/>
    </environment>
    <test>namespace-uri-from-QName(xs:QName("ncname"))</test>
    <result-string>xs:string("http://example.com/defelementns")</result-string>
    <result>
      <assert-string-value>http://example.com/defelementns</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-202"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Use complex input to xs:NMTOKEN.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:NMTOKEN(" ::::...:SDA21455313 ")</test>
    <result-string>xs:string("::::...:SDA21455313")</result-string>
    <result>
      <assert-string-value>::::...:SDA21455313</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-203"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Whitespace is disallowed inside NMOKEN.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:NMTOKEN(" f f")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-204"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> The empty string is invalid in xs:NMTOKEN.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:NMTOKEN("")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-205"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> The empty string is invalid in xs:NMTOKEN(#2).</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:NMTOKEN(" ")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-206"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Pass a single semi colon to xs:NMTOKEN.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:NMTOKEN(";")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-207"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("http:\\invalidURI\someURI")</response-string>
    <description> Construct an xs:anyURI from an invalid string. 
      However, in FO 17.1.1, it is said that "For xs:anyURI, the extent to which an 
      implementation validates the lexical form of xs:anyURI is implementation dependent.".</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI("http:\\invalidURI\someURI")</test>
    <result-string>xs:string("http:\\invalidURI\someURI")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <any-of>
        <assert-string-value>http:\\invalidURI\someURI</assert-string-value>
        <error code="FORG0001"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-208"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Use a large chunk of whitespace in an xs:anyURI.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>concat("b", xs:anyURI(" "), "b")</test>
    <result-string>xs:string("bb")</result-string>
    <result>
      <assert-string-value>bb</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-209"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("")</response-string>
    <description> Ensure that a large Unicode codepoint is handled correctly in xs:anyURI.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI("")</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-210"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("http://www.example.com/file%GF.html")</response-string>
    <description> &apos;%&apos; is not a disallowed character and therefore it&apos;s not encoded 
      before being considered for RFC 2396 validness.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI("http://www.example.com/file%GF.html")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-211"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> No type by name xs:anyAtomic exists.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyAtomic("1")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-212"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> No type by name xs:anyAtomic exists(2).</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyAtomic("1")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-213"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:double("52")</response-string>
    <description> Cast an xs:positiveInteger value to xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(xs:positiveInteger("52"))</test>
    <result-string>xs:integer("52")</result-string>
    <result>
      <assert-eq>52</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-214"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:double("-1.87391441E9")</response-string>
    <description> Cast an xs:int value to xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(xs:int("-1873914410"))</test>
    <result-string>xs:string("-1.87391441E9")</result-string>
    <result>
      <assert-string-value>-1.87391441E9</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-215"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;Inf&apos; is not a valid value for xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double("Inf")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-216"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;Inf&apos; is not a valid value for xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float("Inf")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-217"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;-Inf&apos; is not a valid value for xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double("-Inf")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-218"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;-Inf&apos; is not a valid value for xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float("-Inf")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-219"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;+Inf&apos; is not a valid value for xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double("+Inf")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-220"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;+Inf&apos; is not a valid value for xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float("+Inf")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-221"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Whitespace is ignored for xs:float&apos;s lexical space.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(" NaN ")</test>
    <result-string>xs:string("NaN")</result-string>
    <result>
      <assert-string-value>NaN</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-222"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Whitespace is ignored for xs:double&apos;s lexical space.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(" NaN ")</test>
    <result-string>xs:string("NaN")</result-string>
    <result>
      <assert-string-value>NaN</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-223"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Whitespace is ignored for xs:float&apos;s lexical space(#2).</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(" INF ")</test>
    <result-string>xs:string("INF")</result-string>
    <result>
      <assert-string-value>INF</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-224"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Whitespace is ignored for xs:double&apos;s lexical space(#2).</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(" INF ")</test>
    <result-string>xs:string("INF")</result-string>
    <result>
      <assert-string-value>INF</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-225"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;nan&apos; is not a valid value for xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double("nan")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-226"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;nan&apos; is not a valid value for xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float("nan")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-227"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;- INF&apos; is not a valid value for xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double("- INF")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-228"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;- INF&apos; is not a valid value for xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float("- INF")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-229"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;+ INF&apos; is not a valid value for xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double("+ INF")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-230"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;+ INF&apos; is not a valid value for xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float("+ INF")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-231"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;+INF&apos; is not a valid value for xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O&apos;Neil Delpratt, Saxonica" change="Bug fix for #21263 - added dependency to xsd-version 1.0" on="2013-03-20"/>
    <dependency type="xsd-version" value="1.0"/>
    <test>xs:double("+INF")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-231a"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Test derived from K2-SeqExprCast-231 &apos;+INF&apos; is a valid value for xs:double under xsd-version  1.1.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O&apos;Neil Delpratt, Saxonica" change="Bug fix for #21263 - added dependency to xsd-version 1.0" on="2013-03-20"/>
    <modified by="Michael Kay" change="See bug 21263. Use string-value" on="2013-04-09"/>
    <dependency type="xsd-version" value="1.1"/>
    <test>xs:double("+INF")</test>
    <result-string>xs:string("INF")</result-string>
    <result>
      <assert-string-value>INF</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-232"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;+INF&apos; is not a valid value for xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O&apos;Neil Delpratt" change="Bug fix for #21263 - added the dependency xsd-version 1.0" on="2013-03-20"/>
    <dependency type="xsd-version" value="1.0"/>
    <test>xs:float("+INF")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-232a"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;+INF&apos; is a valid value for xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <modified by="O&apos;Neil Delpratt, Saxonica" change="Bug fix for #21263 - added dependency to xsd-version 1.0" on="2013-03-20"/>
    <modified by="Michael Kay" change="See bug 21263. Use string-value" on="2013-04-09"/>
    <dependency type="xsd-version" value="1.1"/>
    <test>xs:float("+INF")</test>
    <result-string>xs:string("INF")</result-string>
    <result>
      <assert-string-value>INF</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-233"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;Inf&apos; is not a valid value for xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal("Inf")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-234"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;-Inf&apos; is not a valid value for xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal("-Inf")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-235"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;+Inf&apos; is not a valid value for xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal("+Inf")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-236"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;nan&apos; is not a valid value for xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal("nan")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-237"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;- INF&apos; is not a valid value for xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal("- INF")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-238"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;+ INF&apos; is not a valid value for xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal("+ INF")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-239"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;+INF&apos; is not a valid value for xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal("+INF")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-240"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;INF&apos; is not a valid value for xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal("INF")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-241"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> &apos;NaN&apos; is not a valid value for xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal("NaN")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-242"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(NaN) to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(xs:float("NaN"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-243"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(NaN) to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(xs:double("NaN"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-244"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(NaN) to xs:integer.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(xs:float("NaN"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-245"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(NaN) to xs:integer.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(xs:double("NaN"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-246"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(INF) to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(xs:float("INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-247"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(INF) to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(xs:double("INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-248"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(INF) to xs:integer.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(xs:float("INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-249"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(INF) to xs:integer.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(xs:double("INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-250"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(-INF) to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(xs:float("-INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-251"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(-INF) to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(xs:double("-INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-252"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(-INF) to xs:integer.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(xs:float("-INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-253"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(-INF) to xs:integer.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:integer(xs:double("-INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-254"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(-INF) to xs:byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte(xs:float("-INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-255"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(-INF) to xs:byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte(xs:double("-INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-256"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(INF) to xs:byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte(xs:float("INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-257"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(INF) to xs:byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte(xs:double("INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-258"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(NaN) to xs:byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte(xs:float("NaN"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-259"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(NaN) to xs:byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte(xs:double("NaN"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-260"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(-INF) to xs:nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger(xs:float("-INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-261"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(-INF) to xs:nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger(xs:double("-INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-262"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(INF) to xs:nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger(xs:float("INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-263"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(INF) to xs:nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger(xs:double("INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-264"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(NaN) to xs:nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger(xs:float("NaN"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-265"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(NaN) to xs:nonPositiveInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonPositiveInteger(xs:double("NaN"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-266"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(-INF) to xs:negativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:negativeInteger(xs:float("-INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-267"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(-INF) to xs:negativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:negativeInteger(xs:double("-INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-268"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(INF) to xs:negativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:negativeInteger(xs:float("INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-269"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(INF) to xs:negativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:negativeInteger(xs:double("INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-270"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(NaN) to xs:negativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:negativeInteger(xs:float("NaN"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-271"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(NaN) to xs:negativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:negativeInteger(xs:double("NaN"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-272"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(-INF) to xs:long.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:long(xs:float("-INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-273"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(-INF) to xs:long.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:long(xs:double("-INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-274"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(INF) to xs:long.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:long(xs:float("INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-275"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(INF) to xs:long.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:long(xs:double("INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-276"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(NaN) to xs:long.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:long(xs:float("NaN"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-277"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(NaN) to xs:long.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:long(xs:double("NaN"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-278"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(-INF) to xs:int.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:int(xs:float("-INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-279"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(-INF) to xs:int.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:int(xs:double("-INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-280"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(INF) to xs:int.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:int(xs:float("INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-281"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(INF) to xs:int.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:int(xs:double("INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-282"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(NaN) to xs:int.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:int(xs:float("NaN"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-283"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(NaN) to xs:int.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:int(xs:double("NaN"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-284"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(-INF) to xs:short.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:short(xs:float("-INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-285"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(-INF) to xs:short.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:short(xs:double("-INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-286"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(INF) to xs:short.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:short(xs:float("INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-287"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(INF) to xs:short.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:short(xs:double("INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-288"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(NaN) to xs:short.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:short(xs:float("NaN"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-289"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(NaN) to xs:short.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:short(xs:double("NaN"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-290"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(-INF) to xs:byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte(xs:float("-INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-291"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(-INF) to xs:byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte(xs:double("-INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-292"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(INF) to xs:byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte(xs:float("INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-293"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(INF) to xs:byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte(xs:double("INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-294"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(NaN) to xs:byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte(xs:float("NaN"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-295"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(NaN) to xs:byte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:byte(xs:double("NaN"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-296"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(-INF) to xs:nonNegativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonNegativeInteger(xs:float("-INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-297"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(-INF) to xs:nonNegativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonNegativeInteger(xs:double("-INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-298"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(INF) to xs:nonNegativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonNegativeInteger(xs:float("INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-299"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(INF) to xs:nonNegativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonNegativeInteger(xs:double("INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0005"))</result-string>
    <result>
      <any-of>
        <error code="FOCA0002"/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-300"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(NaN) to xs:nonNegativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonNegativeInteger(xs:float("NaN"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-301"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(NaN) to xs:nonNegativeInteger.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:nonNegativeInteger(xs:double("NaN"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-302"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(-INF) to xs:unsignedLong.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedLong(xs:float("-INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-303"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(-INF) to xs:unsignedLong.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedLong(xs:double("-INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-304"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(INF) to xs:unsignedLong.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedLong(xs:float("INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-305"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(INF) to xs:unsignedLong.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedLong(xs:double("INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-306"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(NaN) to xs:unsignedLong.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedLong(xs:float("NaN"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-307"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(NaN) to xs:unsignedLong.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedLong(xs:double("NaN"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-308"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(-INF) to xs:unsignedInt.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt(xs:float("-INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-309"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(-INF) to xs:unsignedInt.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt(xs:double("-INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-310"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(INF) to xs:unsignedInt.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt(xs:float("INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-311"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(INF) to xs:unsignedInt.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt(xs:double("INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-312"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(NaN) to xs:unsignedInt.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt(xs:float("NaN"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-313"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(NaN) to xs:unsignedInt.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt(xs:double("NaN"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-314"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(-INF) to xs:unsignedShort.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedShort(xs:float("-INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-315"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(-INF) to xs:unsignedShort.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedShort(xs:double("-INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-316"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(INF) to xs:unsignedShort.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedShort(xs:float("INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-317"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(INF) to xs:unsignedShort.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedShort(xs:double("INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-318"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(NaN) to xs:unsignedShort.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedShort(xs:float("NaN"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-319"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(NaN) to xs:unsignedShort.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedShort(xs:double("NaN"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-320"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(-INF) to xs:unsignedByte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedByte(xs:float("-INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-321"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(-INF) to xs:unsignedByte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedByte(xs:double("-INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-322"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(INF) to xs:unsignedByte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedByte(xs:float("INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-323"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(INF) to xs:unsignedByte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedByte(xs:double("INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-324"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(NaN) to xs:unsignedByte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedByte(xs:float("NaN"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-325"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(NaN) to xs:unsignedByte.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedByte(xs:double("NaN"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-326"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(-INF) to xs:unsignedInt.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt(xs:float("-INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-327"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(-INF) to xs:unsignedInt.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt(xs:double("-INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-328"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(INF) to xs:unsignedInt.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt(xs:float("INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-329"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(INF) to xs:unsignedInt.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt(xs:double("INF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-330"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:float(NaN) to xs:unsignedInt.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt(xs:float("NaN"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-331"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:double(NaN) to xs:unsignedInt.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInt(xs:double("NaN"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0002"))</result-string>
    <result>
      <error code="FOCA0002"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-332"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description> No function by name xs:unsignedInteger exists.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedInteger(1)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0017"))</result-string>
    <result>
      <error code="XPST0017"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-333"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:double("3")</response-string>
    <description> Cast xs:byte to xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(xs:byte(3))</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-334"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:double("3")</response-string>
    <description> Cast xs:int to xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(xs:int(3))</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-335"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:double("3")</response-string>
    <description> Cast xs:long to xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(xs:long(3))</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-336"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:double("-3")</response-string>
    <description> Cast xs:negativeInteger to xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(xs:negativeInteger(-3))</test>
    <result-string>xs:integer("-3")</result-string>
    <result>
      <assert-eq>-3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-337"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:double("3")</response-string>
    <description> Cast xs:nonNegativeInteger to xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(xs:nonNegativeInteger(3))</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-338"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:double("0")</response-string>
    <description> Cast xs:nonPositiveInteger to xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(xs:nonPositiveInteger(0))</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-339"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:double("3")</response-string>
    <description> Cast xs:short to xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(xs:short(3))</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-340"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:double("3")</response-string>
    <description> Cast xs:unsignedByte to xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(xs:unsignedByte(3))</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-341"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:double("3")</response-string>
    <description> Cast xs:unsignedInt to xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(xs:unsignedInt(3))</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-342"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:double("3")</response-string>
    <description> Cast xs:unsignedInt to xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(xs:unsignedInt(3))</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-343"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:double("3")</response-string>
    <description> Cast xs:unsignedLong to xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(xs:unsignedLong(3))</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-344"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:double("3")</response-string>
    <description> Cast xs:unsignedShort to xs:double.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:double(xs:unsignedShort(3))</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-345"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:float("3")</response-string>
    <description> Cast xs:byte to xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(xs:byte(3))</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-346"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:float("3")</response-string>
    <description> Cast xs:int to xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(xs:int(3))</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-347"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:float("3")</response-string>
    <description> Cast xs:long to xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(xs:long(3))</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-348"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:float("-3")</response-string>
    <description> Cast xs:negativeInteger to xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(xs:negativeInteger(-3))</test>
    <result-string>xs:integer("-3")</result-string>
    <result>
      <assert-eq>-3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-349"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:float("3")</response-string>
    <description> Cast xs:nonNegativeInteger to xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(xs:nonNegativeInteger(3))</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-350"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:float("0")</response-string>
    <description> Cast xs:nonPositiveInteger to xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(xs:nonPositiveInteger(0))</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-351"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:float("3")</response-string>
    <description> Cast xs:short to xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(xs:short(3))</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-352"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:float("3")</response-string>
    <description> Cast xs:unsignedByte to xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(xs:unsignedByte(3))</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-353"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:float("3")</response-string>
    <description> Cast xs:unsignedInt to xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(xs:unsignedInt(3))</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-354"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:float("3")</response-string>
    <description> Cast xs:unsignedInt to xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(xs:unsignedInt(3))</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-355"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:float("3")</response-string>
    <description> Cast xs:unsignedLong to xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(xs:unsignedLong(3))</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-356"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:float("3")</response-string>
    <description> Cast xs:unsignedShort to xs:float.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:float(xs:unsignedShort(3))</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-357"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("3")</response-string>
    <description> Cast xs:byte to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(xs:byte(3))</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-358"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("3")</response-string>
    <description> Cast xs:int to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(xs:int(3))</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-359"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("3")</response-string>
    <description> Cast xs:long to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(xs:long(3))</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-360"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("-3")</response-string>
    <description> Cast xs:negativeInteger to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(xs:negativeInteger(-3))</test>
    <result-string>xs:integer("-3")</result-string>
    <result>
      <assert-eq>-3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-361"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("3")</response-string>
    <description> Cast xs:nonNegativeInteger to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(xs:nonNegativeInteger(3))</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-362"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("0")</response-string>
    <description> Cast xs:nonPositiveInteger to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(xs:nonPositiveInteger(0))</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-363"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("3")</response-string>
    <description> Cast xs:short to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(xs:short(3))</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-364"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("3")</response-string>
    <description> Cast xs:unsignedByte to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(xs:unsignedByte(3))</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-365"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("3")</response-string>
    <description> Cast xs:unsignedInt to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(xs:unsignedInt(3))</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-366"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("3")</response-string>
    <description> Cast xs:unsignedInt to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(xs:unsignedInt(3))</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-367"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("3")</response-string>
    <description> Cast xs:unsignedLong to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(xs:unsignedLong(3))</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-368"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("3")</response-string>
    <description> Cast xs:unsignedShort to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:decimal(xs:unsignedShort(3))</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-369"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("3")</response-string>
    <description> Cast xs:byte to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:byte(3))</test>
    <result-string>xs:string("3")</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-370"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("3")</response-string>
    <description> Cast xs:int to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:int(3))</test>
    <result-string>xs:string("3")</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-371"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("3")</response-string>
    <description> Cast xs:long to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:long(3))</test>
    <result-string>xs:string("3")</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-372"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("-3")</response-string>
    <description> Cast xs:negativeInteger to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:negativeInteger(-3))</test>
    <result-string>xs:string("-3")</result-string>
    <result>
      <assert-string-value>-3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-373"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("3")</response-string>
    <description> Cast xs:nonNegativeInteger to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:nonNegativeInteger(3))</test>
    <result-string>xs:string("3")</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-374"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("0")</response-string>
    <description> Cast xs:nonPositiveInteger to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:nonPositiveInteger(0))</test>
    <result-string>xs:string("0")</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-375"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("3")</response-string>
    <description> Cast xs:short to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:short(3))</test>
    <result-string>xs:string("3")</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-376"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("3")</response-string>
    <description> Cast xs:unsignedByte to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:unsignedByte(3))</test>
    <result-string>xs:string("3")</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-377"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("3")</response-string>
    <description> Cast xs:unsignedInt to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:unsignedInt(3))</test>
    <result-string>xs:string("3")</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-378"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("3")</response-string>
    <description> Cast xs:unsignedInt to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:unsignedInt(3))</test>
    <result-string>xs:string("3")</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-379"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("3")</response-string>
    <description> Cast xs:unsignedLong to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:unsignedLong(3))</test>
    <result-string>xs:string("3")</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-380"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("3")</response-string>
    <description> Cast xs:unsignedShort to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:unsignedShort(3))</test>
    <result-string>xs:string("3")</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-381"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("3")</response-string>
    <description> Cast xs:byte to xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:byte(3))</test>
    <result-string>xs:string("3")</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-382"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("3")</response-string>
    <description> Cast xs:int to xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:int(3))</test>
    <result-string>xs:string("3")</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-383"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("3")</response-string>
    <description> Cast xs:long to xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:long(3))</test>
    <result-string>xs:string("3")</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-384"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("-3")</response-string>
    <description> Cast xs:negativeInteger to xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:negativeInteger(-3))</test>
    <result-string>xs:string("-3")</result-string>
    <result>
      <assert-string-value>-3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-385"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("3")</response-string>
    <description> Cast xs:nonNegativeInteger to xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:nonNegativeInteger(3))</test>
    <result-string>xs:string("3")</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-386"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("0")</response-string>
    <description> Cast xs:nonPositiveInteger to xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:nonPositiveInteger(0))</test>
    <result-string>xs:string("0")</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-387"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("3")</response-string>
    <description> Cast xs:short to xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:short(3))</test>
    <result-string>xs:string("3")</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-388"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("3")</response-string>
    <description> Cast xs:unsignedByte to xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:unsignedByte(3))</test>
    <result-string>xs:string("3")</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-389"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("3")</response-string>
    <description> Cast xs:unsignedInt to xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:unsignedInt(3))</test>
    <result-string>xs:string("3")</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-390"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("3")</response-string>
    <description> Cast xs:unsignedInt to xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:unsignedInt(3))</test>
    <result-string>xs:string("3")</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-391"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("3")</response-string>
    <description> Cast xs:unsignedLong to xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:unsignedLong(3))</test>
    <result-string>xs:string("3")</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-392"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("3")</response-string>
    <description> Cast xs:unsignedShort to xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:unsignedShort(3))</test>
    <result-string>xs:string("3")</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-393"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast xs:unsignedShort to xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:normalizedString("foo"))</test>
    <result-string>xs:string("foo")</result-string>
    <result>
      <assert-string-value>foo</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-394"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast xs:token to xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:token("foo"))</test>
    <result-string>xs:string("foo")</result-string>
    <result>
      <assert-string-value>foo</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-395"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast xs:language to xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:language("foo"))</test>
    <result-string>xs:string("foo")</result-string>
    <result>
      <assert-string-value>foo</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-396"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast xs:NMTOKEN to xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:NMTOKEN("foo"))</test>
    <result-string>xs:string("foo")</result-string>
    <result>
      <assert-string-value>foo</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-397"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast xs:Name to xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:Name("foo"))</test>
    <result-string>xs:string("foo")</result-string>
    <result>
      <assert-string-value>foo</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-398"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast xs:NCName to xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:NCName("foo"))</test>
    <result-string>xs:string("foo")</result-string>
    <result>
      <assert-string-value>foo</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-399"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast xs:ID to xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:ID("foo"))</test>
    <result-string>xs:string("foo")</result-string>
    <result>
      <assert-string-value>foo</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-400"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast xs:IDREF to xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:IDREF("foo"))</test>
    <result-string>xs:string("foo")</result-string>
    <result>
      <assert-string-value>foo</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-401"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast xs:ENTITY to xs:untypedAtomic.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic(xs:ENTITY("foo"))</test>
    <result-string>xs:string("foo")</result-string>
    <result>
      <assert-string-value>foo</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-402"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast xs:unsignedShort to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:normalizedString("foo"))</test>
    <result-string>xs:string("foo")</result-string>
    <result>
      <assert-string-value>foo</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-403"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast xs:token to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:token("foo"))</test>
    <result-string>xs:string("foo")</result-string>
    <result>
      <assert-string-value>foo</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-404"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast xs:language to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:language("foo"))</test>
    <result-string>xs:string("foo")</result-string>
    <result>
      <assert-string-value>foo</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-405"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast xs:NMTOKEN to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:NMTOKEN("foo"))</test>
    <result-string>xs:string("foo")</result-string>
    <result>
      <assert-string-value>foo</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-406"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast xs:Name to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:Name("foo"))</test>
    <result-string>xs:string("foo")</result-string>
    <result>
      <assert-string-value>foo</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-407"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast xs:NCName to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:NCName("foo"))</test>
    <result-string>xs:string("foo")</result-string>
    <result>
      <assert-string-value>foo</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-408"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast xs:ID to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:ID("foo"))</test>
    <result-string>xs:string("foo")</result-string>
    <result>
      <assert-string-value>foo</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-409"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast xs:IDREF to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:IDREF("foo"))</test>
    <result-string>xs:string("foo")</result-string>
    <result>
      <assert-string-value>foo</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-410"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast xs:ENTITY to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string(xs:ENTITY("foo"))</test>
    <result-string>xs:string("foo")</result-string>
    <result>
      <assert-string-value>foo</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-411"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast "a" to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language("a")</test>
    <result-string>xs:string("a")</result-string>
    <result>
      <assert-string-value>a</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-412"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast "ab" to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language("ab")</test>
    <result-string>xs:string("ab")</result-string>
    <result>
      <assert-string-value>ab</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-413"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast "abc" to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language("abc")</test>
    <result-string>xs:string("abc")</result-string>
    <result>
      <assert-string-value>abc</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-414"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast "abcd" to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language("abcd")</test>
    <result-string>xs:string("abcd")</result-string>
    <result>
      <assert-string-value>abcd</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-415"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast "abcde" to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language("abcde")</test>
    <result-string>xs:string("abcde")</result-string>
    <result>
      <assert-string-value>abcde</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-416"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast "abcdef" to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language("abcdef")</test>
    <result-string>xs:string("abcdef")</result-string>
    <result>
      <assert-string-value>abcdef</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-417"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast "abcdefg" to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language("abcdefg")</test>
    <result-string>xs:string("abcdefg")</result-string>
    <result>
      <assert-string-value>abcdefg</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-418"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast "abcdefgh" to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language("abcdefgh")</test>
    <result-string>xs:string("abcdefgh")</result-string>
    <result>
      <assert-string-value>abcdefgh</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-419"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast "abcdefgh-abcdefgh" to xs:language.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:language("abcdefgh-abcdefgh")</test>
    <result-string>xs:string("abcdefgh-abcdefgh")</result-string>
    <result>
      <assert-string-value>abcdefgh-abcdefgh</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-420"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> The whitespace facet for xs:anyURI is collapse.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI(" http://example.com/ foo.xml ")</test>
    <result-string>xs:string("http://example.com/ foo.xml")</result-string>
    <result>
      <assert-string-value>http://example.com/ foo.xml</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-421"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("foo://")</response-string>
    <description> Pass an invalid anyURI.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI("foo://")</test>
    <result-string>xs:string("foo://")</result-string>
    <result-string>xs:string("foo:")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <any-of>
        <assert-string-value>foo://</assert-string-value>
        <assert-string-value>foo:</assert-string-value>
        <error code="FORG0001"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-422"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("%gg")</response-string>
    <description> Pass an invalid anyURI(#2).</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI("%gg")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-423"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI(":/cut.jpg")</response-string>
    <description> An URI without scheme.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI(":/cut.jpg")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-424"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI(":/images/cut.png")</response-string>
    <description> An URI without scheme, combined with a relative directory.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI(":/images/cut.png")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-425"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("START"),fn:QName("http://example.com", "prefix:localName"),fn:QName("http://example.com", "localName"),fn:QName("http://example.com", "localName"),fn:QName("", "localName"),fn:QName("null", "localName"),xs:string("END"))</response-string>
    <description> Serialize a set of xs:QName instances.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>"START", 
      		QName("http://example.com", "prefix:localName"), 
      		QName("http://example.com", "localName"), 
      		QName("http://example.com", "localName"), 
      		QName("", "localName"), QName((), "localName"), 
      		"END"</test>
    <result-string/>
    <result>
      <assert-xml>START prefix:localName localName localName localName localName END</assert-xml>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-426"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("START"),xs:string(""),xs:string(""),xs:string(""),xs:string(""),xs:string(""),xs:string("END"))</response-string>
    <description> Cast a set of QName to xs:string.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>"START", 
      	string(QName("http://example.com", 
      	"prefix:localName")), 
      	string(QName("http://example.com", "localName")), 
      	string(QName("http://example.com", "localName")), 
      	string(QName("", "localName")), 
      	string(QName((), "localName")), 
      	"END" </test>
    <result-string/>
    <result>
      <assert-xml>START prefix:localName localName localName localName localName END</assert-xml>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-427"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Use a relative URI with double slashes.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI("//server/share/dir1")</test>
    <result-string>xs:string("//server/share/dir1")</result-string>
    <result>
      <assert-string-value>//server/share/dir1</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-428"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> A relatively large negative number, fed to xs:unsignedLong.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:unsignedLong("-9876")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-429"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:time("11:-1:11"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("11:-1:11")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-430"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:time("11:+1:11"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("11:+1:11")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-431"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:time("11: 1:11"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("11: 1:11")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-432"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:time("11:11:-1"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("11:11:-1")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-433"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:time("11:11:-1"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("11:11:-1")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-434"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:time("11:11:+1"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("11:11:+1")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-435"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:time("11:11: 1"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("11:11: 1")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-436"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:time("-1:11:11"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("-1:11:11")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-437"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:time("+1:11:11"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("+1:11:11")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-438"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:time("+1:11:11"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("+1:11:11")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-439"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:time("11:11:1e0"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("11:11:1e0")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-440"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:time("11:11:1E0"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("11:11:1E0")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-441"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:time("11:11:1b0"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("11:11:1b0")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-442"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:time("11:11: 10"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("11:11: 10")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-443"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:time("11:11:11b33"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("11:11:11b33")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-444"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:time("11:11:111"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("11:11:111")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-445"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:time("11:11:11.+11"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("11:11:11.+11")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-446"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:time("11:11:11.-11"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("11:11:11.-11")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-447"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:time("11:11:11. 11"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("11:11:11. 11")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-448"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:time("24:00:00.1"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("24:00:00.1")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-449"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:time("24:01:00"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("24:01:00")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-450"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:time("24:00:01"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("24:00:01")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-451"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:time("11:11:11++1:11"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("11:11:11++1:11")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-452"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:time("11:11:11+-1:11"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("11:11:11+-1:11")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-453"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:time("11:11:11+ 1:11"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("11:11:11+ 1:11")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-454"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:time("11:11:11+11:+1"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("11:11:11+11:+1")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-455"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:time("11:11:11+11:-1"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("11:11:11+11:-1")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-456"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:time("11:11:11+11: 1"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("11:11:11+11: 1")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-457"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:time("11"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("11")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-458"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:time("1 :11:11"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("1 :11:11")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-459"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:time("11:11:1 "), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:time("11:11:1 ")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-460"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:date("+2002-12-11"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("+2002-12-11")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-461"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:date(" 111-11-11"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(" 111-11-11")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-462"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:date(" +11-11-11"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date(" +11-11-11")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-463"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:date("1111- 1-11"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("1111- 1-11")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-464"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:date("-111-11-11"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("-111-11-11")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-465"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:date("+111-11-11"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("+111-11-11")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-466"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:date("1111-11- 1"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("1111-11- 1")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-467"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:date("1111-+1-11"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("1111-+1-11")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-468"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:date("1111-11-+1"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("1111-11-+1")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-469"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:date("1111--1-11"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("1111--1-11")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-470"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:date("1111-11--1"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("1111-11--1")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-471"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:date("1111-11-1F"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("1111-11-1F")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-472"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:date("0x10-11-11"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("0x10-11-11")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-473"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:date("111 -11-11"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("111 -11-11")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-474"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:date("1111-1 -11"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("1111-1 -11")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-475"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:date("1111-11-1 "), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:date("1111-11-1 ")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-476"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast xs:dateTime("2002-11-23"), which is an invalid lexical representation.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:dateTime("2002-11-23")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-477"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:gYear("0040")</response-string>
    <description> Serialize xs:gYear("0040").</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYear("0040")</test>
    <result-string>xs:string("0040")</result-string>
    <result>
      <assert-string-value>0040</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-478"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Serialize xs:gYearMonth("0040-01").</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:gYearMonth("0040-01")</test>
    <result-string>xs:string("0040-01")</result-string>
    <result>
      <assert-string-value>0040-01</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-479"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Cast to xs:QName, using a namespace from an element constructor.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[<e xmlns:prefix="http://example.com/"> { xs:QName("prefix:localName") } </e>]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<e xmlns:prefix="http://example.com/">prefix:localName</e>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-480"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> All primitives in one query. Sub-types of xs:decimal. Sub-types of xs:decimal. Sub-types of xs:string</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic("xs:untypedAtomic"), xs:dateTime("2002-10-10T23:02:12Z"), xs:date("2002-10-10Z"), xs:time("23:02:12Z"),
                xs:duration("P12M"), xs:dayTimeDuration("PT1S"), xs:yearMonthDuration("P1M"), xs:float("3e3"), xs:double("4e4"),
                xs:decimal("2.0"), xs:integer("16"), xs:nonPositiveInteger("0"), xs:negativeInteger("-4"), xs:long("5"),
                xs:int("6"), xs:short("7"), xs:byte("8"), xs:nonNegativeInteger("9"), xs:unsignedLong("10"),
                xs:unsignedInt("11"), xs:unsignedShort("12"), xs:unsignedByte("13"), xs:positiveInteger("14"),
                xs:gYearMonth("1976-02Z"), xs:gYear("2005-12:00"), xs:gMonthDay("--12-25-14:00"),
                xs:gDay("---25-14:00"), xs:gMonth("--12-14:00"), xs:boolean("true"), xs:base64Binary("aaaa"),
                xs:hexBinary("FFFF"), xs:anyURI("http://example.com/"), xs:QName("localName"),
                xs:string("An xs:string"), xs:normalizedString("normalizedString"), xs:token("token"),
                xs:language("language"), xs:NMTOKEN("NMTOKEN"), xs:Name("Name"), xs:NCName("NCName"),
                xs:ID("ID"), xs:IDREF("IDREF"), xs:ENTITY("ENTITY")</test>
    <result-string>xs:string("
             xs:untypedAtomic 2002-10-10T23:02:12Z 2002-10-10Z 23:02:12Z P1Y PT1S P1M 3000 40000 2 16 0
             -4 5 6 7 8 9 10 11 12 13 14 1976-02Z 2005-12:00 --12-25-14:00 ---25-14:00 --12-14:00 true
             aaaa FFFF http://example.com/ localName An xs:string normalizedString token language
             NMTOKEN Name NCName ID IDREF ENTITY")</result-string>
    <result>
      <assert-string-value normalize-space="true">
             xs:untypedAtomic 2002-10-10T23:02:12Z 2002-10-10Z 23:02:12Z P1Y PT1S P1M 3000 40000 2 16 0
             -4 5 6 7 8 9 10 11 12 13 14 1976-02Z 2005-12:00 --12-25-14:00 ---25-14:00 --12-14:00 true
             aaaa FFFF http://example.com/ localName An xs:string normalizedString token language
             NMTOKEN Name NCName ID IDREF ENTITY</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-481"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Try to cast inf to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>"inf" cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-482"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Try to cast &apos;inF&apos; to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>"inF" cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-483"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Try to cast &apos;-inF&apos; to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>"-inF" cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-484"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Try to cast &apos;inF &apos; to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>"inF " cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-485"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Try to cast &apos;-inF(space)&apos; to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>"-inF " cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-486"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Try to cast &apos;naN&apos; to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>"naN" cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-487"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Try to cast &apos; naN&apos; to xs:decimal.</description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>" naN" cast as xs:decimal</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-488"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast xs:QName to xs:language.</description>
    <created by="Frans Englich" on="2007-12-20+01:00"/>
    <test>xs:language(QName("http://example.com/", "p:localName"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-489"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast xs:base64Binary to xs:language.</description>
    <created by="Frans Englich" on="2007-12-20+01:00"/>
    <test>xs:language(xs:base64Binary("1111"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-490"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast xs:hexBinary to xs:language.</description>
    <created by="Frans Englich" on="2007-12-20+01:00"/>
    <test>xs:language(xs:hexBinary("11"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-491"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast xs:gMonth to xs:language.</description>
    <created by="Frans Englich" on="2007-12-20+01:00"/>
    <test>xs:language(xs:gMonth("--10"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-492"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast xs:gDay to xs:language.</description>
    <created by="Frans Englich" on="2007-12-20+01:00"/>
    <test>xs:language(xs:gDay("---11"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-493"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast xs:gMonthDay to xs:language.</description>
    <created by="Frans Englich" on="2007-12-20+01:00"/>
    <test>xs:language(xs:gMonthDay("--10-15"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-494"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast xs:gYear to xs:language.</description>
    <created by="Frans Englich" on="2007-12-20+01:00"/>
    <test>xs:language(xs:gYear("4004"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-495"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast xs:integer to xs:language.</description>
    <created by="Frans Englich" on="2007-12-20+01:00"/>
    <test>xs:language(xs:integer("543"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-496"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast xs:decimal to xs:language.</description>
    <created by="Frans Englich" on="2007-12-20+01:00"/>
    <test>xs:language(xs:decimal("543"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-497"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast xs:double to xs:language.</description>
    <created by="Frans Englich" on="2007-12-20+01:00"/>
    <test>xs:language(xs:double("543"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-498"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast xs:float to xs:language.</description>
    <created by="Frans Englich" on="2007-12-20+01:00"/>
    <test>xs:language(xs:float("543"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-499"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast xs:time to xs:language.</description>
    <created by="Frans Englich" on="2007-12-20+01:00"/>
    <test>xs:language(current-time())</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-500"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast xs:date to xs:language.</description>
    <created by="Frans Englich" on="2007-12-20+01:00"/>
    <test>xs:language(current-date())</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-501"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast xs:duration to xs:language.</description>
    <created by="Frans Englich" on="2007-12-20+01:00"/>
    <test>xs:language(xs:duration("P1M"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-502"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast xs:dayTimeDuration to xs:language.</description>
    <created by="Frans Englich" on="2007-12-20+01:00"/>
    <test>xs:language(xs:dayTimeDuration("P1DT4H"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-503"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Cast xs:yearMonthDuration to xs:language.</description>
    <created by="Frans Englich" on="2007-12-20+01:00"/>
    <test>xs:language(xs:yearMonthDuration("P4Y5M"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-504"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Use a series of corner case Unicode codepoints.</description>
    <created by="Frans Englich" on="2007-12-20+01:00"/>
    <test>xs:NCName(codepoints-to-string((3648, 3592, 3617, 3626, 3660)))</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-505"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI(":/")</response-string>
    <description> &apos;:/&apos; is an invalid URI, no scheme.</description>
    <created by="Frans Englich" on="2008-01-15+01:00"/>
    <test>xs:anyURI(":/")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-506"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast invalid gMonth.</description>
    <created by="Frans Englich" on="2008-11-13+01:00"/>
    <test>xs:gMonth("--02--")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-507"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast inF to xs:float.</description>
    <created by="Frans Englich" on="2009-01-12+01:00"/>
    <test>xs:float("inF")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-508"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast inF to xs:double.</description>
    <created by="Frans Englich" on="2009-01-12+01:00"/>
    <test>xs:double("inF")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-509"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast inF to xs:decimal.</description>
    <created by="Frans Englich" on="2009-01-12+01:00"/>
    <test>xs:decimal("inF")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-510"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast inf to xs:float.</description>
    <created by="Frans Englich" on="2009-01-12+01:00"/>
    <test>xs:float("inf")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-511"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast inf to xs:double.</description>
    <created by="Frans Englich" on="2009-01-12+01:00"/>
    <test>xs:double("inf")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-512"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast inf to xs:decimal.</description>
    <created by="Frans Englich" on="2009-01-12+01:00"/>
    <test>xs:decimal("inf")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-513"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast InF to xs:float.</description>
    <created by="Frans Englich" on="2009-01-12+01:00"/>
    <test>xs:float("InF")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-514"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast InF to xs:double.</description>
    <created by="Frans Englich" on="2009-01-12+01:00"/>
    <test>xs:double("InF")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-515"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast InF to xs:decimal.</description>
    <created by="Frans Englich" on="2009-01-12+01:00"/>
    <test>xs:decimal("InF")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-516"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast -InF to xs:float.</description>
    <created by="Frans Englich" on="2009-01-12+01:00"/>
    <test>xs:float("-InF")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-517"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast -InF to xs:double.</description>
    <created by="Frans Englich" on="2009-01-12+01:00"/>
    <test>xs:double("-InF")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-518"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast -InF to xs:decimal.</description>
    <created by="Frans Englich" on="2009-01-12+01:00"/>
    <test>xs:decimal("-InF")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-519"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast +InF to xs:float.</description>
    <created by="Frans Englich" on="2009-01-12+01:00"/>
    <test>xs:float("+InF")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-520"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast +InF to xs:double.</description>
    <created by="Frans Englich" on="2009-01-12+01:00"/>
    <test>xs:double("+InF")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-521"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast +InF to xs:decimal.</description>
    <created by="Frans Englich" on="2009-01-12+01:00"/>
    <test>xs:decimal("+InF")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-522"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast naN to xs:float.</description>
    <created by="Frans Englich" on="2009-01-12+01:00"/>
    <test>xs:float("naN")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-523"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast naN to xs:double.</description>
    <created by="Frans Englich" on="2009-01-12+01:00"/>
    <test>xs:double("naN")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K2-SeqExprCast-524"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0001"))</response-string>
    <description> Cast naN to xs:decimal.</description>
    <created by="Frans Englich" on="2009-01-12+01:00"/>
    <test>xs:decimal("naN")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
</test-set>