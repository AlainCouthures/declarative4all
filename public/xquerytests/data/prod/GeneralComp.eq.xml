<test-set name="prod-GeneralComp.eq" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">
  <description>Tests for the GeneralComp production using the "=" operator</description>
  <link document="http://www.w3.org/TR/xquery-30/" idref="doc-xquery30-GeneralComp.eq" type="spec"/>
  <link document="XQuery" idref="id-general-comparisons" section-number="3.5.2" type="spec"/>
  <test-case name="generalexpression1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Empty sequence operator = = operand2 = Empty sequence </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <test>() = ()</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Empty sequence operator = = operand2 = Atomic Value </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <test>() = 10000</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Empty sequence operator = = operand2 = Sequence of single atomic value </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <test>() = (50000)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Empty sequence operator = = operand2 = Sequence of single atomic values </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <test>() = (10000,50000)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Empty sequence operator = = operand2 = Element Constructor </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[() = <a>10000</a>]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Empty sequence operator = = operand2 = Sequence of single element constructor </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[() = (<a>10000</a>)]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression7"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Empty sequence operator = = operand2 = Sequence of multiple element constructors </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[() = (<a>10000</a>,<b>50000</b>)]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression8"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Empty sequence operator = = operand2 = Sequence of single element nodes </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works"/>
    <test>() = (/works/employee[1]/hours[1])</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression9"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Empty sequence operator = = operand2 = Sequence of multiple element nodes (single source) </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works"/>
    <test>() = (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression10"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Empty sequence operator = = operand2 = Sequence of multiple element nodes (multiple sources) </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works-and-staff"/>
    <test>() = ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression11"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Atomic Value operator = = operand2 = Empty sequence </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <test>10000 = ()</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression12"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Atomic Value operator = "=" operand2 = empty sequence </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <test>10000 = ()</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression13"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Atomic Value operator = = operand2 = Sequence of single atomic values </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <test>10000 = (10000,50000)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="generalexpression14"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Atomic Value operator = = operand2 = Element Constructor </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[10000 = <a>10000</a>]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="generalexpression15"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Atomic Value operator = = operand2 = Sequence of single element constructor </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[10000 = (<a>10000</a>)]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="generalexpression16"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Atomic Value operator = = operand2 = Sequence of multiple element constructors </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[10000 = (<a>10000</a>,<b>50000</b>)]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="generalexpression17"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Atomic Value operator = = operand2 = Sequence of single element nodes </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works"/>
    <test>10000 = (/works/employee[1]/hours[1])</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression18"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Atomic Value operator = = operand2 = Sequence of multiple element nodes (single source) </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works"/>
    <test>10000 = (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression19"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Atomic Value operator = = operand2 = Sequence of multiple element nodes (multiple sources) </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works-and-staff"/>
    <test>10000 = ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression20"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of single atomic value operator = = operand2 = Empty sequence </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <test>(50000) = ()</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression21"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of single atomic value operator = = operand2 = Atomic Value </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <test>(50000) = 10000</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression22"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of single atomic value operator = = operand2 = Sequence of single atomic value </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <test>(50000) = (50000)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="generalexpression23"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of single atomic value operator = = operand2 = Sequence of single atomic values </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <test>(50000) = (10000,50000)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="generalexpression24"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of single atomic value operator = = operand2 = Element Constructor </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(50000) = <a>10000</a>]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression25"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of single atomic value operator = = operand2 = Sequence of single element constructor </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(50000) = (<a>10000</a>)]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression26"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of single atomic value operator = = operand2 = Sequence of multiple element constructors </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(50000) = (<a>10000</a>,<b>50000</b>)]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="generalexpression27"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of single atomic value operator = = operand2 = Sequence of single element nodes </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works"/>
    <test>(50000) = (/works/employee[1]/hours[1])</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression28"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of single atomic value operator = = operand2 = Sequence of multiple element nodes (single source) </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works"/>
    <test>(50000) = (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression29"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of single atomic value operator = = operand2 = Sequence of multiple element nodes (multiple sources) </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works-and-staff"/>
    <test>(50000) = ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression30"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of single atomic values operator = = operand2 = Empty sequence </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <test>(10000,50000) = ()</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression31"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of single atomic values operator = = operand2 = Atomic Value </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <test>(10000,50000) = 10000</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="generalexpression32"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of single atomic values operator = = operand2 = Sequence of single atomic value </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <test>(10000,50000) = (50000)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="generalexpression33"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of single atomic values operator = = operand2 = Sequence of single atomic values </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <test>(10000,50000) = (10000,50000)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="generalexpression34"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of single atomic values operator = = operand2 = Element Constructor </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(10000,50000) = <a>10000</a>]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="generalexpression35"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of single atomic values operator = = operand2 = Sequence of single element constructor </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(10000,50000) = (<a>10000</a>)]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="generalexpression36"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of single atomic values operator = = operand2 = Sequence of multiple element constructors </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(10000,50000) = (<a>10000</a>,<b>50000</b>)]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="generalexpression37"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of single atomic values operator = = operand2 = Sequence of single element nodes </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works"/>
    <test>(10000,50000) = (/works/employee[1]/hours[1])</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression38"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of single atomic values operator = = operand2 = Sequence of multiple element nodes (single source) </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works"/>
    <test>(10000,50000) = (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression39"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of single atomic values operator = = operand2 = Sequence of multiple element nodes (multiple sources) </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works-and-staff"/>
    <test>(10000,50000) = ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression40"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Element Constructor operator = = operand2 = Empty sequence </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[<a>10000</a> = ()]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression41"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Element Constructor operator = = operand2 = Atomic Value </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[<a>10000</a> = 10000]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="generalexpression42"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Element Constructor operator = = operand2 = Sequence of single atomic value </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[<a>10000</a> = (50000)]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression43"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Element Constructor operator = = operand2 = Sequence of single atomic values </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[<a>10000</a> = (10000,50000)]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="generalexpression44"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Element Constructor operator = = operand2 = Element Constructor </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[<a>10000</a> = <a>10000</a>]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="generalexpression45"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Element Constructor operator = = operand2 = Sequence of single element constructor </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[<a>10000</a> = (<a>10000</a>)]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="generalexpression46"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Element Constructor operator = = operand2 = Sequence of multiple element constructors </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[<a>10000</a> = (<a>10000</a>,<b>50000</b>)]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="generalexpression47"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Element Constructor operator = = operand2 = Sequence of single element nodes </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[<a>10000</a> = (/works/employee[1]/hours[1])]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression48"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Element Constructor operator = = operand2 = Sequence of multiple element nodes (single source) </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[<a>10000</a> = (/works/employee[1]/hours[1],/works/employee[6]/hours[1])]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression49"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Element Constructor operator = = operand2 = Sequence of multiple element nodes (multiple sources) </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works-and-staff"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[<a>10000</a> = ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression50"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of single element constructor operator = = operand2 = Empty sequence </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(<a>10000</a>) = ()]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression51"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of single element constructor operator = = operand2 = Atomic Value </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(<a>10000</a>) = 10000]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="generalexpression52"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of single element constructor operator = = operand2 = Sequence of single atomic value </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(<a>10000</a>) = (50000)]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression53"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of single element constructor operator = = operand2 = Sequence of single atomic values </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(<a>10000</a>) = (10000,50000)]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="generalexpression54"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of single element constructor operator = = operand2 = Element Constructor </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(<a>10000</a>) = <a>10000</a>]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="generalexpression55"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of single element constructor operator = = operand2 = Sequence of single element constructor </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(<a>10000</a>) = (<a>10000</a>)]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="generalexpression56"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of single element constructor operator = = operand2 = Sequence of multiple element constructors </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(<a>10000</a>) = (<a>10000</a>,<b>50000</b>)]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="generalexpression57"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of single element constructor operator = = operand2 = Sequence of single element nodes </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(<a>10000</a>) = (/works/employee[1]/hours[1])]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression58"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of single element constructor operator = = operand2 = Sequence of multiple element nodes (single source) </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(<a>10000</a>) = (/works/employee[1]/hours[1],/works/employee[6]/hours[1])]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression59"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of single element constructor operator = = operand2 = Sequence of multiple element nodes (multiple sources) </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works-and-staff"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(<a>10000</a>) = ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression60"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of multiple element constructors operator = = operand2 = Empty sequence </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(<a>10000</a>,<b>50000</b>) = ()]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression61"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of multiple element constructors operator = = operand2 = Atomic Value </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(<a>10000</a>,<b>50000</b>) = 10000]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="generalexpression62"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of multiple element constructors operator = = operand2 = Sequence of single atomic value </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(<a>10000</a>,<b>50000</b>) = (50000)]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="generalexpression63"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of multiple element constructors operator = = operand2 = Sequence of single atomic values </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(<a>10000</a>,<b>50000</b>) = (10000,50000)]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="generalexpression64"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of multiple element constructors operator = = operand2 = Element Constructor </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(<a>10000</a>,<b>50000</b>) = <a>10000</a>]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="generalexpression65"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of multiple element constructors operator = = operand2 = Sequence of single element constructor </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(<a>10000</a>,<b>50000</b>) = (<a>10000</a>)]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="generalexpression66"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of multiple element constructors operator = = operand2 = Sequence of multiple element constructors </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(<a>10000</a>,<b>50000</b>) = (<a>10000</a>,<b>50000</b>)]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="generalexpression67"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of multiple element constructors operator = = operand2 = Sequence of single element nodes </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(<a>10000</a>,<b>50000</b>) = (/works/employee[1]/hours[1])]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression68"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of multiple element constructors operator = = operand2 = Sequence of multiple element nodes (single source) </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(<a>10000</a>,<b>50000</b>) = (/works/employee[1]/hours[1],/works/employee[6]/hours[1])]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression69"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of multiple element constructors operator = = operand2 = Sequence of multiple element nodes (multiple sources) </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works-and-staff"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(<a>10000</a>,<b>50000</b>) = ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression70"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of single element nodes operator = = operand2 = Empty sequence </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works"/>
    <test>(/works/employee[1]/hours[1]) = ()</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression71"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of single element nodes operator = = operand2 = Atomic Value </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works"/>
    <test>(/works/employee[1]/hours[1]) = 10000</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression72"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of single element nodes operator = = operand2 = Sequence of single atomic value </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works"/>
    <test>(/works/employee[1]/hours[1]) = (50000)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression73"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of single element nodes operator = = operand2 = Sequence of single atomic values </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works"/>
    <test>(/works/employee[1]/hours[1]) = (10000,50000)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression74"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of single element nodes operator = = operand2 = Element Constructor </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(/works/employee[1]/hours[1]) = <a>10000</a>]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression75"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of single element nodes operator = = operand2 = Sequence of single element constructor </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(/works/employee[1]/hours[1]) = (<a>10000</a>)]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression76"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of single element nodes operator = = operand2 = Sequence of multiple element constructors </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(/works/employee[1]/hours[1]) = (<a>10000</a>,<b>50000</b>)]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression77"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of single element nodes operator = = operand2 = Sequence of single element nodes </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works"/>
    <test>(/works/employee[1]/hours[1]) = (/works/employee[1]/hours[1])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="generalexpression78"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of single element nodes operator = = operand2 = Sequence of multiple element nodes (single source) </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works"/>
    <test>(/works/employee[1]/hours[1]) = (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="generalexpression79"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of single element nodes operator = = operand2 = Sequence of multiple element nodes (multiple sources) </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works-and-staff"/>
    <test>($works/works/employee[1]/hours[1]) = ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="generalexpression80"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of multiple element nodes (single source) operator = = operand2 = Empty sequence </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works"/>
    <test>(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) = ()</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression81"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of multiple element nodes (single source) operator = = operand2 = Atomic Value </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works"/>
    <test>(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) = 10000</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression82"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of multiple element nodes (single source) operator = = operand2 = Sequence of single atomic value </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works"/>
    <test>(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) = (50000)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression83"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of multiple element nodes (single source) operator = = operand2 = Sequence of single atomic values </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works"/>
    <test>(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) = (10000,50000)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression84"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of multiple element nodes (single source) operator = = operand2 = Element Constructor </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) = <a>10000</a>]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression85"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of multiple element nodes (single source) operator = = operand2 = Sequence of single element constructor </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) = (<a>10000</a>)]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression86"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of multiple element nodes (single source) operator = = operand2 = Sequence of multiple element constructors </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) = (<a>10000</a>,<b>50000</b>)]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression87"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of multiple element nodes (single source) operator = = operand2 = Sequence of single element nodes </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works"/>
    <test>(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) = (/works/employee[1]/hours[1])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="generalexpression88"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of multiple element nodes (single source) operator = = operand2 = Sequence of multiple element nodes (single source) </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works"/>
    <test>(/works/employee[1]/hours[1],/works/employee[6]/hours[1]) = (/works/employee[1]/hours[1],/works/employee[6]/hours[1])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="generalexpression89"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of multiple element nodes (single source) operator = = operand2 = Sequence of multiple element nodes (multiple sources) </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works-and-staff"/>
    <test>($works/works/employee[1]/hours[1],$works/works/employee[6]/hours[1]) = 
         ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="generalexpression90"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of multiple element nodes (multiple sources) operator = = operand2 = Empty sequence </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works-and-staff"/>
    <test>($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) = ()</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression91"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of multiple element nodes (multiple sources) operator = = operand2 = Atomic Value </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works-and-staff"/>
    <test>($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) = 10000</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression92"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of multiple element nodes (multiple sources) operator = = operand2 = Sequence of single atomic value </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works-and-staff"/>
    <test>($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) = (50000)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression93"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of multiple element nodes (multiple sources) operator = = operand2 = Sequence of single atomic values </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works-and-staff"/>
    <test>($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) = (10000,50000)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression94"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of multiple element nodes (multiple sources) operator = = operand2 = Element Constructor </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works-and-staff"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) = <a>10000</a>]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression95"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of multiple element nodes (multiple sources) operator = = operand2 = Sequence of single element constructor </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works-and-staff"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) = (<a>10000</a>)]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression96"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of multiple element nodes (multiple sources) operator = = operand2 = Sequence of multiple element constructors </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works-and-staff"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) = (<a>10000</a>,<b>50000</b>)]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="generalexpression97"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of multiple element nodes (multiple sources) operator = = operand2 = Sequence of single element nodes </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works-and-staff"/>
    <test>($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) =
         ($works/works/employee[1]/hours[1])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="generalexpression98"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of multiple element nodes (multiple sources) operator = = operand2 = Sequence of multiple element nodes (single source) </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <modified by="Michael Kay" change="see bug 14264" on="2012-05-17"/>
    <environment ref="works-and-staff"/>
    <test>($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) = ($works/works/employee[1]/hours[1],$works/works/employee[6]/hours[1])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="generalexpression99"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Test of a General Expression with the operands set as follows operand1 = Sequence of multiple element nodes (multiple sources) operator = = operand2 = Sequence of multiple element nodes (multiple sources) </description>
    <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-01"/>
    <environment ref="works-and-staff"/>
    <test>($works/works/employee[1]/hours[1],$staff/staff/employee[6]/hours[1]) = ($works/works/employee[1]/hours[1],$staff/staff/employee[6]/grade[1])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> General comparisons involving the empty sequence. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(() = ())</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> General comparisons involving the empty sequence. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not((() = ()))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> General comparisons involving the empty sequence. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not((() = 1))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> General comparisons involving the empty sequence. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(1 = ())</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> A syntactically invalid expression that reminds of a general comparison operator. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>1 == 1</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Example from the XPath 2.0 specification. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(1, 2) = (2, 3)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-7"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Example from the XPath 2.0 specification. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(2, 3) = (3, 4)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-8"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Example from the XPath 2.0 specification. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not((1, 2) = (3, 4))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-9"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Example from the XPath 2.0 specification. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(xs:untypedAtomic("1"), xs:untypedAtomic("2")) = (xs:untypedAtomic("2.0"), 2.0)</test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPTY0004"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-10"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Example from the XPath 2.0 specification. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not((xs:untypedAtomic("1"), xs:untypedAtomic("2")) = (xs:untypedAtomic("2.0"), 3.0))</test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPTY0004"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-11"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> General comparison causing numeric promotion from xs:untypedAtomic. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic("1") = 1</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-12"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> General comparison causing numeric promotion from xs:untypedAtomic. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:untypedAtomic("2") = 1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-13"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> General comparison causing numeric promotion from xs:untypedAtomic. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic("1") = 1</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-14"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> General comparison causing numeric promotion from xs:untypedAtomic. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>1 = xs:untypedAtomic("1")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-15"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> General comparison causing numeric promotion from xs:untypedAtomic. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>1 = xs:untypedAtomic("1")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-16"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FOER0000"))</response-string>
    <description> A general comparison involving the error() function. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>error() = 3</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FOER0000"))</result-string>
    <result>
      <error code="FOER0000"/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-17"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A general comparison involving the error() function. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(error(), 3) = 3</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOER0000"))</result-string>
    <result>
      <error code="FOER0000"/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-18"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FOER0000"))</response-string>
    <description> A general comparison involving the error() function. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>3 = error()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FOER0000"))</result-string>
    <result>
      <error code="FOER0000"/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-19"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A general comparison involving the error() function. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>3 = (error(), 3)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOER0000"))</result-string>
    <result>
      <error code="FOER0000"/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-20"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> An expression involving the &apos;=&apos; operator that trigger certain optimization paths in some implementations. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>count(remove(remove((current-time(), 1), 1), 1)) = 0</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-21"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Test that fn:count combined with expressions that might disable compile time evaluations(optimization) as well as the &apos;=&apos; operator, is conformant. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(0 = count((1, 2, timezone-from-time(current-time()))))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-22"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Test that fn:count combined with expressions that might disable compile time evaluations(optimization) as well as the &apos;=&apos; operator, is conformant. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>0 != count((1, 2, timezone-from-time(current-time())))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-23"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Comparison where type of operands are incompatible. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(xs:anyURI("example.com/"), 1, QName("example.com", "ncname"), false(), xs:hexBinary("FF")) = (xs:anyURI("example.com/NOT"), 0, QName("example.com", "p:ncname"), true(), xs:hexBinary("EF"))</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-24"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> General comparison involving xs:untypedAtomic/xs:string. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>"a string" = "a string"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-25"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> General comparison involving xs:untypedAtomic/xs:string. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic("a string") = "a string"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-26"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> General comparison involving xs:untypedAtomic/xs:string. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>"a string" = xs:untypedAtomic("a string")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-27"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> General comparison involving xs:untypedAtomic/xs:string. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:untypedAtomic("a string") = "a stringDIFF")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-28"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> General comparison involving xs:untypedAtomic/xs:string. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not("a string" = xs:untypedAtomic("a stringDIFF"))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-29"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> General comparison involving xs:untypedAtomic/xs:string. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not("a string" = "a stringDIFF")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-30"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> General comparison with remove() as operand, resulting in incompatible operand types. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>remove((6, "a string"), 1) = 6</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-31"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> General comparison with remove() as operand, resulting in incompatible operand types. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>6 = remove(("a string", 6), 2)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-32"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> General comparison involving remove(), resulting in operands that require conversion to numeric from xs:untypedAtomic. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>remove((6, "a string"), 2) = xs:untypedAtomic("6")</test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPTY0004"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-33"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> General comparison involving remove(), resulting in operands that require conversion to numeric from xs:untypedAtomic. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic("6") = remove(("a string", 6), 1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPTY0004"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-34"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> General comparison involving remove(), resulting in operands that require conversion to numeric from xs:untypedAtomic. Implementations supporting the static typing feature may raise XPTY0004. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(remove((xs:untypedAtomic("6"), "a string"), 2)) = 6</test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPTY0004"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-35"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> General comparison involving remove(), resulting in operands that require conversion to numeric from xs:untypedAtomic. Implementations supporting the static typing feature may raise XPTY0004. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>6 = (remove(("a string", xs:untypedAtomic("6")), 1))</test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPTY0004"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-36"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> General comparison where the operands are various various sequence of xs:integers. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>1 = 1</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-37"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> General comparison where the operands are various various sequence of xs:integers. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(1, 2, 3) = 1</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-38"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> General comparison where the operands are various various sequence of xs:integers. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(1, 2, 3) = 2</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-39"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> General comparison where the operands are various various sequence of xs:integers. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(1, 2, 3) = 3</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-40"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> General comparison where the operands are various various sequence of xs:integers. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>2 = (1, 2, 3)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-41"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> General comparison where the operands are various various sequence of xs:integers. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>1 = (1, 2, 3)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-42"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> General comparison where the operands are various various sequence of xs:integers. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>3 = (1, 2, 3)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-43"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> General comparison causing a xs:untypedAtomic value to be cast to xs:boolean, and then compared. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic("false") = false()</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-44"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> General comparison causing a xs:untypedAtomic value to be cast to xs:boolean, and then compared. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>false() = xs:untypedAtomic("false")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-45"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> General comparison causing a xs:untypedAtomic value to be cast to xs:boolean, and then compared. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:untypedAtomic("true") = false())</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-46"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> General comparison causing a xs:untypedAtomic value to be cast to xs:boolean, and then compared. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(true() = xs:untypedAtomic("true"))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-47"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> General comparison which fails due to invalid operator combination or casting. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>"1" = 1</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-48"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> General comparison which fails due to invalid operator combination or casting. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>1 = "1"</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-49"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> General comparison which fails due to invalid operator combination or casting. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>false() = 5</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-50"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> General comparison which fails due to invalid operator combination or casting. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>5 = false()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-51"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> General comparison which fails due to invalid operator combination or casting. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic("three") = 3</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-52"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> General comparison which fails due to invalid operator combination or casting. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:string("false") = false()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-53"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> General comparison which fails due to invalid operator combination or casting. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>false() = xs:string("false")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-54"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> General comparison which fails due to invalid operator combination or casting. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic("falseERR") = false()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-55"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> General comparison which fails due to invalid operator combination or casting. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(xs:untypedAtomic("1"), xs:anyURI("example.com")) = (xs:untypedAtomic("2.0"), 3.0)</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-56"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> General comparison which fails due to invalid operator combination or casting. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>false() = xs:untypedAtomic("falseERR")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-57"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> General comparison which fails due to invalid operator combination or casting. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>3 = xs:untypedAtomic("three")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-58"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> General comparison which fails due to invalid operator combination or casting. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI("example.com/") = false()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-GenCompEq-59"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> General comparison which fails due to invalid operator combination or casting. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>false() = xs:anyURI("example.com/")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K2-GenCompEq-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Compare two values returned from fn:lower-case(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $vA as xs:string := ("B STRING", current-time(), string(<e>content</e>))[1] treat as xs:string; declare variable $vB as xs:string := ("b string", current-time(), string(<e>content</e>))[1] treat as xs:string; (lower-case($vA) = lower-case($vB))]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-GenCompEq-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Compare two values returned from fn:upper-case(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $vA as xs:string := ("B STRING", current-time(), string(<e>content</e>))[1] treat as xs:string; declare variable $vB as xs:string := ("b string", current-time(), string(<e>content</e>))[1] treat as xs:string; (upper-case($vA) = upper-case($vB))]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-GenCompEq-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Compare two non-matching values returned from fn:lower-case(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $vA as xs:string := ("B STRING", current-time(), string(<e>content</e>))[1] treat as xs:string; declare variable $vB as xs:string := ("no match", current-time(), string(<e>content</e>))[1] treat as xs:string; (lower-case($vA) = lower-case($vB))]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="K2-GenCompEq-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Compare two non-matching values returned from fn:upper-case(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $vA as xs:string := ("B STRING", current-time(), string(<e>content</e>))[1] treat as xs:string; declare variable $vB as xs:string := ("no match", current-time(), string(<e>content</e>))[1] treat as xs:string; (upper-case($vA) = upper-case($vB))]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="K2-GenCompEq-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Compare two non-matching values returned from fn:lower-case() and fn:upper-case(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $vA as xs:string := ("B STRING", current-time(), string(<e>content</e>))[1] treat as xs:string; declare variable $vB as xs:string := ("b string", current-time(), string(<e>content</e>))[1] treat as xs:string; (upper-case($vA) = lower-case($vB))]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="K2-GenCompEq-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Compare two non-matching values returned from fn:lower-case() and fn:upper-case(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $vA as xs:string := ("B STRING", current-time(), string(<e>content</e>))[1] treat as xs:string; declare variable $vB as xs:string := ("b string", current-time(), string(<e>content</e>))[1] treat as xs:string; (lower-case($vA) = upper-case($vB))]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="K2-GenCompEq-7"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A failing call to a codepoints-to-string(), that may be written to true. See section 2.3.4. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $x := codepoints-to-string(12) return ($x = $x)</test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCH0001"))</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="FOCH0001"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K2-GenCompEq-8"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> The operator causes atomization. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[empty(for $b in <e/> where $b/@id="person0" return ())]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0005"))</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="GenCompEq-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> General comparison where both types are instances of xs:untypedAtomic. </description>
    <created by="Sorin Nasoi" on="2009-05-01"/>
    <test>xs:untypedAtomic("a string") = xs:untypedAtomic("a stringDIFF")</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="GenCompEq-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> General comparison where one of the types is xs:untypedAtomic and the other xs:NCName. Expected error FORG0001. </description>
    <created by="Sorin Nasoi" on="2009-05-01"/>
    <test>xs:untypedAtomic("1") = xs:NCName("string")</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="GenCompEq-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> General comparison where one of the types is xs:untypedAtomic and the other xs:dayTimeDuration </description>
    <created by="Sorin Nasoi" on="2009-05-01"/>
    <test>xs:dayTimeDuration("P3DT08H34M12.143S") = xs:untypedAtomic("P3DT08H34M12.143S")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="GenCompEq-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> General comparison where one of the types is xs:untypedAtomic and the other xs:dayTimeDuration Expected error FORG0001. </description>
    <created by="Sorin Nasoi" on="2009-05-01"/>
    <test>xs:untypedAtomic("0") = xs:dayTimeDuration("PT0S")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
  <test-case name="GenCompEq-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> General comparison where one of the types is xs:untypedAtomic and the other xs:yearMonthDuration </description>
    <created by="Sorin Nasoi" on="2009-05-01"/>
    <test>xs:untypedAtomic("P1999Y10M") = xs:yearMonthDuration("P1999Y10M")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="GenCompEq-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> General comparison where one of the types is xs:untypedAtomic and the other xs:yearMonthDuration Expected error FORG0001. </description>
    <created by="Sorin Nasoi" on="2009-05-01"/>
    <test>xs:yearMonthDuration("P1999Y") = xs:untypedAtomic("1999")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0001"))</result-string>
    <result>
      <error code="FORG0001"/>
    </result>
  </test-case>
</test-set>