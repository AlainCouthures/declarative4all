<?xml version="1.0" encoding="UTF-8"?>
<test-set name="prod-StepExpr" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">
  <description>Tests for the StepExpr production</description>
  <link document="http://www.w3.org/TR/xquery-30/" idref="doc-xquery30-StepExpr" type="spec"/>
  <test-case name="K2-Steps-1">
    <description> A 'first-item' predicate combined with a name test inside a function. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>declare function local:myFunc() { e[1] }; local:myFunc()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPDY0002"))</result-string>
    <result>
      <error code="XPDY0002"/>
    </result>
  </test-case>
  <test-case name="K2-Steps-2">
    <description> A numeric predicate combined with a name test inside a function. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>declare function local:myFunc() { e[928] }; local:myFunc()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPDY0002"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0005"))</result-string>
    <result>
      <any-of>
        <error code="XPDY0002"/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K2-Steps-3">
    <description> A truth predicate combined with a name test inside a function. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>declare function local:myFunc() { e[true()] }; local:myFunc()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPDY0002"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0005"))</result-string>
    <result>
      <any-of>
        <error code="XPDY0002"/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K2-Steps-4">
    <description> A predicate with last() combined with a name test inside a function. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>declare function local:myFunc() { e[last()] }; local:myFunc()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPDY0002"))</result-string>
    <result>
      <error code="XPDY0002"/>
    </result>
  </test-case>
  <test-case name="K2-Steps-5">
    <description> A direct element constructor as step, followed by a name test. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[empty(<a/>/a)]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-Steps-6">
    <description> A direct element constructor as step, followed by the context item. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[<a/>/.]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<a/>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="K2-Steps-7">
    <description> Apply fn:count to an atomic step. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[count((<a/>, <!--comment-->)/3)]]>
    </test>
    <result-string>xs:integer("2")</result-string>
    <result>
      <assert-eq>2</assert-eq>
    </result>
  </test-case>
  <test-case name="K2-Steps-8">
    <description> '//' by itself is a syntax error. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(/)/(//)/foo</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0003"))</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPDY0002"))</result-string>
    <result>
      <any-of>
        <error code="XPST0003"/>
        <error code="XPDY0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K2-Steps-9">
    <description> A syntax error in a path step. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>child::local:b(:ada</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="K2-Steps-10">
    <description> The last step containing a mixture of nodes and atomic values. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $myVar := <e>text</e>; $myVar/text()/(<e/>, (), 1, <e/>)]]>
    </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0018"))</result-string>
    <result>
      <error code="XPTY0018"/>
    </result>
  </test-case>
  <test-case name="K2-Steps-11">
    <description> '///' is an invalid expression. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>///</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="K2-Steps-12">
    <description> Combine variables, the context item and path expressions. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $e := ()/.; declare variable $b := <b/>/.; $e, <b/>]]>
    </test>
    <result-string/>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0005"))</result-string>
    <result>
      <any-of>
        <assert-xml>
          <![CDATA[<b/>]]>
        </assert-xml>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K2-Steps-13">
    <description> Ensure the focus is available through a for-expression. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[empty(<e/>/(for $i in e return $i))]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-Steps-14">
    <description> Ensure sorting and de-duplication is applied to variables when appearing in paths. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[<r> { let $i := <e> <a/> <b/> </e> let $b := ($i/b, $i/a, $i/b, $i/a) return ()/$b } </r>]]>
    </test>
    <result-string/>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0005"))</result-string>
    <result>
      <any-of>
        <assert-xml>
          <![CDATA[<r/>]]>
        </assert-xml>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K2-Steps-15">
    <description> Ensure sorting and de-duplication is applied to variables when appearing in paths(#2). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[<r> { let $i := <e> <a/> <b/> </e> let $b := ($i/b, $i/a, $i/b, $i/a) return <e/>/$b } </r>]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<r><a/><b/></r>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="K2-Steps-16">
    <description> Ensure sorting and de-duplication is applied to variables when appearing in paths(#3). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[<r> { let $i := <e> <a/> <b/> </e> let $b := ($i/b, $i/a, $i/b, $i/a) return <e/>/./$b } </r>]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<r><a/><b/></r>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="K2-Steps-17">
    <description> Ensure sorting and de-duplication is applied to variables when appearing in paths(#4). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[<r> { let $i := <e> <a/> <b/> </e> let $b := ($i/b, $i/a, $i/b, $i/a) return $b/. } </r>]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<r><a/><b/></r>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="K2-Steps-18">
    <description> Trigger node sorting of a peculiar case. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[<e> <a/> </e>/*/(., .)/.]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<a/>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="K2-Steps-19">
    <description> Trigger node sorting of a peculiar case(#2). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[<e> <a/> </e>/(., .)/.]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<e><a/></e>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="K2-Steps-20">
    <description> Use nested name tests. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[<e> <a/> <b/> </e>/((b, a)/., (.), (*, *))]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<e><a/><b/></e><a/><b/>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="K2-Steps-21">
    <description> Tricky combination of focuses and function calls. </description>
    <created by="Frans Englich" on="2008-02-14"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $root := <a> <b e="B"/> <c e="B"/> </a>; declare function local:function($arg) { $root["B" eq $arg/@e] }; $root/local:function(c)]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<a><b e="B"/><c e="B"/></a>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="K2-Steps-22">
    <description> Tricky combination of focuses, function calls, and a cardinality check. </description>
    <created by="Frans Englich" on="2008-02-14"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $root := <a> <b e="B"/> <c e="B"/> </a>; declare function local:function($arg) { $root[exactly-one($arg/@e)] }; $root/local:function(c)]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<a><b e="B"/><c e="B"/></a>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="K2-Steps-23">
    <description> Tricky combination of focuses and function calls(#2). </description>
    <created by="Frans Englich" on="2008-02-15"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $root := <a><c e=""/></a>; declare function local:function($arg) { $root[$arg/@e] }; $root/local:function(c)]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<a><c e=""/></a>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="K2-Steps-24">
    <description> Tricky combination of focuses and function calls(#2). </description>
    <created by="Frans Englich" on="2008-02-15"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $root := <root> <b d=""/> <c> <c d=""/> <c/> </c> </root>; declare function local:function($object) { $root/b[@d = $object/@d] }; $root/c/c/local:function(.)]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<b d=""/>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="K2-Steps-25">
    <description> Tricky combination of focuses and function calls(#3). </description>
    <created by="Frans Englich" on="2008-02-15"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[
        declare variable $root := <root> <b d=""/> <c> <c d=""/> <c/> </c> </root>; 
        declare function local:function($object) { $root/b[@d = $object/@d] }; 
        $root//local:function(c)]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<b d=""/>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="K2-Steps-26">
    <description> Tricky combination of focuses and function calls(#4). </description>
    <created by="Frans Englich" on="2008-02-15"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $root := <root> <b d=""/> <c> <c d=""/> <c/> </c> </root>; declare function local:function($object) { $root/b[$object/@d] }; $root//local:function(c)]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<b d=""/>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="K2-Steps-27">
    <description> Tricky combination of focuses and function calls(#5). </description>
    <created by="Frans Englich" on="2008-02-15"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $root := <root> <b d=""/> <c> <c d=""/> <c/> </c> </root>; declare function local:function($object) { $root[$object/@d] }; $root//local:function(c)]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<root><b d=""/><c><c d=""/><c/></c></root>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="K2-Steps-28">
    <description> Tricky combination of focuses and function calls(#6). </description>
    <created by="Frans Englich" on="2008-02-15"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $root := <root> <b d=""/> <c d=""/> </root>; declare function local:function($object) { $root[$object/@d] }; $root//local:function(c)]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<root><b d=""/><c d=""/></root>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="K2-Steps-29">
    <description> Tricky combination of focuses and function calls(#7). </description>
    <created by="Frans Englich" on="2008-02-15"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $root := <root> <c d=""/> </root>; declare function local:function($object) { $root[$object/@d] }; $root//local:function(c)]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<root><c d=""/></root>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="K2-Steps-30">
    <description> Tricky combination of focuses and function calls(#8). </description>
    <created by="Frans Englich" on="2008-02-15"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $root := <root> <c d=""/> </root>; declare function local:function($object) { $root[$object] }; $root//local:function(c)]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<root><c d=""/></root>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="K2-Steps-31">
    <description> Tricky combination of focuses and function calls(#9). </description>
    <created by="Frans Englich" on="2008-02-15"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $root := <root><c/></root>; declare function local:function($arg) { $root[$arg] }; $root//local:function(.)]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<root><c/></root>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="K2-Steps-32">
    <description> Tricky combination of focus and a recursive function call. </description>
    <created by="Frans Englich" on="2008-02-18"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $root := <root/>; declare function local:function($arg, $count as xs:integer) { $arg, $root, if($count eq 2) then $root else local:function($arg, $count + 1) }; $root/local:function(., 1)]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<root/>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="K2-Steps-33">
    <description> Tricky combination of focus and a recursive function call(#2). </description>
    <created by="Frans Englich" on="2008-03-05"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $root := ( <b d=""/>, <c> <c d=""/> </c> ); declare function local:function($object) { $root[@d eq $object/@d] }; $root/local:function(c)]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<b d=""/>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="K2-Steps-34">
    <description> Tricky combination of focus and a recursive function call(#3). </description>
    <created by="Frans Englich" on="2008-03-05"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $root := ( <b d=""/>, <c d=""> <c d=""/> </c> ); declare function local:function($object) { $root[@d eq $object/@d] }; $root/local:function(c)]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<b d=""/><c d=""><c d=""/></c>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="K2-Steps-35">
    <description> Combine predicate with an element and text node constructor. </description>
    <created by="Frans Englich" on="2008-05-15"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[<e/>[1]/text{string-join(., " ")}, 1]]>
    </test>
    <result-string/>
    <result>
      <all-of>
        <assert-count>2</assert-count>
        <assert>string($result[1]) eq ""</assert>
        <assert>$result[2] eq 1</assert>
      </all-of>
    </result>
  </test-case>
  <test-case name="Steps-leading-lone-slash-1">
    <description> Verify xgc:leading-lone-slash implementation This expression is a syntax error: /*5 </description>
    <created by="Jim Melton" on="2009-10-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $var := document {<a>123</a>}; $var[/*5]]]>
    </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="Steps-leading-lone-slash-1a">
    <description> Verify xgc:leading-lone-slash implementation This expression is a valid expression (/)*5 </description>
    <created by="Jim Melton" on="2009-10-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $var := document {<a>123</a>}; $var[(/)*5]]]>
    </test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="Steps-leading-lone-slash-2">
    <description> Verify xgc:leading-lone-slash implementation This expression is a syntax error: /a </description>
    <created by="Jim Melton" on="2009-10-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $var := document {<a>123</a>}; $var[/<a]]]>
    </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="Steps-leading-lone-slash-2a">
    <description> Verify xgc:leading-lone-slash implementation This expression is a valid expression (/)a </description>
    <created by="Jim Melton" on="2009-10-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $var := document {<a>123</a>}; $var[(/)<a]]]>
    </test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="Steps-leading-lone-slash-3">
    <description> Verify xgc:leading-lone-slash implementation This expression is a syntax error: /5 </description>
    <created by="Jim Melton" on="2009-10-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $var := document {<a>123</a>}; $var[/<5]]]>
    </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="Steps-leading-lone-slash-3a">
    <description> Verify xgc:leading-lone-slash implementation This expression is a valid expression (/)5 </description>
    <created by="Jim Melton" on="2009-10-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $var := document {<a>123</a>}; $var[(/)<5]]]>
    </test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="Steps-leading-lone-slash-4">
    <description> Verify xgc:leading-lone-slash implementation This expression is a syntax error: //b </description>
    <created by="Jim Melton" on="2009-10-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $var := document {<a>123</a>}; $var[/</b]]]>
    </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="Steps-leading-lone-slash-5">
    <description> Verify xgc:leading-lone-slash implementation This expression is a syntax error: /a div 3 </description>
    <created by="Jim Melton" on="2009-10-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $var := document {<a>123</a>}; $var[/<a div 3]]]>
    </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="Steps-leading-lone-slash-5a">
    <description> Verify xgc:leading-lone-slash implementation This expression is a valid expression (/)a div 3 </description>
    <created by="Jim Melton" on="2009-10-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $var := document {<a>123</a>}; $var[(/)<a div 3]]]>
    </test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="Steps-leading-lone-slash-6">
    <description> Verify xgc:leading-lone-slash implementation This expression is a syntax error: /if ($doclevel) then / else /* </description>
    <created by="Jim Melton" on="2009-10-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $var := document {<a>123</a>}; $var[/if ($doclevel) then / else /*]]]>
    </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="Steps-leading-lone-slash-7">
    <description> Verify xgc:leading-lone-slash implementation This expression is a syntax error: / is $a </description>
    <created by="Jim Melton" on="2009-10-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $var := document {<a>123</a>}; declare variable $a := document {<a>123</a>}; $var[/ is $a]]]>
    </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="Steps-leading-lone-slash-7a">
    <description> Verify xgc:leading-lone-slash implementation This expression is a valid expression (/) is $a </description>
    <created by="Jim Melton" on="2009-10-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $var := document {<a>123</a>}; declare variable $a := document {<a>123</a>}; $var[(/) is $a]]]>
    </test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="Steps-leading-lone-slash-8">
    <description> Verify xgc:leading-lone-slash implementation This expression is a syntax error: / instance of document-node(element(x)) </description>
    <created by="Jim Melton" on="2009-10-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $var := document {<a>123</a>}; $var[/ instance of document-node(element(x))]]]>
    </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="Steps-leading-lone-slash-8a">
    <description> Verify xgc:leading-lone-slash implementation This expression is a valid expression (/) instance of document-node(element(x)) </description>
    <created by="Jim Melton" on="2009-10-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $var := document {<a>123</a>}; $var[(/) instance of document-node(element(x))]]]>
    </test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="Steps-leading-lone-slash-9">
    <description> Verify xgc:leading-lone-slash implementation This expression is a syntax error: let $doc := / return $doc/* </description>
    <created by="Jim Melton" on="2009-10-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $var := document {<a>123</a>}; let $doc := / return $doc/*]]>
    </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="Steps-leading-lone-slash-10">
    <description> Verify xgc:leading-lone-slash implementation This expression is a valid path expression /* </description>
    <created by="Jim Melton" on="2009-10-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $var := document {<a>123</a>}; $var[/*]]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<a>123</a>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="Steps-leading-lone-slash-11">
    <description> Verify xgc:leading-lone-slash implementation This expression is a valid path expression /a/ </description>
    <created by="Jim Melton" on="2009-10-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $var := document {<a>123</a>}; $var[/<a/>]]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<a>123</a>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="Steps-leading-lone-slash-12">
    <description> Verify xgc:leading-lone-slash implementation This expression is a valid path expression /a div="3"/ </description>
    <created by="Jim Melton" on="2009-10-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $var := document {<a>123</a>}; $var[/<a div="3"/>]]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<a>123</a>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="Steps-leading-lone-slash-13">
    <description> Verify xgc:leading-lone-slash implementation This expression is a valid path expression /unordered{a} </description>
    <created by="Jim Melton" on="2009-10-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $var := document {<a>123</a>}; $var[/unordered{a}]]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<a>123</a>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="Steps-leading-lone-slash-14">
    <description> Verify xgc:leading-lone-slash implementation This expression is a valid path expression /max(a) </description>
    <created by="Jim Melton" on="2009-10-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $var := document {<a>123</a>}; $var[/max(a)]]]>
    </test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="Steps-leading-lone-slash-15">
    <description> Verify xgc:leading-lone-slash implementation This expression is a valid expression /* </description>
    <created by="Jim Melton" on="2009-10-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $var := document {<a>123</a>}; $var[/-5]]]>
    </test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="Steps-leading-lone-slash-16">
    <description> Verify xgc:leading-lone-slash implementation This expression is a valid expression /=$a </description>
    <created by="Jim Melton" on="2009-10-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $var := document {<a>123</a>}; declare variable $a := document {<a>123</a>}; $var[/=$a]]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<a>123</a>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="Steps-leading-lone-slash-17">
    <description> Verify xgc:leading-lone-slash implementation This expression is a valid expression 5*/ </description>
    <created by="Jim Melton" on="2009-10-01"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $var := document {<a>123</a>}; declare variable $a := document {<a>123</a>}; $var[5*/]]]>
    </test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
</test-set>