<test-set name="prod-OrExpr" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">
  <description>Tests for the OrExpr and AndExpr productions</description>
  <link document="http://www.w3.org/TR/xquery-30/" idref="doc-xquery30-OrExpr" type="spec"/>
  <link document="XQuery" idref="id-logical-expressions" section-number="3.6" type="spec"/>
  <environment name="bib">
    <source file="../docs/bib.xml" role=".">
      <description>Data for the the XML Query XMP use cases</description>
      <created by="XQuery WG" on="2005-02-11"/>
    </source>
  </environment>
  <test-case name="op-logical-and-001"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using Boolean values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>false() and false()</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-002"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using Boolean values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>true() and false()</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-003"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using Boolean values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>false() and true()</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-004"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using Boolean values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>true() and true()</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-005"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Logical &apos;and&apos; using sequences </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>() and ()</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-006"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Logical &apos;and&apos; using sequences </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>(1) and ()</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-007"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Logical &apos;and&apos; using sequences </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>() and (1)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-008"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using sequences </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>(1) and (1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-009"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using sequences </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>(0) and ()</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-010"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Logical &apos;and&apos; using sequences </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>() and (0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-011"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using sequences </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>(0) and (0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-012"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using sequences </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>(1) and (0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-013"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using sequences </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>(0) and (1)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-014"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using sequences </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <environment ref="bib"/>
    <dependency type="spec" value="XQ10+"/>
    <test>(0) and (/bib/book/price/text())</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-015"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:untypedAtomic("65.95"),xs:untypedAtomic("65.95"),xs:untypedAtomic("39.95"),xs:untypedAtomic("129.95"))</response-string>
    <description> Logical &apos;and&apos; using sequences </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <environment ref="bib"/>
    <dependency type="spec" value="XQ10+"/>
    <test>(/bib/book/price/text()) and (1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-016"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:untypedAtomic("65.95"),xs:untypedAtomic("65.95"),xs:untypedAtomic("39.95"),xs:untypedAtomic("129.95"))</response-string>
    <description> Logical &apos;and&apos; using sequences </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <environment ref="bib"/>
    <dependency type="spec" value="XQ10+"/>
    <test>(/bib/book/price/text()) and (/bib/book/price/text())</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-017"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using string values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>"" and &apos;&apos;</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-018"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using string values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>"" and &apos;a&apos;</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-019"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using string values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>"0" and &apos;&apos;</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-020"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using string values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>"a" and &apos;0&apos;</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-021"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using string values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:string("") and xs:string(&apos;&apos;)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-022"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using string values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:string("") and xs:string(&apos;abc&apos;)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-023"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using string values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:string("abc") and xs:string(&apos;&apos;)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-024"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using string values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:string("0") and xs:string(&apos;abc&apos;)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-025"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using untypedAtomic values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:untypedAtomic(&apos;&apos;) and xs:untypedAtomic("")</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-026"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using untypedAtomic values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:untypedAtomic(&apos;abc&apos;) and xs:untypedAtomic("")</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-027"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using untypedAtomic values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:untypedAtomic(&apos;&apos;) and xs:untypedAtomic("0")</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-028"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using untypedAtomic values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:untypedAtomic(&apos;abc&apos;) and xs:untypedAtomic("0")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-029"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using number values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>0 and 0</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-030"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using number values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>0 and 1</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-031"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using number values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>1 and 0</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-032"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using number values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>0 and -1</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-033"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using number values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>-1 and 1</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-034"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using float values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:float(0) and xs:float(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-035"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using float values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:float(0) and xs:float(1)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-036"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using float values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:float(-1) and xs:float(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-037"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using float values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:float(1) and xs:float(-1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-038"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using float values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:float(&apos;NaN&apos;) and xs:float(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-039"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using float values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:float(&apos;NaN&apos;) and xs:float(1)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-040"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using float values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:float(&apos;NaN&apos;) and xs:float(&apos;NaN&apos;)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-041"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using float values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:float(&apos;INF&apos;) and xs:float(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-042"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using float values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:float(&apos;INF&apos;) and xs:float(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-043"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using float values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:float(&apos;INF&apos;) and xs:float(&apos;NaN&apos;)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-044"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using float values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:float(&apos;-INF&apos;) and xs:float(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-045"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using float values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:float(&apos;-INF&apos;) and xs:float(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-046"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using float values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:float(&apos;-INF&apos;) and xs:float(&apos;NaN&apos;)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-047"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using float values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:float(&apos;-INF&apos;) and xs:float(&apos;INF&apos;)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-048"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using double values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:double(0) and xs:double(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-049"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using double values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:double(0) and xs:double(1)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-050"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using double values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:double(-1) and xs:double(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-051"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using double values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:double(1) and xs:double(-1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-052"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using double values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:double(&apos;NaN&apos;) and xs:double(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-053"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using double values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:double(&apos;NaN&apos;) and xs:double(1)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-054"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using double values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:double(&apos;NaN&apos;) and xs:double(&apos;NaN&apos;)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-055"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using double values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:double(&apos;INF&apos;) and xs:double(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-056"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using double values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:double(&apos;INF&apos;) and xs:double(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-057"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using double values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:double(&apos;INF&apos;) and xs:double(&apos;NaN&apos;)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-058"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using double values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:double(&apos;-INF&apos;) and xs:double(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-059"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using double values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:double(&apos;-INF&apos;) and xs:double(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-060"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using double values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:double(&apos;-INF&apos;) and xs:double(&apos;NaN&apos;)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-061"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using double values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:double(&apos;-INF&apos;) and xs:double(&apos;INF&apos;)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-062"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using decimal values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:decimal(0) and xs:decimal(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-063"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using decimal values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:decimal(0) and xs:decimal(1)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-064"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using decimal values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:decimal(-1) and xs:decimal(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-065"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using decimal values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:decimal(1) and xs:decimal(-1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-066"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using decimal values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:decimal(9.99999999999999999999999999) and xs:decimal(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0006"))</result-string>
    <result>
      <any-of>
        <assert-false/>
        <error code="FOCA0006"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="op-logical-and-067"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using decimal values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:decimal(-123456789.123456789123456789) and xs:decimal(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-068"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using decimal values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:decimal(9.99999999999999999999999999) and xs:decimal(-123456789.123456789123456789)</test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0006"))</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="FOCA0006"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="op-logical-and-069"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using integer values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:integer(0) and xs:integer(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-070"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using integer values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:integer(0) and xs:integer(1)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-071"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using integer values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:integer(-1) and xs:integer(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-072"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using integer values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:integer(1) and xs:integer(-1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-073"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using integer values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:integer(99999999999999999) and xs:integer(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-074"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using integer values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:integer(-99999999999999999) and xs:integer(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-075"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using integer values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:integer(99999999999999999) and xs:integer(-99999999999999999)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-076"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using nonPositiveInteger values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:nonPositiveInteger(0) and xs:nonPositiveInteger(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-077"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using nonPositiveInteger values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:nonPositiveInteger(0) and xs:nonPositiveInteger(-1)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-078"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using nonPositiveInteger values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:nonPositiveInteger(-1) and xs:nonPositiveInteger(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-079"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using nonPositiveInteger values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:nonPositiveInteger(-1) and xs:nonPositiveInteger(-1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-080"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using nonPositiveInteger values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:nonPositiveInteger(-99999999999999999) and xs:nonPositiveInteger(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-081"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using nonPositiveInteger values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:nonPositiveInteger(-1) and xs:nonPositiveInteger(-9999999999)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-082"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using nonPositiveInteger values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:nonPositiveInteger(-99999999999999999) and xs:nonPositiveInteger(-99999999999999999)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-083"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using nonNegativeInteger values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:nonNegativeInteger(0) and xs:nonNegativeInteger(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-084"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using nonNegativeInteger values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:nonNegativeInteger(0) and xs:nonNegativeInteger(1)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-085"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using nonNegativeInteger values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:nonNegativeInteger(1) and xs:nonNegativeInteger(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-086"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using nonNegativeInteger values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:nonNegativeInteger(1) and xs:nonNegativeInteger(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-087"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using nonNegativeInteger values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:nonNegativeInteger(9999999999) and xs:nonNegativeInteger(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-088"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using nonNegativeInteger values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:nonNegativeInteger(1) and xs:nonNegativeInteger(99999999999999999)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-089"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using nonNegativeInteger values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:nonNegativeInteger(99999999999999999) and xs:nonNegativeInteger(99999999999999999)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-090"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using negativeInteger values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:negativeInteger(-1) and xs:negativeInteger(-1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-091"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using negativeInteger values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:negativeInteger(-99999999999999999) and xs:negativeInteger(-1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-092"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using negativeInteger values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:negativeInteger(-99999999999999999) and xs:negativeInteger(-99999999999999999)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-093"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using positiveInteger values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:positiveInteger(1) and xs:positiveInteger(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-094"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using positiveInteger values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:positiveInteger(99999999999999999) and xs:positiveInteger(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-095"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using positiveInteger values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:positiveInteger(99999999999999999) and xs:positiveInteger(99999999999999999)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-096"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using long values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:long(0) and xs:long(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-097"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using long values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:long(0) and xs:long(1)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-098"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using long values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:long(-1) and xs:long(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-099"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using long values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:long(1) and xs:long(-1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-100"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Logical &apos;and&apos; using long values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:long(9223372036854775807) and xs:long(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-101"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Logical &apos;and&apos; using long values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:long(9223372036854775807) and xs:long(-1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-102"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using long values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:long(-99999999999999999) and xs:long(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-103"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using long values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:long(-99999999999999999) and xs:long(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-104"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using long values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:long(99999999999999999) and xs:long(-99999999999999999)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-105"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using unsignedLong values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedLong(0) and xs:unsignedLong(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-106"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using unsignedLong values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedLong(0) and xs:unsignedLong(1)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-107"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using unsignedLong values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedLong(1) and xs:unsignedLong(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-108"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using unsignedLong values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedLong(1) and xs:unsignedLong(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-109"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using unsignedLong values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedLong(9223372036854775807) and xs:unsignedLong(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-110"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using unsignedLong values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedLong(9223372036854775807) and xs:unsignedLong(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-111"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using unsignedLong values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedLong(99999999999999999) and xs:unsignedLong(99999999999999999)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-112"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using int values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:int(0) and xs:int(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-113"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using int values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:int(0) and xs:int(1)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-114"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using int values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:int(-1) and xs:int(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-115"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using int values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:int(1) and xs:int(-1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-116"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using int values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:int(2147483647) and xs:int(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-117"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using int values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:int(2147483647) and xs:int(-1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-118"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using int values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:int(-2147483648) and xs:int(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-119"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using int values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:int(-2147483648) and xs:int(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-120"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using int values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:int(2147483647) and xs:int(-2147483648)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-121"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using unsignedInt values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedInt(0) and xs:unsignedInt(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-122"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using unsignedInt values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedInt(0) and xs:unsignedInt(1)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-123"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using unsignedInt values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedInt(1) and xs:unsignedInt(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-124"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using unsignedInt values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedInt(1) and xs:unsignedInt(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-125"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using unsignedInt values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedInt(4294967295) and xs:unsignedInt(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-126"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using unsignedInt values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedInt(4294967295) and xs:unsignedInt(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-127"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using unsignedInt values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedInt(4294967295) and xs:unsignedInt(4294967295)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-128"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using short values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:short(0) and xs:short(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-129"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using short values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:short(0) and xs:short(1)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-130"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using short values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:short(-1) and xs:short(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-131"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using short values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:short(1) and xs:short(-1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-132"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using short values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:short(32767) and xs:short(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-133"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using short values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:short(32767) and xs:short(-1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-134"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using short values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:short(-32768) and xs:short(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-135"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using short values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:short(-32768) and xs:short(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-136"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using short values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:short(32767) and xs:short(-32768)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-137"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using unsignedShort values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedShort(0) and xs:unsignedShort(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-138"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using unsignedShort values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedShort(0) and xs:unsignedShort(1)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-139"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using unsignedShort values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedShort(1) and xs:unsignedShort(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-140"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using unsignedShort values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedShort(1) and xs:unsignedShort(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-141"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using unsignedShort values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedShort(65535) and xs:unsignedShort(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-142"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using unsignedShort values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedShort(65535) and xs:unsignedShort(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-143"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using unsignedShort values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedShort(65535) and xs:unsignedShort(65535)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-144"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using byte values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:byte(0) and xs:byte(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-145"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using byte values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:byte(0) and xs:byte(1)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-146"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using byte values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:byte(-1) and xs:byte(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-147"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using byte values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:byte(1) and xs:byte(-1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-148"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using byte values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:byte(127) and xs:byte(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-149"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using byte values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:byte(127) and xs:byte(-1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-150"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using byte values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:byte(-128) and xs:byte(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-151"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using byte values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:byte(-128) and xs:byte(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-152"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using byte values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:byte(127) and xs:byte(-128)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-153"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using unsignedByte values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedByte(0) and xs:unsignedByte(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-154"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using unsignedByte values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedByte(0) and xs:unsignedByte(1)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-155"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using unsignedByte values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedByte(1) and xs:unsignedByte(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-156"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using unsignedByte values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedByte(1) and xs:unsignedByte(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-157"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;and&apos; using unsignedByte values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedByte(255) and xs:unsignedByte(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-and-158"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using unsignedByte values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedByte(255) and xs:unsignedByte(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-and-159"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;and&apos; using unsignedByte values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedByte(255) and xs:unsignedByte(255)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-001"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;or&apos; using boolean values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>false() or false()</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-or-002"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using boolean values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>true() or false()</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-003"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using boolean values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>false() or true()</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-004"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using boolean values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>true() or true()</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-005"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Logical &apos;or&apos; using sequences values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>() or ()</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-or-006"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using sequences values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>(1) or ()</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-007"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using sequences values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>() or (1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-008"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using sequences values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>(1) or (1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-009"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Logical &apos;or&apos; using sequences values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>(0) or ()</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-or-010"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;or&apos; using sequences values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>() or (0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-or-011"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;or&apos; using sequences values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>(0) or (0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-or-012"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using sequences values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>(1) or (0)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-013"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using sequences values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>(0) or (1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-014"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Logical &apos;or&apos; using sequences values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <environment ref="bib"/>
    <dependency type="spec" value="XQ10+"/>
    <test>(0) or (/bib/book/price/text())</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-015"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Logical &apos;or&apos; using sequences values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <environment ref="bib"/>
    <dependency type="spec" value="XQ10+"/>
    <test>(/bib/book/price/text()) or (1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-016"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Logical &apos;or&apos; using sequences values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <environment ref="bib"/>
    <dependency type="spec" value="XQ10+"/>
    <test>(/bib/book/price/text()) or (/bib/book/price/text())</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-017"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;or&apos; using string values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>"" or &apos;&apos;</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-or-018"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using string values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>"" or &apos;a&apos;</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-019"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using string values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>"0" or &apos;&apos;</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-020"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using string values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>"a" or &apos;0&apos;</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-021"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;or&apos; using string values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:string("") or xs:string(&apos;&apos;)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-or-022"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using string values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:string("") or xs:string(&apos;abc&apos;)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-023"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using string values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:string("abc") or xs:string(&apos;&apos;)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-024"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using string values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:string("0") or xs:string(&apos;abc&apos;)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-025"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;or&apos; using untypedAtomic values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:untypedAtomic(&apos;&apos;) or xs:untypedAtomic("")</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-or-026"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using untypedAtomic values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:untypedAtomic(&apos;abc&apos;) or xs:untypedAtomic("")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-027"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using untypedAtomic values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:untypedAtomic(&apos;&apos;) or xs:untypedAtomic("0")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-028"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using untypedAtomic values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:untypedAtomic(&apos;abc&apos;) or xs:untypedAtomic("0")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-029"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;or&apos; using number values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>0 or 0</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-or-030"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using number values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>0 or 1</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-031"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using number values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>1 or 0</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-032"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using number values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>0 or -1</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-033"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using number values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>-1 or 1</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-034"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;or&apos; using float values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:float(0) or xs:float(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-or-035"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using float values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:float(0) or xs:float(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-036"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using float values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:float(-1) or xs:float(0)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-037"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using float values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:float(1) or xs:float(-1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-038"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;or&apos; using float values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:float(&apos;NaN&apos;) or xs:float(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-or-039"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using float values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:float(&apos;NaN&apos;) or xs:float(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-040"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;or&apos; using float values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:float(&apos;NaN&apos;) or xs:float(&apos;NaN&apos;)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-or-041"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;or&apos; using float values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:float(&apos;INF&apos;) or xs:float(0)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-042"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using float values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:float(&apos;INF&apos;) or xs:float(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-043"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;or&apos; using float values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:float(&apos;INF&apos;) or xs:float(&apos;NaN&apos;)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-044"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;or&apos; using float values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:float(&apos;-INF&apos;) or xs:float(0)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-045"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using float values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:float(&apos;-INF&apos;) or xs:float(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-046"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;or&apos; using float values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:float(&apos;-INF&apos;) or xs:float(&apos;NaN&apos;)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-047"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;or&apos; using float values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:float(&apos;-INF&apos;) or xs:float(&apos;INF&apos;)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-048"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;or&apos; using double values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:double(0) or xs:double(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-or-049"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using double values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:double(0) or xs:double(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-050"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using double values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:double(-1) or xs:double(0)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-051"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using double values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:double(1) or xs:double(-1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-052"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;or&apos; using double values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:double(&apos;NaN&apos;) or xs:double(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-or-053"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using double values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:double(&apos;NaN&apos;) or xs:double(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-054"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;or&apos; using double values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:double(&apos;NaN&apos;) or xs:double(&apos;NaN&apos;)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-or-055"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;or&apos; using double values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:double(&apos;INF&apos;) or xs:double(0)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-056"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using double values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:double(&apos;INF&apos;) or xs:double(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-057"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;or&apos; using double values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:double(&apos;INF&apos;) or xs:double(&apos;NaN&apos;)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-058"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;or&apos; using double values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:double(&apos;-INF&apos;) or xs:double(0)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-059"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using double values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:double(&apos;-INF&apos;) or xs:double(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-060"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;or&apos; using double values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:double(&apos;-INF&apos;) or xs:double(&apos;NaN&apos;)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-061"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;or&apos; using double values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:double(&apos;-INF&apos;) or xs:double(&apos;INF&apos;)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-062"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;or&apos; using decimal values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:decimal(0) or xs:decimal(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-or-063"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using decimal values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:decimal(0) or xs:decimal(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-064"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using decimal values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:decimal(-1) or xs:decimal(0)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-065"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using decimal values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:decimal(1) or xs:decimal(-1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-066"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using decimal values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:decimal(9.99999999999999999999999999) or xs:decimal(0)</test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0006"))</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="FOCA0006"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="op-logical-or-067"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using decimal values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:decimal(-123456789.123456789123456789) or xs:decimal(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-068"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using decimal values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:decimal(9.99999999999999999999999999) or xs:decimal(-123456789.123456789123456789)</test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOCA0006"))</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="FOCA0006"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="op-logical-or-069"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;or&apos; using integer values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:integer(0) or xs:integer(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-or-070"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using integer values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:integer(0) or xs:integer(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-071"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using integer values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:integer(-1) or xs:integer(0)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-072"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using integer values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:integer(1) or xs:integer(-1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-073"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using integer values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:integer(99999999999999999) or xs:integer(0)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-074"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using integer values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:integer(-99999999999999999) or xs:integer(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-075"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using integer values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:integer(99999999999999999) or xs:integer(-99999999999999999)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-076"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;or&apos; using nonPositiveInteger values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:nonPositiveInteger(0) or xs:nonPositiveInteger(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-or-077"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using nonPositiveInteger values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:nonPositiveInteger(0) or xs:nonPositiveInteger(-1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-078"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using nonPositiveInteger values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:nonPositiveInteger(-1) or xs:nonPositiveInteger(0)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-079"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using nonPositiveInteger values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:nonPositiveInteger(-1) or xs:nonPositiveInteger(-1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-080"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using nonPositiveInteger values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:nonPositiveInteger(-99999999999999999) or xs:nonPositiveInteger(0)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-081"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using nonPositiveInteger values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:nonPositiveInteger(-1) or xs:nonPositiveInteger(-99999999999999999)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-082"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using nonPositiveInteger values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:nonPositiveInteger(-99999999999999999) or xs:nonPositiveInteger(-99999999999999999)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-083"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;or&apos; using nonNegativeInteger values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:nonNegativeInteger(0) or xs:nonNegativeInteger(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-or-084"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using nonNegativeInteger values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:nonNegativeInteger(0) or xs:nonNegativeInteger(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-085"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using nonNegativeInteger values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:nonNegativeInteger(1) or xs:nonNegativeInteger(0)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-086"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using nonNegativeInteger values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:nonNegativeInteger(1) or xs:nonNegativeInteger(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-087"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using nonNegativeInteger values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:nonNegativeInteger(99999999999999999) or xs:nonNegativeInteger(0)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-088"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using nonNegativeInteger values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:nonNegativeInteger(1) or xs:nonNegativeInteger(99999999999999999)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-089"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using nonNegativeInteger values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:nonNegativeInteger(99999999999999999) or xs:nonNegativeInteger(99999999999999999)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-090"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using negativeInteger values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:negativeInteger(-1) or xs:negativeInteger(-1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-091"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using negativeInteger values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:negativeInteger(-99999999999999999) or xs:negativeInteger(-1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-092"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using negativeInteger values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:negativeInteger(-99999999999999999) or xs:negativeInteger(-99999999999999999)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-093"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using positiveInteger values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:positiveInteger(1) or xs:positiveInteger(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-094"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using positiveInteger values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:positiveInteger(99999999999999999) or xs:positiveInteger(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-095"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using positiveInteger values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:positiveInteger(99999999999999999) or xs:positiveInteger(99999999999999999)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-096"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;or&apos; using long values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:long(0) or xs:long(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-or-097"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using long values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:long(0) or xs:long(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-098"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using long values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:long(-1) or xs:long(0)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-099"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using long values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:long(1) or xs:long(-1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-100"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Logical &apos;or&apos; using long values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:long(9223372036854775807) or xs:long(0)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-101"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Logical &apos;or&apos; using long values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:long(9223372036854775807) or xs:long(-1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-102"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using long values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:long(-99999999999999999) or xs:long(0)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-103"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using long values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:long(-99999999999999999) or xs:long(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-104"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using long values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:long(99999999999999999) or xs:long(-99999999999999999)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-105"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;or&apos; using unsignedLong values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedLong(0) or xs:unsignedLong(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-or-106"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using unsignedLong values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedLong(0) or xs:unsignedLong(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-107"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using unsignedLong values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedLong(1) or xs:unsignedLong(0)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-108"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using unsignedLong values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedLong(1) or xs:unsignedLong(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-109"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using unsignedLong values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedLong(9223372036854775807) or xs:unsignedLong(0)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-110"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using unsignedLong values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedLong(9223372036854775807) or xs:unsignedLong(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-111"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using unsignedLong values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedLong(99999999999999999) or xs:unsignedLong(99999999999999999)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-112"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;or&apos; using int values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:int(0) or xs:int(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-or-113"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using int values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:int(0) or xs:int(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-114"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using int values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:int(-1) or xs:int(0)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-115"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using int values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:int(1) or xs:int(-1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-116"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using int values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:int(2147483647) or xs:int(0)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-117"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using int values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:int(2147483647) or xs:int(-1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-118"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using int values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:int(-2147483648) or xs:int(0)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-119"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using int values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:int(-2147483648) or xs:int(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-120"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using int values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:int(2147483647) or xs:int(-2147483648)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-121"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;or&apos; using unsignedInt values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedInt(0) or xs:unsignedInt(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-or-122"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using unsignedInt values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedInt(0) or xs:unsignedInt(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-123"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using unsignedInt values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedInt(1) or xs:unsignedInt(0)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-124"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using unsignedInt values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedInt(1) or xs:unsignedInt(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-125"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using unsignedInt values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedInt(4294967295) or xs:unsignedInt(0)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-126"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using unsignedInt values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedInt(4294967295) or xs:unsignedInt(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-127"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using unsignedInt values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedInt(4294967295) or xs:unsignedInt(4294967295)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-128"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;or&apos; using short values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:short(0) or xs:short(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-or-129"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using short values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:short(0) or xs:short(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-130"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using short values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:short(-1) or xs:short(0)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-131"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using short values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:short(1) or xs:short(-1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-132"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using short values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:short(32767) or xs:short(0)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-133"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using short values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:short(32767) or xs:short(-1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-134"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using short values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:short(-32768) or xs:short(0)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-135"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using short values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:short(-32768) or xs:short(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-136"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using short values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:short(32767) or xs:short(-32768)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-137"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;or&apos; using unsignedShort values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedShort(0) or xs:unsignedShort(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-or-138"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using unsignedShort values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedShort(0) or xs:unsignedShort(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-139"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using unsignedShort values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedShort(1) or xs:unsignedShort(0)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-140"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using unsignedShort values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedShort(1) or xs:unsignedShort(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-141"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using unsignedShort values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedShort(65535) or xs:unsignedShort(0)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-142"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using unsignedShort values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedShort(65535) or xs:unsignedShort(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-143"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using unsignedShort values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedShort(65535) or xs:unsignedShort(65535)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-144"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;or&apos; using byte values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:byte(0) or xs:byte(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-or-145"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using byte values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:byte(0) or xs:byte(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-146"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using byte values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:byte(-1) or xs:byte(0)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-147"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using byte values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:byte(1) or xs:byte(-1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-148"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using byte values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:byte(127) or xs:byte(0)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-149"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using byte values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:byte(127) or xs:byte(-1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-150"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using byte values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:byte(-128) or xs:byte(0)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-151"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using byte values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:byte(-128) or xs:byte(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-152"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using byte values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:byte(127) or xs:byte(-128)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-153"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> Logical &apos;or&apos; using unsignedByte values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedByte(0) or xs:unsignedByte(0)</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="op-logical-or-154"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using unsignedByte values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedByte(0) or xs:unsignedByte(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-155"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using unsignedByte values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedByte(1) or xs:unsignedByte(0)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-156"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using unsignedByte values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedByte(1) or xs:unsignedByte(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-157"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using unsignedByte values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedByte(255) or xs:unsignedByte(0)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-158"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using unsignedByte values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedByte(255) or xs:unsignedByte(1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="op-logical-or-159"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Logical &apos;or&apos; using unsignedByte values </description>
    <created by="Lalith Kumar" on="2005-05-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>xs:unsignedByte(255) or xs:unsignedByte(255)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `not("" or 0)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not("" or 0)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `not(0 or 0)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(0 or 0)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `not(0 or 0)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(0 or 0)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `not("" or 0)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not("" or 0)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `1 or 1`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>1 or 1</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `1 or 0`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>1 or 0</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-7"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `1 or 5`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>1 or 5</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-8"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Non-empty xs:anyURIs in the left branch of an or-expression has an EBV value of true. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI("example.com/") or 0</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-9"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Non-empty xs:anyURIs in the right branch of an or-expression has an EBV value of true. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>0 or xs:anyURI("example.com/")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-10"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Non-empty xs:anyURIs in the left branch of an or-expression has an EBV value of true. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:anyURI("") or 0)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-11"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Non-empty xs:anyURIs in the right branch of an or-expression has an EBV value of true. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(0 or xs:anyURI(""))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-12"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Non-empty xs:untypedAtomics in the left branch of an or-expression has an EBV value of true. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic("a string") or 0</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-13"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Non-empty xs:untypedAtomics in the right branch of an or-expression has an EBV value of true. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>0 or xs:untypedAtomic("a string")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-14"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> A test whose essence is: `true() or (0, current-time())[1] treat as xs:integer`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>true() or (0, current-time())[1] treat as xs:integer</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-15"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> A test whose essence is: `(0, current-time())[1] treat as xs:integer or true()`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(0, current-time())[1] treat as xs:integer or true()</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-16"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> An &apos;or&apos; expression having an operand which EBV cannot be extracted from. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>current-date() or 0</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0006"))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-17"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> An &apos;or&apos; expression having an operand which EBV cannot be extracted from. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>0 or current-date()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0006"))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-18"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> An &apos;or&apos; expression whose operands EBV cannot be extracted from. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>current-date() or current-date()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0006"))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-19"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:date("2018-12-23+01:00")</response-string>
    <description> An &apos;and&apos; expression having an operand which EBV cannot be extracted from. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>current-date() and current-date()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0006"))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-20"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:date("2018-12-23+01:00")</response-string>
    <description> An &apos;and&apos; expression having an operand which EBV cannot be extracted from. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>1 and current-date()</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0006"))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-21"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:date("2018-12-23+01:00")</response-string>
    <description> An &apos;and&apos; expression whose operands EBV cannot be extracted from. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>current-date() and 1</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0006"))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-22"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> An and-test applied on fn:count(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>count((1, 2, 3, timezone-from-time(current-time()), 4)) or false()</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-23"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> An or-test applied on fn:count(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>false() or count((1, 2, 3, timezone-from-time(current-time()), 4))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-24"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> An or-test applied on fn:count(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>count((1, 2, 3, timezone-from-time(current-time()), 4)) or count((1, 2, 3, timezone-from-time(current-time()), 4))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-25"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> or expression combined with fn:boolean(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean((1, 2, 3, current-time())[1] treat as xs:integer) or boolean((1, 2, 3, current-time())[1] treat as xs:integer)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-26"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> and expression combined or fn:boolean(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean((1, 2, 3, current-time())[1] treat as xs:integer) and true()</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-27"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> or expression combined with fn:boolean(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>true() or boolean((1, 2, 3, current-time())[1] treat as xs:integer)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-28"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `not("" and 0)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not("" and 0)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-29"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `1 and 1`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>1 and 1</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-30"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `10.3 and "non-zero length string"`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>10.3 and "non-zero length string"</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-31"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `1 and 5`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>1 and 5</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-32"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> A test whose essence is: `not((1, current-time())[1] treat as xs:integer and false())`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not((1, current-time())[1] treat as xs:integer and false())</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-33"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> A test whose essence is: `not(false() and (1, current-time())[1] treat as xs:integer)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(false() and (1, current-time())[1] treat as xs:integer)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-34"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Non-empty xs:anyURIs have an EBV value of true. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:anyURI("example.com/") and xs:anyURI("example.com/")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-35"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Empty xs:anyURIs have an EBV value of false. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:anyURI("example.com/") and xs:anyURI(""))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-36"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Empty xs:anyURIs have an EBV value of false. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:anyURI("") and xs:anyURI("example.com/"))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-37"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Non-empty xs:untypedAtomics have an EBV value of true. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>xs:untypedAtomic("a string") and xs:untypedAtomic("a string")</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-38"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Empty xs:untypedAtomics have an EBV value of false. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(xs:untypedAtomic("a string") and xs:untypedAtomic(""))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-39"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> An and-test applied on fn:count(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>count((1, 2, 3, timezone-from-time(current-time()), 4)) and true()</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-40"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> An and-test applied on fn:count(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>true() and count((1, 2, 3, timezone-from-time(current-time()), 4))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-41"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> An and-test applied on fn:count(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>count((1, 2, 3, timezone-from-time(current-time()), 4)) and count((1, 2, 3, timezone-from-time(current-time()), 4))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-42"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> and-expression combined with fn:boolean(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean((1, 2, 3, current-time())[1] treat as xs:integer) and boolean((1, 2, 3, current-time())[1] treat as xs:integer)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-43"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> and-expression combined with fn:boolean(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>boolean((1, 2, 3, current-time())[1] treat as xs:integer) and true()</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-44"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> and-expression combined with fn:boolean(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>true() and boolean((1, 2, 3, current-time())[1] treat as xs:integer)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-45"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> A test whose essence is: `"a string is ok" and QName("", "local")`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>"a string is ok" and QName("", "local")</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0006"))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-LogicExpr-46"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `"a string is ok" or QName("", "local")`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>"a string is ok" or QName("", "local")</test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0006"))</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="FORG0006"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K2-LogicExpr-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Keywords are case-sensitive. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>1 OR 0</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="K2-LogicExpr-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Keywords are case-sensitive. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>1 AND 0</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="cbcl-logical-and-002"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> test logical and </description>
    <created by="Tim Mills" on="2008-04-11"/>
    <dependency type="spec" value="XQ10+"/>
    <test>declare function local:times-table($n as xs:integer) as xs:integer* { for $x in 1 to 12 return $x * $n }; (every $x in local:times-table(15) satisfies ($x mod 3 eq 0)) and (every $y in local:times-table(15) satisfies ($y mod 5 eq 0))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="cbcl-logical-and-003"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> test logical and </description>
    <created by="Tim Mills" on="2008-04-11"/>
    <dependency type="spec" value="XQ10+"/>
    <test>declare function local:factorial($n as xs:integer) as xs:integer { if ($n le 1) then 1 else $n * local:factorial($n - 1) }; declare function local:is-divisible($n as xs:integer, $d as xs:integer) { $n mod $d eq 0 }; not(local:is-divisible(local:factorial(5), 3)) and not(local:is-divisible(local:factorial(5), 2))</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="cbcl-logical-or-001"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> test logical or </description>
    <created by="Tim Mills" on="2008-04-11"/>
    <dependency type="spec" value="XQ10+"/>
    <test>declare function local:times-table($n as xs:integer) as xs:integer* { for $x in 1 to 12 return $x * $n }; (some $x in local:times-table(15) satisfies ($x mod 2 eq 0)) or (some $y in local:times-table(15) satisfies ($y mod 3 eq 0))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="cbcl-logical-or-002"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> test logical or </description>
    <created by="Tim Mills" on="2008-04-11"/>
    <dependency type="spec" value="XQ10+"/>
    <test>declare function local:factorial($n as xs:integer) as xs:integer? { if ($n lt 1) then () else if ($n eq 1) then 1 else $n * local:factorial($n - 1) }; (every $x in local:factorial(5) satisfies ($x mod 3 eq 0)) or (every $y in local:factorial(5) satisfies ($y mod 5 eq 0))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="cbcl-logical-or-003"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> test logical or </description>
    <created by="Tim Mills" on="2008-04-11"/>
    <dependency type="spec" value="XQ10+"/>
    <test>declare function local:factorial($n as xs:integer) as xs:integer { if ($n le 1) then 1 else $n * local:factorial($n - 1) }; declare function local:is-divisible($n as xs:integer, $d as xs:integer) { $n mod $d eq 0 }; not(local:is-divisible(local:factorial(5), 3)) or not(local:is-divisible(local:factorial(5), 2))</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
</test-set>