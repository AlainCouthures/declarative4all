<test-set name="prod-Predicate" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">
  <description>Tests for the Predicate production</description>
  <link document="http://www.w3.org/TR/xquery-30/" idref="doc-xquery30-Predicate" type="spec"/>
  <link document="XQuery" idref="id-filter-expr" section-number="3.3.2" type="spec"/>
  <environment name="atomicns">
    <source file="../docs/atomicns.xml" role=".">
      <description>A non schema validated xml file, that contains values for data types. Can be used by any test.</description>
      <created by="Carmelo Montanez" on="2006-03-15"/>
    </source>
  </environment>
  <test-case name="filterexpressionhc1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(&lt;employee&gt;&amp;#10;   &lt;empnum&gt;E1&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P1&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;40&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;,&lt;employee&gt;&amp;#10;   &lt;empnum&gt;E1&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P3&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;80&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;,&lt;employee&gt;&amp;#10;   &lt;empnum&gt;E2&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P1&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;40&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;,&lt;employee&gt;&amp;#10;   &lt;empnum&gt;E2&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P2&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;80&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;,&lt;employee&gt;&amp;#10;   &lt;empnum&gt;E4&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P4&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;40&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;,&lt;employee&gt;&amp;#10;   &lt;empnum&gt;E4&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P5&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;80&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;)</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(&lt;employee&gt;&amp;#10;   &lt;empnum&gt;E1&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P1&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;40&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;,&lt;employee&gt;&amp;#10;   &lt;empnum&gt;E1&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P3&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;80&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;,&lt;employee&gt;&amp;#10;   &lt;empnum&gt;E2&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P1&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;40&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;,&lt;employee&gt;&amp;#10;   &lt;empnum&gt;E2&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P2&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;80&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;,&lt;employee&gt;&amp;#10;   &lt;empnum&gt;E4&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P4&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;40&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;,&lt;employee&gt;&amp;#10;   &lt;empnum&gt;E4&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P5&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;80&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;)</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(&lt;employee&gt;&amp;#10;   &lt;empnum&gt;E1&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P1&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;40&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;,&lt;employee&gt;&amp;#10;   &lt;empnum&gt;E1&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P3&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;80&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;,&lt;employee&gt;&amp;#10;   &lt;empnum&gt;E2&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P1&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;40&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;,&lt;employee&gt;&amp;#10;   &lt;empnum&gt;E2&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P2&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;80&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;,&lt;employee&gt;&amp;#10;   &lt;empnum&gt;E4&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P4&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;40&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;,&lt;employee&gt;&amp;#10;   &lt;empnum&gt;E4&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P5&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;80&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;)</response-string>
    <description> Filter Expression. Simple Filter expression involving numeric data and (gt operator0) </description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <environment ref="works"/>
    <test>(/works/employee[xs:integer(hours[1]) gt 20])</test>
    <result-string>(&lt;employee&gt;&amp;#10;   &lt;empnum&gt;E1&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P1&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;40&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;,&lt;employee&gt;&amp;#10;   &lt;empnum&gt;E1&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P3&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;80&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;,&lt;employee&gt;&amp;#10;   &lt;empnum&gt;E2&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P1&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;40&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;,&lt;employee&gt;&amp;#10;   &lt;empnum&gt;E2&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P2&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;80&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;,&lt;employee&gt;&amp;#10;   &lt;empnum&gt;E4&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P4&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;40&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;,&lt;employee&gt;&amp;#10;   &lt;empnum&gt;E4&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P5&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;80&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;)</result-string>
    <result>
      <assert-xml>
        <![CDATA[<employee>
   <empnum>E1</empnum>
   <pnum>P1</pnum>
   <hours>40</hours>
  </employee><employee>
   <empnum>E1</empnum>
   <pnum>P3</pnum>
   <hours>80</hours>
  </employee><employee>
   <empnum>E2</empnum>
   <pnum>P1</pnum>
   <hours>40</hours>
  </employee><employee>
   <empnum>E2</empnum>
   <pnum>P2</pnum>
   <hours>80</hours>
  </employee><employee>
   <empnum>E4</empnum>
   <pnum>P4</pnum>
   <hours>40</hours>
  </employee><employee>
   <empnum>E4</empnum>
   <pnum>P5</pnum>
   <hours>80</hours>
  </employee>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="filterexpressionhc2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("2"),xs:integer("4"),xs:integer("6"),xs:integer("8"),xs:integer("10"),xs:integer("12"),xs:integer("14"),xs:integer("16"),xs:integer("18"),xs:integer("20"),xs:integer("22"),xs:integer("24"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("2"),xs:integer("4"),xs:integer("6"),xs:integer("8"),xs:integer("10"),xs:integer("12"),xs:integer("14"),xs:integer("16"),xs:integer("18"),xs:integer("20"),xs:integer("22"),xs:integer("24"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("2"),xs:integer("4"),xs:integer("6"),xs:integer("8"),xs:integer("10"),xs:integer("12"),xs:integer("14"),xs:integer("16"),xs:integer("18"),xs:integer("20"),xs:integer("22"),xs:integer("24"))</response-string>
    <description> Simple filter expression involving integers. Return integer from 1 to 25 divisible by 2 </description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>((1 to 25)[. mod 2 eq 0])</test>
    <result-string>(xs:integer("2"),xs:integer("4"),xs:integer("6"),xs:integer("8"),xs:integer("10"),xs:integer("12"),xs:integer("14"),xs:integer("16"),xs:integer("18"),xs:integer("20"),xs:integer("22"),xs:integer("24"))</result-string>
    <result>
      <assert-string-value>2 4 6 8 10 12 14 16 18 20 22 24</assert-string-value>
    </result>
  </test-case>
  <test-case name="filterexpressionhc3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("25")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("25")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("25")</response-string>
    <description> Simple filter expression that returns a sigle number </description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <test>((1 to 25)[25])</test>
    <result-string>xs:integer("25")</result-string>
    <result>
      <assert-eq>25</assert-eq>
    </result>
  </test-case>
  <test-case name="filterexpressionhc4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Simple filter expression involving union operator </description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <environment ref="works"/>
    <test>(//empnum | (/))//employee[xs:integer(hours[1]) gt 20]</test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<employee>
   <empnum>E1</empnum>
   <pnum>P1</pnum>
   <hours>40</hours>
  </employee><employee>
   <empnum>E1</empnum>
   <pnum>P3</pnum>
   <hours>80</hours>
  </employee><employee>
   <empnum>E2</empnum>
   <pnum>P1</pnum>
   <hours>40</hours>
  </employee><employee>
   <empnum>E2</empnum>
   <pnum>P2</pnum>
   <hours>80</hours>
  </employee><employee>
   <empnum>E4</empnum>
   <pnum>P4</pnum>
   <hours>40</hours>
  </employee><employee>
   <empnum>E4</empnum>
   <pnum>P5</pnum>
   <hours>80</hours>
  </employee>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="filterexpressionhc5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;employee&gt;&amp;#10;   &lt;empnum&gt;E4&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P5&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;80&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;employee&gt;&amp;#10;   &lt;empnum&gt;E4&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P5&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;80&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;employee&gt;&amp;#10;   &lt;empnum&gt;E4&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P5&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;80&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;</response-string>
    <description> Simple filter expression as a stept in a path expression involving the "last" function </description>
    <created by="Carmelo Montanez" on="2005-02-14"/>
    <environment ref="works"/>
    <test>(//employee[fn:last()])</test>
    <result-string>&lt;employee&gt;&amp;#10;   &lt;empnum&gt;E4&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P5&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;80&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;</result-string>
    <result>
      <assert-xml>
        <![CDATA[<employee>
   <empnum>E4</empnum>
   <pnum>P5</pnum>
   <hours>80</hours>
  </employee>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="filterexpressionhc6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("10"),xs:integer("11"),xs:integer("12"),xs:integer("13"),xs:integer("14"),xs:integer("15"),xs:integer("16"),xs:integer("17"),xs:integer("18"),xs:integer("19"),xs:integer("20"),xs:integer("21"),xs:integer("22"),xs:integer("23"),xs:integer("24"),xs:integer("25"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("10"),xs:integer("11"),xs:integer("12"),xs:integer("13"),xs:integer("14"),xs:integer("15"),xs:integer("16"),xs:integer("17"),xs:integer("18"),xs:integer("19"),xs:integer("20"),xs:integer("21"),xs:integer("22"),xs:integer("23"),xs:integer("24"),xs:integer("25"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("10"),xs:integer("11"),xs:integer("12"),xs:integer("13"),xs:integer("14"),xs:integer("15"),xs:integer("16"),xs:integer("17"),xs:integer("18"),xs:integer("19"),xs:integer("20"),xs:integer("21"),xs:integer("22"),xs:integer("23"),xs:integer("24"),xs:integer("25"))</response-string>
    <description> Simple filter expression involving the ge operator </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>((1 to 25)[. ge 10])</test>
    <result-string>(xs:integer("10"),xs:integer("11"),xs:integer("12"),xs:integer("13"),xs:integer("14"),xs:integer("15"),xs:integer("16"),xs:integer("17"),xs:integer("18"),xs:integer("19"),xs:integer("20"),xs:integer("21"),xs:integer("22"),xs:integer("23"),xs:integer("24"),xs:integer("25"))</result-string>
    <result>
      <assert-string-value>10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25</assert-string-value>
    </result>
  </test-case>
  <test-case name="filterexpressionhc7"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"),xs:integer("6"),xs:integer("7"),xs:integer("8"),xs:integer("9"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"),xs:integer("6"),xs:integer("7"),xs:integer("8"),xs:integer("9"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"),xs:integer("6"),xs:integer("7"),xs:integer("8"),xs:integer("9"))</response-string>
    <description> Simple filter expression involving the lt opertor </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>((1 to 25)[. lt 10])</test>
    <result-string>(xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"),xs:integer("6"),xs:integer("7"),xs:integer("8"),xs:integer("9"))</result-string>
    <result>
      <assert-string-value>1 2 3 4 5 6 7 8 9</assert-string-value>
    </result>
  </test-case>
  <test-case name="filterexpressionhc8"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"),xs:integer("6"),xs:integer("7"),xs:integer("8"),xs:integer("9"),xs:integer("10"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"),xs:integer("6"),xs:integer("7"),xs:integer("8"),xs:integer("9"),xs:integer("10"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"),xs:integer("6"),xs:integer("7"),xs:integer("8"),xs:integer("9"),xs:integer("10"))</response-string>
    <description> Simple filter expression involving the le operator </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>((1 to 25)[. le 10])</test>
    <result-string>(xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"),xs:integer("6"),xs:integer("7"),xs:integer("8"),xs:integer("9"),xs:integer("10"))</result-string>
    <result>
      <assert-string-value>1 2 3 4 5 6 7 8 9 10</assert-string-value>
    </result>
  </test-case>
  <test-case name="filterexpressionhc9"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("10")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("10")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("10")</response-string>
    <description> Simple filter expression involving the eq operator </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>((1 to 25)[. eq 10])</test>
    <result-string>xs:integer("10")</result-string>
    <result>
      <assert-eq>10</assert-eq>
    </result>
  </test-case>
  <test-case name="filterexpressionhc10"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"),xs:integer("6"),xs:integer("7"),xs:integer("8"),xs:integer("9"),xs:integer("11"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"),xs:integer("6"),xs:integer("7"),xs:integer("8"),xs:integer("9"),xs:integer("11"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"),xs:integer("6"),xs:integer("7"),xs:integer("8"),xs:integer("9"),xs:integer("11"))</response-string>
    <description> Simple filter expression involving the ne operator </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>((1 to 11)[. ne 10])</test>
    <result-string>(xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"),xs:integer("6"),xs:integer("7"),xs:integer("8"),xs:integer("9"),xs:integer("11"))</result-string>
    <result>
      <assert-string-value>1 2 3 4 5 6 7 8 9 11</assert-string-value>
    </result>
  </test-case>
  <test-case name="filterexpressionhc11"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("10")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("10")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("10")</response-string>
    <description> Simple filter expression involving a boolean "and" expression </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>((1 to 11)[(. eq 10) and (. mod 5 eq 0)])</test>
    <result-string>xs:integer("10")</result-string>
    <result>
      <assert-eq>10</assert-eq>
    </result>
  </test-case>
  <test-case name="filterexpressionhc12"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("5"),xs:integer("10"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("5"),xs:integer("10"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("5"),xs:integer("10"))</response-string>
    <description> Simple filter expression involving a boolean "or" expression </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>((1 to 11)[(. eq 10) or (. eq 5)])</test>
    <result-string>(xs:integer("5"),xs:integer("10"))</result-string>
    <result>
      <assert-string-value>5 10</assert-string-value>
    </result>
  </test-case>
  <test-case name="filterexpressionhc13"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("10")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("10")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("10")</response-string>
    <description> Simple filter expression involving a division expression </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>((1,2,4,5,6,7,8,9,10,11)[(. div 2 eq 5)])</test>
    <result-string>xs:integer("10")</result-string>
    <result>
      <assert-eq>10</assert-eq>
    </result>
  </test-case>
  <test-case name="filterexpressionhc14"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("5")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("5")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("5")</response-string>
    <description> Simple filter expression involving a multiplication expression </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>((1,2,4,5,6,7,8,9,10,11)[(. * 2 eq 10)])</test>
    <result-string>xs:integer("5")</result-string>
    <result>
      <assert-eq>5</assert-eq>
    </result>
  </test-case>
  <test-case name="filterexpressionhc15"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("8")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("8")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("8")</response-string>
    <description> Simple filter expression involving an addition expression </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>((1,2,4,5,6,7,8,9,10,11)[(. + 2 eq 10)])</test>
    <result-string>xs:integer("8")</result-string>
    <result>
      <assert-eq>8</assert-eq>
    </result>
  </test-case>
  <test-case name="filterexpressionhc16"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("8")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("8")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("8")</response-string>
    <description> Simple filter expression involving a subtration expression </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>((1,2,4,5,6,7,8,9,10,11)[(. - 2 eq 6)])</test>
    <result-string>xs:integer("8")</result-string>
    <result>
      <assert-eq>8</assert-eq>
    </result>
  </test-case>
  <test-case name="filterexpressionhc17"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("6"),xs:integer("7"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("6"),xs:integer("7"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("6"),xs:integer("7"))</response-string>
    <description> Simple filter expression involving an integer division (idiv) expression </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>((1,2,4,5,6,7,8,9,10,11)[(. idiv 2 eq 3)])</test>
    <result-string>(xs:integer("6"),xs:integer("7"))</result-string>
    <result>
      <assert-string-value>6 7</assert-string-value>
    </result>
  </test-case>
  <test-case name="filterexpressionhc18"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("3")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("3")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("3")</response-string>
    <description> Simple filter expression using an xs:string function </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>((1,2,3,4,5,6,7,8,9,10,11)[(xs:string(.) eq "3")])</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="filterexpressionhc19"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("6"),xs:integer("7"),xs:integer("8"),xs:integer("9"),xs:integer("10"),xs:integer("11"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("6"),xs:integer("7"),xs:integer("8"),xs:integer("9"),xs:integer("10"),xs:integer("11"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("6"),xs:integer("7"),xs:integer("8"),xs:integer("9"),xs:integer("10"),xs:integer("11"))</response-string>
    <description> Simple filter expression involving two simple predicates </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>((1,2,3,4,5,6,7,8,9,10,11)[. gt 1][. gt 5])</test>
    <result-string>(xs:integer("6"),xs:integer("7"),xs:integer("8"),xs:integer("9"),xs:integer("10"),xs:integer("11"))</result-string>
    <result>
      <assert-string-value>6 7 8 9 10 11</assert-string-value>
    </result>
  </test-case>
  <test-case name="filterexpressionhc20"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("7"),xs:integer("8"),xs:integer("9"),xs:integer("10"),xs:integer("11"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("7"),xs:integer("8"),xs:integer("9"),xs:integer("10"),xs:integer("11"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("7"),xs:integer("8"),xs:integer("9"),xs:integer("10"),xs:integer("11"))</response-string>
    <description> Simple filter expression involving two complex predicates </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>((1,2,3,4,5,6,7,8,9,10,11)[(. gt 1) and (. gt 2)][(. gt 5) and (. gt 6)])</test>
    <result-string>(xs:integer("7"),xs:integer("8"),xs:integer("9"),xs:integer("10"),xs:integer("11"))</result-string>
    <result>
      <assert-string-value>7 8 9 10 11</assert-string-value>
    </result>
  </test-case>
  <test-case name="filterexpressionhc21"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"),xs:integer("6"),xs:integer("7"),xs:integer("8"),xs:integer("9"),xs:integer("10"),xs:integer("11"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"),xs:integer("6"),xs:integer("7"),xs:integer("8"),xs:integer("9"),xs:integer("10"),xs:integer("11"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"),xs:integer("6"),xs:integer("7"),xs:integer("8"),xs:integer("9"),xs:integer("10"),xs:integer("11"))</response-string>
    <description> Simple filter expression involving the "fn:true" function </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>((1,2,3,4,5,6,7,8,9,10,11)[fn:true()])</test>
    <result-string>(xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"),xs:integer("6"),xs:integer("7"),xs:integer("8"),xs:integer("9"),xs:integer("10"),xs:integer("11"))</result-string>
    <result>
      <assert-string-value>1 2 3 4 5 6 7 8 9 10 11</assert-string-value>
    </result>
  </test-case>
  <test-case name="filterexpressionhc22"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string>
    <description> Simple filter expression involving the "fn:false" function Use fn;count to avoid empty sequence. </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>fn:count(((1,2,3,4,5,6,7,8,9,10,11)[fn:false()]))</test>
    <result-string>xs:integer("0")</result-string>
    <result-string>xs:integer("0")</result-string>
    <result>
      <any-of>
        <assert-eq>0</assert-eq>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Syntactically invalid predicate. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(1, 2, 3)[</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Syntactically invalid predicate. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(1, 2, 3)]</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Syntactically invalid predicate. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(1, 2, 3)[]</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Syntactically invalid predicate. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>[true()]</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Syntactically invalid predicate. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>[]</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</result-string>
    <result>
      <error code="XPST0003"/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `empty((1, 2, 3)[0])`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty((1, 2, 3)[0])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-7"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `empty((1, 2, 3)[4])`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty((1, 2, 3)[4])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-8"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `empty((1, 2, 3)[0])`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty((1, 2, 3)[0])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-9"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `empty((1, 2, 3)[4])`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty((1, 2, 3)[4])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-10"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `empty((1, 2, 3)[0.1])`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty((1, 2, 3)[0.1])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-11"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `empty((1, 2, 3)[1.1])`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty((1, 2, 3)[1.1])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-12"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `empty((1, 2, 3)[1.01])`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty((1, 2, 3)[1.01])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-13"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `empty((1, 2, 3)[4])`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty((1, 2, 3)[4])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-14"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `empty((1, 2, 3)[4.1])`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty((1, 2, 3)[4.1])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-15"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `empty((1, 2, 3)[4.01])`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty((1, 2, 3)[4.01])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-16"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `not(empty((1, 2, 3)[1]))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(empty((1, 2, 3)[1]))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-17"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `not(empty((1, 2, 3)[3]))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>not(empty((1, 2, 3)[3]))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-18"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `(1, 2, 3)[1] eq 1`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(1, 2, 3)[1] eq 1</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-19"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> A test whose essence is: `(1, 2, 3)[1.0] eq 1`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(1, 2, 3)[1.0] eq 1</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-20"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> A test whose essence is: `(1, 2, 3)[1.0e0] eq 1`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(1, 2, 3)[1.0e0] eq 1</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-21"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `(1, 2, 3)[3] eq 3`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(1, 2, 3)[3] eq 3</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-22"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> A test whose essence is: `(1, 2, 3)[3.0] eq 3`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(1, 2, 3)[3.0] eq 3</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-23"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> A test whose essence is: `(1, 2, 3)[3.0e0] eq 3`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(1, 2, 3)[3.0e0] eq 3</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-24"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `(0, 1, 2)[1] eq 0`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(0, 1, 2)[1] eq 0</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-25"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `(0, 1, 2)[2] eq 1`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(0, 1, 2)[2] eq 1</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-26"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `(0, 1, 2)[3] eq 2`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(0, 1, 2)[3] eq 2</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-27"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `(0)[1] eq 0`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(0)[1] eq 0</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-28"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `0[1] eq 0`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>0[1] eq 0</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-29"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `(0, 1)[1] eq 0`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(0, 1)[1] eq 0</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-30"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `empty((1, 2, 3)[false()])`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty((1, 2, 3)[false()])</test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-31"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> A test whose essence is: `deep-equal((1, 2, 3), (1, 2, 3)[true()])`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal((1, 2, 3), (1, 2, 3)[true()])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-32"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> A test whose essence is: `deep-equal((1, 2, 3), (1, 2, 3)[. instance of xs:integer])`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal((1, 2, 3), (1, 2, 3)[. instance of xs:integer])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-33"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> The context item is used as the predicate, leading to a truth predicate. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal((true(), true(), true()), (false(), true(), true(), false(), true(), false())[.])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-34"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> The context item is used as the predicate, leading to a numeric predicate. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal((2, 3, 4, 5, 7, 8, 9), (0, 2, 3, 4, 5, 5, 7, 8, 10 - 1)[.])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-35"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Source expression of a predicate doesn&apos;t have to use paranteses. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>1[true()] eq 1</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-36"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("1")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("1")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("1")</response-string>
    <description> Use fn:current-time() inside a predicate. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(1, current-time())[1]</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-37"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> One xs:anyURI value is a valid predicate. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal((1, 2, 3), (1, 2, 3)[xs:anyURI("example.com/")])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-38"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("1"),xs:integer("2"),xs:integer("3"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("1"),xs:integer("2"),xs:integer("3"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("1"),xs:integer("2"),xs:integer("3"))</response-string>
    <description> xs:anyURI values are invalid predicates. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(1, 2, 3)[(xs:anyURI("example.com/"), xs:anyURI("example.com/"))]</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0006"))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-39"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> xs:untypedAtomic literal as predicate. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal((1, 2, 3), (1, 2, 3)[xs:untypedAtomic("content")])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-40"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("1"),xs:integer("2"),xs:integer("3"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("1"),xs:integer("2"),xs:integer("3"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("1"),xs:integer("2"),xs:integer("3"))</response-string>
    <description> Multiple xs:untypedAtomic values is an invalid predicate. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(1, 2, 3)[(xs:untypedAtomic("content"), xs:untypedAtomic("content"))]</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0006"))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-41"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `(0, 1, 2)[true()][1] eq 0`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(0, 1, 2)[true()][1] eq 0</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-42"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `(1, 2, 3)[position() eq 2 or position() eq 3][2] eq 3`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(1, 2, 3)[position() eq 2 or position() eq 3][2] eq 3</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-43"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `empty((1, 2, 3)[position() eq 2 or position() eq 3][3])`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty((1, 2, 3)[position() eq 2 or position() eq 3][3])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-44"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> A test whose essence is: `deep-equal((1, 2, 3), (1, 2, 3)[2 or 3])`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal((1, 2, 3), (1, 2, 3)[2 or 3])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-45"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `empty((1, 2, 3)[3][2])`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty((1, 2, 3)[3][2])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-46"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `empty((1, 2, 3)[3][0])`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty((1, 2, 3)[3][0])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-47"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> An excessive nesting of various predicates. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(0, 2, 4, 5)[1][1][1][true()][1][true()][1] eq 0</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-48"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A large numeric xs:double predicate that evaluates to the empty sequence. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty((1, 2, 3)[3e8])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-49"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `empty((0, 1, 2)[false()][1])`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty((0, 1, 2)[false()][1])</test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0005"))</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-50"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> A test whose essence is: `deep-equal(("a", "b", "c"), (0, 1, 2, "a", "b", "c")[. instance of xs:string])`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal(("a", "b", "c"), (0, 1, 2, "a", "b", "c")[. instance of xs:string])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-51"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Filter a sequence with instance of and a second predicate. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>((0, 1, 2, "a", "b", "c")[. instance of xs:string][. treat as xs:string eq "c"] treat as xs:string) eq "c"</test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPDY0050"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-52"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Filter a sequence with instance of and a second predicate(#2). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>((0, 1, 2, "a", "b", "c")[. instance of xs:integer][. treat as xs:integer eq 0] treat as xs:integer) eq 0</test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPDY0050"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-53"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> Two predicates, where one leading to an invalid operator mapping in the second. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(0, 1, 2, "a", "b", "c")[. instance of xs:integer][. eq "c"] eq 0</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-54"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Predicates in combination with the empty sequence. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(()[()])</test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-55"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Predicates in combination with the empty sequence. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty((1, 2, 3)[()])</test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-56"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Predicates in combination with the empty sequence. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(()[last()])</test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-57"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Predicates in combination with the empty sequence. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(()[1])</test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-58"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Predicates in combination with the empty sequence. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(()[position()])</test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-59"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Predicates in combination with the empty sequence. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(()[count(remove((current-time(), 1), 1)) eq 1])</test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-60"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> A test whose essence is: `deep-equal((1, 2, 3), (1, 2, 3)[position() = 1])`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal((1, 2, 3), (1, 2, 3)[position() = 1])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-61"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> A test whose essence is: `deep-equal((1, 2, 3), (1, 2, 3)[3 = position()])`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal((1, 2, 3), (1, 2, 3)[3 = position()])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-62"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> A test whose essence is: `deep-equal((1, 2, 3), (1, 2, 3)[position() ge 1])`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal((1, 2, 3), (1, 2, 3)[position() ge 1])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-63"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> A test whose essence is: `deep-equal((1, 2, 3), (1, 2, 3)[3 ge position()])`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal((1, 2, 3), (1, 2, 3)[3 ge position()])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-64"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> A test whose essence is: `deep-equal((0, 1, 2), (0, 1, 2)[position() eq position()])`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal((0, 1, 2), (0, 1, 2)[position() eq position()])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-65"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> A test whose essence is: `deep-equal((0, 1, 2), (0, 1, 2)[position() = position()])`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal((0, 1, 2), (0, 1, 2)[position() = position()])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-66"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string>
    <description> A test whose essence is: `(0, 1, 2)[1 eq position()]`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(0, 1, 2)[1 eq position()]</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-67"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("2")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("2")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("2")</response-string>
    <description> A test whose essence is: `(0, 1, 2)[3 eq position()]`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(0, 1, 2)[3 eq position()]</test>
    <result-string>xs:integer("2")</result-string>
    <result>
      <assert-eq>2</assert-eq>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-68"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("2")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("2")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("2")</response-string>
    <description> A test whose essence is: `(0, 1, 2)[position() eq 3]`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(0, 1, 2)[position() eq 3]</test>
    <result-string>xs:integer("2")</result-string>
    <result>
      <assert-eq>2</assert-eq>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-69"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> A test whose essence is: `deep-equal((1, 2, 3), (1, 2, 3)[number(.)])`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal((1, 2, 3), (1, 2, 3)[number(.)])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-70"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> A test whose essence is: `deep-equal((1, 2), (0, 1, 2)[if(. eq 1) then 2 else 3])`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal((1, 2), (0, 1, 2)[if(. eq 1) then 2 else 3])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-71"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> A test whose essence is: `deep-equal((0, 1, 2), (0, 1, 2)[if(. eq 8) then "str" else position()])`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal((0, 1, 2), (0, 1, 2)[if(. eq 8) then "str" else position()])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-72"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> A test whose essence is: `deep-equal((0, 1, 2), (0, 1, 2)[if(. eq 8) then 0 else position()])`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal((0, 1, 2), (0, 1, 2)[if(. eq 8) then 0 else position()])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-73"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("2")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("2")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("2")</response-string>
    <description> A test whose essence is: `(0, 1, 2)[last()]`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(0, 1, 2)[last()]</test>
    <result-string>xs:integer("2")</result-string>
    <result>
      <assert-eq>2</assert-eq>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-74"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("2")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("2")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("2")</response-string>
    <description> A test whose essence is: `(0, 1, "2")[last()]`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(0, 1, "2")[last()]</test>
    <result-string>xs:string("2")</result-string>
    <result>
      <assert-string-value>2</assert-string-value>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-75"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> fn:last() in predicate, leading to invalid operator mapping. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>2 eq (0, 1, "2")[last()]</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-76"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `empty((())[last()])`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty((())[last()])</test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-77"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `empty(()[last()])`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(()[last()])</test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-78"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string>
    <description> Predicates involving the focus&apos; context item. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(0, 1, 2)[. eq 0]</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-79"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("1")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("1")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("1")</response-string>
    <description> Predicates involving the focus&apos; context item. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(0, 1, 2)[. eq 1]</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-80"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("2")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("2")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("2")</response-string>
    <description> Predicates involving the focus&apos; context item. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(0, 1, 2)[. eq 2]</test>
    <result-string>xs:integer("2")</result-string>
    <result>
      <assert-eq>2</assert-eq>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-81"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Predicates involving the focus&apos; context item. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal((0, 1, 2), (0, 1, 2)[. eq 0 or . eq 1 or . eq 2])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-82"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string>
    <description> Type related predicate tests. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(0, 1, 2)[remove((1, "a string"), 2)]</test>
    <result-string>xs:integer("0")</result-string>
    <result-string>xs:integer("0")</result-string>
    <result>
      <any-of>
        <assert-eq>0</assert-eq>
        <error code="XPTY0004"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-83"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> Type related predicate tests. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal((1, 2), (1, 2)[remove((true(), "a string"), 2)])</test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPTY0004"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-84"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Type related predicate tests. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty((1, 2, 3)[remove((false(), "a string"), 2)])</test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>xs:boolean("true")</result-string>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPTY0004"/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-85"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Type related predicate tests. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty((1, 2, 3)[remove((false(), "a string"), 2)])</test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>xs:boolean("true")</result-string>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPTY0004"/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-86"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A predicate that never can match. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(current-time()[2])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-87"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A predicate that never can match. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty((1, 2, 3, current-time())[0])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-88"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A truth predicate that never match. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(remove((1, 2, 3, current-time()), 4)[false()])</test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-89"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> A truth predicate that always match. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal(remove((1, 2, 3, current-time()), 4)[true()], (1, 2, 3))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-90"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("3")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("3")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("3")</response-string>
    <description> Nested predicate with multiple calls to fn:last(). </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(1, 2, 3)[(last(), last())[2]]</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-91"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> A predicate whose expression EBV cannot be extracted from. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(1, 2, 3)[xs:hexBinary("FF")]</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0006"))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-92"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> A predicate whose expression EBV cannot be extracted from. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(1, 2, 3)[1, 2]</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0006"))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-93"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> A predicate whose expression EBV cannot be extracted from. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(1, 2, 3)[1, "a string"]</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0006"))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K-FilterExpr-94"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> A predicate whose expression EBV cannot be extracted from. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(1, 2, 3)["a string", 1]</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0006"))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="K2-FilterExpr-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Apply a predicate combined with last(), on a sequence constructed with an element constructor. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $var := (for $i in 1 to 100 return <e>{$i}</e>); $var[last()]]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<e>100</e>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="K2-FilterExpr-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Apply a predicate combined with a numeric literal, on a sequence constructed with an element constructor. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $var := (for $i in 1 to 100 return <e>{$i}</e>); $var[5]]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<e>5</e>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="K2-FilterExpr-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> An numeric predicate that is xs:decimal. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty((1,2,3,4,5)[3.4])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K2-FilterExpr-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> An numeric predicate that is xs:decimal, as part of a path expression. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[empty(<e><a/></e>//a[3.4])]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K2-FilterExpr-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(&lt;child type=""/&gt;,xs:integer("1"),xs:integer("2"),xs:integer("3"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(&lt;child type=""/&gt;,xs:integer("1"),xs:integer("2"),xs:integer("3"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(&lt;child type=""/&gt;,xs:integer("1"),xs:integer("2"),xs:integer("3"))</response-string>
    <description> Subsequent filter expressions, and node tests whose focus depends on where a variable is declared. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $d := document {<root><child type=""/></root>} return $d//*[let $i := @type return $d//*[$i]], (1, 2, 3)[true()], (4, 5, 6)[false()]]]>
    </test>
    <result-string>(&lt;child type=""/&gt;,xs:integer("1"),xs:integer("2"),xs:integer("3"))</result-string>
    <result-string>(&lt;child type=""/&gt;,xs:integer("1"),xs:integer("2"),xs:integer("3"))</result-string>
    <result>
      <any-of>
        <assert-xml>
          <![CDATA[<child type=""/>1 2 3]]>
        </assert-xml>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K2-FilterExpr-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;child type=""/&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;child type=""/&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;child type=""/&gt;</response-string>
    <description> Subsequent filter expressions, and node tests whose focus depends on where a variable is declared(#2). </description>
    <created by="Frans Englich" on="2008-01-15"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $d := document { <root><child type=""/></root> } return $d//*[let $i := @type return $d//*[$i]]]]>
    </test>
    <result-string>&lt;child type=""/&gt;</result-string>
    <result>
      <assert-xml>
        <![CDATA[<child type=""/>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="K2-FilterExpr-7"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Use self::processing-instruction() in a filter predicate. </description>
    <created by="Frans Englich" on="2008-01-15"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(<x/>, <?y?>)[self::processing-instruction()]]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<?y?>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="K2-FilterExpr-8"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Use self::processing-instruction() in a filter predicate, combined with a treat as. </description>
    <created by="Frans Englich" on="2008-01-15"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(<?z?>, <?y?>)[self::processing-instruction(y)] treat as empty-sequence()]]>
    </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPDY0050"))</result-string>
    <result>
      <error code="XPDY0050"/>
    </result>
  </test-case>
  <test-case name="predicates-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;integer&gt;12678967543233&lt;/integer&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;integer&gt;12678967543233&lt;/integer&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;integer&gt;12678967543233&lt;/integer&gt;</response-string>
    <description> Evaluation of a simple predicate with a "true" value (uses "fn:true"). </description>
    <created by="Carmelo Montanez" on="2005-09-01"/>
    <environment ref="atomicns"/>
    <test>(//integer[fn:true()])</test>
    <result-string>&lt;integer&gt;12678967543233&lt;/integer&gt;</result-string>
    <result>
      <assert-xml>
        <![CDATA[<integer>12678967543233</integer>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="predicates-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string>
    <description> Evaluation of a simple predicate with a "false" value (uses "fn:false"). Use of fn:count to avoid empty file. </description>
    <created by="Carmelo Montanez" on="2005-09-01"/>
    <environment ref="atomicns"/>
    <test>fn:count((//integer[fn:false()]))</test>
    <result-string>xs:integer("0")</result-string>
    <result-string>xs:integer("0")</result-string>
    <result>
      <any-of>
        <assert-eq>0</assert-eq>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="predicates-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;integer&gt;12678967543233&lt;/integer&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;integer&gt;12678967543233&lt;/integer&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;integer&gt;12678967543233&lt;/integer&gt;</response-string>
    <description> Evaluation of a simple predicate with a "true" value (uses "fn:false" and fn:not()). </description>
    <created by="Carmelo Montanez" on="2005-09-01"/>
    <environment ref="atomicns"/>
    <test>(//integer[fn:not(fn:false())])</test>
    <result-string>&lt;integer&gt;12678967543233&lt;/integer&gt;</result-string>
    <result>
      <assert-xml>
        <![CDATA[<integer>12678967543233</integer>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="predicates-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;integer&gt;12678967543233&lt;/integer&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;integer&gt;12678967543233&lt;/integer&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;integer&gt;12678967543233&lt;/integer&gt;</response-string>
    <description> Evaluation of a simple predicate set to a boolean expression ("and" operator). </description>
    <created by="Carmelo Montanez" on="2005-09-01"/>
    <environment ref="atomicns"/>
    <test>(//integer[fn:true() and fn:true()])</test>
    <result-string>&lt;integer&gt;12678967543233&lt;/integer&gt;</result-string>
    <result>
      <assert-xml>
        <![CDATA[<integer>12678967543233</integer>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="predicates-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;integer&gt;12678967543233&lt;/integer&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;integer&gt;12678967543233&lt;/integer&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;integer&gt;12678967543233&lt;/integer&gt;</response-string>
    <description> Evaluation of a simple predicate set to a boolean expression ("or" operator). </description>
    <created by="Carmelo Montanez" on="2005-09-01"/>
    <environment ref="atomicns"/>
    <test>(//integer[fn:true() or fn:true()])</test>
    <result-string>&lt;integer&gt;12678967543233&lt;/integer&gt;</result-string>
    <result>
      <assert-xml>
        <![CDATA[<integer>12678967543233</integer>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="predicates-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string>
    <description> Evaluation of a simple predicate set to a boolean expression ("and" operator). Returns "false" Uses "fn:count" to avoid empty file. </description>
    <created by="Carmelo Montanez" on="2005-09-01"/>
    <environment ref="atomicns"/>
    <test>fn:count((//integer[fn:false() and fn:false()]))</test>
    <result-string>xs:integer("0")</result-string>
    <result-string>xs:integer("0")</result-string>
    <result>
      <any-of>
        <assert-eq>0</assert-eq>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="predicates-7"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string>
    <description> Evaluation of a simple predicate set to a boolean expression ("or" operator). Returns "false" Uses "fn:count" to avoid empty file. </description>
    <created by="Carmelo Montanez" on="2005-09-01"/>
    <environment ref="atomicns"/>
    <test>fn:count((//integer[fn:false() or fn:false()]))</test>
    <result-string>xs:integer("0")</result-string>
    <result-string>xs:integer("0")</result-string>
    <result>
      <any-of>
        <assert-eq>0</assert-eq>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="predicates-8"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;string&gt;A String Function&lt;/string&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;string&gt;A String Function&lt;/string&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;string&gt;A String Function&lt;/string&gt;</response-string>
    <description> Evaluation of a simple predicate, that uses the "xs:string()" function. </description>
    <created by="Carmelo Montanez" on="2005-09-01"/>
    <environment ref="atomicns"/>
    <test>(/root/string[xs:string(.) = "A String Function"])</test>
    <result-string>&lt;string&gt;A String Function&lt;/string&gt;</result-string>
    <result>
      <assert-xml>
        <![CDATA[<string>A String Function</string>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="predicates-9"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;integer&gt;12678967543233&lt;/integer&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;integer&gt;12678967543233&lt;/integer&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;integer&gt;12678967543233&lt;/integer&gt;</response-string>
    <description> Evaluation of a simple predicate, that uses the "xs:integer()" function. </description>
    <created by="Carmelo Montanez" on="2005-09-01"/>
    <environment ref="atomicns"/>
    <test>(/root/integer[xs:integer(.) = 12678967543233])</test>
    <result-string>&lt;integer&gt;12678967543233&lt;/integer&gt;</result-string>
    <result>
      <assert-xml>
        <![CDATA[<integer>12678967543233</integer>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="predicates-10"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;decimal attr="12678967.543233"&gt;12678967.543233&lt;/decimal&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;decimal attr="12678967.543233"&gt;12678967.543233&lt;/decimal&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;decimal attr="12678967.543233"&gt;12678967.543233&lt;/decimal&gt;</response-string>
    <description> Evaluation of a simple predicate, that uses the "xs:decimal()" function. </description>
    <created by="Carmelo Montanez" on="2005-09-01"/>
    <environment ref="atomicns"/>
    <test>(/root/decimal[xs:decimal(.) = 12678967.543233])</test>
    <result-string>&lt;decimal attr="12678967.543233"&gt;12678967.543233&lt;/decimal&gt;</result-string>
    <result>
      <assert-xml>
        <![CDATA[<decimal attr="12678967.543233">12678967.543233</decimal>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="predicates-11"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;float&gt;1267.43233E12&lt;/float&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;float&gt;1267.43233E12&lt;/float&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;float&gt;1267.43233E12&lt;/float&gt;</response-string>
    <description> Evaluation of a simple predicate, that uses the "xs:float()" function. </description>
    <created by="Carmelo Montanez" on="2005-09-01"/>
    <environment ref="atomicns"/>
    <test>(/root/float[xs:float(.) = xs:float(1267.43233E12)])</test>
    <result-string>&lt;float&gt;1267.43233E12&lt;/float&gt;</result-string>
    <result>
      <assert-xml>
        <![CDATA[<float>1267.43233E12</float>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="predicates-12"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;double&gt;1267.43233E12&lt;/double&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;double&gt;1267.43233E12&lt;/double&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;double&gt;1267.43233E12&lt;/double&gt;</response-string>
    <description> Evaluation of a simple predicate, that uses the "xs:double()" function. </description>
    <created by="Carmelo Montanez" on="2005-09-01"/>
    <environment ref="atomicns"/>
    <test>(/root/double[xs:double(.) = 1267.43233E12])</test>
    <result-string>&lt;double&gt;1267.43233E12&lt;/double&gt;</result-string>
    <result>
      <assert-xml>
        <![CDATA[<double>1267.43233E12</double>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="predicates-13"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;boolean&gt;true&lt;/boolean&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;boolean&gt;true&lt;/boolean&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;boolean&gt;true&lt;/boolean&gt;</response-string>
    <description> Evaluation of a simple predicate, that uses the "xs:boolean" function. </description>
    <created by="Carmelo Montanez" on="2005-09-01"/>
    <environment ref="atomicns"/>
    <test>(/root/boolean[xs:boolean(.) = fn:true()])</test>
    <result-string>&lt;boolean&gt;true&lt;/boolean&gt;</result-string>
    <result>
      <assert-xml>
        <![CDATA[<boolean>true</boolean>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="predicates-14"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;date&gt;2000-01-01+05:00&lt;/date&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;date&gt;2000-01-01+05:00&lt;/date&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;date&gt;2000-01-01+05:00&lt;/date&gt;</response-string>
    <description> Evaluation of a simple predicate, that uses the "xs:date()" function. </description>
    <created by="Carmelo Montanez" on="2005-09-01"/>
    <environment ref="atomicns"/>
    <test>(/root/date[xs:date(.) = xs:date("2000-01-01+05:00")])</test>
    <result-string>&lt;date&gt;2000-01-01+05:00&lt;/date&gt;</result-string>
    <result>
      <assert-xml>
        <![CDATA[<date>2000-01-01+05:00</date>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="predicates-17"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;employee name="Jane Doe 11" gender="female"&gt;&amp;#10;   &lt;empnum&gt;E4&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P2&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;20&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;employee name="Jane Doe 11" gender="female"&gt;&amp;#10;   &lt;empnum&gt;E4&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P2&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;20&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;employee name="Jane Doe 11" gender="female"&gt;&amp;#10;   &lt;empnum&gt;E4&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P2&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;20&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;</response-string>
    <description> Evaluation of a simple predicate, that uses the "eq" operator. </description>
    <created by="Carmelo Montanez" on="2005-09-01"/>
    <environment ref="works-mod"/>
    <test>(/works/employee[@name="Jane Doe 11"])</test>
    <result-string>&lt;employee name="Jane Doe 11" gender="female"&gt;&amp;#10;   &lt;empnum&gt;E4&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P2&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;20&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;</result-string>
    <result>
      <assert-xml>
        <![CDATA[<employee name="Jane Doe 11" gender="female">
   <empnum>E4</empnum>
   <pnum>P2</pnum>
   <hours>20</hours>
  </employee>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="predicates-18"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;day&gt;Tuesday&lt;/day&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;day&gt;Tuesday&lt;/day&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;day&gt;Tuesday&lt;/day&gt;</response-string>
    <description> Evaluation of a simple predicate, that uses the "ne" operator. </description>
    <created by="Carmelo Montanez" on="2005-09-01"/>
    <environment ref="works-mod"/>
    <test>(/works//day[xs:string(.) ne "Monday"])</test>
    <result-string>&lt;day&gt;Tuesday&lt;/day&gt;</result-string>
    <result>
      <assert-xml>
        <![CDATA[<day>Tuesday</day>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="predicates-19"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;hours&gt;12&lt;/hours&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;hours&gt;12&lt;/hours&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;hours&gt;12&lt;/hours&gt;</response-string>
    <description> Evaluation of a simple predicate, that uses the "lt" operator. </description>
    <created by="Carmelo Montanez" on="2005-09-01"/>
    <environment ref="works-mod"/>
    <test>(/works//hours[xs:integer(.) lt 13])</test>
    <result-string>&lt;hours&gt;12&lt;/hours&gt;</result-string>
    <result>
      <assert-xml>
        <![CDATA[<hours>12</hours>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="predicates-20"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;hours&gt;12&lt;/hours&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;hours&gt;12&lt;/hours&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;hours&gt;12&lt;/hours&gt;</response-string>
    <description> Evaluation of a simple predicate, that uses the "le" operator. </description>
    <created by="Carmelo Montanez" on="2005-09-01"/>
    <environment ref="works-mod"/>
    <test>(/works//hours[xs:integer(.) le 12])</test>
    <result-string>&lt;hours&gt;12&lt;/hours&gt;</result-string>
    <result>
      <assert-xml>
        <![CDATA[<hours>12</hours>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="predicates-21"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(&lt;hours&gt;80&lt;/hours&gt;,&lt;hours&gt;80&lt;/hours&gt;,&lt;hours&gt;80&lt;/hours&gt;)</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(&lt;hours&gt;80&lt;/hours&gt;,&lt;hours&gt;80&lt;/hours&gt;,&lt;hours&gt;80&lt;/hours&gt;)</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(&lt;hours&gt;80&lt;/hours&gt;,&lt;hours&gt;80&lt;/hours&gt;,&lt;hours&gt;80&lt;/hours&gt;)</response-string>
    <description> Evaluation of a simple predicate, that uses the "gt" operator. </description>
    <created by="Carmelo Montanez" on="2005-09-01"/>
    <environment ref="works-mod"/>
    <test>(/works//hours[xs:integer(.) gt 79])</test>
    <result-string>(&lt;hours&gt;80&lt;/hours&gt;,&lt;hours&gt;80&lt;/hours&gt;,&lt;hours&gt;80&lt;/hours&gt;)</result-string>
    <result>
      <assert-xml>
        <![CDATA[<hours>80</hours><hours>80</hours><hours>80</hours>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="predicates-22"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(&lt;hours&gt;80&lt;/hours&gt;,&lt;hours&gt;80&lt;/hours&gt;,&lt;hours&gt;80&lt;/hours&gt;)</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(&lt;hours&gt;80&lt;/hours&gt;,&lt;hours&gt;80&lt;/hours&gt;,&lt;hours&gt;80&lt;/hours&gt;)</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(&lt;hours&gt;80&lt;/hours&gt;,&lt;hours&gt;80&lt;/hours&gt;,&lt;hours&gt;80&lt;/hours&gt;)</response-string>
    <description> Evaluation of a simple predicate, that uses the "ge" operator. </description>
    <created by="Carmelo Montanez" on="2005-09-01"/>
    <environment ref="works-mod"/>
    <test>(/works//hours[xs:integer(.) ge 80])</test>
    <result-string>(&lt;hours&gt;80&lt;/hours&gt;,&lt;hours&gt;80&lt;/hours&gt;,&lt;hours&gt;80&lt;/hours&gt;)</result-string>
    <result>
      <assert-xml>
        <![CDATA[<hours>80</hours><hours>80</hours><hours>80</hours>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="predicates-23"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;hours&gt;12&lt;/hours&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;hours&gt;12&lt;/hours&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;hours&gt;12&lt;/hours&gt;</response-string>
    <description> Evaluation of a simple predicate, that uses the "=" operator. </description>
    <created by="Carmelo Montanez" on="2005-09-01"/>
    <environment ref="works-mod"/>
    <test>(/works//hours[xs:integer(.) = 12])</test>
    <result-string>&lt;hours&gt;12&lt;/hours&gt;</result-string>
    <result>
      <assert-xml>
        <![CDATA[<hours>12</hours>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="predicates-24"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(&lt;employee name="Jane Doe 7" gender="female"&gt;&amp;#10;   &lt;empnum&gt;E2&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P1&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;40&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;,&lt;employee name="John Doe 8" gender="male"&gt;&amp;#10;   &lt;empnum&gt;E2&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P2&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;80&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;,&lt;employee name="Jane Doe 9" gender="female"&gt;&amp;#10;   &lt;empnum&gt;E3&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P2&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;20&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;,&lt;employee name="John Doe 10" gender="male"&gt;&amp;#10;   &lt;empnum&gt;E3&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P2&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;20&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;)</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(&lt;employee name="Jane Doe 7" gender="female"&gt;&amp;#10;   &lt;empnum&gt;E2&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P1&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;40&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;,&lt;employee name="John Doe 8" gender="male"&gt;&amp;#10;   &lt;empnum&gt;E2&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P2&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;80&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;,&lt;employee name="Jane Doe 9" gender="female"&gt;&amp;#10;   &lt;empnum&gt;E3&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P2&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;20&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;,&lt;employee name="John Doe 10" gender="male"&gt;&amp;#10;   &lt;empnum&gt;E3&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P2&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;20&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;)</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(&lt;employee name="Jane Doe 7" gender="female"&gt;&amp;#10;   &lt;empnum&gt;E2&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P1&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;40&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;,&lt;employee name="John Doe 8" gender="male"&gt;&amp;#10;   &lt;empnum&gt;E2&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P2&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;80&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;,&lt;employee name="Jane Doe 9" gender="female"&gt;&amp;#10;   &lt;empnum&gt;E3&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P2&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;20&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;,&lt;employee name="John Doe 10" gender="male"&gt;&amp;#10;   &lt;empnum&gt;E3&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P2&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;20&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;)</response-string>
    <description> Evaluation of a simple predicate, that uses the "!=" operator. </description>
    <created by="Carmelo Montanez" on="2005-09-01"/>
    <environment ref="works-mod"/>
    <test>(/works[1]//employee[empnum != "E1" and empnum != "E4"])</test>
    <result-string>(&lt;employee name="Jane Doe 7" gender="female"&gt;&amp;#10;   &lt;empnum&gt;E2&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P1&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;40&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;,&lt;employee name="John Doe 8" gender="male"&gt;&amp;#10;   &lt;empnum&gt;E2&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P2&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;80&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;,&lt;employee name="Jane Doe 9" gender="female"&gt;&amp;#10;   &lt;empnum&gt;E3&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P2&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;20&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;,&lt;employee name="John Doe 10" gender="male"&gt;&amp;#10;   &lt;empnum&gt;E3&lt;/empnum&gt;&amp;#10;   &lt;pnum&gt;P2&lt;/pnum&gt;&amp;#10;   &lt;hours&gt;20&lt;/hours&gt;&amp;#10;  &lt;/employee&gt;)</result-string>
    <result>
      <assert-xml>
        <![CDATA[<employee name="Jane Doe 7" gender="female">
   <empnum>E2</empnum>
   <pnum>P1</pnum>
   <hours>40</hours>
  </employee><employee name="John Doe 8" gender="male">
   <empnum>E2</empnum>
   <pnum>P2</pnum>
   <hours>80</hours>
  </employee><employee name="Jane Doe 9" gender="female">
   <empnum>E3</empnum>
   <pnum>P2</pnum>
   <hours>20</hours>
  </employee><employee name="John Doe 10" gender="male">
   <empnum>E3</empnum>
   <pnum>P2</pnum>
   <hours>20</hours>
  </employee>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="predicates-25"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;hours&gt;12&lt;/hours&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;hours&gt;12&lt;/hours&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;hours&gt;12&lt;/hours&gt;</response-string>
    <description> Evaluation of a simple predicate, that uses the "" operator. </description>
    <created by="Carmelo Montanez" on="2005-09-01"/>
    <environment ref="works-mod"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(/works//hours[xs:integer(.) < 13])]]>
    </test>
    <result-string>&lt;hours&gt;12&lt;/hours&gt;</result-string>
    <result>
      <assert-xml>
        <![CDATA[<hours>12</hours>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="predicates-26"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;hours&gt;12&lt;/hours&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;hours&gt;12&lt;/hours&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;hours&gt;12&lt;/hours&gt;</response-string>
    <description> Evaluation of a simple predicate, that uses the "=" operator. </description>
    <created by="Carmelo Montanez" on="2005-09-01"/>
    <environment ref="works-mod"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(/works//hours[xs:integer(.) <= 12])]]>
    </test>
    <result-string>&lt;hours&gt;12&lt;/hours&gt;</result-string>
    <result>
      <assert-xml>
        <![CDATA[<hours>12</hours>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="predicates-27"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Evaluation of a simple predicate, that uses the "" operator. </description>
    <created by="Carmelo Montanez" on="2005-09-01"/>
    <environment ref="works-mod"/>
    <test>(/works//hours[xs:integer(.)  79])</test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<hours>80</hours><hours>80</hours><hours>80</hours>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="predicates-28"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(&lt;hours&gt;80&lt;/hours&gt;,&lt;hours&gt;80&lt;/hours&gt;,&lt;hours&gt;80&lt;/hours&gt;)</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(&lt;hours&gt;80&lt;/hours&gt;,&lt;hours&gt;80&lt;/hours&gt;,&lt;hours&gt;80&lt;/hours&gt;)</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(&lt;hours&gt;80&lt;/hours&gt;,&lt;hours&gt;80&lt;/hours&gt;,&lt;hours&gt;80&lt;/hours&gt;)</response-string>
    <description> Evaluation of a simple predicate, that uses the "=" operator. </description>
    <created by="Carmelo Montanez" on="2005-09-01"/>
    <environment ref="works-mod"/>
    <test>(/works//hours[xs:integer(.) = 80])</test>
    <result-string>(&lt;hours&gt;80&lt;/hours&gt;,&lt;hours&gt;80&lt;/hours&gt;,&lt;hours&gt;80&lt;/hours&gt;)</result-string>
    <result>
      <assert-xml>
        <![CDATA[<hours>80</hours><hours>80</hours><hours>80</hours>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="predicates-29"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;element1&gt;&lt;element2&gt;some content&lt;/element2&gt;&lt;/element1&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;element1&gt;&lt;element2&gt;some content&lt;/element2&gt;&lt;/element1&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;element1&gt;&lt;element2&gt;some content&lt;/element2&gt;&lt;/element1&gt;</response-string>
    <description> A negative test for numeric range used as filter expression. </description>
    <created by="Carmelo Montanez" on="2006-03-17"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $foo := <element1><element2>some content</element2></element1> return $foo[(2 to 5)]]]>
    </test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0006"))</result-string>
    <result>
      <error code="FORG0006"/>
    </result>
  </test-case>
  <test-case name="predicates-30"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:untypedAtomic("E1"),xs:untypedAtomic("P1"),xs:untypedAtomic("E1"),xs:untypedAtomic("P3"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:untypedAtomic("E1"),xs:untypedAtomic("P1"),xs:untypedAtomic("E1"),xs:untypedAtomic("P3"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:untypedAtomic("E1"),xs:untypedAtomic("P1"),xs:untypedAtomic("E1"),xs:untypedAtomic("P3"))</response-string>
    <description> Evaluation of predicates reordering by an implementation </description>
    <created by="Carmelo Montanez" on="2006-03-21"/>
    <environment ref="works-mod"/>
    <test>for $x in /works/employee[fn:position() lt 5][fn:position() mod 2 eq 1] return (fn:data($x/empnum), fn:data($x/pnum))</test>
    <result-string>(xs:untypedAtomic("E1"),xs:untypedAtomic("P1"),xs:untypedAtomic("E1"),xs:untypedAtomic("P3"))</result-string>
    <result>
      <assert-string-value>E1 P1 E1 P3</assert-string-value>
    </result>
  </test-case>
  <test-case name="predicates-31"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:untypedAtomic("E1"),xs:untypedAtomic("P1"),xs:untypedAtomic("E1"),xs:untypedAtomic("P3"),xs:untypedAtomic("E1"),xs:untypedAtomic("P5"),xs:untypedAtomic("E2"),xs:untypedAtomic("P1"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:untypedAtomic("E1"),xs:untypedAtomic("P1"),xs:untypedAtomic("E1"),xs:untypedAtomic("P3"),xs:untypedAtomic("E1"),xs:untypedAtomic("P5"),xs:untypedAtomic("E2"),xs:untypedAtomic("P1"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:untypedAtomic("E1"),xs:untypedAtomic("P1"),xs:untypedAtomic("E1"),xs:untypedAtomic("P3"),xs:untypedAtomic("E1"),xs:untypedAtomic("P5"),xs:untypedAtomic("E2"),xs:untypedAtomic("P1"))</response-string>
    <description> Evaluation of predicates reordering by an implementation </description>
    <created by="Carmelo Montanez" on="2006-03-21"/>
    <environment ref="works-mod"/>
    <test>for $x in /works/employee[fn:position() mod 2 eq 1][fn:position() lt 5] return (fn:data($x/empnum), fn:data($x/pnum))</test>
    <result-string>(xs:untypedAtomic("E1"),xs:untypedAtomic("P1"),xs:untypedAtomic("E1"),xs:untypedAtomic("P3"),xs:untypedAtomic("E1"),xs:untypedAtomic("P5"),xs:untypedAtomic("E2"),xs:untypedAtomic("P1"))</result-string>
    <result>
      <assert-string-value>E1 P1 E1 P3 E1 P5 E2 P1</assert-string-value>
    </result>
  </test-case>
  <test-case name="predicatesns-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("1")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("1")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("1")</response-string>
    <description> Evaluation of a simple predicate with a "true" value (uses "fn:true"). Use of fn:count to avoid empty file. Not Schema dependent. </description>
    <created by="Carmelo Montanez" on="2006-03-15"/>
    <environment ref="atomicns"/>
    <test>fn:count((//integer[fn:true()]))</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="predicatesns-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string>
    <description> Evaluation of a simple predicate with a "false" value (uses "fn:false"). Use of fn:count to avoid empty file. Not Schema dependent. Use fn:count to avoid empty file. </description>
    <created by="Carmelo Montanez" on="2006-03-15"/>
    <environment ref="atomicns"/>
    <test>fn:count((//integer[fn:false()]))</test>
    <result-string>xs:integer("0")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0005"))</result-string>
    <result>
      <any-of>
        <assert-eq>0</assert-eq>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="predicatesns-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;integer&gt;12678967543233&lt;/integer&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;integer&gt;12678967543233&lt;/integer&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;integer&gt;12678967543233&lt;/integer&gt;</response-string>
    <description> Evaluation of a simple predicate with a "true" value (uses "fn:false" and fn:not()). Not Schema dependent. </description>
    <created by="Carmelo Montanez" on="2006-03-15"/>
    <environment ref="atomicns"/>
    <test>(//integer[fn:not(fn:false())])</test>
    <result-string>&lt;integer&gt;12678967543233&lt;/integer&gt;</result-string>
    <result>
      <assert-xml>
        <![CDATA[<integer>12678967543233</integer>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="predicatesns-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;integer&gt;12678967543233&lt;/integer&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;integer&gt;12678967543233&lt;/integer&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;integer&gt;12678967543233&lt;/integer&gt;</response-string>
    <description> Evaluation of a simple predicate set to a boolean expression ("and" operator). Not Schema dependent. </description>
    <created by="Carmelo Montanez" on="2006-03-15"/>
    <environment ref="atomicns"/>
    <test>(//integer[fn:true() and fn:true()])</test>
    <result-string>&lt;integer&gt;12678967543233&lt;/integer&gt;</result-string>
    <result>
      <assert-xml>
        <![CDATA[<integer>12678967543233</integer>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="predicatesns-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;integer&gt;12678967543233&lt;/integer&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;integer&gt;12678967543233&lt;/integer&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;integer&gt;12678967543233&lt;/integer&gt;</response-string>
    <description> Evaluation of a simple predicate set to a boolean expression ("or" operator). Not Schema dependent. </description>
    <created by="Carmelo Montanez" on="2006-03-15"/>
    <environment ref="atomicns"/>
    <test>(//integer[fn:true() or fn:true()])</test>
    <result-string>&lt;integer&gt;12678967543233&lt;/integer&gt;</result-string>
    <result>
      <assert-xml>
        <![CDATA[<integer>12678967543233</integer>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="predicatesns-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string>
    <description> Evaluation of a simple predicate set to a boolean expression ("and" operator). Returns "false" Uses "fn:count" to avoid empty file. Not Schema dependent. </description>
    <created by="Carmelo Montanez" on="2006-03-15"/>
    <environment ref="atomicns"/>
    <test>fn:count((//integer[fn:false() and fn:false()]))</test>
    <result-string>xs:integer("0")</result-string>
    <result-string>xs:integer("0")</result-string>
    <result>
      <any-of>
        <assert-eq>0</assert-eq>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="predicatesns-7"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string>
    <description> Evaluation of a simple predicate set to a boolean expression ("or" operator). Returns "false" Uses "fn:count" to avoid empty file. Not Schema dependent. </description>
    <created by="Carmelo Montanez" on="2006-03-15"/>
    <environment ref="atomicns"/>
    <test>fn:count((//integer[fn:false() or fn:false()]))</test>
    <result-string>xs:integer("0")</result-string>
    <result-string>xs:integer("0")</result-string>
    <result>
      <any-of>
        <assert-eq>0</assert-eq>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="predicatesns-8"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;string&gt;A String Function&lt;/string&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;string&gt;A String Function&lt;/string&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;string&gt;A String Function&lt;/string&gt;</response-string>
    <description> Evaluation of a simple predicate, that uses the "xs:string()" function. Not Schema dependent. </description>
    <created by="Carmelo Montanez" on="2006-03-15"/>
    <environment ref="atomicns"/>
    <test>(/root/string[xs:string(.) = "A String Function"])</test>
    <result-string>&lt;string&gt;A String Function&lt;/string&gt;</result-string>
    <result>
      <assert-xml>
        <![CDATA[<string>A String Function</string>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="predicatesns-9"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;integer&gt;12678967543233&lt;/integer&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;integer&gt;12678967543233&lt;/integer&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;integer&gt;12678967543233&lt;/integer&gt;</response-string>
    <description> Evaluation of a simple predicate, that uses the "xs:integer()" function. Not Schema dependent. </description>
    <created by="Carmelo Montanez" on="2006-03-15"/>
    <environment ref="atomicns"/>
    <test>(/root/integer[xs:integer(.) = 12678967543233])</test>
    <result-string>&lt;integer&gt;12678967543233&lt;/integer&gt;</result-string>
    <result>
      <assert-xml>
        <![CDATA[<integer>12678967543233</integer>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="predicatesns-10"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;decimal attr="12678967.543233"&gt;12678967.543233&lt;/decimal&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;decimal attr="12678967.543233"&gt;12678967.543233&lt;/decimal&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;decimal attr="12678967.543233"&gt;12678967.543233&lt;/decimal&gt;</response-string>
    <description> Evaluation of a simple predicate, that uses the "xs:decimal()" function. Not Schema dependent. </description>
    <created by="Carmelo Montanez" on="2006-03-15"/>
    <environment ref="atomicns"/>
    <test>(/root/decimal[(xs:decimal(.) = 12678967.543233)])</test>
    <result-string>&lt;decimal attr="12678967.543233"&gt;12678967.543233&lt;/decimal&gt;</result-string>
    <result>
      <assert-xml>
        <![CDATA[<decimal attr="12678967.543233">12678967.543233</decimal>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="predicatesns-11"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;float&gt;1267.43233E12&lt;/float&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;float&gt;1267.43233E12&lt;/float&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;float&gt;1267.43233E12&lt;/float&gt;</response-string>
    <description> Evaluation of a simple predicate, that uses the "xs:float()" function. Not Schema dependent . </description>
    <created by="Carmelo Montanez" on="2006-03-15"/>
    <environment ref="atomicns"/>
    <test>(/root/float[xs:float(.) = xs:float(1267.43233E12)])</test>
    <result-string>&lt;float&gt;1267.43233E12&lt;/float&gt;</result-string>
    <result>
      <assert-xml>
        <![CDATA[<float>1267.43233E12</float>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="predicatesns-12"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;double&gt;1267.43233E12&lt;/double&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;double&gt;1267.43233E12&lt;/double&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;double&gt;1267.43233E12&lt;/double&gt;</response-string>
    <description> Evaluation of a simple predicate, that uses the "xs:double()" function. Not Schema dependent. </description>
    <created by="Carmelo Montanez" on="2006-03-15"/>
    <environment ref="atomicns"/>
    <test>(/root/double[xs:double(.) = 1267.43233E12])</test>
    <result-string>&lt;double&gt;1267.43233E12&lt;/double&gt;</result-string>
    <result>
      <assert-xml>
        <![CDATA[<double>1267.43233E12</double>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="predicatesns-13"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;boolean&gt;true&lt;/boolean&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;boolean&gt;true&lt;/boolean&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;boolean&gt;true&lt;/boolean&gt;</response-string>
    <description> Evaluation of a simple predicate, that uses the "xs:boolean" function. Not Schema dependent. </description>
    <created by="Carmelo Montanez" on="2006-03-15"/>
    <environment ref="atomicns"/>
    <test>(/root/boolean[xs:boolean(.) = fn:true()])</test>
    <result-string>&lt;boolean&gt;true&lt;/boolean&gt;</result-string>
    <result>
      <assert-xml>
        <![CDATA[<boolean>true</boolean>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="predicatesns-14"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;date&gt;2000-01-01+05:00&lt;/date&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;date&gt;2000-01-01+05:00&lt;/date&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;date&gt;2000-01-01+05:00&lt;/date&gt;</response-string>
    <description> Evaluation of a simple predicate, that uses the "xs:date()" function. Not schema dependent. </description>
    <created by="Carmelo Montanez" on="2006-03-15"/>
    <environment ref="atomicns"/>
    <test>(/root/date[xs:date(.) = xs:date("2000-01-01+05:00")])</test>
    <result-string>&lt;date&gt;2000-01-01+05:00&lt;/date&gt;</result-string>
    <result>
      <assert-xml>
        <![CDATA[<date>2000-01-01+05:00</date>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="K2-Predicates-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("c")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("c")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("c")</response-string>
    <description> Predicate combined with &apos;treat as&apos;. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>"c"[. treat as xs:string]</test>
    <result-string>xs:string("c")</result-string>
    <result>
      <assert-string-value>c</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-Predicates-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Apply a predicate to directly constructed nodes. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $myvar := <elem> <a/> <b/> <c/></elem>; $myvar/*[last()]]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<c/>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="K2-Predicates-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Apply a predicate to directly constructed nodes. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $myvar := <elem> <a/> <b/> <c/></elem>; $myvar/*[last() - 1]]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<b/>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="K2-Predicates-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Apply a predicate to directly constructed nodes. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare variable $myvar := <elem> <a/> <b/> <c/></elem>; $myvar/*[1]]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<a/>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="K2-Predicates-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;a/&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;a/&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;a/&gt;</response-string>
    <description> Apply two identical numeric predicates after each other. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(<a/>, <b/>, <c/>)[1][1]]]>
    </test>
    <result-string>&lt;a/&gt;</result-string>
    <result>
      <assert-xml>
        <![CDATA[<a/>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="K2-Predicates-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;b attr="f"/&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;b attr="f"/&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;b attr="f"/&gt;</response-string>
    <description> Apply a predicate to a node constructor. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[<b attr="f"/>[1]]]>
    </test>
    <result-string>&lt;b attr="f"/&gt;</result-string>
    <result>
      <assert-xml>
        <![CDATA[<b attr="f"/>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="K2-Predicates-7"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Apply last() to ancestor-or-self within a predicate. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[<r>{<e xml:lang="ene"/>/(ancestor-or-self::*/@xml:lang)[last()]}</r>]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<r xml:lang="ene"/>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="K2-Predicates-8"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Use an axis step on an expression which has static type item(), from within a predicate. </description>
    <created by="Frans Englich" on="2008-11-13"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare function local:foo($arg as item()) { $arg[@arg] }; local:foo(<e arg="">result</e>)]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<e arg="">result</e>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="K2-Predicates-9"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> Use an axis step on an expression which has static type item(), from within a path. </description>
    <created by="Frans Englich" on="2008-11-13"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare function local:foo($arg as item()) { string($arg/@arg) }; local:foo(<e arg="result"/>)]]>
    </test>
    <result-string>xs:string("result")</result-string>
    <result>
      <assert-string-value>result</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-filterexpr-001"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"),xs:integer("6"),xs:integer("7"),xs:integer("8"),xs:integer("9"),xs:integer("10"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"),xs:integer("6"),xs:integer("7"),xs:integer("8"),xs:integer("9"),xs:integer("10"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"),xs:integer("6"),xs:integer("7"),xs:integer("8"),xs:integer("9"),xs:integer("10"))</response-string>
    <description> Test that negated floating point comparisons against the position variable optimize correctly. </description>
    <created by="Oliver Hallam" on="2008-09-19"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[
      	declare function local:nan() { xs:float("NaN") }; 
      	(1 to 10)[not(position() < xs:float("NaN"))]
      ]]>
    </test>
    <result-string>(xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"),xs:integer("6"),xs:integer("7"),xs:integer("8"),xs:integer("9"),xs:integer("10"))</result-string>
    <result>
      <assert-string-value>1 2 3 4 5 6 7 8 9 10</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-first-in-sequence-001"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("1")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("1")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("1")</response-string>
    <description> test fn:first-in-sequence on sub-expression where quant = 1 </description>
    <created by="Tim Mills" on="2008-04-15"/>
    <dependency type="spec" value="XQ10+"/>
    <test>declare function local:generate($arg as xs:integer?) { if ($arg = 0) then (1, 2, 3) else () }; ( local:generate(0), 1, local:generate(0) )[1]</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-string-value>1</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-first-in-sequence-002"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("3")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("3")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("3")</response-string>
    <description> test fn:first-in-sequence on a for expression </description>
    <created by="Tim Mills" on="2008-04-15"/>
    <dependency type="spec" value="XQ10+"/>
    <test>declare function local:generate($arg as xs:integer?) as xs:integer* { if ($arg = 0) then (1, 2, 3) else $arg }; ( local:generate(()), for $x in local:generate(0) return $x + 2 )[1]</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-first-in-sequence-003"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("2")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("2")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("2")</response-string>
    <description> test fn:first-in-sequence on a for expression </description>
    <created by="Tim Mills" on="2008-04-15"/>
    <dependency type="spec" value="XQ10+"/>
    <test>declare function local:generate($arg as xs:integer?) as xs:integer? { if ($arg = 0) then 0 else () }; ( local:generate(()), for $x in local:generate(0) return $x + 2 )[1]</test>
    <result-string>xs:integer("2")</result-string>
    <result>
      <assert-string-value>2</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-first-in-sequence-004"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("2")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("2")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("2")</response-string>
    <description> test fn:first-in-sequence on a for-at expression </description>
    <created by="Tim Mills" on="2008-04-15"/>
    <dependency type="spec" value="XQ10+"/>
    <test>declare function local:generate($arg as xs:integer?) as xs:integer* { if ($arg = 0) then ( 1, 2, 3 ) else ( $arg ) }; ( local:generate(()), for $x at $p in local:generate(0) return $p + $x)[1]</test>
    <result-string>xs:integer("2")</result-string>
    <result>
      <assert-string-value>2</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-first-in-sequence-005"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("2")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("2")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("2")</response-string>
    <description> test fn:first-in-sequence on a for-at expression </description>
    <created by="Tim Mills" on="2008-04-15"/>
    <dependency type="spec" value="XQ10+"/>
    <test>declare function local:generate($arg as xs:integer?) as xs:integer? { if ($arg = 0) then 1 else $arg }; ( local:generate(()), for $x at $p in local:generate(0) return $p + $x)[1]</test>
    <result-string>xs:integer("2")</result-string>
    <result>
      <assert-string-value>2</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-first-in-sequence-006"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> test fn:first-in-sequence on a map expression </description>
    <created by="Tim Mills" on="2008-04-15"/>
    <dependency type="spec" value="XQ10+"/>
    <test>declare function local:generate($arg as xs:integer?) as xs:string* { if ($arg = 0) then (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;) else (&apos;d&apos; ) }; ( if (local:generate(1) = &apos;d&apos;) then () else 1, for $x in local:generate(0) return fn:lower-case($x))[1]</test>
    <result-string>xs:string("a")</result-string>
    <result>
      <assert-string-value>a</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-first-in-sequence-007"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> test fn:first-in-sequence on a map expression </description>
    <created by="Tim Mills" on="2008-04-15"/>
    <dependency type="spec" value="XQ10+"/>
    <test>declare function local:generate($arg as xs:integer?) as xs:integer? { $arg }; ( if (local:generate(0) = 0) then () else 1, for $x in local:generate(0) return -$x)[1]</test>
    <result-string>xs:string("0")</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-first-in-sequence-008"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;b&gt;cheese&lt;/b&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;b&gt;cheese&lt;/b&gt;</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;b&gt;cheese&lt;/b&gt;</response-string>
    <description> test fn:first-in-sequence on a distinct-doc-order </description>
    <created by="Tim Mills" on="2008-04-15"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[( (<a><b>cheese</b></a>)/b )[1]]]>
    </test>
    <result-string>&lt;b&gt;cheese&lt;/b&gt;</result-string>
    <result>
      <assert-xml>bcheese/b</assert-xml>
    </result>
  </test-case>
  <test-case name="cbcl-first-in-sequence-009"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("3")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("3")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("3")</response-string>
    <description> test fn:first-in-sequence on a for-each expression Author: Tim Mills </description>
    <created by="Oliver Hallam" on="2008-04-15"/>
    <dependency type="spec" value="XQ10+"/>
    <test>declare function local:generate($arg as xs:integer?) as xs:string* { if ($arg = 0) then (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;) else () }; ( local:generate(()), for $x in local:generate(0) return 3)[1]</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-first-in-sequence-010"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> test fn:boolean on fn:first-in-sequence </description>
    <created by="Oliver Hallam" on="2008-04-22"/>
    <dependency type="spec" value="XQ10+"/>
    <test>declare function local:generate($arg as xs:integer?) as xs:string* { if ($arg = 0) then (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;) else () }; boolean(local:generate(0)[1])</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="cbcl-first-in-sequence-011"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description> test fn:boolean on fn:first-in-sequence </description>
    <created by="Oliver Hallam" on="2008-04-22"/>
    <dependency type="spec" value="XQ10+"/>
    <test>declare function local:generate($arg as xs:integer?) as xs:string* { if ($arg = 0) then (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;) else () }; boolean(local:generate(1)[1])</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="cbcl-first-in-sequence-012"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("3")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("3")</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("3")</response-string>
    <description> test fn:first-in-sequence on a for-each expression </description>
    <created by="Oliver Hallam" on="2008-04-22"/>
    <dependency type="spec" value="XQ10+"/>
    <test>declare function local:generate($arg as xs:boolean) as xs:string+ { if ($arg) then (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;) else (&apos;A&apos;, &apos;B&apos;, &apos;C&apos;) }; ( for $x in local:generate(true()) return 3)[1]</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="cbcl-filter-001"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("6"),xs:integer("12"),xs:integer("18"),xs:integer("24"),xs:integer("30"),xs:integer("36"),xs:integer("42"),xs:integer("48"),xs:integer("54"),xs:integer("60"),xs:integer("66"),xs:integer("72"),xs:integer("78"),xs:integer("84"),xs:integer("90"),xs:integer("96"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("6"),xs:integer("12"),xs:integer("18"),xs:integer("24"),xs:integer("30"),xs:integer("36"),xs:integer("42"),xs:integer("48"),xs:integer("54"),xs:integer("60"),xs:integer("66"),xs:integer("72"),xs:integer("78"),xs:integer("84"),xs:integer("90"),xs:integer("96"))</response-string><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("6"),xs:integer("12"),xs:integer("18"),xs:integer("24"),xs:integer("30"),xs:integer("36"),xs:integer("42"),xs:integer("48"),xs:integer("54"),xs:integer("60"),xs:integer("66"),xs:integer("72"),xs:integer("78"),xs:integer("84"),xs:integer("90"),xs:integer("96"))</response-string>
    <description> Tests various filter optimizations </description>
    <created by="Nick Jones" on="2008-06-27"/>
    <dependency type="spec" value="XQ10+ XP30+"/>
    <test>let $x := exists((1 to 10)[. mod 2 = 0]) return (1 to 100)[position() mod 2 = 0 and position() mod 3 = 0 and $x]</test>
    <result-string>(xs:integer("6"),xs:integer("12"),xs:integer("18"),xs:integer("24"),xs:integer("30"),xs:integer("36"),xs:integer("42"),xs:integer("48"),xs:integer("54"),xs:integer("60"),xs:integer("66"),xs:integer("72"),xs:integer("78"),xs:integer("84"),xs:integer("90"),xs:integer("96"))</result-string>
    <result>
      <assert-string-value>6 12 18 24 30 36 42 48 54 60 66 72 78 84 90 96</assert-string-value>
    </result>
  </test-case>
</test-set>