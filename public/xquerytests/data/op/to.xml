<test-set name="op-to" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">
  <description>Tests for the to() function</description>
  <link document="http://www.w3.org/TR/xpath-functions-30/" idref="func-to" type="spec"/>
  <test-case name="rangeExpr-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("10"),xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"))</response-string>
    <description> Evaluation of a single range expression using positive integers. </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>(10, 1 to 4)</test>
    <result-string>(xs:integer("10"),xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"))</result-string>
    <result>
      <assert-string-value>10 1 2 3 4</assert-string-value>
    </result>
  </test-case>
  <test-case name="rangeExpr-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("10")</response-string>
    <description> Evaluation of a range expression of length one containing the single integer 10. </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>10 to 10</test>
    <result-string>xs:integer("10")</result-string>
    <result>
      <assert-string-value>10</assert-string-value>
    </result>
  </test-case>
  <test-case name="rangeExpr-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Evaluation of a range expression that results in a sequence of length 0. Uses "fn:count" to avoid empty file. </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>fn:count(15 to 10)</test>
    <result-string>xs:string("0")</result-string>
    <result>
      <assert-string-value>0</assert-string-value>
    </result>
  </test-case>
  <test-case name="rangeExpr-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("15"),xs:integer("14"),xs:integer("13"),xs:integer("12"),xs:integer("11"),xs:integer("10"))</response-string>
    <description> Evaluation of a range expression that uses the "reverse" function. </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>fn:reverse(10 to 15)</test>
    <result-string>(xs:integer("15"),xs:integer("14"),xs:integer("13"),xs:integer("12"),xs:integer("11"),xs:integer("10"))</result-string>
    <result>
      <assert-string-value>15 14 13 12 11 10</assert-string-value>
    </result>
  </test-case>
  <test-case name="rangeExpr-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("1")</response-string>
    <description> Evaluation of a range expression that uses the empty sequence function. Uses the count function to avoid empty file. </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>fn:count((1, 2 to ()))</test>
    <result-string>xs:integer("1")</result-string>
    <result-string>xs:integer("1")</result-string>
    <result>
      <any-of>
        <assert-string-value>1</assert-string-value>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="rangeExpr-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("3"),xs:integer("4"))</response-string>
    <description> Evaluation of a range expression, where both operands are addition operations. </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>((1+2) to (2+2))</test>
    <result-string>(xs:integer("3"),xs:integer("4"))</result-string>
    <result>
      <assert-string-value>3 4</assert-string-value>
    </result>
  </test-case>
  <test-case name="rangeExpr-7"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("-4"),xs:integer("-3"),xs:integer("-2"),xs:integer("-1"),xs:integer("0"),xs:integer("1"),xs:integer("2"))</response-string>
    <description> Evaluation of a range expression, where the first operand are negative number. </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>(-4,-3 to 2)</test>
    <result-string>(xs:integer("-4"),xs:integer("-3"),xs:integer("-2"),xs:integer("-1"),xs:integer("0"),xs:integer("1"),xs:integer("2"))</result-string>
    <result>
      <assert-string-value>-4 -3 -2 -1 0 1 2</assert-string-value>
    </result>
  </test-case>
  <test-case name="rangeExpr-8"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("-4"),xs:integer("-3"),xs:integer("-2"),xs:integer("-1"))</response-string>
    <description> Evaluation of a range expression, where both operands are negative integers. </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>(-4, -3 to -1)</test>
    <result-string>(xs:integer("-4"),xs:integer("-3"),xs:integer("-2"),xs:integer("-1"))</result-string>
    <result>
      <assert-string-value>-4 -3 -2 -1</assert-string-value>
    </result>
  </test-case>
  <test-case name="rangeExpr-9"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"))</response-string>
    <description> Evaluation of a range expression, where the first operand is "xs:integer" function. </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>(xs:integer(1) to 5)</test>
    <result-string>(xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"))</result-string>
    <result>
      <assert-string-value>1 2 3 4 5</assert-string-value>
    </result>
  </test-case>
  <test-case name="rangeExpr-10"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"))</response-string>
    <description> Evaluation of a range expression, where the second operand is "xs:integer" function. </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>(1 to xs:integer(5))</test>
    <result-string>(xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"))</result-string>
    <result>
      <assert-string-value>1 2 3 4 5</assert-string-value>
    </result>
  </test-case>
  <test-case name="rangeExpr-11"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"))</response-string>
    <description> Evaluation of a range expression, where both operands are "xs:integer" functions. </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>(xs:integer(1) to xs:integer(5))</test>
    <result-string>(xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"))</result-string>
    <result>
      <assert-string-value>1 2 3 4 5</assert-string-value>
    </result>
  </test-case>
  <test-case name="rangeExpr-12"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"))</response-string>
    <description> Evaluation of a range expression, using the "fn:min" function </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>(fn:min((1,2)) to 5)</test>
    <result-string>(xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"))</result-string>
    <result>
      <assert-string-value>1 2 3 4 5</assert-string-value>
    </result>
  </test-case>
  <test-case name="rangeExpr-13"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"))</response-string>
    <description> Evaluation of a range expression, using the "fn:max" function </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>(fn:max((1,2)) to 5)</test>
    <result-string>(xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"))</result-string>
    <result>
      <assert-string-value>2 3 4 5</assert-string-value>
    </result>
  </test-case>
  <test-case name="rangeExpr-14"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"),xs:integer("6"),xs:integer("7"))</response-string>
    <description> Evaluation of a range expression, using the "fn:min" and "fn:max" functions </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>(fn:min((1,2)) to fn:max((6,7)))</test>
    <result-string>(xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"),xs:integer("6"),xs:integer("7"))</result-string>
    <result>
      <assert-string-value>1 2 3 4 5 6 7</assert-string-value>
    </result>
  </test-case>
  <test-case name="rangeExpr-15"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("1")</response-string>
    <description> Evaluation of a range expression as an argument to a "fn:min" function) </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>fn:min((1 to 5))</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-string-value>1</assert-string-value>
    </result>
  </test-case>
  <test-case name="rangeExpr-16"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("5")</response-string>
    <description> Evaluation of a range expression as an argument to a "fn:max" function) </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>fn:max((1 to 5))</test>
    <result-string>xs:integer("5")</result-string>
    <result>
      <assert-string-value>5</assert-string-value>
    </result>
  </test-case>
  <test-case name="rangeExpr-17"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("3")</response-string>
    <description> Evaluation of a range expression as an argument to an "fn:avg" function) </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>fn:avg((1 to 5))</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-string-value>3</assert-string-value>
    </result>
  </test-case>
  <test-case name="rangeExpr-18"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("5")</response-string>
    <description> Evaluation of a range expression as an argument to an "fn:count" function) </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>fn:count((1 to 5))</test>
    <result-string>xs:integer("5")</result-string>
    <result>
      <assert-string-value>5</assert-string-value>
    </result>
  </test-case>
  <test-case name="rangeExpr-19"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("6"),xs:integer("7"),xs:integer("8"),xs:integer("9"),xs:integer("10"))</response-string>
    <description> Evaluation of a range expression, where the first operand is a multiplication operation. </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>((3*2) to 10)</test>
    <result-string>(xs:integer("6"),xs:integer("7"),xs:integer("8"),xs:integer("9"),xs:integer("10"))</result-string>
    <result>
      <assert-string-value>6 7 8 9 10</assert-string-value>
    </result>
  </test-case>
  <test-case name="rangeExpr-20"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"),xs:integer("6"))</response-string>
    <description> Evaluation of a range expression, where the second operand is a multiplication operation. </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>(1 to (3*2))</test>
    <result-string>(xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"),xs:integer("6"))</result-string>
    <result>
      <assert-string-value>1 2 3 4 5 6</assert-string-value>
    </result>
  </test-case>
  <test-case name="rangeExpr-21"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"),xs:integer("6"))</response-string>
    <description> Evaluation of a range expression, where both operands are multiplication operations. </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>((1*2) to (3*2))</test>
    <result-string>(xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"),xs:integer("6"))</result-string>
    <result>
      <assert-string-value>2 3 4 5 6</assert-string-value>
    </result>
  </test-case>
  <test-case name="rangeExpr-22"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"),xs:integer("6"),xs:integer("7"),xs:integer("8"),xs:integer("9"),xs:integer("10"))</response-string>
    <description> Evaluation of a range expression, where the first operand is a subtraction operation. </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>((3 - 2) to 10)</test>
    <result-string>(xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"),xs:integer("6"),xs:integer("7"),xs:integer("8"),xs:integer("9"),xs:integer("10"))</result-string>
    <result>
      <assert-string-value>1 2 3 4 5 6 7 8 9 10</assert-string-value>
    </result>
  </test-case>
  <test-case name="rangeExpr-23"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("1")</response-string>
    <description> Evaluation of a range expression, where the second operand is a subtraction operation. </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>(1 to (3 - 2))</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-string-value>1</assert-string-value>
    </result>
  </test-case>
  <test-case name="rangeExpr-24"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"),xs:integer("6"))</response-string>
    <description> Evaluation of a range expression, where both operands are subtraction operations. </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>((2 - 1) to (7 - 1))</test>
    <result-string>(xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"),xs:integer("6"))</result-string>
    <result>
      <assert-string-value>1 2 3 4 5 6</assert-string-value>
    </result>
  </test-case>
  <test-case name="rangeExpr-25"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("3"),xs:integer("4"),xs:integer("5"),xs:integer("6"),xs:integer("7"),xs:integer("8"),xs:integer("9"),xs:integer("10"))</response-string>
    <description> Evaluation of a range expression, where the first operand is a division operation. </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>((6 idiv 2) to 10)</test>
    <result-string>(xs:integer("3"),xs:integer("4"),xs:integer("5"),xs:integer("6"),xs:integer("7"),xs:integer("8"),xs:integer("9"),xs:integer("10"))</result-string>
    <result>
      <assert-string-value>3 4 5 6 7 8 9 10</assert-string-value>
    </result>
  </test-case>
  <test-case name="rangeExpr-26"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"))</response-string>
    <description> Evaluation of a range expression, where the second operand is a division operation. </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>(1 to (10 idiv 2))</test>
    <result-string>(xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"))</result-string>
    <result>
      <assert-string-value>1 2 3 4 5</assert-string-value>
    </result>
  </test-case>
  <test-case name="rangeExpr-27"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"))</response-string>
    <description> Evaluation of a range expression, where both operands are division operations. </description>
    <created by="Carmelo Montanez" on="2005-08-16"/>
    <test>((5 idiv 5) to (8 idiv 2))</test>
    <result-string>(xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"))</result-string>
    <result>
      <assert-string-value>1 2 3 4</assert-string-value>
    </result>
  </test-case>
  <test-case name="rangeExpr-28"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("18446744073709551620")</response-string>
    <description> test op:to with large numbers </description>
    <created by="Tim Mills" on="2008-05-16"/>
    <modified by="Michael Kay" change="see bug 20519" on="2012-12-27"/>
    <test>18446744073709551616 to 18446744073709551620</test>
    <result-string>xs:string("18446744073709551616 18446744073709551617 18446744073709551618 18446744073709551619 18446744073709551620")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOAR0002"))</result-string>
    <result>
      <any-of>
        <assert-string-value>18446744073709551616 18446744073709551617 18446744073709551618 18446744073709551619 18446744073709551620</assert-string-value>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="rangeExpr-29"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("1")</response-string>
    <description> test op:to with large numbers </description>
    <created by="Michael Kay" on="2012-12-15"/>
    <modified by="Michael Kay" change="see bug 20519" on="2012-12-27"/>
    <test>count(18446744073709551616 to 18446744073709551620)</test>
    <result-string>xs:integer("5")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOAR0002"))</result-string>
    <result>
      <any-of>
        <assert-eq>5</assert-eq>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="rangeExpr-30"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("1")</response-string>
    <description> test op:to with large numbers </description>
    <created by="Michael Kay" on="2012-12-15"/>
    <modified by="Michael Kay" change="see bug 20519" on="2012-12-27"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>(28446744073709551616 to 28446744073709551620)!position()</test>
    <result-string>xs:string("1 2 3 4 5")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOAR0002"))</result-string>
    <result>
      <any-of>
        <assert-string-value>1 2 3 4 5</assert-string-value>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="rangeExpr-31"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("1")</response-string>
    <description> test op:to with large numbers </description>
    <created by="Michael Kay" on="2012-12-15"/>
    <modified by="Michael Kay" change="see bug 20519" on="2012-12-27"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>((28446744073709551616 to 28446744073709551620)!last())[1]</test>
    <result-string>xs:integer("5")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOAR0002"))</result-string>
    <result>
      <any-of>
        <assert-eq>5</assert-eq>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="rangeExpr-32"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("28446744073709551620")</response-string>
    <description> test op:to with large numbers </description>
    <created by="Michael Kay" on="2012-12-15"/>
    <modified by="Michael Kay" change="see bug 20519" on="2012-12-27"/>
    <dependency type="spec" value="XP30+ XQ30+"/>
    <test>reverse(28446744073709551616 to 28446744073709551620)</test>
    <result-string>xs:string("28446744073709551620 28446744073709551619 28446744073709551618 28446744073709551617 28446744073709551616")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FOAR0002"))</result-string>
    <result>
      <any-of>
        <assert-string-value>28446744073709551620 28446744073709551619 28446744073709551618 28446744073709551617 28446744073709551616</assert-string-value>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-RangeExpr-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> Since the left operand has the static cardinality zero-or-more, implementations using the static typing feature may raise XPTY0004. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>1 to 1 eq 1</test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPTY0004"))</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPTY0004"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-RangeExpr-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> A test whose essence is: `empty(30 to 3)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(30 to 3)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-RangeExpr-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> A test whose essence is: `empty(0 to -3)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(0 to -3)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-RangeExpr-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> A test whose essence is: `empty(1 to ())`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(1 to ())</test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0005"))</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-RangeExpr-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> A test whose essence is: `empty(() to 1)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(() to 1)</test>
    <result-string>xs:boolean("true")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "XPST0005"))</result-string>
    <result>
      <any-of>
        <assert-true/>
        <error code="XPST0005"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="K-RangeExpr-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> A test whose essence is: `empty(-1 to -3)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(-1 to -3)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-RangeExpr-7"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `count(1 to 4) eq 4`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>count(1 to 4) eq 4</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-RangeExpr-8"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `count(0 to 4) eq 5`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>count(0 to 4) eq 5</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-RangeExpr-9"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `count(-5 to -0) eq 6`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>count(-5 to -0) eq 6</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-RangeExpr-10"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `count((10, 1 to 4)) eq 5`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>count((10, 1 to 4)) eq 5</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-RangeExpr-11"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `subsequence(-3 to -1, 1, 1) eq -3`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence(-3 to -1, 1, 1) eq -3</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-RangeExpr-12"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `subsequence(-3 to -1, 3, 1) eq -1`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence(-3 to -1, 3, 1) eq -1</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-RangeExpr-13"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> A test whose essence is: `empty(reverse(4 to 1))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(reverse(4 to 1))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-RangeExpr-14"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `subsequence(reverse(1 to 3), 1, 1) eq 3`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence(reverse(1 to 3), 1, 1) eq 3</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-RangeExpr-15"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `subsequence(reverse(1 to 3), 3, 1) eq 1`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence(reverse(1 to 3), 3, 1) eq 1</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-RangeExpr-16"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `subsequence(reverse(1 to 4), 2, 1) eq 3`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence(reverse(1 to 4), 2, 1) eq 3</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-RangeExpr-17"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `subsequence(reverse(1 to 4), 3, 1) eq 2`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence(reverse(1 to 4), 3, 1) eq 2</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-RangeExpr-18"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `subsequence(reverse(-4 to -1), 2, 1) eq -2`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>subsequence(reverse(-4 to -1), 2, 1) eq -2</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-RangeExpr-19"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> A test whose essence is: `deep-equal((-1, -2, -3, -4), reverse(-4 to -1))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal((-1, -2, -3, -4), reverse(-4 to -1))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-RangeExpr-20"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> A test whose essence is: `deep-equal((), reverse(0 to -5))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal((), reverse(0 to -5))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-RangeExpr-21"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description> A test whose essence is: `deep-equal((0, -1, -2, -3, -4, -5), reverse(-5 to 0))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>deep-equal((0, -1, -2, -3, -4, -5), reverse(-5 to 0))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-RangeExpr-22"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `count(reverse(-5 to -2)) eq 4`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>count(reverse(-5 to -2)) eq 4</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-RangeExpr-23"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `count(reverse(-5 to -0)) eq 6`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>count(reverse(-5 to -0)) eq 6</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-RangeExpr-24"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description> A test whose essence is: `count(reverse(1 to 4)) eq 4`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>count(reverse(1 to 4)) eq 4</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-RangeExpr-25"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> A test whose essence is: `empty(1 to 0)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(1 to 0)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-RangeExpr-26"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> A test whose essence is: `empty(0 to -5)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(0 to -5)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-RangeExpr-27"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> A test whose essence is: `empty(-4 to -5)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(-4 to -5)</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-RangeExpr-28"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> A test whose essence is: `empty(reverse(1 to 0))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(reverse(1 to 0))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-RangeExpr-29"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> A test whose essence is: `empty(reverse(0 to -5))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(reverse(0 to -5))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-RangeExpr-30"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> A test whose essence is: `empty(reverse(-4 to -5))`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>empty(reverse(-4 to -5))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="K-RangeExpr-31"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> A test whose essence is: `(remove((2.e0, 4), 1) treat as xs:integer to 4)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(remove((2.e0, 4), 1) treat as xs:integer to 4)</test>
    <result-string>xs:string("4")</result-string>
    <result>
      <assert-string-value>4</assert-string-value>
    </result>
  </test-case>
  <test-case name="K-RangeExpr-32"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description> A test whose essence is: `(4 to remove((2e0, 4), 1) treat as xs:integer)`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>(4 to remove((2e0, 4), 1) treat as xs:integer)</test>
    <result-string>xs:string("4")</result-string>
    <result>
      <assert-string-value>4</assert-string-value>
    </result>
  </test-case>
  <test-case name="K-RangeExpr-33"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> A test whose essence is: `1.1 to 3`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>1.1 to 3</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-RangeExpr-34"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> A test whose essence is: `3 to 1.1`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>3 to 1.1</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-RangeExpr-35"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> A test whose essence is: `1.1 to 3.3`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>1.1 to 3.3</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K-RangeExpr-36"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> A test whose essence is: `1 + 1.1 to 5`. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>1 + 1.1 to 5</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K2-RangeExpr-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> The range expression doesn&apos;t accept xs:double as operand. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>1e3 to 3</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K2-RangeExpr-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description> The range expression doesn&apos;t accept xs:double as operand. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>3 to 1e3</test>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</result-string>
    <result>
      <error code="XPTY0004"/>
    </result>
  </test-case>
  <test-case name="K2-RangeExpr-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description> Combine with a for expression. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <test>for $i in 1 to 3 return $i</test>
    <result-string>xs:string("1 2 3")</result-string>
    <result>
      <assert-string-value>1 2 3</assert-string-value>
    </result>
  </test-case>
  <test-case name="K2-RangeExpr-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"),xs:integer("5"),xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"),xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:integer("4"),xs:integer("5"),xs:integer("6"),xs:integer("1001"),xs:integer("6"),xs:integer("8"),xs:integer("8"),xs:integer("6"),xs:integer("8"),xs:integer("8"),xs:integer("4"))</response-string>
    <description> Expressions that are tricky for local rewrites. </description>
    <created by="Frans Englich" on="2007-11-26"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[1 to <value>5</value>, 5 to <value>5</value>, <value>1</value> to 5, <value>1</value> to <value>5</value>, let $i := <e>5</e> return $i to $i, count(5 to 10), count(1000 to 2000), count(<e>5</e> to 10), count(3 to <e>10</e>), count(<e>3</e> to <e>10</e>), count(<e>5</e> to 10), count(3 to <e>10</e>), count(<e>3</e> to <e>10</e>), count(4294967295 to 4294967298)]]>
    </test>
    <result-string>xs:string("1 2 3 4 5 5 1 2 3 4 5 1 2 3 4 5 5 6 1001 6 8 8 6 8 8 4")</result-string>
    <result>
      <assert-string-value>1 2 3 4 5 5 1 2 3 4 5 1 2 3 4 5 5 6 1001 6 8 8 6 8 8 4</assert-string-value>
    </result>
  </test-case>
</test-set>