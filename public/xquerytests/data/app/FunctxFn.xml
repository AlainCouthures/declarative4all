<test-set name="app-FunctxFn" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">
  <description>Tests derived from the functx library </description>
  <environment name="functx_order">
    <source file="FunctxFn/functx_order.xml" role=".">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
    </source>
  </environment>
  <environment name="functx_catalog">
    <source file="FunctxFn/functx_catalog.xml" role=".">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
    </source>
  </environment>
  <environment name="functx_cats">
    <source file="FunctxFn/functx_cats.xml" role=".">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
    </source>
  </environment>
  <environment name="functx_prices">
    <source file="FunctxFn/functx_prices.xml" role=".">
      <description/>
      <created by="Frans Englich" on="2008-05-16"/>
    </source>
  </environment>
  <test-case name="functx-fn-abs-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("3.5")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(abs(3.5))</test>
    <result-string>xs:decimal("3.5")</result-string>
    <result>
      <assert-string-value>3.5</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-abs-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("4")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(abs(-4))</test>
    <result-string>xs:integer("4")</result-string>
    <result>
      <assert-eq>4</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-abs-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:float("INF")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(abs(xs:float(&apos;-INF&apos;)))</test>
    <result-string>xs:float("INF")</result-string>
    <result>
      <assert-string-value>INF</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-abs-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:decimal("3.5"),xs:integer("4"),xs:float("INF"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(abs(3.5), abs(-4), abs(xs:float(&apos;-INF&apos;)))</test>
    <result-string>(xs:decimal("3.5"),xs:integer("4"),xs:float("INF"))</result-string>
    <result>
      <assert-string-value>3.5 4 INF</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-adjust-date-to-timezone-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(adjust-date-to-timezone( xs:date(&apos;2006-02-15&apos;), xs:dayTimeDuration(&apos;-PT8H&apos;)))</test>
    <result-string>xs:string("2006-02-15-08:00")</result-string>
    <result>
      <assert-string-value>2006-02-15-08:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-adjust-date-to-timezone-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(adjust-date-to-timezone( xs:date(&apos;2006-02-15-03:00&apos;), xs:dayTimeDuration(&apos;-PT8H&apos;)))</test>
    <result-string>xs:string("2006-02-14-08:00")</result-string>
    <result>
      <assert-string-value>2006-02-14-08:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-adjust-date-to-timezone-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(adjust-date-to-timezone( xs:date(&apos;2006-02-15&apos;), ()))</test>
    <result-string>xs:string("2006-02-15")</result-string>
    <result>
      <assert-string-value>2006-02-15</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-adjust-date-to-timezone-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(adjust-date-to-timezone( xs:date(&apos;2006-02-15-03:00&apos;), ()))</test>
    <result-string>xs:string("2006-02-15")</result-string>
    <result>
      <assert-string-value>2006-02-15</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-adjust-date-to-timezone-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(adjust-date-to-timezone( xs:date(&apos;2006-02-15&apos;), xs:dayTimeDuration(&apos;-PT8H&apos;)), adjust-date-to-timezone( xs:date(&apos;2006-02-15-03:00&apos;), xs:dayTimeDuration(&apos;-PT8H&apos;)), adjust-date-to-timezone( xs:date(&apos;2006-02-15&apos;), ()), adjust-date-to-timezone( xs:date(&apos;2006-02-15-03:00&apos;), ()))</test>
    <result-string>xs:string("2006-02-15-08:00 2006-02-14-08:00 2006-02-15 2006-02-15")</result-string>
    <result>
      <assert-string-value>2006-02-15-08:00 2006-02-14-08:00 2006-02-15 2006-02-15</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-adjust-dateTime-to-timezone-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(adjust-dateTime-to-timezone( xs:dateTime(&apos;2006-02-15T17:00:00&apos;), xs:dayTimeDuration(&apos;-PT7H&apos;)))</test>
    <result-string>xs:string("2006-02-15T17:00:00-07:00")</result-string>
    <result>
      <assert-string-value>2006-02-15T17:00:00-07:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-adjust-dateTime-to-timezone-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(adjust-dateTime-to-timezone( xs:dateTime(&apos;2006-02-15T17:00:00-03:00&apos;), xs:dayTimeDuration(&apos;-PT7H&apos;)))</test>
    <result-string>xs:string("2006-02-15T13:00:00-07:00")</result-string>
    <result>
      <assert-string-value>2006-02-15T13:00:00-07:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-adjust-dateTime-to-timezone-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(adjust-dateTime-to-timezone( xs:dateTime(&apos;2006-02-15T17:00:00&apos;), ()))</test>
    <result-string>xs:string("2006-02-15T17:00:00")</result-string>
    <result>
      <assert-string-value>2006-02-15T17:00:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-adjust-dateTime-to-timezone-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(adjust-dateTime-to-timezone( xs:dateTime(&apos;2006-02-15T17:00:00-03:00&apos;), ()))</test>
    <result-string>xs:string("2006-02-15T17:00:00")</result-string>
    <result>
      <assert-string-value>2006-02-15T17:00:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-adjust-dateTime-to-timezone-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(adjust-dateTime-to-timezone( xs:dateTime(&apos;2006-02-15T01:00:00-03:00&apos;), xs:dayTimeDuration(&apos;-PT7H&apos;)))</test>
    <result-string>xs:string("2006-02-14T21:00:00-07:00")</result-string>
    <result>
      <assert-string-value>2006-02-14T21:00:00-07:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-adjust-dateTime-to-timezone-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(adjust-dateTime-to-timezone( xs:dateTime(&apos;2006-02-15T17:00:00&apos;), xs:dayTimeDuration(&apos;-PT7H&apos;)), adjust-dateTime-to-timezone( xs:dateTime(&apos;2006-02-15T17:00:00-03:00&apos;), xs:dayTimeDuration(&apos;-PT7H&apos;)), adjust-dateTime-to-timezone( xs:dateTime(&apos;2006-02-15T17:00:00&apos;), ()), adjust-dateTime-to-timezone( xs:dateTime(&apos;2006-02-15T17:00:00-03:00&apos;), ()), adjust-dateTime-to-timezone( xs:dateTime(&apos;2006-02-15T01:00:00-03:00&apos;), xs:dayTimeDuration(&apos;-PT7H&apos;)))</test>
    <result-string>xs:string("2006-02-15T17:00:00-07:00 2006-02-15T13:00:00-07:00 2006-02-15T17:00:00 2006-02-15T17:00:00 2006-02-14T21:00:00-07:00")</result-string>
    <result>
      <assert-string-value>2006-02-15T17:00:00-07:00 2006-02-15T13:00:00-07:00 2006-02-15T17:00:00 2006-02-15T17:00:00 2006-02-14T21:00:00-07:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-adjust-time-to-timezone-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(adjust-time-to-timezone( xs:time(&apos;17:00:00&apos;), xs:dayTimeDuration(&apos;-PT7H&apos;)))</test>
    <result-string>xs:string("17:00:00-07:00")</result-string>
    <result>
      <assert-string-value>17:00:00-07:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-adjust-time-to-timezone-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(adjust-time-to-timezone( xs:time(&apos;17:00:00-03:00&apos;), xs:dayTimeDuration(&apos;-PT7H&apos;)))</test>
    <result-string>xs:string("13:00:00-07:00")</result-string>
    <result>
      <assert-string-value>13:00:00-07:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-adjust-time-to-timezone-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(adjust-time-to-timezone( xs:time(&apos;17:00:00&apos;), ()))</test>
    <result-string>xs:string("17:00:00")</result-string>
    <result>
      <assert-string-value>17:00:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-adjust-time-to-timezone-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(adjust-time-to-timezone( xs:time(&apos;17:00:00-03:00&apos;), ()))</test>
    <result-string>xs:string("17:00:00")</result-string>
    <result>
      <assert-string-value>17:00:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-adjust-time-to-timezone-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(adjust-time-to-timezone( xs:time(&apos;17:00:00&apos;), xs:dayTimeDuration(&apos;-PT7H&apos;)), adjust-time-to-timezone( xs:time(&apos;17:00:00-03:00&apos;), xs:dayTimeDuration(&apos;-PT7H&apos;)), adjust-time-to-timezone( xs:time(&apos;17:00:00&apos;), ()), adjust-time-to-timezone( xs:time(&apos;17:00:00-03:00&apos;), ()))</test>
    <result-string>xs:string("17:00:00-07:00 13:00:00-07:00 17:00:00 17:00:00")</result-string>
    <result>
      <assert-string-value>17:00:00-07:00 13:00:00-07:00 17:00:00 17:00:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-avg-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("3")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(avg( (1, 2, 3, 4, 5) ))</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-avg-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("3")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(avg( (1, 2, 3, (), 4, 5) ))</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-avg-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(avg( (xs:yearMonthDuration(&apos;P4M&apos;), xs:yearMonthDuration(&apos;P6M&apos;) ) ))</test>
    <result-string>xs:string("P5M")</result-string>
    <result>
      <assert-string-value>P5M</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-avg-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">attribute quantity {"1"}</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_order"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $ordDoc := (/) return (avg($ordDoc//item/@quantity))</test>
    <result-string>xs:decimal("1.1666666666666667")</result-string>
    <result>
      <assert-eq>1.1666666666666667</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-avg-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_order"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $ordDoc := (/) return (avg( () ))</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-avg-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("3"),xs:integer("3"),fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004")),attribute quantity {"1"})</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_order"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $ordDoc := (/) return (avg( (1, 2, 3, 4, 5) ), avg( (1, 2, 3, (), 4, 5) ), avg( (xs:yearMonthDuration(&apos;P4M&apos;), xs:yearMonthDuration(&apos;P6M&apos;) ) ), avg($ordDoc//item/@quantity), avg( () ))</test>
    <result-string/>
    <result>
      <assert-deep-eq>3, 3, xs:yearMonthDuration(&apos;P5M&apos;), 1.1666666666666667</assert-deep-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-base-uri-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_cats"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $cats := (/) return (base-uri($cats//catalog[1]))</test>
    <result-string>xs:string("http://example.org/ACC/")</result-string>
    <result>
      <assert-string-value>http://example.org/ACC/</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-base-uri-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_cats"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $cats := (/) return (base-uri($cats//catalog[2]/product))</test>
    <result-string>xs:string("http://example.org/WMN/")</result-string>
    <result>
      <assert-string-value>http://example.org/WMN/</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-base-uri-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_cats"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $cats := (/) return (base-uri($cats//catalog[2]/product/@href))</test>
    <result-string>xs:string("http://example.org/WMN/")</result-string>
    <result>
      <assert-string-value>http://example.org/WMN/</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-base-uri-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:anyURI(""),xs:anyURI(""),xs:anyURI(""))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_cats"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $cats := (/) return (base-uri($cats//catalog[1]), base-uri($cats//catalog[2]/product), base-uri($cats//catalog[2]/product/@href))</test>
    <result-string>xs:string("http://example.org/ACC/ http://example.org/WMN/ http://example.org/WMN/")</result-string>
    <result>
      <assert-string-value>http://example.org/ACC/ http://example.org/WMN/ http://example.org/WMN/</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-boolean-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_order"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $ordDoc := (/) return (boolean( () ))</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="functx-fn-boolean-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_order"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $ordDoc := (/) return (boolean(&apos;&apos;))</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="functx-fn-boolean-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_order"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $ordDoc := (/) return (boolean(0))</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="functx-fn-boolean-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_order"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $ordDoc := (/) return (boolean(&apos;0&apos;))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-boolean-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_order"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $ordDoc := (/) return (boolean(&apos;false&apos;))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-boolean-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_order"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $ordDoc := (/) return (boolean(xs:float(&apos;NaN&apos;)))</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="functx-fn-boolean-7"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_order"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $ordDoc := (/) return (boolean($ordDoc/order[1]))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-boolean-8"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_order"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $ordDoc := (/) return (boolean($ordDoc/noSuchChild))</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="functx-fn-boolean-9"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_order"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $ordDoc := (/) return (boolean(<a>false</a>))]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-boolean-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_order"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $ordDoc := (/) return (boolean( () ), boolean(''), boolean(0), boolean('0'), boolean('false'), boolean(xs:float('NaN')), boolean($ordDoc/order[1]), boolean($ordDoc/noSuchChild), boolean(<a>false</a>))]]>
    </test>
    <result-string>xs:string("false false false true true false true false true")</result-string>
    <result>
      <assert-string-value>false false false true true false true false true</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-ceiling-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("5")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(ceiling(5))</test>
    <result-string>xs:integer("5")</result-string>
    <result>
      <assert-eq>5</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-ceiling-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("6")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(ceiling(5.1))</test>
    <result-string>xs:integer("6")</result-string>
    <result>
      <assert-eq>6</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-ceiling-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("6")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(ceiling(5.5))</test>
    <result-string>xs:integer("6")</result-string>
    <result>
      <assert-eq>6</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-ceiling-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("-5")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(ceiling(-5.5))</test>
    <result-string>xs:integer("-5")</result-string>
    <result>
      <assert-eq>-5</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-ceiling-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("-5")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(ceiling(-5.51))</test>
    <result-string>xs:integer("-5")</result-string>
    <result>
      <assert-eq>-5</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-ceiling-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(ceiling( () ))</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-ceiling-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("5"),xs:integer("6"),xs:integer("6"),xs:integer("-5"),xs:integer("-5"),xs:integer("0"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(ceiling(5), ceiling(5.1), ceiling(5.5), ceiling(-5.5), ceiling(-5.51), ceiling( () ))</test>
    <result-string>xs:string("5 6 6 -5 -5")</result-string>
    <result>
      <assert-string-value>5 6 6 -5 -5</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-codepoint-equal-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(codepoint-equal(&apos;abc&apos;, &apos;abc&apos;))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-codepoint-equal-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(codepoint-equal(&apos;abc&apos;, &apos;ab c&apos;))</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="functx-fn-codepoint-equal-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(codepoint-equal(&apos;abc&apos;, ()))</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-codepoint-equal-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:boolean("true"),xs:boolean("false"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(codepoint-equal(&apos;abc&apos;, &apos;abc&apos;), codepoint-equal(&apos;abc&apos;, &apos;ab c&apos;), codepoint-equal(&apos;abc&apos;, ()))</test>
    <result-string>(xs:boolean("true"),xs:boolean("false"))</result-string>
    <result>
      <assert-string-value>true false</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-codepoints-to-string-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("a b c")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(codepoints-to-string((97, 32, 98, 32, 99)))</test>
    <result-string>xs:string("a b c")</result-string>
    <result>
      <assert-string-value>a b c</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-codepoints-to-string-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("a")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(codepoints-to-string(97))</test>
    <result-string>xs:string("a")</result-string>
    <result>
      <assert-string-value>a</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-codepoints-to-string-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(codepoints-to-string(()))</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-codepoints-to-string-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("a b c"),xs:string("a"),xs:string(""))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(codepoints-to-string((97, 32, 98, 32, 99)), codepoints-to-string(97), codepoints-to-string(()))</test>
    <result-string>(xs:string("a b c"),xs:string("a"),xs:string(""))</result-string>
    <result>
      <assert-string-value>a b c a </assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-compare-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("-1")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(compare(&apos;a&apos;, &apos;b&apos;))</test>
    <result-string>xs:integer("-1")</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-compare-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(compare(&apos;a&apos;, &apos;a&apos;))</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-compare-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("1")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(compare(&apos;b&apos;, &apos;a&apos;))</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-compare-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("-1")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(compare(&apos;ab&apos;, &apos;abc&apos;))</test>
    <result-string>xs:integer("-1")</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-compare-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("1")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(compare(&apos;a&apos;, &apos;B&apos;))</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-compare-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("-1")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(compare(upper-case(&apos;a&apos;), upper-case(&apos;B&apos;)))</test>
    <result-string>xs:integer("-1")</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-compare-7"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(compare(&apos;a&apos;, ()))</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-compare-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("-1"),xs:integer("0"),xs:integer("1"),xs:integer("-1"),xs:integer("1"),xs:integer("-1"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(compare(&apos;a&apos;, &apos;b&apos;), compare(&apos;a&apos;, &apos;a&apos;), compare(&apos;b&apos;, &apos;a&apos;), compare(&apos;ab&apos;, &apos;abc&apos;), compare(&apos;a&apos;, &apos;B&apos;), compare(upper-case(&apos;a&apos;), upper-case(&apos;B&apos;)), compare(&apos;a&apos;, ()))</test>
    <result-string>(xs:integer("-1"),xs:integer("0"),xs:integer("1"),xs:integer("-1"),xs:integer("1"),xs:integer("-1"))</result-string>
    <result>
      <assert-string-value>-1 0 1 -1 1 -1</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-concat-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("ab")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(concat(&apos;a&apos;, &apos;b&apos;))</test>
    <result-string>xs:string("ab")</result-string>
    <result>
      <assert-string-value>ab</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-concat-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("abc")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(concat(&apos;a&apos;, &apos;b&apos;, &apos;c&apos;))</test>
    <result-string>xs:string("abc")</result-string>
    <result>
      <assert-string-value>abc</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-concat-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("abc")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(concat(&apos;a&apos;, (), &apos;b&apos;, &apos;&apos;, &apos;c&apos;))</test>
    <result-string>xs:string("abc")</result-string>
    <result>
      <assert-string-value>abc</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-concat-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("abc")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(concat('a', <x>b</x>, 'c'))]]>
    </test>
    <result-string>xs:string("abc")</result-string>
    <result>
      <assert-string-value>abc</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-concat-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("ab"),xs:string("abc"),xs:string("abc"),xs:string("abc"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(concat('a', 'b'), concat('a', 'b', 'c'), concat('a', (), 'b', '', 'c'), concat('a', <x>b</x>, 'c'))]]>
    </test>
    <result-string>(xs:string("ab"),xs:string("abc"),xs:string("abc"),xs:string("abc"))</result-string>
    <result>
      <assert-string-value>ab abc abc abc</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-contains-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(contains(&apos;query&apos;, &apos;e&apos;))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-contains-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(contains(&apos;query&apos;, &apos;ery&apos;))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-contains-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(contains(&apos;query&apos;, &apos;query&apos;))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-contains-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(contains(&apos;query&apos;, &apos;x&apos;))</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="functx-fn-contains-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(contains(&apos;query&apos;, &apos;&apos;))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-contains-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(contains(&apos;query&apos;, ()))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-contains-7"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(contains( (), &apos;q&apos;))</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="functx-fn-contains-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:boolean("true"),xs:boolean("true"),xs:boolean("true"),xs:boolean("false"),xs:boolean("true"),xs:boolean("true"),xs:boolean("false"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(contains(&apos;query&apos;, &apos;e&apos;), contains(&apos;query&apos;, &apos;ery&apos;), contains(&apos;query&apos;, &apos;query&apos;), contains(&apos;query&apos;, &apos;x&apos;), contains(&apos;query&apos;, &apos;&apos;), contains(&apos;query&apos;, ()), contains( (), &apos;q&apos;))</test>
    <result-string>(xs:boolean("true"),xs:boolean("true"),xs:boolean("true"),xs:boolean("false"),xs:boolean("true"),xs:boolean("true"),xs:boolean("false"))</result-string>
    <result>
      <assert-string-value>true true true false true true false</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-count-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("3")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_order"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $ordDoc := (/) return (count( (1, 2, 3) ))</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-count-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("6")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_order"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $ordDoc := (/) return (count($ordDoc//item))</test>
    <result-string>xs:integer("6")</result-string>
    <result>
      <assert-eq>6</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-count-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("4")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_order"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $ordDoc := (/) return (count( distinct-values($ordDoc//item/@num)))</test>
    <result-string>xs:integer("4")</result-string>
    <result>
      <assert-eq>4</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-count-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("3")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_order"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $ordDoc := (/) return (count( (1, 2, 3, () ) ))</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-count-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_order"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $ordDoc := (/) return (count( () ))</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-count-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("3"),xs:integer("6"),xs:integer("4"),xs:integer("3"),xs:integer("0"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_order"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $ordDoc := (/) return (count( (1, 2, 3) ), count($ordDoc//item), count( distinct-values($ordDoc//item/@num)), count( (1, 2, 3, () ) ), count( () ))</test>
    <result-string>(xs:integer("3"),xs:integer("6"),xs:integer("4"),xs:integer("3"),xs:integer("0"))</result-string>
    <result>
      <assert-string-value>3 6 4 3 0</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-data-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("557")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_catalog"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $cat := (/) return (data($cat//product[1]/number))</test>
    <result-string>xs:untypedAtomic("557")</result-string>
    <result>
      <assert-string-value>557</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-data-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:untypedAtomic("557"),xs:untypedAtomic("563"),xs:untypedAtomic("443"),xs:untypedAtomic("784"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_catalog"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $cat := (/) return (data($cat//number))</test>
    <result-string>(xs:untypedAtomic("557"),xs:untypedAtomic("563"),xs:untypedAtomic("443"),xs:untypedAtomic("784"))</result-string>
    <result>
      <assert-string-value>557 563 443 784</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-data-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("WMN")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_catalog"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $cat := (/) return (data($cat//product[1]/@dept))</test>
    <result-string>xs:untypedAtomic("WMN")</result-string>
    <result>
      <assert-string-value>WMN</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-data-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("navy black")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_catalog"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $cat := (/) return (data($cat//product[1]/colorChoices))</test>
    <result-string>xs:untypedAtomic("navy black")</result-string>
    <result>
      <assert-string-value>navy black</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-data-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("&amp;#10;  557&amp;#10;  Fleece Pullover&amp;#10;  navy black&amp;#10; ")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_catalog"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $cat := (/) return (data($cat//product[1]))</test>
    <result-string>xs:string("557 Fleece Pullover navy black")</result-string>
    <result>
      <assert-string-value normalize-space="true">557 Fleece Pullover navy black</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-data-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:untypedAtomic("Our favorite shirt!")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_catalog"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $cat := (/) return (data($cat//product[4]/desc))</test>
    <result-string>xs:untypedAtomic("Our favorite shirt!")</result-string>
    <result>
      <assert-string-value>Our favorite shirt!</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-data-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:untypedAtomic("557"),xs:untypedAtomic("557"),xs:untypedAtomic("563"),xs:untypedAtomic("443"),xs:untypedAtomic("784"),xs:untypedAtomic("WMN"),xs:untypedAtomic("navy black"),xs:untypedAtomic("&amp;#10;  557&amp;#10;  Fleece Pullover&amp;#10;  navy black&amp;#10; "),xs:untypedAtomic("Our favorite shirt!"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_catalog"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $cat := (/) return (data($cat//product[1]/number), data($cat//number), data($cat//product[1]/@dept), data($cat//product[1]/colorChoices), data($cat//product[1]), data($cat//product[4]/desc))</test>
    <result-string>xs:string("557 557 563 443 784 WMN navy black 557 Fleece Pullover navy black Our favorite shirt!")</result-string>
    <result>
      <assert-string-value normalize-space="true">557 557 563 443 784 WMN navy black 557 Fleece Pullover navy black Our favorite shirt!</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-dateTime-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(dateTime(xs:date(&apos;2006-08-15&apos;), xs:time(&apos;12:30:45-05:00&apos;)))</test>
    <result-string>xs:string("2006-08-15T12:30:45-05:00")</result-string>
    <result>
      <assert-string-value>2006-08-15T12:30:45-05:00</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-day-from-date-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("15")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(day-from-date(xs:date(&apos;2006-08-15&apos;)))</test>
    <result-string>xs:integer("15")</result-string>
    <result>
      <assert-eq>15</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-day-from-dateTime-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("15")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(day-from-dateTime( xs:dateTime(&apos;2006-08-15T10:30:23&apos;)))</test>
    <result-string>xs:integer("15")</result-string>
    <result>
      <assert-eq>15</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-days-from-duration-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("5")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(days-from-duration( xs:dayTimeDuration(&apos;P5D&apos;)))</test>
    <result-string>xs:integer("5")</result-string>
    <result>
      <assert-eq>5</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-days-from-duration-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("-1")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(days-from-duration( xs:dayTimeDuration(&apos;-PT24H&apos;)))</test>
    <result-string>xs:integer("-1")</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-days-from-duration-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(days-from-duration( xs:dayTimeDuration(&apos;PT23H&apos;)))</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-days-from-duration-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("2")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(days-from-duration( xs:dayTimeDuration(&apos;P1DT36H&apos;)))</test>
    <result-string>xs:integer("2")</result-string>
    <result>
      <assert-eq>2</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-days-from-duration-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("1")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(days-from-duration( xs:dayTimeDuration(&apos;PT1440M&apos;)))</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-days-from-duration-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("5"),xs:integer("-1"),xs:integer("0"),xs:integer("2"),xs:integer("1"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(days-from-duration( xs:dayTimeDuration(&apos;P5D&apos;)), days-from-duration( xs:dayTimeDuration(&apos;-PT24H&apos;)), days-from-duration( xs:dayTimeDuration(&apos;PT23H&apos;)), days-from-duration( xs:dayTimeDuration(&apos;P1DT36H&apos;)), days-from-duration( xs:dayTimeDuration(&apos;PT1440M&apos;)))</test>
    <result-string>(xs:integer("5"),xs:integer("-1"),xs:integer("0"),xs:integer("2"),xs:integer("1"))</result-string>
    <result>
      <assert-string-value>5 -1 0 2 1</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-deep-equal-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $prod1 := <product dept='MEN' id='P123'> <number>784</number> </product> return let $prod2 := <product id='P123' dept='MEN'><!--comment--> <number>784</number> </product> return (deep-equal( 1, 1 ))]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-deep-equal-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $prod1 := <product dept='MEN' id='P123'> <number>784</number> </product> return let $prod2 := <product id='P123' dept='MEN'><!--comment--> <number>784</number> </product> return (deep-equal( (1, 1), (1, 1) ))]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-deep-equal-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $prod1 := <product dept='MEN' id='P123'> <number>784</number> </product> return let $prod2 := <product id='P123' dept='MEN'><!--comment--> <number>784</number> </product> return (deep-equal( (1, 2), (1.0, 2.0) ))]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-deep-equal-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $prod1 := <product dept='MEN' id='P123'> <number>784</number> </product> return let $prod2 := <product id='P123' dept='MEN'><!--comment--> <number>784</number> </product> return (deep-equal( (1, 2), (2, 1) ))]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="functx-fn-deep-equal-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $prod1 := <product dept='MEN' id='P123'> <number>784</number> </product> return let $prod2 := <product id='P123' dept='MEN'><!--comment--> <number>784</number> </product> return (deep-equal( $prod1, $prod2 ))]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-deep-equal-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $prod1 := <product dept='MEN' id='P123'> <number>784</number> </product> return let $prod2 := <product id='P123' dept='MEN'><!--comment--> <number>784</number> </product> return (deep-equal( $prod1/number, $prod2/number ))]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-deep-equal-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $prod1 := <product dept='MEN' id='P123'> <number>784</number> </product> return let $prod2 := <product id='P123' dept='MEN'><!--comment--> <number>784</number> </product> return (deep-equal( 1, 1 ), deep-equal( (1, 1), (1, 1) ), deep-equal( (1, 2), (1.0, 2.0) ), deep-equal( (1, 2), (2, 1) ), deep-equal( $prod1, $prod2 ), deep-equal( $prod1/number, $prod2/number ))]]>
    </test>
    <result-string>xs:string("true true true false true true")</result-string>
    <result>
      <assert-string-value>true true true false true true</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-default-collation-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(default-collation())</test>
    <result-string>xs:string("http://www.w3.org/2005/xpath-functions/collation/codepoint")</result-string>
    <result>
      <assert-string-value>http://www.w3.org/2005/xpath-functions/collation/codepoint</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-distinct-values-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("a"),xs:string("b"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $in-xml := <in-xml> <a>3</a> <b>5</b> <b>3</b> </in-xml> return (distinct-values( ('a', 'b', 'a') ))]]>
    </test>
    <result-string>(xs:string("a"),xs:string("b"))</result-string>
    <result>
      <assert-string-value>a b</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-distinct-values-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("1"),xs:integer("2"),xs:integer("3"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $in-xml := <in-xml> <a>3</a> <b>5</b> <b>3</b> </in-xml> return (distinct-values( (1, 2, 3) ))]]>
    </test>
    <result-string>(xs:integer("1"),xs:integer("2"),xs:integer("3"))</result-string>
    <result>
      <assert-string-value>1 2 3</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-distinct-values-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("a"),xs:integer("2"),xs:integer("3"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $in-xml := <in-xml> <a>3</a> <b>5</b> <b>3</b> </in-xml> return (distinct-values( ('a', 2, 3) ))]]>
    </test>
    <result-string>(xs:string("a"),xs:integer("2"),xs:integer("3"))</result-string>
    <result>
      <assert-string-value>a 2 3</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-distinct-values-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("1")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $in-xml := <in-xml> <a>3</a> <b>5</b> <b>3</b> </in-xml> return (distinct-values( (xs:integer('1'), xs:decimal('1.0'), xs:float('1.0E0') ) ))]]>
    </test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-distinct-values-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:untypedAtomic("3"),xs:untypedAtomic("5"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $in-xml := <in-xml> <a>3</a> <b>5</b> <b>3</b> </in-xml> return (distinct-values($in-xml/*))]]>
    </test>
    <result-string>(xs:untypedAtomic("3"),xs:untypedAtomic("5"))</result-string>
    <result>
      <assert-string-value>3 5</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-distinct-values-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $in-xml := <in-xml> <a>3</a> <b>5</b> <b>3</b> </in-xml> return (distinct-values( () ))]]>
    </test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-distinct-values-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("a"),xs:string("b"),xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:string("a"),xs:integer("2"),xs:integer("3"),xs:integer("1"),xs:untypedAtomic("3"),xs:untypedAtomic("5"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $in-xml := <in-xml> <a>3</a> <b>5</b> <b>3</b> </in-xml> return (distinct-values( ('a', 'b', 'a') ), distinct-values( (1, 2, 3) ), distinct-values( ('a', 2, 3) ), distinct-values( (xs:integer('1'), xs:decimal('1.0'), xs:float('1.0E0') ) ), distinct-values($in-xml/*), distinct-values( () ))]]>
    </test>
    <result-string>(xs:string("a"),xs:string("b"),xs:integer("1"),xs:integer("2"),xs:integer("3"),xs:string("a"),xs:integer("2"),xs:integer("3"),xs:integer("1"),xs:untypedAtomic("3"),xs:untypedAtomic("5"))</result-string>
    <result>
      <assert-string-value>a b 1 2 3 a 2 3 1 3 5</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-doc-available-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_order"/>
    <test>(doc-available( document-uri(/) ))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-empty-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $in-xml := <in-xml> <a></a> <b/> <c>xyz</c> </in-xml> return (empty( ('a', 'b', 'c') ))]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="functx-fn-empty-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $in-xml := <in-xml> <a></a> <b/> <c>xyz</c> </in-xml> return (empty( () ))]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-empty-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $in-xml := <in-xml> <a></a> <b/> <c>xyz</c> </in-xml> return (empty(0))]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="functx-fn-empty-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $in-xml := <in-xml> <a></a> <b/> <c>xyz</c> </in-xml> return (empty($in-xml/a))]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="functx-fn-empty-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $in-xml := <in-xml> <a></a> <b/> <c>xyz</c> </in-xml> return (empty($in-xml/b))]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="functx-fn-empty-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $in-xml := <in-xml> <a></a> <b/> <c>xyz</c> </in-xml> return (empty($in-xml/c))]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="functx-fn-empty-7"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $in-xml := <in-xml> <a></a> <b/> <c>xyz</c> </in-xml> return (empty($in-xml/foo))]]>
    </test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-empty-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:boolean("false"),xs:boolean("true"),xs:boolean("false"),xs:boolean("false"),xs:boolean("false"),xs:boolean("false"),xs:boolean("true"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $in-xml := <in-xml> <a></a> <b/> <c>xyz</c> </in-xml> return (empty( ('a', 'b', 'c') ), empty( () ), empty(0), empty($in-xml/a), empty($in-xml/b), empty($in-xml/c), empty($in-xml/foo))]]>
    </test>
    <result-string>(xs:boolean("false"),xs:boolean("true"),xs:boolean("false"),xs:boolean("false"),xs:boolean("false"),xs:boolean("false"),xs:boolean("true"))</result-string>
    <result>
      <assert-string-value>false true false false false false true</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-encode-for-uri-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("Sales%20%25%20Numbers.pdf")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(encode-for-uri( &apos;Sales % Numbers.pdf&apos;))</test>
    <result-string>xs:string("Sales%20%25%20Numbers.pdf")</result-string>
    <result>
      <assert-string-value>Sales%20%25%20Numbers.pdf</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-encode-for-uri-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("http%3A%2F%2Fdatypic.com%2Fa%2520URI%23frag")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(encode-for-uri( &apos;http://datypic.com/a%20URI#frag&apos;))</test>
    <result-string>xs:string("http%3A%2F%2Fdatypic.com%2Fa%2520URI%23frag")</result-string>
    <result>
      <assert-string-value>http%3A%2F%2Fdatypic.com%2Fa%2520URI%23frag</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-encode-for-uri-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("Sales%20%25%20Numbers.pdf"),xs:string("http%3A%2F%2Fdatypic.com%2Fa%2520URI%23frag"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(encode-for-uri( &apos;Sales % Numbers.pdf&apos;), encode-for-uri( &apos;http://datypic.com/a%20URI#frag&apos;))</test>
    <result-string>(xs:string("Sales%20%25%20Numbers.pdf"),xs:string("http%3A%2F%2Fdatypic.com%2Fa%2520URI%23frag"))</result-string>
    <result>
      <assert-string-value>Sales%20%25%20Numbers.pdf http%3A%2F%2Fdatypic.com%2Fa%2520URI%23frag</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-ends-with-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(ends-with(&apos;query&apos;, &apos;y&apos;))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-ends-with-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(ends-with(&apos;query&apos;, &apos;query&apos;))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-ends-with-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(ends-with(&apos;query&apos;, &apos;&apos;))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-ends-with-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(ends-with(&apos;query &apos;, &apos;y&apos;))</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="functx-fn-ends-with-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(ends-with(&apos;&apos;, &apos;y&apos;))</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="functx-fn-ends-with-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:boolean("true"),xs:boolean("true"),xs:boolean("true"),xs:boolean("false"),xs:boolean("false"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(ends-with(&apos;query&apos;, &apos;y&apos;), ends-with(&apos;query&apos;, &apos;query&apos;), ends-with(&apos;query&apos;, &apos;&apos;), ends-with(&apos;query &apos;, &apos;y&apos;), ends-with(&apos;&apos;, &apos;y&apos;))</test>
    <result-string>(xs:boolean("true"),xs:boolean("true"),xs:boolean("true"),xs:boolean("false"),xs:boolean("false"))</result-string>
    <result>
      <assert-string-value>true true true false false</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-escape-html-uri-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("http://datypic.com/a%20URI#frag")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(escape-html-uri( &apos;http://datypic.com/a%20URI#frag&apos;))</test>
    <result-string>xs:string("http://datypic.com/a%20URI#frag")</result-string>
    <result>
      <assert-string-value>http://datypic.com/a%20URI#frag</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-escape-html-uri-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("http://datypic.com")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(escape-html-uri(&apos;http://datypic.com&apos;))</test>
    <result-string>xs:string("http://datypic.com")</result-string>
    <result>
      <assert-string-value>http://datypic.com</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-escape-html-uri-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("http://datypic.com/a%20URI#frag"),xs:string("http://datypic.com"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(escape-html-uri( &apos;http://datypic.com/a%20URI#frag&apos;), escape-html-uri(&apos;http://datypic.com&apos;))</test>
    <result-string>(xs:string("http://datypic.com/a%20URI#frag"),xs:string("http://datypic.com"))</result-string>
    <result>
      <assert-string-value>http://datypic.com/a%20URI#frag http://datypic.com</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-exactly-one-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("a")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(exactly-one(&apos;a&apos;))</test>
    <result-string>xs:string("a")</result-string>
    <result>
      <assert-string-value>a</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-exists-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(exists( (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;) ))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-exists-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(exists( &apos;&apos; ))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-exists-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(exists( () ))</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="functx-fn-exists-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(exists( false() ))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-exists-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:boolean("true"),xs:boolean("true"),xs:boolean("false"),xs:boolean("true"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(exists( (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;) ), exists( &apos;&apos; ), exists( () ), exists( false() ))</test>
    <result-string>(xs:boolean("true"),xs:boolean("true"),xs:boolean("false"),xs:boolean("true"))</result-string>
    <result>
      <assert-string-value>true true false true</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-false-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(false())</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="functx-fn-floor-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("5")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(floor(5))</test>
    <result-string>xs:integer("5")</result-string>
    <result>
      <assert-eq>5</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-floor-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("5")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(floor(5.1))</test>
    <result-string>xs:integer("5")</result-string>
    <result>
      <assert-eq>5</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-floor-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("5")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(floor(5.7))</test>
    <result-string>xs:integer("5")</result-string>
    <result>
      <assert-eq>5</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-floor-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("-6")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(floor(-5.1))</test>
    <result-string>xs:integer("-6")</result-string>
    <result>
      <assert-eq>-6</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-floor-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("-6")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(floor(-5.7))</test>
    <result-string>xs:integer("-6")</result-string>
    <result>
      <assert-eq>-6</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-floor-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(floor( () ))</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-floor-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("5"),xs:integer("5"),xs:integer("5"),xs:integer("-6"),xs:integer("-6"),xs:integer("0"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(floor(5), floor(5.1), floor(5.7), floor(-5.1), floor(-5.7), floor( () ))</test>
    <result-string>xs:string("5 5 5 -6 -6")</result-string>
    <result>
      <assert-string-value>5 5 5 -6 -6</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-hours-from-dateTime-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("10")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(hours-from-dateTime( xs:dateTime(&apos;2006-08-15T10:30:23&apos;)))</test>
    <result-string>xs:integer("10")</result-string>
    <result>
      <assert-eq>10</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-hours-from-dateTime-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("10")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(hours-from-dateTime( xs:dateTime(&apos;2006-08-15T10:30:23-05:00&apos;)))</test>
    <result-string>xs:integer("10")</result-string>
    <result>
      <assert-eq>10</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-hours-from-dateTime-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("10"),xs:integer("10"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(hours-from-dateTime( xs:dateTime(&apos;2006-08-15T10:30:23&apos;)), hours-from-dateTime( xs:dateTime(&apos;2006-08-15T10:30:23-05:00&apos;)))</test>
    <result-string>(xs:integer("10"),xs:integer("10"))</result-string>
    <result>
      <assert-string-value>10 10</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-hours-from-duration-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("5")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(hours-from-duration( xs:dayTimeDuration(&apos;P1DT5H&apos;)))</test>
    <result-string>xs:integer("5")</result-string>
    <result>
      <assert-eq>5</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-hours-from-duration-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("-12")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(hours-from-duration( xs:dayTimeDuration(&apos;-PT36H&apos;)))</test>
    <result-string>xs:integer("-12")</result-string>
    <result>
      <assert-eq>-12</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-hours-from-duration-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("2")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(hours-from-duration( xs:dayTimeDuration(&apos;PT1H90M&apos;)))</test>
    <result-string>xs:integer("2")</result-string>
    <result>
      <assert-eq>2</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-hours-from-duration-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("2")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(hours-from-duration( xs:dayTimeDuration(&apos;PT2H59M&apos;)))</test>
    <result-string>xs:integer("2")</result-string>
    <result>
      <assert-eq>2</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-hours-from-duration-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("1")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(hours-from-duration( xs:dayTimeDuration(&apos;PT3600S&apos;)))</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-hours-from-duration-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("5"),xs:integer("-12"),xs:integer("2"),xs:integer("2"),xs:integer("1"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(hours-from-duration( xs:dayTimeDuration(&apos;P1DT5H&apos;)), hours-from-duration( xs:dayTimeDuration(&apos;-PT36H&apos;)), hours-from-duration( xs:dayTimeDuration(&apos;PT1H90M&apos;)), hours-from-duration( xs:dayTimeDuration(&apos;PT2H59M&apos;)), hours-from-duration( xs:dayTimeDuration(&apos;PT3600S&apos;)))</test>
    <result-string>(xs:integer("5"),xs:integer("-12"),xs:integer("2"),xs:integer("2"),xs:integer("1"))</result-string>
    <result>
      <assert-string-value>5 -12 2 2 1</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-hours-from-time-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("10")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(hours-from-time( xs:time(&apos;10:30:23&apos;)))</test>
    <result-string>xs:integer("10")</result-string>
    <result>
      <assert-eq>10</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-hours-from-time-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("10")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(hours-from-time( xs:time(&apos;10:30:23-05:00&apos;)))</test>
    <result-string>xs:integer("10")</result-string>
    <result>
      <assert-eq>10</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-hours-from-time-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("10"),xs:integer("10"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(hours-from-time( xs:time(&apos;10:30:23&apos;)), hours-from-time( xs:time(&apos;10:30:23-05:00&apos;)))</test>
    <result-string>(xs:integer("10"),xs:integer("10"))</result-string>
    <result>
      <assert-string-value>10 10</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-index-of-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("1")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(index-of( (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;), &apos;a&apos;))</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-index-of-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(index-of( (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;), &apos;d&apos;))</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-index-of-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("1"),xs:integer("4"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(index-of( (4, 5, 6, 4), 4))</test>
    <result-string>(xs:integer("1"),xs:integer("4"))</result-string>
    <result>
      <assert-string-value>1 4</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-index-of-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(index-of( (4, 5, 6, 4), 04.0))</test>
    <result-string>xs:string("1 4")</result-string>
    <result>
      <assert-string-value>1 4</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-index-of-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("1")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(index-of( (&apos;a&apos;, 5, 6), &apos;a&apos;))</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-index-of-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(index-of( (), &apos;a&apos;))</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-index-of-7"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("1"),xs:integer("2"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(index-of( (<a>1</a>, <b>1</b>), <c>1</c> ))]]>
    </test>
    <result-string>(xs:integer("1"),xs:integer("2"))</result-string>
    <result>
      <assert-string-value>1 2</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-index-of-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("1"),xs:integer("1"),xs:integer("4"),xs:integer("1"),xs:integer("1"),xs:integer("2"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(index-of( ('a', 'b', 'c'), 'a'), index-of( ('a', 'b', 'c'), 'd'), index-of( (4, 5, 6, 4), 4), index-of( (4, 5, 6, 4), 04.0), index-of( ('a', 5, 6), 'a'), index-of( (), 'a'), index-of( (<a>1</a>, <b>1</b>), <c>1</c> ))]]>
    </test>
    <result-string>xs:string("1 1 4 1 4 1 1 2")</result-string>
    <result>
      <assert-string-value>1 1 4 1 4 1 1 2</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-insert-before-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(insert-before( (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;), 1, (&apos;x&apos;, &apos;y&apos;)))</test>
    <result-string>xs:string("x y a b c")</result-string>
    <result>
      <assert-string-value>x y a b c</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-insert-before-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(insert-before( (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;), 2, (&apos;x&apos;, &apos;y&apos;)))</test>
    <result-string>xs:string("a x y b c")</result-string>
    <result>
      <assert-string-value>a x y b c</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-insert-before-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(insert-before( (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;), 10, (&apos;x&apos;, &apos;y&apos;)))</test>
    <result-string>xs:string("a b c x y")</result-string>
    <result>
      <assert-string-value>a b c x y</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-insert-before-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(insert-before( (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;), 0, (&apos;x&apos;, &apos;y&apos;)))</test>
    <result-string>xs:string("x y a b c")</result-string>
    <result>
      <assert-string-value>x y a b c</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-insert-before-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("a"),xs:string("b"),xs:string("c"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(insert-before( (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;), 2, ()))</test>
    <result-string>xs:string("a b c")</result-string>
    <result>
      <assert-string-value>a b c</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-insert-before-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(insert-before( (), 3, (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;) ))</test>
    <result-string>xs:string("a b c")</result-string>
    <result>
      <assert-string-value>a b c</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-insert-before-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(insert-before( (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;), 1, (&apos;x&apos;, &apos;y&apos;)), insert-before( (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;), 2, (&apos;x&apos;, &apos;y&apos;)), insert-before( (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;), 10, (&apos;x&apos;, &apos;y&apos;)), insert-before( (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;), 0, (&apos;x&apos;, &apos;y&apos;)), insert-before( (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;), 2, ()), insert-before( (), 3, (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;) ))</test>
    <result-string>xs:string("x y a b c a x y b c a b c x y x y a b c a b c a b c")</result-string>
    <result>
      <assert-string-value>x y a b c a x y b c a b c x y x y a b c a b c a b c</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-iri-to-uri-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("http://datypic.com/Sales%20Numbers.pdf")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(iri-to-uri( &apos;http://datypic.com/Sales Numbers.pdf&apos;))</test>
    <result-string>xs:string("http://datypic.com/Sales%20Numbers.pdf")</result-string>
    <result>
      <assert-string-value>http://datypic.com/Sales%20Numbers.pdf</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-lang-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $in-xml := <desclist xml:lang="en"> <desc xml:lang="en-US"> <line>A line of text.</line> </desc> <desc xml:lang="fr"> <line>Une ligne de texte.</line> </desc> </desclist> return ($in-xml// desc[lang('en')])]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<desc xml:lang="en-US"><line>A line of text.</line></desc>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="functx-fn-lang-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $in-xml := <desclist xml:lang="en"> <desc xml:lang="en-US"> <line>A line of text.</line> </desc> <desc xml:lang="fr"> <line>Une ligne de texte.</line> </desc> </desclist> return ($in-xml// desc[lang('en-US')])]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<desc xml:lang="en-US"><line>A line of text.</line></desc>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="functx-fn-lang-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $in-xml := <desclist xml:lang="en"> <desc xml:lang="en-US"> <line>A line of text.</line> </desc> <desc xml:lang="fr"> <line>Une ligne de texte.</line> </desc> </desclist> return ($in-xml// desc[lang('fr')])]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<desc xml:lang="fr"><line>Une ligne de texte.</line></desc>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="functx-fn-lang-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $in-xml := <desclist xml:lang="en"> <desc xml:lang="en-US"> <line>A line of text.</line> </desc> <desc xml:lang="fr"> <line>Une ligne de texte.</line> </desc> </desclist> return ($in-xml// desc/line[lang('en')])]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<line>A line of text.</line>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="functx-fn-lang-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $in-xml := <desclist xml:lang="en"> <desc xml:lang="en-US"> <line>A line of text.</line> </desc> <desc xml:lang="fr"> <line>Une ligne de texte.</line> </desc> </desclist> return ($in-xml[lang('en-US')])]]>
    </test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-lang-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $in-xml := <desclist xml:lang="en"> <desc xml:lang="en-US"> <line>A line of text.</line> </desc> <desc xml:lang="fr"> <line>Une ligne de texte.</line> </desc> </desclist> return ($in-xml// desc[lang('FR')])]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<desc xml:lang="fr"><line>Une ligne de texte.</line></desc>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="functx-fn-lang-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $in-xml := <desclist xml:lang="en"> <desc xml:lang="en-US"> <line>A line of text.</line> </desc> <desc xml:lang="fr"> <line>Une ligne de texte.</line> </desc> </desclist> return ($in-xml// desc[lang('en')], $in-xml// desc[lang('en-US')], $in-xml// desc[lang('fr')], $in-xml// desc/line[lang('en')], $in-xml[lang('en-US')], $in-xml// desc[lang('FR')])]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<desc xml:lang="en-US"><line>A line of text.</line></desc><desc xml:lang="en-US"><line>A line of text.</line></desc><desc xml:lang="fr"><line>Une ligne de texte.</line></desc><line>A line of text.</line><desc xml:lang="fr"><line>Une ligne de texte.</line></desc>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="functx-fn-last-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;product dept="MEN"&gt;&amp;#10;  &lt;number&gt;784&lt;/number&gt;&amp;#10;  &lt;name language="en"&gt;Cotton Dress Shirt&lt;/name&gt;&amp;#10;  &lt;colorChoices&gt;white gray&lt;/colorChoices&gt;&amp;#10;  &lt;desc&gt;Our &lt;i&gt;favorite&lt;/i&gt; shirt!&lt;/desc&gt;&amp;#10; &lt;/product&gt;</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_catalog"/>
    <test>(/ catalog/product[last()])</test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<product dept="MEN">
  <number>784</number>
  <name language="en">Cotton Dress Shirt</name>
  <colorChoices>white gray</colorChoices>
  <desc>Our <i>favorite</i> shirt!</desc>
 </product>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="functx-fn-local-name-from-QName-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(local-name-from-QName( QName(&apos;http://datypic.com/prod&apos;, &apos;number&apos;)))</test>
    <result-string>xs:string("number")</result-string>
    <result>
      <assert-string-value>number</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-local-name-from-QName-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(local-name-from-QName(QName (&apos;&apos;, &apos;number&apos;)))</test>
    <result-string>xs:string("number")</result-string>
    <result>
      <assert-string-value>number</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-local-name-from-QName-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(local-name-from-QName( () ))</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-local-name-from-QName-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(local-name-from-QName( QName(&apos;http://datypic.com/prod&apos;, &apos;number&apos;)), local-name-from-QName(QName (&apos;&apos;, &apos;number&apos;)), local-name-from-QName( () ))</test>
    <result-string>xs:string("number number")</result-string>
    <result>
      <assert-string-value>number number</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-local-name-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("noNamespace")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace pre = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (local-name($in-xml))]]>
    </test>
    <result-string>xs:string("noNamespace")</result-string>
    <result>
      <assert-string-value>noNamespace</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-local-name-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("prefixed")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace pre = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (local-name($in-xml//pre:prefixed))]]>
    </test>
    <result-string>xs:string("prefixed")</result-string>
    <result>
      <assert-string-value>prefixed</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-local-name-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace pre = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (local-name($in-xml//unpre:unprefixed))]]>
    </test>
    <result-string>xs:string("unprefixed")</result-string>
    <result>
      <assert-string-value>unprefixed</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-local-name-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace pre = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (local-name($in-xml//@pre:prefAttr))]]>
    </test>
    <result-string>xs:string("prefAttr")</result-string>
    <result>
      <assert-string-value>prefAttr</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-local-name-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("noNSAttr")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace pre = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (local-name($in-xml//@noNSAttr))]]>
    </test>
    <result-string>xs:string("noNSAttr")</result-string>
    <result>
      <assert-string-value>noNSAttr</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-local-name-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("noNamespace"),xs:string("prefixed"),xs:string("noNSAttr"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace pre = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (local-name($in-xml), local-name($in-xml//pre:prefixed), local-name($in-xml//unpre:unprefixed), local-name($in-xml//@pre:prefAttr), local-name($in-xml//@noNSAttr))]]>
    </test>
    <result-string>xs:string("noNamespace prefixed unprefixed prefAttr noNSAttr")</result-string>
    <result>
      <assert-string-value>noNamespace prefixed unprefixed prefAttr noNSAttr</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-lower-case-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("query")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(lower-case(&apos;QUERY&apos;))</test>
    <result-string>xs:string("query")</result-string>
    <result>
      <assert-string-value>query</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-lower-case-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("query")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(lower-case(&apos;Query&apos;))</test>
    <result-string>xs:string("query")</result-string>
    <result>
      <assert-string-value>query</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-lower-case-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("query123")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(lower-case(&apos;QUERY123&apos;))</test>
    <result-string>xs:string("query123")</result-string>
    <result>
      <assert-string-value>query123</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-lower-case-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("query"),xs:string("query"),xs:string("query123"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(lower-case(&apos;QUERY&apos;), lower-case(&apos;Query&apos;), lower-case(&apos;QUERY123&apos;))</test>
    <result-string>(xs:string("query"),xs:string("query"),xs:string("query123"))</result-string>
    <result>
      <assert-string-value>query query query123</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-matches-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $address := &apos;123 Main Street Traverse City, MI 49684&apos; return (matches(&apos;query&apos;, &apos;q&apos;))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-matches-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $address := &apos;123 Main Street Traverse City, MI 49684&apos; return (matches(&apos;query&apos;, &apos;ue&apos;))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-matches-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $address := &apos;123 Main Street Traverse City, MI 49684&apos; return (matches(&apos;query&apos;, &apos;^qu&apos;))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-matches-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $address := &apos;123 Main Street Traverse City, MI 49684&apos; return (matches(&apos;query&apos;, &apos;qu$&apos;))</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="functx-fn-matches-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $address := &apos;123 Main Street Traverse City, MI 49684&apos; return (matches(&apos;query&apos;, &apos;[ux]&apos;))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-matches-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $address := &apos;123 Main Street Traverse City, MI 49684&apos; return (matches(&apos;query&apos;, &apos;q.*&apos;))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-matches-7"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $address := &apos;123 Main Street Traverse City, MI 49684&apos; return (matches(&apos;query&apos;, &apos;[a-z]{5}&apos;))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-matches-8"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $address := &apos;123 Main Street Traverse City, MI 49684&apos; return (matches((), &apos;q&apos; ))</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="functx-fn-matches-9"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $address := &apos;123 Main StreetTraverse City, MI 49684&apos; return (matches($address, &apos;Street.*City&apos;))</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="functx-fn-matches-10"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $address := &apos;123 Main Street Traverse City, MI 49684&apos; return (matches($address, &apos;Street.*City&apos;, &apos;s&apos;))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-matches-11"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $address := &apos;123 Main StreetTraverse City, MI 49684&apos; return (matches($address, &apos;Street$&apos;))</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="functx-fn-matches-12"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $address := &apos;123 Main StreetTraverse City, MI 49684&apos; return (matches($address, &apos;Street$&apos;, &apos;m&apos;))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-matches-13"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $address := &apos;123 Main StreetTraverse City, MI 49684&apos; return (matches($address, &apos;street&apos;))</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="functx-fn-matches-14"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $address := &apos;123 Main StreetTraverse City, MI 49684&apos; return (matches($address, &apos;street&apos;, &apos;i&apos;))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-matches-15"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $address := &apos;123 Main StreetTraverse City, MI 49684&apos; return (matches($address, &apos;Main Street&apos;))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-matches-16"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $address := &apos;123 Main StreetTraverse City, MI 49684&apos; return (matches($address, &apos;Main Street&apos;, &apos;x&apos;))</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="functx-fn-matches-17"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $address := &apos;123 Main StreetTraverse City, MI 49684&apos; return (matches($address, &apos;Main \s Street&apos;, &apos;x&apos;))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-matches-18"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $address := &apos;123 Main StreetTraverse City, MI 49684&apos; return (matches($address, &apos;street$&apos;, &apos;im&apos;))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-matches-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:boolean("true"),xs:boolean("true"),xs:boolean("true"),xs:boolean("false"),xs:boolean("true"),xs:boolean("true"),xs:boolean("true"),xs:boolean("false"),xs:boolean("true"),xs:boolean("true"),xs:boolean("false"),xs:boolean("false"),xs:boolean("false"),xs:boolean("true"),xs:boolean("true"),xs:boolean("false"),xs:boolean("false"),xs:boolean("false"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>
        let $address := &apos;123 Main StreetTraverse City, MI 49684&apos; 
        return (matches(&apos;query&apos;, &apos;q&apos;), matches(&apos;query&apos;, &apos;ue&apos;), matches(&apos;query&apos;, &apos;^qu&apos;), 
            matches(&apos;query&apos;, &apos;qu$&apos;), matches(&apos;query&apos;, &apos;[ux]&apos;), matches(&apos;query&apos;, &apos;q.*&apos;), 
            matches(&apos;query&apos;, &apos;[a-z]{5}&apos;), matches((), &apos;q&apos; ), matches($address, &apos;Street.*City&apos;), 
            matches($address, &apos;Street.*City&apos;, &apos;s&apos;), matches($address, &apos;Street$&apos;), 
            matches($address, &apos;Street$&apos;, &apos;m&apos;), matches($address, &apos;street&apos;), 
            matches($address, &apos;street&apos;, &apos;i&apos;), matches($address, &apos;Main Street&apos;), 
            matches($address, &apos;Main Street&apos;, &apos;x&apos;), matches($address, &apos;Main \s Street&apos;, &apos;x&apos;), 
            matches($address, &apos;street$&apos;, &apos;im&apos;))</test>
    <result-string>xs:string("true true true false true true true false false true false true false true true false true true")</result-string>
    <result>
      <assert-string-value>true true true false true true true false false true false true false true true false true true</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-max-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("5")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_order"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $ordDoc := (/) return (max( (2, 1, 5, 4, 3) ))</test>
    <result-string>xs:integer("5")</result-string>
    <result>
      <assert-eq>5</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-max-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("c")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_order"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $ordDoc := (/) return (max( (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;) ))</test>
    <result-string>xs:string("c")</result-string>
    <result>
      <assert-string-value>c</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-max-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("2")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_order"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $ordDoc := (/) return (max( 2 ))</test>
    <result-string>xs:integer("2")</result-string>
    <result>
      <assert-eq>2</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-max-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("WMN")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_order"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $ordDoc := (/) return (max($ordDoc//item/string(@dept)))</test>
    <result-string>xs:string("WMN")</result-string>
    <result>
      <assert-string-value>WMN</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-max-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("5"),xs:string("c"),xs:integer("2"),xs:string("WMN"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_order"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $ordDoc := (/) return (max( (2, 1, 5, 4, 3) ), max( (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;) ), max( 2 ), max($ordDoc//item/string(@dept)))</test>
    <result-string>(xs:integer("5"),xs:string("c"),xs:integer("2"),xs:string("WMN"))</result-string>
    <result>
      <assert-string-value>5 c 2 WMN</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-min-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("1")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_order"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $ordDoc := (/) return (min( (2.0, 1, 3.5, 4) ))</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-min-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("a")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_order"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $ordDoc := (/) return (min( (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;) ))</test>
    <result-string>xs:string("a")</result-string>
    <result>
      <assert-string-value>a</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-min-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("blue/red")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_order"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $ordDoc := (/) return (min($ordDoc//item//string(@color)))</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-min-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("beige")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_order"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $ordDoc := (/) return (min($ordDoc//item/@color/string(.)))</test>
    <result-string>xs:string("beige")</result-string>
    <result>
      <assert-string-value>beige</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-min-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("1"),xs:string("a"),xs:string("blue/red"),xs:string("beige"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_order"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $ordDoc := (/) return (min( (2.0, 1, 3.5, 4) ), min( (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;) ), min($ordDoc//item//string(@color)), min($ordDoc//item/@color/string(.)))</test>
    <result-string>xs:string("1 a  beige")</result-string>
    <result>
      <assert-string-value>1 a  beige</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-minutes-from-dateTime-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("30")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(minutes-from-dateTime( xs:dateTime(&apos;2006-08-15T10:30:23&apos;)))</test>
    <result-string>xs:integer("30")</result-string>
    <result>
      <assert-eq>30</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-minutes-from-duration-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("30")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(minutes-from-duration( xs:dayTimeDuration(&apos;PT30M&apos;)))</test>
    <result-string>xs:integer("30")</result-string>
    <result>
      <assert-eq>30</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-minutes-from-duration-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("-30")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(minutes-from-duration( xs:dayTimeDuration(&apos;-PT90M&apos;)))</test>
    <result-string>xs:integer("-30")</result-string>
    <result>
      <assert-eq>-30</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-minutes-from-duration-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("2")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(minutes-from-duration( xs:dayTimeDuration(&apos;PT1M90S&apos;)))</test>
    <result-string>xs:integer("2")</result-string>
    <result>
      <assert-eq>2</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-minutes-from-duration-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(minutes-from-duration( xs:dayTimeDuration(&apos;PT3H&apos;)))</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-minutes-from-duration-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(minutes-from-duration( xs:dayTimeDuration(&apos;PT60M&apos;)))</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-minutes-from-duration-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("30"),xs:integer("-30"),xs:integer("2"),xs:integer("0"),xs:integer("0"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(minutes-from-duration( xs:dayTimeDuration(&apos;PT30M&apos;)), minutes-from-duration( xs:dayTimeDuration(&apos;-PT90M&apos;)), minutes-from-duration( xs:dayTimeDuration(&apos;PT1M90S&apos;)), minutes-from-duration( xs:dayTimeDuration(&apos;PT3H&apos;)), minutes-from-duration( xs:dayTimeDuration(&apos;PT60M&apos;)))</test>
    <result-string>(xs:integer("30"),xs:integer("-30"),xs:integer("2"),xs:integer("0"),xs:integer("0"))</result-string>
    <result>
      <assert-string-value>30 -30 2 0 0</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-minutes-from-time-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("30")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(minutes-from-time(xs:time(&apos;10:30:23&apos;)))</test>
    <result-string>xs:integer("30")</result-string>
    <result>
      <assert-eq>30</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-month-from-date-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("8")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(month-from-date(xs:date(&apos;2006-08-15&apos;)))</test>
    <result-string>xs:integer("8")</result-string>
    <result>
      <assert-eq>8</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-month-from-dateTime-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("8")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(month-from-dateTime( xs:dateTime(&apos;2006-08-15T10:30:23&apos;)))</test>
    <result-string>xs:integer("8")</result-string>
    <result>
      <assert-eq>8</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-months-from-duration-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("3")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(months-from-duration( xs:yearMonthDuration(&apos;P3M&apos;)))</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-months-from-duration-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("-6")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(months-from-duration( xs:yearMonthDuration(&apos;-P18M&apos;)))</test>
    <result-string>xs:integer("-6")</result-string>
    <result>
      <assert-eq>-6</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-months-from-duration-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(months-from-duration( xs:yearMonthDuration(&apos;P1Y&apos;)))</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-months-from-duration-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(months-from-duration( xs:yearMonthDuration(&apos;P12M&apos;)))</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-months-from-duration-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("3"),xs:integer("-6"),xs:integer("0"),xs:integer("0"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(months-from-duration( xs:yearMonthDuration(&apos;P3M&apos;)), months-from-duration( xs:yearMonthDuration(&apos;-P18M&apos;)), months-from-duration( xs:yearMonthDuration(&apos;P1Y&apos;)), months-from-duration( xs:yearMonthDuration(&apos;P12M&apos;)))</test>
    <result-string>(xs:integer("3"),xs:integer("-6"),xs:integer("0"),xs:integer("0"))</result-string>
    <result>
      <assert-string-value>3 -6 0 0</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-name-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("noNamespace")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace pre2 = "http://datypic.com/pre";
         declare namespace unpre2 = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (name($in-xml))]]>
    </test>
    <result-string>xs:string("noNamespace")</result-string>
    <result>
      <assert-string-value>noNamespace</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-name-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("pre:prefixed")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace pre2 = "http://datypic.com/pre";
         declare namespace unpre2 = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (name($in-xml//pre2:prefixed))]]>
    </test>
    <result-string>xs:string("pre:prefixed")</result-string>
    <result>
      <assert-string-value>pre:prefixed</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-name-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("#sequence")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace pre2 = "http://datypic.com/pre";
         declare namespace unpre2 = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (name($in-xml//unpre2:unprefixed))]]>
    </test>
    <result-string>xs:string("unprefixed")</result-string>
    <result>
      <assert-string-value>unprefixed</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-name-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("#sequence")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace pre2 = "http://datypic.com/pre";
         declare namespace unpre2 = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (name($in-xml//@pre2:prefAttr))]]>
    </test>
    <result-string>xs:string("pre:prefAttr")</result-string>
    <result>
      <assert-string-value>pre:prefAttr</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-name-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("noNSAttr")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace pre2 = "http://datypic.com/pre";
         declare namespace unpre2 = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (name($in-xml//@noNSAttr))]]>
    </test>
    <result-string>xs:string("noNSAttr")</result-string>
    <result>
      <assert-string-value>noNSAttr</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-name-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("noNamespace"),xs:string("pre:prefixed"),xs:string("#sequence"),xs:string("#sequence"),xs:string("noNSAttr"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace pre2 = "http://datypic.com/pre";
         declare namespace unpre2 = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (name($in-xml), name($in-xml//pre2:prefixed), name($in-xml//unpre2:unprefixed), name($in-xml//@pre2:prefAttr), name($in-xml//@noNSAttr))]]>
    </test>
    <result-string>xs:string("noNamespace pre:prefixed unprefixed pre:prefAttr noNSAttr")</result-string>
    <result>
      <assert-string-value>noNamespace pre:prefixed unprefixed pre:prefAttr noNSAttr</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-namespace-uri-for-prefix-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace pre = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (namespace-uri-for-prefix( '', $in-xml))]]>
    </test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-namespace-uri-for-prefix-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace pre = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (namespace-uri-for-prefix( 'pre',$in-xml//pre:prefixed))]]>
    </test>
    <result-string>xs:string("http://datypic.com/pre")</result-string>
    <result>
      <assert-string-value>http://datypic.com/pre</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-namespace-uri-for-prefix-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace pre = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (namespace-uri-for-prefix( '',$in-xml//unpre:unprefixed))]]>
    </test>
    <result-string>xs:string("http://datypic.com/unpre")</result-string>
    <result>
      <assert-string-value>http://datypic.com/unpre</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-namespace-uri-for-prefix-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace pre = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (namespace-uri-for-prefix( 'pre',$in-xml//unpre:unprefixed))]]>
    </test>
    <result-string>xs:string("http://datypic.com/pre")</result-string>
    <result>
      <assert-string-value>http://datypic.com/pre</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-namespace-uri-for-prefix-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <modified by="O&apos;Neil Delpratt" change="return was not consistent with it&apos;s equivalent XQTS test-case" on="2011-10-07"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace pre = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := 
         <noNamespace> 
            <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> 
                <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> 
            </pre:prefixed> 
        </noNamespace> 
        return (namespace-uri-for-prefix('', $in-xml),
                namespace-uri-for-prefix('pre',$in-xml//pre:prefixed),
                namespace-uri-for-prefix('',$in-xml//unpre:unprefixed),
                namespace-uri-for-prefix('pre',$in-xml//unpre:unprefixed))
      ]]>
    </test>
    <result-string>xs:string("http://datypic.com/pre http://datypic.com/unpre http://datypic.com/pre")</result-string>
    <result>
      <assert-string-value>http://datypic.com/pre http://datypic.com/unpre http://datypic.com/pre</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-namespace-uri-from-QName-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(namespace-uri-from-QName( QName (&apos;http://datypic.com/pre&apos;, &apos;prefixed&apos;)))</test>
    <result-string>xs:string("http://datypic.com/pre")</result-string>
    <result>
      <assert-string-value>http://datypic.com/pre</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-namespace-uri-from-QName-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(namespace-uri-from-QName( QName (&apos;&apos;, &apos;unprefixed&apos;)))</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-namespace-uri-from-QName-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(namespace-uri-from-QName( () ))</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-namespace-uri-from-QName-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(namespace-uri-from-QName( QName (&apos;http://datypic.com/pre&apos;, &apos;prefixed&apos;)), namespace-uri-from-QName( QName (&apos;&apos;, &apos;unprefixed&apos;)), namespace-uri-from-QName( () ))</test>
    <result-string>xs:string("http://datypic.com/pre ")</result-string>
    <result>
      <assert-string-value>http://datypic.com/pre </assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-namespace-uri-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace pre = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (namespace-uri($in-xml))]]>
    </test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-namespace-uri-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("http://datypic.com/pre")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace pre = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (namespace-uri($in-xml//pre:prefixed))]]>
    </test>
    <result-string>xs:string("http://datypic.com/pre")</result-string>
    <result>
      <assert-string-value>http://datypic.com/pre</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-namespace-uri-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace pre = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (namespace-uri($in-xml//unpre:unprefixed))]]>
    </test>
    <result-string>xs:string("http://datypic.com/unpre")</result-string>
    <result>
      <assert-string-value>http://datypic.com/unpre</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-namespace-uri-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace pre = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (namespace-uri($in-xml//@pre:prefAttr))]]>
    </test>
    <result-string>xs:string("http://datypic.com/pre")</result-string>
    <result>
      <assert-string-value>http://datypic.com/pre</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-namespace-uri-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace pre = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (namespace-uri($in-xml//@noNSAttr))]]>
    </test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-namespace-uri-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:anyURI("http://datypic.com/pre")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace pre = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (namespace-uri($in-xml), namespace-uri($in-xml//pre:prefixed), namespace-uri($in-xml//unpre:unprefixed), namespace-uri($in-xml//@pre:prefAttr), namespace-uri($in-xml//@noNSAttr))]]>
    </test>
    <result-string>xs:string(" http://datypic.com/pre http://datypic.com/unpre http://datypic.com/pre ")</result-string>
    <result>
      <assert-string-value> http://datypic.com/pre http://datypic.com/unpre http://datypic.com/pre </assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-nilled-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $in-xml := <root xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> <child>12</child> <child xsi:nil="true"></child> <child></child> <child/> <child xsi:nil="false"></child> </root> return (nilled($in-xml//child[1]))]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="functx-fn-nilled-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $in-xml := <root xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> <child>12</child> <child xsi:nil="true"></child> <child></child> <child/> <child xsi:nil="false"></child> </root> return (nilled($in-xml//child[3]))]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="functx-fn-nilled-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $in-xml := <root xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> <child>12</child> <child xsi:nil="true"></child> <child></child> <child/> <child xsi:nil="false"></child> </root> return (nilled($in-xml//child[4]))]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="functx-fn-nilled-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $in-xml := <root xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> <child>12</child> <child xsi:nil="true"></child> <child></child> <child/> <child xsi:nil="false"></child> </root> return (nilled($in-xml//child[5]))]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="functx-fn-nilled-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:boolean("false"),xs:boolean("false"),xs:boolean("false"),xs:boolean("false"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $in-xml := <root xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"> <child>12</child> <child xsi:nil="true"></child> <child></child> <child/> <child xsi:nil="false"></child> </root> return (nilled($in-xml//child[1]), nilled($in-xml//child[3]), nilled($in-xml//child[4]), nilled($in-xml//child[5]))]]>
    </test>
    <result-string>(xs:boolean("false"),xs:boolean("false"),xs:boolean("false"),xs:boolean("false"))</result-string>
    <result>
      <assert-string-value>false false false false</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-node-name-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("noNamespace")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace pre2 = "http://datypic.com/pre";
         declare namespace unpre2 = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (node-name($in-xml))]]>
    </test>
    <result-string>xs:string("noNamespace")</result-string>
    <result>
      <assert-string-value>noNamespace</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-node-name-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("pre:prefixed")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace pre2 = "http://datypic.com/pre";
         declare namespace unpre2 = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (node-name($in-xml/pre2:prefixed))]]>
    </test>
    <result-string>xs:string("pre:prefixed")</result-string>
    <result>
      <assert-string-value>pre:prefixed</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-node-name-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace pre2 = "http://datypic.com/pre";
         declare namespace unpre2 = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (node-name($in-xml//unpre2:unprefixed))]]>
    </test>
    <result-string>xs:string("unprefixed")</result-string>
    <result>
      <assert-string-value>unprefixed</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-node-name-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace pre2 = "http://datypic.com/pre";
         declare namespace unpre2 = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (node-name($in-xml//@pre2:prefAttr))]]>
    </test>
    <result-string>xs:string("pre:prefAttr")</result-string>
    <result>
      <assert-string-value>pre:prefAttr</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-node-name-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("noNSAttr")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace pre2 = "http://datypic.com/pre";
         declare namespace unpre2 = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (node-name($in-xml//@noNSAttr))]]>
    </test>
    <result-string>xs:string("noNSAttr")</result-string>
    <result>
      <assert-string-value>noNSAttr</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-node-name-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("noNamespace"),xs:string("pre:prefixed"),xs:string("noNSAttr"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace pre2 = "http://datypic.com/pre";
         declare namespace unpre2 = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (node-name($in-xml), node-name($in-xml/pre2:prefixed), node-name($in-xml//unpre2:unprefixed), node-name($in-xml//@pre2:prefAttr), node-name($in-xml//@noNSAttr))]]>
    </test>
    <result-string>xs:string("noNamespace pre:prefixed unprefixed pre:prefAttr noNSAttr")</result-string>
    <result>
      <assert-string-value>noNamespace pre:prefixed unprefixed pre:prefAttr noNSAttr</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-normalize-space-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("query")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(normalize-space(&apos;query&apos;))</test>
    <result-string>xs:string("query")</result-string>
    <result>
      <assert-string-value>query</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-normalize-space-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("query")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(normalize-space(&apos; query &apos;))</test>
    <result-string>xs:string("query")</result-string>
    <result>
      <assert-string-value>query</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-normalize-space-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("xml query")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(normalize-space(&apos;xml query&apos;))</test>
    <result-string>xs:string("xml query")</result-string>
    <result>
      <assert-string-value>xml query</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-normalize-space-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("xml query")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(normalize-space(&apos;xml query&apos;))</test>
    <result-string>xs:string("xml query")</result-string>
    <result>
      <assert-string-value>xml query</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-normalize-space-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("xml query")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(normalize-space(&apos;xml query&apos;))</test>
    <result-string>xs:string("xml query")</result-string>
    <result>
      <assert-string-value>xml query</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-normalize-space-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(normalize-space(&apos;&apos;))</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-normalize-space-7"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(normalize-space(&apos; &apos;))</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-normalize-space-8"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(normalize-space(()))</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-normalize-space-9"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("query")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(normalize-space( <element> query </element>))]]>
    </test>
    <result-string>xs:string("query")</result-string>
    <result>
      <assert-string-value>query</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-normalize-space-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("query"),xs:string("query"),xs:string("xml query"),xs:string("xml query"),xs:string("xml query"),xs:string(""),xs:string(""),xs:string(""),xs:string("query"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(normalize-space('query'), normalize-space(' query '), normalize-space('xml query'), normalize-space('xml query'), normalize-space('xml query'), normalize-space(''), normalize-space(' '), normalize-space(()), normalize-space( <element> query </element>))]]>
    </test>
    <result-string>xs:string("query query xml query xml query xml query    query")</result-string>
    <result>
      <assert-string-value>query query xml query xml query xml query    query</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-normalize-unicode-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("query")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(normalize-unicode(&apos;query&apos;))</test>
    <result-string>xs:string("query")</result-string>
    <result>
      <assert-string-value>query</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-normalize-unicode-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("query")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(normalize-unicode(&apos;query&apos;, &apos;&apos;))</test>
    <result-string>xs:string("query")</result-string>
    <result>
      <assert-string-value>query</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-normalize-unicode-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("query"),xs:string("query"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(normalize-unicode(&apos;query&apos;), normalize-unicode(&apos;query&apos;, &apos;&apos;))</test>
    <result-string>(xs:string("query"),xs:string("query"))</result-string>
    <result>
      <assert-string-value>query query</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-not-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(not(32 
         20))</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="functx-fn-not-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_catalog"/>
    <test>(not((/) //product))</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="functx-fn-not-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(not(true()))</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="functx-fn-not-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(not(()))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-not-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(not(&apos;&apos;))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-not-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(not(0))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-not-7"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0006"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(not(<e>false</e>))]]>
    </test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="functx-fn-not-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:boolean("false"),xs:boolean("false"),xs:boolean("false"),xs:boolean("true"),xs:boolean("true"),xs:boolean("true"),fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:FORG0006")))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_catalog"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[(not(32 > 20), not((/) //product), not(true()), not(()), not(''), not(0), not(<e>false</e>))]]>
    </test>
    <result-string>xs:string("false false false true true true false")</result-string>
    <result>
      <assert-string-value>false false false true true true false</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-number-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:double("29.99")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_prices"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $priceDoc := (/) return (number( $priceDoc//prod[1]/price))</test>
    <result-string>xs:double("29.99")</result-string>
    <result>
      <assert-string-value>29.99</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-number-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:double("NaN")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_prices"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $priceDoc := (/) return (number( $priceDoc//prod[1]/@currency))</test>
    <result-string>xs:double("NaN")</result-string>
    <result>
      <assert-string-value>NaN</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-number-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:double("29.99")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_prices"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $priceDoc := (/) return (number(&apos;29.99&apos;))</test>
    <result-string>xs:double("29.99")</result-string>
    <result>
      <assert-string-value>29.99</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-number-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:double("NaN")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_prices"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $priceDoc := (/) return (number(&apos;ABC&apos;))</test>
    <result-string>xs:double("NaN")</result-string>
    <result>
      <assert-string-value>NaN</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-number-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:double("NaN")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_prices"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $priceDoc := (/) return (number( () ))</test>
    <result-string>xs:double("NaN")</result-string>
    <result>
      <assert-string-value>NaN</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-number-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_prices"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $priceDoc := (/) return ($priceDoc// prod/price[number() 
         35])</test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<price currency="USD">69.99</price><price currency="USD">39.99</price>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="functx-fn-number-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_prices"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $priceDoc := (/) return (number( $priceDoc//prod[1]/price), number( $priceDoc//prod[1]/@currency), number(&apos;29.99&apos;), number(&apos;ABC&apos;), number( () ), $priceDoc// prod/price[number() 
         35])</test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[29.99 NaN 29.99 NaN NaN<price currency="USD">69.99</price><price currency="USD">39.99</price>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="functx-fn-one-or-more-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("a")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(one-or-more(&apos;a&apos;))</test>
    <result-string>xs:string("a")</result-string>
    <result>
      <assert-string-value>a</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-one-or-more-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("a"),xs:string("b"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(one-or-more( (&apos;a&apos;, &apos;b&apos;) ))</test>
    <result-string>(xs:string("a"),xs:string("b"))</result-string>
    <result>
      <assert-string-value>a b</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-one-or-more-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("a"),xs:string("a"),xs:string("b"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(one-or-more(&apos;a&apos;), one-or-more( (&apos;a&apos;, &apos;b&apos;) ))</test>
    <result-string>(xs:string("a"),xs:string("a"),xs:string("b"))</result-string>
    <result>
      <assert-string-value>a a b</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-position-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(&lt;a&gt;3&lt;/a&gt;,&lt;a&gt;4&lt;/a&gt;,&lt;a&gt;5&lt;/a&gt;)</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $in-xml := <in-xml> <a>1</a> <c>2</c> <a>3</a> <a>4</a> <a>5</a> </in-xml> return ($in-xml/*[position() > 2])]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<a>3</a><a>4</a><a>5</a>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="functx-fn-position-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(&lt;a&gt;4&lt;/a&gt;,&lt;a&gt;5&lt;/a&gt;)</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $in-xml := <in-xml> <a>1</a> <c>2</c> <a>3</a> <a>4</a> <a>5</a> </in-xml> return ($in-xml/a[position() > 2])]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<a>4</a><a>5</a>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="functx-fn-position-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">&lt;a&gt;4&lt;/a&gt;</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $in-xml := <in-xml> <a>1</a> <c>2</c> <a>3</a> <a>4</a> <a>5</a> </in-xml> return ($in-xml/a[position() = 3])]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<a>4</a>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="functx-fn-position-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(&lt;a&gt;3&lt;/a&gt;,&lt;a&gt;4&lt;/a&gt;,&lt;a&gt;5&lt;/a&gt;,&lt;a&gt;4&lt;/a&gt;,&lt;a&gt;5&lt;/a&gt;,&lt;a&gt;4&lt;/a&gt;)</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $in-xml := <in-xml> <a>1</a> <c>2</c> <a>3</a> <a>4</a> <a>5</a> </in-xml> return ($in-xml/*[position() > 2], $in-xml/a[position() > 2], $in-xml/a[position() = 3])]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<a>3</a><a>4</a><a>5</a><a>4</a><a>5</a><a>4</a>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="functx-fn-prefix-from-QName-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace pre2 = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (prefix-from-QName( node-name($in-xml)))]]>
    </test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-prefix-from-QName-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace pre2 = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (prefix-from-QName( node-name($in-xml//pre2:prefixed)))]]>
    </test>
    <result-string>xs:string("pre")</result-string>
    <result>
      <assert-string-value>pre</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-prefix-from-QName-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace pre2 = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (prefix-from-QName( node-name($in-xml//unpre:unprefixed)))]]>
    </test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-prefix-from-QName-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace pre2 = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (prefix-from-QName( node-name($in-xml//@pre2:prefAttr)))]]>
    </test>
    <result-string>xs:string("pre")</result-string>
    <result>
      <assert-string-value>pre</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-prefix-from-QName-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace pre2 = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (prefix-from-QName( node-name($in-xml//@noNSAttr)))]]>
    </test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-prefix-from-QName-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace pre2 = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (prefix-from-QName( node-name(<pre2:new>xyz</pre2:new>)))]]>
    </test>
    <result-string>xs:string("pre2")</result-string>
    <result>
      <assert-string-value>pre2</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-prefix-from-QName-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace pre2 = "http://datypic.com/pre";
         declare namespace unpre = "http://datypic.com/unpre";
         let $in-xml := <noNamespace> <pre:prefixed xmlns="http://datypic.com/unpre" xmlns:pre="http://datypic.com/pre"> <unprefixed pre:prefAttr="a" noNSAttr="b">123</unprefixed> </pre:prefixed> </noNamespace> return (prefix-from-QName( node-name($in-xml)), prefix-from-QName( node-name($in-xml//pre2:prefixed)), prefix-from-QName( node-name($in-xml//unpre:unprefixed)), prefix-from-QName( node-name($in-xml//@pre2:prefAttr)), prefix-from-QName( node-name($in-xml//@noNSAttr)), prefix-from-QName( node-name(<pre2:new>xyz</pre2:new>)))]]>
    </test>
    <result-string>xs:string("pre pre pre2")</result-string>
    <result>
      <assert-string-value>pre pre pre2</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-QName-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:QName("http://datypic.com/prod", "product")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(QName(&apos;http://datypic.com/prod&apos;,&apos;product&apos;))</test>
    <result-string>xs:string("product")</result-string>
    <result>
      <assert-string-value>product</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-QName-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:QName("http://datypic.com/prod", "pre:product")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(QName(&apos;http://datypic.com/prod&apos;, &apos;pre:product&apos;))</test>
    <result-string>xs:string("pre:product")</result-string>
    <result>
      <assert-string-value>pre:product</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-QName-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:QName("", "product")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(QName(&apos;&apos;, &apos;product&apos;))</test>
    <result-string>xs:string("product")</result-string>
    <result>
      <assert-string-value>product</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-QName-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(fn:QName("http://datypic.com/prod", "product"),fn:QName("http://datypic.com/prod", "pre:product"),fn:QName("", "product"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(QName(&apos;http://datypic.com/prod&apos;,&apos;product&apos;), QName(&apos;http://datypic.com/prod&apos;, &apos;pre:product&apos;), QName(&apos;&apos;, &apos;product&apos;))</test>
    <result-string>xs:string("product pre:product product")</result-string>
    <result>
      <assert-string-value>product pre:product product</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-remove-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("a"),xs:string("c"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(remove( (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;), 2) )</test>
    <result-string>(xs:string("a"),xs:string("c"))</result-string>
    <result>
      <assert-string-value>a c</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-remove-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("a"),xs:string("b"),xs:string("c"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(remove( (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;), 10))</test>
    <result-string>(xs:string("a"),xs:string("b"),xs:string("c"))</result-string>
    <result>
      <assert-string-value>a b c</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-remove-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("a"),xs:string("b"),xs:string("c"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(remove( (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;), 0))</test>
    <result-string>(xs:string("a"),xs:string("b"),xs:string("c"))</result-string>
    <result>
      <assert-string-value>a b c</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-remove-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("a"),xs:string("c"),xs:string("a"),xs:string("b"),xs:string("c"),xs:string("a"),xs:string("b"),xs:string("c"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(remove( (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;), 2) , remove( (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;), 10), remove( (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;), 0))</test>
    <result-string>(xs:string("a"),xs:string("c"),xs:string("a"),xs:string("b"),xs:string("c"),xs:string("a"),xs:string("b"),xs:string("c"))</result-string>
    <result>
      <assert-string-value>a c a b c a b c</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-replace-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("queasy")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(replace(&apos;query&apos;, &apos;r&apos;, &apos;as&apos;))</test>
    <result-string>xs:string("queasy")</result-string>
    <result>
      <assert-string-value>queasy</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-replace-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("quackery")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(replace(&apos;query&apos;, &apos;qu&apos;, &apos;quack&apos;))</test>
    <result-string>xs:string("quackery")</result-string>
    <result>
      <assert-string-value>quackery</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-replace-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("quely")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(replace(&apos;query&apos;, &apos;[ry]&apos;, &apos;l&apos;))</test>
    <result-string>xs:string("quell")</result-string>
    <result>
      <assert-string-value>quell</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-replace-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("quel")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(replace(&apos;query&apos;, &apos;[ry]+&apos;, &apos;l&apos;))</test>
    <result-string>xs:string("quel")</result-string>
    <result>
      <assert-string-value>quel</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-replace-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("query")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(replace(&apos;query&apos;, &apos;z&apos;, &apos;a&apos;))</test>
    <result-string>xs:string("query")</result-string>
    <result>
      <assert-string-value>query</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-replace-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(replace(&apos;query&apos;, &apos;query&apos;, &apos;&apos;))</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-replace-7"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(replace( (), &apos;r&apos;, &apos;as&apos;))</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-replace-8"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("xter")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(replace(&apos;Chapter&apos;, &apos;(Chap)|(Chapter)&apos;, &apos;x&apos;))</test>
    <result-string>xs:string("xter")</result-string>
    <result>
      <assert-string-value>xter</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-replace-9"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("X")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(replace(&apos;reluctant&apos;, &apos;r.*t&apos;, &apos;X&apos;))</test>
    <result-string>xs:string("X")</result-string>
    <result>
      <assert-string-value>X</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-replace-10"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("Xant")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(replace(&apos;reluctant&apos;, &apos;r.*?t&apos;, &apos;X&apos;))</test>
    <result-string>xs:string("Xant")</result-string>
    <result>
      <assert-string-value>Xant</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-replace-11"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("Xh")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(replace(&apos;aaah&apos;, &apos;a{2,3}&apos;, &apos;X&apos;))</test>
    <result-string>xs:string("Xh")</result-string>
    <result>
      <assert-string-value>Xh</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-replace-12"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("Xah")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(replace(&apos;aaah&apos;, &apos;a{2,3}?&apos;, &apos;X&apos;))</test>
    <result-string>xs:string("Xah")</result-string>
    <result>
      <assert-string-value>Xah</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-replace-13"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("Xah")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(replace(&apos;aaaah&apos;, &apos;a{2,3}&apos;, &apos;X&apos;))</test>
    <result-string>xs:string("Xah")</result-string>
    <result>
      <assert-string-value>Xah</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-replace-14"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("Xaah")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(replace(&apos;aaaah&apos;, &apos;a{2,3}?&apos;, &apos;X&apos;))</test>
    <result-string>xs:string("XXh")</result-string>
    <result>
      <assert-string-value>XXh</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-replace-15"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("Sec 2.0...Chap 3...Chap 4...")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(replace(&apos;Chap 2...Chap 3...Chap 4...&apos;, &apos;Chap (\d)&apos;, &apos;Sec $1.0&apos;))</test>
    <result-string>xs:string("Sec 2.0...Sec 3.0...Sec 4.0...")</result-string>
    <result>
      <assert-string-value>Sec 2.0...Sec 3.0...Sec 4.0...</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-replace-16"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("axbc123")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(replace(&apos;abc123&apos;, &apos;([a-z])&apos;, &apos;$1x&apos;))</test>
    <result-string>xs:string("axbxcx123")</result-string>
    <result>
      <assert-string-value>axbxcx123</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-replace-17"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("(231) 555-1212")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(replace(&apos;2315551212&apos;, &apos;(\d{3})(\d{3})(\d{4})&apos;, &apos;($1) $2-$3&apos;))</test>
    <result-string>xs:string("(231) 555-1212")</result-string>
    <result>
      <assert-string-value>(231) 555-1212</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-replace-18"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("10/18/06")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(replace(&apos;2006-10-18&apos;, &apos;\d{2}(\d{2})-(\d{2})-(\d{2})&apos;, &apos;$2/$3/$1&apos;))</test>
    <result-string>xs:string("10/18/06")</result-string>
    <result>
      <assert-string-value>10/18/06</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-replace-19"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("\$1.00")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(replace(&apos;25&apos;, &apos;(\d+)&apos;, &apos;\$$1.00&apos;))</test>
    <result-string>xs:string("$25.00")</result-string>
    <result>
      <assert-string-value>$25.00</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-replace-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("queasy"),xs:string("quackery"),xs:string("quely"),xs:string("quel"),xs:string("query"),xs:string(""),xs:string(""),xs:string("xter"),xs:string("X"),xs:string("Xant"),xs:string("Xh"),xs:string("Xah"),xs:string("Xah"),xs:string("Xaah"),xs:string("Sec 2.0...Chap 3...Chap 4..."),xs:string("axbc123"),xs:string("(231) 555-1212"),xs:string("10/18/06"),xs:string("\$1.00"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(replace(&apos;query&apos;, &apos;r&apos;, &apos;as&apos;), replace(&apos;query&apos;, &apos;qu&apos;, &apos;quack&apos;), replace(&apos;query&apos;, &apos;[ry]&apos;, &apos;l&apos;), replace(&apos;query&apos;, &apos;[ry]+&apos;, &apos;l&apos;), replace(&apos;query&apos;, &apos;z&apos;, &apos;a&apos;), replace(&apos;query&apos;, &apos;query&apos;, &apos;&apos;), replace( (), &apos;r&apos;, &apos;as&apos;), replace(&apos;Chapter&apos;, &apos;(Chap)|(Chapter)&apos;, &apos;x&apos;), replace(&apos;reluctant&apos;, &apos;r.*t&apos;, &apos;X&apos;), replace(&apos;reluctant&apos;, &apos;r.*?t&apos;, &apos;X&apos;), replace(&apos;aaah&apos;, &apos;a{2,3}&apos;, &apos;X&apos;), replace(&apos;aaah&apos;, &apos;a{2,3}?&apos;, &apos;X&apos;), replace(&apos;aaaah&apos;, &apos;a{2,3}&apos;, &apos;X&apos;), replace(&apos;aaaah&apos;, &apos;a{2,3}?&apos;, &apos;X&apos;), replace(&apos;Chap 2...Chap 3...Chap 4...&apos;, &apos;Chap (\d)&apos;, &apos;Sec $1.0&apos;), replace(&apos;abc123&apos;, &apos;([a-z])&apos;, &apos;$1x&apos;), replace(&apos;2315551212&apos;, &apos;(\d{3})(\d{3})(\d{4})&apos;, &apos;($1) $2-$3&apos;), replace(&apos;2006-10-18&apos;, &apos;\d{2}(\d{2})-(\d{2})-(\d{2})&apos;, &apos;$2/$3/$1&apos;), replace(&apos;25&apos;, &apos;(\d+)&apos;, &apos;\$$1.00&apos;))</test>
    <result-string>xs:string("queasy quackery quell quel query   xter X Xant Xh Xah Xah XXh Sec 2.0...Sec 3.0...Sec 4.0... axbxcx123 (231) 555-1212 10/18/06 $25.00")</result-string>
    <result>
      <assert-string-value>queasy quackery quell quel query   xter X Xant Xh Xah Xah XXh Sec 2.0...Sec 3.0...Sec 4.0... axbxcx123 (231) 555-1212 10/18/06 $25.00</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-resolve-QName-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace ord = "http://datypic.com/ord";
         declare namespace dty = "http://datypic.com";
         declare namespace dty2 = "http://datypic.com/ns2";
         let $root := <root> <order xmlns:ord="http://datypic.com/ord" xmlns="http://datypic.com"> <!-- ... --> </order> </root> return (resolve-QName('myName', $root))]]>
    </test>
    <result-string>xs:string("myName")</result-string>
    <result>
      <assert-string-value>myName</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-resolve-QName-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace ord = "http://datypic.com/ord";
         declare namespace dty = "http://datypic.com";
         declare namespace dty2 = "http://datypic.com/ns2";
         let $root := <root> <order xmlns:ord="http://datypic.com/ord" xmlns="http://datypic.com"> <!-- ... --> </order> </root> return (resolve-QName('myName', $root/dty:order))]]>
    </test>
    <result-string>xs:string("myName")</result-string>
    <result>
      <assert-string-value>myName</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-resolve-QName-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace ord = "http://datypic.com/ord";
         declare namespace dty = "http://datypic.com";
         declare namespace dty2 = "http://datypic.com/ns2";
         let $root := <root> <order xmlns:ord="http://datypic.com/ord" xmlns="http://datypic.com"> <!-- ... --> </order> </root> return (resolve-QName( 'ord:myName', $root/dty:order))]]>
    </test>
    <result-string>xs:string("ord:myName")</result-string>
    <result>
      <assert-string-value>ord:myName</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-resolve-QName-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[declare namespace ord = "http://datypic.com/ord";
         declare namespace dty = "http://datypic.com";
         declare namespace dty2 = "http://datypic.com/ns2";
         let $root := <root> <order xmlns:ord="http://datypic.com/ord" xmlns="http://datypic.com"> <!-- ... --> </order> </root> return (resolve-QName('myName', $root), resolve-QName('myName', $root/dty:order), resolve-QName( 'ord:myName', $root/dty:order))]]>
    </test>
    <result-string>xs:string("myName myName ord:myName")</result-string>
    <result>
      <assert-string-value>myName myName ord:myName</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-resolve-uri-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(resolve-uri(&apos;prod&apos;, &apos;http://datypic.com/&apos;))</test>
    <result-string>xs:string("http://datypic.com/prod")</result-string>
    <result>
      <assert-string-value>http://datypic.com/prod</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-resolve-uri-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(resolve-uri(&apos;prod2&apos;, &apos;http://datypic.com/prod1&apos;))</test>
    <result-string>xs:string("http://datypic.com/prod2")</result-string>
    <result>
      <assert-string-value>http://datypic.com/prod2</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-resolve-uri-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(resolve-uri( &apos;http://example.org&apos;,&apos;http://datypic.com&apos;))</test>
    <result-string>xs:string("http://example.org")</result-string>
    <result>
      <assert-string-value>http://example.org</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-resolve-uri-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(resolve-uri( &apos;http://datypic.com&apos;, &apos;../base&apos;))</test>
    <result-string>xs:string("http://datypic.com")</result-string>
    <result-string>fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "FORG0002"))</result-string>
    <result>
      <any-of>
        <assert-string-value>http://datypic.com</assert-string-value>
        <error code="FORG0002"/>
      </any-of>
    </result>
  </test-case>
  <test-case name="functx-fn-resolve-uri-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(resolve-uri( &apos;&apos;, &apos;http://datypic.com&apos;))</test>
    <result-string>xs:string("http://datypic.com")</result-string>
    <result>
      <assert-string-value>http://datypic.com</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-resolve-uri-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(resolve-uri(&apos;prod&apos;, &apos;http://datypic.com/&apos;), resolve-uri(&apos;prod2&apos;, &apos;http://datypic.com/prod1&apos;), resolve-uri( &apos;http://example.org&apos;,&apos;http://datypic.com&apos;), resolve-uri( &apos;http://datypic.com&apos;, &apos;../base&apos;), resolve-uri( &apos;&apos;, &apos;http://datypic.com&apos;))</test>
    <result-string>xs:string("http://datypic.com/prod http://datypic.com/prod2 http://example.org http://datypic.com http://datypic.com")</result-string>
    <result>
      <assert-string-value>http://datypic.com/prod http://datypic.com/prod2 http://example.org http://datypic.com http://datypic.com</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-reverse-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("5"),xs:integer("4"),xs:integer("3"),xs:integer("2"),xs:integer("1"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(reverse( (1, 2, 3, 4, 5) ))</test>
    <result-string>(xs:integer("5"),xs:integer("4"),xs:integer("3"),xs:integer("2"),xs:integer("1"))</result-string>
    <result>
      <assert-string-value>5 4 3 2 1</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-reverse-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("4"),xs:integer("2"),xs:integer("6"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(reverse( (6, 2, 4) ))</test>
    <result-string>(xs:integer("4"),xs:integer("2"),xs:integer("6"))</result-string>
    <result>
      <assert-string-value>4 2 6</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-reverse-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(reverse( () ))</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-reverse-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("5"),xs:integer("4"),xs:integer("3"),xs:integer("2"),xs:integer("1"),xs:integer("4"),xs:integer("2"),xs:integer("6"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(reverse( (1, 2, 3, 4, 5) ), reverse( (6, 2, 4) ), reverse( () ))</test>
    <result-string>(xs:integer("5"),xs:integer("4"),xs:integer("3"),xs:integer("2"),xs:integer("1"),xs:integer("4"),xs:integer("2"),xs:integer("6"))</result-string>
    <result>
      <assert-string-value>5 4 3 2 1 4 2 6</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-root-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_order"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $in-xml := <a><x>123</x></a> return (root( (/) //item[1]))]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<order num="00299432" date="2006-09-15" cust="0221A">
  <item dept="WMN" num="557" quantity="1" color="beige"/>
  <item dept="ACC" num="563" quantity="1"/>
  <item dept="ACC" num="443" quantity="2"/>
  <item dept="MEN" num="784" quantity="1" color="blue/white"/>
  <item dept="MEN" num="784" quantity="1" color="blue/red"/>
  <item dept="WMN" num="557" quantity="1" color="sage"/>
</order>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="functx-fn-root-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $in-xml := <a><x>123</x></a> return (root($in-xml/x))]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<a><x>123</x></a>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="functx-fn-root-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_order"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $in-xml := <a><x>123</x></a> return (root( (/) //item[1]), root($in-xml/x))]]>
    </test>
    <result-string/>
    <result>
      <assert-xml>
        <![CDATA[<order num="00299432" date="2006-09-15" cust="0221A">
  <item dept="WMN" num="557" quantity="1" color="beige"/>
  <item dept="ACC" num="563" quantity="1"/>
  <item dept="ACC" num="443" quantity="2"/>
  <item dept="MEN" num="784" quantity="1" color="blue/white"/>
  <item dept="MEN" num="784" quantity="1" color="blue/red"/>
  <item dept="WMN" num="557" quantity="1" color="sage"/>
</order><a><x>123</x></a>]]>
      </assert-xml>
    </result>
  </test-case>
  <test-case name="functx-fn-round-half-to-even-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("6")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(round-half-to-even(5.5))</test>
    <result-string>xs:integer("6")</result-string>
    <result>
      <assert-eq>6</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-round-half-to-even-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("6")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(round-half-to-even(6.5))</test>
    <result-string>xs:integer("6")</result-string>
    <result>
      <assert-eq>6</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-round-half-to-even-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("9372.25")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(round-half-to-even(9372.253, 2))</test>
    <result-string>xs:decimal("9372.25")</result-string>
    <result>
      <assert-string-value>9372.25</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-round-half-to-even-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("9371")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(round-half-to-even(9372.253, 0))</test>
    <result-string>xs:integer("9372")</result-string>
    <result>
      <assert-eq>9372</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-round-half-to-even-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("9000")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(round-half-to-even(9372.253, -3))</test>
    <result-string>xs:integer("9000")</result-string>
    <result>
      <assert-eq>9000</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-round-half-to-even-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:decimal("6"),xs:decimal("6"),xs:decimal("9372.25"),xs:decimal("9371"),xs:decimal("9000"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(round-half-to-even(5.5), round-half-to-even(6.5), round-half-to-even(9372.253, 2), round-half-to-even(9372.253, 0), round-half-to-even(9372.253, -3))</test>
    <result-string>xs:string("6 6 9372.25 9372 9000")</result-string>
    <result>
      <assert-string-value>6 6 9372.25 9372 9000</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-round-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("5")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(round(5))</test>
    <result-string>xs:integer("5")</result-string>
    <result>
      <assert-eq>5</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-round-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("5")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(round(5.1))</test>
    <result-string>xs:integer("5")</result-string>
    <result>
      <assert-eq>5</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-round-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("6")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(round(5.5))</test>
    <result-string>xs:integer("6")</result-string>
    <result>
      <assert-eq>6</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-round-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("-5")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(round(-5.5))</test>
    <result-string>xs:integer("-5")</result-string>
    <result>
      <assert-eq>-5</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-round-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("-6")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(round(-5.51))</test>
    <result-string>xs:integer("-6")</result-string>
    <result>
      <assert-eq>-6</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-round-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("5"),xs:decimal("5"),xs:decimal("6"),xs:decimal("-5"),xs:decimal("-6"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(round(5), round(5.1), round(5.5), round(-5.5), round(-5.51))</test>
    <result-string>xs:string("5 5 6 -5 -6")</result-string>
    <result>
      <assert-string-value>5 5 6 -5 -6</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-seconds-from-dateTime-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("23.5")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(seconds-from-dateTime( xs:dateTime(&apos;2006-08-15T10:30:23.5&apos;)))</test>
    <result-string>xs:decimal("23.5")</result-string>
    <result>
      <assert-string-value>23.5</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-seconds-from-duration-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("30.5")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(seconds-from-duration( xs:dayTimeDuration(&apos;PT30.5S&apos;)))</test>
    <result-string>xs:decimal("30.5")</result-string>
    <result>
      <assert-string-value>30.5</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-seconds-from-duration-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("-30.5")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(seconds-from-duration( xs:dayTimeDuration(&apos;-PT90.5S&apos;)))</test>
    <result-string>xs:decimal("-30.5")</result-string>
    <result>
      <assert-string-value>-30.5</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-seconds-from-duration-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("0")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(seconds-from-duration( xs:dayTimeDuration(&apos;PT1M&apos;)))</test>
    <result-string>xs:decimal("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-seconds-from-duration-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("0")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(seconds-from-duration( xs:dayTimeDuration(&apos;PT60S&apos;)))</test>
    <result-string>xs:decimal("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-seconds-from-duration-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:decimal("30.5"),xs:decimal("-30.5"),xs:decimal("0"),xs:decimal("0"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(seconds-from-duration( xs:dayTimeDuration(&apos;PT30.5S&apos;)), seconds-from-duration( xs:dayTimeDuration(&apos;-PT90.5S&apos;)), seconds-from-duration( xs:dayTimeDuration(&apos;PT1M&apos;)), seconds-from-duration( xs:dayTimeDuration(&apos;PT60S&apos;)))</test>
    <result-string>(xs:decimal("30.5"),xs:decimal("-30.5"),xs:decimal("0"),xs:decimal("0"))</result-string>
    <result>
      <assert-string-value>30.5 -30.5 0 0</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-seconds-from-time-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:decimal("23.5")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(seconds-from-time(xs:time(&apos;10:30:23.5&apos;)))</test>
    <result-string>xs:decimal("23.5")</result-string>
    <result>
      <assert-string-value>23.5</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-starts-with-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(starts-with(&apos;query&apos;, &apos;que&apos;))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-starts-with-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(starts-with(&apos;query&apos;, &apos;query&apos;))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-starts-with-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(starts-with(&apos;query&apos;, &apos;u&apos;))</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="functx-fn-starts-with-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(starts-with(&apos;query&apos;, &apos;&apos;))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-starts-with-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(starts-with(&apos;&apos;, &apos;query&apos;))</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="functx-fn-starts-with-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(starts-with(&apos;&apos;, &apos;&apos;))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-starts-with-7"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(starts-with(&apos;query&apos;, ()))</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-starts-with-8"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("false")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(starts-with(&apos; query&apos;, &apos;q&apos;))</test>
    <result-string>xs:boolean("false")</result-string>
    <result>
      <assert-false/>
    </result>
  </test-case>
  <test-case name="functx-fn-starts-with-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:boolean("true"),xs:boolean("true"),xs:boolean("false"),xs:boolean("true"),xs:boolean("false"),xs:boolean("true"),xs:boolean("true"),xs:boolean("false"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(starts-with(&apos;query&apos;, &apos;que&apos;), starts-with(&apos;query&apos;, &apos;query&apos;), starts-with(&apos;query&apos;, &apos;u&apos;), starts-with(&apos;query&apos;, &apos;&apos;), starts-with(&apos;&apos;, &apos;query&apos;), starts-with(&apos;&apos;, &apos;&apos;), starts-with(&apos;query&apos;, ()), starts-with(&apos; query&apos;, &apos;q&apos;))</test>
    <result-string>(xs:boolean("true"),xs:boolean("true"),xs:boolean("false"),xs:boolean("true"),xs:boolean("false"),xs:boolean("true"),xs:boolean("true"),xs:boolean("false"))</result-string>
    <result>
      <assert-string-value>true true false true false true true false</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-string-join-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("abc")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(string-join( (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;), &apos;&apos;))</test>
    <result-string>xs:string("abc")</result-string>
    <result>
      <assert-string-value>abc</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-string-join-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("a/*b/*c")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(string-join( (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;), &apos;/*&apos;))</test>
    <result-string>xs:string("a/*b/*c")</result-string>
    <result>
      <assert-string-value>a/*b/*c</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-string-join-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("a/*/*c")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(string-join( (&apos;a&apos;, &apos;&apos;, &apos;c&apos;), &apos;/*&apos;))</test>
    <result-string>xs:string("a/*/*c")</result-string>
    <result>
      <assert-string-value>a/*/*c</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-string-join-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("a")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(string-join( &apos;a&apos;, &apos;/*&apos;))</test>
    <result-string>xs:string("a")</result-string>
    <result>
      <assert-string-value>a</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-string-join-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(string-join((), &apos;/*&apos;))</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-string-join-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("abc"),xs:string("a/*b/*c"),xs:string("a/*/*c"),xs:string("a"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(string-join( (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;), &apos;&apos;), string-join( (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;), &apos;/*&apos;), string-join( (&apos;a&apos;, &apos;&apos;, &apos;c&apos;), &apos;/*&apos;), string-join( &apos;a&apos;, &apos;/*&apos;), string-join((), &apos;/*&apos;))</test>
    <result-string>(xs:string("abc"),xs:string("a/*b/*c"),xs:string("a/*/*c"),xs:string("a"))</result-string>
    <result>
      <assert-string-value>abc a/*b/*c a/*/*c a </assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-string-length-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("5")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(string-length(&apos;query&apos;))</test>
    <result-string>xs:integer("5")</result-string>
    <result>
      <assert-eq>5</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-string-length-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("7")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(string-length(&apos; query &apos;))</test>
    <result-string>xs:integer("9")</result-string>
    <result>
      <assert-eq>9</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-string-length-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("5")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(string-length(normalize-space(&apos; query &apos;)))</test>
    <result-string>xs:integer("5")</result-string>
    <result>
      <assert-eq>5</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-string-length-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("9")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(string-length(&apos;xml query&apos;))</test>
    <result-string>xs:integer("9")</result-string>
    <result>
      <assert-eq>9</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-string-length-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(string-length(&apos;&apos;))</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-string-length-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("0")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(string-length(()))</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-string-length-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("5"),xs:integer("8"),xs:integer("5"),xs:integer("9"),xs:integer("0"),xs:integer("0"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(string-length(&apos;query&apos;), string-length(&apos; query  &apos;), string-length(normalize-space(&apos;  query  &apos;)), string-length(&apos;xml query&apos;), string-length(&apos;&apos;), string-length(()))</test>
    <result-string>xs:string("5 10 5 9 0 0")</result-string>
    <result>
      <assert-string-value>5 10 5 9 0 0</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-string-to-codepoints-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("97"),xs:integer("98"),xs:integer("99"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(string-to-codepoints(&apos;abc&apos;))</test>
    <result-string>(xs:integer("97"),xs:integer("98"),xs:integer("99"))</result-string>
    <result>
      <assert-string-value>97 98 99</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-string-to-codepoints-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("97")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(string-to-codepoints(&apos;a&apos;))</test>
    <result-string>xs:integer("97")</result-string>
    <result>
      <assert-eq>97</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-string-to-codepoints-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(string-to-codepoints(&apos;&apos;))</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-string-to-codepoints-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("97"),xs:integer("98"),xs:integer("99"),xs:integer("97"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(string-to-codepoints(&apos;abc&apos;), string-to-codepoints(&apos;a&apos;), string-to-codepoints(&apos;&apos;))</test>
    <result-string>(xs:integer("97"),xs:integer("98"),xs:integer("99"),xs:integer("97"))</result-string>
    <result>
      <assert-string-value>97 98 99 97</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-string-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("784")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $in-xml-2 := <product dept="MEN"> <number>784</number> <name language="en">Cotton Dress Shirt</name> <colorChoices>white gray</colorChoices> <desc>Our <i>favorite</i> shirt!</desc> </product> return (string($in-xml-2/number))]]>
    </test>
    <result-string>xs:string("784")</result-string>
    <result>
      <assert-string-value>784</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-string-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("Our favorite shirt!")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $in-xml-2 := <product dept="MEN"> <number>784</number> <name language="en">Cotton Dress Shirt</name> <colorChoices>white gray</colorChoices> <desc>Our <i>favorite</i> shirt!</desc> </product> return (string($in-xml-2/desc))]]>
    </test>
    <result-string>xs:string("Our favorite shirt!")</result-string>
    <result>
      <assert-string-value>Our favorite shirt!</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-string-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("MEN")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $in-xml-2 := <product dept="MEN"> <number>784</number> <name language="en">Cotton Dress Shirt</name> <colorChoices>white gray</colorChoices> <desc>Our <i>favorite</i> shirt!</desc> </product> return (string($in-xml-2/@dept))]]>
    </test>
    <result-string>xs:string("MEN")</result-string>
    <result>
      <assert-string-value>MEN</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-string-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("784"),xs:string("Our favorite shirt!"),xs:string("MEN"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <dependency type="spec" value="XQ10+"/>
    <test>
      <![CDATA[let $in-xml-2 := <product dept="MEN"> <number>784</number> <name language="en">Cotton Dress Shirt</name> <colorChoices>white gray</colorChoices> <desc>Our <i>favorite</i> shirt!</desc> </product> return (string($in-xml-2/number), string($in-xml-2/desc), string($in-xml-2/@dept))]]>
    </test>
    <result-string>(xs:string("784"),xs:string("Our favorite shirt!"),xs:string("MEN"))</result-string>
    <result>
      <assert-string-value>784 Our favorite shirt! MEN</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-subsequence-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(subsequence( (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;), 3) )</test>
    <result-string>xs:string("c d e")</result-string>
    <result>
      <assert-string-value>c d e</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-subsequence-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(subsequence( (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;), 3, 2))</test>
    <result-string>xs:string("c d")</result-string>
    <result>
      <assert-string-value>c d</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-subsequence-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(subsequence( (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;), 3, 10))</test>
    <result-string>xs:string("c d e")</result-string>
    <result>
      <assert-string-value>c d e</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-subsequence-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(subsequence( (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;), 10))</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-subsequence-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(subsequence( (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;), -2, 5))</test>
    <result-string>xs:string("a b")</result-string>
    <result>
      <assert-string-value>a b</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-subsequence-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(subsequence( (), 3))</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-subsequence-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0003"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(subsequence( (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;), 3) , subsequence( (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;), 3, 2), subsequence( (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;), 3, 10), subsequence( (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;), 10), subsequence( (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;), -2, 5), subsequence( (), 3))</test>
    <result-string>xs:string("c d e c d c d e a b")</result-string>
    <result>
      <assert-string-value>c d e c d c d e a b</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-substring-after-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("ery")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(substring-after(&apos;query&apos;, &apos;u&apos;))</test>
    <result-string>xs:string("ery")</result-string>
    <result>
      <assert-string-value>ery</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-substring-after-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("ryquery")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(substring-after(&apos;queryquery&apos;, &apos;ue&apos;))</test>
    <result-string>xs:string("ryquery")</result-string>
    <result>
      <assert-string-value>ryquery</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-substring-after-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(substring-after(&apos;query&apos;, &apos;y&apos;))</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-substring-after-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(substring-after(&apos;query&apos;, &apos;x&apos;))</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-substring-after-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("query")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(substring-after(&apos;query&apos;, &apos;&apos;))</test>
    <result-string>xs:string("query")</result-string>
    <result>
      <assert-string-value>query</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-substring-after-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(substring-after(&apos;&apos;, &apos;x&apos;))</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-substring-after-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("ery"),xs:string("ryquery"),xs:string(""),xs:string(""),xs:string("query"),xs:string(""))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(substring-after(&apos;query&apos;, &apos;u&apos;), substring-after(&apos;queryquery&apos;, &apos;ue&apos;), substring-after(&apos;query&apos;, &apos;y&apos;), substring-after(&apos;query&apos;, &apos;x&apos;), substring-after(&apos;query&apos;, &apos;&apos;), substring-after(&apos;&apos;, &apos;x&apos;))</test>
    <result-string>xs:string("ery ryquery   query ")</result-string>
    <result>
      <assert-string-value>ery ryquery   query </assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-substring-before-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("que")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(substring-before(&apos;query&apos;, &apos;r&apos;))</test>
    <result-string>xs:string("que")</result-string>
    <result>
      <assert-string-value>que</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-substring-before-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("qu")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(substring-before(&apos;query&apos;, &apos;ery&apos;))</test>
    <result-string>xs:string("qu")</result-string>
    <result>
      <assert-string-value>qu</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-substring-before-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("qu")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(substring-before(&apos;queryquery&apos;, &apos;ery&apos;))</test>
    <result-string>xs:string("qu")</result-string>
    <result>
      <assert-string-value>qu</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-substring-before-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(substring-before(&apos;query&apos;, &apos;query&apos;))</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-substring-before-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(substring-before(&apos;query&apos;, &apos;x&apos;))</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-substring-before-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(substring-before(&apos;query&apos;, &apos;&apos;))</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-substring-before-7"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(substring-before(&apos;query&apos;, ()))</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-substring-before-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("que"),xs:string("qu"),xs:string("qu"),xs:string(""),xs:string(""),xs:string(""),xs:string(""))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(substring-before(&apos;query&apos;, &apos;r&apos;), substring-before(&apos;query&apos;, &apos;ery&apos;), substring-before(&apos;queryquery&apos;, &apos;ery&apos;), substring-before(&apos;query&apos;, &apos;query&apos;), substring-before(&apos;query&apos;, &apos;x&apos;), substring-before(&apos;query&apos;, &apos;&apos;), substring-before(&apos;query&apos;, ()))</test>
    <result-string>xs:string("que qu qu    ")</result-string>
    <result>
      <assert-string-value>que qu qu    </assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-substring-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("query")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(substring(&apos;query&apos;, 1))</test>
    <result-string>xs:string("query")</result-string>
    <result>
      <assert-string-value>query</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-substring-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("ery")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(substring(&apos;query&apos;, 3))</test>
    <result-string>xs:string("ery")</result-string>
    <result>
      <assert-string-value>ery</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-substring-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("q")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(substring(&apos;query&apos;, 1, 1))</test>
    <result-string>xs:string("q")</result-string>
    <result>
      <assert-string-value>q</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-substring-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("uer")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(substring(&apos;query&apos;, 2, 3))</test>
    <result-string>xs:string("uer")</result-string>
    <result>
      <assert-string-value>uer</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-substring-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("uery")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(substring(&apos;query&apos;, 2, 850))</test>
    <result-string>xs:string("uery")</result-string>
    <result>
      <assert-string-value>uery</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-substring-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(substring(&apos;query&apos;, 6, 2))</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-substring-7"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("ery")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(substring(&apos;query&apos;, -2))</test>
    <result-string>xs:string("query")</result-string>
    <result>
      <assert-string-value>query</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-substring-8"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("ery")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(substring(&apos;query&apos;, -2, 5))</test>
    <result-string>xs:string("qu")</result-string>
    <result>
      <assert-string-value>qu</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-substring-9"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(substring(&apos;query&apos;, 1, 0))</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-substring-10"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(substring(&apos;&apos;, 1))</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-substring-11"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(substring((), 1))</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-substring-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("query"),xs:string("ery"),xs:string("q"),xs:string("uer"),xs:string("uery"),xs:string(""),xs:string("ery"),xs:string("ery"),xs:string(""),xs:string(""),xs:string(""))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(substring(&apos;query&apos;, 1), substring(&apos;query&apos;, 3), substring(&apos;query&apos;, 1, 1), substring(&apos;query&apos;, 2, 3), substring(&apos;query&apos;, 2, 850), substring(&apos;query&apos;, 6, 2), substring(&apos;query&apos;, -2), substring(&apos;query&apos;, -2, 5), substring(&apos;query&apos;, 1, 0), substring(&apos;&apos;, 1), substring((), 1))</test>
    <result-string>xs:string("query ery q uer uery  query qu   ")</result-string>
    <result>
      <assert-string-value>query ery q uer uery  query qu   </assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-sum-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("6")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_order"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $ordDoc := (/) return (sum( (1, 2, 3) ))</test>
    <result-string>xs:integer("6")</result-string>
    <result>
      <assert-eq>6</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-sum-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">attribute quantity {"1"}</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_order"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $ordDoc := (/) return (sum($ordDoc//item/@quantity))</test>
    <result-string>xs:integer("7")</result-string>
    <result>
      <assert-eq>7</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-sum-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_order"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $ordDoc := (/) return (sum( (xs:yearMonthDuration(&apos;P1Y2M&apos;), xs:yearMonthDuration(&apos;P2Y3M&apos;)) ))</test>
    <result-string>xs:string("P3Y5M")</result-string>
    <result>
      <assert-string-value>P3Y5M</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-sum-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("6")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_order"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $ordDoc := (/) return (sum( (1, 2, 3, () ) ))</test>
    <result-string>xs:integer("6")</result-string>
    <result>
      <assert-eq>6</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-sum-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_order"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $ordDoc := (/) return (sum( () ))</test>
    <result-string>xs:integer("0")</result-string>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-sum-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_order"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $ordDoc := (/) return (sum( (), () ))</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-sum-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("6"),attribute quantity {"1"},fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPTY0004")),xs:integer("6"),fn:error(fn:QName("http://www.w3.org/2005/xqt-errors", "err:XPST0017")))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <environment ref="functx_order"/>
    <dependency type="spec" value="XP30+ XQ10+"/>
    <test>let $ordDoc := (/) return (sum( (1, 2, 3) ), sum($ordDoc//item/@quantity), sum( (xs:yearMonthDuration(&apos;P1Y2M&apos;), xs:yearMonthDuration(&apos;P2Y3M&apos;)) ), sum( (1, 2, 3, () ) ), sum( () ), sum( (), () ))</test>
    <result-string>xs:string("6 7 P3Y5M 6 0")</result-string>
    <result>
      <assert-string-value>6 7 P3Y5M 6 0</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-timezone-from-date-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(timezone-from-date( xs:date(&apos;2006-08-15-05:00&apos;)))</test>
    <result-string>xs:string("-PT5H")</result-string>
    <result>
      <assert-string-value>-PT5H</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-timezone-from-date-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(timezone-from-date( xs:date(&apos;2006-08-15&apos;)))</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-timezone-from-date-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(timezone-from-date( xs:date(&apos;2006-08-15-05:00&apos;)), timezone-from-date( xs:date(&apos;2006-08-15&apos;)))</test>
    <result-string>xs:string("-PT5H")</result-string>
    <result>
      <assert-string-value>-PT5H</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-timezone-from-dateTime-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(timezone-from-dateTime( xs:dateTime(&apos;2006-08-15T10:30:23-05:00&apos;)))</test>
    <result-string>xs:string("-PT5H")</result-string>
    <result>
      <assert-string-value>-PT5H</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-timezone-from-dateTime-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(timezone-from-dateTime( xs:dateTime(&apos;2006-08-15T10:30:23&apos;)))</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-timezone-from-dateTime-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(timezone-from-dateTime( xs:dateTime(&apos;2006-08-15T10:30:23-05:00&apos;)), timezone-from-dateTime( xs:dateTime(&apos;2006-08-15T10:30:23&apos;)))</test>
    <result-string>xs:string("-PT5H")</result-string>
    <result>
      <assert-string-value>-PT5H</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-timezone-from-time-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(timezone-from-time( xs:time(&apos;09:54:00-05:00&apos;)))</test>
    <result-string>xs:string("-PT5H")</result-string>
    <result>
      <assert-string-value>-PT5H</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-timezone-from-time-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(timezone-from-time( xs:time(&apos;09:54:00+05:00&apos;)))</test>
    <result-string>xs:string("PT5H")</result-string>
    <result>
      <assert-string-value>PT5H</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-timezone-from-time-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(timezone-from-time( xs:time(&apos;09:54:00Z&apos;)))</test>
    <result-string>xs:string("PT0S")</result-string>
    <result>
      <assert-string-value>PT0S</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-timezone-from-time-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(timezone-from-time( xs:time(&apos;09:54:00&apos;)))</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-timezone-from-time-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">In progress...</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(timezone-from-time( xs:time(&apos;09:54:00-05:00&apos;)), timezone-from-time( xs:time(&apos;09:54:00+05:00&apos;)), timezone-from-time( xs:time(&apos;09:54:00Z&apos;)), timezone-from-time( xs:time(&apos;09:54:00&apos;)))</test>
    <result-string>xs:string("-PT5H PT5H PT0S")</result-string>
    <result>
      <assert-string-value>-PT5H PT5H PT0S</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-tokenize-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("a"),xs:string("b"),xs:string("c"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(tokenize( &apos;a b c&apos;, &apos;\s&apos;))</test>
    <result-string>(xs:string("a"),xs:string("b"),xs:string("c"))</result-string>
    <result>
      <assert-string-value>a b c</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-tokenize-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("a||||b|c")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>string-join(tokenize( &apos;a    b c&apos;, &apos;\s&apos;), &apos;|&apos;)</test>
    <result-string>xs:string("a||||b|c")</result-string>
    <result>
      <assert-string-value>a||||b|c</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-tokenize-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("a"),xs:string("b"),xs:string("c"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(tokenize( &apos;a b c&apos;, &apos;\s+&apos;))</test>
    <result-string>(xs:string("a"),xs:string("b"),xs:string("c"))</result-string>
    <result>
      <assert-string-value>a b c</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-tokenize-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string(""),xs:string("b"),xs:string("c"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(tokenize( &apos; b c&apos;, &apos;\s&apos;))</test>
    <result-string>(xs:string(""),xs:string("b"),xs:string("c"))</result-string>
    <result>
      <assert-string-value> b c</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-tokenize-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("a"),xs:string("b"),xs:string("c"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(tokenize( &apos;a,b,c&apos;, &apos;,&apos;))</test>
    <result-string>(xs:string("a"),xs:string("b"),xs:string("c"))</result-string>
    <result>
      <assert-string-value>a b c</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-tokenize-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("a"),xs:string("b"),xs:string(""),xs:string("c"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(tokenize( &apos;a,b,,c&apos;, &apos;,&apos;))</test>
    <result-string>(xs:string("a"),xs:string("b"),xs:string(""),xs:string("c"))</result-string>
    <result>
      <assert-string-value>a b  c</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-tokenize-7"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("a"),xs:string("b"),xs:string("c"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(tokenize( &apos;a, b, c&apos;, &apos;[,\s]+&apos;))</test>
    <result-string>(xs:string("a"),xs:string("b"),xs:string("c"))</result-string>
    <result>
      <assert-string-value>a b c</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-tokenize-8"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("2006"),xs:string("12"),xs:string("25"),xs:string("12"),xs:string("15"),xs:string("00"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(tokenize( &apos;2006-12-25T12:15:00&apos;, &apos;[\-T:]&apos;))</test>
    <result-string>(xs:string("2006"),xs:string("12"),xs:string("25"),xs:string("12"),xs:string("15"),xs:string("00"))</result-string>
    <result>
      <assert-string-value>2006 12 25 12 15 00</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-tokenize-9"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("Hello"),xs:string("there"),xs:string(""))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(tokenize( &apos;Hello, there.&apos;, &apos;\W+&apos;))</test>
    <result-string>(xs:string("Hello"),xs:string("there"),xs:string(""))</result-string>
    <result>
      <assert-string-value>Hello there </assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-tokenize-10"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(tokenize( (), &apos;\s+&apos;))</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-tokenize-11"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("abc")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(tokenize( &apos;abc&apos;, &apos;\s&apos;))</test>
    <result-string>xs:string("abc")</result-string>
    <result>
      <assert-string-value>abc</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-tokenize-12"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("a"),xs:string("xb"),xs:string("xc"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(tokenize( &apos;a,xb,xc&apos;, &apos;,|,x&apos;))</test>
    <result-string>(xs:string("a"),xs:string("xb"),xs:string("xc"))</result-string>
    <result>
      <assert-string-value>a xb xc</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-tokenize-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("a"),xs:string("b"),xs:string("c"),xs:string("a"),xs:string("b"),xs:string("c"),xs:string("a"),xs:string("b"),xs:string("c"),xs:string(""),xs:string("b"),xs:string("c"),xs:string("a"),xs:string("b"),xs:string("c"),xs:string("a"),xs:string("b"),xs:string(""),xs:string("c"),xs:string("a"),xs:string("b"),xs:string("c"),xs:string("2006"),xs:string("12"),xs:string("25"),xs:string("12"),xs:string("15"),xs:string("00"),xs:string("Hello"),xs:string("there"),xs:string(""),xs:string("abc"),xs:string("a"),xs:string("xb"),xs:string("xc"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(tokenize( &apos;a b c&apos;, &apos;\s&apos;), tokenize( &apos;a b c&apos;, &apos;\s&apos;), tokenize( &apos;a b c&apos;, &apos;\s+&apos;), tokenize( &apos; b c&apos;, &apos;\s&apos;), tokenize( &apos;a,b,c&apos;, &apos;,&apos;), tokenize( &apos;a,b,,c&apos;, &apos;,&apos;), tokenize( &apos;a, b, c&apos;, &apos;[,\s]+&apos;), tokenize( &apos;2006-12-25T12:15:00&apos;, &apos;[\-T:]&apos;), tokenize( &apos;Hello, there.&apos;, &apos;\W+&apos;), tokenize( (), &apos;\s+&apos;), tokenize( &apos;abc&apos;, &apos;\s&apos;), tokenize( &apos;a,xb,xc&apos;, &apos;,|,x&apos;))</test>
    <result-string>xs:string("a b c a b c a b c  b c a b c a b  c a b c 2006 12 25 12 15 00 Hello there  abc a xb xc")</result-string>
    <result>
      <assert-string-value>a b c a b c a b c  b c a b c a b  c a b c 2006 12 25 12 15 00 Hello there  abc a xb xc</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-translate-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("1999-01-02")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(translate(&apos;1999/01/02&apos;, &apos;/&apos;, &apos;-&apos;))</test>
    <result-string>xs:string("1999-01-02")</result-string>
    <result>
      <assert-string-value>1999-01-02</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-translate-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("XML Query")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(translate(&apos;xml query&apos;, &apos;qlmx&apos;, &apos;QLMX&apos;))</test>
    <result-string>xs:string("XML Query")</result-string>
    <result>
      <assert-string-value>XML Query</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-translate-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("Query")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(translate(&apos;xml query&apos;, &apos;qlmx &apos;, &apos;Q&apos;))</test>
    <result-string>xs:string("Query")</result-string>
    <result>
      <assert-string-value>Query</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-translate-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("uery")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(translate(&apos;xml query&apos;, &apos;qlmx &apos;, &apos;&apos;))</test>
    <result-string>xs:string("uery")</result-string>
    <result>
      <assert-string-value>uery</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-translate-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("xml query")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(translate(&apos;xml query&apos;, &apos;abcd&apos;, &apos;ABCD&apos;))</test>
    <result-string>xs:string("xml query")</result-string>
    <result>
      <assert-string-value>xml query</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-translate-6"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(translate(&apos;&apos;, &apos;qlmx &apos;, &apos;Q&apos;))</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-translate-7"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(translate((), &apos;qlmx &apos;, &apos;Q&apos;))</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-translate-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("1999-01-02"),xs:string("XML Query"),xs:string("Query"),xs:string("uery"),xs:string("xml query"),xs:string(""),xs:string(""))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(translate(&apos;1999/01/02&apos;, &apos;/&apos;, &apos;-&apos;), translate(&apos;xml query&apos;, &apos;qlmx&apos;, &apos;QLMX&apos;), translate(&apos;xml query&apos;, &apos;qlmx &apos;, &apos;Q&apos;), translate(&apos;xml query&apos;, &apos;qlmx &apos;, &apos;&apos;), translate(&apos;xml query&apos;, &apos;abcd&apos;, &apos;ABCD&apos;), translate(&apos;&apos;, &apos;qlmx &apos;, &apos;Q&apos;), translate((), &apos;qlmx &apos;, &apos;Q&apos;))</test>
    <result-string>xs:string("1999-01-02 XML Query Query uery xml query  ")</result-string>
    <result>
      <assert-string-value>1999-01-02 XML Query Query uery xml query  </assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-true-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:boolean("true")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(true())</test>
    <result-string>xs:boolean("true")</result-string>
    <result>
      <assert-true/>
    </result>
  </test-case>
  <test-case name="functx-fn-upper-case-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("QUERY")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(upper-case(&apos;query&apos;))</test>
    <result-string>xs:string("QUERY")</result-string>
    <result>
      <assert-string-value>QUERY</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-upper-case-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("QUERY")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(upper-case(&apos;QUERY&apos;))</test>
    <result-string>xs:string("QUERY")</result-string>
    <result>
      <assert-string-value>QUERY</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-upper-case-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("QUERY")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(upper-case(&apos;Query&apos;))</test>
    <result-string>xs:string("QUERY")</result-string>
    <result>
      <assert-string-value>QUERY</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-upper-case-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("QUERY-123")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(upper-case(&apos;query-123&apos;))</test>
    <result-string>xs:string("QUERY-123")</result-string>
    <result>
      <assert-string-value>QUERY-123</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-upper-case-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:string("QUERY"),xs:string("QUERY"),xs:string("QUERY"),xs:string("QUERY-123"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(upper-case(&apos;query&apos;), upper-case(&apos;QUERY&apos;), upper-case(&apos;Query&apos;), upper-case(&apos;query-123&apos;))</test>
    <result-string>(xs:string("QUERY"),xs:string("QUERY"),xs:string("QUERY"),xs:string("QUERY-123"))</result-string>
    <result>
      <assert-string-value>QUERY QUERY QUERY QUERY-123</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-year-from-date-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("2006")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(year-from-date(xs:date(&apos;2006-08-15&apos;)))</test>
    <result-string>xs:integer("2006")</result-string>
    <result>
      <assert-eq>2006</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-year-from-dateTime-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("2006")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(year-from-dateTime( xs:dateTime(&apos;2006-08-15T10:30:23&apos;)))</test>
    <result-string>xs:integer("2006")</result-string>
    <result>
      <assert-eq>2006</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-years-from-duration-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("3")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(years-from-duration( xs:yearMonthDuration(&apos;P3Y&apos;)))</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-years-from-duration-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("3")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(years-from-duration( xs:yearMonthDuration(&apos;P3Y11M&apos;)))</test>
    <result-string>xs:integer("3")</result-string>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-years-from-duration-3"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("-1")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(years-from-duration( xs:yearMonthDuration(&apos;-P18M&apos;)))</test>
    <result-string>xs:integer("-1")</result-string>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-years-from-duration-4"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("2")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(years-from-duration( xs:yearMonthDuration(&apos;P1Y18M&apos;)))</test>
    <result-string>xs:integer("2")</result-string>
    <result>
      <assert-eq>2</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-years-from-duration-5"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:integer("1")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(years-from-duration( xs:yearMonthDuration(&apos;P12M&apos;)))</test>
    <result-string>xs:integer("1")</result-string>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  <test-case name="functx-fn-years-from-duration-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">(xs:integer("3"),xs:integer("3"),xs:integer("-1"),xs:integer("2"),xs:integer("1"))</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(years-from-duration( xs:yearMonthDuration(&apos;P3Y&apos;)), years-from-duration( xs:yearMonthDuration(&apos;P3Y11M&apos;)), years-from-duration( xs:yearMonthDuration(&apos;-P18M&apos;)), years-from-duration( xs:yearMonthDuration(&apos;P1Y18M&apos;)), years-from-duration( xs:yearMonthDuration(&apos;P12M&apos;)))</test>
    <result-string>(xs:integer("3"),xs:integer("3"),xs:integer("-1"),xs:integer("2"),xs:integer("1"))</result-string>
    <result>
      <assert-string-value>3 3 -1 2 1</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-zero-or-one-1"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">()</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(zero-or-one( () ))</test>
    <result-string>xs:string("")</result-string>
    <result>
      <assert-string-value/>
    </result>
  </test-case>
  <test-case name="functx-fn-zero-or-one-2"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("a")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(zero-or-one(&apos;a&apos;))</test>
    <result-string>xs:string("a")</result-string>
    <result>
      <assert-string-value>a</assert-string-value>
    </result>
  </test-case>
  <test-case name="functx-fn-zero-or-one-all"><response-string xmlns:qt="http://www.w3.org/2010/09/qt-fots-catalog" xmlns="http://www.w3.org/2010/09/qt-fots-catalog">xs:string("a")</response-string>
    <description/>
    <created by="Frans Englich" on="2008-05-16"/>
    <test>(zero-or-one( () ), zero-or-one(&apos;a&apos;))</test>
    <result-string>xs:string("a")</result-string>
    <result>
      <assert-string-value>a</assert-string-value>
    </result>
  </test-case>
</test-set>