<!--
 * @author Alain Couthures <alain.couthures@agencexml.com>
 * @licence LGPL - See file 'LICENSE.md' in this project.
 * @module dispatch
-->
<xsl:template match="xforms:dispatch" mode="script" priority="1" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xforms="http://www.w3.org/2002/xforms">
	<xsl:param name="parentworkid"/>
	<xsl:param name="workid" select="concat(position(),'_',$parentworkid)"/>
	<xsl:apply-templates select="@*" mode="scriptattr"/>
	<js xmlns="">
		<xsl:text>var </xsl:text>
		<xsl:value-of select="$vn_pf"/>
		<xsl:text>dispatch_</xsl:text>
		<xsl:value-of select="$workid"/>
		<xsl:text> = new XsltForms_dispatch(</xsl:text>
		<xsl:value-of select="$vn_subform"/>
		<xsl:text>,</xsl:text>
		<xsl:choose>
			<xsl:when test="xforms:name/@value">
				<xsl:for-each select="xforms:name[1]">
					<xsl:call-template name="toScriptBinding"/>
				</xsl:for-each>
			</xsl:when>
			<xsl:when test="xforms:name/text()">
				<xsl:call-template name="toScriptParam"><xsl:with-param name="p" select="normalize-space(xforms:name/text())"/></xsl:call-template>
			</xsl:when>
			<xsl:otherwise>
				<xsl:call-template name="toScriptParam"><xsl:with-param name="p" select="@name"/></xsl:call-template>
			</xsl:otherwise>
		</xsl:choose>
		<xsl:text>,</xsl:text>
		<xsl:choose>
			<xsl:when test="xforms:targetid/@value">
				<xsl:for-each select="xforms:targetid[1]">
					<xsl:call-template name="toScriptBinding"/>
				</xsl:for-each>
			</xsl:when>
			<xsl:when test="xforms:targetid/text()">
				<xsl:call-template name="toScriptParam"><xsl:with-param name="p" select="normalize-space(xforms:targetid/text())"/></xsl:call-template>
			</xsl:when>
			<xsl:otherwise>
				<xsl:call-template name="toScriptParam"><xsl:with-param name="p" select="@targetid"/></xsl:call-template>
			</xsl:otherwise>
		</xsl:choose>
		<xsl:text>,{</xsl:text>
		<xsl:for-each select="xforms:property">
			<xsl:text>"</xsl:text>
			<xsl:value-of select="@name"/>
			<xsl:text>":</xsl:text>
			<xsl:choose>
				<xsl:when test="@value">
					<xsl:call-template name="toScriptBinding"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:call-template name="toScriptParam"><xsl:with-param name="p" select="normalize-space(text())"/></xsl:call-template>
				</xsl:otherwise>
			</xsl:choose>
			<xsl:if test="position() != last()">
				<xsl:text>,</xsl:text>
			</xsl:if>
		</xsl:for-each>
		<xsl:text>},</xsl:text>
		<xsl:call-template name="toScriptParam"><xsl:with-param name="p" select="@if"/></xsl:call-template>
		<xsl:text>,</xsl:text>
		<xsl:call-template name="toScriptParam"><xsl:with-param name="p" select="@while"/></xsl:call-template>
		<xsl:text>,</xsl:text>
		<xsl:call-template name="toScriptParam"><xsl:with-param name="p" select="@iterate"/></xsl:call-template>
		<xsl:if test="@delay | xforms:delay">
			<xsl:text>,</xsl:text>
			<xsl:choose>
				<xsl:when test="xforms:delay/@value">
					<xsl:for-each select="xforms:delay[1]">
						<xsl:call-template name="toScriptBinding"/>
					</xsl:for-each>
				</xsl:when>
				<xsl:when test="xforms:delay/text()">
					<xsl:call-template name="toScriptParam"><xsl:with-param name="p" select="normalize-space(xforms:delay/text())"/></xsl:call-template>
				</xsl:when>
				<xsl:otherwise>
					<xsl:call-template name="toScriptParam"><xsl:with-param name="p" select="@delay"/></xsl:call-template>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:if>
		<xsl:text>);</xsl:text>
	</js>
	<xsl:apply-templates select="node()" mode="script">
		<xsl:with-param name="parentworkid" select="$workid"/>
	</xsl:apply-templates>
</xsl:template>