<!--
 * @author Alain Couthures <alain.couthures@agencexml.com>
 * @licence LGPL - See file 'LICENSE.md' in this project.
 * @module elements
-->
<xsl:template match="*" mode="xml2string" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
	<xsl:param name="root"/>
	<xsl:text>&lt;</xsl:text>
	<xsl:value-of select="name()"/>
	<xsl:variable name="parent" select=".."/>
	<xsl:variable name="element" select="."/>
	<xsl:choose>
		<xsl:when test="namespace::*">
			<xsl:for-each select="namespace::*[name()!='xml']">
				<xsl:variable name="prefix" select="name()"/>
				<xsl:variable name="uri" select="."/>
				<xsl:if test="(not($parent/namespace::*[name()=$prefix and . = $uri]) or $root) and (($element|$element//*|$element//@*)[namespace-uri()=$uri])">\x20xmlns<xsl:if test="$prefix">:<xsl:value-of select="$prefix"/></xsl:if>="<xsl:value-of select="$uri"/>"</xsl:if>
			</xsl:for-each>
		</xsl:when>
		<xsl:otherwise>
			<xsl:variable name="prefixes"><xsl:for-each select="(. | @*)[name() != local-name() and not(starts-with(name(), 'xml:'))]"><xsl:sort select="substring-before(name(),':')"/><xsl:value-of select="substring-before(name(),':')"/>:<xsl:value-of select="namespace-uri()"/>|</xsl:for-each></xsl:variable>
			<xsl:call-template name="nmdecls"><xsl:with-param name="pfs" select="$prefixes"/></xsl:call-template>
			<xsl:if test="name() = local-name() and ($root or namespace-uri() != namespace-uri($parent))">\x20xmlns="<xsl:value-of select="namespace-uri()"/>"</xsl:if>
		</xsl:otherwise>
	</xsl:choose>
	<xsl:apply-templates select="@*" mode="xml2string"/>
	<xsl:choose>
		<xsl:when test="node()">&gt;<xsl:apply-templates select="node()" mode="xml2string"><xsl:with-param name="root" select="false()"/></xsl:apply-templates>&lt;<xsl:if test="name() = 'script'">\</xsl:if>/<xsl:value-of select="name()"/>&gt;</xsl:when>
		<xsl:otherwise>/&gt;</xsl:otherwise>
	</xsl:choose>
	<xsl:text/>
</xsl:template>