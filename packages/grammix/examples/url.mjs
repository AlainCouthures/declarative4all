// Generated by grammix from url.ixml

import * as grammix from './grammix.mjs';

let rules = [[[1,"url","url",[],[[0,1,"scheme","scheme"],[0,2,":"],[0,1,"authority","authority"],[0,1,"path","path"]]],[1,"scheme","scheme",[],[[0,1,"letter","letter"],[-1,1,"scheme_1_repeat1_1","scheme_1_repeat1_1"]]],[-1,"scheme_1_repeat1_1","scheme_1_repeat1_1",[],[[-1,1,"scheme_1_repeat1_1","scheme_1_repeat1_1"],[0,1,"letter","letter"]]],[-1,"scheme_1_repeat1_1","scheme_1_repeat1_1",[],[]],[1,"authority","authority",[],[[0,1,"authority_1_literal_1","authority_1_literal_1"],[0,1,"host","host"]]],[-1,"authority_1_literal_1","authority_1_literal_1",[],[[-1,2,"/"],[-1,2,"/"],[0,4,"//"]]],[1,"host","host",[],[[0,1,"sub","sub"],[-1,1,"host_1_repeat1_1","host_1_repeat1_1"]]],[-1,"host_1_repeat1_1","host_1_repeat1_1",[],[[-1,1,"host_1_repeat1_1","host_1_repeat1_1"],[0,2,"."],[0,1,"sub","sub"]]],[-1,"host_1_repeat1_1","host_1_repeat1_1",[],[]],[1,"sub","sub",[],[[0,1,"letter","letter"],[-1,1,"sub_1_repeat1_1","sub_1_repeat1_1"]]],[-1,"sub_1_repeat1_1","sub_1_repeat1_1",[],[[-1,1,"sub_1_repeat1_1","sub_1_repeat1_1"],[0,1,"letter","letter"]]],[-1,"sub_1_repeat1_1","sub_1_repeat1_1",[],[]],[1,"path","path",[],[[-1,1,"path_1_repeat1_1_1_alts_1","path_1_repeat1_1_1_alts_1"],[-1,1,"path_1_repeat1_1","path_1_repeat1_1"]]],[-1,"path_1_repeat1_1","path_1_repeat1_1",[],[[-1,1,"path_1_repeat1_1","path_1_repeat1_1"],[-1,1,"path_1_repeat1_1_1_alts_1","path_1_repeat1_1_1_alts_1"]]],[-1,"path_1_repeat1_1","path_1_repeat1_1",[],[]],[-1,"path_1_repeat1_1_1_alts_1","path_1_repeat1_1_1_alts_1",[],[[0,2,"/"],[0,1,"seg","seg"]]],[1,"seg","seg",[],[[-1,1,"seg_1_repeat0_1","seg_1_repeat0_1"]]],[-1,"seg_1_repeat0_1","seg_1_repeat0_1",[],[[-1,1,"seg_1_repeat0_1","seg_1_repeat0_1"],[0,1,"fletter","fletter"]]],[-1,"seg_1_repeat0_1","seg_1_repeat0_1",[],[]],[-1,"letter","letter",[],[[0,3,/[a-z]/u]]],[-1,"letter","letter",[],[[0,3,/[A-Z]/u]]],[-1,"letter","letter",[],[[0,3,/[0-9]/u]]],[-1,"fletter","fletter",[],[[0,1,"letter","letter"]]],[-1,"fletter","fletter",[],[[0,2,"."]]]],[[-1,"#initialRule","#initialRule",[],[[-1,5,"url"],[-1,1,"url","url"],[-1,6,"url"]]],[-1,"url","url",[],[[-1,5,"scheme"],[-1,1,"scheme","scheme"],[-1,6,"scheme"],[0,2,":"],[-1,5,"authority"],[-1,1,"authority","authority"],[-1,6,"authority"],[-1,5,"path"],[-1,1,"path","path"],[-1,6,"path"]]],[-1,"scheme","scheme",[],[[-1,1,"letter","letter"],[-1,1,"scheme_1_repeat1_1","scheme_1_repeat1_1"]]],[-1,"scheme_1_repeat1_1","scheme_1_repeat1_1",[],[[-1,1,"scheme_1_repeat1_1","scheme_1_repeat1_1"],[-1,1,"letter","letter"]]],[-1,"scheme_1_repeat1_1","scheme_1_repeat1_1",[],[]],[-1,"authority","authority",[],[[-1,1,"authority_1_literal_1","authority_1_literal_1"],[-1,5,"host"],[-1,1,"host","host"],[-1,6,"host"]]],[-1,"authority_1_literal_1","authority_1_literal_1",[],[[-1,2,"/"],[-1,2,"/"],[0,4,"//"]]],[-1,"host","host",[],[[-1,5,"sub"],[-1,1,"sub","sub"],[-1,6,"sub"],[-1,1,"host_1_repeat1_1","host_1_repeat1_1"]]],[-1,"host_1_repeat1_1","host_1_repeat1_1",[],[[-1,1,"host_1_repeat1_1","host_1_repeat1_1"],[0,2,"."],[-1,5,"sub"],[-1,1,"sub","sub"],[-1,6,"sub"]]],[-1,"host_1_repeat1_1","host_1_repeat1_1",[],[]],[-1,"sub","sub",[],[[-1,1,"letter","letter"],[-1,1,"sub_1_repeat1_1","sub_1_repeat1_1"]]],[-1,"sub_1_repeat1_1","sub_1_repeat1_1",[],[[-1,1,"sub_1_repeat1_1","sub_1_repeat1_1"],[-1,1,"letter","letter"]]],[-1,"sub_1_repeat1_1","sub_1_repeat1_1",[],[]],[-1,"path","path",[],[[-1,1,"path_1_repeat1_1_1_alts_1","path_1_repeat1_1_1_alts_1"],[-1,1,"path_1_repeat1_1","path_1_repeat1_1"]]],[-1,"path_1_repeat1_1","path_1_repeat1_1",[],[[-1,1,"path_1_repeat1_1","path_1_repeat1_1"],[-1,1,"path_1_repeat1_1_1_alts_1","path_1_repeat1_1_1_alts_1"]]],[-1,"path_1_repeat1_1","path_1_repeat1_1",[],[]],[-1,"path_1_repeat1_1_1_alts_1","path_1_repeat1_1_1_alts_1",[],[[0,2,"/"],[-1,5,"seg"],[-1,1,"seg","seg"],[-1,6,"seg"]]],[-1,"seg","seg",[],[[-1,1,"seg_1_repeat0_1","seg_1_repeat0_1"]]],[-1,"seg_1_repeat0_1","seg_1_repeat0_1",[],[[-1,1,"seg_1_repeat0_1","seg_1_repeat0_1"],[-1,1,"fletter","fletter"]]],[-1,"seg_1_repeat0_1","seg_1_repeat0_1",[],[]],[-1,"letter","letter",[],[[0,3,/[a-z]/u]]],[-1,"letter","letter",[],[[0,3,/[A-Z]/u]]],[-1,"letter","letter",[],[[0,3,/[0-9]/u]]],[-1,"fletter","fletter",[],[[-1,1,"letter","letter"]]],[-1,"fletter","fletter",[],[[0,2,"."]]]]];
const grammar = grammix.fromRules(rules);
export const toXml = s => grammar.parse(s).toString();
export const fromXml = s => grammar.normalize(s);
export const normalize = s => grammar.normalize(toXml(s));
