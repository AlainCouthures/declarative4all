// Generated by grammix from data.ixml

import * as grammix from './grammix.mjs';

let rules = [[[1,"data","data",[],[[0,1,"value","value"],[-1,1,"data_1_repeat1_1","data_1_repeat1_1"],[2,1,"source","source"]]],[-1,"data_1_repeat1_1","data_1_repeat1_1",[],[[-1,1,"data_1_repeat1_1","data_1_repeat1_1"],[-1,2,","],[0,1,"value","value"]]],[-1,"data_1_repeat1_1","data_1_repeat1_1",[],[]],[1,"source","source",[],[[0,4,"ixml"]]],[1,"value","value",[],[[0,1,"pos","pos"]]],[1,"value","value",[],[[0,1,"neg","neg"]]],[-1,"pos","pos",[],[[0,4,"+"],[0,1,"digit","digit"],[-1,1,"pos_1_repeat1_1","pos_1_repeat1_1"]]],[-1,"pos_1_repeat1_1","pos_1_repeat1_1",[],[[-1,1,"pos_1_repeat1_1","pos_1_repeat1_1"],[0,1,"digit","digit"]]],[-1,"pos_1_repeat1_1","pos_1_repeat1_1",[],[]],[-1,"neg","neg",[],[[0,4,"-"],[-1,2,"("],[0,1,"digit","digit"],[-1,1,"neg_1_repeat1_1","neg_1_repeat1_1"],[-1,2,")"]]],[-1,"neg_1_repeat1_1","neg_1_repeat1_1",[],[[-1,1,"neg_1_repeat1_1","neg_1_repeat1_1"],[0,1,"digit","digit"]]],[-1,"neg_1_repeat1_1","neg_1_repeat1_1",[],[]],[-1,"digit","digit",[],[[0,3,/[0-9]/u]]]],[[-1,"#initialRule","#initialRule",[],[[-1,5,"data"],[-1,1,"data","data"],[-1,6,"data"]]],[-1,"data","data",[],[[-1,5,"value"],[-1,1,"value","value"],[-1,6,"value"],[-1,1,"data_1_repeat1_1","data_1_repeat1_1"],[0,7,"source","source"]]],[-1,"data_1_repeat1_1","data_1_repeat1_1",[],[[-1,1,"data_1_repeat1_1","data_1_repeat1_1"],[0,4,","],[-1,5,"value"],[-1,1,"value","value"],[-1,6,"value"]]],[-1,"data_1_repeat1_1","data_1_repeat1_1",[],[]],[-1,"source","source",[],[[-1,2,"i"],[-1,2,"x"],[-1,2,"m"],[-1,2,"l"]]],[-1,"value","value",[],[[-1,1,"pos","pos"]]],[-1,"value","value",[],[[-1,1,"neg","neg"]]],[-1,"pos","pos",[],[[-1,2,"+"],[-1,1,"digit","digit"],[-1,1,"pos_1_repeat1_1","pos_1_repeat1_1"]]],[-1,"pos_1_repeat1_1","pos_1_repeat1_1",[],[[-1,1,"pos_1_repeat1_1","pos_1_repeat1_1"],[-1,1,"digit","digit"]]],[-1,"pos_1_repeat1_1","pos_1_repeat1_1",[],[]],[-1,"neg","neg",[],[[-1,2,"-"],[0,4,"("],[-1,1,"digit","digit"],[-1,1,"neg_1_repeat1_1","neg_1_repeat1_1"],[0,4,")"]]],[-1,"neg_1_repeat1_1","neg_1_repeat1_1",[],[[-1,1,"neg_1_repeat1_1","neg_1_repeat1_1"],[-1,1,"digit","digit"]]],[-1,"neg_1_repeat1_1","neg_1_repeat1_1",[],[]],[-1,"digit","digit",[],[[0,3,/[0-9]/u]]]]];
const grammar = grammix.fromRules(rules);
export const toXml = s => grammar.parse(s).toString();
export const fromXml = s => grammar.normalize(s);
export const normalize = s => grammar.normalize(toXml(s));
