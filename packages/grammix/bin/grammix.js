#!/usr/bin/env node
async function mainCLI(argv = []) {
  const { readFile, stat } = await import('node:fs/promises');
  let grammarFile;
  let outputFile;
  for(let i = 0; i < argv.length; i++) {
    const arg = argv[i];
    if (arg.startsWith('-')) {
      if (arg === '--help' || arg === '-h') {
        console.log('Usage: node grammix.js <grammar-file>');
        return;
      }
      if (arg === '--version' || arg === '-v') {
        const pkg = await import('../package.json', { assert: { type: 'json' } });
        console.log(`grammix version ${pkg.version}`);
        return;
      }
      if ((arg === '--output' || arg === '-o') && i + 1 < argv.length) {
        outputFile = argv[++i];
        continue;
      }
      console.error(`Unknown option: ${arg}`);
      process.exitCode = 1;
      return;
    } else {
      if (!grammarFile) {
        grammarFile = arg;
      } else {
        console.error(`Unexpected argument: ${arg}`);
        process.exitCode = 1;
        return;
      }
    }
  }
  if (!grammarFile) {
    console.error('Usage: node grammix.js <grammar-file>');
    process.exitCode = 1;
    return;
  }
  if (! await stat(grammarFile).catch(() => false)) {
    console.error(`File not found: ${grammarFile}`);
    process.exitCode = 1;
    return;
  }
  const grammarSource = await readFile(grammarFile, 'utf-8');
  const grammar = grammix.fromIXml(grammarSource);
  let res = `// Generated by grammix from ${grammarFile}

import * as grammix from './grammix.mjs';

let rules = ${grammar.toRules()};
const grammar = grammix.fromRules(rules);
export const toXml = s => grammar.parse(s).toString();
export const fromXml = s => grammar.normalize(s);
export const normalize = s => grammar.normalize(toXml(s));
`;
  if (outputFile) {
    await import('node:fs/promises').then(fs => fs.writeFile(outputFile, res, 'utf-8'));
    return;
  }
  console.log(res);
}

let grammix;
try {
  grammix = await import('./grammix.mjs');
  try {
    await mainCLI(process.argv.slice(2));
  } catch (err) {
    console.error('Runtime error:', err?.stack || err);
    process.exitCode = 1;
  }
} catch (err) {
  console.error('Failed to load grammix.mjs module:', err?.stack || err);
  process.exitCode = 1;
}